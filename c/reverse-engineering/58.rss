<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Reverse Engineering - 0x00sec - The Home of the Hacker</title>
    <link>https://0x00sec.org/c/reverse-engineering/58</link>
    <description>Topics in the &#39;Reverse Engineering&#39; category </description>
    
      <lastBuildDate>Sun, 28 Apr 2024 23:36:28 +0000</lastBuildDate>
      <atom:link href="https://0x00sec.org/c/reverse-engineering/58.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Reversing challenge</title>
          <dc:creator><![CDATA[dedi0x90]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>I came across a reverse engineering challenge ;</p>
<p>when i tried to run the comand file i got this :<br>
$ file cast.bin<br>
cast.bin: ELF 64-bit MSB <em>unknown arch 0x3e00</em> (SYSV)</p>
<p>lets run readelf;<br>
$ readelf -h cast.bin<br>
ELF Header:<br>
Magic:   7f 45 4c 46 02 02 01 00 00 00 00 00 00 00 00 00<br>
Class:                             ELF64<br>
Data:                              2’s complement, big endian<br>
Version:                           1 (current)<br>
OS/ABI:                            UNIX - System V<br>
ABI Version:                       0<br>
Type:                              : 300<br>
Machine:                           : 0x3e00<br>
Version:                           0x1000000<br>
Entry point address:               0xc9c4010000000000<br>
Start of program headers:          4611686018427387904 (bytes into file)<br>
Start of section headers:          -3417382194685935616 (bytes into file)<br>
Flags:                             0x0<br>
Size of this header:               16384 (bytes)<br>
Size of program headers:           14336 (bytes)<br>
Number of program headers:         3328<br>
Size of section headers:           16384 (bytes)<br>
Number of section headers:         9728<br>
Section header string table index: 9472<br>
readelf: Warning: The e_shentsize field in the ELF header is larger than the size of an ELF section header<br>
readelf: Error: Reading 159383552 bytes extends past end of file for section headers<br>
readelf: Warning: The e_phentsize field in the ELF header is larger than the size of an ELF program header<br>
readelf: Error: Reading 47710208 bytes extends past end of file for program headers</p>
<p>i edited the 5 bit and rerun the command ;<br>
$ file cast.bin<br>
cast.bin: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, stripped</p>
<p>when i  run objdump and readelf i get this :<br>
$ objdump -d cast.bin<br>
BFD: warning: cast.bin has a corrupt string table index<br>
$ readelf -h cast.bin<br>
ELF Header:<br>
Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00<br>
Class:                             ELF64<br>
Data:                              2’s complement, little endian<br>
Version:                           1 (current)<br>
OS/ABI:                            UNIX - System V<br>
ABI Version:                       0<br>
Type:                              DYN (Position-Independent Executable file)<br>
Machine:                           Advanced Micro Devices X86-64<br>
Version:                           0x1<br>
Entry point address:               0x1c4c9<br>
Start of program headers:          64 (bytes into file)<br>
Start of section headers:          365520 (bytes into file)<br>
Flags:                             0x0<br>
Size of this header:               64 (bytes)<br>
Size of program headers:           56 (bytes)<br>
Number of program headers:         13<br>
Size of section headers:           64 (bytes)<br>
Number of section headers:         38<br>
Section header string table index: 37<br>
readelf: Error: no .dynamic section in the dynamic segment</p>
<p>any ressources or solution  that can help<br>
this is the link for the unpatched  binary :</p><aside class="onebox allowlistedgeneric" data-onebox-src="https://gofile.io/d/s88DAl">
  <header class="source">

      <a href="https://gofile.io/d/s88DAl" target="_blank" rel="noopener nofollow ugc">gofile.io</a>
  </header>

  <article class="onebox-body">
    <img src="https://gofile.io/dist/img/logo-small-og.png" class="thumbnail onebox-avatar" width="300" height="300">

<h3><a href="https://gofile.io/d/s88DAl" target="_blank" rel="noopener nofollow ugc">cast (copy 1).bin</a></h3>

  <p>359.3 KiB</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/reversing-challenge/40297">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/reversing-challenge/40297</link>
          <pubDate>Sun, 28 Apr 2024 23:36:28 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-40297</guid>
          <source url="https://0x00sec.org/t/reversing-challenge/40297.rss">Reversing challenge</source>
        </item>
        <item>
          <title>[ReverseMe]Alpha</title>
          <dc:creator><![CDATA[0xf00I]]></dc:creator>
          <category>Challenges</category>
          <description><![CDATA[
            <h1><a name="reverseme-1" class="anchor" href="https://0x00sec.org#reverseme-1"></a>ReverseMe</h1>
<p>I’ve got another challenge! It’s been a while since I posted my first challenge, <a href="https://0x00sec.org/t/reverseme-cipher/">Cipher</a>. So, I had some free time on my hands and wrote a simple ReverseMe. Difficulty? I’d say it’s somewhere between easy and intermediate, maybe easy depending on your current knowledge. Enjoy!</p>
<h1><a name="executable-2" class="anchor" href="https://0x00sec.org#executable-2"></a>Executable</h1>
<pre data-code-wrap="bs"><code class="lang-plaintext">H4sIAIceH2YC/+1bbWwUxxmevfPZZ2P7DrAbAqQ+IlJwg882GAQhDjbmYF0BMh8mpGo51r61fe75bN2tg41wcHsJ4XBcQdTSzx+kP5Ca9gdJoyhBEbYhPQeEogNVhKgfchGJ7mrTukApYNfbd/ZmfLNTL46iSu2Pfa27Z97nfd/52pnZ8e3sYc/
WzRZBQFSs6DmENdfclF5F+KqV0y7ArUV58P0EWowyQc9g/Ti8btGjfbqcVNwCa0rncTHSo8BgBjKWjmw9Imc6zsboPP7Spkc2TivPRXgOTwl6ZONw38RLUnq8Uo8bSTt7rfo4C4kbIXEjlRwKeqT9mUE+a0l+PPLV5+P2Ej8eNyE90r7f9Zni+zL
l1ZG4FcTA41akR1reDojLRF9c6OXdScozug5lFj3Sy1ga8DesqSgN+EoC/mBnV0nX2jUlayrc4Xb3yul6OcmY2rK9Hll60WAGE4/TBWScY/sbOyuWFiz7Yclbn3b9fqDrN69+980Hl2geAvGh88LCtAPr85nxhIQ3UC+4zCf5Y7kif9zWVC85193uW
2zUH9vhM28G/lfMNWJlvoH/kwb8IQN+gwHfbMALBvywQT2fMPDfYsAXG/BlBvwCAz5iwF8zqGeegX+LAd9G+pqXLPjMRQuRq1o/r/YTvorjUVOzrIRRWPH5gygckOUO1NEJhNzlV5Dib5PBFArIQdShhKRGGaAlJEs+byN8K5qxMdwRRG1SINDeiLx
emBaN3rAihRRvm4SzVHxyKITCISnoA3Njl+Rt8gelgP8g5BXyB5Um1HQg5IescCSeP2vQlq21G2u8K90r3aun06sqkLd29zYv5CY3+8OKHNq9rSbQHpR3Sw0BGXJubmsPkoK9KdcZHfHsEWDWpP+oZtFpVmQl482CjjHrRedCfzaedT8g3DsnTmbiPE
8h/box3b/k4l3n+EFy/zxapeepPrghhZnMmoHlI4Zn14E4w2cz/HWGdzL8CMPPZ3g6bmzM+qHdrxm+kB1wVelxZ2VoO8Oz92Mnw9vYecTw7DruYvgshl/O8HZ2njJ8DsOvZfg5bPUZPpfhRYbPY/g6hs9n+L0M72D4/VXsvGTmNcPPQ6aYYoopppjy/
yViZMwu9tl+WwrJVwYVixoXIx/aL0zb1dWXwKQ+dRm+HUVVkMI63rWi5IgK8tR5rOMtTDKu6WexjrcuyUFNfxvreOuQPKPpb2IdbxmSpzT9F1jHW4XkcU3/KdbxFiHZq+mvYx3fRpMdmn4M63hLkNyv6d/DOt4SJes0/SDW8dYgWaXpIazjLUGyTNNb
sY63AkmXpjdgHW8Bkk5Nv+SGTfNx2v7yW7XRK/vE6A0xcnO8brenfLD8othfGYUGqYWHwfVuk9tR9LLmi/sHbEO4L/ttuB/EdfeVQujefe5U92arI46iXux7gSD4n9D8V+N2icVTYnRcHPrrBnHovlUUYuKVKaUAMighGdjVkSZH0aZ0/B3HVx/2Vva
U4q3r0/VipDLHjXONfqbkin2Vp0FJFEOrEj74itnqwU/4NsTq4pMHwFgPMTAYXAO4KxOvTKmqGPWMi5GecdSZM4Cvb+IUkAM4KLEHUtHhRCn26vOMx9BODGJkUIghD0laYmgPSVrTbEba1xZDu0gyM4ZqSTIrhraTpD2Gtojlg4otgYdPK9p7HITYsm
PIS5I56eA56Sxz0w55MbSZJPNjqJ4kHVDQsGcSt2e0J3H3X9CUxrjov1pjX/KyOPQXl3B+6KEtOjT0oKj4UrR+rK9+7DtXnyuORz1jkZ6xxw9/pc8z1i9KffWTWn5CPHrpqHO0DGyriG0ZZyvQ2Ek9G/FMCpGeySzHkW411ZmphiOcvHiBXhUx2pMAJ
iFCr0cnwTFy365kvadV/lnaiuV9nkncBuwnxB3vIse5OFCRwep156mzgxb40tX38EVNFxHtGRv2TNRV79oV86ho2HNvc3Xt1pjnIYImISVf7PdM4NInJlR1NBe0e1i7BdpxfTXfx+WcxXmfwyltwGhlJ6pwxV8Z7C6BAf3hCjxKh87iiXxO0CaCTZmD
ueGECH6pEefGEf22fz6NDZ77Yl/9fS0r9erASmof/T4pvQwqNf5+alIVtkJvauXjDD+BWsLkIcP4U9D+c1j126ZyNO9UXStmdOorHMNV6ffEz7lI3usntEbROXIIq2CHKnyk5XcNO917CLNvky2OZigXfMFjPp5Rnkm4XKD4QdGqcfGCtj7rVmRTTDH
FFFNMMcUUU0z58oKff9RVb6+tWbIkBz3fIinLwi6lRXa1Sc3+RldYCfmDzc+4Uj+1C4us60WU+j3+7t9UFT8juTmuqh9gHdAH+Me/q+rvAMN3VPUu4DXAAtgZL7yrqhWAPwasE9LPHoSDO5HQ5RQW5WbZjwtZTszjh5hHIT/2+dfM/ggtJf57oT7j2C
HfuTl/wTcccw7Ye9GGheu/vmrpkzQeP8N2Qb7s8wQc+y2cL9T7JN7BV+c7j1hq8jKtJwQoQrPjZ5sHbqtqI2Lsln3YrNl/jv/hAfsm1n5YM2vPD3H//AnsL7F2UvZ1+FRBH/1Bl/cnqWBTTDHFFFNMMcUUU0wxxZRHCTlsRM+f0bNlxwhOn4Eih8Xo2
adT5NDX40Sn59wWEZ3+O7KQID3vtpiz/2NKbdfyI4fF6BmwEZKgZ7/ixE7PcI0TpGe3FhAs5JpHz6AlyPk2ekauTtD/n0jPkj1G0GXX82VZ+nrT8rO58ifUVHuo6xTVSbxKdNrP40SPk4Y+ILr1fzws6PlxXtaQcbCZ4B6CTQRfJHiE4EmCpwm+SzBG8
BrBzwneI5g599H1o+cieRltFKOft+a90CpM5S698aD3Yt5uMXrDYbsslg+K0eEzz47eAeu28ovVO25M1kb/XBsZslb3ZhcA5jVVR7LVxAdwiX4C3mfW7xQHShv8wdLScMvzu70QszX6sRi9PfpWa97eVpu31V79zdG30ZaammdcyzfJDX4p6CrHp1TLS
sorikkSIXe4JayEFKkBuf1BRQ51IHewXZHdzcFOd0eovUMOKd0M1dDpD/hK/D5CVW+sLVGkZqTZWqRwC3L7uoPh7rYUKqGU5UU5FPa3B3WKF2whOSBhR5LqCCi4Fn74hqS7uR0SitwF303AglO7T1Ik5JZbvE0hqU32tvhCaS0V6pVCIak7FUHTUILU5m
9EOMdUIal8GsJh5G5sb2uTg8p/Z1zOIXOHzmOj90DSv1fpZT6ZijTe6D0ExK1TVL7GxfPvPyzl/Pl3T9Zx8YesenTNEo/Pqd+DNYLG03WTYhnSr5t8/XeQPrRw6ypFpyW97glMPF3fXkD6dw7oOk1xfJb+l8gaOF1+ph5XcPW3cBgka+r0WecsPZahmet
PpYf0qYVb1ymOG/Qfbf+rJH4jd5+gSO8rmSSGjz+BmHczmPsqxcdmuf6vcfEupx75/udfX/oRF++cq0e7wfineIovf64eezNmLp/KaS6e7iMoZs/S/l9z859/cah4lvh3uHij94mM4s9z8V0uPS4XHr1+XEapc+JWbt9E3zearf/x778OJp7uq65/wfib
pO+t3H1++v0xQT+t7Nx1/BlpP42n7yUMlpL2z1L+LS6e7ssSJP7oLPH3uPhesg/oJRP/dS6eX08nSV40nr7fMK9cv34YxeNXH4UZ/Gh8kcH6x+JMe7tyEp8jPHr9/DdiHNeBgDkAAA==
</code></pre>
<h2><a name="the-binary-3" class="anchor" href="https://0x00sec.org#the-binary-3"></a>The Binary</h2>
<p>save the dump into a <code>foo.txt</code> and run the following command to recover the binary:</p>
<pre><code class="lang-bash">cat foo.txt | base64 -d | gunzip &gt; foo.elf &amp;&amp; chmod +x foo.elf
</code></pre>
<p>Good luck!</p>
            <p><small>5 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/reverseme-alpha/40095">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/reverseme-alpha/40095</link>
          <pubDate>Wed, 17 Apr 2024 01:35:21 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-40095</guid>
          <source url="https://0x00sec.org/t/reverseme-alpha/40095.rss">[ReverseMe]Alpha</source>
        </item>
        <item>
          <title>Get inside of Viber Messenger</title>
          <dc:creator><![CDATA[d1sm4tch]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>Hi all! I need to make my own lightweight web client of that messenger Viber.<br>
So I need somehow get the way of client-server communication(auth, send message, receive message).<br>
I tried to decompile android apk with apktool but haven’t found anything useful.<br>
Also tried to intercept packages with Wireshark and get encrypted TLS with some hardcoded cert (I think so).<br>
Please, help me with ideas I can try!</p>
            <p><small>7 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/get-inside-of-viber-messenger/38612">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/get-inside-of-viber-messenger/38612</link>
          <pubDate>Thu, 04 Jan 2024 07:50:12 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38612</guid>
          <source url="https://0x00sec.org/t/get-inside-of-viber-messenger/38612.rss">Get inside of Viber Messenger</source>
        </item>
        <item>
          <title>I need help about a Delphi file</title>
          <dc:creator><![CDATA[Hack3rcon]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>Hello,<br>
I have an exe file that written in the Delphi programming language. I do not have the source code of this program. This program connects to a server with a specific IP address and now the IP address of that server has changed and this program does not work. I want to change the IP address of this executable file. I don’t know if this is called reverse engineering or decompiling or something else.<br>
What tools are suitable for this work? I would be grateful if someone could guide me.</p>
<p>Thank you.</p>
            <p><small>7 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/i-need-help-about-a-delphi-file/36421">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/i-need-help-about-a-delphi-file/36421</link>
          <pubDate>Wed, 16 Aug 2023 11:11:35 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-36421</guid>
          <source url="https://0x00sec.org/t/i-need-help-about-a-delphi-file/36421.rss">I need help about a Delphi file</source>
        </item>
        <item>
          <title>Need advice on unpacking .dll</title>
          <dc:creator><![CDATA[questione]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>Hello !</p>
<p>I’m trying to unpack a <a href="https://help.autodesk.com/view/MAXDEV/2022/ENU/?guid=Max_Developer_Help_writing_plug_ins_creating_a_plug_in_project_manually_creating_a_new_plug_in_plug_in_file_extensions_html" rel="noopener nofollow ugc">.dll</a>, witch protected by VMProtect.(Win64/Packed.VMProtect.L). DIE detect VMProtect 3.2 - 3.5.<br>
I have tried changing the entry point and rename functions with x96dbg and IDA, using another similar unprotected .dll as an example.<br>
Also I tried to use VMPDump and <a href="https://github.com/can1357/NoVmp" rel="noopener nofollow ugc">NoVMP</a> but it looks like I did something wrong - NoVmp throw an error.</p>
<p>Actually I don’t know how to fix it and unpack the .dll for future editing.<br>
Please, help to understand how to do that.</p>
<p>Here is the <a href="https://mega.nz/folder/9zF0mA4Y#AlaltdoeruWBSQPlM5V6-Q" rel="noopener nofollow ugc">source</a>.</p>
            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/need-advice-on-unpacking-dll/35635">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/need-advice-on-unpacking-dll/35635</link>
          <pubDate>Sun, 18 Jun 2023 14:35:52 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-35635</guid>
          <source url="https://0x00sec.org/t/need-advice-on-unpacking-dll/35635.rss">Need advice on unpacking .dll</source>
        </item>
        <item>
          <title>[ReverseMe]Cipher</title>
          <dc:creator><![CDATA[0xf00]]></dc:creator>
          <category>Challenges</category>
          <description><![CDATA[
            <h2>
<a name="challenge-1" class="anchor" href="https://0x00sec.org#challenge-1"></a>Challenge</h2>
<p>beginner-friendly challenge particularly for those who are just starting to explore the fundamentals of programming and reverse engineering. enjoy</p>
<pre><code class="lang-auto">H4sIALNahmQC/+1be2wUxxmfvfPZB9jnIwHhGgKb9mjN485nHsY8XHzmwOvKSQ3YTSog1/Pd2r7qfOfurQuOaHDlpOFk3DqV2rqtKvAfrZqoVYlKLBMplR0nhqotBfXlqi+nJaoJIXVJIE4DbL/ZnTlmBx8XoVaVqv3M3m+/38xv5pvZ2dlddvbIzoZdNkFA1Ozo4wh7NQsNv4bwUkUmC3BVqAh+H0DLUD74eUw+HidtZnRm6jF0JXbD53EZMqPAYB7KbqMFZkTu2zoH4/O42GlGVqfXJxKeRxuHjA73TY/X8HuqzThA8p
/gdDaiGyC6gWozzghmpOHmka2K9B+PfNi87lGSj8cgMiPt+72vq9F7qa+R6LaRBB73IzPS+naDLh99cKOHdw+pL9tx6LGZkY6z8nispXJDeTzqjccSXYe8h6oqvZUbfKmkb10mLjcZU3UPN+PjNppHxjVNX0R8nH7K23z4k8Ph54f+/Kv7hwpCqZ8e
/9YQLUMgeeh5YWPagfeLmPGE0BDqIZwLtgvyuY625rA7Wz9EYLtvDl5ljg1rC7Lkvy8L78nCP5CFX5OF352FH8gS5/os+bdk4Y9nKacWtg/PwS+BbSEqRe4a8
/hFMC4ieBhUopSqRDq7UWeXmoL9aCyBOpVYQm3FCXE5oaenOhOoIxyPJyOoTVZhKMkoFIocCodaY4lwPPY4dnGJoZQaVtRQRxhKaVVkGdU11NfuCK3zrfNtRKH6podCUVmR22IpVVaaHtoRTybkpnBLHMvbOpIJIg8ZWefMSMaSjflDzK+g/90+b7pKY
/NwSjsyny+0H0TSyUc5fopcN5xcv1F/cruB+dw4n2J4J8NPM/w8hp9h+EKGn2X4InY+IPU7yHlDbZDkL2DOfX1eZng7w3+f4dnr0EmGdzD8CMOz89cowxcw/FmGn8
/w5xl+AbLMMssss8wyyyy7d3u7ePm/pN43nVKf4/fl8Jj/1Khq085Lva84x
/V0bWML0Fe1lRGA4hV6fv2e8Oql1zRNG9B9QfcvZHyb7o9lfLvuP5/x83R/KOM7dP+ZjJ+v+1/M+AW6/znqQzTVejRBI37wf+Ez+69y/kuc/wLn
/5Dzv8v53+H8r7F+xZX69IXHpPRfpd6LM41NDf2O70ELpP6ich2qx3A/LlZA8s4AuN/0YdbxVQybZ9XF0PUP+4yun6dNFa/Aj3donCDkj+n5N7ZgWHVLSs9IY29tl8Zm7ZIwIV24pS6CAlaSApzaVKseF9Xj+HqqvT58S7+mWeqttuFdKf26Wij1VeeDM
/3sLU2bjkLnTjgc4AsHQGvSXzoIiXhnL4yUGulM0FOFH22lPtiR0memJ6EAKR30+CHYk3DTPf00JvqrfwL7I/pN/Ncx0bf4uBe3pAFU/Th3+hxWP4fTeme1riW4QD+mPgbUCB5Ul4b1evYDraf1bzxShKM/M92EVcLkhBGGrroMeaELCo0q3wX95XZpRG2XxUgyKksvirGUGEtEklI6zyOlmzxOaURR5IjqExulF+NyOCWLqoLb4capJdJItxhugwcyH+bEVmh22Xyoe0pKT0DjZgtp407fxI0jQcTB0Wk4hWr2jeunV
/qwZ1pKq56p9PmjQc8fcQfO4iyXvVJfEySBdlYSzhcP+4uHGyCdJSvOpa8edUsa9nRqa9AzpZwZGBgnZ66Ei4emFJXOKy0qLC3CwS6ZCHpWIPipPIJ7egkOzH7TOEhluJgySRvF5HJCikY2qFjErUv
/bvrUDU0rHoYSpD4Vaxo8YvplKf3L6dV4oAQ9mwRoxTbcCjwc9NZUQ8HbpEFcilNvjlsfIIO6WBLOFg+jqpe78qEpVZeLcBEZKVDbeDF6clQtIgVshogPDjGO6tD1uCkibsf1941oN0GvS7RnqqD4tbh4yLW2v1GAg7pWGpzIy6vjiWROIsoTIk98NmcZLTnLuEOSyCm5IzCZJyI8ofBEN0908oTKE7GckbblDP2OQttztkXMGWmYJ1I5iYM5D4OSs9cf5In5PHF75hhz0pnjyHtwRYMhWzUOk/aTmetx4JGG
/uq/rUQo8Kn69G8DzfXpa4GmQPpGs9Tv/TXQextW3cTX7Onts3D6jt20qysq/kDm64b01Yb0W8H03wPaor9IveOCtPlPXW/g6/m+A4H9gQOBxwKh8dZWH1vfOHsfkLnyW2aZZZZZZpll/68mIBt6RI5Hkh3w9JMU9ael9nA8Lifa5AfRzoQqKzrZGU6lDiaV6BYRzUcrU/gfEpbatz6KjPcUF
/+haccA1RlNOwX4JODPAfP+qWn4XeMVwIuAH3lb0wrh0ewJQA/g4DuaFgRselfTooCvAP5AMN6d6vE9vgcJh9zC0sIC5wDh8ZqAo1B+Oc4QLNBfWeH3kBtga4Q48DtD5HLvcpV8onjBQWcP2l66ZfV6j/6aD+vxu+URyMe+NMU8jvMk8D0Mj8vF7RIg/kr8SLrT5e61BV2N9jWCyx1wORk9bnfxVU3bx+hxrLgf9gBfivUSSBcKGR1OfxPft0F//Nimp9fYn7Nl0vF7d9xf09c0TX+Jt8vl
/oqt3lXyZftOl9ift9NVdswRdPm/lC+5qnoL6lw1CVdVwOUPuMpqXWKtq6TW5a6F0nBbm6Ac93VNc1jD3jLLLLPMMssss8wyy/4nRtfR0XVz7DpnbJm1beRhha5pc5YY+CHi0
/V5S2k6wVKCdJ3eMi792i0tifEEWeRGnw38ZIeuWTtL0umatNME6Vo0Eg5azLWPrp3rIevX6Jq/Uea5CRtdA7cEmQnKl+Wb454kOI+rfznXvvc1o30CoW4R30nK026n6zZD/DdI+98jvv2/dPzpum7e
/OR41xBsJPgZgp0EewgOEDzhvrc46PrMuh07tohlzS1dCbVL3Oxb7/N7KzZ16W7FE+v8Pv+GVQaNkC/VnlIVNdyCfDH8
/wSdyJdIqrKvLdHl61SSnbKidjNUS1csHvXGooQK1NZ71XAb0tPaw6l25It2J1LdHQaqipHyeVlJxZIJkxOCNEWOh3FGstcZV3EUMfiFXV9bkuyk5AjyqfIhcFshGXIno2E1jHxye6hVCXfIofaoctszygiFFSXcbSjoPlQV7ohBYYa8JZVCvkiyo0NOqP+RcbCAjEF6fmT7HgJx8wO1+8m5QvXZ1uMj7vyg9lFOz38H4OHy899gbOb0h+1mFHPo62C7Duca1dP5iGIZMs9HfPy7SR/auPmKYrtwez4RGD2dNz6NzGvv6fxH8XSO
/g+TuYTq6fxBcTkXP//ZSILMTdSn8xNFEc0dP7UvkD61cfMlxcks/Ufb/zTR13LzL8VRRl8yh/4ZxH6jgO74vmZpjuN
/jNOLbjMOcPn5z3i+welPus3ozqE/welH3WbsyaF/ltNnvp8i+Gr+3HpqP+L09PpOsShH/73AzR/8Bzhbc+hf4vTZvsvJpv8Zpx8Uzdgu3H3++Q0y1uXbufsZ+t2OM8v8RfE12IoZPb3fOfoB9VdI39u56zL9DmtGMJ8W3Gdi6Nuk/fz9Tk
/53OOHr/86p898QOefe7zw7blBOKqn3zu4/Xcf/5n5TDDq9/P5CLE6y/zH4lz3SFuIfr5w9/nz34njsGCIOAAA
</code></pre>
<h3>
<a name="to-build-the-binary-2" class="anchor" href="https://0x00sec.org#to-build-the-binary-2"></a>To build the binary</h3>
<pre><code class="lang-auto">cat foo.txt | base64 -d | gunzip &gt; foo.elf &amp;&amp; chmod +x foo.elf
</code></pre>
<p>Feel free to ask any questions or share your progress through the challenge.</p>
<h2>
<a name="references-3" class="anchor" href="https://0x00sec.org#references-3"></a>References</h2>
<p>Resources to look into.<br>
<a href="https://0x00sec.org/t/reverse-engineering-101/1233" class="inline-onebox">Reverse Engineering 101</a> by <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a><br>
<a href="https://web.archive.org/web/20160608095854/http://fluxius.handgrep.se/2011/10/20/the-art-of-elf-analysises-and-exploitations/" class="inline-onebox" rel="noopener nofollow ugc">The Art Of ELF: Analysis and Exploitations | FlUxIuS' Blog</a><br>
<a href="https://0xf00i.github.io/2022/05/28/Reverse-engineering-cheat-sheet.html" class="inline-onebox" rel="noopener nofollow ugc">Reverse Engineering Cheat sheet</a></p>
            <p><small>5 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/reverseme-cipher/35518">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/reverseme-cipher/35518</link>
          <pubDate>Mon, 12 Jun 2023 00:17:00 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-35518</guid>
          <source url="https://0x00sec.org/t/reverseme-cipher/35518.rss">[ReverseMe]Cipher</source>
        </item>
        <item>
          <title>Extracting Go Embeds</title>
          <dc:creator><![CDATA[messede]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <h2><a name="backdrop-1" class="anchor" href="https://0x00sec.org#backdrop-1"></a>Backdrop</h2>
<p>I was recently working on a go based web app which used a golang feature called embeds,<br>
So what exactly is go-embed / what does it do ?, imagine you had to distribute/share a application<br>
which consists of a executable and multiple auxiliary files (say images, language support files, etc.), how would you distribute such a application ?</p>
<pre><code class="lang-auto">	Typical App Folder :
			app-executable		--&gt; Run by user
			image0.png			|
			image1.png			|-&gt; Never Directly accessed by the user, but must be shipped 
			audio.mp3			|	with the app
</code></pre>
<p>the most obvious solution is to zip/tar the executable along with all the necessary files<br>
and then hand it out to users, but extracting files would be an additional effort on the users end (especially when the user is never going to directly access all those files). Go’s embed feature saves us from this fate by providing a pseudo file system which can hold necessary files while enabling programmatic access to them, also the entire pseudo file system resides within the binary.</p>
<pre><code class="lang-auto">	App Folder while using Go Embed :
			app-executable		--&gt; One binary which has all necessary files embedded
									within it.
	

		ELF-structure of app-executable
	|===================================|
	|.data    .....						|
	|===================================|
	|.rodata							|
	| &lt;	Pesudo  Filesystem &gt;			|
	|===================================|
	|.text    .....						|
	|===================================|
</code></pre>
<p>Note that files embedded using Go embed are read only.</p>
<p>Now you must wonder whats the big deal,  just run strings on the binary and the view content, yea sure you can do that if want to spend the rest of you day reading through clobbered output, but our aim in this paper is to explore how we can extract embedded files from any arbitrary go executable, while preserving the original directory structure.</p>
<h2><a name="but-why-2" class="anchor" href="https://0x00sec.org#but-why-2"></a>But why ?</h2>
<p>All right i’ll throw you a carrot,</p>
<ol>
<li>People think embeds are a way to “secure their application files” - BooHoo! - have to prove them wrong.</li>
<li>Anyone with some mal-dev experience would immediately see the potential of using embeds<br>
as a packer, and yes it is being used that way in the wild.</li>
<li>Golang is becoming popular, so i guess this is a part of the community’s effort to better understand it.</li>
</ol>
<h2><a name="understanding-how-embeds-work-3" class="anchor" href="https://0x00sec.org#understanding-how-embeds-work-3"></a>Understanding how embeds work</h2>
<p>Lets start with an example, Our apps folder structure looks something like this.</p>
<pre><code class="lang-auto">AppFolder:
	misc:
		another_dir:
			- sample.txt
		- text1.txt
		- text2.txt
		- text3.txt
	main.go
</code></pre>
<p>we’ll now write a simple go program to embed all files within the misc directory</p>
<p>Lets start with <code>main.go</code></p>
<pre><code class="lang-auto">package main

import (
	"embed"
	"fmt"
	"log"
)

//go:embed misc
var embedFiles embed.FS  // 1

func main() {
	content, err := embedFiles.ReadFile("misc/text.txt") // 2
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(string(content))
}
</code></pre>
<ol>
<li>we declare a variable of type emebed.FS this is essentially our container of files<br>
embed.FS structure looks something like this:<pre><code class="lang-auto">type FS struct{
	files *files[]
}

type file struct{
	name string
	data string
	hash [16]byte
}
</code></pre>
it holds a array of file structures, which in-turn holds the name of a file, its content(data) and a SHA-256 hash of the file content truncated to 16 bytes, data and hash are nil for a directory, name holds the full path to a file in the embedded folder.<br>
A directory entry would look like this:<pre><code class="lang-auto">file{
	name  = "another_dir/"    // note the '/' suffix
	data  = nil
	hash  = nil
}
</code></pre>
A file entry would look like this:<pre><code class="lang-auto">file{
	name  = "another_dir/sample.txt"
	data  = [10,10,10,10,10...]  // files bytes
	hash  = [1,2,3,4,5,6..]		 // file hash
}
</code></pre>
</li>
<li>ReadFile, ReadDir are methods that operate on the embed variable.</li>
</ol>
<ol start="3">
<li>Now you must have noticed the peculiar comment <code>//go:embed</code> well its not just a comment, its a special go directive which during compilation (yes go parses certain comments <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"> ) asks the go compiler to bind all files within the misc folder to the <code>emebedFiles</code> variable. The Go compilers source has a function called <code>WriteEmbed</code>  at <a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/staticdata/embed.go#L107"><code>src/cmd/compile/internal/staticdata/embed.go</code></a>  which performs this magic.</li>
</ol>
<p>Lets quickly compile the program we wrote above by running <code>go build main.go</code> and run it <code>./main</code>, this should print the contents of the <code>misc/text.txt</code> file.</p>
<p>There you go, now we have successfully embedded files within a single executable.</p>
<h2><a name="the-embed-structure-in-a-compiled-binary-4" class="anchor" href="https://0x00sec.org#the-embed-structure-in-a-compiled-binary-4"></a>The Embed Structure In A Compiled Binary</h2>
<p>Now that we have compiled our app, lets throw it against a decompiler and look at how the embed structure looks once compiled.</p>
<p>We know that our main function references the embed structure(see main.go above), so it should give us a clue about where the structure lies within the binary:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/7/5770b71b89e9824b7125d8304241f259a609931e.png" data-download-href="/uploads/short-url/ctx1Wc7EsjQOnfdUDDWu8VkZ2sm.png?dl=1" title="Scr1"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/7/5770b71b89e9824b7125d8304241f259a609931e_2_690x199.png" alt="Scr1" data-base62-sha1="ctx1Wc7EsjQOnfdUDDWu8VkZ2sm" width="690" height="199" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/7/5770b71b89e9824b7125d8304241f259a609931e_2_690x199.png, https://0x00sec.s3.amazonaws.com/optimized/3X/5/7/5770b71b89e9824b7125d8304241f259a609931e_2_1035x298.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/5/7/5770b71b89e9824b7125d8304241f259a609931e.png 2x" data-dominant-color="323333"></a></div><p></p>
<p>We notice the <code>ReadFile</code> call and <code>embedFiles</code> being passed to it as a argument, thats our embed structure lets take a look at it.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/9/5/95abf82ff2beb75b2b498423318cc44145117a02.png" data-download-href="/uploads/short-url/lm3AkD5ahvppxzTN885hDHlCak2.png?dl=1" title="Scr3"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/9/5/95abf82ff2beb75b2b498423318cc44145117a02_2_690x429.png" alt="Scr3" data-base62-sha1="lm3AkD5ahvppxzTN885hDHlCak2" width="690" height="429" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/9/5/95abf82ff2beb75b2b498423318cc44145117a02_2_690x429.png, https://0x00sec.s3.amazonaws.com/original/3X/9/5/95abf82ff2beb75b2b498423318cc44145117a02.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/9/5/95abf82ff2beb75b2b498423318cc44145117a02.png 2x" data-dominant-color="1F1F1F"></a></div><p></p>
<p>we see a chunk of bytes, but its not immediately clear what it is, but we know that the Go compilers <code>WriteEmbed</code> function has something to do with this, lets take a look at <code>WriteEmbed</code>, (don’t panic, ill explain it line by line)<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/0/409f37cfd9351906fe75da82ac029a3f039e72b5.png" data-download-href="/uploads/short-url/9dFGeh75dZve5mzstp63N5yUggl.png?dl=1" title="Scr2"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/0/409f37cfd9351906fe75da82ac029a3f039e72b5_2_520x500.png" alt="Scr2" data-base62-sha1="9dFGeh75dZve5mzstp63N5yUggl" width="520" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/0/409f37cfd9351906fe75da82ac029a3f039e72b5_2_520x500.png, https://0x00sec.s3.amazonaws.com/optimized/3X/4/0/409f37cfd9351906fe75da82ac029a3f039e72b5_2_780x750.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/4/0/409f37cfd9351906fe75da82ac029a3f039e72b5_2_1040x1000.png 2x" data-dominant-color="181C1E"></a></div><p></p>
<ul>
<li>Line 8 looks like a pointer, comments indicate that its a pointer to []files, which means it is a pointer to first file in the embed structure (pointer to array and pointer to first element of array are the same thing!).</li>
<li>Line 9 and 10 indicate the no of files</li>
<li>Line 19 iterates over files to be embedded</li>
<li>Line 20 is a pointer to the file name (full path of file)</li>
<li>Line 21 seems to represent the length of the filename</li>
<li>Line 22 determines if the file is actually a directory, if it is, the file content pointer and hash is nulled out, otherwise the else block in Line 27 fills them appropriately.</li>
</ul>
<p>Lets take a look at that chunk of data again<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/1/5/15b869c64382aab2403bf6a5363ce3ebe1704777.png" data-download-href="/uploads/short-url/36984ROhYFBvzEypJD4VjitcZp5.png?dl=1" title="Scr4"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/1/5/15b869c64382aab2403bf6a5363ce3ebe1704777_2_690x435.png" alt="Scr4" data-base62-sha1="36984ROhYFBvzEypJD4VjitcZp5" width="690" height="435" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/1/5/15b869c64382aab2403bf6a5363ce3ebe1704777_2_690x435.png, https://0x00sec.s3.amazonaws.com/original/3X/1/5/15b869c64382aab2403bf6a5363ce3ebe1704777.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/1/5/15b869c64382aab2403bf6a5363ce3ebe1704777.png 2x" data-dominant-color="212422"></a></div><p></p>
<p>it starts to make sense,</p>
<ul>
<li>The Red block is pointer to the first file entry (i.e the green block), since we are dealing with little endian architecture we have to reverse the red blocks contents to obtain the actual pointer which would be <code>0x004ca138</code>.</li>
<li>The two Blue blocks represent the no of files in the Go embed entry</li>
<li>The Green block is a file entry
<ul>
<li>Its first 8 bytes are a pointer to the file name (underlined in blue)</li>
<li>Subsequent 8+8 bytes represent length of the file name (underlined in blue)</li>
<li>Next 8 bytes are a pointer to the file contents (underlined in red)</li>
<li>Subsequent 8 bytes represent length of the file contents (underlined in red)</li>
<li>Last 16 bytes are the truncated sha256 hash of the file contents (underlined in yellow)</li>
</ul>
</li>
</ul>
<p>if you were paying close attention you’d notice that, file contents pointer and hash in the above case was nulled out, that’s because its a directory, entries for regular files will have a appropriate pointer values, like in the following example:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/f/a/fa9940b10fd69ca167a2e0f592ab1e53a92d8d58.png" data-download-href="/uploads/short-url/zKTI1hBWp0cClnX6IgeX8Pjf7qo.png?dl=1" title="Scr5"><img src="https://0x00sec.s3.amazonaws.com/original/3X/f/a/fa9940b10fd69ca167a2e0f592ab1e53a92d8d58.png" alt="Scr5" data-base62-sha1="zKTI1hBWp0cClnX6IgeX8Pjf7qo" width="640" height="500" data-dominant-color="212622"></a></div><p></p>
<ul>
<li>File content pointer is highlighted in yellow</li>
<li>File hash is highlighted in blue</li>
</ul>
<blockquote>
<p>Note: From the above information we can deduce that each file entry is 54 bytes long (for a 64 bit binary), for a 32 bit binary it’ll be 32 bytes long, this information will be useful in navigating the embed structure and building automated solutions for extraction.</p>
</blockquote>
<h2><a name="extracting-file-names-and-content-5" class="anchor" href="https://0x00sec.org#extracting-file-names-and-content-5"></a>Extracting file names and content</h2>
<p>Lets put together what we have learned so far and try extracting a file, (for now lets do this manually to understand the process, a python based solution is made available at the end this paper).</p>
<p>We know the layout of the embed structure and we have the filename and file content pointers, these pointers are mere offsets in the binary where the file contents are located, but we cannot use these pointers as-is, we must subtract it from the  <a href="https://duckduckgo.com/?q=elf+base+address">ELF base address</a>  to obtain the actual offsets where the filename and file content are located.</p>
<blockquote>
<p>Note: ELF base address is dependent on arch bits, for 64 bits its <code>0x400000</code>, for 32 bits its <code>0x08048000</code></p>
</blockquote>
<p>So for this demonstration ill be picking the third entry in the embed struct.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/7/5/75fad7f53765be8b3f7df4549d1b560dfba89c65.png" data-download-href="/uploads/short-url/gPHidVvz79nFtcXIcfw24wQErZP.png?dl=1" title="Scr6"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/7/5/75fad7f53765be8b3f7df4549d1b560dfba89c65_2_690x454.png" alt="Scr6" data-base62-sha1="gPHidVvz79nFtcXIcfw24wQErZP" width="690" height="454" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/7/5/75fad7f53765be8b3f7df4549d1b560dfba89c65_2_690x454.png, https://0x00sec.s3.amazonaws.com/original/3X/7/5/75fad7f53765be8b3f7df4549d1b560dfba89c65.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/7/5/75fad7f53765be8b3f7df4549d1b560dfba89c65.png 2x" data-dominant-color="212421"></a></div><p></p>
<p>Reading the filename:</p>
<ul>
<li>
<p>First 8 bytes are the pointer to file name (underlined in red), it can be read as <code>0x004a9f09</code> (its little endian remember)</p>
</li>
<li>
<p>Next 8 bytes represent the length of the file name (underlined in blue), it can be read as <code>0x0e</code> which is 14 in decimal.</p>
</li>
<li>
<p>Extracting the name :<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/6/66d5ed7cdc6f18287bdb34503728f4817be7cae0.png" data-download-href="/uploads/short-url/eFJ2twSAhlBeaxpLo6yvjiK8UXm.png?dl=1" title="Scr7"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/6/6/66d5ed7cdc6f18287bdb34503728f4817be7cae0_2_690x167.png" alt="Scr7" data-base62-sha1="eFJ2twSAhlBeaxpLo6yvjiK8UXm" width="690" height="167" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/6/6/66d5ed7cdc6f18287bdb34503728f4817be7cae0_2_690x167.png, https://0x00sec.s3.amazonaws.com/original/3X/6/6/66d5ed7cdc6f18287bdb34503728f4817be7cae0.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/6/6/66d5ed7cdc6f18287bdb34503728f4817be7cae0.png 2x" data-dominant-color="2C2C3B"></a></div><p></p>
</li>
<li>
<p>To calculate the actual offset in file we subtract the address from the ELF base address, once we obtain the offset we use dd to read 14 bytes(length of the filename) starting from the said offset.</p>
</li>
</ul>
<p>Lets do the same thing for file contents:</p>
<ul>
<li>
<p>Pointer to file contents is <code>0x004a89ef</code> (underlined in pink).</p>
</li>
<li>
<p>Length of the file contents is <code>0x06</code> (underlined in yellow).</p>
</li>
<li>
<p>Extracting contents :<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/8/580a1bc2dbeccf084874fe50959a7adc6d058395.png" data-download-href="/uploads/short-url/cyPFPiPnJoG8CeNrFIvCkbs2yUJ.png?dl=1" title="Scr8"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/8/580a1bc2dbeccf084874fe50959a7adc6d058395_2_690x120.png" alt="Scr8" data-base62-sha1="cyPFPiPnJoG8CeNrFIvCkbs2yUJ" width="690" height="120" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/8/580a1bc2dbeccf084874fe50959a7adc6d058395_2_690x120.png, https://0x00sec.s3.amazonaws.com/original/3X/5/8/580a1bc2dbeccf084874fe50959a7adc6d058395.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/5/8/580a1bc2dbeccf084874fe50959a7adc6d058395.png 2x" data-dominant-color="2E2E3E"></a></div><p></p>
</li>
<li>
<p>and now we have the file contents as well.</p>
</li>
</ul>
<p>For obvious reasons this is a tedious process to perform manually, so i wrote a tool called  <a href="https://github.com/messede-degod/Gembe">Gembe</a> which automates the extraction process, you only have to supply the embed structures address.</p>
<h2><a name="closing-thoughts-6" class="anchor" href="https://0x00sec.org#closing-thoughts-6"></a>Closing Thoughts</h2>
<p>We discussed the structure of the go embed structure and how we can identify the offsets of the embedded files and extract them. Its also worth noting that the embed stucture is go specific it won’t change across different platforms, so any extraction tooling that we build can be easily adopted to many platforms. The extraction utility i mentioned above(Gembe) requires some manual effort (i.e finding the address of the embed structure with a decompiler), it is possible to automate this process as well, my best guess is that something like  <a href="https://www.capstone-engine.org">capstone</a> could be used to achieve this.</p>
<h2><a name="references-7" class="anchor" href="https://0x00sec.org#references-7"></a>References</h2>
<ol>
<li><a href="https://pkg.go.dev/embed" class="inline-onebox">embed package - embed - Go Packages</a></li>
<li><a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/staticdata/embed.go#L107">https://github.com/golang/go/blob/master/src/cmd/compile/internal/staticdata/embed.go#L107</a></li>
</ol>
<h2><a name="resources-8" class="anchor" href="https://0x00sec.org#resources-8"></a>Resources</h2>
<ol>
<li><a href="https://github.com/messede-degod/Gembe" class="inline-onebox">GitHub - messede-degod/Gembe: Tool to extract Go Embeds</a></li>
</ol>
            <p><small>4 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/extracting-go-embeds/34885">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/extracting-go-embeds/34885</link>
          <pubDate>Thu, 04 May 2023 09:49:53 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-34885</guid>
          <source url="https://0x00sec.org/t/extracting-go-embeds/34885.rss">Extracting Go Embeds</source>
        </item>
        <item>
          <title>Unlock Windows 11 personalization settings by modifying Settings app DLL</title>
          <dc:creator><![CDATA[systematiK]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <h3><a name="introduction-1" class="anchor" href="https://0x00sec.org#introduction-1"></a>Introduction</h3>
<p>After doing a research on how to temporarily remove Windows 10  ‘Activate Windows’ watermark, I decided to try to overcome another limitation of unactivated Windows 11.</p>
<p>This limitation (besides watermark in the lower right corner of the screen) is locked / disabled personalization settings inside Settings app. The method described here allows you to fully enable these settings without activating OS.</p>
<h3><a name="debugging-methods-2" class="anchor" href="https://0x00sec.org#debugging-methods-2"></a>Debugging methods</h3>
<p>Windows Settings app is stored in the following directory:</p>
<pre><code class="lang-auto">C:\Windows\ImmersiveControlPanel
</code></pre>
<p>Now, since Settings is a program stored in a UWP container, it means that you cannot launch it directly by double-clicking it or load it in a debugger and simply run it (although you can attach a debugger once the app is launched).</p>
<p>Let’s first attach a debugger to a running Settings app, to see what DLL’s are loaded.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/d/2/d297edf7bd687d57564e5a0b714a971404bb0969.png" data-download-href="/uploads/short-url/u2ZM8oJEP33CAOJTR1PHre8hYRH.png?dl=1" title="symbols" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/d/2/d297edf7bd687d57564e5a0b714a971404bb0969.png" alt="symbols" data-base62-sha1="u2ZM8oJEP33CAOJTR1PHre8hYRH" width="690" height="98" data-dominant-color="E1DDD5"></a></div><p></p>
<p>We can see that the <strong>slc.dll</strong> (Software Licensing Client) is loaded, with an interesting function called <strong>SLIsWindowsGenuineLocal</strong>. We can put a breakpoint on it, and try to navigate around Personalization settings, but nothing happens.</p>
<p>Since we attached debugger after the full app startup, it means that the potential check for an activated Windows already passed early during the Settings app startup, so it didn’t get caught.</p>
<p>There are two methods to overcome this.</p>
<h4><a name="first-method-3" class="anchor" href="https://0x00sec.org#first-method-3"></a>First method</h4>
<p><br>
Use the Settings app built-in support for a debugging, as mentioned here:</p>
<p><a href="https://0x00sec.org">https://www.hexacorn.com/blog/2018/08/12/debugging-dosing-system-settings-win10/</a></p>
<p>Simply add Debug DWORD value (set it to 1) and launch Settings app which will now be in a suspended mode, waiting for a debugger to be attached to it.</p>
<h4><a name="second-method-4" class="anchor" href="https://0x00sec.org#second-method-4"></a>Second method</h4>
<p><br>
Use the <strong>PLMDebug.exe</strong> which comes with the Debugging Tools as a part of the Windows SDK. It is located in the following directory (x64 version):</p>
<pre><code class="lang-auto">C:\Program Files (x86)\Windows Kits\10\Debuggers\x64
</code></pre>
<p>With this you can control the state (suspend, resume, etc…) of the UWP app while you are debugging, and you can use debuggers such as WinDbg, x64dbg etc… (in this example I will use x64dbg).</p>
<p>You will need Settings full package name in order to use PLMDebug, which you can find out using the following Powershell command:</p>
<pre><code class="lang-auto">Get-AppxPackage windows.immersivecontrolpanel
</code></pre>
<p>Use the following command to enable debugging:</p>
<pre><code class="lang-auto">plmdebug.exe /enableDebug windows.immersivecontrolpanel_10.0.6.1000_neutral_neutral_cw5n1h2txyewy "C:\Program Files\x64\x64dbg.exe"
</code></pre>
<p>Now, when you click on the Settings app, it will be launched along with the x64dbg attached automatically.</p>
<p>The debugger is attached, but only the core DLL’s are loaded, so you will need to instruct x64dbg to break on system DLL load, and execute the target (F9) until the <strong>slc.dll</strong> is loaded.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/f/5/f57ac9eddb8a2ae586892d0f3eba17747e939c5f.png" alt="x64prefs" data-base62-sha1="z1C3lEu6Qiu9z8Riu3hIiKwRBUz" width="321" height="198"></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/e/2/e29055b7dae4a8d6023b952934edb42945f36c7b.png" alt="dllload" data-base62-sha1="wkh8WCDIaWvDjx6jJDK1IlginjR" width="502" height="86"></p>
<p>After the slc.dll is loaded, you can set a breakpoint on <strong>SLIsWindowsGenuineLocal</strong> function.</p>
<p>Remember to uncheck break on system DLL load inside preferences, to avoid breaking on subsequent DLL’s.</p>
<h3><a name="bypass-method-5" class="anchor" href="https://0x00sec.org#bypass-method-5"></a>Bypass method</h3>
<p>After choosing one of the debugging methods decribed above, the target will now break on a SLIsWindowsGenuineLocal call.</p>
<p>We return from the call, and end up inside <em>SettingsEnvironment.Desktop.dll</em> module from which the call is being made.</p>
<p>If we search for all intermodular calls inside this DLL, we can see that there are two calls to the SLIsWindowsGenuineLocal.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/a/1/a1caca390a5814d7c95c6b9ede59bdca0aaed516.png" alt="slcall" data-base62-sha1="n5hlAmAhorlTNBI0I2teAHzoCuG" width="470" height="80"></p>
<p>The second call leads us to a small wrapper function (simple and unobfuscated) which checks if Windows is activated or not.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/f/a/fa7bb8bb72e07397878ff84fcd8b4253a4a09f1c.png" data-download-href="/uploads/short-url/zJSrh7WSwzEtpzvnlyTPN0993RO.png?dl=1" title="function" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/f/a/fa7bb8bb72e07397878ff84fcd8b4253a4a09f1c.png" alt="function" data-base62-sha1="zJSrh7WSwzEtpzvnlyTPN0993RO" width="517" height="168" data-dominant-color="EAE5C9"></a></div><p></p>
<p>This small function can be expressed like the following pseudocode:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/e/e/ee38bd63494712c5ae02816584617f30f6dd308c.png" alt="pseudoc" data-base62-sha1="xZpcy6gYNzoS0ZbeioHQKXmybNi" width="319" height="193"></p>
<p>Entire personalization settings are enabled or disabled, based on the return value of that function.<img src="https://0x00sec.org/images/emoji/twitter/slightly_smiling_face.png?v=12" title=":slightly_smiling_face:" class="emoji" alt=":slightly_smiling_face:" loading="lazy" width="20" height="20"></p>
<h3><a name="how-to-use-the-unlock-tool-sunlock11exe-6" class="anchor" href="https://0x00sec.org#how-to-use-the-unlock-tool-sunlock11exe-6"></a>How to use the unlock tool (sunlock11.exe)</h3>
<p>This tool is simple, and it works by patching the function described above inside SettingsEnvironment.Desktop.dll so that it always returns true value, tricking Settings app into thinking that the Windows is activated, thus enabling all of the personalization settings.</p>
<p><em>SettingsEnvironment.Desktop.dll</em> is a “system” file, owned by TrustedInstaller as other files in the System32 directory, so before patching it is necessary to set adequate permissions to be able to write to that DLL. This can be done manually (using takeown and icacls) or by using provided <strong>setpm.bat</strong> script which will do this automatically for you.</p>
<p>After modifying owner and permissions, run sunlock11.exe. Both the script and the unlock tool require administrative privileges, so make sure that you execute them as administrator.</p>
<h3><a name="project-demo-7" class="anchor" href="https://0x00sec.org#project-demo-7"></a>Project &amp; demo</h3>
<p>Visit the link below for a project:</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://github.com/revengsmK/sunlock11">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">

      <a href="https://github.com/revengsmK/sunlock11" target="_blank" rel="noopener nofollow ugc">GitHub</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/345;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/7/c7e2a663b6be3dd58b1063cc1e7c85ce54a085f4_2_690x345.png" class="thumbnail" data-dominant-color="E7E8E9" width="690" height="345" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/7/c7e2a663b6be3dd58b1063cc1e7c85ce54a085f4_2_690x345.png, https://0x00sec.s3.amazonaws.com/optimized/3X/c/7/c7e2a663b6be3dd58b1063cc1e7c85ce54a085f4_2_1035x517.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/c/7/c7e2a663b6be3dd58b1063cc1e7c85ce54a085f4.png 2x"></div>

<h3><a href="https://github.com/revengsmK/sunlock11" target="_blank" rel="noopener nofollow ugc">GitHub - revengsmK/sunlock11: Windows 11 Pro personalization settings unlock...</a></h3>

  <p>Windows 11 Pro personalization settings unlock tool. - GitHub - revengsmK/sunlock11: Windows 11 Pro personalization settings unlock tool.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>Video demo here:</p>
<p><a href="https://www.youtube.com/watch?v=GWBxjqhGOzg">Enable Windows 11 personalization settings without activation - sunlock11</a></p>

<h3><a name="disclaimer-8" class="anchor" href="https://0x00sec.org#disclaimer-8"></a>Disclaimer</h3>
<p>This program serves mainly as a reverse engineering demo, and you use it at your own risk. The author of this program cannot be held liable for any damages due to the use of this program. It is advisable not to use it on your main production PC, as it is modifying operating system file.</p>
            <p><small>4 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763</link>
          <pubDate>Mon, 06 Mar 2023 15:12:52 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-33763</guid>
          <source url="https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763.rss">Unlock Windows 11 personalization settings by modifying Settings app DLL</source>
        </item>
        <item>
          <title>Unpacking encrypted router firmware</title>
          <dc:creator><![CDATA[freddy]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>I’m having issues extracting the encrypted rootfs of this <a href="https://www.mediafire.com/file/y4u5lo0f1ku664u/AGZHP_1.2.1_CLOSED.bin/file" rel="noopener nofollow ugc">AGZHP 1.2.1 ZTE H388X firmware</a>. I’m quite new to firmware reverse engineering and I’d appreciate any pointers. Here is what I got so far.</p>
<p>The header contains the firmware version (AGZH_1.2.1), the device model (ZXHN H388X) and length/offset for kernel/rootfs.</p>
<pre><code class="lang-auto">$ head -c 256 AGZHP_1.2.1_CLOSED.bin | hexdump -C
00000000  99 99 99 99 44 44 44 44  55 55 55 55 aa aa aa aa  |....DDDDUUUU....|
00000010  28 00 00 00 46 6d 2a 81  f6 57 24 e7 ba 84 d3 28  |(...Fm*..W$....(|
00000020  df 23 f9 96 34 19 67 b3  4a 7e d5 1c e7 63 29 a2  |.#..4.g.J~...c).|
00000030  2c 05 51 ca b5 89 cf df  c6 4d 15 eb 00 00 00 00  |,.Q......M......|
00000040  00 00 00 00 66 02 00 00  21 00 00 00 41 47 5a 48  |....f...!...AGZH|
00000050  50 5f 31 2e 32 2e 31 00  00 00 00 00 00 00 00 00  |P_1.2.1.........|
00000060  00 00 00 00 00 00 00 00  01 00 00 00 3c 02 9a 02  |............&lt;...|

00000070  f7 08 3f 00 5c 02 10 00  04 63 d6 12 00 00 4a 02  |..?.\....c....J.| kernel: len, off, crc, rootfs: len
00000080  3c 02 50 00 83 4f ad 51  00 00 70 00 00 00 20 03  |&lt;.P..O.Q..p... .| rootfs: off, crc, mtd kernel: addr, len
00000090  00 00 00 00 00 00 00 01  00 00 90 03 00 00 20 03  |.............. .|
000000a0  00 00 00 00 00 00 00 01  5a 58 48 4e 20 48 33 38  |........ZXHN H38|
000000b0  38 58 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |8X..............|
000000c0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000000d0  3c 02 00 00 5d 1d 48 06  01 00 00 00 01 00 00 00  |&lt;...].H.........|
000000e0  a0 9b 06 28 32 30 32 31  30 38 32 34 31 36 32 36  |...(202108241626|
000000f0  31 31 00 00 00 00 00 00  ff ff ff ff ff ff ff ff  |11..............|
</code></pre>
<p>The firmware rootfs is encrypted with AES. By running binwalk I see a gzip compressed data section at 0x10025c, which corresponds to the kernel offset in the header.</p>
<pre><code class="lang-auto">$ binwalk AGZHP_1.2.1_CLOSED.bin
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
247812        0x3C804         CRC32 polynomial table, little endian
249788        0x3CFBC         AES Inverse S-Box
253572        0x3DE84         AES S-Box
1049180       0x10025C        Flattened device tree, size: 4131063 bytes, version: 17
1049428       0x100354        gzip compressed data, maximum compression, from Unix, last modified: 1970-01-01 00:00:00 (null date)
5170620       0x4EE5BC        Flattened device tree, size: 8779 bytes, version: 17
</code></pre>
<p>To figure out where the decryption key is, I extract the kernel with <code>dd if=AGZHP_1.2.1_CLOSED.bin bs=1 skip=$((16#10025c)) count=$((16#3f08f7)) of=kernel.img 2&gt;/dev/null</code></p>
<p>Running binwalk on it I get:</p>
<pre><code class="lang-auto">$ binwalk parts/kernel.img
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             Flattened device tree, size: 4131063 bytes, version: 17
248           0xF8            gzip compressed data, maximum compression, from Unix, last modified: 1970-01-01 00:00:00 (null date)
4121440       0x3EE360        Flattened device tree, size: 8779 bytes, version: 17
</code></pre>
<p>There is a gzip image at offset 0xF8. I run <code>dd if=kernel.img bs=1 skip=248 | zcat &gt; Image</code> to extract it. <code>file Image</code> reveal that it’s a <code>Linux kernel ARM64 boot executable Image, little-endian</code>. Here is where I get stuck. I’ve tried loading the image on IDA, disassembling as a ARM64 little-endian only the initial bytes seem to contain meaningful instructions. How to proceed?</p>
            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/unpacking-encrypted-router-firmware/29996">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/unpacking-encrypted-router-firmware/29996</link>
          <pubDate>Wed, 29 Jun 2022 14:56:13 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-29996</guid>
          <source url="https://0x00sec.org/t/unpacking-encrypted-router-firmware/29996.rss">Unpacking encrypted router firmware</source>
        </item>
        <item>
          <title>Reverse engineering - cheat sheet</title>
          <dc:creator><![CDATA[0xf00]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>In this article, I’ll post some Assembly to understand this article, you must know what asm is  <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:">  here a cheat sheet if you got stuck.</p>
<pre><code class="lang-auto">MOV : copy

XCHG: Exchange

PUSH: Push onto stack

POP : Pop from stack

ADD : Add

SUB : Subtract

DIV : Divide

IDIV: Signed integer divide

MUL: Multiply

IMUL: Signed integer multiply

INC :  Increment

DEC : Decrement

SAL : Shift left

SAR : Shift right

ROL : Rotate left

ROR : Rotate right

NOT : Invert each bit

AND : Logical and

OR :   Logical or

XOR : Logical exclusive or

SHL : Shift logical left

SHR : Shift logical right

NOP : Not operation

INT : Interrupt

CALL: Call subroutine

JMP : Jump

JE :   Jump if equal

JZ :  Jump if zero

JCXZ:  Jump if not CX zero

JNE :  Jump if not equal

JNZ :  Jump if not zero

JECXZ:  Jump if ecx zero

RET :  Returne from subroutine

JA :  Jump if above

JAE :  Jump if above or equal

JB :   Jump if below

JBE : Jump if below or equal

JNA : Jump if not above

JNAE: Jump if not above or equal

JNB : Jump if not Below

JNBE: Jump if not below or equal

JC :      Jump if carry

JNC :  Jump if not carry

JG :    Jump if greater

JGE : Jump if greater or equal

JL :    Jump if less

JLE : Jump if less or equal

JNG : Jump if not greater

JNGE: Jump if not greater or equal

JNL :   Jump if not less

JNLE: Jump if not less or equal

JO :    Jump if overflow

JNO : Jump if not overflow

JS :    Jump if sgine

JNS : Jump if not sign

</code></pre>
<h3>
<a name="reference-1" class="anchor" href="https://0x00sec.org#reference-1"></a>Reference</h3>
<p><a href="https://www.cs.virginia.edu/~evans/cs216/guides/x86.html" rel="noopener nofollow ugc">x86 Assembly Guide</a></p>
<p><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AoATOC.html" rel="noopener nofollow ugc">The Art of Assembly Language</a></p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/reverse-engineering-cheat-sheet/29167">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/reverse-engineering-cheat-sheet/29167</link>
          <pubDate>Thu, 28 Apr 2022 05:38:18 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-29167</guid>
          <source url="https://0x00sec.org/t/reverse-engineering-cheat-sheet/29167.rss">Reverse engineering - cheat sheet</source>
        </item>
        <item>
          <title>Blumentals Surfblocker v5.x password exploitation - PoiSoN</title>
          <dc:creator><![CDATA[systematiK]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <h2><a name="introduction-1" class="anchor" href="https://0x00sec.org#introduction-1"></a>Introduction</h2>
<p>The reason for making this tool (and other) is trying to find a job involving reverse engineering / cybersecurity etc…<br>
In a contrast of having a “blank” CV that merely claims that you know your stuff, I thought, well, better make some projects and open source code to show it off instead.</p>
<p>I have decided to try and test how secure is this (and other) product, and whether can I bypass its protection and possibly make a small project.</p>
<h2><a name="reversing-process-2" class="anchor" href="https://0x00sec.org#reversing-process-2"></a>Reversing process</h2>
<h3><a name="finding-memory-address-3" class="anchor" href="https://0x00sec.org#finding-memory-address-3"></a>Finding memory address</h3>
<p>When you run target (surfblock.exe) (and everytime you bring it it up from systray) you are presented with a dialog box asking you to input password.</p>
<p>You input it wrong and get message box prompting you to try again. So there must be some function checking if the password is valid or not before letting you in or displaying message box.</p>
<p>The target is not packed/obfuscated, no anti-debug tricks, no ASLR etc… so not using all this stuff speeds up reversing process. <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<p>It also means that all of the strings are in cleartext and visible in a debugger/disassembler, so searching for a “password” keyword or similar seems like an option. But there are many results, so trying to be more specific and searching for a string displayed in a message box gives you only this:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/3/2/32e8ae07ef3b12a06a4dd5199d79d59524875838.png" alt="incpwstring" data-base62-sha1="7gmo2mUpiZHOpPoyHcK8znOn7wk" width="414" height="122"></p>
<p>The string is UNICODE, so setting breakpoint on <strong>MessageBoxW</strong> and backtracing a bit seems like a good way to land you in the password checking function. The trick works, and after you input wrong password and click OK you break at MessageBoxW inside USER32 module.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/2/7/27297220f2cef7626da483c7655225b7944e472c.png" alt="mboxcall" data-base62-sha1="5ArpX5qmU3J7WPjtPh1FNLtwR6Q" width="434" height="77"></p>
<p>After returning from USER32 you are here:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/4/1/4156e7f0f35f71d1d792e9cfc28060b0d0e322c6.png" alt="frommbox" data-base62-sha1="9k1ejszmFWT6yT52dBIWL6Cwd94" width="429" height="357"></p>
<p>but still not inside pass check function. You are in the, what it seems to be,centralized function that deals with diplaying message box stuff.</p>
<p>Step till <strong>00509B8F → RETN 4</strong> and exit this function.</p>
<p>After that scroll a bit up and you are at what it appears to be beginning of some function, presumably password checking function.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/d/2/d271acf89139d2e3dad7b18900c128f8d5bcf684.png" alt="frmPassfun" data-base62-sha1="u1FOHA709E5DNk58kkzbxNSXPHC" width="438" height="285"></p>
<p>Clear MessageBoxW BP and set it at <strong>008B38BC → PUSH EBP</strong>.<br>
Input password again, and you break at the beginning of this function.</p>
<p>After stack/register preparing instructions, the function immediately checks if the entered password is correct or not by comparing it with a real password.</p>
<pre><code class="lang-auto">008B38F4   E8 4B4AC2FF    CALL surfbloc.004D8344 ; length of typed in pass
008B38F9   8B45 FC        MOV EAX,DWORD PTR SS:[EBP-4] ; points to typed in pass
008B38FC   8B15 C0568E00  MOV EDX,DWORD PTR DS:[8E56C0] 
008B3902   8B12           MOV EDX,DWORD PTR DS:[EDX]
008B3904   8B92 58040000  MOV EDX,DWORD PTR DS:[EDX+458] ; points to correct password
008B390A   E8 514FB5FF    CALL surfbloc.00408860 ; compare strings

</code></pre>
<p>The decrypted password is stored in memory like this:</p>
<p><em>fixed address → fixed address → dynamic address + 0x458 = pointer to correct password</em></p>
<p>So in this case its 0x008E56C0 → 0x0090DBB4 → dynamic_address + 0x458</p>
<h3><a name="password-decryption-4" class="anchor" href="https://0x00sec.org#password-decryption-4"></a>Password decryption</h3>
<p>If you look inside Windows Registry (where programs commonly store their settings), you can see that the Surfblocker stores its settings there including encrypted password.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/e/8/e83a5a7a1ec3a37948fcad433813fc18dc4bdaed.png" alt="registry" data-base62-sha1="x8nNh8WB9qPDAaajh93UMg4QWXr" width="535" height="74"></p>
<p>But setting BP on <strong>RegQueryValueExW</strong> (and other registry functions) didn’t work. I needed different approach.</p>
<p>I have already found memory address where the decrypted password is stored. But how the actual decryption is done and where?</p>
<p>I reloaded target in the debugger, set hardware breakpoint on write (DWORD) at <strong>second</strong> fixed address (in this case 0x0090DBB4), and run.</p>
<p>After HW break we are here now:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/d/7/d76228665b7a5138356762312ce65c491a221179.png" alt="hwbp1" data-base62-sha1="uJmXpEZiD7SB6CBiuKmOlDtH8Hn" width="507" height="229"></p>
<p>Now we have got dynamic memory address written at 0x0090DBB4, but the password is still not decrypted.</p>
<p>So set another HW breakpoint on write (DWORD) at dynamic_address+0x458, and run.</p>
<p>After second HW break we are here:<br>
<img src="https://0x00sec.s3.amazonaws.com/original/3X/c/b/cbb8e83b6803f0b3deb0866fc927388d0a6f6665.png" alt="hwbp2" data-base62-sha1="t4d5tg4jPm1ThMGDUKAuhX5FAVv" width="401" height="136"></p>
<p>At this point, I can see decrypted password in the EDI and ESI registers, but the decryption is already done and this function doesn’t look like a decryption routine.</p>
<p>After executing till return (Ctrl+F9 in Olly) twice we arrive at a rather long function. Near the top of this function we see an interesting call at 0x006ECC42:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/2/8/2840a6f1df16fb2ee14ea00f80a409ca7c328b1f.png" alt="ipserviceloadpw" data-base62-sha1="5K5C9spa1zwqdnjk42xgZfL1XAP" width="681" height="125"></p>
<p>Examining this call showed that surfblock.exe is trying to communicate with Internet Protector Service (IProtectorService.exe).</p>
<p>After that call password gets decrypted, so it looks like decryption process is happening somewhere inside this service.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/0/3/03046b5ec3eb1f7bc7b6caebb9e88ad176a412b1.png" alt="zwconnectport" data-base62-sha1="qGTRiTFihgOFk7u03CV9UBD4Ep" width="561" height="168"></p>
<p>The next step was to attach a debugger to this service and examine what is happening there.</p>
<p>Now, since setting BP on <strong>RegQueryValueExW</strong> inside surfblock.exe didn’t work, I tried this approach inside service module, thinking it should work now, because before decryption takes place, encrypted password must be loaded in the memory buffer.</p>
<p>That did the trick, and we now break at RegQueryValueExW inside IProtectorService module:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/e/7/e7758e8ed61271a4e607f82390411dbebe12934f.png" alt="protectorservice" data-base62-sha1="x1A9Vqf5P4jwVQfeMf4wyToIdyv" width="524" height="63"></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/8/c/8c358dfac7e18f1648b4cb42a2f1ddf91e815588.png" alt="ipsstack" data-base62-sha1="k0lAkTwh6DJ9khAh3gcdwaNaoOc" width="262" height="77"></p>
<p>After returning from the call we are here now:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/d/0/d05f85256157c98bc583a1cb26336a22ad4a78b1.png" data-download-href="/uploads/short-url/tJlXOpwJegiYEK4hVCezRfJxtiV.png?dl=1" title="regvaluesfetch" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/d/0/d05f85256157c98bc583a1cb26336a22ad4a78b1.png" alt="regvaluesfetch" data-base62-sha1="tJlXOpwJegiYEK4hVCezRfJxtiV" width="690" height="149" data-dominant-color="D0E0CE"></a></div><p></p>
<pre><code class="lang-auto">0062FD9F   E8 C8E4FFFF    CALL IProtect.0062E26C
</code></pre>
<p>Call at 0x0062FD9F does the XOR decryption as you can see from inside the function:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/5/6/566e7fccd4f0a5434b03aa46df81e98b2adab232.png" alt="xordec" data-base62-sha1="ckBNY313sCVLQxT4fH1UXYxoqxY" width="416" height="129"></p>
<h4><a name="conclusion-5" class="anchor" href="https://0x00sec.org#conclusion-5"></a>Conclusion</h4>
<p>That’s it.</p>
<p>We have finished reversing this product and defeating its protection.<br>
I hope you have enjoyed <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<p>Visit link below for a project:</p><aside class="onebox allowlistedgeneric" data-onebox-src="https://github.com/revengsmK/poison">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">

      <a href="https://github.com/revengsmK/poison" target="_blank" rel="noopener nofollow ugc">GitHub</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/345;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/0/e/0edf9a8fd0c7e9545b4037f11283063928245abe_2_690x345.png" class="thumbnail" data-dominant-color="E8E9E9" width="690" height="345" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/0/e/0edf9a8fd0c7e9545b4037f11283063928245abe_2_690x345.png, https://0x00sec.s3.amazonaws.com/optimized/3X/0/e/0edf9a8fd0c7e9545b4037f11283063928245abe_2_1035x517.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/0/e/0edf9a8fd0c7e9545b4037f11283063928245abe.png 2x"></div>

<h3><a href="https://github.com/revengsmK/poison" target="_blank" rel="noopener nofollow ugc">GitHub - revengsmK/poison: Blumentals Surfblocker password exploitation tool.</a></h3>

  <p>Blumentals Surfblocker password exploitation tool. - GitHub - revengsmK/poison: Blumentals Surfblocker password exploitation tool.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>Demo here:</p>
<p><a href="https://www.youtube.com/watch?v=gSszcV45Mow">Blumentals Surfblocker password exploitation tool - PoiSoN</a></p>

            <p><small>7 posts - 6 participants</small></p>
            <p><a href="https://0x00sec.org/t/blumentals-surfblocker-v5-x-password-exploitation-poison/28132">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/blumentals-surfblocker-v5-x-password-exploitation-poison/28132</link>
          <pubDate>Tue, 18 Jan 2022 20:30:55 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-28132</guid>
          <source url="https://0x00sec.org/t/blumentals-surfblocker-v5-x-password-exploitation-poison/28132.rss">Blumentals Surfblocker v5.x password exploitation - PoiSoN</source>
        </item>
        <item>
          <title>Reversing ActionSpy Android Malware</title>
          <dc:creator><![CDATA[hts]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>Hello, 0x00ers!<br>
Hope you are doing well!<br>
First of all sorry if I did some mistakes I am not a native English speaker.<br>
In this article, I’m going to discuss a first part of analysis of one of the variant of the malware ActionSpy.</p>
<h1>
<a name="introdution-1" class="anchor" href="https://0x00sec.org#introdution-1"></a>Introdution</h1>
<p>This post is a first part of reversing a version of ActionSpy. The tools used are:</p>
<ul>
<li>BurpSuite</li>
<li>Binary Ninja</li>
<li>jadx-gui</li>
<li>AVD</li>
<li>apktool</li>
<li>foremost</li>
</ul>
<h1>
<a name="information-gathering-2" class="anchor" href="https://0x00sec.org#information-gathering-2"></a>Information gathering</h1>
<h2>
<a name="permissions-3" class="anchor" href="https://0x00sec.org#permissions-3"></a>Permissions</h2>
<p>Using jadx-gui to reverse the APK, it can be observed that the malware use nearly all the Android permissions, some of them are listed bellow:</p>
<pre><code class="lang-auto">    &lt;uses-permission android:name="android.permission.READ_PHONE_STATE"/&gt;
    &lt;uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/&gt;
    &lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/&gt;
    &lt;uses-permission android:name="android.permission.INTERNET"/&gt;
    &lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/&gt;
    &lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/&gt;
    &lt;uses-permission android:name="android.permission.CHANGE_WIFI_STATE"/&gt;
    &lt;uses-permission android:name="android.permission.CAMERA"/&gt;
    &lt;uses-permission android:name="android.permission.RECORD_AUDIO"/&gt;
    &lt;uses-permission android:name="android.permission.READ_LOGS"/&gt;
    &lt;uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/&gt;
    &lt;uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS"/&gt;
    &lt;uses-permission android:name="android.permission.WRITE_SETTINGS"/&gt;
    &lt;uses-permission android:name="com.android.browser.permission.READ_HISTORY_BOOKMARKS"/&gt;
    &lt;uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/&gt;
    &lt;uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/&gt;
    &lt;uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/&gt;
    &lt;uses-permission android:name="android.permission.READ_CONTACTS"/&gt;
    &lt;uses-permission android:name="android.permission.READ_SMS"/&gt;
    &lt;uses-permission android:name="android.permission.READ_CALL_LOG"/&gt;
    ....
</code></pre>
<h2>
<a name="traffic-analysis-4" class="anchor" href="https://0x00sec.org#traffic-analysis-4"></a>Traffic analysis</h2>
<p>Starting by the traffic analysis will give more information about how the malware communicate with the C2C server and which information is sent.</p>
<p>Installing the malware on an Android Virtual Device which has Burp Suite as proxy, it can be observed that the server send different HTTP requests to different servers with the domain name <a href="http://gvt1.com" rel="noopener nofollow ugc">gvt1.com</a>:</p>
<ul>
<li><a href="http://redirector.gvt1.com" rel="noopener nofollow ugc">redirector.gvt1.com</a></li>
<li><a href="http://r6---sn-n0ogpnx-b85l.gvt1.com" rel="noopener nofollow ugc">r6---sn-n0ogpnx-b85l.gvt1.com</a></li>
<li><a href="http://r3---sn-n0ogpnx-b85l.gvt1.com" rel="noopener nofollow ugc">r3---sn-n0ogpnx-b85l.gvt1.com</a></li>
<li><a href="http://r5---sn-n0ogpnx-b85l.gvt1.com" rel="noopener nofollow ugc">r5---sn-n0ogpnx-b85l.gvt1.com</a></li>
</ul>
<p>The first HTTP request is sent to <a href="http://redirector.gvt1.com" rel="noopener nofollow ugc">redirector.gvt1.com</a>, which will redirect to one of the C2C servers.<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/6/564db5d6dce9fe43b04727ec462b9a3bfefdf9f3.png" data-download-href="/uploads/short-url/cjtytnoJOM1FnhuW3hb6j85ZtdN.png?dl=1" title="redirector" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/6/564db5d6dce9fe43b04727ec462b9a3bfefdf9f3_2_690x460.png" alt="redirector" data-base62-sha1="cjtytnoJOM1FnhuW3hb6j85ZtdN" width="690" height="460" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/6/564db5d6dce9fe43b04727ec462b9a3bfefdf9f3_2_690x460.png, https://0x00sec.s3.amazonaws.com/optimized/3X/5/6/564db5d6dce9fe43b04727ec462b9a3bfefdf9f3_2_1035x690.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/5/6/564db5d6dce9fe43b04727ec462b9a3bfefdf9f3.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/5/6/564db5d6dce9fe43b04727ec462b9a3bfefdf9f3_2_10x10.png"></a></div><p></p>
<p>If we follow the redirection, a binary file is downloaded from the C2C server.<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/c/9/c9cf5e7212a9f0365fa64b892972abc8d83f9206.png" data-download-href="/uploads/short-url/sNifXB5NYLY2RQ9FqH5Eggl4IK2.png?dl=1" title="file1_dl" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/9/c9cf5e7212a9f0365fa64b892972abc8d83f9206_2_690x466.png" alt="file1_dl" data-base62-sha1="sNifXB5NYLY2RQ9FqH5Eggl4IK2" width="690" height="466" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/9/c9cf5e7212a9f0365fa64b892972abc8d83f9206_2_690x466.png, https://0x00sec.s3.amazonaws.com/optimized/3X/c/9/c9cf5e7212a9f0365fa64b892972abc8d83f9206_2_1035x699.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/c/9/c9cf5e7212a9f0365fa64b892972abc8d83f9206.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/c/9/c9cf5e7212a9f0365fa64b892972abc8d83f9206_2_10x10.png"></a></div><p></p>
<p>Using <code>wget</code> to download the file in order to check what it contains:</p>
<pre><code class="lang-auto">wget "http://r3---sn-n0ogpnx-b85l.gvt1.com/edgedl/release2/chrome_component/AKi1sv7cx4bJf9W1XiuhCek_9.18.0/KDDyO-ENZ8HrUUsbZHNxeA" -O file1.data
</code></pre>
<p>The malware sends some parameter trough the request including the public IP address of the victim.<br>
The part <code>AKi1sv7cx4bJf9W1XiuhCek_9.18.0/KDDyO-ENZ8HrUUsbZHNxeA</code> of the request change at each time, it suspected that the information is sent encrypted through the request.</p>
<h3>
<a name="downloaded-files-analysis-5" class="anchor" href="https://0x00sec.org#downloaded-files-analysis-5"></a>Downloaded files Analysis</h3>
<p>Starting by identifying the file type of the downloaded file.</p>
<pre><code class="lang-auto">&gt; file file1.data
file1.data: Google Chrome extension, version 3
</code></pre>
<p>The application Google Chrome on Android does not support extensions. To get the data from this file <code>foremoset</code> is used.</p>
<pre><code class="lang-auto">&gt; foremost file1.data -o output_file1/
</code></pre>
<p>The tool founded one zip file which contains 3 files and one directory:<br>
<img src="https://0x00sec.s3.amazonaws.com/original/3X/6/1/6125779f2325e094354ae8303daf2ed557808236.png" alt="zip1_content" data-base62-sha1="dRoArRv9wid6tJcFqHCZrYk0N1Q" width="567" height="68"></p>
<p>The file <code>Filtering Rules</code> contains a list of 6291 domain names.</p>
<p>At each request a new list is downloaded with different domain names.</p>
<h2>
<a name="embedded-apks-6" class="anchor" href="https://0x00sec.org#embedded-apks-6"></a>Embedded APKs</h2>
<p>The malware embed three APKs located in the folder <code>assets/init</code>. These APKs are:</p>
<ul>
<li>Camera.apk</li>
<li>Core.apk</li>
<li>Location.apk</li>
</ul>
<p>These APKs will be analyzed later on (Not in this current post).</p>
<h1>
<a name="static-analysis-7" class="anchor" href="https://0x00sec.org#static-analysis-7"></a>Static Analysis</h1>
<h2>
<a name="main-activity-8" class="anchor" href="https://0x00sec.org#main-activity-8"></a>Main activity</h2>
<p>The main activity is <code>com.jsyjv.klxblnwc.p004u.MainActivity</code>. The function <code>onCreate</code> look as follows:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/8/68359576f06882defb73099fe1c4965cf01bdb04.png" data-download-href="/uploads/short-url/eRSsvqfc9CZqgVI6z47HDSTcuB6.png?dl=1" title="MainActivity_onCreate" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68359576f06882defb73099fe1c4965cf01bdb04_2_690x375.png" alt="MainActivity_onCreate" data-base62-sha1="eRSsvqfc9CZqgVI6z47HDSTcuB6" width="690" height="375" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68359576f06882defb73099fe1c4965cf01bdb04_2_690x375.png, https://0x00sec.s3.amazonaws.com/original/3X/6/8/68359576f06882defb73099fe1c4965cf01bdb04.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/6/8/68359576f06882defb73099fe1c4965cf01bdb04.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68359576f06882defb73099fe1c4965cf01bdb04_2_10x10.png"></a></div><p></p>
<p>The code calls a native function <code>mo684a</code> from the library <code>hello-jni</code> which generate a key, check if it’s the first time the application is launched by reading the value from the shared preferences file located at<br>
<code>/data/data/com.isyjv.klxblnwc/shared_prefs/com.isyjv.klxblnwc.xml</code>.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/1/413ed4bf05fffd389158649930e5026b3914218d.png" data-download-href="/uploads/short-url/9jbEkn5FGnU5370cXitC9B9Og2N.png?dl=1" title="native_hello_jni_a" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/1/413ed4bf05fffd389158649930e5026b3914218d_2_690x139.png" alt="native_hello_jni_a" data-base62-sha1="9jbEkn5FGnU5370cXitC9B9Og2N" width="690" height="139" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/1/413ed4bf05fffd389158649930e5026b3914218d_2_690x139.png, https://0x00sec.s3.amazonaws.com/original/3X/4/1/413ed4bf05fffd389158649930e5026b3914218d.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/4/1/413ed4bf05fffd389158649930e5026b3914218d.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/4/1/413ed4bf05fffd389158649930e5026b3914218d_2_10x10.png"></a></div><p></p>
<p>The malware calls the function <code>com.isyjv.klxblnwc.util.Utils.desDecrypt</code> with the generated hex key.<br>
The function is as follows:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/3/6/36af8215c4019ad5a4e745d60ecf054c24cee703.png" data-download-href="/uploads/short-url/7NLO5s0S75Os7Qu7Fm372ccYr0T.png?dl=1" title="desDecrypt" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/3/6/36af8215c4019ad5a4e745d60ecf054c24cee703_2_690x243.png" alt="desDecrypt" data-base62-sha1="7NLO5s0S75Os7Qu7Fm372ccYr0T" width="690" height="243" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/3/6/36af8215c4019ad5a4e745d60ecf054c24cee703_2_690x243.png, https://0x00sec.s3.amazonaws.com/original/3X/3/6/36af8215c4019ad5a4e745d60ecf054c24cee703.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/3/6/36af8215c4019ad5a4e745d60ecf054c24cee703.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/3/6/36af8215c4019ad5a4e745d60ecf054c24cee703_2_10x10.png"></a></div><p></p>
<pre><code class="lang-java">  cipher.init(2, skeyFactory.generateSecret(desKeySpec)); // Initialize cipher to decryption mode
</code></pre>
<p>Before encrypting the argument, the function divide the string into two characters, convert it each to integer then encrypt it:</p>
<pre><code class="lang-java">  byte[] btxts = new byte[(txt.length() / 2)];
  int count = txt.length();
  for (int i = 0; i &lt; count; i += 2) {
    btxts[i / 2] = (byte) Integer.parseInt(txt.substring(i, i + 2), 16);
  }
</code></pre>
<p>As DES decryption is the inversion of DES encryption, the function desDecrypt here is used as encryption routine.</p>
<p>After the key generation, the malware start a service that init the configuration file and redirect logs of the application to a file. The file name is microlog.txt and located in the folder /sdcard. the content is as follow:</p>
<pre><code class="lang-auto">[DEBUG]22:14:53,00 Utils|main PService onCreate |Microlog 1 
[DEBUG]22:14:53,00 Utils|main PService onBind Intent { cmp=com.isyjv.klxblnwc/.s.PService } |Microlog 1 
[DEBUG]22:14:53,01 Utils|main PService Binder uid:10149 |Microlog 2 
[DEBUG]22:14:53,03 Utils|main PService caller signature md5:3bd158635713d3e220113fb6adc8b6e2 |Microlog 4 
[DEBUG]22:14:53,48 AppEnv|main onCreate |Microlog 0 
[DEBUG]22:14:53,50 AppEnv|main startJobSheduler ret 1 |Microlog 2 
[DEBUG]22:14:53,52 AppEnv|main onCreate List pkgName: com.isyjv.klxblnwc svrName: com.isyjv.klxblnwc.s.HService |Microlog 4 
[DEBUG]22:14:53,53 AppEnv|main onStartCommand startId：1 |Microlog 5 
[DEBUG]22:14:53,54 AppEnv|Thread-2 startGuard pkgName: com.isyjv.klxblnwc svrName: com.isyjv.klxblnwc.s.HService |Microlog 6 
[DEBUG]22:14:53,54 AppEnv|Thread-2 startGuard wating... |Microlog 6 
[DEBUG]22:14:54,679 Utils|Binder:4646_3 start to installPlugin /storage/emulated/0/origin/Camera.apk,pkgname:null |Microlog 1680 
[DEBUG]22:14:54,712 Utils|Binder:4646_3 install plugin failed, pkgname:null resultCode:0 |Microlog 1713 
[DEBUG]22:14:54,722 Utils|Binder:4646_3 start to installPlugin /storage/emulated/0/origin/Core.apk,pkgname:null |Microlog 1723 
[DEBUG]22:14:54,798 Utils|Binder:4646_3 install plugin failed, pkgname:null resultCode:0 |Microlog 1799 
[DEBUG]22:14:54,813 Utils|Binder:4646_3 start to installPlugin /storage/emulated/0/origin/Location.apk,pkgname:null |Microlog 1814 
[DEBUG]22:14:54,869 Utils|Binder:4646_3 install plugin failed, pkgname:null resultCode:0 |Microlog 1870
</code></pre>
<p>This service start a second service that will install the packed APKs, list installed Apps and check if the device is rooted. This information is logged to file /sdcard/microlog.txt.</p>
<p>That’s it for this first part and thanks for reading!</p>
            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/reversing-actionspy-android-malware/26537">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/reversing-actionspy-android-malware/26537</link>
          <pubDate>Mon, 12 Jul 2021 17:11:19 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-26537</guid>
          <source url="https://0x00sec.org/t/reversing-actionspy-android-malware/26537.rss">Reversing ActionSpy Android Malware</source>
        </item>
        <item>
          <title>Need advise on dynamic reversing encrypted php file</title>
          <dc:creator><![CDATA[romzhke]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>Hi folks.<br>
I have some software which is delivered as enctypted php scripts. The encryption which is used is ioncube. So my strategy is to let the software run (it runs as a network service), while i will use R2 debugger to get right into memory\code and do my investigations.<br>
So as i understand the process, php interpreter generates some binary whith is then loaded in memory region with X permissions and passes controll to it. Is it correct?<br>
If yes, i cannot figure out how to locate the memory space i need.<br>
If i attach to the runing process i see the following memory mappings:</p>
<blockquote>
<p>[0x7f18e6909dd7]&gt; dm= ~!so<br>
map 4.1M - 0x000056257a70c000 |#-----------------------------| 0x000056257ab25000 r-x /usr/bin/php7.2<br>
map 484K - 0x000056257ad24000 |#-----------------------------| 0x000056257ad9d000 r-- /usr/bin/php7.2<br>
map 108K - 0x000056257ad9d000 |#-----------------------------| 0x000056257adb8000 rw- /usr/bin/php7.2<br>
map 116K - 0x000056257adb8000 |#-----------------------------| 0x000056257add5000 rw- unk0<br>
map 2.7M - 0x000056257c811000 |#-----------------------------| 0x000056257cac2000 rw- [heap]<br>
map  24K - 0x00007f18da538000 |------------------------------| 0x00007f18da53e000 rw- unk1<br>
map   4K - 0x00007f18dae98000 |------------------------------| 0x00007f18dae99000 rw- unk2<br>
map  16K - 0x00007f18dcfb3000 |------------------------------| 0x00007f18dcfb7000 rw- unk3<br>
map   4K - 0x00007f18ddb1f000 |------------------------------| 0x00007f18ddb20000 rw- unk4<br>
map   4K - 0x00007f18de56f000 |------------------------------| 0x00007f18de570000 rw- unk5<br>
map   4K - 0x00007f18df0f4000 |------------------------------| 0x00007f18df0f5000 rw- unk6<br>
map   4K - 0x00007f18e06a9000 |------------------------------| 0x00007f18e06aa000 rw- unk7<br>
map 124K - 0x00007f18e10b3000 |------------------------------| 0x00007f18e10d2000 rw- unk8<br>
map   8K - 0x00007f18e31f6000 |------------------------------| 0x00007f18e31f8000 rw- unk9<br>
map  36K - 0x00007f18e3465000 |------------------------------| 0x00007f18e346e000 rw- unk10<br>
map  16K - 0x00007f18e38d3000 |------------------------------| 0x00007f18e38d7000 rw- unk11<br>
map 3.2M - 0x00007f18e38d7000 |------------------------------| 0x00007f18e3c00000 r-- /usr/lib/locale/locale-archive<br>
map   2M - 0x00007f18e3c00000 |------------------------------| 0x00007f18e3e00000 rw- unk12<br>
map  16K - 0x00007f18e4449000 |------------------------------| 0x00007f18e444d000 rw- unk13<br>
map   4K - 0x00007f18e65d3000 |------------------------------| 0x00007f18e65d4000 rw- unk14<br>
map  16K - 0x00007f18e67ef000 |------------------------------| 0x00007f18e67f3000 rw- unk15<br>
map  16K - 0x00007f18e6be0000 |------------------------------| 0x00007f18e6be4000 rw- unk16<br>
map  12K - 0x00007f18e72fd000 |------------------------------| 0x00007f18e7300000 rw- unk17<br>
map   4K - 0x00007f18e794d000 |------------------------------| 0x00007f18e794e000 rw- unk18<br>
map   8K - 0x00007f18e8597000 |------------------------------| 0x00007f18e8599000 rw- unk19<br>
map 292K - 0x00007f18e88f5000 |------------------------------| 0x00007f18e893e000 rw- unk20<br>
map 428K - 0x00007f18e8953000 |------------------------------| 0x00007f18e89be000 rw- unk21<br>
map   4K - 0x00007f18e89cd000 |------------------------------| 0x00007f18e89ce000 rw- unk22<br>
map   4K - 0xffffffffff600000 |------------------------------| 0xffffffffff601000 r-x [vsyscall]<br>
map 132K - 0x00007ffe55e0e000 |#####-------------------------| 0x00007ffe55e2f000 rw- [stack]<br>
map  12K - 0x00007ffe55ed4000 |-----------------------------#| 0x00007ffe55ed7000 r-- [vvar]</p>
</blockquote>
<p>So. As i have guessed we nee da memory region with X rights. So we only left with the following:</p>
<blockquote>
<p>[0x7f18e6909dd7]&gt; dm= ~!so | grep “-x”<br>
map 4.1M - 0x000056257a70c000 |#-----------------------------| 0x000056257ab25000 r-x /usr/bin/php7.2<br>
map   4K - 0xffffffffff600000 |------------------------------| 0xffffffffff601000 r-x [vsyscall]</p>
</blockquote>
<p>I’d say that vsyscall is something related to syscalls, so we are only left wth a single memory map.<br>
So next, i check the mapping inside the selected mem region:</p>
<blockquote>
<p>[0x56257aa6c260]&gt; dmS php<br>
[Sections]</p>
<h2>nth paddr           size vaddr              vsize perm name</h2>
<p>0   0x00000000       0x0 0x00000000           0x0 ---- php7.2.<br>
1   0x00000238      0x1c 0x56257a70c238      0x1c -r-- php7.2…interp<br>
2   0x00000254      0x20 0x56257a70c254      0x20 -r-- php7.2…note.ABI_tag<br>
3   0x00000274      0x24 0x56257a70c274      0x24 -r-- php7.2…note.gnu.build_id<br>
4   0x00000298    0x3328 0x56257a70c298    0x3328 -r-- php7.2…gnu.hash<br>
5   0x000035c0    0xed18 0x56257a70f5c0    0xed18 -r-- php7.2…dynsym<br>
6   0x000122d8    0xbf10 0x56257a71e2d8    0xbf10 -r-- php7.2…dynstr<br>
7   0x0001e1e8    0x13c2 0x56257a72a1e8    0x13c2 -r-- php7.2…gnu.version<br>
8   0x0001f5b0     0x1b0 0x56257a72b5b0     0x1b0 -r-- php7.2…gnu.version_r<br>
9   0x0001f760   0xbf688 0x56257a72b760   0xbf688 -r-- php7.2…rela.dyn<br>
10  0x000dede8    0x4908 0x56257a7eade8    0x4908 -r-- php7.2…rela.plt<br>
11  0x000e36f0      0x17 0x56257a7ef6f0      0x17 -r-x php7.2…init<br>
12  0x000e3710    0x30c0 0x56257a7ef710    0x30c0 -r-x php7.2…plt<br>
13  0x000e67d0      0x30 0x56257a7f27d0      0x30 -r-x php7.2…plt.got<br>
14  0x000e6800  0x279a52 0x56257a7f2800  0x279a52 -r-x php7.2…text<br>
15  0x00360254       0x9 0x56257aa6c254       0x9 -r-x php7.2…fini<br>
16  0x00360260   0x64288 0x56257aa6c260   0x64288 -r-- php7.2…rodata<br>
17  0x003c44e8       0x1 0x56257aad04e8       0x1 -r-- php7.2…stapsdt.base<br>
18  0x003c44ec    0xc33c 0x56257aad04ec    0xc33c -r-- php7.2…eh_frame_hdr<br>
19  0x003d0828   0x48620 0x56257aadc828   0x48620 -r-- php7.2…eh_frame<br>
20  0x00418fd0       0x8 0x56257ad24fd0       0x8 -rw- php7.2…init_array<br>
21  0x00418fd8       0x8 0x56257ad24fd8       0x8 -rw- php7.2…fini_array<br>
22  0x00418fe0   0x76410 0x56257ad24fe0   0x76410 -rw- php7.2…data.rel.ro<br>
23  0x0048f3f0     0x290 0x56257ad9b3f0     0x290 -rw- php7.2…dynamic<br>
24  0x0048f680    0x1978 0x56257ad9b680    0x1978 -rw- php7.2…got<br>
25  0x00491000   0x1a638 0x56257ad9d000   0x1a638 -rw- php7.2…data<br>
26  0x004ab638      0x16 0x56257adb7638      0x16 -rw- php7.2…probes<br>
27  0x004ab64e       0x0 0x56257adb7660   0x1cff0 -rw- php7.2…bss<br>
28  0x004ab650     0x4a8 0x00000000         0x4a8 ---- php7.2…note.stapsdt<br>
29  0x004abaf8      0x34 0x00000000          0x34 ---- php7.2…gnu_debuglink<br>
30  0x004abb2c     0x125 0x00000000         0x125 ---- php7.2…shstrtab</p>
</blockquote>
<p>But here i am not sure.</p>
<ol>
<li>I am right in general? Is this the area i need to focus on?</li>
<li>If 1. is true, then how do i dump the .text section to the disc, for example, And then load it into Ghidra to decompile or build some graphs?</li>
<li>In general what’s next? I am a bit confused.</li>
</ol>
            <p><small>5 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/need-advise-on-dynamic-reversing-encrypted-php-file/25659">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/need-advise-on-dynamic-reversing-encrypted-php-file/25659</link>
          <pubDate>Wed, 14 Apr 2021 13:39:19 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-25659</guid>
          <source url="https://0x00sec.org/t/need-advise-on-dynamic-reversing-encrypted-php-file/25659.rss">Need advise on dynamic reversing encrypted php file</source>
        </item>
        <item>
          <title>STM32F103C8T6 E Scooter firmware reverse engineering</title>
          <dc:creator><![CDATA[Bastler]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>Hello folks,</p>
<p>I am new here, come from Germany and want to take some experince in reverse engineering code for hobby purpose. I have a Ninebot G30D E Scooter, and I want to find out how this thing work indisde. There are some people who found that already out, but they say nothing about their knowledge, so I think I have to get into this stuff and find it out by myself.</p>
<p>Now I want to ask if you can help me a little bit with doing that. What I actually about the controller µC of the scooter know is:</p>
<p>STM32F103C8T6 inside (Every chinese BLDC Controller uses them, that seems to be a unwritten rule among chinese BLDC controller companies)</p>
<p>ARM Cortex M3 with little endian and 64kb of flash (They have in real 128kb, but ST says 64kb)</p>
<p>Now is the first question: IDA asks me about the Memory organisation of the µC, so could someone here tell me how to set up IDA correctly so I will not already fail by decompiling itself? I tried by myself, but did always get error that the memory configuration is wrong.<br>
I have the memory map, but didnt get really smart out of it.</p>
<p>Hope you can halp me, I think we are now in a time I will not come around learning coding and reversing/editing code anymore because everything has code inside nowdays.</p>
            <p><small>8 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201</link>
          <pubDate>Sat, 12 Dec 2020 13:08:32 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-24201</guid>
          <source url="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201.rss">STM32F103C8T6 E Scooter firmware reverse engineering</source>
        </item>
        <item>
          <title>Some functions doesn&#39;t have prologue, why?</title>
          <dc:creator><![CDATA[daniel_benisti]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>Hi,<br>
why some functions that i see in Olly doesn’t have prologue at the beginning?<br>
event if i enter the functions the prologue is missing inside them.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/d/6d5c2684e355679278496ac209b96e16bc3eb4e4.png" data-download-href="/uploads/short-url/fBrtuKbNu5RVGoOrj27pVhgywfO.png?dl=1" title="checking-RE" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/6/d/6d5c2684e355679278496ac209b96e16bc3eb4e4_2_690x337.png" alt="checking-RE" data-base62-sha1="fBrtuKbNu5RVGoOrj27pVhgywfO" width="690" height="337" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/6/d/6d5c2684e355679278496ac209b96e16bc3eb4e4_2_690x337.png, https://0x00sec.s3.amazonaws.com/optimized/3X/6/d/6d5c2684e355679278496ac209b96e16bc3eb4e4_2_1035x505.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/6/d/6d5c2684e355679278496ac209b96e16bc3eb4e4.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/6/d/6d5c2684e355679278496ac209b96e16bc3eb4e4_2_10x10.png"></a></div><p></p>
            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/some-functions-doesnt-have-prologue-why/23410">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/some-functions-doesnt-have-prologue-why/23410</link>
          <pubDate>Sun, 04 Oct 2020 18:52:59 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-23410</guid>
          <source url="https://0x00sec.org/t/some-functions-doesnt-have-prologue-why/23410.rss">Some functions doesn&#39;t have prologue, why?</source>
        </item>
        <item>
          <title>Rep elearning security reveiw</title>
          <dc:creator><![CDATA[daniel_benisti]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>Hi,<br>
learning reversing is one of the most difficult things i encountered with.<br>
so i want to ease things up by learning a course called REP by elearning security.<br>
does anyone tried that course and can give me a fair review?</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/rep-elearning-security-reveiw/23132">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/rep-elearning-security-reveiw/23132</link>
          <pubDate>Tue, 15 Sep 2020 06:21:31 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-23132</guid>
          <source url="https://0x00sec.org/t/rep-elearning-security-reveiw/23132.rss">Rep elearning security reveiw</source>
        </item>
        <item>
          <title>Bypass Linux Basic Anti Debugging</title>
          <dc:creator><![CDATA[0x0fy]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>First of all, Hello everyone. Welcome to my new Writeup.</p>
<p>There are many methods to prevent Debugging in Linux. In this writeup we will see skipping the most used and simplest method.</p>
<p>Basic Logic of this process; If there is a Tracing operation with Ptrace, it is to detect it using ptrace.</p>
<p>Considering that there is a control like this:</p>
<blockquote>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;sys/ptrace.h&gt;

int main()
{
	if (ptrace(PTRACE_TRACEME, 0, 1, 0) &lt; 0) {
		printf("Debugging Dedected , Fuck You !\n");
		return 1;
	}
	printf("Normal Execution\n");
	return 0;
}
</code></pre>
</blockquote>
<p>Here we see that the ptrace system call checks if the argument named PTRACE_TRACEME is a child process for Debugging.</p>
<p>If the Process is traced;</p>
<blockquote>
<p>printf (“Debugging Dedected, Fuck You! \ n”);</p>
</blockquote>
<p>message, If not We get the message:</p>
<blockquote>
<p>printf (“Normal Execution \ n”);</p>
</blockquote>
<p>** How Can We bypass The Control Made In This Situation?**</p>
<p>The solution I found for this is  using LD_PRELOAD; Hijacking the ptrace () Function</p>
<p>First of all ptrace (); We’re creating a fake library to replace it as follows:</p>
<pre><code>&gt; long ptrace(int request, int pid, int addr, int data)
&gt; {
&gt;     return 0;
&gt; } 
</code></pre>
<p>Compiling : gcc evillib.c -o evillib.so -fPIC -shared -ldl -D_GNU_SOURCE</p>
<p>After compilation, we assign the resulting library location to the LD_PRELOAD environment variable. and then when we run it with gdb</p>
<blockquote>
<p>printf (“Normal Execution \ n”);</p>
</blockquote>
<p>We get This message. So we successfully bypassed Control.</p>
<p>To automate this, I share with you the little tool I wrote:</p>
<p><a href="https://github.com/noopslide/Ptrace-Anti-Debugging-Bypass/blob/master/ptracebypass.py" class="onebox" target="_blank" rel="noopener nofollow ugc">https://github.com/noopslide/Ptrace-Anti-Debugging-Bypass/blob/master/ptracebypass.py</a></p>
<p>Video on How to Use the Tool:</p>
<p><a href="https://www.youtube.com/watch?v=VmPfOobZwlE"> - YouTube</a></p>

<p><strong>Thank you for your time.</strong><br>
<strong>good hackings.</strong></p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/bypass-linux-basic-anti-debugging/22799">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/bypass-linux-basic-anti-debugging/22799</link>
          <pubDate>Sat, 22 Aug 2020 11:56:42 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-22799</guid>
          <source url="https://0x00sec.org/t/bypass-linux-basic-anti-debugging/22799.rss">Bypass Linux Basic Anti Debugging</source>
        </item>
        <item>
          <title>Breaking the D-Link DIR3060 Firmware Encryption - Static analysis of the decryption routine - Part 2.2</title>
          <dc:creator><![CDATA[ricksanchez]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>Welcome back to part 2.2 of this series! If you have not yet checked out <a href="https://0x434b.dev/breaking-the-d-link-dir3060-firmware-encryption-recon-part-1/">part 1</a> or <a href="https://0x434b.dev/breaking-the-d-link-dir3060-firmware-encryption-static-analysis-of-the-decryption-routine-part-2-1/">part 2.1</a> please do so first as they highlight important reconnaissance steps as well as the first half of the disassembly analysis!</p>
<h2 id="heading--toc">ToC:</h2>
<ul>
<li>
<a href="https://0x00sec.org#heading--toc">ToC</a>
<ul>
<li><a href="https://0x00sec.org#heading--checkmagic">check_magic</a></li>
<li>
<a href="https://0x00sec.org#heading--calc512md">calcSha512Digest</a>
<ul>
<li><a href="https://0x00sec.org#heading--datalenanal">Analysis of the datalen variables</a></li>
<li><a href="https://0x00sec.org#heading--off-0x6dc">Offset analysis: The curious case of 0x6dc</a></li>
</ul>
</li>
<li><a href="https://0x00sec.org#heading--sha512checker">sha512_checker</a></li>
</ul>
</li>
<li><a href="https://0x00sec.org#heading--decfwtd">decrypt_firmware tear down</a></li>
<li>
<a href="https://0x00sec.org#heading--summary">Summary</a>
<ul>
<li><a href="https://0x00sec.org#heading--otherfwi">Testing against other encrypted D-Link images</a></li>
<li><a href="https://0x00sec.org#heading--unpackingdir3060">Unpacking D-Link DIR3060 - A quick analysis</a></li>
</ul>
</li>
<li><a href="https://0x00sec.org#heading--conclusion">Conclusion</a></li>
</ul>
<hr>
<p>Let’s recall the current functionality we’ve encountered based on the developed source code:</p>
<pre><code class="lang-auto">#include &lt;arpa/inet.h&gt;
#include &lt;errno.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;openssl/aes.h&gt;
#include &lt;openssl/pem.h&gt;
#include &lt;openssl/rsa.h&gt;
#include &lt;stddef.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/mman.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;

static RSA *grsa_struct = NULL;
static unsigned char iv[] = {0x98, 0xC9, 0xD8, 0xF0, 0x13, 0x3D, 0x06, 0x95,
                             0xE2, 0xA7, 0x09, 0xC8, 0xB6, 0x96, 0x82, 0xD4};
static unsigned char aes_in[] = {0xC8, 0xD3, 0x2F, 0x40, 0x9C, 0xAC,
                                 0xB3, 0x47, 0xC8, 0xD2, 0x6F, 0xDC,
                                 0xB9, 0x09, 0x0B, 0x3C};
static unsigned char aes_key[] = {0x35, 0x87, 0x90, 0x03, 0x45, 0x19,
                                  0xF8, 0xC8, 0x23, 0x5D, 0xB6, 0x49,
                                  0x28, 0x39, 0xA7, 0x3F};

unsigned char out[] = {0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
                       0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46};

int check_cert(char *pem, void *n) {
  OPENSSL_add_all_algorithms_noconf();

  FILE *pem_fd = fopen(pem, "r");
  if (pem_fd != NULL) {
    RSA *lrsa_struct[2];
    *lrsa_struct = RSA_new();
    if (!PEM_read_RSAPublicKey(pem_fd, lrsa_struct, NULL, n)) {
      RSA_free(*lrsa_struct);
      puts("Read RSA private key failed, maybe the password is incorrect.");
    } else {
      grsa_struct = *lrsa_struct;
    }
    fclose(pem_fd);
  }
  if (grsa_struct != NULL) {
    return 0;
  } else {
    return -1;
  }
}

int aes_cbc_encrypt(size_t length, unsigned char *key) {
  AES_KEY dec_key;
  AES_set_decrypt_key(aes_key, sizeof(aes_key) * 8, &amp;dec_key);
  AES_cbc_encrypt(aes_in, key, length, &amp;dec_key, iv, AES_DECRYPT);
  return 0;
}

int call_aes_cbc_encrypt(unsigned char *key) {
  aes_cbc_encrypt(0x10, key);
  return 0;
}

int actual_decryption(char *sourceFile, char *tmpDecPath, unsigned char *key) {
  int ret_val = -1;
  size_t st_blocks = -1;
  struct stat statStruct;
  int fd = -1;
  int fd2 = -1;
  void *ROM = 0;
  int *RWMEM;
  off_t seek_off;
  unsigned char buf_68[68];
  int st;

  memset(&amp;buf_68, 0, 0x40);
  memset(&amp;statStruct, 0, 0x90);
  st = stat(sourceFile, &amp;statStruct);
  if (st == 0) {
    fd = open(sourceFile, O_RDONLY);
    st_blocks = statStruct.st_blocks;
    if (((-1 &lt; fd) &amp;&amp;
         (ROM = mmap(0, statStruct.st_blocks, 1, MAP_SHARED, fd, 0),
          ROM != 0)) &amp;&amp;
        (fd2 = open(tmpDecPath, O_RDWR | O_NOCTTY, 0x180), -1 &lt; fd2)) {
      seek_off = lseek(fd2, statStruct.st_blocks - 1, 0);
      if (seek_off == statStruct.st_blocks - 1) {
        write(fd2, 0, 1);
        close(fd2);
        fd2 = open(tmpDecPath, O_RDWR | O_NOCTTY, 0x180);
        RWMEM = mmap(0, statStruct.st_blocks, PROT_EXEC | PROT_WRITE,
                     MAP_SHARED, fd2, 0);
        if (RWMEM != NULL) {
          ret_val = 0;
        }
      }
    }
  }
  puts("EOF part 2.1!\n");
  return ret_val;
}

int decrypt_firmware(int argc, char **argv) {
  int ret;
  unsigned char key[] = {0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
                         0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46};
  char *ppem = "/tmp/public.pem";
  int loopCtr = 0;
  if (argc &lt; 2) {
    printf("%s &lt;sourceFile&gt;\r\n", argv[0]);
    ret = -1;
  } else {
    if (2 &lt; argc) {
      ppem = (char *)argv[2];
    }
    int cc = check_cert(ppem, (void *)0);
    if (cc == 0) {
      call_aes_cbc_encrypt((unsigned char *)&amp;key);

      printf("key: ");
      while (loopCtr &lt; 0x10) {
        printf("%02X", *(key + loopCtr) &amp; 0xff);
        loopCtr += 1;
      }
      puts("\r");
      ret = actual_decryption((char *)argv[1], "/tmp/.firmware.orig",
                              (unsigned char *)&amp;key);

      if (ret == 0) {
        unlink(argv[1]);
        rename("/tmp/.firmware.orig", argv[1]);
      }
      RSA_free(grsa_struct);
    } else {
      ret = -1;
    }
  }
  return ret;
}

int encrypt_firmware(int argc, char **argv) { return 0; }

int main(int argc, char **argv) {
  int ret;
  char *str_f = strstr(*argv, "decrypt");

  if (str_f != NULL) {
    ret = decrypt_firmware(argc, argv);

  } else {
    ret = encrypt_firmware(argc, argv);
  }

  return ret;
}
</code></pre>
<p>We left of right after the setup stuff:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/9/91281aa29353a2806fa6381bf96479384ed0b653.png" data-download-href="/uploads/short-url/kI79ED9D6vBrAzdOzm90eeQFX2P.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/9/91281aa29353a2806fa6381bf96479384ed0b653_2_588x500.png" alt="" data-base62-sha1="kI79ED9D6vBrAzdOzm90eeQFX2P" width="588" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/9/91281aa29353a2806fa6381bf96479384ed0b653_2_588x500.png, https://0x00sec.s3.amazonaws.com/optimized/2X/9/91281aa29353a2806fa6381bf96479384ed0b653_2_882x750.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/9/91281aa29353a2806fa6381bf96479384ed0b653.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/9/91281aa29353a2806fa6381bf96479384ed0b653_2_10x10.png"></a></div><p></p>
<p>The last thing we analyzed was re-mapping the file located at <code>/tmp/.firmware.orig</code> back into memory with some minor adjustments to file permissions. Again if the mapping fails we’ll take a non wanted path so we will ignore that in the analysis again. So in case of success the still mapped <code>sourceFile</code> is being prepared as a function argument to a function called <code>check_magic</code> :</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/c/c2ba63fe8e090873743cc22861855411a0b32ee0.png" data-download-href="/uploads/short-url/rMDY5XtbesXq3RyVa6uakSmHGgg.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c2ba63fe8e090873743cc22861855411a0b32ee0_2_690x159.png" alt="" data-base62-sha1="rMDY5XtbesXq3RyVa6uakSmHGgg" width="690" height="159" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c2ba63fe8e090873743cc22861855411a0b32ee0_2_690x159.png, https://0x00sec.s3.amazonaws.com/original/2X/c/c2ba63fe8e090873743cc22861855411a0b32ee0.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/c/c2ba63fe8e090873743cc22861855411a0b32ee0.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c2ba63fe8e090873743cc22861855411a0b32ee0_2_10x10.png"></a></div><p></p>
<p>First decryption related code after all the file prep work earlier</p>
<h3 id="heading--checkmagic">check_magic:</h3>
<p><code>check_magic</code> is pretty straightforward. It takes a mapped memory (at least read-only permissions) segment as an argument and calls <code>int memcmp(mapped_sourceFile, "SHRS", 4)</code> to check whether the first 4 byte in the binary correspond to " <em>SHRS</em> " (0x53485253).</p>
<p>‌<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2eaeb7211bebf449ad653360adef3ed99885b618.png" alt="" data-base62-sha1="6EYhX1JuJGDpOF1OiDB8udnxdaM" width="522" height="474"></p>
<p>According to the return value of <code>memcmp</code> , which is stored in <code>$v0</code> , <code>sltiu  $v0, 1</code> sets the return value of this function as follows:</p>
<ul>
<li>If <code>$v0</code> == 0 (== full match) → <code>$v0 = 1</code>
</li>
<li>Else <code>$v0 = 0</code>
</li>
</ul>
<p>The disassembly graph earlier shows that if the return value of <code>check_magic</code> is != 0 the branch to <code>magic_succ</code> is taken ( <code>bnez  $v0, magic_succ</code> ). This little function serves as a sanity check and first confirmation that an encrypted image starts with a valid header. We already saw this string earlier in the hex dump in part 1. So this part at least clears up the confusion about this seemingly non-random string. It was indeed non-random after all! The snippet below again confirms the presence of " <em>SHRS"</em> in an encrypted image file.</p>
<pre><code class="lang-auto">&gt; hd DIR_882_FW120B06.BIN -n 16
00000000  53 48 52 53 00 d1 d9 a6  00 d1 d9 b0 67 c6 69 73  |SHRS........g.is|
00000010
&gt; # 0x53 0x48 0x52 0x53 == "SHRS"
</code></pre>
<p>So once we pass this check and are back in the <code>actual_decryption</code> function control flow continues here:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/c/ca4e5300bb98f2959e5af29288b4533df8551a5e.png" data-download-href="/uploads/short-url/sRGfZrpSra1brwArRMMh9nlqwiy.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/c/ca4e5300bb98f2959e5af29288b4533df8551a5e_2_627x500.png" alt="" data-base62-sha1="sRGfZrpSra1brwArRMMh9nlqwiy" width="627" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/c/ca4e5300bb98f2959e5af29288b4533df8551a5e_2_627x500.png, https://0x00sec.s3.amazonaws.com/original/2X/c/ca4e5300bb98f2959e5af29288b4533df8551a5e.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/c/ca4e5300bb98f2959e5af29288b4533df8551a5e.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/c/ca4e5300bb98f2959e5af29288b4533df8551a5e_2_10x10.png"></a></div><br>
The first two chunks that lead up two a call to <code>uint32_t htonl(uint32_t hostlong)</code> are best explained with an example. Once again we’re using the header of an encrypted firmware sample:<p></p>
<pre><code class="lang-auto">$v0:
          ↓
00000000: 5348 5253 00d1 d9a6 00d1 d9b0 67c6 6973  SHRS........g.is
00000010: 51ff 4aec 29cd baab f2fb e346 fda7 4d06  Q.J.)......F..M.
[...]

lwl $v1 11($v0):
                                      ↓
00000000: 5348 5253 00d1 d9a6 00d1 d9b0 67c6 6973  SHRS........g.is
00000010: 51ff 4aec 29cd baab f2fb e346 fda7 4d06  Q.J.)......F..M.
[...]
--&gt; $v1 = b0d9

move $a0, $v1
--&gt; $a0 = b0d9 XXXX

lwr $a0, 8($v0):
                              ↓
00000000: 5348 5253 00d1 d9a6 00d1 d9b0 67c6 6973  SHRS........g.is
00000010: 51ff 4aec 29cd baab f2fb e346 fda7 4d06  Q.J.)......F..M.
[...]
--&gt;   $a0 = b0d9 d100

nop
move $v0, $a0
--&gt; $v0 = b0d9 d100

move $a0, $v0
--&gt; $a0 = b0d9 d100

htonl(b0d9 d100)
</code></pre>
<p>In MIPS we need this pair of <code>lwl, lwr</code> instructions for unaligned memory access. Basically you’re providing the <code>lwl</code> instruction with the address of the most significant byte of an unaligned memory location. It will automatically put the corresponding bytes into the upper bytes of the destination register ( <code>$v1</code> / <code>$a0</code> respectively). <code>lwr</code> works analogously, with the only difference being that the picked bytes are put in the lower bytes of the destination register. The results are combined by merging both byte values (so these instructions can be used in either order!).</p>
<pre><code class="lang-auto"># datalen_2
int.from_bytes(b'\xb0\xd9\xd1\x00', byteorder='little', signed=False)
13752752

# Alternatively, we can use the socket package
from socket import htonl
htonl(0xb0d9d100)
13752752

# datalen_1 
int.from_bytes(b'\xa6\xd9\xd1\x00', byteorder='little', signed=False)
13752742
</code></pre>
<p>Both return values are saved on the stack ( <code>0x128+datalen_2($sp)</code> / <code>0x128+datalen_1($sp)</code> ). The question remains what are they used for and why are there two almost identical values ( <code>\xb0\xd9\xd1\x00</code> vs. <code>\xa6\xd9\xd1\x00</code> ). Neither of those two seem to be the full length of the encrypted firmware binary:</p>
<pre><code class="lang-auto">&gt; wc -c DIR_882_FW120B06.BIN
13759047 DIR_882_FW120B06.BIN

&gt; wc -c DIR_882_FW120B06.BIN | cut -d' ' -f1 | xargs printf '0x%x\n'     
0xd1f247
</code></pre>
<p>Their purpose will become clear soon as one of these values is used right away! After this fun memory access magic a function call to <code>calcSha512Digest</code> is being prepared with 3 arguments: <code>calcSha512Digest(mapped_sourceFile + 0x6dc, datalen_2, buf)</code> .</p>
<h3 id="heading--calc512md">calcSha512Digest:</h3>
<p>As the name already gives away this function calculates a SHA512 message digest. Based on the function arguments this invocation will use the mapped encrypted firmware at offset <code>0x6dc</code> , with length <code>datalen_2</code> , which we just calculated earlier in the <code>htonl</code> part! When taking this offset into account could <code>datalen_2 = total size - offset</code> ?</p>
<pre><code class="lang-auto">&gt; # total size - offset - datalen_2
&gt; pcalc 0xd1f247 - 0x6dc - 0xd1d9b0
	4532            	0x11b4            	0y1000110110100'
&gt; # Clearly not..
</code></pre>
<p>The provided buffer variable is used to store the hash result memory. The function itself just uses the SHA512 library functions. If you look a little bit more closely you’ll notice that this <em>holy trinity</em> of <code>SHA512_Init</code> , <code>SHA512_Update</code> , and <code>SHA512_Final</code> all belong to OpenSSL and are taken from <code>libcrypto</code> which we found in the <em>strings</em> output in part 1!</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/1/16483e965b318f12afb42fa5d35de756ca60d2d4.png" data-download-href="/uploads/short-url/3b7hOUzcrBVJIvA9apckk3R0wqo.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/1/16483e965b318f12afb42fa5d35de756ca60d2d4_2_690x489.png" alt="" data-base62-sha1="3b7hOUzcrBVJIvA9apckk3R0wqo" width="690" height="489" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/1/16483e965b318f12afb42fa5d35de756ca60d2d4_2_690x489.png, https://0x00sec.s3.amazonaws.com/original/2X/1/16483e965b318f12afb42fa5d35de756ca60d2d4.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/1/16483e965b318f12afb42fa5d35de756ca60d2d4.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/16483e965b318f12afb42fa5d35de756ca60d2d4_2_10x10.png"></a></div><p></p>
<p>Right after exiting <code>calcSha512Digest</code> the basic block continues with setting up another <code>memcmp</code> to compare the just calculated hash digest to an expected value:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/f/fc990dfeaf6a4211086e35b0193df5cb94825e2c.png" data-download-href="/uploads/short-url/A2AeV7oNzm1yz7z1WgGCpuRwOeM.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/f/fc990dfeaf6a4211086e35b0193df5cb94825e2c_2_690x245.png" alt="" data-base62-sha1="A2AeV7oNzm1yz7z1WgGCpuRwOeM" width="690" height="245" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/f/fc990dfeaf6a4211086e35b0193df5cb94825e2c_2_690x245.png, https://0x00sec.s3.amazonaws.com/original/2X/f/fc990dfeaf6a4211086e35b0193df5cb94825e2c.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/f/fc990dfeaf6a4211086e35b0193df5cb94825e2c.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/f/fc990dfeaf6a4211086e35b0193df5cb94825e2c_2_10x10.png"></a></div><p></p>
<p>This value is hard coded in the encrypted binary (which is still mapped as RO into memory at this point) at offset <code>0x9C</code> . The third supplied argument to the <code>int memcmp(const void *s1, const void *s2, size_t n)</code> call is again the size and as expected has to be 0x40 bytes as SHA512 returns a 512 bit digest (== 64 bytes == 0x40 bytes). We can easily extract said value from our encrypted firmware:</p>
<pre><code class="lang-auto">&gt; pcalc 0x40
    64              	0x40              	0y1000000

&gt; pcalc 0x9c
    156             	0x9c              	0y10011100

&gt; hd DIR_882_FW120B06.BIN -s 0x9c -n 64 -e '156/1 "%x" "\n"' | cut -d
0000009c  68 bf e5 30 a0 49 b9 e8  5d a0 bb 81 71 87 05 cd  |h..0.I..]...q...|
000000ac  70 25 18 f2 8f af d6 21  35 05 31 7e fd af 60 56  |p%.....!5.1~..`V|
000000bc  d8 ed e7 71 6c 39 d1 68  0d a7 13 f4 04 41 87 58  |...ql9.h.....A.X|
000000cc  e9 97 36 73 99 78 8b 01  10 ee 12 d6 b6 3b 69 ec  |..6s.x.......;i.|
000000dc

&gt; hd DIR_882_FW120B06.BIN -s 0x9c -n 64 -e '156/1 "%x" "\n"' | cut -d$'\n' -f2
68bfe530a049b9e85da0bb8171875cd702518f28fafd621355317efdaf6056d8ede7716c39d168da713f44418758e997367399788b110ee12d6b63b69ec
</code></pre>
<p>If there is a mismatch control flow is, as usual, redirected to an early exit. However, in case of success control is redirected to the part I renamed as <code>hash1_succ</code> ( <em>memcmp</em> returns (in <code>$v0</code> ) 0 on an exact match, which is followed by a branching <code>beqz  $v0, hash1_succ</code> instruction).</p>
<p>The first part in <code>hash1_succ</code> sets up a another call to <code>aes_cbc_encrypt</code> with five arguments:</p>
<ul>
<li>arg1 ( <code>$a0</code> ): mapped source File + <code>0x6dc</code>
</li>
<li>arg2 ( <code>$a1</code> ): datalen_2</li>
<li>arg3 ( <code>$a2</code> ): decryption key (still the one from the debug <code>printf</code> to <em>stdout</em> earlier)</li>
<li>arg4 ( <code>$a3</code> ): IVEC (same as before)</li>
<li>arg5 (on stack): mapped file at <em>/tmp/</em> location</li>
</ul>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/6/6c9d5f702e439541a6fc05d4436f7435d913a69a.png" data-download-href="/uploads/short-url/fuQJF40GfZycrDCcT0YlDNhUVGq.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6c9d5f702e439541a6fc05d4436f7435d913a69a_2_690x232.png" alt="" data-base62-sha1="fuQJF40GfZycrDCcT0YlDNhUVGq" width="690" height="232" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6c9d5f702e439541a6fc05d4436f7435d913a69a_2_690x232.png, https://0x00sec.s3.amazonaws.com/original/2X/6/6c9d5f702e439541a6fc05d4436f7435d913a69a.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/6/6c9d5f702e439541a6fc05d4436f7435d913a69a.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6c9d5f702e439541a6fc05d4436f7435d913a69a_2_10x10.png"></a></div><p></p>
<p>We already covered earlier what this function does. However, instead of calculating the decryption key with size 0x40 a large chunk of memory from the mapped and encrypted firmware is being used in combination with the decryption key. This can only mean one thing: This code block is responsible for decrypting the whole thing!</p>
<p>So after <code>aes_cbc_encrypt</code> returns we basically have access to the fully decrypted firmware already. Directly afterwards there is another call to <code>calcSha512Digest</code> :</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/6/68dac68cce3dc433ae1b85e7e39ebeb3cd661f5d.png" data-download-href="/uploads/short-url/eXAnEk7UgrNhsxnGDTiQCgGcXnv.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/68dac68cce3dc433ae1b85e7e39ebeb3cd661f5d_2_690x303.png" alt="" data-base62-sha1="eXAnEk7UgrNhsxnGDTiQCgGcXnv" width="690" height="303" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/6/68dac68cce3dc433ae1b85e7e39ebeb3cd661f5d_2_690x303.png, https://0x00sec.s3.amazonaws.com/original/2X/6/68dac68cce3dc433ae1b85e7e39ebeb3cd661f5d.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/6/68dac68cce3dc433ae1b85e7e39ebeb3cd661f5d.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/68dac68cce3dc433ae1b85e7e39ebeb3cd661f5d_2_10x10.png"></a></div><p></p>
<p>This time with our suspected freshly decrypted firmware, <code>datalen_1</code> , and a buffer as the arguments.  The result of the SHA512 operation is compared against an expected value at <code>encrypted_firmware + 0x5c</code> . Once again we’re talking about a 64 byte value here:</p>
<pre><code class="lang-auto">&gt; hd DIR_882_FW120B06.BIN -s 0x5c -n 64 -e '92/1 "%x" "\n"' | cut -d$'\n' -f2
1657d3b7d77c9e11ec721dfb87a25b18ec538285b98439b6b4dd85def0283d36ebeaad09d71b0ba3e2640e8c54ceb32eb0e8f721d73aaad14d5f7e872
</code></pre>
<p>Analogous to other <em>memcmp</em> operations earlier another <code>beqz  $v0, hash2_succ</code> redirects control flow based on the result. We’ve seen this multiple times by now so we’re directly taking a look at the wanted branching result.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/e/ecfd05d7bf634af4e552c7113dd5470c6b0a2092.png" data-download-href="/uploads/short-url/xOuMtIyWxSusy64wARhP3jdnLEK.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/e/ecfd05d7bf634af4e552c7113dd5470c6b0a2092_2_690x404.png" alt="" data-base62-sha1="xOuMtIyWxSusy64wARhP3jdnLEK" width="690" height="404" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/e/ecfd05d7bf634af4e552c7113dd5470c6b0a2092_2_690x404.png, https://0x00sec.s3.amazonaws.com/original/2X/e/ecfd05d7bf634af4e552c7113dd5470c6b0a2092.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/e/ecfd05d7bf634af4e552c7113dd5470c6b0a2092.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/e/ecfd05d7bf634af4e552c7113dd5470c6b0a2092_2_10x10.png"></a></div><p></p>
<p>I’ll be pretty quick about this one. We have yet another function call where a SHA512 message digest is calculated. This time the only difference being that the digest is calculated over the whole decrypted firmware image concatenated with the decryption key. And as always the result is compared against a hard coded value in the encrypted firmware at offset <code>0x1c</code> :</p>
<pre><code class="lang-auto">&gt; hd DIR_882_FW120B06.BIN -s 0x1c -n 64 -e '92/1 "%x" "\n"' | cut -d$'\n' -f2
fda74d6a466e6adbfc49d13f3f7d112986b2a351de9085b783f74d3a2a255ab813cfb2a177ab29946066ebc2589882748e3541ee2514442e8d68e466e2c
</code></pre>
<p>So before quickly moving onto the next part denoted as <code>hash3_succ</code> let’s recap what <code>datalen_1</code> and <code>datalen_2</code> are used for!</p>
<h4 id="heading--datalenanal">Analysis of the datalen variables:</h4>
<p>Just earlier we saw the two variables used almost interchangeably. The invested reader might have already figured it out. But the one call to <code>aes_cbc_encrypt</code> earlier gave away that <code>datalen_2</code> at offset 0x8 - 0x12 corresponds op the length of the decrypted firmware binary. At the end of this series we will be able to decrypt these firmware samples just fine so here is a little foreshadowing with a decrypted sample:</p>
<pre><code class="lang-auto"># datalen_2
&gt; hd DIR_882_FW120B06.BIN -n 4 -s 0x8
00000008  00 d1 d9 b0                                       |....|
0000000c

&gt; wc -c decrypted_DIR_882_FW120B06.BIN | cut -d' ' -f1 | xargs printf '%x\n'
d1d9b0
</code></pre>
<p>But what about <code>datalen_1</code> at offset 0x4 - 0x8?</p>
<pre><code class="lang-auto"># datalen_1
&gt; hd DIR_882_FW120B06.BIN -s 0x4 -n 4
00000004  00 d1 d9 a6                                       |....|
00000008
</code></pre>
<pre><code class="lang-auto"># datalen_1
int.from_bytes(b'\xb0\xd9\xd1\x00', byteorder='little')
13752742
</code></pre>
<p>It’s almost identical in size compared to <code>datalen_2</code> with only a difference of 10 bytes. However, as it is smaller it cannot be the size of the decrypted payload. We also already ruled out that it is the size of the encrypted firmware image before. So what is it?</p>
<p>Let’s backtrack! Right after a call to <code>aes_cbc_encrypt</code> the <code>datalen_1</code> is used to calculate two SHA512 message digests over the decrypted firmware image, once without the decryption key put in the cipher and once with it in there. That does not seem to be any helpful… So what about the missing 10 bytes (difference between these two length variables) that are disregarded in the hash calculation?</p>
<pre><code class="lang-auto">&gt; hd decrypted_DIR_882_FW120B06.BIN -s 0xd1d9a6
00d1d9a6  00 00 00 00 00 00 00 00  00 00                    |..........|
00d1d9b0
&gt; # Last 10 bytes in the decrypted firmware
</code></pre>
<p>When seeking to <code>datalen_1</code>  and getting the hex dump until EOF we can see that it is just NULL bytes! So these 10 bytes cannot be some kind of check sum or any other relevant metadata. If you look very close at the addresses you can see that the decrypted firmware ends at <em>0x1d9b0</em> . What’s so special about this address? Turns out it’s not the address that is special but the properties of it:</p>
<pre><code class="lang-auto">&gt; pcalc 0xd1d9b0 % 16
	0               	0x0               	0y0
&gt; # 16 byte alignment matters!
</code></pre>
<p>Now why is a 16 byte alignment needed in the first place? The answer is in the disassembly where <code>datalen_2</code> is used in combination with the call to <code>aes_cbc_encrypt</code> ! As the <a href="https://tools.ietf.org/html/rfc3602#section-2.4">RFC for AES_CBC_ENCRYPT for IPSec </a>nicely states:</p>
<blockquote>
<p>2.4. Block Size and Padding<br>
The AES uses a block size of sixteen octets (128 bits).<br>
Padding is required by the AES to maintain a 16-octet (128-bit)<br>
blocksize. Padding MUST be added, […], such that<br>
the data to be encrypted ([…]) has a length that is a multiple of 16 octets.<br>
Because of the algorithm specific padding requirement, no additional<br>
padding is required to ensure that the ciphertext terminates on a 4-<br>
octet boundary […]. Additional padding MAY be included, as<br>
specified in [ESP], as long as the 16-octet blocksize is maintained.</p>
</blockquote>
<p>We can conclude that <code>datalen_2</code> is based on <code>datalen_1</code> and the difference between them will always be a dynamically calculated value between 1 and 15 to keep the firmware 16-byte aligned.  So summarize this further:</p>
<ul>
<li>datalen_1 → size of decrypted payload</li>
<li>datalen_2 → size of decrypted payload with 16 byte alignment</li>
</ul>
<h4 id="heading--off-0x6dc">Offset analysis: The curious case of 0x6dc:</h4>
<p>Another thing that may have caused confusion is why the first SHA512 digest calculation as well as the decryption started at this particular offset of <em>0x6dc</em> ? When you look at the fist 2k bytes of an encrypted firmware image they look rather arbitrary:</p>
<pre><code class="lang-auto">&gt; hd DIR_882_FW120B06.BIN -n 2048
00000000  53 48 52 53 00 d1 d9 a6  00 d1 d9 b0 67 c6 69 73  |SHRS........g.is|
00000010  51 ff 4a ec 29 cd ba ab  f2 fb e3 46 fd a7 4d 06  |Q.J.)......F..M.|
00000020  a4 66 e6 ad bf c4 9d 13  f3 f7 d1 12 98 6b 2a 35  |.f...........k*5|
00000030  1d 0e 90 85 b7 83 f7 4d  3a 2a 25 5a b8 13 0c fb  |.......M:*%Z....|
00000040  2a 17 7a b2 99 04 60 66  eb c2 58 98 82 74 08 e3  |*.z...`f..X..t..|
00000050  54 1e e2 51 44 42 e8 d6  8e 46 6e 2c 16 57 d3 0b  |T..QDB...Fn,.W..|
00000060  07 d7 7c 9e 11 ec 72 1d  fb 87 a2 5b 18 ec 53 82  |..|...r....[..S.|
00000070  85 b9 84 39 b6 b4 dd 85  de f0 28 3d 36 0e be aa  |...9......(=6...|
00000080  d0 9d 71 b0 ba 3e 26 40  e8 c5 4c 0e 0b 32 eb 00  |..q..&gt;&amp;@..L..2..|
00000090  e8 f7 21 d7 3a aa 0d 14  d5 f7 e8 72 68 bf e5 30  |..!.:......rh..0|
000000a0  a0 49 b9 e8 5d a0 bb 81  71 87 05 cd 70 25 18 f2  |.I..]...q...p%..|
000000b0  8f af d6 21 35 05 31 7e  fd af 60 56 d8 ed e7 71  |...!5.1~..`V...q|
000000c0  6c 39 d1 68 0d a7 13 f4  04 41 87 58 e9 97 36 73  |l9.h.....A.X..6s|
000000d0  99 78 8b 01 10 ee 12 d6  b6 3b 69 ec 00 00 00 00  |.x.......;i.....|
000000e0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
[...]
000002d0  00 00 00 00 00 00 00 00  00 00 00 00 19 26 c0 d3  |.............&amp;..|
000002e0  3e 88 4a c4 58 90 72 09  d6 86 8d bb d4 72 52 54  |&gt;.J.X.r......rRT|
000002f0  ee ef f3 10 0d a5 44 ff  ce 08 ba b1 ac 84 ce bf  |......D.........|
00000300  7c e8 e8 0c 11 a2 d4 d1  cc 9d 89 65 43 f0 72 cf  ||..........eC.r.|
00000310  91 f7 53 45 b2 51 b6 d7  7c 13 d9 2a 3e ed 2c 2e  |..SE.Q..|..*&gt;.,.|
00000320  73 e8 5c d0 9e 77 65 e5  22 91 ee a2 51 f7 e7 2f  |s.\..we."...Q../|
00000330  2a 4a 68 db c9 ea c9 74  6d aa 04 93 77 33 48 89  |*Jh....tm...w3H.|
00000340  bf 56 17 fd 11 77 b5 1c  d9 67 f6 9d 09 3f a0 5b  |.V...w...g...?.[|
00000350  a3 9f 2c 89 13 91 b0 8e  bc 45 19 ae 9a 46 b2 0e  |..,......E...F..|
00000360  2b ca 39 78 50 2c ce 07  6c 0d c5 95 5c 4b 50 14  |+.9xP,..l...\KP.|
00000370  3b 3f 22 c2 28 03 f9 02  ad b9 4f 54 70 d0 cb d3  |;?".(.....OTp...|
00000380  a8 df 7a 4a f1 51 44 c7  a4 93 c6 9b 4d 15 ac 76  |..zJ.QD.....M..v|
00000390  d7 c1 f2 cc 78 d5 06 1f  a0 b4 42 6e 48 2a 78 6c  |....x.....BnH*xl|
000003a0  18 8b 57 23 38 9e e4 e9  61 f2 ed 58 d0 f8 51 58  |..W#8...a..X..QX|
000003b0  a1 54 5f 89 cc 72 73 65  74 58 a5 96 24 25 31 c2  |.T_..rsetX..$%1.|
000003c0  c4 1f b8 de a1 30 e1 0a  70 7f 6d 10 0a 53 04 c0  |.....0..p.m..S..|
000003d0  e8 f1 d9 bc de c2 3a 62  b3 bb 21 16 cf 53 f3 f7  |......:b..!..S..|
000003e0  24 55 02 28 47 85 f8 e2  2d 00 c6 44 eb b7 64 fd  |$U.(G...-..D..d.|
000003f0  e4 23 63 cd 48 f1 70 4e  43 ce 74 78 28 be 89 96  |.#c.H.pNC.tx(...|
00000400  a9 29 3c 2f 0c a9 32 43  28 76 6a 96 12 6c 8b ff  |.)&lt;/..2C(vj..l..|
00000410  22 da 4e 45 ac 6f e1 34  3e b0 d5 be 9a 9a 65 50  |".NE.o.4&gt;.....eP|
00000420  c4 52 05 02 1c d6 4a 46  48 8e 20 2f ea 6a 1b b0  |.R....JFH. /.j..|
00000430  62 61 00 8d 64 b9 ab 88  cb 28 98 01 6a 33 82 79  |ba..d....(..j3.y|
00000440  e1 02 9f 56 1d 5d b1 8f  0e 19 02 5e 44 02 2d b8  |...V.].....^D.-.|
00000450  ab 96 1d 42 2c db 13 c8  d6 dc 4a bb 62 40 20 85  |...B,.....J.b@ .|
00000460  9f c9 6f f1 fb 18 d1 09  0e b8 c7 30 2c 99 e7 3f  |..o........0,..?|
00000470  1a f5 e0 f3 f6 09 ed 7e  da 00 24 8b 80 b2 66 1b  |.......~..$...f.|
00000480  15 1c 49 ea 05 f9 21 70  f9 18 ae 18 6c 31 31 38  |..I...!p....l118|
00000490  1a ff 71 d8 a1 3b 7e 8d  5f 00 a8 d5 fd e2 3b 58  |..q..;~._.....;X|
000004a0  82 16 af aa 9e 16 08 5c  ea 6f 8a e7 20 53 54 96  |.......\.o.. ST.|
000004b0  00 eb 1d 75 38 f9 03 2d  f9 70 25 12 65 d2 82 b1  |...u8..-.p%.e...|
000004c0  35 4b d2 d9 eb 8c c2 70  b2 78 58 f1 c2 3f 19 e1  |5K.....p.xX..?..|
000004d0  ab d6 38 7f d8 be e4 db  94 f3 13 59 98 d3 d5 9f  |..8........Y....|
000004e0  f5 cb 4d d9 71 cf 45 6e  03 5e 0a 87 32 4e b2 49  |..M.q.En.^..2N.I|
000004f0  98 ff 0a 4e dc 95 8f fe  38 c3 34 c8 60 01 e5 d8  |...N....8.4.`...|
00000500  9d ca ad a7 16 92 a3 09  ec 25 82 d3 51 51 0e d0  |.........%..QQ..|
00000510  30 30 28 2c 8b 0b cd 91  bc 45 65 26 6d dc 54 30  |00(,.....Ee&amp;m.T0|
00000520  c4 73 da 18 5f 21 eb 0a  59 c1 70 17 a8 ef ec 53  |.s.._!..Y.p....S|
00000530  2a b5 d5 d6 86 31 9c 4d  f6 22 7a 6d 01 b2 b1 46  |*....1.M."zm...F|
00000540  6c 7f 81 8b ea 51 88 3c  89 bf e6 e0 fb 4b ec f8  |l....Q.&lt;.....K..|
00000550  54 d0 f5 fe 47 92 87 54  6a 75 74 34 64 a2 2a 56  |T...G..Tjut4d.*V|
00000560  50 d7 ee 1b 41 c8 85 c1  00 d9 e4 99 ca a0 25 4e  |P...A.........%N|
00000570  72 8e d8 fe db 42 0c 1b  10 85 42 fe 77 a3 53 d6  |r....B....B.w.S.|
00000580  a6 f0 44 04 72 58 04 09  a7 5d c0 b1 60 54 09 f0  |..D.rX...]..`T..|
00000590  71 08 f1 86 f9 2d 39 3a  4b 83 52 3a 07 d5 92 1e  |q....-9:K.R:....|
000005a0  e7 f6 4e f4 ed c1 07 d2  98 3b 75 48 6c b1 fc 8d  |..N......;uHl...|
000005b0  5b c2 f6 df 0e 1f f0 f8  ac 49 50 85 52 49 24 83  |[........IP.RI$.|
000005c0  a8 7c 2b bc 1f 46 5c 71  58 6f 8c ce ea 02 e7 af  |.|+..F\qXo......|
000005d0  2d da 8e ce 9e fa 77 be  ea 7b 6f 5e ea 7d 3b cf  |-.....w..{o^.};.|
000005e0  a0 8e 68 5a e6 8c c9 c3  d9 39 e8 f2 77 89 0c b9  |..hZ.....9..w...|
000005f0  3e 95 20 87 d3 35 46 91  dc 83 24 f3 a3 e8 66 74  |&gt;. ..5F...$...ft|
00000600  b6 47 c7 86 01 50 17 cd  39 7e 1e 85 18 18 80 c4  |.G...P..9~......|
00000610  b2 01 b6 97 de 00 a3 2d  9b 4a d9 18 10 16 86 93  |.......-.J......|
00000620  10 ba cd 01 1d 34 35 46  7f c6 ff fb 61 94 47 92  |.....45F....a.G.|
00000630  60 72 88 10 de 0c 3b 03  c3 da 70 b9 17 01 01 a0  |`r....;...p.....|
00000640  63 49 65 aa 2f 7f 68 15  0c 5a 47 0c 82 93 e2 ef  |cIe./.h..ZG.....|
00000650  78 c6 1a 0a 2a dd 32 81  b1 9c 35 d4 d5 7e 1d fc  |x...*.2...5..~..|
00000660  33 5a e7 35 0f 74 27 a2  20 a6 2c fd e0 ab cb 42  |3Z.5.t'. .,....B|
00000670  ef bd 5f 17 36 bb af dc  6a 2b 4f b8 ae ef b7 c4  |.._.6...j+O.....|
00000680  21 2c c0 64 ec 3e 75 21  94 9b d5 87 33 25 81 dc  |!,.d.&gt;u!....3%..|
00000690  13 a7 3b 7f da c8 fb ea  7b 3d 6d 5e 58 bb 0b 52  |..;.....{=m^X..R|
000006a0  14 a4 38 f5 fa 84 48 29  e6 ae 0e 75 5e 3d 8d bd  |..8...H)...u^=..|
000006b0  5a d1 42 07 93 99 f1 d3  f6 77 96 02 9d 52 9f f2  |Z.B......w...R..|
000006c0  a7 91 ec 10 bf 0c 53 52  ca 2d 4c 7a 2c e4 18 12  |......SR.-Lz,...|
000006d0  ec 8d 3c 1b a7 5b 2c 14  63 a8 d9 76 0b 84 6a e5  |..&lt;..[,.c..v..j.|
000006e0  73 66 ef bb c5 0f 33 a7  79 16 d0 7d 8e 53 fc 0a  |sf....3.y..}.S..|
000006f0  8e dd b7 a7 6c 5e d9 78  78 0e e1 c1 17 6c 31 41  |....l^.xx....l1A|
00000700  53 ec 46 db 01 89 4c 98  53 e6 a9 8b b2 c1 ed 0f  |S.F...L.S.......|
00000710  b6 f7 49 98 84 fd e9 54  89 94 e3 17 2d 61 2b 7e  |..I....T....-a+~|
00000720  92 7d 0a b0 3d d3 45 c4  63 e9 f1 14 cc b3 9e b2  |.}..=.E.c.......|
00000730  79 62 0a 36 0d f7 7c af  b7 03 10 0f 98 95 27 3d  |yb.6..|.......'=|
00000740  07 bf a1 ea d7 99 95 14  74 64 0f 68 c7 ad 28 19  |........td.h..(.|
00000750  cc d3 4c 07 ef 95 25 0e  e5 36 f7 3f bf 89 77 31  |..L...%..6.?..w1|
00000760  43 21 f9 e1 dc db 7f c1  93 56 cf d1 eb 24 82 55  |C!.......V...$.U|
00000770  3d 9f 32 4d 8b 5c 02 f5  61 4c 8f e5 ba 11 ed ae  |=.2M.\..aL......|
00000780  ba a4 c4 0f 8a 87 d5 cb  d3 2d c9 34 ab 06 67 17  |.........-.4..g.|
00000790  66 d5 44 ff 35 0e ae 2b  37 63 f8 b3 67 29 4d 24  |f.D.5..+7c..g)M$|
000007a0  4f ba 22 37 8d 2a 55 b0  b2 5e 3c 5b 67 da fe 63  |O."7.*U..^&lt;[g..c|
000007b0  9c 75 85 14 27 cb a2 a0  06 5b 03 68 98 b3 8e c9  |.u..'....[.h....|
000007c0  f3 d9 34 16 d0 2b 33 0b  32 aa c3 79 49 df 77 99  |..4..+3.2..yI.w.|
000007d0  09 c9 a5 16 bd 6c 49 58  87 a6 1e 35 b6 14 f2 72  |.....lIX...5...r|
000007e0  2b fc bf d1 45 73 e1 86  47 61 97 25 ac 34 b5 bf  |+...Es..Ga.%.4..|
000007f0  a9 3f 8b 27 1e d2 46 20  de fb 5f c1 3e e3 5e c3  |.?.'..F .._.&gt;.^.|
00000800
&gt; # First 2048 bytes of an encrypted firmware image
</code></pre>
<p>However, by now we already figured out most of what the first <code>0xdb</code> bytes hold. Nevertheless, there is a clear cut at offset <code>0xdb</code> to <code>0x2db</code> which is exactly 512 NULL bytes. This looks like the security header may end at <code>0xdb</code> . With the assumption based on one of the calls to <code>aes_cbc_encrypt</code> that our data payload only starts at <code>0x6dc</code> what are these 1024 seemingly random bytes that as of right now do not hold either relevant metadata nor parts of the encrypted payload?</p>
<pre><code class="lang-auto">&gt; pcalc 0x6db - 0x2db
	1024            	0x400             	0y10000000000
</code></pre>
<p>To figure that out we need to dive back right into the control flow over at <code>hash3_succ</code> !</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/8/8cee4e635ab6981f2702a46fdf7d35b6ce24b167.png" data-download-href="/uploads/short-url/k6JpHwGmDxHsgGlWRmxvg6ell8H.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/8/8cee4e635ab6981f2702a46fdf7d35b6ce24b167_2_690x289.png" alt="" data-base62-sha1="k6JpHwGmDxHsgGlWRmxvg6ell8H" width="690" height="289" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/8/8cee4e635ab6981f2702a46fdf7d35b6ce24b167_2_690x289.png, https://0x00sec.s3.amazonaws.com/optimized/2X/8/8cee4e635ab6981f2702a46fdf7d35b6ce24b167_2_1035x433.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/8/8cee4e635ab6981f2702a46fdf7d35b6ce24b167_2_1380x578.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/8/8cee4e635ab6981f2702a46fdf7d35b6ce24b167_2_10x10.png"></a></div><p></p>
<p>Here a new function call to <code>sha512_checker</code> is being prepared which is invoked a second time (with different arguments) once the first call succeeds and with that returns 1. You can see that both of these function calls basically have the following signature <code>func(mapped_enc_fw_base_address + security_header_offset, 64, mapped_enc_fw_base_address + yet_unidentified_offset, 512)</code> as their arguments. This function will answer all the remaining questions regarding the first yet unknown bytes. So what does it do?</p>
<h3 id="heading--sha512checker">sha512_checker:</h3>
<p>This function is used for two additional integrity checks with calls to <code>int RSA_verify(int type, const unsigned char *m, unsigned int m_len, unsigned char *sigbuf, unsigned int siglen, RSA *rsa)</code> .</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/7/78b7d233b4cc39e25403b0d435e86b70d16cd68d.png" data-download-href="/uploads/short-url/hdV88TM29oRFYxDZ8TKNG8CVQlf.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/7/78b7d233b4cc39e25403b0d435e86b70d16cd68d_2_504x500.png" alt="" data-base62-sha1="hdV88TM29oRFYxDZ8TKNG8CVQlf" width="504" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/7/78b7d233b4cc39e25403b0d435e86b70d16cd68d_2_504x500.png, https://0x00sec.s3.amazonaws.com/original/2X/7/78b7d233b4cc39e25403b0d435e86b70d16cd68d.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/7/78b7d233b4cc39e25403b0d435e86b70d16cd68d.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/7/78b7d233b4cc39e25403b0d435e86b70d16cd68d_2_10x10.png"></a></div><p></p>
<p>This library call verifies that the signature <code>sigbuf</code> of size <code>siglen</code> matches a given message digest <code>m</code> of size <code>m_len</code> . <code>type</code> denotes the message digest algorithm that was used to generate the signature. Lastly, as expected, <code>RSA_verify</code> returns <code>1</code> on success. <code>rsa</code> is the signer’s public key, which in this case defaults to the <code>/etc_ro/public.pem</code> (if not overwritten by <code>argv[2]</code> ). When following along until here the function parameters should all make sense by now.</p>
<ul>
<li>
<code>type</code> - As seen in the disassembly graph the type is hard coded to <code>0x2a2</code> , which corresponds to SHA512.</li>
<li>
<code>m</code> - SHA512 hash digest that are 64 bytes in size. In our case these corresponds to the digest of the size of the encrypted and decrypted firmware.</li>
<li>
<code>m_len</code> - size of <code>m</code> , which is hard coded to 64 bytes (which only makes sense).</li>
<li>
<code>sigbuf</code> - hardcoded 512 byte signatures at offsets <code>0x2dc</code> and <code>0x4dc</code> in the encrypted firmware.</li>
<li>
<code>siglen</code> - fixed size of 512 bytes because we’re dealing with signatures of these sizes (as the distance between the two offsets from <em>sigbuf</em> show as well).</li>
<li>
<code>RSA_cert</code> - Is the struct in memory loaded with the values from reading the public key that is by default located in <code>/etc_ro/public.pem</code> .</li>
</ul>
<pre><code class="lang-auto">&gt; pcalc 0x2a2
674             	0x2a2             	0y1010100010

&gt; echo '#include &lt;openssl/obj_mac.h&gt;' | gcc -E - -dM | grep 674
#define NID_SHA512 674
</code></pre>
<p>Ultimately, we do not have to include these two checks in a custom decryption PoC, since we’re already past the point of the actual decryption. Furthermore, we made sure the SHA512 digests match the expected values. These additional checks are most likely put there to verify the origin of the encrypted firmware image.</p>
<p>This basically concludes the complete decryption routine. The only thing I left out are some minor bad paths we are not interested in anyway. Following this is only code that sets the return value of this function (0 on success, -1 otherwise) and the function tear down, which takes care of all the un-mapping/closing from all the IO related operations:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/d/d47fd5603662547db80b890a71d740e184cea6dc.png" data-download-href="/uploads/short-url/ujR6ytQHSCJcWzt3fTJLGFLfbm4.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/d/d47fd5603662547db80b890a71d740e184cea6dc_2_690x488.png" alt="" data-base62-sha1="ujR6ytQHSCJcWzt3fTJLGFLfbm4" width="690" height="488" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/d/d47fd5603662547db80b890a71d740e184cea6dc_2_690x488.png, https://0x00sec.s3.amazonaws.com/optimized/2X/d/d47fd5603662547db80b890a71d740e184cea6dc_2_1035x732.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/d/d47fd5603662547db80b890a71d740e184cea6dc_2_1380x976.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/d/d47fd5603662547db80b890a71d740e184cea6dc_2_10x10.png"></a></div>‌<br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/3/354fb50fa0f088b93906173ab8ec500fb28a34c4.png" data-download-href="/uploads/short-url/7BC4PIOrSNL3EVxfSUWk9Ra9yKw.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/3/354fb50fa0f088b93906173ab8ec500fb28a34c4_2_270x500.png" alt="" data-base62-sha1="7BC4PIOrSNL3EVxfSUWk9Ra9yKw" width="270" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/3/354fb50fa0f088b93906173ab8ec500fb28a34c4_2_270x500.png, https://0x00sec.s3.amazonaws.com/optimized/2X/3/354fb50fa0f088b93906173ab8ec500fb28a34c4_2_405x750.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/3/354fb50fa0f088b93906173ab8ec500fb28a34c4_2_540x1000.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/3/354fb50fa0f088b93906173ab8ec500fb28a34c4_2_10x10.png"></a></div><p></p>
<h2 id="heading--decfwtd">decrypt_firmware tear down:</h2>
<p>So successfully completing the <code>actual_decryption</code> routine returns <em>0</em> to the <code>decrypt_firmware</code> function. At this point this function only cleans up as well by un-linking (removing) the original <em>sourceFile</em> (encrypted firmware image) and renaming the decrypted one from <em>/tmp/.firmware.orig</em> → <em>sourceFile</em> (with sourceFile obviously being the name of the supplied encrypted firmware sample).</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/8/8dbba1685a0e3cdfeac1c535308126e56bd735a1.png" data-download-href="/uploads/short-url/kdPjPoDJcyLqwEyXgJOcXHdbNRL.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/8/8dbba1685a0e3cdfeac1c535308126e56bd735a1_2_545x499.png" alt="" data-base62-sha1="kdPjPoDJcyLqwEyXgJOcXHdbNRL" width="545" height="499" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/8/8dbba1685a0e3cdfeac1c535308126e56bd735a1_2_545x499.png, https://0x00sec.s3.amazonaws.com/optimized/2X/8/8dbba1685a0e3cdfeac1c535308126e56bd735a1_2_817x748.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/8/8dbba1685a0e3cdfeac1c535308126e56bd735a1_2_1090x998.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/8/8dbba1685a0e3cdfeac1c535308126e56bd735a1_2_10x10.png"></a></div><br>
The last step is returning to <code>main</code> and with that preparing the process tear down. So that’s it! That was the complete firmware decryption scheme D-Link is using for their recent router firmware. Re-implementing everything we’ve seen so far results in the following C-code:<p></p>
<pre><code class="lang-auto">#include &lt;arpa/inet.h&gt;
#include &lt;errno.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;openssl/aes.h&gt;
#include &lt;openssl/ossl_typ.h&gt;
#include &lt;openssl/pem.h&gt;
#include &lt;openssl/rsa.h&gt;
#include &lt;openssl/sha.h&gt;
#include &lt;stddef.h&gt;
#include &lt;stdint.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/mman.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;

RSA *grsa_struct;
static unsigned char iv[] = {0x98, 0xC9, 0xD8, 0xF0, 0x13, 0x3D, 0x06, 0x95,
                             0xE2, 0xA7, 0x09, 0xC8, 0xB6, 0x96, 0x82, 0xD4};
static unsigned char aes_in[] = {0xC8, 0xD3, 0x2F, 0x40, 0x9C, 0xAC,
                                 0xB3, 0x47, 0xC8, 0xD2, 0x6F, 0xDC,
                                 0xB9, 0x09, 0x0B, 0x3C};
static unsigned char aes_key[] = {0x35, 0x87, 0x90, 0x03, 0x45, 0x19,
                                  0xF8, 0xC8, 0x23, 0x5D, 0xB6, 0x49,
                                  0x28, 0x39, 0xA7, 0x3F};
unsigned char out[] = {0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
                       0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46};
const static char *null = "0";

int check_cert(char *pem, void *n) {
  RSA *lrsa_struct[2];
  OPENSSL_add_all_algorithms_noconf();
  FILE *pem_fd = fopen(pem, "r");
  if (pem_fd != NULL) {
    lrsa_struct[0] = RSA_new();
    if (PEM_read_RSAPublicKey(pem_fd, lrsa_struct, NULL, n) == NULL) {
      RSA_free(lrsa_struct[0]);
      puts("Read RSA private key failed, maybe the password is incorrect.");
    } else {
      grsa_struct = lrsa_struct[0];
    }
    fclose(pem_fd);
  }
  if (grsa_struct == NULL) {
    return -1;
  } else {
    return 0;
  }
}

int aes_cbc_encrypt(unsigned char *in, unsigned int length,
                    unsigned char *user_key, unsigned char *ivec,
                    unsigned char *out) {
  AES_KEY dec_key;
  unsigned char iv[16];
  memcpy(iv, ivec, 16);

  AES_set_decrypt_key(user_key, 0x80, &amp;dec_key);
  AES_cbc_encrypt(in, out, (unsigned int)length, &amp;dec_key, iv, AES_DECRYPT);
  return 0;
}

int call_aes_cbc_encrypt(unsigned char *key) {
  aes_cbc_encrypt(aes_in, 0x10, aes_key, iv, key);
  return 0;
}

int check_magic(void *mapped_mem) {
  return (unsigned int)(memcmp(mapped_mem, "SHRS", 4) == 0);
}

int calc_sha512_digest(void *mapped_mem, u_int32_t len, unsigned char *buf) {
  SHA512_CTX sctx;
  SHA512_Init(&amp;sctx);
  SHA512_Update(&amp;sctx, mapped_mem, len);
  SHA512_Final(buf, &amp;sctx);
  return 0;
}

int calc_sha512_digest_key(void *mapped_mem, u_int32_t len, void *key,
                           unsigned char *buf) {
  SHA512_CTX sctx;
  SHA512_Init(&amp;sctx);
  SHA512_Update(&amp;sctx, mapped_mem, len);
  SHA512_Update(&amp;sctx, key, 0x10);
  SHA512_Final(buf, &amp;sctx);
  return 0;
}

int check_sha512_digest(const unsigned char *m, unsigned int m_length,
                        unsigned char *sigbuf, unsigned int siglen) {
  return RSA_verify((int)0x2a2, m, m_length, sigbuf, siglen, grsa_struct);
}

int actual_decryption(char *sourceFile, char *tmpDecPath, unsigned char *key) {
  int ret_val = -1;
  size_t st_blocks = -1;
  struct stat stat_struct;
  int _fd;
  int fd = -1;
  void *ROM = (void *)0x0;
  unsigned char *RWMEM = (unsigned char *)0x0;
  off_t seek_off;
  unsigned char hash_md_buf[68] = {0};
  unsigned int mcb;
  uint32_t datalen_1;
  uint32_t datalen_2;

  memset(&amp;hash_md_buf, 0, 0x40);
  memset(&amp;stat_struct, 0, 0x90);
  _fd = stat(sourceFile, &amp;stat_struct);
  if (_fd == 0) {
    fd = open(sourceFile, O_RDONLY);
    st_blocks = stat_struct.st_size;
    if (((-1 &lt; fd) &amp;&amp;
         (ROM = mmap(NULL, st_blocks, PROT_READ, MAP_SHARED, fd, 0),
          ROM != 0)) &amp;&amp;
        (_fd = open(tmpDecPath, O_RDWR | O_NOCTTY | O_CREAT, S_IRUSR | S_IWUSR),
         -1 &lt; _fd)) {
      seek_off = lseek(_fd, st_blocks - 1, 0);
      if (seek_off == st_blocks - 1) {
        write(_fd, null, 1);
        close(_fd);
        _fd = open(tmpDecPath, O_RDWR | O_NOCTTY, S_IRUSR | S_IWUSR);
        RWMEM =
            mmap(NULL, st_blocks, PROT_READ | PROT_WRITE, MAP_SHARED, _fd, 0);
        if (RWMEM != 0) {
          mcb = check_magic(ROM);
          if (mcb == 0) {
            puts("No image matic found\r");
          } else {
            datalen_1 = htonl(*(uint32_t *)(ROM + 8));
            datalen_2 = htonl(*(uint32_t *)(ROM + 4));
            calc_sha512_digest((ROM + 0x6dc), datalen_1, hash_md_buf);
            _fd = memcmp(hash_md_buf, (ROM + 0x9c), 0x40);
            if (_fd == 0) {
              aes_cbc_encrypt((ROM + 0x6dc), datalen_1, key,
                              (unsigned char *)(ROM + 0xc), RWMEM);
              calc_sha512_digest(RWMEM, datalen_2, hash_md_buf);
              _fd = memcmp(hash_md_buf, (ROM + 0x5c), 0x40);
              if (_fd == 0) {
                calc_sha512_digest_key(RWMEM, datalen_2, (void *)key,
                                       hash_md_buf);
                _fd = memcmp(hash_md_buf, (ROM + 0x1c), 0x40);
                if (_fd == 0) {
                  _fd = check_sha512_digest((ROM + 0x5c), 0x40, (ROM + 0x2dc),
                                            0x200);
                  if (_fd == 1) {
                    _fd = check_sha512_digest((ROM + 0x9c), 0x40, (ROM + 0x4dc),
                                              0x200);
                    if (_fd == 1) {
                      ret_val = 0;
                      puts("We in!");
                    } else {
                      ret_val = -1;
                    }
                  } else {
                    ret_val = -1;
                  }
                } else {
                  puts("check sha512 vendor failed\r");
                }
              } else {
                printf("check sha512 before failed %d %d\r\n", datalen_2,
                       datalen_1);
                int ctr = 0;
                while (ctr &lt; 0x40) {
                  printf("%02X", *(hash_md_buf + ctr));
                  ctr += 1;
                }
                puts("\r");
                ctr = 0;
                while (ctr &lt; 0x40) {
                  printf("%02X",
                         *(unsigned int *)(unsigned char *)(ROM + ctr + 0x5c));
                  ctr += 1;
                }
                puts("\r");
              }
            } else {
              puts("check sha512 post failed\r");
            }
          }
        }
      }
    }
  }
  if (ROM != (void *)0x0) {
    munmap(ROM, stat_struct.st_blocks);
  }
  if (RWMEM != (unsigned char *)0x0) {
    munmap(RWMEM, st_blocks);
  }
  if (-1 &lt; (int)fd) {
    close(fd);
  }
  return ret_val;
}

int decrypt_firmware(int argc, char **argv) {
  int ret;
  unsigned char key[] = {0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
                         0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46};
  char *ppem = "/tmp/public.pem";
  int loopCtr = 0;
  if (argc &lt; 2) {
    printf("%s &lt;sourceFile&gt;\r\n", argv[0]);
    ret = -1;
  } else {
    if (2 &lt; argc) {
      ppem = (char *)argv[2];
    }
    int cc = check_cert(ppem, (void *)0);
    if (cc == 0) {
      call_aes_cbc_encrypt((unsigned char *)&amp;key);
      printf("key: ");
      while (loopCtr &lt; 0x10) {
        printf("%02X", *(key + loopCtr) &amp; 0xff);
        loopCtr += 1;
      }
      puts("\r");
      ret = actual_decryption((char *)argv[1], "/tmp/.firmware.orig",
                              (unsigned char *)&amp;key);
      if (ret == 0) {
        unlink(argv[1]);
        rename("/tmp/.firmware.orig", argv[1]);
      }
      RSA_free(grsa_struct);
    } else {
      ret = -1;
    }
  }
  return ret;
}

int encrypt_firmware(int argc, char **argv) {
  puts("TODO\n");
  return -1;
}

int main(int argc, char **argv) {
  int ret;
  char *str_f = strstr(*argv, "decrypt");
  if (str_f != NULL) {
    ret = decrypt_firmware(argc, argv);
  } else {
    ret = encrypt_firmware(argc, argv);
  }
  return ret;
}
</code></pre>
<h2 id="heading--summary">Summary:</h2>
<p>When combining what we found out during analysis we can conclude that the encrypted firmware has a 1756 byte security header as shown below:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/b/b2ec34fd7a01302c07f3a216f42f659fdd1f5303.png" data-download-href="/uploads/short-url/pwP3M3ih1Dj8xXPBy9a2ab9kMG7.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b2ec34fd7a01302c07f3a216f42f659fdd1f5303.png" alt="" data-base62-sha1="pwP3M3ih1Dj8xXPBy9a2ab9kMG7" width="690" height="339" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/b/b2ec34fd7a01302c07f3a216f42f659fdd1f5303_2_10x10.png"></a></div><br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/f/f0d96ba39fa467c0c67b8e72cbc52935cc81f90c.png" data-download-href="/uploads/short-url/ymEpFPd0JyC4fclxS3XvgIGMoLG.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f0d96ba39fa467c0c67b8e72cbc52935cc81f90c_2_495x500.png" alt="" data-base62-sha1="ymEpFPd0JyC4fclxS3XvgIGMoLG" width="495" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f0d96ba39fa467c0c67b8e72cbc52935cc81f90c_2_495x500.png, https://0x00sec.s3.amazonaws.com/optimized/2X/f/f0d96ba39fa467c0c67b8e72cbc52935cc81f90c_2_742x750.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/f/f0d96ba39fa467c0c67b8e72cbc52935cc81f90c_2_990x1000.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f0d96ba39fa467c0c67b8e72cbc52935cc81f90c_2_10x10.png"></a></div><br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/b/bd8be1f0692fd40dc84e7904d11ef3cc050e2a0f.png" data-download-href="/uploads/short-url/r2NWdjNkOWrLRLRAh7GOrxUg3P9.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/bd8be1f0692fd40dc84e7904d11ef3cc050e2a0f.png" alt="" data-base62-sha1="r2NWdjNkOWrLRLRAh7GOrxUg3P9" width="559" height="500" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/b/bd8be1f0692fd40dc84e7904d11ef3cc050e2a0f_2_10x10.png"></a></div><p></p>
<p>It contains the following fields in this exact order:</p>
<ol>
<li>Magic bytes</li>
<li>Length of decrypted firmware - padding</li>
<li>Length of decrypted firmware in bytes</li>
<li>Initialization vector value for AES_128_CBC to decrypt data</li>
<li>SHA512 64 byte message digest of decrypted firmware + key</li>
<li>SHA512 64 byte message digest of decrypted firmware</li>
<li>SHA512 64 byte message digest of encrypted firmware</li>
<li>512 unused NULL bytes (0xdc to 0x2dc)  # no colored box for this one</li>
<li>512 byte Signature 1</li>
<li>512 byte Signature 2</li>
</ol>
<p>With this in mind, we can clearly see that the header continues until offset <code>0x6dc</code> before the actual encrypted data payload starts. This seems consistent across all images I looked at. Hence, the total size of the security header is 1756 bytes, with 220 bytes for the initial 7 bullet points containing various meta checks, the unused 512 NULL byte area and the two 512 byte verification signatures at the end. The NULL byte area could potentially be reserved space for a future verification check or an additional signature.</p>
<p>Finally, I noticed that the <code>/etc_ro/public.pem</code> file differs across devices:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/c/cb376d821139704868f766fbef12ec827f8a5b5b.png" data-download-href="/uploads/short-url/sZJG9HcMxSuWPlWHh5qtDVx6m4b.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/c/cb376d821139704868f766fbef12ec827f8a5b5b_2_690x179.png" alt="" data-base62-sha1="sZJG9HcMxSuWPlWHh5qtDVx6m4b" width="690" height="179" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/c/cb376d821139704868f766fbef12ec827f8a5b5b_2_690x179.png, https://0x00sec.s3.amazonaws.com/optimized/2X/c/cb376d821139704868f766fbef12ec827f8a5b5b_2_1035x268.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/c/cb376d821139704868f766fbef12ec827f8a5b5b_2_1380x358.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/c/cb376d821139704868f766fbef12ec827f8a5b5b_2_10x10.png"></a></div><p></p>
<h3 id="heading--otherfwi">Testing against other encrypted D-Link images:</h3>
<p>My custom script (linked at the bottom) was evaluated against additional newer firmware samples of different routers and the decryption always worked flawlessly. This shows that the security header information as well as the <em>imgdecrypt</em> binary itself did not change. The following firmware samples were tested for validation:</p>
<div class="md-table">
<table>
<thead>
<tr>
<th>Device</th>
<th>Router release</th>
<th>Sample name</th>
<th>Md5sum encrypted</th>
<th>FW release</th>
</tr>
</thead>
<tbody>
<tr>
<td>DIR-882</td>
<td>Q2 2017</td>
<td>2_DIR-882_RevA_Firmware122b04.bin</td>
<td>a59e7104916dc1770ad987a13c757075</td>
<td>07/10/19</td>
</tr>
<tr>
<td>DIR-882</td>
<td>Q2 2017</td>
<td>DIR882A1_FW130B10_Beta_for_security_issues_Stackoverflow_20191219.bin</td>
<td>339f98563ea9c0b2829a3b40887dabbd</td>
<td>02/20/20</td>
</tr>
<tr>
<td>DIR-1960</td>
<td>Q2 2019</td>
<td>DIR-1960_RevA_Firmware103B03.bin</td>
<td>f2aff7a08e44d77787c7243f60c1334c</td>
<td>10/30/19</td>
</tr>
<tr>
<td>DIR-2660</td>
<td>Q4 2019</td>
<td>DIR-2660_RevA_Firmware110B01.bin</td>
<td>ba72e99a3cea77482bab9ea757d33dfc</td>
<td>11/25/19</td>
</tr>
<tr>
<td>DIR-3060</td>
<td>Q4 2019</td>
<td>DIR-3060_RevA_Firmware111B01.bin</td>
<td>86e3f7baebf4178920c767611ec2ba50</td>
<td>10/22/19</td>
</tr>
</tbody>
</table>
</div><p>‌</p><h3 id="heading--unpackingdir3060">Unpacking D-Link DIR3060 - A quick analysis:</h3>
<p>So let’s test our final script against a random DIR3060 firmware that I downloaded:</p>
<pre><code class="lang-auto">&gt; ./dlink-dec.py DIR_3060/DIR-3060_RevA_Firmware111B01.bin DIR_3060/decrypted_DIR-3060_RevA_Firmware111B01 dec
[*] Calculating decryption key...
	[+] OK!
[*] Checking magic bytes...
	[+] OK!
[*] Verifying SHA512 message digest of encrypted payload...
	[+] OK!
[*] Verifying SHA512 message digests of decrypted payload...
	[+] OK!
	[+] OK!
[+] Successfully decrypted DIR-3060_RevA_Firmware111B01.bin!

&gt; file DIR_3060/decrypted_DIR-3060_RevA_Firmware111B01.bin
decrypted_DIR-3060_RevA_Firmware111B01.bin: u-boot legacy uImage, Linux Kernel Image, Linux/MIPS, OS Kernel Image (lzma), 18080478 bytes, Mon Jan  6 08:45:07 2020, Load Address: 0x81001000, Entry Point: 0x81643D00, Header CRC: 0xCF5AE78D, Data CRC: 0x70C7567F

&gt; binwalk DIR_3060/decrypted_DIR-3060_RevA_Firmware111B01.bin
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             uImage header, header size: 64 bytes, header CRC: 0x342C3662, created: 2019-09-16 06:46:37, image size: 18030334 bytes, Data Address: 0x81001000, Entry Point: 0x816357A0, data CRC: 0x35F99EE4, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: "Linux Kernel Image"
160           0xA0            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 23452096 bytes
</code></pre>
<p>Looks promising! The script finished without any errors and file as well as <em>binwalk</em> report proper file sections that are typical for a firmware image. How about unpacking?</p>
<p>We can just use <em>binwalk</em> or whip out <a href="https://github.com/fkie-cad/FACT_core">FACT</a> the <em>Firmware Analysis and Comparison Tool</em> that ships with the <a href="https://github.com/fkie-cad/fact_extractor">FACT extractor</a>, which includes additional file signatures and carvers for extraction!</p>
<pre><code class="lang-auto">&gt;./extract.py decrypted_DIR-3060_RevA_Firmware111B01.bin -o tmp
[...]
&gt;./extract.py extraced_ubootLZMA4/8834EC -o dir3060_file_system
WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
[2020-03-20 11:00:20][unpackBase][INFO]: Plug-ins available: ['TPWRN702N', 'adobe', 'ambarella', 'ambarella_romfs', 'arj', 'avm_sqfs_fake', 'dahua', 'deb', 'dji_drones', 'dlm', 'dsk', 'dsk_extended', 'generic_carver', 'generic_fs','intel_hex', 'jffs2', 'nop', 'patool', 'pjl', 'postscript', 'raw', 'ros', 'sevenz', 'sfx', 'sit', 'squash_fs', 'srec', 'tek', 'tpltool', 'ubi_fs', 'ubi_image', 'uboot', 'uefi', 'untrx', 'update_stream', 'xtek', 'yaffs', 'zlib']
[2020-03-20 11:00:29][unpack][INFO]: 1903 files extracted
[2020-03-20 12:00:30][extract][WARNING]: Now taking ownership of the files. You may need to enter your password.
{
    "plugin_used": "PaTool",
    "plugin_version": "0.5.2",
    "output": "137449 blocks\npatool: Extracting /tmp/extractor/input/8834EC ...\npatool: running '/bin/cpio' --extract --make-directories --preserve-modification-time --no-absolute-filenames --force-local --nonmatching \"*\\.\\.*\" &lt; '/tmp/extractor/input/8834EC'\npatool:     with shell='True', cwd='/tmp/fact_unpack_o4kgxvd5'\npatool: ... /tmp/extractor/input/8834EC extracted to `/tmp/fact_unpack_o4kgxvd5'.\n",
    "analysis_date": 1584702021.1047733,
    "number_of_unpacked_files": 1887,
    "number_of_unpacked_directories": 97,
    "summary": [
        "no data lost"
    ],
    "entropy": 0.5405103347033559,
    "size_packed": 61216856,
    "size_unpacked": 225761852
}

&gt; cd dir3060_file_system &amp;&amp; ls
bin  etc  etc_ro  init  lib  rom  sbin  share  usr

&gt; cp $(which qemu-mipsel-static) .

&gt; sudo chroot . ./qemu-mipsel-static bin/imgdecrypt Hello_0x00sec       
key:C05FBF1936C99429CE2A0781F08D6AD8
</code></pre>
<p>We’ve done it! We successfully unpacked the encrypted firmware image and can directly see a known constant in form of the <em>etc_ro</em> folder, which contains the certificate we saw right at the beginning!</p>
<p>Just for fun we can snoop around the file system locally now without having to have a device at hand which is handy for static analysis:</p>
<pre><code class="lang-auto">&gt; cat /etc/shadow
root:$1$ZVpxbK71$2Fgpdj.x9SBOCz5oyULHd/:17349:0:99999:7:::
daemon:*:0:0:99999:7:::
ftp:*:0:0:99999:7:::
network:*:0:0:99999:7:::
nobody:*:0:0:99999:7:::

&gt; cat etc/shadow | cut -d$'\n' -f1 | cut -d":" -f2 &gt; hash.txt

&gt; cat hash.txt
$1$ZVpxbK71$2Fgpdj.x9SBOCz5oyULHd/

&gt; hashcat -m 500 -a 0 -o cracked.txt hash.txt rockyou.txt -O

&gt; cat cracked.txt
$1$ZVpxbK71$2Fgpdj.x9SBOCz5oyULHd/:root
</code></pre>
<p>So we got a <em>root:root</em> login on the newest flagship router model from last year and no privilege separation whatsoever with everything running as root as usual.</p>
<p>Last but not least, instead of enumerating the extracted file system locally we could have also dumped the decrypted firmware file into FACT instead of only using the FACT extractor to get tons of more interesting metadata about this firmware:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/b/b01ba1e4b2b4c431a4ca977df6301b14f3ca6064.png" data-download-href="/uploads/short-url/p7VeGM3HqyCM1TxaUMcTYSm2AMA.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/b/b01ba1e4b2b4c431a4ca977df6301b14f3ca6064_2_690x381.png" alt="" data-base62-sha1="p7VeGM3HqyCM1TxaUMcTYSm2AMA" width="690" height="381" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/b/b01ba1e4b2b4c431a4ca977df6301b14f3ca6064_2_690x381.png, https://0x00sec.s3.amazonaws.com/optimized/2X/b/b01ba1e4b2b4c431a4ca977df6301b14f3ca6064_2_1035x571.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/b/b01ba1e4b2b4c431a4ca977df6301b14f3ca6064_2_1380x762.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/b/b01ba1e4b2b4c431a4ca977df6301b14f3ca6064_2_10x10.png"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/7/70707de3bbb4b2429bf895133c5333806b2ab211.png" data-download-href="/uploads/short-url/g2Gukm2M3thp5twolKfjJYqO3UB.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/7/70707de3bbb4b2429bf895133c5333806b2ab211_2_690x263.png" alt="" data-base62-sha1="g2Gukm2M3thp5twolKfjJYqO3UB" width="690" height="263" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/7/70707de3bbb4b2429bf895133c5333806b2ab211_2_690x263.png, https://0x00sec.s3.amazonaws.com/optimized/2X/7/70707de3bbb4b2429bf895133c5333806b2ab211_2_1035x394.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/7/70707de3bbb4b2429bf895133c5333806b2ab211_2_1380x526.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/7/70707de3bbb4b2429bf895133c5333806b2ab211_2_10x10.png"></a></div><p></p>
<p>As we can see the encrypted firmware sample in the first screenshot is not extracted at all. The <em>file type</em> only matches the newly added signature for the D-Link “SHRS” magic byte sequence. However, after applying the firmware decryption we can see a fully unrolled Linux file tree as well as a very verbose file-type with lots of meta-information in addition to the correctly cracked password :).</p>
<blockquote>
<p>Note: Ignore the first lengthy password tag in the decrypted firmware, that’s a bug in the output parser from the password cracker :D.</p>
</blockquote>
<p>‌</p><h2 id="heading--conclusion">Conclusion:</h2>
<p>In this blog post I showcased how we can circumvent a firmware encryption by finding the path of least resistance and I guess also the path of minimal purchase costs. Our research shows that our results from analyzing the D-Link DIR882 directly translate up to the flagship model D-Link DIR3060 among others. This shows that the encryption mechanism and more importantly the structure of the security header never changed over the course of the past 2-3 years! Moreover, the decryption key stayed the same as well.</p>
<p>IMO this was a rather fun challenge and utilizing a dynamically resolved decryption key that is based on three hard coded constants in addition to that public certificate mechanism is not such a horrible solution for securing firmware updates. I was only able to crack this due to the physical access to the device. That said I never much poked around the other potential vulnerable components like the OTA firmware update mechanism or the web GUI as this would be beyond the scope of this article.</p>
<p>The final decryption script, the re-constructed C code and everything else can be found on my <a href="https://github.com/0xricksanchez/dlink-decrypt">GitHub</a>. The full script also includes a basic encryption routine that mimics the original encryption.</p>
<p>This first blog post series was already rather lengthy even though I omitted the whole hooking up to the serial console and dumping the binary of interest. Nevertheless, I hope you enjoyed reading through it. I’m more than happy to receive any feedback so please hit me up on <a href="https://twitter.com/0xricksanchez">Twitter</a>.</p>
<p>PS: Show FACT some love:</p>
<ul>
<li><a href="https://twitter.com/FAandCTool">FACT on Twitter</a></li>
<li><a href="https://github.com/fkie-cad/FACT_core">FACT on GitHub</a></li>
</ul>
<p>PPS: As of now the custom unpacker is part of FACT by default so there is no need to manually unpack these images anymore :)!</p>
<p>PPPS: Sorry for the often wonky naming of basic blocks and variables! Did that irritate you and do you prefer a blank IDA database next time or was it not that bad?</p>
<p>PPPPS: If you feel like dynamically debugging the original MIPS binary, it is certainly possible from within GDB:</p>
<p>‌</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/0/0570059283a457d282556c80180197ba3f41d695.png" data-download-href="/uploads/short-url/M6omew3D9aYk0WagkjtRnfRyZv.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0570059283a457d282556c80180197ba3f41d695_2_690x403.png" alt="" data-base62-sha1="M6omew3D9aYk0WagkjtRnfRyZv" width="690" height="403" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0570059283a457d282556c80180197ba3f41d695_2_690x403.png, https://0x00sec.s3.amazonaws.com/optimized/2X/0/0570059283a457d282556c80180197ba3f41d695_2_1035x604.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/0/0570059283a457d282556c80180197ba3f41d695_2_1380x806.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0570059283a457d282556c80180197ba3f41d695_2_10x10.png"></a></div><br>
And with that its time to say EOF. Hope you enjoyed this walkthrough .<p></p>
<h2>&lt;&lt; <a href="https://0x00sec.org/t/breaking-the-d-link-dir3060-firmware-encryption-static-analysis-of-the-decryption-routine-part-2-1/22099/6">Part 2.1</a>
</h2>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/breaking-the-d-link-dir3060-firmware-encryption-static-analysis-of-the-decryption-routine-part-2-2/22260">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/breaking-the-d-link-dir3060-firmware-encryption-static-analysis-of-the-decryption-routine-part-2-2/22260</link>
          <pubDate>Wed, 15 Jul 2020 20:20:37 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-22260</guid>
          <source url="https://0x00sec.org/t/breaking-the-d-link-dir3060-firmware-encryption-static-analysis-of-the-decryption-routine-part-2-2/22260.rss">Breaking the D-Link DIR3060 Firmware Encryption - Static analysis of the decryption routine - Part 2.2</source>
        </item>
        <item>
          <title>Breaking the D-Link DIR3060 Firmware Encryption - Static analysis of the decryption routine - Part 2.1</title>
          <dc:creator><![CDATA[ricksanchez]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/5/512d32c4cd79025a18a5375600e910d6f296a3e5.jpeg" data-download-href="/uploads/short-url/bA7vKk0BmuESXFfqJ6nYJFGTPkV.jpeg?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/5/512d32c4cd79025a18a5375600e910d6f296a3e5_2_690x387.jpeg" alt="" data-base62-sha1="bA7vKk0BmuESXFfqJ6nYJFGTPkV" width="690" height="387" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/5/512d32c4cd79025a18a5375600e910d6f296a3e5_2_690x387.jpeg, https://0x00sec.s3.amazonaws.com/optimized/2X/5/512d32c4cd79025a18a5375600e910d6f296a3e5_2_1035x580.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/5/512d32c4cd79025a18a5375600e910d6f296a3e5_2_1380x774.jpeg 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/5/512d32c4cd79025a18a5375600e910d6f296a3e5_2_10x10.png"></a></div><p></p>
<p>Welcome back to part 2 of this series! If you have not checked out <a href="https://0x434b.dev/breaking-the-d-link-dir3060-firmware-encryption-recon-part-1/">part 1</a> yet please do so first as it highlights important reconnaissance steps!</p>
<h2>ToC</h2>
<ul>
<li><a href="https://0x00sec.org#heading--starting-with-ida">Loading the binary into IDA</a></li>
<li>
<a href="https://0x00sec.org#heading--decrypt-firmware">decrypt_firmware</a>
<ul>
<li><a href="https://0x00sec.org#heading--check-cert">check_cert</a></li>
<li><a href="https://0x00sec.org#heading--call-aes-cbc-encrypt">call_aes_cbc_encrypt</a></li>
<li><a href="https://0x00sec.org#heading--aes-cbc-encrypt">aes_cbc_encrypt</a></li>
<li><a href="https://0x00sec.org#heading--df-debug">decrypt_firmware: debug print</a></li>
<li><a href="https://0x00sec.org#heading--actual-decryption">actual_decryption</a></li>
</ul>
</li>
<li><a href="https://0x00sec.org#heading--inter-summ">Intermediate summary</a></li>
</ul>
<h2 id="heading--starting-with-ida">Loading the binary into IDA:</h2>
<p>So let us dive right into the IDA adventure to get a better look at how <code>imgdecrypt</code> operates to secure firmware integrity of recent router models.</p>
<p>‌Note: If you have trouble reading the IDA screenshots here I recommend <a href="https://0x434b.dev/breaking-the-d-link-dir3060-firmware-encryption-static-analysis-of-the-decryption-routine-part-2-1/">reading the mirror on my blog</a> where these screenshots scale better!</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/2/25582b931f7f069e344b38b8179ef735ae96f0d7.png" data-download-href="/uploads/short-url/5kmzlUXvZk9bIzmuvsyAv7Fivz1.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/2/25582b931f7f069e344b38b8179ef735ae96f0d7_2_690x325.png" alt="" data-base62-sha1="5kmzlUXvZk9bIzmuvsyAv7Fivz1" width="690" height="325" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/2/25582b931f7f069e344b38b8179ef735ae96f0d7_2_690x325.png, https://0x00sec.s3.amazonaws.com/original/2X/2/25582b931f7f069e344b38b8179ef735ae96f0d7.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/2/25582b931f7f069e344b38b8179ef735ae96f0d7.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/2/25582b931f7f069e344b38b8179ef735ae96f0d7_2_10x10.png"></a></div><br>
Right when loading the binary into IDA we’re greeted with a function list which is far from bad for us. Remember? In part 1 we found out the binary is supposed to be stripped from any debug symbols, which should make it tough to debug the whole thing but in the way IDA is presenting it to us it is rather nice:<p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/5/5d2e11cea43a20b189bb4a51fb84c8f2eca397c7.png" data-download-href="/uploads/short-url/dij6IpsP4DfHplwMFb9yCWuBum3.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5d2e11cea43a20b189bb4a51fb84c8f2eca397c7_2_690x466.png" alt="" data-base62-sha1="dij6IpsP4DfHplwMFb9yCWuBum3" width="690" height="466" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5d2e11cea43a20b189bb4a51fb84c8f2eca397c7_2_690x466.png, https://0x00sec.s3.amazonaws.com/optimized/2X/5/5d2e11cea43a20b189bb4a51fb84c8f2eca397c7_2_1035x699.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/5/5d2e11cea43a20b189bb4a51fb84c8f2eca397c7_2_1380x932.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5d2e11cea43a20b189bb4a51fb84c8f2eca397c7_2_10x10.png"></a></div><p></p>
<ol>
<li>Overall 104 recognized functions.</li>
<li>Only 16 functions that are not matched against any library function (or similar). These most likely contain the custom de-/encryption routines produced by D-Link.</li>
<li>Even though the binary is called <code>img</code> <strong><code>de</code></strong> <code>crypt</code> the main entry point reveals that apparently is also has encryption capabilities!</li>
</ol>
<p>As we’re interested in the decryption for now how do we get there? Quickly annotating the main functions here leaves us with this:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/6/6fd55d885483efe0103107ed861d661a23a6495d.png" data-download-href="/uploads/short-url/fXk8cWhp6aIPbE6IiTQ1Ybrb7Z3.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6fd55d885483efe0103107ed861d661a23a6495d_2_541x500.png" alt="" data-base62-sha1="fXk8cWhp6aIPbE6IiTQ1Ybrb7Z3" width="541" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6fd55d885483efe0103107ed861d661a23a6495d_2_541x500.png, https://0x00sec.s3.amazonaws.com/optimized/2X/6/6fd55d885483efe0103107ed861d661a23a6495d_2_811x750.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/6/6fd55d885483efe0103107ed861d661a23a6495d.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6fd55d885483efe0103107ed861d661a23a6495d_2_10x10.png"></a></div><p></p>
<p>The gist here is that for us to enter the decryption part of the binary our <code>**argv</code> argument list has to include the substring <em>“decrypt”</em> . If that is not the case <code>char *strstr(const char *haystack, const char *needle)</code> returns <code>NULL</code> as it could not find the <em>needle</em> (“decrypt”) in the <em>haystack</em> (argv[0] == “imgdecrypt\0”). If <code>NULL</code> is returned the <code>beqz  $v0, loc_402AE0</code> instruction will evaluate to true and control flow is redirected to <code>loc_402AE0</code> , which is the encryption part of the binary. If you do not understand why I heavily recommend to read part 1 of this series carefully and review the MIPS32 ABI.</p>
<p>Since the binary we’re analyzing is called <code>imgdecrypt</code> and the fact that we’re searching from the start of the <em>argv</em> space we will always hit the correct condition to enter the decryption routine. To be able to enter the <em>encryption</em> routine us renaming of the binary is necessary.</p>
<p>So now we know how to reach the basic block that houses <code>decrypt_firmware</code> . Before entering, we should take a closer look at whether the function takes any arguments and if yes which. As you can see from the annotated version <code>argc</code> is loaded into <code>$a0</code> and <code>argv</code> is loaded into <code>$a1</code> , which according to the MIPS32 ABI are the registers to hold the first two function arguments! With that out of the way lets rock on!</p>
<h2 id="heading--decrypt-firmware">decrypt_firmware:</h2>
<p>‌<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/6/6cfed7ca6f32a55d7c4cfbd654bbc83272219f21.png" data-download-href="/uploads/short-url/fydz2UwupbmKNkb9wINPVyhsiK5.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6cfed7ca6f32a55d7c4cfbd654bbc83272219f21_2_353x500.png" alt="" data-base62-sha1="fydz2UwupbmKNkb9wINPVyhsiK5" width="353" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6cfed7ca6f32a55d7c4cfbd654bbc83272219f21_2_353x500.png, https://0x00sec.s3.amazonaws.com/optimized/2X/6/6cfed7ca6f32a55d7c4cfbd654bbc83272219f21_2_529x750.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/6/6cfed7ca6f32a55d7c4cfbd654bbc83272219f21_2_706x1000.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6cfed7ca6f32a55d7c4cfbd654bbc83272219f21_2_10x10.png"></a></div><p></p>
<p>After entering the <code>decrypt_firmware</code> function right from how IDA groups the basic blocks in the graph view we know two things for sure:</p>
<ol>
<li>There are two obvious paths we do not want to take to continue decrypting</li>
<li>There is some kind of loop in place.</li>
</ol>
<p>Let’s take a look at the first part:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/b/bd38599276706dde66a89f03470bb6cba4ded666.png" data-download-href="/uploads/short-url/qZUYcwqqdTk6iDsvRMDZNQ5RTQa.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/b/bd38599276706dde66a89f03470bb6cba4ded666_2_431x500.png" alt="" data-base62-sha1="qZUYcwqqdTk6iDsvRMDZNQ5RTQa" width="431" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/b/bd38599276706dde66a89f03470bb6cba4ded666_2_431x500.png, https://0x00sec.s3.amazonaws.com/optimized/2X/b/bd38599276706dde66a89f03470bb6cba4ded666_2_646x750.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/b/bd38599276706dde66a89f03470bb6cba4ded666_2_862x1000.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/b/bd38599276706dde66a89f03470bb6cba4ded666_2_10x10.png"></a></div><p></p>
<p>I already annotated most of the interesting parts. The handful of <code>lw</code> and <code>sw</code> instructions at the beginning are setting up the stack frame and function arguments in appropriate places. The invested reader will remember the <code>/etc_ro/public.pem</code> from <a href="https://0x434b.dev/breaking-the-d-link-dir3060-firmware-encryption-recon-part-1/">part 1</a>. Here in the function prologue the certificate is also set up for later usage. Besides that, there’s only one interesting check at the end where <code>argc</code> is loaded into <code>$v0</code> and then compared against 2 via <code>slti $v0, 2</code> , which in combination with the next instruction of <code>beqz $v0, loc_402670</code> translates to the following C-style code snippet:</p>
<pre><code class="lang-auto">if(argc &lt; 2) {
  ...
} else {
  goto loc_402670
}
</code></pre>
<p>This means to properly invoke <code>imgdecrypt</code> we need at least one more argument (as <code>./imgdecrypt</code> already means that <em>argc</em> is 1). This totally makes sense as we would not gain anything from invoking this binary without supplying at least an encrypted firmware image! Let’s check what the bad path we would want to avoid holds in store for us first:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d25dc295c7c6fff885cc2a8e182af33691a09e20.png" alt="" data-base62-sha1="u0Z9ehJBSdV8bqm3xNZnXZcGQSI" width="601" height="311"></p>
<p>As expected the binary takes an input file, which they denote as <em>sourceFile.</em> This makes sense as the <em>mode</em> this binary operates in can either be decryption OR encryption. So back to the control flow we would want to follow. Once we made sure our <em>argc</em> is at least 2 there is another check against <em>argc</em> :</p>
<pre><code class="lang-auto">lw  $v0, 0x34+argc($sp)
nop
slti  $v0, 3
bnez  $v0, loc_402698
</code></pre>
<p>This directly translates to:</p>
<pre><code class="lang-auto"> if(argc &lt; 3) {
   // $v0 == 1
   goto loc_402698
 } else {
   // $v0 == 0
   goto loadUserPem
 }
</code></pre>
<p>What I called <code>loadUserPem</code> allows a user to provide a custom <code>certificate.pem</code> upon invocation as it is then stored at the memory location where the default <code>/etc_ro/public.pem</code> would have been. As this is none of our concern for now we can happily ignore this part and move on to <code>loc_402698</code> . There we directly set up a function call to something I renamed to <code>check_cert</code> . As usual arguments are loaded into <code>$a0</code> and <code>$a1</code> respectively: <code>check_cert(pemFile, 0)</code></p>
<h3 id="heading--check-cert">check_cert:</h3>
<p>This one is pretty straightforward as it just utilizes a bunch of library functionality.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/b/b7c1b0819d321b40a037165a360ddc07349c814d.png" data-download-href="/uploads/short-url/qdAm0aTe8J2oYlXsrlZ1AjJrQyF.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/b/b7c1b0819d321b40a037165a360ddc07349c814d_2_356x500.png" alt="" data-base62-sha1="qdAm0aTe8J2oYlXsrlZ1AjJrQyF" width="356" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/b/b7c1b0819d321b40a037165a360ddc07349c814d_2_356x500.png, https://0x00sec.s3.amazonaws.com/optimized/2X/b/b7c1b0819d321b40a037165a360ddc07349c814d_2_534x750.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/b/b7c1b0819d321b40a037165a360ddc07349c814d_2_712x1000.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/b/b7c1b0819d321b40a037165a360ddc07349c814d_2_10x10.png"></a></div><p></p>
<p>After setting up the stack frame is done it is being checked whether the provided certificate location is valid by doing a <code>FILE *fopen(const char *pathname, const char *mode)</code> , which returns a <code>NULL</code> pointer when it fails. If that would be the case the <code>beqz  $v0, early_return</code> would evaluate to <em>true</em> and control flow would take the <em>early_return</em> path, which ultimately would end up in returning <code>-1</code> from the function as <code>lw $v0, RSA_cert; beqz  $v0, bad_end</code> would evaluate to <em>true</em> as the <em>RSA_cert</em> is not yet initialized to the point that it holds any data to pass the check against <em>0</em> .</p>
<p>In the case, when opening the file is successful <code>RSA *RSA_new(void)</code> and <code>RSA *PEM_read_RSAPublicKey(FILE fp, RSA **x, pem_password_cb *cb, void *u)</code>  are used to fill the <code>RSA *RSA_struct</code> . This struct has the following field members:</p>
<pre><code class="lang-auto">struct {
       BIGNUM *n;              // public modulus
       BIGNUM *e;              // public exponent
       BIGNUM *d;              // private exponent
       BIGNUM *p;              // secret prime factor
       BIGNUM *q;              // secret prime factor
       BIGNUM *dmp1;           // d mod (p-1)
       BIGNUM *dmq1;           // d mod (q-1)
       BIGNUM *iqmp;           // q^-1 mod p
       // ...
       }; RSA
// In public keys, the private exponent and the related secret values are NULL. 
</code></pre>
<p>Finally, these values (aka the public key) are stored in <code>RSA_cert</code> in memory via the <code>sw $v1, RSA_cert</code> instruction. Following that is only the function tear down and once the comparison in <code>early_return</code> yields a value != 0 our function return value in set to 0 in the <code>good_end</code> basic block: <code>move  $v0, $zero</code> .</p>
<hr>
<p>Back in <code>decrypt_firmware</code> the return value of <code>check_cert</code> is placed into memory (something I re-labeled as <code>loop_ctr</code> as it is reused later) and compared against 0. Only if that condition is met control flow will continue deeper into the program to <code>check_Cert_succ</code> . In here we directly redirect control flow to <code>call_aes_cbc_encrypt()</code> with <code>key_0</code> as its first argument.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/f/fc66e2067baa0d45fd61455cc580791a31b3c951.png" data-download-href="/uploads/short-url/A0QKnYSLhOJCcSKGvUqUeWCmKjf.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/f/fc66e2067baa0d45fd61455cc580791a31b3c951_2_690x240.png" alt="" data-base62-sha1="A0QKnYSLhOJCcSKGvUqUeWCmKjf" width="690" height="240" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/f/fc66e2067baa0d45fd61455cc580791a31b3c951_2_690x240.png, https://0x00sec.s3.amazonaws.com/optimized/2X/f/fc66e2067baa0d45fd61455cc580791a31b3c951_2_1035x360.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/f/fc66e2067baa0d45fd61455cc580791a31b3c951_2_1380x480.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/f/fc66e2067baa0d45fd61455cc580791a31b3c951_2_10x10.png"></a></div><p></p>
<h3 id="heading--call-aes-cbc-encrypt"> call_aes_cbc_encrypt:</h3>
<p>The function itself only acts as a wrapper, as it directly calls <code>aes_cbc_encrypt()</code> with 5 arguments, with the first four in registers <code>$a0 - $a3</code> and the 5th one on the stack.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/c/c87a093686929f436aa24d603320bd081d7ea580.png" data-download-href="/uploads/short-url/sBuXcYz7KTGjjfd6mH4crWfZ5kc.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c87a093686929f436aa24d603320bd081d7ea580_2_544x500.png" alt="" data-base62-sha1="sBuXcYz7KTGjjfd6mH4crWfZ5kc" width="544" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c87a093686929f436aa24d603320bd081d7ea580_2_544x500.png, https://0x00sec.s3.amazonaws.com/original/2X/c/c87a093686929f436aa24d603320bd081d7ea580.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/c/c87a093686929f436aa24d603320bd081d7ea580.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c87a093686929f436aa24d603320bd081d7ea580_2_10x10.png"></a></div><p></p>
<p>Four of the five arguments are hard coded into this binary and loaded from memory via multiple: load memory base address ( <code>lw  $v0, offset_crypto_material</code> ) and add an offset to it ( <code>addiu  $a0, $v0, offset</code> ) operations as they are placed directly one after another:</p>
<ul>
<li>
<code>offset_crypto_material + 0x20</code> → <code>C8D32F409CACB347C8D26FDCB9090B3C</code> (in)</li>
<li>
<code>offset_crypto_material + 0x10</code> → <code>358790034519F8C8235DB6492839A73F</code> (userKey)</li>
<li>
<code>offset_crypto_material</code> → <code>98C9D8F0133D0695E2A709C8B69682D4</code> (ivec)</li>
<li>
<code>0x10</code> → key length</li>
</ul>
<p>This basically translates to a function call with the following signature: <code>aes_cbc_encrypt(*ptrTo_C8D32F409CACB347C8D26FDCB9090B3C, 0x10, *ptrTo_358790034519F8C8235DB6492839A73F, *ptrTo_98C9D8F0133D0695E2A709C8B69682D4, *key_copy_stack</code> ). That said I should have renamed <em>key_copy_stack</em> a tad better as in reality it’s just a 16-byte buffer so just try to keep that in mind.</p>
<h3 id="heading--aes-cbc-encrypt">aes_cbc_encrypt:</h3>
<p>The first third of this function is the usual stack frame setup as it needs to properly process 5 function arguments.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/8/83389e16e9de97d0b90f71d2c089063416ab49b9.png" data-download-href="/uploads/short-url/iIPQLN8pa6Hrnlv7QSg0KKEJa77.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/8/83389e16e9de97d0b90f71d2c089063416ab49b9_2_229x500.png" alt="" data-base62-sha1="iIPQLN8pa6Hrnlv7QSg0KKEJa77" width="229" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/8/83389e16e9de97d0b90f71d2c089063416ab49b9_2_229x500.png, https://0x00sec.s3.amazonaws.com/optimized/2X/8/83389e16e9de97d0b90f71d2c089063416ab49b9_2_343x750.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/8/83389e16e9de97d0b90f71d2c089063416ab49b9_2_458x1000.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/8/83389e16e9de97d0b90f71d2c089063416ab49b9_2_10x10.png"></a></div><p></p>
<p>‌Additionally, an <code>AES_KEY</code> struct that looks as follows is defined:</p>
<pre><code class="lang-auto">#define AES_MAXNR 14
// [...]
struct aes_key_st {
#ifdef AES_LONG
    unsigned long rd_key[4 *(AES_MAXNR + 1)];
#else
    unsigned int rd_key[4 *(AES_MAXNR + 1)];
#endif
    int rounds;
};
typedef struct aes_key_st AES_KEY;
</code></pre>
<p>This is needed for the first library call to <code>AES_set_decrypt_key(const unsigned char *userKey, const int bits, AES_KEY *key)</code> , which configures <code>key</code> to decrypt <code>userKey</code> with the <code>bits</code> -bit key. In this particular case the key has a size of 0x80 (128 bit == 16 byte). Finally, <code>AES_cbc_encrypt(const uint8_t *in, uint8_t *out, size_t len, const AES_KEY *key, uint8_t *ivec, const int enc)</code> is called. This function encrypts (or decrypts, if <code>enc == 0</code> ) <code>len</code> bytes from <code>in</code> to <code>out</code> . As <code>out</code> was an externally supplied memory address ( <code>key_copy_stack</code> aka the 16 byte buffer) from <code>call_aes_cbc_encrypt</code> the result from <code>AES_cbc_encrypt</code> is directly stored in memory and not used as a dedicated return value of this function. <code>move  $v0, $zero</code> is returned instead.</p>
<p><em>Note:</em> For anyone wondering what these <code>lwl</code> and <code>lwr</code> do there… They indicate unaligned memory access and it looks like <code>ivec</code> is being accessed like an array but never used after.</p>
<p>Anyhow, what this function essentially does is setting the decryption key from hard coded components. As a result the ’ <em>generated’</em> decryption key is the same every time. We can easily script this behavior:</p>
<pre><code class="lang-auto">from Crypto.Cipher import AES
from binascii import b2a_hex

inFile = bytes.fromhex('C8D32F409CACB347C8D26FDCB9090B3C')
userKey = bytes.fromhex('358790034519F8C8235DB6492839A73F')
ivec = bytes.fromhex('98C9D8F0133D0695E2A709C8B69682D4')
cipher = AES.new(userKey, AES.MODE_CBC, ivec)
b2a_hex(cipher.decrypt(inFile)).upper()

# b'C05FBF1936C99429CE2A0781F08D6AD8'
</code></pre>
<p>Once again we are now back in <code>decrypt_firmware</code> with fresh knowledge about having a static decryption key:</p>
<h3 id="heading--df-debug">decrypt_firmware: debug print:</h3>
<p>‌</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/6/6032715c0ed804ed06c4f08979b04afac6f7b3e7.png" data-download-href="/uploads/short-url/dIZUrwK4JP4w3OSqw2y2VUeeFU3.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6032715c0ed804ed06c4f08979b04afac6f7b3e7_2_690x436.png" alt="" data-base62-sha1="dIZUrwK4JP4w3OSqw2y2VUeeFU3" width="690" height="436" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6032715c0ed804ed06c4f08979b04afac6f7b3e7_2_690x436.png, https://0x00sec.s3.amazonaws.com/optimized/2X/6/6032715c0ed804ed06c4f08979b04afac6f7b3e7_2_1035x654.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/6/6032715c0ed804ed06c4f08979b04afac6f7b3e7.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6032715c0ed804ed06c4f08979b04afac6f7b3e7_2_10x10.png"></a></div><p></p>
<p>Now its getting funky. For whatever reason the binary now enters a loop construct that prints out the previously calculated decryption key. The green marked basic blocks roughly translate to the following C code snippet:</p>
<pre><code class="lang-auto">int ctr = 0;
while(ctr &lt;= 0x10 ) {
  printf("%02X", *(key + ctr));
  ctr += 1;
}
</code></pre>
<p>My assumption is that it may be used for internal debugging so when they e.g. change the <code>ivec</code> they can still quickly get their hands on the new decryption key… Once printing the decryption key to <em>stdout</em> is over the loop condition redirects control flow to the basic block labeled as <code>path_to_dec</code> where a function call to <code>actual_decryption(argv[1], "/tmp/.firmware.orig", *key)</code> is being prepared.</p>
<p>With that over and done with control flow and arguments are being prepared for a function call to something I labelled as <code>actual_decryption</code> .</p>
<h3 id="heading--actual-decryption">actual_decryption:</h3>
<p>This function is the meat holding this decryption scheme together.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/f/fb3df9928aba6ce7a94d887f112616a2fcd0fb48.png" data-download-href="/uploads/short-url/zQACN6mW6hUVVWwPE516fTECks0.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/f/fb3df9928aba6ce7a94d887f112616a2fcd0fb48_2_225x500.png" alt="" data-base62-sha1="zQACN6mW6hUVVWwPE516fTECks0" width="225" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/f/fb3df9928aba6ce7a94d887f112616a2fcd0fb48_2_225x500.png, https://0x00sec.s3.amazonaws.com/optimized/2X/f/fb3df9928aba6ce7a94d887f112616a2fcd0fb48_2_337x750.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/f/fb3df9928aba6ce7a94d887f112616a2fcd0fb48_2_450x1000.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/f/fb3df9928aba6ce7a94d887f112616a2fcd0fb48_2_10x10.png"></a></div><p></p>
<p>This first part prepares two memory locations by initializing them with all 0s via <code>void *memset(void *s, int c, size_t n)</code> . I denoted these areas as <code>buf[68]</code> and <code>buf[0x98]</code> <code>statbuf_[98]</code> . Directly after, the function checks if the provided <em>sourceFile</em> in <em>argv[1]</em> actually exists via a call to <code>int stat(const char *pathname, struct stat *statbuf)</code> . The result of that one is stored within a stat struct that looks as follows:</p>
<pre><code class="lang-auto">struct stat {
    dev_t st_dev;         /* ID of device containing file */
    ino_t st_ino;         /* Inode number */
    mode_t st_mode;        /* File type and mode */
    nlink_t st_nlink;       /* Number of hard links */
    uid_t st_uid;         /* User ID of owner */
    gid_t st_gid;         /* Group ID of owner */
    dev_t st_rdev;        /* Device ID (if special file) */
    off_t st_size;        /* Total size, in bytes */
    blksize_t st_blksize;     /* Block size for filesystem I/O */
    blkcnt_t st_blocks;      /* Number of 512B blocks allocated */

    /* Since Linux 2.6, the kernel supports nanosecond
        precision for the following timestamp fields.
        For the details before Linux 2.6, see NOTES. */

    struct timespec st_atim;  /* Time of last access */
    struct timespec st_mtim;  /* Time of last modification */
    struct timespec st_ctim;  /* Time of last status change */

#define st_atime st_atim.tv_sec      /* Backward compatibility */
#define st_mtime st_mtim.tv_sec
#define st_ctime st_ctim.tv_sec
};
</code></pre>
<p>On success (meaning <em>pathname</em> exists) <code>stat</code> returns 0.  So on failure that <code>bnez $v0, stat_fail</code> would follow the branch to <code>stat_fail</code> . So we want to make sure <code>$v0</code> is 0 to continue normally. The desired control flow continues here:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/7/71fc3967b56f795efee35933c74f0c7817cef150.png" data-download-href="/uploads/short-url/ggmld1ZUPwB9rX00Q2XjcCIHHmE.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/7/71fc3967b56f795efee35933c74f0c7817cef150_2_690x359.png" alt="" data-base62-sha1="ggmld1ZUPwB9rX00Q2XjcCIHHmE" width="690" height="359" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/7/71fc3967b56f795efee35933c74f0c7817cef150_2_690x359.png, https://0x00sec.s3.amazonaws.com/original/2X/7/71fc3967b56f795efee35933c74f0c7817cef150.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/7/71fc3967b56f795efee35933c74f0c7817cef150.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/7/71fc3967b56f795efee35933c74f0c7817cef150_2_10x10.png"></a></div><p></p>
<p>Here, besides some local variable saving the <em>sourceFile</em> is opened in read-only mode, indicated by the <code>0x0</code> flag provided to the <code>open(const char *pathname, int flags)</code> . The result/returned file descriptor of that call is saved to <code>0x128+fd_enc</code> . Similar to the <em>stat</em> routine before it is being checked whether <code>open(sourceFile, O_RDONLY)</code> is successful as indicated by <em><code>bltz  $v0, open_enc_fail</code> .</em> The branch to <code>open_enc_fail</code> is only taken if <code>$v0 &lt; 0</code> , which is only the case when the call to open fails ( <code>-1</code> is returned in this case). So assuming the open call succeeds we get to the next part with <code>$v0</code> holding the open file descriptor:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/3/31f7fe50b26077fb04d33fa06f57c411c216acf6.png" data-download-href="/uploads/short-url/782IBLkK457O2U3ppbw482iItx4.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/3/31f7fe50b26077fb04d33fa06f57c411c216acf6_2_690x277.png" alt="" data-base62-sha1="782IBLkK457O2U3ppbw482iItx4" width="690" height="277" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/3/31f7fe50b26077fb04d33fa06f57c411c216acf6_2_690x277.png, https://0x00sec.s3.amazonaws.com/optimized/2X/3/31f7fe50b26077fb04d33fa06f57c411c216acf6_2_1035x415.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/3/31f7fe50b26077fb04d33fa06f57c411c216acf6.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/3/31f7fe50b26077fb04d33fa06f57c411c216acf6_2_10x10.png"></a></div><p></p>
<p>This basically attempts to use <code>void mmap(void addr, size_t length, int prot, int flags, int fd, off_t offset)</code> to map the just opened file into a kernel chosen memory region ( indicated by <code>*addr == 0</code> ) that is shared but read-only.</p>
<p>Such flags can easily be extracted from the header files on any system as follows:</p>
<pre><code class="lang-auto">&gt; egrep -i '(PROT_|MAP_)' /usr/include/x86_64-linux-gnu/bits/mman-linux.h
   implementation does not necessarily support PROT_EXEC or PROT_WRITE
   without PROT_READ.  The only guarantees are that no writing will be
   allowed without PROT_WRITE and no access will be allowed for PROT_NONE. */
#define PROT_READ	0x1		/* Page can be read.  */
#define PROT_WRITE	0x2		/* Page can be written.  */
#define PROT_EXEC	0x4		/* Page can be executed.  */
#define PROT_NONE	0x0		/* Page can not be accessed.  */
#define PROT_GROWSDOWN	0x01000000	/* Extend change to start of
#define PROT_GROWSUP	0x02000000	/* Extend change to start of
#define MAP_SHARED	0x01		/* Share changes.  */
#define MAP_PRIVATE	0x02		/* Changes are private.  */
# define MAP_SHARED_VALIDATE	0x03	/* Share changes and validate
# define MAP_TYPE	0x0f		/* Mask for type of mapping.  */
#define MAP_FIXED	0x10		/* Interpret addr exactly.  */
# define MAP_FILE	0
# ifdef __MAP_ANONYMOUS
#  define MAP_ANONYMOUS	__MAP_ANONYMOUS	/* Don't use a file.  */
#  define MAP_ANONYMOUS	0x20		/* Don't use a file.  */
# define MAP_ANON	MAP_ANONYMOUS
/* When MAP_HUGETLB is set bits [26:31] encode the log2 of the huge page size.  */
# define MAP_HUGE_SHIFT	26
# define MAP_HUGE_MASK	0x3f
</code></pre>
<p>In this case the <em>stat</em> call from earlier comes in handy once again as it is not just used to verify whether the provided file in <em>argv[1]</em> actually exists but the <em>statStruct</em> also contains the struct member <code>st_blocks</code> which can be used to fill in the required <code>size_t length</code> argument in <em>mmap</em> ! The return value of <em>mmap</em> is stored in <code>0x128+mmap_enc_fw($sp)</code> . Once again we have another ‘if’ condition type branching to check whether the memory mapping was successful. On success, <em>mmap</em> returns a pointer to the mapped area and branching on <code>beqz  $v0, mmap_fail</code> does not take places since <code>$v0</code> holds a value != 0. Following this is a final call to open:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/c/cf5d9ab566fc89a4ae299240d316e8dfe7df2980.png" data-download-href="/uploads/short-url/tArnJeJ9vGK66raP8eoKtEz1IyI.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/c/cf5d9ab566fc89a4ae299240d316e8dfe7df2980_2_690x316.png" alt="" data-base62-sha1="tArnJeJ9vGK66raP8eoKtEz1IyI" width="690" height="316" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/c/cf5d9ab566fc89a4ae299240d316e8dfe7df2980_2_690x316.png, https://0x00sec.s3.amazonaws.com/original/2X/c/cf5d9ab566fc89a4ae299240d316e8dfe7df2980.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/c/cf5d9ab566fc89a4ae299240d316e8dfe7df2980.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/c/cf5d9ab566fc89a4ae299240d316e8dfe7df2980_2_10x10.png"></a></div><p></p>
<p>This only tries to open the predefined path ( <em>“/tmp/.firmware.orig”</em> ) as read+write with the new file descriptor being saved in <code>0x128+fd_tmp($sp)</code> . As usual, if the open fails branch to the fail portion of this function. On success this leads us to the final preparation step:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/4/400dac95f6eb268551955eec3b5b144af7981efc.png" data-download-href="/uploads/short-url/98DR075nLwrWbd1ganKkfuqek68.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/4/400dac95f6eb268551955eec3b5b144af7981efc_2_690x423.png" alt="" data-base62-sha1="98DR075nLwrWbd1ganKkfuqek68" width="690" height="423" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/4/400dac95f6eb268551955eec3b5b144af7981efc_2_690x423.png, https://0x00sec.s3.amazonaws.com/optimized/2X/4/400dac95f6eb268551955eec3b5b144af7981efc_2_1035x634.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/4/400dac95f6eb268551955eec3b5b144af7981efc_2_1380x846.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/4/400dac95f6eb268551955eec3b5b144af7981efc_2_10x10.png"></a></div><p></p>
<ol>
<li>Here we’re preparing to set the correct size of the freshly opened file in the <em>/tmp/</em> location by first seeking to offset <code>stat.st_blocks -1</code> by invoking <code>lseek(fd_tmp, stat.st_blocks -1)</code> .</li>
<li>When the <em>lseek</em> succeeds we write a single 0 to the file at said offset. This allows us to easily and quickly create an " <em>empty</em> " file without having to write <em>N</em> bytes in total (where N== desired file size in bytes). Finally, we close, re-open and re-map the file with new permissions.</li>
</ol>
<p><em>Side note</em> : We do not need all these if-condition like checks realized through <code>beqz, bnez, ...</code> as we already know for sure the file exists by now…</p>
<h2 id="heading--inter-summ">Intermediate Summary:</h2>
<p>So far we didn’t manage to dig any deeper into the decryption routine because of all this file preparation stuff. Luckily, I can tease you as much as that we’re done with that now. As we have already roughly met the 15 minute mark for the reading time I’ll stop here. The very soon upcoming 2nd part of this write-up will solely focus on the cryptographic aspects of the scheme D-Link utilizes.</p>
<p>If, for any reason, you weren’t able to follow properly until here you can find the whole source code up to this point below. You should be able to compile it with <em>clang</em> / <em>gcc</em> via <code>clang/gcc -o imgdecrypt imgdecrypt.c -L/usr/local/lib -lssl -lcrypto -s</code> on any recent Debian based system. This in particular comes in handy if you’re new to MIPS and would much more prefer looking at x86 disassembly. The x86 reversing experience should be close to the original MIPS one only with some minor deviations due to platform differences.</p>
<pre><code class="lang-auto">#include &lt;arpa/inet.h&gt;
#include &lt;errno.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;openssl/aes.h&gt;
#include &lt;openssl/pem.h&gt;
#include &lt;openssl/rsa.h&gt;
#include &lt;stddef.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/mman.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;

static RSA *grsa_struct = NULL;
static unsigned char iv[] = {0x98, 0xC9, 0xD8, 0xF0, 0x13, 0x3D, 0x06, 0x95,
                             0xE2, 0xA7, 0x09, 0xC8, 0xB6, 0x96, 0x82, 0xD4};
static unsigned char aes_in[] = {0xC8, 0xD3, 0x2F, 0x40, 0x9C, 0xAC,
                                 0xB3, 0x47, 0xC8, 0xD2, 0x6F, 0xDC,
                                 0xB9, 0x09, 0x0B, 0x3C};
static unsigned char aes_key[] = {0x35, 0x87, 0x90, 0x03, 0x45, 0x19,
                                  0xF8, 0xC8, 0x23, 0x5D, 0xB6, 0x49,
                                  0x28, 0x39, 0xA7, 0x3F};

unsigned char out[] = {0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
                       0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46};

int check_cert(char *pem, void *n) {
  OPENSSL_add_all_algorithms_noconf();

  FILE *pem_fd = fopen(pem, "r");
  if (pem_fd != NULL) {
    RSA *lrsa_struct[2];
    *lrsa_struct = RSA_new();
    if (!PEM_read_RSAPublicKey(pem_fd, lrsa_struct, NULL, n)) {
      RSA_free(*lrsa_struct);
      puts("Read RSA private key failed, maybe the password is incorrect.");
    } else {
      grsa_struct = *lrsa_struct;
    }
    fclose(pem_fd);
  }
  if (grsa_struct != NULL) {
    return 0;
  } else {
    return -1;
  }
}

int aes_cbc_encrypt(size_t length, unsigned char *key) {
  AES_KEY dec_key;
  AES_set_decrypt_key(aes_key, sizeof(aes_key) * 8, &amp;dec_key);
  AES_cbc_encrypt(aes_in, key, length, &amp;dec_key, iv, AES_DECRYPT);
  return 0;
}

int call_aes_cbc_encrypt(unsigned char *key) {
  aes_cbc_encrypt(0x10, key);
  return 0;
}

int actual_decryption(char *sourceFile, char *tmpDecPath, unsigned char *key) {
  int ret_val = -1;
  size_t st_blocks = -1;
  struct stat statStruct;
  int fd = -1;
  int fd2 = -1;
  void *ROM = 0;
  int *RWMEM;
  off_t seek_off;
  unsigned char buf_68[68];
  int st;

  memset(&amp;buf_68, 0, 0x40);
  memset(&amp;statStruct, 0, 0x90);
  st = stat(sourceFile, &amp;statStruct);
  if (st == 0) {
    fd = open(sourceFile, O_RDONLY);
    st_blocks = statStruct.st_blocks;
    if (((-1 &lt; fd) &amp;&amp;
         (ROM = mmap(0, statStruct.st_blocks, 1, MAP_SHARED, fd, 0),
          ROM != 0)) &amp;&amp;
        (fd2 = open(tmpDecPath, O_RDWR | O_NOCTTY, 0x180), -1 &lt; fd2)) {
      seek_off = lseek(fd2, statStruct.st_blocks - 1, 0);
      if (seek_off == statStruct.st_blocks - 1) {
        write(fd2, 0, 1);
        close(fd2);
        fd2 = open(tmpDecPath, O_RDWR | O_NOCTTY, 0x180);
        RWMEM = mmap(0, statStruct.st_blocks, PROT_EXEC | PROT_WRITE,
                     MAP_SHARED, fd2, 0);
        if (RWMEM != NULL) {
          ret_val = 0;
        }
      }
    }
  }
  puts("EOF part 2.1!\n");
  return ret_val;
}

int decrypt_firmware(int argc, char **argv) {
  int ret;
  unsigned char key[] = {0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
                         0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46};
  char *ppem = "/tmp/public.pem";
  int loopCtr = 0;
  if (argc &lt; 2) {
    printf("%s &lt;sourceFile&gt;\r\n", argv[0]);
    ret = -1;
  } else {
    if (2 &lt; argc) {
      ppem = (char *)argv[2];
    }
    int cc = check_cert(ppem, (void *)0);
    if (cc == 0) {
      call_aes_cbc_encrypt((unsigned char *)&amp;key);

      printf("key: ");
      while (loopCtr &lt; 0x10) {
        printf("%02X", *(key + loopCtr) &amp; 0xff);
        loopCtr += 1;
      }
      puts("\r");
      ret = actual_decryption((char *)argv[1], "/tmp/.firmware.orig",
                              (unsigned char *)&amp;key);

      if (ret == 0) {
        unlink(argv[1]);
        rename("/tmp/.firmware.orig", argv[1]);
      }
      RSA_free(grsa_struct);
    } else {
      ret = -1;
    }
  }
  return ret;
}

int encrypt_firmware(int argc, char **argv) { return 0; }

int main(int argc, char **argv) {
  int ret;
  char *str_f = strstr(*argv, "decrypt");

  if (str_f != NULL) {
    ret = decrypt_firmware(argc, argv);

  } else {
    ret = encrypt_firmware(argc, argv);
  }

  return ret;
}
</code></pre>
<p>‌</p>
<pre><code class="lang-auto">&gt; ./imgdecrypt
./imgdecrypt &lt;sourceFile&gt;
&gt; ./imgdecrypt testFile
key: C05FBF1936C99429CE2A0781F08D6AD8
EOF part 2.1!
</code></pre>
<p>The next part 2.2 will be online shortly and linked here as soon as it is available.<br>
Thanks for reading and if you have any questions or remarks feel free to hit me up :)!</p>
<p>Note: If you have trouble reading the IDA screenshots here I recommend <a href="https://0x434b.dev/breaking-the-d-link-dir3060-firmware-encryption-static-analysis-of-the-decryption-routine-part-2-1/">reading the mirror on my blog</a> where these screenshots scale better!</p>
<h2>&lt;&lt; <a href="https://0x00sec.org/t/breaking-the-d-link-dir3060-firmware-encryption-recon-part-1/21943/">Part 1</a>
</h2>
<h2>&gt;&gt; <a href="https://0x00sec.org/t/breaking-the-d-link-dir3060-firmware-encryption-static-analysis-of-the-decryption-routine-part-2-2/22260">Part 2.2</a>
</h2>
            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/breaking-the-d-link-dir3060-firmware-encryption-static-analysis-of-the-decryption-routine-part-2-1/22099">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/breaking-the-d-link-dir3060-firmware-encryption-static-analysis-of-the-decryption-routine-part-2-1/22099</link>
          <pubDate>Mon, 06 Jul 2020 10:42:22 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-22099</guid>
          <source url="https://0x00sec.org/t/breaking-the-d-link-dir3060-firmware-encryption-static-analysis-of-the-decryption-routine-part-2-1/22099.rss">Breaking the D-Link DIR3060 Firmware Encryption - Static analysis of the decryption routine - Part 2.1</source>
        </item>
        <item>
          <title>Breaking the D-Link DIR3060 Firmware Encryption - Recon - Part 1</title>
          <dc:creator><![CDATA[ricksanchez]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/6/67a8100e33e070430b0696386abfe334a5312196.png" data-download-href="/uploads/short-url/eMZfDkg9YsQ6a9ys3DkxEtsRfme.png?dl=1" title="bb"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/67a8100e33e070430b0696386abfe334a5312196_2_682x500.png" alt="bb" data-base62-sha1="eMZfDkg9YsQ6a9ys3DkxEtsRfme" width="682" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/6/67a8100e33e070430b0696386abfe334a5312196_2_682x500.png, /uploads/default/original/2X/6/67a8100e33e070430b0696386abfe334a5312196.png 1.5x, /uploads/default/original/2X/6/67a8100e33e070430b0696386abfe334a5312196.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/67a8100e33e070430b0696386abfe334a5312196_2_10x10.png"></a></div><p></p>
<p>Recently we came across some firmware samples from D-Link routers that we were unable to unpack properly. Luckily we got our hands on an older, cheaper but similar device (DIR882) that we were able to analyze more closely. The goal is to find a way to mitigate the firmware encryption that was put in place to prevent tampering and static analysis. This series highlights the results and necessary steps to write a custom decryption routine that actually works for a bunch of other models as well but more about that later on. First let’s take a look at the problem.</p>
<h3>Table of Contents</h3>
<ul>
<li><a href="https://0x00sec.org#heading--the-problem">The Problem</a></li>
<li><a href="https://0x00sec.org#heading--the-attempt">The Attempt</a></li>
<li>
<a href="https://0x00sec.org#heading--the-solution">The Solution</a>
<ul>
<li><a href="https://0x00sec.org#heading--binary-recon">Binary Reconnaissence</a></li>
</ul>
</li>
<li><a href="https://0x00sec.org#heading--inter-sum">Intermediate Summary</a></li>
<li>
<a href="https://0x00sec.org#heading--mips-primer">Primer on MIPS32 disassembly</a>
<ul>
<li><a href="https://0x00sec.org#heading--mips-regs">Registers</a></li>
<li><a href="https://0x00sec.org#heading--mips-common">Common Operations</a></li>
</ul>
</li>
<li><a href="https://0x00sec.org#heading--refs">References</a></li>
</ul>
<hr>
<h2 id="heading--the-problem">The Problem: </h2>
<p>The latest D-Link 3060 firmware (as of time of writing) can be downloaded from <a href="https://support.dlink.com/productinfo.aspx?m=DIR-3060-US">here</a>. I’ll be examining <em>v1.02B03</em>, which was released on 10/22/19. A brief initial analysis shows the following:</p>
<pre><code class="lang-auto">&gt; md5sum DIR-3060_RevA_Firmware111B01.bin
86e3f7baebf4178920c767611ec2ba50  DIR3060A1_FW102B03.bin

&gt; file DIR-3060_RevA_Firmware111B01.bin
DIR3060A1_FW102B03.bin: data

&gt; binwalk DIR-3060_RevA_Firmware111B01.bin

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------

&gt; hd -n 128 DIR-3060_RevA_Firmware111B01.bin
00000000  53 48 52 53 01 13 1f 9e  01 13 1f a0 67 c6 69 73  |SHRS........g.is|
00000010  51 ff 4a ec 29 cd ba ab  f2 fb e3 46 2e 97 e7 b1  |Q.J.)......F....|
00000020  56 90 b9 16 f8 0c 77 b8  bf 13 17 46 7b e3 c5 9c  |V.....w....F{...|
00000030  39 b5 59 6b 75 8d b8 b0  a3 1d 28 84 33 13 65 04  |9.Yku.....(.3.e.|
00000040  61 de 2d 56 6f 38 d7 eb  43 9d d9 10 eb 38 20 88  |a.-Vo8..C....8 .|
00000050  1f 21 0e 41 88 ff ee aa  85 46 0e ee d7 f6 23 04  |.!.A.....F....#.|
00000060  fa 29 db 31 9c 5f 55 68  12 2e 32 c3 14 5c 0a 53  |.).1._Uh..2..\.S|
00000070  ed 18 24 d0 a6 59 c0 de  1c f3 8b 67 1d e6 31 36  |..$..Y.....g..16|
00000080
</code></pre>
<p>So all we got from the file command is that we have some form of (binary) data file at hand, which is not very useful. Our goto choice for initial recon: binwalk is also unable to identify any file sections within the firmware image, noteven any false positives. Lastly the hex dump of the first 128 bytes shows seemingly random data right from offset 0x0. All of these are indicators of an encrypted image, which an entropy analysis can confirm:</p>
<pre><code class="lang-auto">&gt; binwalk -E DIR-3060_RevA_Firmware111B01.bin

DECIMAL       HEXADECIMAL     ENTROPY
--------------------------------------------------------------------------------
0             0x0             Rising entropy edge (0.978280)
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/efea4f73701711a5db4d8ef33c8d39ccbf4c4846.png" alt="init_Entropy" data-base62-sha1="yeo7D2bEvDgC3oVC2PNAxL77JwW" width="" height=""></p>
<p>There’s not a single drop in the entropy curve leaving no room for us to extract any kind of information about the target…</p>
<h2 id="heading--the-attempt">The Attempt: </h2>
<p>As we were reluctant to buy the <a href="https://www.dlink.com/en/products/dir-3060-exo-ac3000-smart-mesh-wi-fi-router">D-Link DIR 3060</a> for around ~$200 we checked similar models from D-Link that were on the cheaper side with the goal to find at least one alternative that deploys the same encryption scheme. In the end we came across the <a href="https://www.dlink.com/en/products/dir-882-exo-ac2600-mu-mimo-wi-fi-router">D-Link DIR 882</a>, which was considerable cheaper.</p>
<p>On a side note, even when we weren’t able to find a similar encryption scheme looking at different firmware headers could have provided some hints on what their goto mechanic to <em>‘secure’</em> their firmware looks like.</p>
<p>As we stumbled upon the DIR 882, we checked the firmware v1.30B10 that was released on 02/20/20 and it shows the same behavior as the one from the big brother the DIR3060, including the constant entropy of nearly 1. One thing that the invested reader might notice is the same 4-byte sequence at the start “SHRS”. We will come to that one later.</p>
<pre><code class="lang-auto">&gt; md5sum DIR_882_FW120B06.BIN
89a80526d68842531fe29170cbd596c3  DIR_882_FW120B06.BIN

&gt; file DIR_882_FW120B06.BIN
DIR_882_FW120B06.BIN: data

&gt; binwalk DIR_882_FW120B06.BIN

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------

&gt; hd -n 128 DIR_882_FW120B06.BIN
00000000  53 48 52 53 00 d1 d9 a6  00 d1 d9 b0 67 c6 69 73  |SHRS........g.is|
00000010  51 ff 4a ec 29 cd ba ab  f2 fb e3 46 fd a7 4d 06  |Q.J.)......F..M.|
00000020  a4 66 e6 ad bf c4 9d 13  f3 f7 d1 12 98 6b 2a 35  |.f...........k*5|
00000030  1d 0e 90 85 b7 83 f7 4d  3a 2a 25 5a b8 13 0c fb  |.......M:*%Z....|
00000040  2a 17 7a b2 99 04 60 66  eb c2 58 98 82 74 08 e3  |*.z...`f..X..t..|
00000050  54 1e e2 51 44 42 e8 d6  8e 46 6e 2c 16 57 d3 0b  |T..QDB...Fn,.W..|
00000060  07 d7 7c 9e 11 ec 72 1d  fb 87 a2 5b 18 ec 53 82  |..|...r....[..S.|
00000070  85 b9 84 39 b6 b4 dd 85  de f0 28 3d 36 0e be aa  |...9......(=6...|
00000080
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6aa035d6fddfcea00b291058dc04ebeda99328d7.png" alt="dir882_entropy" data-base62-sha1="fdfRnddfZeblJAgBO6ix7y2TQUf" width="" height=""></p>
<p>Another thing this firmware confirms for us is that the same crypto scheme is still used in early 2020.</p>
<h2 id="heading--the-solution">The Solution: </h2>
<p>Once we acquired the DIR882 we were able to enter a serial console on the device and look around the file systems for any clues and candidates that handles the en-/decryption of firmware updates (Attaching to the UART console is out of scope for this article and not particular interesting as it involves no ‘hardware hacking’ besides attaching 4 cables…) We quickly were able to identify a suitable candidate:</p>
<pre><code class="lang-auto">&gt; file imgdecrypt
imgdecrypt: ELF 32-bit LSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), dynamically linked, interpreter /lib/ld-, stripped

&gt; md5sum imgdecrypt
a5474af860606f035e4b84bd31fc17a1  imgdecrypt
</code></pre>
<p>As we were just interested in this particular binary we dumped it the cruelest way possible:</p>
<pre><code class="lang-auto">&gt; base64 &lt; imgdecrypt
</code></pre>
<p>After copying the output to our local machine and converting the base64 back to binary we can start taking a closer look!</p>
<h3 id="heading--binary-recon">Binary Reconnaissance: </h3>
<p>We have already seen above that we’re dealing with a 32-bit ELF binary for MIPS, which is dynamically linked (as expected) and stripped. Let’s see what good old <code>strings</code> can do for us here:</p>
<pre><code class="lang-auto">&gt; strings -n 10 imgdecrypt | uniq
/lib/ld-uClibc.so.0
[...]
SHA512_Init
SHA512_Update
SHA512_Final
RSA_verify
AES_set_encrypt_key
AES_cbc_encrypt
AES_set_decrypt_key
PEM_write_RSAPublicKey
OPENSSL_add_all_algorithms_noconf
PEM_read_RSAPublicKey
PEM_read_RSAPrivateKey
RSA_generate_key
EVP_aes_256_cbc
PEM_write_RSAPrivateKey
decrypt_firmare
encrypt_firmare
[...]
libcrypto.so.1.0.0
[...]
no image matic found
check SHA512 post failed
check SHA512 before failed %d %d
check SHA512 vendor failed
static const char *pubkey_n = "%s";
static const char *pubkey_e = "%s";
Read RSA private key failed, maybe the key password is incorrect
/etc_ro/public.pem
%s &lt;sourceFile&gt;
/tmp/.firmware.orig
0123456789ABCDEF
%s sourceFile destFile
[...]
</code></pre>
<p>Sweet! There is still a lot of useful stuff in there. I just removed the garbage lines indicated by the “[…]”. Most note-worthy are the following things:</p>
<ul>
<li>Uses uClibc and libcrypto</li>
<li>Calculates/Checks SHA512 hash digests</li>
<li>Uses AES_CBC mode to en-/decrypt things</li>
<li>Has an RSA certificate check with the certificate path pinned to /etc_ro/public.pem</li>
<li>The RSA private key is protected by a password</li>
<li>/tmp/.firmware.orig could be a hint towards where things get temporarily decrypted to</li>
<li>General usage of imgdecrypt binary</li>
</ul>
<h2 id="heading--inter-sum">Intermediate Summary: </h2>
<p>So far we already learned multiple interesting things that should help us further down the road!</p>
<ol>
<li>D-Link probably re-uses the same encryption scheme across multiple devices.</li>
<li>These devices are based on the MIPS32 architecture</li>
<li>(Access to a UART serial console on the DIR 882 is doable without a problem)</li>
<li>Linked against uClibc and libcrypto<br>
4.1 Potential usage of AES, RSA, and SHA512 routines</li>
<li>Binary seems to be responsible for both en- and decryption</li>
<li>There is a public certificate</li>
<li>The usage of imgdecrypt seems to be ./imgdecrypt myInFile</li>
<li>Usage of a /tmp/ path for storing results?</li>
</ol>
<p>Next up we will dive into the static analysis of the <code>imgdecrypt</code> binary to understand how firmware updates are controlled! But before that for those of you who feel a bit rusty/are new to MIPS32 assembly language here is a short primer on it.</p>
<h2 id="heading--mips-primer">Primer on MIPS32 disassembly: </h2>
<p>Most of you are most likely familiar with x86/x86_64 disassembly so here are a few general rules on how MIPS does things and how its different from the x86 world. First there are two calling conventions (O32 vs N32/N64). I’ll be discussing the O32 one as it seems to be the most common one around. Discussing all of these in depths would be out of scope for this article!</p>
<h3 id="heading--mips-regs">Registers</h3>
<p>In MIPS32 there are 32 registers you can use. The O32 calling convention defines them as follows:</p>
<pre><code class="lang-auto">+---------+-----------+------------------------------------------------+
|   Name  |   Number  |                  Usage                         |
+----------------------------------------------------------------------+
|  $zero  |  $0       |  Is always 0, writes to it are discarded.      |
+----------------------------------------------------------------------+
|  $at    |  $1       |  Assembler temporary register (pseudo instr.)  |
+----------------------------------------------------------------------+
| $v0─$v1 |  $2─$3    |  Function returns/expression evaluation        |
+----------------------------------------------------------------------+
| $a0─$a3 |  $4─$7    |  Function arguments, remaining are in stack    |
+----------------------------------------------------------------------+
| $t0─$t7 |  $8─$15   |  Temporary registers                           |
+----------------------------------------------------------------------+
| $s0─$s7 |  $16─$23  |  Saved temporary registers                     |
+----------------------------------------------------------------------+
| $t8─$t9 |  $24─$25  |  Temporary registers                           |
+----------------------------------------------------------------------+
| $k0─$k1 |  $26─$27  |  Reserved for kernel                           |
+----------------------------------------------------------------------+
|  $gp    |  $28      |  Global pointer                                |
+----------------------------------------------------------------------+
|  $sp    |  $29      |  Stack pointer                                 |
+----------------------------------------------------------------------+
|  $fp    |  $30      |  Frame pointer                                 |
+----------------------------------------------------------------------+
|  $ra    |  $31      |  Return address                                |
+---------+-----------+------------------------------------------------+
</code></pre>
<p>The most important things to remember are:</p>
<ul>
<li>First four function arguments are moved into <code>$a0 - $a3</code> while the remaining are placed on top of the stack</li>
<li>Function returns are placed in <code>$v0</code> and eventually in <code>$v1</code> when there is a second return value</li>
<li>Return addresses is stored in the <code>$ra</code> register when a function call is executed via jump and link (JAL) or jump and link register (JALR)</li>
<li>
<code>$sX</code> registers are preserved across procedure calls (subroutine can use them but has to restore them before returning)</li>
<li>
<code>$gp</code> points to the middle of the 64k block of memory in the static data segment</li>
<li>
<code>$sp</code> points to the last location of the stack</li>
<li>Distinction between <em>leaf</em> vs <em>nonleaf</em> subroutines:
<ul>
<li>Leaf: Do not call any other subroutines and do not use any memory space on the stack. As a result they don’t build up a stack frame (and hence dont need to change <code>$sp</code>)</li>
<li>Leaf with data: Same as leaf but they require stack space, e.g.: for local variables. They will push a stack frame but can omit stack frame sections they do not need</li>
<li>Nonleaf: Those will call other subroutines. These one will most likely have a full fledged stack frame</li>
</ul>
</li>
<li>On Linux with PIC <code>$t9</code> is supposed to contain the address of the called function</li>
</ul>
<pre><code class="lang-auto">              +                 +-------------------+  +-+
              |                 |                   |    |
              |                 +-------------------+    |
              |                 |                   |    |   Previous
              |                 +-------------------+    +-&gt; Stack
              |                 |                   |    |   Frame
              |                 +-------------------+    |
              |                 |                   |    |
              |                 +-------------------+  +-+
              |                 |  local data x─1   |  +-+
              |                 +-------------------+    |
              |                 |                   |    |
              |                 +-------------------+    |
              |                 |  local data 0     |    |
              |                 +-------------------+    |
              |                 |  empty            |    |
    Stack     |                 +-------------------+    |
    Growth    |                 |  return value     |    |
    Direction |                 +-------------------+    |
              |                 |  saved reg k─1    |    |
              |                 +-------------------+    |   Current
              |                 |                   |    +-&gt; Stack
              |                 +-------------------+    |   Frame
              |                 |  saved reg 0      |    |
              |                 +-------------------+    |
              |                 |  arg n─1          |    |
              |                 +-------------------+    |
              |                 |                   |    |
              |                 +-------------------+    |
              |                 |  arg 4            |    |
              |                 +-------------------+    |
              |                 |  arg 3            |    |
              |                 +-------------------+    |
              |                 |  arg 2            |    |
              |                 +-------------------+    |
              |                 |  arg 1            |    |
              |                 +-------------------+    |
              |                 |  arg 0            |    |
              v                 +-------------------+  +-+
                                          |
                                          |
                                          v

</code></pre>
<h3 id="heading--mips-common">Common Operations </h3>
<h3></h3>
<p>There are a bunch of very common operations and if you’re already familiar with other assembly languages you’ll catch on quickly. Here are a selected few to give you a head start for part 2 of this series:</p>
<pre><code class="lang-auto">+------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
|  Mnemonic        |  Full name                                         |  Syntax                 |  Operation                                               |
+------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
|  ADD             |  Add (with overflow)                               |  add $a, $b, $c         |  $a = $b + $c                                            |
+---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  ADDI        |  Add immediate (with overflow)                     |  addi $a, $b, imm       |  $a = $b + imm                                           |
    +--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  ADDIU       |  Add immediate unsigned (no overflow)              |  addiu $a, $b, imm      |  see ADDI                                                |
    +--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  ADDU        |  Add unsigned (no overflow)                        |  addu $a, $b, $c        |  see ADD                                                 |
+---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
|  AND*            |  Bitwise and                                       |  and $a, $b, $c         |  $a = $b &amp; $c                                            |
+------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
|  B**             |  Branch to offset unconditionally                  |  b offset               |  goto offset                                             |
+---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  BEQ         |  Branch on equal                                   |  beq $a, $b, offset     |  if $a == $t goto offset                                 |
    +---+----------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
        |  BEQZ    |  Branch on equal to zero                           |  beqz $a, offset        |  if $a == 0 goto offset                                  |
    +---+----------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  BGEZ        |  Branch on greater than or equal to zero           |  bgez $a, offset        |  if $a &gt;= 0 goto offset                                  |
    +---+----------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
        |  BGEZAL  |  Branch on greater than or equal to zero and link  |  bgezal $a, offset      |  if $a &gt;= 0: $ra = PC+8 and goto offset                  |
    +---+----------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  BAL         |  Branch and link                                   |  bal offset             |  $ra=PC+8 and goto offset                                |
    +--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  BNE         |   Branch on not equal                              |  bne $a, $b, offset     |  if $a != $b: goto offset                                |
+---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
|  DIV(U)          |  Divide (unsigned)                                 |  div $a, $b             |  $LO = $s/$t, $HI = $s%$t (LO/HI are special registers)  |
+------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
|  J**             |  Jump                                              |  j target               |  PC=target                                               |
+---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  JR          |  Jump register                                     |  jr target              |  PC=$register                                            |
    +--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  JALR        |  Jump and link register                            |  jalr target            |  $ra=PC+8, PC=$register                                  |
+---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
|  L(B/W)          |   Load (byte/word)                                 |  l(b/w) $a, offset($b)  |  $a = memory[$b + offset]                                |
+---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  LWL         |  Load word left                                    |  lwl $a, offset(base)   |                                                          |
    +--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  LWR         |  Load word right                                   |  lwr $a, offset(base)   |                                                          |
+---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
|  OR*             |  Bitewise or                                       |  or $a, $b, $c          |  $a = $b|$c                                              |
+------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
|  S(B/W)          |  Store (byte/word)                                 |  s(w/b) $a, offset($b)  |  memory[$b + offset] = $a                                |
+------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
|  SLL**           |  Shift left logical                                |  sll $a, $b, h          |  $a = $b &lt;&lt; h                                            |
+------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
|  SRL**           |  Shift right logical                               |   srl $a, $b, h         |  $a = $b &gt;&gt; h                                            |
+------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
| SYSCALL          |  System call                                       |  syscall                |  PC+=4                                                   |
+------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
|  XOR*            |  Bitwise exclusive or                              |  xor $a, $b, $c         |  $a = $b^$c                                              |
+------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
</code></pre>
<p><em>Note</em>: Those who do not explicitly state a change in PC can be assumed to have PC+=4 upon execution.<br>
<em>Note1</em>: Those marked with an asterisk (*) also have at least one immediate version.<br>
<em>Note2</em>: Those marked with a double asterisk (**) have a multitude of other variants!<br>
<em>Note4</em>: The <code>ADD</code> variants only have <code>SUB(U)</code> as a counterpart!<br>
<em>Note5</em>: The <code>DIV</code> variants have a <code>MULT(U)</code> counterpart.<br>
<em>Note6</em>: The general difference between <code>j</code> and <code>b</code> instructions is that branching uses PC-relative displacements, whereas jumps use absolute addresses. This is rather important when you consider PIC.</p>
<p>Okay now that I lost all of you we’ll end it here with the initial somewhat dry recon phase. However, it is a necessary evil to learn more about our target. Finally, keep in mind that the above MIPS32 assembly table is only a superset of all available instructions. However, even if you are not familiar with MIPS assembly the table above should be enough to follow along in part 2!<br>
See you in part 2 where we will deep dive into the <code>imgdecrypt</code> binary in IDA :).</p>
<p><s>Stay tuned… Part 2 will be linked here once its available.</s></p>
<h2>&gt;&gt; <a href="https://0x00sec.org/t/breaking-the-d-link-dir3060-firmware-encryption-static-analysis-of-the-decryption-routine-part-2-1">Part 2 is available as of now!</a>
</h2>
<h2 id="heading--refs">References </h2>
<ul>
<li><a href="https://s3-eu-west-1.amazonaws.com/downloads-mips/documents/MD00086-2B-MIPS32BIS-AFP-6.06.pdf">MIPS® Architecture for Programmers Volume II-A: The MIPS32® Instruction Set Manual</a></li>
<li><a href="https://s3-eu-west-1.amazonaws.com/downloads-mips/documents/MD00565-2B-MIPS32-QRC-01.01.pdf">MIPS32® Instruction Set Quick Reference</a></li>
<li><a href="http://www.mrc.uidaho.edu/mrc/people/jff/digital/MIPSir.html">MIPS Instruction Reference</a></li>
<li><a href="https://minnie.tuhs.org/CompArch/Resources/mips_quick_tutorial.html">MIPS Architecture and Assembly Language Overview</a></li>
</ul>
            <p><small>11 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/breaking-the-d-link-dir3060-firmware-encryption-recon-part-1/21943">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/breaking-the-d-link-dir3060-firmware-encryption-recon-part-1/21943</link>
          <pubDate>Fri, 26 Jun 2020 06:29:32 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-21943</guid>
          <source url="https://0x00sec.org/t/breaking-the-d-link-dir3060-firmware-encryption-recon-part-1/21943.rss">Breaking the D-Link DIR3060 Firmware Encryption - Recon - Part 1</source>
        </item>
        <item>
          <title>How do you decode this?</title>
          <dc:creator><![CDATA[romzhke]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>Hello, community.</p>
<p>I’ve been playing with some educational traffic captures from malware-traffic-analysis, and i wanted to get a bit dipper than just analyze pcap itself and answer training questions. I’ve exported some file samples used during the attack and need some help to recover the kill chain.<br>
So <a href="https://pastebin.com/bN9mGqq7" rel="nofollow noopener">here</a> is the contents of interest.</p>
<p>Entropy analysis shows it is not encrypted (falls into “regular English text” range), so i presume its is some JS script. And the data itself kinda seems to be some variation of “kid’s secret language”. But anyway i could not figure out who to crack such thing. Need advice on what is the general approach to such cases?</p>
            <p><small>5 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/how-do-you-decode-this/21932">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/how-do-you-decode-this/21932</link>
          <pubDate>Thu, 25 Jun 2020 10:55:01 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-21932</guid>
          <source url="https://0x00sec.org/t/how-do-you-decode-this/21932.rss">How do you decode this?</source>
        </item>
        <item>
          <title>[ReverseMe] Recursion</title>
          <dc:creator><![CDATA[GnikDroy]]></dc:creator>
          <category>Challenges</category>
          <description><![CDATA[
            <h1>Goal</h1>
<p>Get the flag which is in the form of <code>REVERSE{...}</code></p>
<h1>Rules</h1>
<p>No rules. Everything is allowed.</p>
<h1>Author assigned difficulty</h1>
<p>None.</p>
<h1>Community assigned difficulty</h1>
<p><a href="https://0x00sec.org/t/reverseme-recursion/21802/1">Click to view the poll.</a></p>
<p>Best of luck! <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<h1>Executable</h1>
<pre><code>f0VMRgIBAQAAAAAAAAAAAAMAPgABAAAAQBEAAAAAAABAAAAAAAAAAEAxAAAAAAAAAAAAAEAAOAAN
AEAAHQAcAAYAAAAEAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAA2AIAAAAAAADYAgAAAAAAAAgA
AAAAAAAAAwAAAAQAAAAYAwAAAAAAABgDAAAAAAAAGAMAAAAAAAAcAAAAAAAAABwAAAAAAAAAAQAA
AAAAAAABAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMgHAAAAAAAAyAcAAAAAAAAAEAAA
AAAAAAEAAAAFAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAA1QQAAAAAAADVBAAAAAAAAAAQAAAA
AAAAAQAAAAQAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAQDQAAAAAAABANAAAAAAAAABAAAAAA
AAABAAAABgAAAIAtAAAAAAAAgD0AAAAAAACAPQAAAAAAAJACAAAAAAAAmAIAAAAAAAAAEAAAAAAA
AAIAAAAGAAAAkC0AAAAAAACQPQAAAAAAAJA9AAAAAAAA8AEAAAAAAADwAQAAAAAAAAgAAAAAAAAA
BAAAAAQAAAA4AwAAAAAAADgDAAAAAAAAOAMAAAAAAAAgAAAAAAAAACAAAAAAAAAACAAAAAAAAAAE
AAAABAAAAFgDAAAAAAAAWAMAAAAAAABYAwAAAAAAAEQAAAAAAAAARAAAAAAAAAAEAAAAAAAAAFPl
dGQEAAAAOAMAAAAAAAA4AwAAAAAAADgDAAAAAAAAIAAAAAAAAAAgAAAAAAAAAAgAAAAAAAAAUOV0
ZAQAAAC4KwAAAAAAALgrAAAAAAAAuCsAAAAAAABEAAAAAAAAAEQAAAAAAAAABAAAAAAAAABR5XRk
BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAFLldGQE
AAAAgC0AAAAAAACAPQAAAAAAAIA9AAAAAAAAgAIAAAAAAACAAgAAAAAAAAEAAAAAAAAAL2xpYjY0
L2xkLWxpbnV4LXg4Ni02NC5zby4yAAAAAAAEAAAAEAAAAAUAAABHTlUAAgAAwAQAAAADAAAAAAAA
AAQAAAAUAAAAAwAAAEdOVQCSJZX5oSYUqp1zI9+6jS/MiiKregQAAAAQAAAAAQAAAEdOVQAAAAAA
AwAAAAIAAAAAAAAAAAAAAAIAAAANAAAAAQAAAAYAAAAAAIEAAAAAAA0AAAAAAAAA0WXObQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhAAAAEgAAAAAAAAAAAAAAAAAAAAAAAACKAAAAIAAAAAAA
AAAAAAAAAAAAAAAAAAALAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEgAAAAAAAAAAAAAAAAAA
AAAAAAAwAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAApAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAA1AAAA
EgAAAAAAAAAAAAAAAAAAAAAAAABXAAAAEgAAAAAAAAAAAAAAAAAAAAAAAACmAAAAIAAAAAAAAAAA
AAAAAAAAAAAAAAA6AAAAEgAAAAAAAAAAAAAAAAAAAAAAAABBAAAAEgAAAAAAAAAAAAAAAAAAAAAA
AAC1AAAAIAAAAAAAAAAAAAAAAAAAAAAAAABIAAAAIgAAAAAAAAAAAAAAAAAAAAAAAAAAbGliYy5z
by42AHB1dHMAX19zdGFja19jaGtfZmFpbABwdXRjaGFyAHByaW50ZgBtbWFwAHJlYWQAbWVtY3B5
AG11bm1hcABfX2N4YV9maW5hbGl6ZQBfX2xpYmNfc3RhcnRfbWFpbgBHTElCQ18yLjE0AEdMSUJD
XzIuNABHTElCQ18yLjIuNQBfSVRNX2RlcmVnaXN0ZXJUTUNsb25lVGFibGUAX19nbW9uX3N0YXJ0
X18AX0lUTV9yZWdpc3RlclRNQ2xvbmVUYWJsZQAAAAACAAAAAgADAAIAAgACAAIAAAAEAAIAAAAC
AAAAAAABAAMAAQAAABAAAAAAAAAAlJGWBgAABABpAAAAEAAAABRpaQ0AAAMAdAAAABAAAAB1GmkJ
AAACAH4AAAAAAAAAgD0AAAAAAAAIAAAAAAAAACASAAAAAAAAiD0AAAAAAAAIAAAAAAAAAOARAAAA
AAAACEAAAAAAAAAIAAAAAAAAAAhAAAAAAAAA2D8AAAAAAAAGAAAAAgAAAAAAAAAAAAAA4D8AAAAA
AAAGAAAACAAAAAAAAAAAAAAA6D8AAAAAAAAGAAAACQAAAAAAAAAAAAAA8D8AAAAAAAAGAAAADAAA
AAAAAAAAAAAA+D8AAAAAAAAGAAAADQAAAAAAAAAAAAAAmD8AAAAAAAAHAAAAAQAAAAAAAAAAAAAA
oD8AAAAAAAAHAAAAAwAAAAAAAAAAAAAAqD8AAAAAAAAHAAAABAAAAAAAAAAAAAAAsD8AAAAAAAAH
AAAABQAAAAAAAAAAAAAAuD8AAAAAAAAHAAAABgAAAAAAAAAAAAAAwD8AAAAAAAAHAAAABwAAAAAA
AAAAAAAAyD8AAAAAAAAHAAAACgAAAAAAAAAAAAAA0D8AAAAAAAAHAAAACwAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPMPHvpIg+wI
SIsF2S8AAEiFwHQC/9BIg8QIwwAAAAAA/zViLwAA8v8lYy8AAA8fAPMPHvpoAAAAAPLp4f///5Dz
Dx76aAEAAADy6dH///+Q8w8e+mgCAAAA8unB////kPMPHvpoAwAAAPLpsf///5DzDx76aAQAAADy
6aH///+Q8w8e+mgFAAAA8umR////kPMPHvpoBgAAAPLpgf///5DzDx76aAcAAADy6XH///+Q8w8e
+vL/JT0vAAAPH0QAAPMPHvry/yXNLgAADx9EAADzDx768v8lxS4AAA8fRAAA8w8e+vL/Jb0uAAAP
H0QAAPMPHvry/yW1LgAADx9EAADzDx768v8lrS4AAA8fRAAA8w8e+vL/JaUuAAAPH0QAAPMPHvry
/yWdLgAADx9EAADzDx768v8llS4AAA8fRAAA8w8e+jHtSYnRXkiJ4kiD5PBQVEyNBWYDAABIjQ3v
AgAASI09wQAAAP8Vci4AAPSQSI09mS4AAEiNBZIuAABIOfh0FUiLBU4uAABIhcB0Cf/gDx+AAAAA
AMMPH4AAAAAASI09aS4AAEiNNWIuAABIKf5IifBIwe4/SMH4A0gBxkjR/nQUSIsFJS4AAEiFwHQI
/+BmDx9EAADDDx+AAAAAAPMPHvqAPSUuAAAAdStVSIM9Ai4AAABIieV0DEiLPQYuAADoqf7//+hk
////xgX9LQAAAV3DDx8Aww8fgAAAAADzDx766Xf////zDx76VUiJ5UFUU0iD7DBkSIsEJSgAAABI
iUXoMcBIieBIicO4UAAAAEiYSIPoAUiJRdC4UAAAAEiYSYnAQbkAAAAAuFAAAABImEiJxr8AAAAA
uFAAAABImLoQAAAASIPqAUgB0LkQAAAAugAAAABI9/FIa8AQSInCSIHiAPD//0iJ4Ugp0UiJykg5
1HQSSIHsABAAAEiDjCT4DwAAAOvpSInCgeL/DwAASCnUSInCgeL/DwAASIXSdBAl/w8AAEiD6AhI
AeBIgwgASIngSIPAAEiJRdhIjT0HGAAA6Mb9//+4UAAAAEhj0EiLRdhIica/AAAAAOjt/f//iUXI
uFAAAAA5Rch0GUiNPeoXAADolP3//7j/////SInc6egAAABBuQAAAABBuP////+5IgAAALoHAAAA
vuQKAAC/AAAAAOiC/f//SIlF4EiDfeD/D4SsAAAASItF4LrkCgAASI01kwwAAEiJx+iL/f//SItF
2EmJxEiLVeC4AAAAAP/SiUXMg33MAXVXSI09iRcAALgAAAAA6D/9///HRcQAAAAA6ydIi1XYi0XE
SJgPtgQCD7bAicZIjT2EFwAAuAAAAADoE/3//4NFxAG4UAAAADlFxHzPv30AAADou/z//+sRSI09
YhcAALgAAAAA6Oj8//9Ii0XgvuQKAABIicfoB/3//0iJ3LgAAAAASItd6GRIMxwlKAAAAHQF6Jv8
//9IjWXwW0FcXcNmkPMPHvpBV0yNPSMpAABBVkmJ1kFVSYn1QVRBifxVSI0tFCkAAFNMKf1Ig+wI
6H/7//9Iwf0DdB8x2w8fgAAAAABMifJMie5EiedB/xTfSIPDAUg53XXqSIPECFtdQVxBXUFeQV/D
ZmYuDx+EAAAAAADzDx76wwAAAPMPHvpIg+wISIPECMMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAIAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAEiLNXwAAABBuiIAAAC4CQAAALoHAAAAScfA/////0gx/00xyQ8FSDHJ
SDH/SI0VWAAAAIoUCoDyn4gUCIn+SMHuGEjB5whAANdIMfdI/8FIOw0tAAAAddRBizQkOf4PlMN1
CkmDxARQ/9CIw1hIicdIizUMAAAAuAsAAAAPBUgPtsPDWQoAAAAAAADSrlbWWF9gYGBg165gJZif
n58nlp+fn94lvZ+fn9cUqsCfn5+QmteuVteuYNcSisefn58Vi5UfbSkXi5cWYddecYfXXniX359I
165o12Be16SSsp+fn+pL3hSru6ZhkAtc6pXP1hxbm2BPF1zH1xZYJ5Sfn5/XFKqYn5+fkJrXkClc
XFGWn5+fn5+fZBjgYO7p1tbW1mGiHFspKSmRICkpKZMuKSkpaJMLKSkpYRjWJixhGNZhGOBhpDxx
KSkpoz0jqdsloT0hoNdh6McxYejOIWkp/mEY3mHW6GESJAQpKSlc/WiiHQ0Q1ya96lwjYKrtLXnW
+aHqcWGg7pEiKSkpYaIcLikpKSYsYSaf6upqICkpKSkpKW0U2mzi5dra2tqdLCUlJW2uEEglJSVk
nwclJSWfIiUlJWgU7CogbRTsbRTabagwfSUlJa8xL6XXZ60xLazbbeTLPW3kwi1lJfJtFNJt2uRt
HigIJSUlUPFkrhEBHNsqseZQL3VspuEh2vWt5n1trOJtrhApJSUlnS4lJSUqIG0qk+bmnS0lJSUl
JSUuoKeYmJiYL1aY3WBnZ2cv7FIKZ2dnKlauJt1FZ2dn325nZ2doYi9WmC9Wri/qcj9nZ2ftc23n
lS3vc2/umS+miX8vpoBvJ2ewL1aQL5imL1xqSmdnZxKzJuxTQ16ZaPOkEm03LuSjY5i376Q/L+6g
L+xSa2dnZ99sZ2dnaGIvaNGkpEpvZ2dnZ2dnZRzSYBzklyotLS1lphhcLS0tZOrt0tLS0pUkLS0t
bJcPLS0tIihlHNJlHORloDh1LS0tpzknrd/npTklpNNl7MM1ZezKJW0t+mUc2mXS7GUWIAAtLS1Y
+WymGQkU0yK57lgnfWSu6SnS/aXudWWk6pUmLS0tZaYYKi0tLSIoZSKb7u6PKi0tLS0tLaZdxefn
569s0pHn5+euICcYGBgYr9YYqtYuX+7n5+dd4Ofn5+jir9YYr9Yur2ryv+fn523z7WcVoW/z724Z
ryYJ/68mAO+n5zCv1hCvGCav3OrK5+fnkjOmbNPD3hnocySS7a5kI+O3GDdvJL+vbiCvbNLr5+fn
X+zn5+fo4q/oUSQk8ODn5+fn5+cbpqGhoehmYV5eXl4ZqKGhoeyQaOkqlMmhoaHpkF7gG4OhoaGu
pOmQXumQaOkstPmhoaErtashUw8ptakoX+lgT7npYEap4aF26ZBW6V5g6ZqsjKGhodR14CqVhZhf
rjVi1Kvx6CJlpV5xKWL56Shm6SqUraGhoRmqoaGhrqTprhdiYi2noaGhoaGhQj7GTrUtDw8PR4Q6
fA8PD7UIDw8PRsjP8PDw8Ec+8LcGDw8PAApHPsZHPvBHghpXDw8PhRsFj/3PhxsHhvFHzuEXR87o
B08P2Ec++Efwzkc0AiIPDw96206EOys28QCbzHoFRozLC1/w34fMV0eGyEeEOgMPDw+3BA8PDwAK
RwC5zMwOCQ8PDw8PD4dE+rPPz8+GCA8wMDAwd8bPz8+Ode3Pz891yM/Pz4L+Bof+MMDKh/4wh/4G
h0Lal8/Pz0XbxU89Gkfbx0Yxhw4h14cOKMePzxiH/jiHMA6H9MLiz8/PuhuORPvr9jHAWwy6xYZM
C8ufMB9HDJeHRgh3xM/Pz4dE+sjPz8/AyofAeQwMucrPz8/Pz89SK+VSkS9jGhoaohMaGhpboDga
GhpT3drl5eXlVyvToB0aGhoVH1Ir5VIr01KXD0IaGhqQDhCa6LCSDhKT5FLb9AJS2/0SWhrNUivt
UuXbUiEXNxoaGm/OW5EuPiPkFY7ZbxBKU5neHuXKktlCUpPdUpEvFhoaGqIRGhoaFR9SFazZ2fEe
GhoaGhoaCrewsLD9gXn4gU8IubCwsPl3cE9PT0/xCpKwsLD4O4XvsLCwv7X4gU/4gXn4PaXosLCw
OqS6MEJbOKS4OU74cV6o+HFXuPCwZ/iBR/hPcfiLvZ2wsLDFZPE7hJSJTr8kc8W6+TN0tOBPYDhz
6Pg5dwi7sLCw+DuFt7CwsL+1+L8Gc3PQtLCwsLCwsBZqkuFcW1tbGuF5W1tb41JbW1sSnJukpKSk
E2qkE9BuBFtbW1ReE2qSE2qkE9ZOA1tbW9FPUdupFtNPU9KlE5q1QxOavFMbW4wTaqwTpJoTYFZ2
W1tbLo8a0G9/YqVUz5guUQsS2J9fpIvTmAMT0pwT0G5XW1tb41BbW1tUXhNU7ZiYjlhbW1tbW1tf
0dbp6enpV6w0FhYWrh8WFhZenSN8FhYWWyffrBEWFhZeJ+kZE14n6V4n316bA04WFhacAhyW5DWe
Ah6f6F7X+A5e1/EeVhbBXifhXunXXi0bOxYWFmPCV50iMi/oGYLVYxxGX5XSEunGntVOXp/RXp0j
GhYWFq4dFhYWGRNeGaDV1VwVFhYWFhYWjTw1NTV9vgBCNTU1fPL1ysrKynSPFzU1NY8yNTU1eAT8
fQTKOjB9BPx9BMp9uCBtNTU1vyE/tcfDvSE9vMt99NstffTSPXU14n0Ewn3K9H0OOBg1NTVA4XS+
AREMyzqh9kA/ZXy28THK5b32bX288n2+ADk1NTWNPjU1NTowfTqD9vaKNzU1NTU1NXnEw8PDe8rD
w8OKBAM8PDw8jvIKi0j2q8PDw4J54cPDw4vyPMzGi/IKi/I8i07Wm8PDw0nXyUMx6EvXy0o9iwIt
24sCJMuDwxSL8jSLPAKL+M7uw8PDtheCSPfn+j3MVwC2yZOKQAfHPBNLAJuLSgSLSPbPw8PDe8jD
w8PMxovMdQAA98HDw8PDw8NQ4ejo6KDZF6Bj3Zzo6OipUsro6OhS7+jo6KXZIaEvKBcXFxfn7aDZ
F6DZIaBl/bDo6Ohi/OJoGgFg/OBhFqApBvCgKQ/gqOg/oNkfoBcpoNPlxejo6J08qWPczNEW53wr
neK4oWss7Bc4YCuwoGEvUOPo6OigY93v6Ojo5+2g514rK0Hp6Ojo6OjoSYo0fQEBAUkw/rsGAQEB
QLsjAQEBuQgBAQFIxsH+/v7+TDDIDgRJMMhJMP5JjBRZAQEBixULgfOSiRUJiP9JwO8ZScDmCUEB
1kkw9kn+wEk6DCwBAQF01UCKNSU4/w6VwnQLSILFBVH+0YnCWUmIxkmKNA0BAQG5CgEBAQ4ESQ63
wsIfAAEBAQEBASqbkpKS36Nb2qNt0yiwkpKS2hmn+ZKSkiiVkpKS21VSbW1tbZ2X2qNt2qNb2h+H
ypKSkhiGmBJgpBqGmhts2lN8itpTdZrSkkXao2XabVPaqZ+/kpKS50bTGaa2q2ydBlHnmMLbEVaW
bUIaUcraG1XaGaeekpKSKpmSkpKdl9qdJFFRAZKSkpKSkpLplW0eo6SkpOwvkdCkpKTlHoakpKTs
lVvtY2RbW1tbHK2kpKSroeyVbeyVW+wpsfykpKQusK4kVowssKwtWuxlSrzsZUOs5KRz7JVT7Ftl
7J+piaSkpNFw5S+QgJ1aqzBn0a707SdgoFt0LGf87C1j7C+RqKSkpByvpKSkq6HsqxJnZ6ykpKSk
pKSkxEtMjYyMjE8AAAAAUAAAAEVudGVyIHRoZSBwYXNzd29yZDogAEluc3VmZmljaWVudCBwYXNz
Y29kZSBsZW5ndGgAAABDb25ncmF0dWxhdGlvbnMhIFRoZSBmbGFnIGlzOiBSRVZFUlNFewAlMDJ4
AAAAAABTb3JyeS4gV3JvbmcgZmxhZy4gVGhlIHBhc3N3b3JkIG1pZ2h0IG5vdCBiZSBwcmludGFi
bGUgY2hhcmFjdGVycy4gOikAAAABGwM7RAAAAAcAAABo5P//eAAAAPjk//+gAAAACOX//7gAAACI
5f//YAAAAHHm///QAAAAmOj///gAAAAI6f//QAEAAAAAAAAUAAAAAAAAAAF6UgABeBABGwwHCJAB
AAAUAAAAHAAAACDl//8vAAAAAEQHEAAAAAAkAAAANAAAAOjj//+QAAAAAA4QRg4YSg8LdwiAAD8a
OiozJCIAAAAAFAAAAFwAAABQ5P//EAAAAAAAAAAAAAAAFAAAAHQAAABI5P//gAAAAAAAAAAAAAAA
JAAAAIwAAACZ5f//JQIAAABFDhCGAkMNBkeMA4MEAxUCDAcIAAAAAEQAAAC0AAAAmOf//2UAAAAA
Rg4QjwJJDhiOA0UOII0ERQ4ojAVEDjCGBkgOOIMHRw5Abg44QQ4wQQ4oQg4gQg4YQg4QQg4IABAA
AAD8AAAAwOf//wUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAgEgAAAAAAAOARAAAAAAAAAQAAAAAAAAABAAAAAAAAAAwAAAAA
AAAAABAAAAAAAAANAAAAAAAAAMgUAAAAAAAAGQAAAAAAAACAPQAAAAAAABsAAAAAAAAACAAAAAAA
AAAaAAAAAAAAAIg9AAAAAAAAHAAAAAAAAAAIAAAAAAAAAPX+/28AAAAAoAMAAAAAAAAFAAAAAAAA
ABgFAAAAAAAABgAAAAAAAADIAwAAAAAAAAoAAAAAAAAAzwAAAAAAAAALAAAAAAAAABgAAAAAAAAA
FQAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAgD8AAAAAAAACAAAAAAAAAMAAAAAAAAAAFAAAAAAAAAAH
AAAAAAAAABcAAAAAAAAACAcAAAAAAAAHAAAAAAAAAEgGAAAAAAAACAAAAAAAAADAAAAAAAAAAAkA
AAAAAAAAGAAAAAAAAAAeAAAAAAAAAAgAAAAAAAAA+///bwAAAAABAAAIAAAAAP7//28AAAAACAYA
AAAAAAD///9vAAAAAAEAAAAAAAAA8P//bwAAAADoBQAAAAAAAPn//28AAAAAAwAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAJA9AAAAAAAAAAAAAAAAAAAAAAAAAAAAADAQAAAAAAAAQBAAAAAA
AABQEAAAAAAAAGAQAAAAAAAAcBAAAAAAAACAEAAAAAAAAJAQAAAAAAAAoBAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIQAAAAAAAAEdDQzogKFVi
dW50dSA5LjMuMC0xMHVidW50dTIpIDkuMy4wAAAuc2hzdHJ0YWIALmludGVycAAubm90ZS5nbnUu
cHJvcGVydHkALm5vdGUuZ251LmJ1aWxkLWlkAC5ub3RlLkFCSS10YWcALmdudS5oYXNoAC5keW5z
eW0ALmR5bnN0cgAuZ251LnZlcnNpb24ALmdudS52ZXJzaW9uX3IALnJlbGEuZHluAC5yZWxhLnBs
dAAuaW5pdAAucGx0LmdvdAAucGx0LnNlYwAudGV4dAAuZmluaQAucm9kYXRhAC5laF9mcmFtZV9o
ZHIALmVoX2ZyYW1lAC5pbml0X2FycmF5AC5maW5pX2FycmF5AC5keW5hbWljAC5kYXRhAC5ic3MA
LmNvbW1lbnQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAACwAAAAEAAAACAAAAAAAAABgDAAAAAAAAGAMAAAAAAAAcAAAAAAAA
AAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAABMAAAAHAAAAAgAAAAAAAAA4AwAAAAAAADgDAAAAAAAA
IAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAmAAAABwAAAAIAAAAAAAAAWAMAAAAAAABY
AwAAAAAAACQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAOQAAAAcAAAACAAAAAAAAAHwD
AAAAAAAAfAMAAAAAAAAgAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAEcAAAD2//9vAgAA
AAAAAACgAwAAAAAAAKADAAAAAAAAJAAAAAAAAAAGAAAAAAAAAAgAAAAAAAAAAAAAAAAAAABRAAAA
CwAAAAIAAAAAAAAAyAMAAAAAAADIAwAAAAAAAFABAAAAAAAABwAAAAEAAAAIAAAAAAAAABgAAAAA
AAAAWQAAAAMAAAACAAAAAAAAABgFAAAAAAAAGAUAAAAAAADPAAAAAAAAAAAAAAAAAAAAAQAAAAAA
AAAAAAAAAAAAAGEAAAD///9vAgAAAAAAAADoBQAAAAAAAOgFAAAAAAAAHAAAAAAAAAAGAAAAAAAA
AAIAAAAAAAAAAgAAAAAAAABuAAAA/v//bwIAAAAAAAAACAYAAAAAAAAIBgAAAAAAAEAAAAAAAAAA
BwAAAAEAAAAIAAAAAAAAAAAAAAAAAAAAfQAAAAQAAAACAAAAAAAAAEgGAAAAAAAASAYAAAAAAADA
AAAAAAAAAAYAAAAAAAAACAAAAAAAAAAYAAAAAAAAAIcAAAAEAAAAQgAAAAAAAAAIBwAAAAAAAAgH
AAAAAAAAwAAAAAAAAAAGAAAAGAAAAAgAAAAAAAAAGAAAAAAAAACRAAAAAQAAAAYAAAAAAAAAABAA
AAAAAAAAEAAAAAAAABsAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAjAAAAAEAAAAGAAAA
AAAAACAQAAAAAAAAIBAAAAAAAACQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAJcAAAAB
AAAABgAAAAAAAACwEAAAAAAAALAQAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAAA
AACgAAAAAQAAAAYAAAAAAAAAwBAAAAAAAADAEAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAQAAAAAAAA
ABAAAAAAAAAAqQAAAAEAAAAGAAAAAAAAAEARAAAAAAAAQBEAAAAAAACFAwAAAAAAAAAAAAAAAAAA
EAAAAAAAAAAAAAAAAAAAAK8AAAABAAAABgAAAAAAAADIFAAAAAAAAMgUAAAAAAAADQAAAAAAAAAA
AAAAAAAAAAQAAAAAAAAAAAAAAAAAAAC1AAAAAQAAAAIAAAAAAAAAACAAAAAAAAAAIAAAAAAAALYL
AAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAvQAAAAEAAAACAAAAAAAAALgrAAAAAAAAuCsA
AAAAAABEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAMsAAAABAAAAAgAAAAAAAAAALAAA
AAAAAAAsAAAAAAAAEAEAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAADVAAAADgAAAAMAAAAA
AAAAgD0AAAAAAACALQAAAAAAAAgAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAA4QAAAA8A
AAADAAAAAAAAAIg9AAAAAAAAiC0AAAAAAAAIAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAIAAAAAAAA
AO0AAAAGAAAAAwAAAAAAAACQPQAAAAAAAJAtAAAAAAAA8AEAAAAAAAAHAAAAAAAAAAgAAAAAAAAA
EAAAAAAAAACbAAAAAQAAAAMAAAAAAAAAgD8AAAAAAACALwAAAAAAAIAAAAAAAAAAAAAAAAAAAAAI
AAAAAAAAAAgAAAAAAAAA9gAAAAEAAAADAAAAAAAAAABAAAAAAAAAADAAAAAAAAAQAAAAAAAAAAAA
AAAAAAAACAAAAAAAAAAAAAAAAAAAAPwAAAAIAAAAAwAAAAAAAAAQQAAAAAAAABAwAAAAAAAACAAA
AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAQAAAQAAADAAAAAAAAAAAAAAAAAAAAAQMAAA
AAAAACQAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAMAAAAAAAAAAAAAAAAAAAAA
AAAANDAAAAAAAAAKAQAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAA==
</code></pre>
<h3>Build</h3>
<pre><code class="lang-auto">cat rev.elf.b64 | base64 -d  &gt; rev.elf &amp;&amp; chmod +x rev.elf
</code></pre>
            <p><small>8 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/reverseme-recursion/21802">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/reverseme-recursion/21802</link>
          <pubDate>Tue, 16 Jun 2020 07:59:13 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-21802</guid>
          <source url="https://0x00sec.org/t/reverseme-recursion/21802.rss">[ReverseMe] Recursion</source>
        </item>
        <item>
          <title>CSCG 2020 reversing intro challenges writeup (easy level)</title>
          <dc:creator><![CDATA[jeff]]></dc:creator>
          <category>Challenges</category>
          <description><![CDATA[
            <p>Hello everyone, I hope all of you are safe out there, before we start I have to mention that I don’t have a good  experience in this field yet, so if you spot any mistakes or think of better methods of doing this, please let me know in the comments</p>
<p><a href="https://earth.2020.cscg.de/" rel="noopener nofollow ugc">CSCG</a> 2020 is a German Cyber Security Challenge Qualification <a href="https://www.youtube.com/watch?v=8ev9ZX9J45A" rel="noopener nofollow ugc">CTF</a> which has some entry level challenges in couple fields, today we will be looking at the first 3 reverse engineering challenges</p>
<p>This write-up is targeting beginners like my self, so I will be demonstrating some easy ways to solve each challenge</p>
<h2>PREREQUISITE</h2>
<p>In order to understand this write-up right, it’s recommended to have a basic idea about the following subjects<br>
• how C language code is structured<br>
• assembly language knowledge and debugging<br>
• XOR<br>
• some familiarity with Linux</p>
<h2>first challenge</h2>
<p>so let’s begin. After setting up an account in the CTF website, downloading the first challenge and unzipping it, you get two files, flag and rev1, the latter appears to be executable<br>
now we need to get an idea about what those files might be, <code>file</code> is a great utility to get couple information about files, <code>file *</code> gives the following result :</p>
<pre><code class="lang-auto">flag: ASCII text
rev1: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=c26549fbcc84a4199635818d97bd48b69eea5fb2, not stripped
</code></pre>
<p>this might seem a bit overwhelming but in an entry level challenge we’re only interested in 2 peaces of information, <code>ELF 64-bit executable</code>, and <code>not stripped</code>, meaning rev1 is an executable that runs under Linux 64 bits systems, and contains some strings that will help us debugging/reversing it if we had to</p>
<p>the first file is obviously just a text file with the content : CSCG{real_flag_is_on_the_server}, as it was mentioned on the website that we should send the password we get from the executable to a server to get the actual flag</p>
<p><strong>So how would we approach this ?</strong></p>
<p>Trying to execute rev1 gives the following result<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/8/86b6f0d39147f4dc40eb6340c6aca914398dd406.png" alt="1-asking_for_password" data-base62-sha1="jdJVDVKslG2wOqtF8M3ZVitOpVk" width="283" height="85"></p>
<p>“password is not password” <strong>hmm okay</strong></p>
<p>“asking for a password” means that rev1 takes your input and compare it with some string that may or may not be hard-coded in the binary</p>
<p><code>strings</code> is a great command to get all hard-coded strings in an executable</p>
<p><code>strings rev1</code> gives the following result :</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/5/5682b24d44081ae6d21512598d11a35fabacd739.png" data-download-href="/uploads/short-url/clj4RmXFVL9ieE9kWLw88kz6SIV.png?dl=1" title="2-strings" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5682b24d44081ae6d21512598d11a35fabacd739_2_690x473.png" alt="2-strings" data-base62-sha1="clj4RmXFVL9ieE9kWLw88kz6SIV" width="690" height="473" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5682b24d44081ae6d21512598d11a35fabacd739_2_690x473.png, https://0x00sec.s3.amazonaws.com/original/2X/5/5682b24d44081ae6d21512598d11a35fabacd739.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/5/5682b24d44081ae6d21512598d11a35fabacd739.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5682b24d44081ae6d21512598d11a35fabacd739_2_10x10.png"></a></div><p></p>
<p>We can ignore most of it, but if you look close enough, you’ll see “give me your password” which is what we got earlier, and right underneath it, this weird string “ y0u_5h3ll_p455”, (from the Lord of the Rings series <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:">) let’s try throwing that string at rev1 and …</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/933b2f4343a9c1b77cef8c3203aeebd268a2b6f7.png" alt="3-voila" data-base62-sha1="l0sZpWreMYgHuvgXAE9dOeAdYNh" width="489" height="103"></p>
<p>now sending that string to the server gives the following result</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a6cb4e74d5a0a1c3faf318acdcbdfc2ac6f8c4d2.png" alt="4-nc" data-base62-sha1="nNwQdppeclHjeUAJ9QCgsUIVhvk" width="426" height="108"></p>
<p>Voilà! Easy 40 points earned without trying to debug anything</p>
<p>if you don’t like working with terminals that much, there is this nice tool called <a href="https://binary.ninja/" rel="noopener nofollow ugc"> <strong>Binary</strong> <strong>Ninja</strong> </a>, which is great when it comes to static analysis, running it with rev1 gives us a nice graphical interface explains the executable branches (this where some assembly knowledge comes handy) there are also 3 ways of displaying code, from pure assembly to human-friendy-code, however I won’t be using that as I prefer reading the former <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>after jumping to main() (which the tools detect the address of, automatically, thanks to the binary not being stripped), we get this view<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/a/a753bf99221a3e3bc37f66dd4e0d70cbb486a986.png" data-download-href="/uploads/short-url/nSfaoPpKnMt1WG2Z0C8F06R2Pfo.png?dl=1" title="5-binaryninja" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a753bf99221a3e3bc37f66dd4e0d70cbb486a986_2_475x500.png" alt="5-binaryninja" data-base62-sha1="nSfaoPpKnMt1WG2Z0C8F06R2Pfo" width="475" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a753bf99221a3e3bc37f66dd4e0d70cbb486a986_2_475x500.png, https://0x00sec.s3.amazonaws.com/original/2X/a/a753bf99221a3e3bc37f66dd4e0d70cbb486a986.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/a/a753bf99221a3e3bc37f66dd4e0d70cbb486a986.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a753bf99221a3e3bc37f66dd4e0d70cbb486a986_2_10x10.png"></a></div><p></p>
<p>even if you have no idea about what’s going on, you can easily spot the password, and strcmp() which is used to compare it with your input</p>
<p>there also the command <code>ltrace</code> which you can use to trace system calls, after executing it with rev1,and throwing a random string at it,  you can see it being compared just like in the following picture</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/1/14b6833bb36873459c17bf79b2d16730ad5cf622.png" data-download-href="/uploads/short-url/2XeA12f6LC6qGBuVCOL4S17vUXw.png?dl=1" title="6-trace" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/1/14b6833bb36873459c17bf79b2d16730ad5cf622_2_690x183.png" alt="6-trace" data-base62-sha1="2XeA12f6LC6qGBuVCOL4S17vUXw" width="690" height="183" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/1/14b6833bb36873459c17bf79b2d16730ad5cf622_2_690x183.png, https://0x00sec.s3.amazonaws.com/original/2X/1/14b6833bb36873459c17bf79b2d16730ad5cf622.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/1/14b6833bb36873459c17bf79b2d16730ad5cf622.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/14b6833bb36873459c17bf79b2d16730ad5cf622_2_10x10.png"></a></div><p></p>
<p><strong>note</strong> : we see the same string in both read() and strcmp() because rev1 compares our input with the password directly without changing it<br>
and those where couple way of how you can approach this binary</p>
<h2>second challenge</h2>
<p>the second challenges, gives the same files, same prompt, unless there is no hard-coded string this time, try running <code>strings</code> and you won’t see any password</p>
<p>running it with binary ninja, we get the following view<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/f/f472ecc4492972195d53800009535c5184d7dfda.png" data-download-href="/uploads/short-url/ySuJ99CFYu6Q16ryDoDX4VV7rrI.png?dl=1" title="7-second_challenge_binaryninja" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f472ecc4492972195d53800009535c5184d7dfda_2_690x340.png" alt="7-second_challenge_binaryninja" data-base62-sha1="ySuJ99CFYu6Q16ryDoDX4VV7rrI" width="690" height="340" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f472ecc4492972195d53800009535c5184d7dfda_2_690x340.png, https://0x00sec.s3.amazonaws.com/original/2X/f/f472ecc4492972195d53800009535c5184d7dfda.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/f/f472ecc4492972195d53800009535c5184d7dfda.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f472ecc4492972195d53800009535c5184d7dfda_2_10x10.png"></a></div><p></p>
<p>hmm, this time rev2 is not comparing our input string directly, but rather using a loop (denoted by the green and the blue lines) to change it byte by byte (subtracting 0x77 from each byte to be specific hence the <code>sub eax, 0x77</code>), and that explains why we couldn’t find any useful strings with the <code>strings</code> command, because all the bytes are non-ascii values</p>
<p>now we know that each byte is decreased by 0x77 and compared to something else, so to retrieve the password we should know that “something else” and increase each byte of it by 0x77</p>
<p>The easiest way to figure it out would be using <code>ltrace</code> command again, which shows us the following<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/a/a3492ad5e52accae247aa6caacd6dbee7f2f35b0.png" data-download-href="/uploads/short-url/niuAs6yYNyTFRp6uNouhO7xvayk.png?dl=1" title="8-ltrace_again" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a3492ad5e52accae247aa6caacd6dbee7f2f35b0_2_690x144.png" alt="8-ltrace_again" data-base62-sha1="niuAs6yYNyTFRp6uNouhO7xvayk" width="690" height="144" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a3492ad5e52accae247aa6caacd6dbee7f2f35b0_2_690x144.png, https://0x00sec.s3.amazonaws.com/original/2X/a/a3492ad5e52accae247aa6caacd6dbee7f2f35b0.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/a/a3492ad5e52accae247aa6caacd6dbee7f2f35b0.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a3492ad5e52accae247aa6caacd6dbee7f2f35b0_2_10x10.png"></a></div><p></p>
<p>now we see some weird characters which are just an encoding to represent non ascii characters I believe, we need to add 0x77 to each byte to get the password, for that I wrote something like this</p>
<pre><code class="lang-auto">#include&lt;stdio.h&gt;

int main(void){
        unsigned int i;
        int pass[] = {'\374', '\375', '\352', '\300', '\272', '\354', '\350', '\375', '\373', '\275', '\367', '\276', '\357', '\271', '\373', '\366', '\275', '\300', '\272', '\271', '\367', '\350', '\362', '\375', '\350', '\362', '\374'};

        for(i = 0 ; i &lt; sizeof(pass) / sizeof(pass[0]) ; i++)
                putchar(pass[i] + 0x77);
        puts("");
        return 0;
}

</code></pre>
<p>running this programs gives : “sta71c_tr4n5f0rm4710n_it_is” which I’m positive that it’s another movie’s quote that I don’t know about</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/77833afe2a302442307100f0f5551e9bde82ab48.png" alt="9-second_password" data-base62-sha1="h3fYGUIAEulMnXXwmg4AEnd4toQ" width="374" height="41"></p>
<p>submitting it to the server we get</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/cce5bdb3587f3a1b1d4f033c5ac06408c8a8a8c0.png" alt="10-second_challenge_solved" data-base62-sha1="teBCyk2r5TEFkwgc2Uv3kU6CweI" width="690" height="88"><br>
another not-so-hard 47 points !</p>
<h2>Third challenge</h2>
<p>this is very similar to the second one, except this time we get a password with <code>file</code> and <code>ltrace</code>, just one little problem, it’s not the same!</p>
<p><code>string</code>’s output :<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/1/13a2190db8e9ac0ce495d175d45dbb247842bc38.png" alt="12-strings_output" data-base62-sha1="2NGmD72Tvo60tgzrlyFcBk1at5e" width="348" height="86"></p>
<p><code>ltrace</code>’s output :<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/6/62f485d1a62086f85e96f0007c3646dc23187e79.png" data-download-href="/uploads/short-url/e7oG8wCAvveeBUNfD457YNBEYWd.png?dl=1" title="13-ltrace_output" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/62f485d1a62086f85e96f0007c3646dc23187e79_2_690x173.png" alt="13-ltrace_output" data-base62-sha1="e7oG8wCAvveeBUNfD457YNBEYWd" width="690" height="173" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/6/62f485d1a62086f85e96f0007c3646dc23187e79_2_690x173.png, https://0x00sec.s3.amazonaws.com/original/2X/6/62f485d1a62086f85e96f0007c3646dc23187e79.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/6/62f485d1a62086f85e96f0007c3646dc23187e79.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/62f485d1a62086f85e96f0007c3646dc23187e79_2_10x10.png"></a></div><p></p>
<p><code>strings</code> gives us 2 lines, when <code>ltrace</code> show one long line only, with more characters than <code>strings</code>'s output, well … this is because strings by definition are a sequence of bytes followed by and null byte (‘\0’ byte), we can see that our password in second picture contains 3 of them, so <code>strings</code> sees that password as 4 separate strings, as for why the second one has more character than the first, <code>strings</code> only shows strings above a certain length, so “17” and “5J” are ignored because they’re too short (are you tired of the word “strings” yet ? <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>Now we know the password, now we just have to figure out exactly what input we should throw at rev3 so it can match that (remember that rev3 modifies our input before comparing it)</p>
<p>and for that we need to take a look at the assembly code, opening binaryninja, we get this view</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/a/ab8ec8ccc019729f10010ecbb108ba26e1f95c0e.png" data-download-href="/uploads/short-url/otFyOCVTkz6faFLtlKj2ZNx8yPY.png?dl=1" title="11-xor" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/a/ab8ec8ccc019729f10010ecbb108ba26e1f95c0e_2_690x352.png" alt="11-xor" data-base62-sha1="otFyOCVTkz6faFLtlKj2ZNx8yPY" width="690" height="352" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/a/ab8ec8ccc019729f10010ecbb108ba26e1f95c0e_2_690x352.png, https://0x00sec.s3.amazonaws.com/original/2X/a/ab8ec8ccc019729f10010ecbb108ba26e1f95c0e.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/a/ab8ec8ccc019729f10010ecbb108ba26e1f95c0e.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/a/ab8ec8ccc019729f10010ecbb108ba26e1f95c0e_2_10x10.png"></a></div><p></p>
<p>we’re only focusing on the left box cause that’s where the magic happens, if you can’t figure out what’s happening there, I advise you to use the other human-friendly displaying mode I talked about earlier, or just learn some assembly if you’re interested in this field <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>basically the codes loops over each byte of the input, xor it with (its index in the input string + 0xa) add subtract two from it</p>
<p>so if your input is “hey”</p>
<p>the code will do the following</p>
<pre><code class="lang-auto">pass[0] = (‘h’ ^ (0 + 0xa) ) -2

pass[1] = (‘e’ ^ (1 + 0xa) ) - 2
</code></pre>
<p>so to reverse this algorithm we should add 2 to each byte of the password we got earlier, then Xor it with (it’s index + 0xa)</p>
<p>and for that I wrote this code</p>
<pre><code class="lang-auto">
#include&lt;stdio.h&gt;
#include&lt;string.h&gt;

int main(void){
        char ptr[] = {'l', 'p', '`', '7', 'a', '&lt;', 'q', 'L', 'w', '\036', 'k', 'H', 'o', 'p', 't', '(', 'f', '-', 'f', '*', ',', 'o','}', 'V', '\017', '\025', 'J'};
        unsigned int i = 0;

        for(i = 0;i &lt; sizeof(ptr)/sizeof(ptr[0]); i++)
                printf("%c", (ptr[i] + 2) ^ (0xa + i));
        puts("");
        return 0;
}
</code></pre>
<p>After running this code we get the following flag : “dyn4m1c_k3y_gen3r4t10n_y34h” which all I can say about is “lol!”</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d88419aedc2631cf8691e316a67611574347fbfb.png" alt="14-last_flag" data-base62-sha1="uTo9KuGl469QxOiOxqMInDW52j1" width="385" height="46"></p>
<p>One last thing we need to do …<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/7/7333aac3f2c7454b9a59194a16f227af4226f39a.png" data-download-href="/uploads/short-url/gr7BwAfvkeeQDF6oiVB87pd9q0a.png?dl=1" title="15-last_hecking_flag" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/7/7333aac3f2c7454b9a59194a16f227af4226f39a_2_690x92.png" alt="15-last_hecking_flag" data-base62-sha1="gr7BwAfvkeeQDF6oiVB87pd9q0a" width="690" height="92" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/7/7333aac3f2c7454b9a59194a16f227af4226f39a_2_690x92.png, https://0x00sec.s3.amazonaws.com/original/2X/7/7333aac3f2c7454b9a59194a16f227af4226f39a.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/7/7333aac3f2c7454b9a59194a16f227af4226f39a.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/7/7333aac3f2c7454b9a59194a16f227af4226f39a_2_10x10.png"></a></div><p></p>
<p>And there is our last laughable flag that gets us another 51 points !<br>
I really hopped I could explain this so even beginners can understand and not find it boring</p>
<p>as this my first write up, I would like to thank <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> and <a class="mention" href="https://0x00sec.org/u/leeky">@leeky</a> so much for putting up with my most-of-the-time-stupid questions, as well as other people who put me on track, like yeni, ayoub and hammadi</p>
<p>if anything unclear or fuzzy don’t hesitate to ask about it, Jeff’s out</p>
            <p><small>7 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096</link>
          <pubDate>Sat, 28 Mar 2020 02:10:56 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20096</guid>
          <source url="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096.rss">CSCG 2020 reversing intro challenges writeup (easy level)</source>
        </item>
        <item>
          <title>DOOM95 | Making an aimbot</title>
          <dc:creator><![CDATA[exploit]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>In the name of Allah, the most beneficent, the most merciful.</p>
<hr>
<h4>Introduction</h4>
<p>“.الأفكار تغير طابعك، أما الأفعال فتغير واقعك”</p>
<p>I’ve played lots of classic games as a child, one that I particularly enjoyed was called <strong>DOOM</strong>, its concept was overly simple:</p>
<ul>
<li>Kill monsters that spawn all over the map. (%)</li>
<li>Collect items. (%)</li>
<li>Unlock each level’s secret.</li>
</ul>
<p>But as the saying goes: <em>“There is beauty in simplicity”</em>.</p>
<p>Those days are <em>long gone</em>, and although everything that surrounds me changed, <strong>I didn’t</strong>.<br>
I guess few things never <em>vanish</em>.<br>
<em>Note: I might do things wrong, but it’s all for fun anyway <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">!</em></p>
<h4>And so it all began</h4>
<p>The shareware is available to download from <em><a href="https://www.moddb.com/games/doom/downloads/doom-shareware-doom95" rel="nofollow noopener">ModDB</a></em>.<br>
<span alt="image" data-base62-sha1="7j0MDqOHb2Nsnsb42LmdNuLS17F" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<br>
I started off by playing the game for a while, it reminded me of the implemented movement system.<br>
The <em>left/right</em> arrow-keys allow <strong>screen rotation</strong>.<br>
While <em>up/down</em> keys <em>render</em> <strong>forward and backward moves</strong> possible.<br>
<span alt="DView" data-base62-sha1="3PNeSHzBXOAQg09rlbj7rv021Do" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<br>
In order to look for the Image’s entry point, I used WinDBG and attached to <em>Doom95.exe</em> process.<br>
<span alt="image" data-base62-sha1="yTlUaPKf7kPprCH0Pjuce8rXTjT" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<br>
As you may have noticed, I’m running on a <em>64-bit machine</em>.<br>
But the executable is 32-bit:<br>
<span alt="image" data-base62-sha1="iZmM9UauQRmuyryplYkIQdlCO1r" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<strong>IMAGE_DOS_HEADER</strong>’s <em>lfanew</em> holds the <em>Offset</em> to the <em>PE signature</em>.<br>
–<br>
<span alt="image" data-base62-sha1="eiBJvu8hJBqKPPEEcewOHMURkc" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The field next to <strong>“PE\x00\x00”</strong> is called <em>‘Machine’</em>, a <strong>USHORT</strong> indicating <em>its type</em>.<br>
so  I proceeded to switch to <em>x86 mode</em> using <strong>wow64exts</strong>.<br>
<br>
<span alt="image" data-base62-sha1="bjbqvwKzJe1Kb10Hizv8gtolwAl" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="oI1VBC85yqbd4V0ZocwlNRfcA29" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>I then looked-up <em>“Doom”</em> within <em>loaded modules</em>, and used <em>$iment</em> to <em>extract</em> the <em>specified module</em>’s <strong>entry point</strong>.</p>
<pre><code class="lang-bash">0:011:x86&gt; lm m Doom*
start             end                 module name
00400000 00690000   Doom95   C (no symbols)           
10000000 10020000   Doomlnch C (export symbols)       Doomlnch.dll
0:011:x86&gt; ? $iment(00400000)
Evaluate expression: 4474072 = 004444d8
</code></pre>
<p>Jumping to that address in <em>IDA</em> reveals the function of interest: <strong>_WinMain</strong>.<br>
<span alt="image" data-base62-sha1="zgpgeIeL6ORX8Rgdi3Qj2GBNYGm" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The search for parts with beneficial information started.</p>
<pre><code class="lang-auto">push    eax               ; nHeight
add     edx, ebx
push    edx               ; nWidth
push    0                 ; Y
push    0                 ; X
push    0x80CA0000        ; dwStyle
push    offset WindowName ; "Doom 95"
push    offset ClassName  ; "Doom95Class"
push    0x40000           ; dwExStyle
call    cs:CreateWindowExA
</code></pre>
<p>The <strong>static</strong> <em>WindowName</em> used by the call will result in our <em>fast retrieval</em> of <em>Doom’s PID</em>.<br>
<span alt="image" data-base62-sha1="kVqrn4xhKgfldtnMi0Xb4iSb4Rp" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The combination of <strong>FindWindow()</strong> and <strong>GetWindowThreadProcessId()</strong> makes this possible.</p>
<pre><code class="lang-auto">	HWND	DoomWindow;
	DWORD	PID;
	DoomWindow = FindWindow(NULL, _T("Doom 95"));

	if (! DoomWindow)
	{
		goto out;
	}

	GetWindowThreadProcessId(DoomWindow, &amp;PID);
	printf("PID: %d\n", PID);

	out:
	return 0;
</code></pre>
<p><span alt="image" data-base62-sha1="r4UJT1Xqn3IgZ0IczfspueGXUaY" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The next thing that caught my eye in the <em>_WinMain procedure</em> were the following lines.</p>
<pre><code class="lang-auto">loc_43AF74:
mov     edi, 1
mov     eax, ds:dword_60B00C
xor     ebp, ebp
mov     ds:dword_60B450, edi
mov     ds:dword_4775CC, ebp
cmp     eax, edi
jz      short loc_43AFB8
call    cs:GetCurrentThreadId
push    eax             ; dwThreadId
mov     edx, ds:hInstance
push    edx             ; hmod
push    offset fn       ; lpfn
push    2               ; idHook
call    cs:SetWindowsHookExA
mov     ds:hhk, eax
</code></pre>
<p>The function SetWindowsHookEx installs a <strong>hook</strong>(<em>fn</em>) within the <em>current thread</em> to <em>monitor System Events</em>. This example specifically uses an idHook that equals 2, which according to <em>MSDN</em> refers to <strong>WH_KEYBOARD</strong>.<br>
<span alt="image" data-base62-sha1="ddq7X2nwVvrF2EQTW8CjRnoD8zB" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The callback function has the documented <em><a href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms644984(v%3Dvs.85)" rel="nofollow noopener">KeyboardProc</a></em> prototype. It captures the <em><a href="https://msdn.microsoft.com/en-us/library/dd375731(v=vs.85)" rel="nofollow noopener">Virtual-Key code</a></em> in <em>wParam</em>.<br>
On top of that, the <em>fn</em> function invokes <em>GetAsyncKeyState</em> to check if a <em>specific key is pressed</em> too:<br>
<span alt="image" data-base62-sha1="8cTpRvkiGeQwSna9g5J2MehIPtH" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The function that handles <em>arrow-keys</em> is <em>sub_442A90</em>.<br>
<span alt="image" data-base62-sha1="fkHxHbIhsqedtIP9Nyn6QNpvQ9G" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–</p>
<pre><code class="lang-auto">loc_439229:
mov     ebx, [esp+2Ch+v14]
mov     edx, [esp+2Ch+lParam]
mov     eax, esi
call    sub_442A90
</code></pre>
<h4>Player information</h4>
<p>Our ignorance of the structure stored within memory puts us at a disadvantage.<br>
In order to find where <em>Health is mainly stored</em>, I’ll be using <em>Cheat Engine</em> with the assumption that it is a <em>DWORD</em>(<em>4 bytes</em>): <em>“\x64\x00\x00\x00”</em>.<br>
<span alt="image" data-base62-sha1="jOn5cBjBqC8uTeBqUWpc3rhDKVi" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
I’ll then proceed to get the <em>character damaged</em>, and <em>‘Next Scan’</em> for the <em>new value</em>.<br>
We end up with <strong>5</strong> different <em>pointers</em>.<br>
<span alt="image" data-base62-sha1="hhNXPKhmsP9io4RoGThDkw28l87" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The <strong>last one</strong> is of a <em>black color</em>, meaning that it is a <em>dynamic address</em>, modifying it doesn’t result in any <strong>observable change</strong>.<br>
Others are clearly static, modifying <em>3/4</em> of them leads to <em>restoring the original value</em>, which meant that the <em>1/4</em> left is <strong>the parent</strong>, and the <em>rest just copy its value</em>.<br>
<strong>00482538</strong>: Health that appear on the screen.<br>
<strong>03682944</strong>: A promising address because it is <em>not updated with the parent</em>.<br>
<em>Health</em> is stored in <em>two different locations</em>, which means one is <em>nothing but a decoy</em>.<br>
<br>
I set the <em>first one’s value to <strong>1</strong></em>, and then got <em>attacked by a monster</em>.<br>
<span alt="image" data-base62-sha1="b7SDPdPSwcu9qK8BLMwdjl88hdj" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The result is:<br>
<span alt="image" data-base62-sha1="9tygzy6nlXGgmv2QsWEWYik4z1g" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The value that <em>appears on the screen hangs at 0</em>, and the <em>character doesn’t die</em>.<br>
While the second kept <em>decreasing on each attack</em>, meaning that it effectively held <em>the real value</em>.<br>
We need to <em>inspect the memory region</em> by selecting the value and clicking <em>CTRL+B</em>.<br>
<span alt="image" data-base62-sha1="n2LQxLywl9WNF0JQoZWVNhglWU5" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
We can change the <em>Display Type</em> from <strong>Byte hex</strong> to <strong>4 Byte hex</strong>.<br>
<span alt="image" data-base62-sha1="jS17zXcRgKCeXvP3oZZx1hIqvqG" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="bv2I6XTXgFbzoVBcKZnsSMmd8QG" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="bX3uqJ05AqeDPUGMSiLEOd4olvD" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
This is easier to work with, I <em>started searching</em> for the <strong>closest pointer</strong> in a <em>limited range</em>, and it turned out to be <strong>3682A24</strong>.<br>
<span alt="image" data-base62-sha1="29KWiJMKbPAAHAVlnRHw9fkVNJA" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
We then <em>goto address</em> to see its content:<br>
<span alt="image" data-base62-sha1="1SAx2Bo9VaO7aNnSVPiyfPHELAZ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
Notice that the <em>Object’s health is empty</em>, and that <em>the struct</em> holds a <strong>Backward and Forward link</strong> at <em>its start</em>.</p>
<h4>A spark</h4>
<p>The idea that saved me a lot of time!<br>
<em><a href="https://doomwiki.org/wiki/Doom_cheat_codes" rel="nofollow noopener">CHEAT CODES</a></em>, I was both happy and shocked to find out that they really existed!</p>
<p><em>DOOMWiki</em> includes messages that appear on detection of each message.<br>
Two commands were exceptional because of the information they manipulate.</p>
<p><span alt="image" data-base62-sha1="AswH77cRyKBwfEHnPDtLbhp4Pd5" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="2r4cv32Dx1qxUcuDO1t8yTCStfn" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>The magical keywords: <em>“ang=” and “BY REQUEST…”</em>.<br>
The first one’s usage occurs in:</p>
<pre><code class="lang-bash">loc_432776:
mov     eax, offset off_4669BC
movsx   edx, byte ptr [ebp+4]
call    sub_414E50
test    eax, eax
jz      short loc_4327D4
mov     edx, ds:dword_482A7C
lea     eax, ds:0[edx*8]
add     eax, edx
lea     eax, ds:0[eax*4]
sub     eax, edx
mov     eax, ds:dword_482518[eax*8]
mov     ebx, [eax+10h]
push    ebx
mov     ecx, [eax+0Ch]
push    ecx
mov     esi, [eax+20h]
push    esi
push    offset aAng0xXXY0xX0xX ; "ang=0x%x;x,y=(0x%x,0x%x)"
push    offset unk_5F2758
call    sprintf_
</code></pre>
<p>This is important and worthy to be added to our <em>CE Table</em>.<br>
<span alt="image" data-base62-sha1="tuu3VYDpy6AO94R9Z60WOuyzHWb" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
A struct layout is also to be concluded:<br>
<strong>@)</strong> +0x10: y<br>
<strong>@)</strong> + 0xC: x<br>
<strong>@)</strong> +0x20: angle<br>
I immediately noticed the missing <em>Z coordinate</em>.<br>
I knew it existed, I mean, there’s stairs. (Hey, don’t laugh! <img src="https://0x00sec.org/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:">)<br>
I ended up realizing that it is at <em>+0x14</em> after a few tests. (Up and down we go.)<br>
<br>
<span alt="DCoords" data-base62-sha1="yMVc9VinW9pWVKV9TId1KQMMKye" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<br>
I knew that even if the enemy is on a different altitude: The shot still hits, and so I ignored Z.<br>
X, Y and Angle on the other hand are majorly important because of <em>distance calculation</em> and <em>angle measurement</em>.<br>
The values they <em>held look weird</em>, are <em>they floats</em>?<br>
<span alt="image" data-base62-sha1="r7bMTq6GxGzE8b6FEOLRAXsLPfe" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<span alt="image" data-base62-sha1="4MqpujagAUzJBxQdAr3nBERf6Vd" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
No, doesn’t look like it. All I knew for now is that the <em>view changes upon modification</em>.</p>
<p>Moving on to the second:</p>
<pre><code class="lang-auto">loc_432533:
mov     eax, offset off_466898
movsx   edx, byte ptr [ebp+4]
call    sub_414E50
test    eax, eax
jz      short loc_43255E
mov     eax, ds:dword_5F274C
mov     dword ptr [eax+0D8h], offset aByRequest___ ; "By request..."
call    sub_420C50
jmp     loc_4326BA
</code></pre>
<p>We can see that it only passes execution to <em>sub_420C50</em>, and that’s where the magic happens.</p>
<pre><code class="lang-bash">sub_420C50 proc near
push    ebx
push    ecx
push    edx
push    esi
mov     esi, ds:dword_484CFC
cmp     esi, offset dword_484CF8
jz      short loc_420C92
loc_420C62:
cmp     dword ptr [esi+8], offset sub_4250D0
jnz     short loc_420C87
test    byte ptr [esi+6Ah], 40h
jz      short loc_420C87
cmp     dword ptr [esi+6Ch], 0
jle     short loc_420C87
mov     ecx, 2710h
mov     eax, esi
xor     ebx, ebx
xor     edx, edx
call    sub_422370
loc_420C87:
mov     esi, [esi+4]
cmp     esi, offset dword_484CF8
jnz     short loc_420C62
loc_420C92:
pop     esi
pop     edx
pop     ecx
pop     ebx
retn
sub_420C50 endp
</code></pre>
<p>We can see that it traverses a <em>list of Objects</em>, starting with <strong>[484CFC]</strong> and ending if the <em>Forward link(+4)</em> <em>equals</em> <strong>484CF8</strong>.<br>
<span alt="image" data-base62-sha1="oDUbsNrnDnTNWLGOoUwTvch2kK0" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The inclusion of <strong>Player Object</strong> in <em>the list</em> indicates that it contains <em>all available</em> <strong>Entities</strong>.<br>
The three checks there are:<br>
<em>[Entity + 0x08] == 0x4250D0<br>
[Entity + 0x6A] &amp; 0x40<br>
[Entity + 0x6C] &gt; 0</em><br>
I was curious on what the <strong>Player Object</strong> held at those <em>Offsets</em>:<br>
<span alt="image" data-base62-sha1="5gdWwwKTdVikWgBGUiWKFuGOaDx" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<strong>@)</strong> + 0x8: <em>Function pointer(Pass)</em>.<br>
<strong>@)</strong> +0x6A: <em>Byte(Error)</em>, <em>seems like IsMonster check</em>.<br>
<strong>@)</strong> +0x6C: <em>Health(Pass)</em>.</p>
<h4>A small mistake</h4>
<p>“Did anyone do this before?”, I wondered.<br>
So I searched for:</p>
<blockquote>
<p>intext:“ang=0x%x;x,y=(0x%x,0x%x)” doom</p>
</blockquote>
<p>And well, I found out that the <em>source code was available</em>. <img src="https://0x00sec.org/images/emoji/twitter/joy.png?v=9" title=":joy:" class="emoji" alt=":joy:"><br>
<span alt="image" data-base62-sha1="oXgIhN7IH09d1M4WeLdnsodp7Cx" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
At first <em>I was mad</em>, because I spent about <em>3 to 4 days to get the results previously stated</em>. But, hey! I <em>needed more information anyway</em>, and this was an <em>easy road showing up</em>.<br>
<span alt="image" data-base62-sha1="dHf644NBUps5ieBj7kW372Z1Je3" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="ybrCODwvZyaJOs2ZmxeJuPnRoRK" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="vHHSK5HzoS3EnN34GJQ1Kr7n1Gn" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
So the structure we look for is defined in <em><a href="https://github.com/historicalsource/doom/blob/master/linuxdoom-1.10/d_player.h" rel="nofollow noopener">d_player.h</a></em>, the <em>interesting element’s name</em> is <strong>mo</strong>.</p>
<pre><code class="lang-auto">//
// Extended player object info: player_t
//
typedef struct player_s
{
    mobj_t*		mo;
...
</code></pre>
<p>Its nature is <em>mobj_t</em>, declared in <em><a href="https://github.com/historicalsource/doom/blob/master/linuxdoom-1.10/p_mobj.h" rel="nofollow noopener">p_mobj.h</a></em>.</p>
<pre><code class="lang-auto">// Map Object definition.
typedef struct mobj_s
{
    // List: thinker links.
    thinker_t		thinker;

    // Info for drawing: position.
    fixed_t		x;
    fixed_t		y;
    fixed_t		z;

    // More list: links in sector (if needed)
    struct mobj_s*	snext;
    struct mobj_s*	sprev;

    //More drawing info: to determine current sprite.
    angle_t		angle;	// orientation
...
</code></pre>
<p>The size of <em><a href="https://github.com/historicalsource/doom/blob/master/linuxdoom-1.10/d_think.h" rel="nofollow noopener">thinker_t</a></em> is: <em>sizeof(PVOID) * 3</em> = 4 * 3 = <strong>12</strong>.<br>
Then comes <em>X, Y and Z</em> at <em>(0x0C, 0x10, 0x14)</em>.<br>
Two pointers <em><span class="mention">@0x18</span></em> are ignored(<em>4 * 2</em> = <strong>8</strong>).<br>
Angle is at <em>0x20</em>.</p>
<pre><code class="lang-auto">...
    int			health;

    // Movement direction, movement generation (zig-zagging).
    int			movedir;	// 0-7
    int			movecount;	// when 0, select a new dir

    // Thing being chased/attacked (or NULL),
    // also the originator for missiles.
    struct mobj_s*	target;
...
</code></pre>
<p>The target element is interesting, it supposedly holds a pointer to the <em>Map Object</em> being attacked!<br>
<em>Calculating its offset isn’t that hard</em>, because we know that <em>Health</em> is at <em>0x6C</em>.<br>
<em>FIELD_OFFSET(mobj_t, target)</em> = <em>0x6C + sizeof(int) * 3</em> = <strong>0x78</strong>.<br>
The following line in <em><a href="https://github.com/historicalsource/doom/blob/master/linuxdoom-1.10/r_local.h" rel="nofollow noopener">r_local.h</a></em> indicates that there’s a <strong>lookup table/function</strong> for <em>Angles</em>, explaining why there’s <em>weird values therein</em>.</p>
<pre><code class="lang-auto">// Binary Angles, sine/cosine/atan lookups.
#include "tables.h"
</code></pre>
<p>It’s time to see what the <em>target</em> element holds for us!<br>
<span alt="image" data-base62-sha1="ifAehZzIQSolfYLFpM5xIpX9v4R" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
Since I just started up the game, its value is <strong>NULL</strong>.<br>
<span alt="image" data-base62-sha1="3eLWzimOdQrjafIazsCqWbbGUWe" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<em>Attacking or getting attacked by a monster</em> leads to a <em>value change</em>.<br>
<span alt="image" data-base62-sha1="2xa2QmgNzxJN1N9CBFGzhy6U4Pf" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
But there is no <em>update after killing the monster, hmmm</em>.<br>
<span alt="image" data-base62-sha1="qDyCkdYcWX2bX9YzN5h0oiBWy5w" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The <strong>health</strong> is the <em>only indicator of death if it is &lt;= 0</em>.<br>
And that’s <em>not the only problem</em>:<br>
<em>Attacking a second Monster doesn’t result in any change occuring</em>.<br>
Since I want it to be <em>regularly updated</em>, I had to <em>find a way around it</em>.<br>
I restarted <em>Doom95.exe</em>, selected the <em>Pointer to Player’s Target</em> and:<br>
<span alt="image" data-base62-sha1="qVGF3JwoHwd3pkjxUw2USoMQJAF" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="i14OnO0rhb3BBhGG62hauOh1KOd" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="iP6YDDy81DU9khoKHLBpyVPDocj" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="jZYCS75mYllBnHZbdYpc7fZdiAp" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
We can now start fighting an enemy:<br>
<span alt="image" data-base62-sha1="6UVtY6H9xaKBZFCwM7tgQ8F82SV" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
This is the instruction <em>responsible for writing to the Player’s Target element</em>.<br>
Going back a little in <em>disassembly window</em>, there are some <strong>simple checks</strong>:<br>
<em>Is the Target NULL? Is it equal to the Player itself?</em><br>
<span alt="image" data-base62-sha1="pEiQiylHENAW1Ye3LSwacAVngDA" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The <em>origin of EBX register</em> is the <em>selected instruction</em>, and <em>its location is</em>: <strong>00422684</strong>.<br>
All I had to do is <em>find a location</em> where to place a <strong>JMP 422684</strong>.<br>
I ended up choosing <strong>0042264F</strong>:<br>
<span alt="image" data-base62-sha1="seTB8qbvgQ4Uc2Ocjbrfj2AVdIm" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="bY60giAgoBmezhfbuDhUaKuN1xA" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="wHbpAsyIpFyZiEnksKs1GQ41AXN" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The <em><strong>sequence of bytes</strong> turns from {0x7D, 0x1C} to {0xEB, 0x33}</em>, we aren’t <em>destroying any instructions after it</em>.<br>
Let’s now see if it <em>changes on each attack</em>:<br>
<strong>Monster <span class="hashtag">#1:</span></strong><br>
<span alt="image" data-base62-sha1="6vzKIWFaYsdmfIj1mPIkDqZboGB" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<strong>Monster <span class="hashtag">#2:</span></strong><br>
<span alt="image" data-base62-sha1="uEv2BkqbWQF1UG33FQDAxRVciZK" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<em>PERFECT!</em></p>
<h4>Last piece of the puzzle</h4>
<p>Monsters could <em>accurately aim at my character</em>.<br>
I knew a function responsible for <strong>angle measurement</strong> existed, <em>I just had to find it</em>.<br>
After a <em>few hours searching</em>, I ended up looking in <em><a href="https://github.com/historicalsource/doom/blob/master/linuxdoom-1.10/p_enemy.c" rel="nofollow noopener">p_enemy.c</a></em>;</p>
<pre><code class="lang-cpp">boolean P_CheckMeleeRange (mobj_t*	actor)
{
    mobj_t*	pl;
    fixed_t	dist;
	
    if (!actor-&gt;target)
	return false;
		
    pl = actor-&gt;target;
    dist = P_AproxDistance (pl-&gt;x-actor-&gt;x, pl-&gt;y-actor-&gt;y);

    if (dist &gt;= MELEERANGE-20*FRACUNIT+pl-&gt;info-&gt;radius)
	return false;
	
    if (! P_CheckSight (actor, actor-&gt;target) )
	return false;
							
    return true;		
}
</code></pre>
<p>A collection of interesting functions!<br>
<em>P_AproxDistance()</em><br>
<em>P_CheckSight()</em><br>
And the most <strong>promising</strong> one:<br>
<span alt="image" data-base62-sha1="vkxPq4qMs8lPbNqyrO67hLni9Uv" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<em>R_PointToAngle2()</em>, and its <em><a href="https://github.com/id-Software/DOOM/blob/master/linuxdoom-1.10/r_main.c" rel="nofollow noopener">definition</a></em> is <em>the following</em>:</p>
<pre><code class="lang-cpp">angle_t
R_PointToAngle2
( fixed_t	x1,
  fixed_t	y1,
  fixed_t	x2,
  fixed_t	y2 )
{	
    viewx = x1;
    viewy = y1;
    
    return R_PointToAngle (x2, y2);
}
</code></pre>
<p>I knew the <em>Player’s X, Y were read right before invokation</em>. I used this information to <em>trace the calls</em> and <em>watched for accesses</em>:<br>
<span alt="image" data-base62-sha1="bKuFQZadhRtHg4j4msdnZYkXKtW" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="g4RnIuu5SiJ5yVR8hcLPuG2yiKk" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
Once a <em>monster aims at us</em>, we <strong>get results</strong>:<br>
<span alt="image" data-base62-sha1="jkUWfogcaWDryCQJpGMISr9i7pn" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
I <em>started</em> with those with the <em>least hit-count at the middle</em>.<br>
<span alt="image" data-base62-sha1="pIdj6xtr2mXFjPA6lzUOLcxP0ek" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<em>The second one looks like the thing we’re looking for!</em><br>
<span alt="image" data-base62-sha1="7rpj2BhBRF00MNFJ8EPPasWLVx4" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
It prepares to call <strong>0042DB10</strong> by loading the <em>Target</em> in <em>EAX</em> and storing its <em>(X, Y) coordinates</em> in <em>EBX and ECX</em>, while <em>EAX and EDX</em> hold <em>those of the monster</em>.<br>
<em>We can deduce that it is a __fastcall.</em><br>
<strong>Disassembling</strong> the function <em>shows</em>:<br>
<span alt="image" data-base62-sha1="8KIIcQ2qpEtqA5vNpwMcRgwMGcT" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<em>Looks familiar!</em><br>
<em>It is R_PointToAngle2() @ <strong>0042DB10</strong> <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">!</em><br>
With that in <em>mind, locating this function is made easier</em>.</p>
<pre><code class="lang-cpp">//
// A_FaceTarget
//
void A_FaceTarget (mobj_t* actor)
{	
    if (!actor-&gt;target)
	return;
    
    actor-&gt;flags &amp;= ~MF_AMBUSH;
	
    actor-&gt;angle = R_PointToAngle2 (actor-&gt;x,
				    actor-&gt;y,
				    actor-&gt;target-&gt;x,
				    actor-&gt;target-&gt;y);
    
    if (actor-&gt;target-&gt;flags &amp; MF_SHADOW)
	actor-&gt;angle += (P_Random()-P_Random())&lt;&lt;21;
}
</code></pre>
<p>I’ll just use <em>IDA</em>.<br>
<span alt="image" data-base62-sha1="b4JuU96bk5LltnYyiU0nyIrw7Dz" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="wLnsf5SAqEg7kME3uvwaAZmjMGl" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="oOJliovdZUrItGnJS2vGynk9Tmf" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
Looks like it, <em>it starts by returning if Target is <strong>NULL</strong></em>, then <em>AND</em>s [<em>Monster+0x68</em>] with <strong>0xDF</strong>. What’s sad, is that <em>I was looking at it since the beginning</em> in <strong>CE</strong>, welp <img src="https://0x00sec.org/images/emoji/twitter/joy.png?v=9" title=":joy:" class="emoji" alt=":joy:">.<br>
<em>A_FaceTarget is at <strong>0041F670</strong></em>.</p>
<h4>The making</h4>
<p>All that <em>we’ve learned about the game</em> will allow us to start <em>wrapping things</em> in <em>C++</em>.<br>
Let’s create <em>ADoom.h</em>:</p>
<pre><code class="lang-auto">#ifndef __ADOOM_H__
#define __ADOOM_H__

class ADoom {
public:
	ADoom(DWORD);
	~ADoom();
private:
	HANDLE	DH;
};

#endif
</code></pre>
<p>And <em>ADoom.c</em>:</p>
<pre><code class="lang-auto">#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;stdexcept&gt;
#include &lt;tchar.h&gt;
#include &lt;Windows.h&gt;

#include "ADoom.h"

ADoom::ADoom(DWORD CPID)
{
	DH = OpenProcess(PROCESS_ALL_ACCESS, FALSE, CPID);

	if (DH != INVALID_HANDLE_VALUE)
	{
		return;
	}

	throw std::runtime_error("Can't open process!");
}

ADoom::~ADoom(){
	CloseHandle(DH);
}

int main()
{
	HWND	DoomWindow;
	DWORD	PID;

	DoomWindow = FindWindow(NULL, _T("Doom 95"));
	if (! DoomWindow) goto out;
	GetWindowThreadProcessId(DoomWindow, &amp;PID);

	try
	{
		ADoom	DAim(PID);
	} catch (const std::runtime_error &amp;err) { };

	while (1)
	{
		Sleep(1);
	}
	out:
	return 0;
}
</code></pre>
<p>I’ll create functions that <em>read(<strong>rM</strong>)/write(<strong>wM</strong>) to the process memory</em> by extending <em>both the header and source file</em>.<br>
We are going to use <em>two WINAPI calls for that purpose</em>: <strong>ReadProcessMemory()</strong> and <strong>WriteProcessMemory()</strong>.<br>
<span alt="image" data-base62-sha1="6Z2etDBlJvvpT3aVS32SPriNUJP" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span> | | | | | <span alt="image" data-base62-sha1="x0fChMctZMlRuOwwZwSDLakufvK" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–</p>
<pre><code class="lang-auto">	template&lt;typename ReadType&gt;
	ReadType rM(DWORD, DWORD);
	BOOL wM(DWORD, PVOID, SIZE_T);
</code></pre>
<p>–</p>
<pre><code class="lang-auto">template&lt;typename ReadType&gt;
ReadType ADoom::rM(DWORD RAddress, DWORD Offset)
{
	ReadType Result;
	PVOID	 External = reinterpret_cast&lt;PVOID&gt;(RAddress + Offset);

	ReadProcessMemory(DH, External, &amp;Result, sizeof(Result), NULL);
	return Result;
}

BOOL ADoom::wM(DWORD RAddress, PVOID LAddress, SIZE_T Size)
{
	BOOL	Status = FALSE;
	PVOID	External = reinterpret_cast&lt;PVOID&gt;(RAddress);

	if (WriteProcessMemory(DH, External, LAddress, Size, NULL))
	{
		Status = TRUE;
	}
	
	return Status;
}
</code></pre>
<p><em>Let’s check if Player’s Object manipulation is possible</em>:</p>
<pre><code class="lang-auto">	try
	{
		ADoom	DAim(PID);
		DWORD	Corrupt = 0x12345678, Player, PPlayer = 0x482518;

		Player = DAim.rM&lt;DWORD&gt;(PPlayer, 0);
		printf("Player Object @ %lX\n", Player);

		DAim.wM(PPlayer, &amp;Corrupt, sizeof(Corrupt));
		puts("Corrupted the Player Object.");
	} catch (const std::runtime_error &amp;err) { }
</code></pre>
<p>–<br>
<span alt="image" data-base62-sha1="ly6c7GFsj6JaDEr7Tj1ZVXLWYQC" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The <em><strong>Doom95.exe</strong> process crashes</em>, <em>success</em>.<br>
We have to <em>apply the <strong>2 byte</strong> patch and keep an eye</em> on the <strong>Player’s Target</strong> value.</p>
<pre><code class="lang-auto">	try
	{
		ADoom	DAim(PID);
		BYTE	Patch[2] = {0xEB, 0x33};
		DWORD	PAddress = 0x42264F;
		DWORD	Player, PPlayer = 0x482518;
		int		THealth;
		DWORD	OTarget = 0, Target;

		Player = DAim.rM&lt;DWORD&gt;(PPlayer, 0);
		printf("Player Object @ %lX\n", Player);

		printf("Applying Patch @ %lX\n", PAddress);
		DAim.wM(PAddress, &amp;Patch[0], sizeof(Patch));

		while (true)
		{
			Target = DAim.rM&lt;DWORD&gt;(Player, 0x78);

			// Are we currently engaging the enemy?
			if (Target != 0)
			{
				// If yes, is it already dead?
				THealth = DAim.rM&lt;int&gt;(Target, 0x6C);
				if (THealth &lt;= 0)
				{
					continue;
				}

				/*
					Uniqueness check.
				*/
				if (! OTarget || OTarget != Target)
				{
					printf("Current Target @ %lX\n", Target);
					OTarget = Target;
				}
			}
		}
	} catch (const std::runtime_error &amp;err) { }
</code></pre>
<p>–<br>
<span alt="image" data-base62-sha1="lsQqFMUPgeeNOODEyAV4SiDnZ62" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<em>So far so good, we are making progress.</em><br>
At first, I totally forgot about the <strong>Health check</strong>, and <em>it kept aiming at the dead Monster</em>.<br>
<span alt="dead" data-base62-sha1="jON6o5PLmVhEEy7vMTFJ0rOQXyJ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
It is time to use our knowledge about <em>A_FaceTarget(<strong>0041F670</strong>)</em>.<br>
It takes an <em>mobj_t *</em> argument in <strong>EAX</strong>, and <em>performs a single check</em>(<em>EAX-&gt;target != NULL</em>) before <em>calculating and storing the correct angle</em>, this is a <em>minimum of work on our side</em>.<br>
All is left to do, is creating a <strong>reliable function</strong> and <em>storing/running</em> it in the <em>remote thread</em>.</p>
<pre><code class="lang-auto">VOID _declspec(naked) Reliable(VOID)
{
	__asm {
		mov eax, 0x482518 // Load PPlayer in EAX
		mov eax, [eax]    // Load Player Object in EAX
		mov edi, 0x41F670 // Indicate the FP(A_FaceTarget)
		call edi          // Call it
		ret
	}
}
</code></pre>
<p>We can <em>compile the executable and load it up in IDA</em>.<br>
<span alt="image" data-base62-sha1="jXTC4USdmpZg5xgnBm5eZCiKXKY" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<em><strong>Hex-view</strong> is synchronized with <strong>Disassembly-view</strong>, so selecting the first ‘mov’ is all we have to do.</em><br>
<span alt="image" data-base62-sha1="g2kdHxZUqFXI7UJ9tHLlmoR7B6F" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
That is <em>our function</em>!</p>
<pre><code class="lang-auto">BYTE Payload[] = {0xB8, 0x18, 0x25, 0x48, 0x00, 0x8B, 0x00,
				  0xBF, 0x70, 0xF6, 0x41, 0x00, 0xFF, 0xD7,
				  0xC3};
DWORD PSize = sizeof(Payload);
</code></pre>
<p>With that done, <em>we need a location to write it to</em>, it needs to be <em>Executable/Readable and Writeable too</em>.<br>
In order to get it, we will call <strong>VirtualAllocEx()</strong>.<br>
<span alt="image" data-base62-sha1="od9JLxuLm4q7I9SJxPMZpzGMYDv" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
We have to specify <em>flProtect</em> as <em>PAGE_EXECUTE_READWRITE</em>.<br>
Another <em>helper function</em> will be called <strong>aM</strong> short for <em>allocate Memory</em>. <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<pre><code class="lang-auto">DWORD aM(SIZE_T);
</code></pre>
<p>–</p>
<pre><code class="lang-auto">DWORD ADoom::aM(SIZE_T Size)
{
	LPVOID RAddress = VirtualAllocEx(DH, NULL, Size, MEM_COMMIT | MEM_RESERVE,
					  PAGE_EXECUTE_READWRITE);
	DWORD  Cast = reinterpret_cast&lt;DWORD&gt;(RAddress);

	return Cast;
}
</code></pre>
<p>And then there should be a <em>function to spawn a Thread</em> in <em>Doom95.exe process</em>.<br>
We’ll be using <strong>CreateRemoteThread()</strong>, and <em>wait for it to terminate</em> using <strong>WaitForSingleObject()</strong>.<br>
<span alt="image" data-base62-sha1="ebiICrKofvYkdCrHOasHhs5ivCb" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span> | | <span alt="image" data-base62-sha1="ti7Dc5gUNTnnWzbUY4a5fzX831" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
It’ll be called <strong>sT</strong>.</p>
<pre><code class="lang-auto">VOID sT(DWORD);
</code></pre>
<p>–</p>
<pre><code class="lang-cpp">VOID ADoom::sT(DWORD FPtr)
{
	HANDLE RT;

	RT = CreateRemoteThread(DH, NULL, 0, (LPTHREAD_START_ROUTINE) FPtr,
		 NULL, 0, NULL);

	if (RT != INVALID_HANDLE_VALUE)
	{
		WaitForSingleObject(RT, INFINITE);
	}
}
</code></pre>
<p>That’s all we need, <em>now we can implement the whole loop</em>:</p>
<pre><code class="lang-auto">	try
	{
		ADoom	DAim(PID);
		BYTE	Patch[2] = {0xEB, 0x33};
		DWORD	PAddress = 0x42264F;
		BYTE	Payload[] = {0xB8, 0x18, 0x25, 0x48, 0x00, 0x8B, 0x00,
							 0xBF, 0x70, 0xF6, 0x41, 0x00, 0xFF, 0xD7,
							 0xC3};
		DWORD	Location, PSize = sizeof(Payload);
		DWORD	PPlayer = 0x482518, Player, Target;
		int		THealth;

		/*
			Patch:
			An unconditional JMP instruction that allows Player-&gt;target
			to be updated on every attack.
		*/
		printf("Applying Patch @ %lX\n", PAddress);
		DAim.wM(PAddress, Patch, sizeof(Patch));

		printf("Allocating Memory(%d)\n", PSize);
		Location = DAim.aM(PSize);

		printf("Storing Function @ %lX\n", Location);
		DAim.wM(Location, Payload, PSize);

		puts("[0x00sec] Aimbot starting.");

		while (TRUE)
		{
			Player = DAim.rM&lt;DWORD&gt;(PPlayer, 0);
			Target = DAim.rM&lt;DWORD&gt;(Player, 0x78);

			// Did any enemy attack us?
			if (Target != 0)
			{
				// If yes, is it still alive?
				THealth = DAim.rM&lt;int&gt;(Target, 0x6C);
				if (THealth &gt; 0)
				{
					// Aim at it.
					DAim.sT(Location);
				}
			}
		}
	} catch (const std::runtime_error &amp;err) { }
</code></pre>
<p>–<br>
<span alt="image" data-base62-sha1="qFQInlJJkzFdgAhszIE640shduk" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
And it works! <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<h4>End</h4>
<p>It took many attempts to get to the final product, but it certainly was fun!<br>
I could not include <em>pictures or GIFs from the game because I didn’t find a way to do it</em>, for that, I apologize.<br>
Lots of modifications were made to guarantee <em>reliability</em>, an example would be <em>the Player object</em> is updated on <em>two events</em>: <strong>Death</strong>/<strong>Level Change</strong>.<br>
And I also <em>got rid of some functions such as</em>:</p>
<pre><code class="lang-auto">VOID GetMonsters(vector&lt;DWORD&gt; *M, HANDLE Proc)
{
	DWORD	First = 0x484CFC, Last = 0x484CF8;
	int		MHealth;
	UCHAR	IsMonster;

	First = rM&lt;DWORD&gt;(First, Proc);
	Last = rM&lt;DWORD&gt;(Last, Proc);
	
	do {
		IsMonster = rM&lt;UCHAR&gt;(First + 0x6A, Proc);
		MHealth = rM&lt;int&gt;(First + 0x6C, Proc);

		// Is it a monster and is it alive?
		if ((IsMonster &amp; 0x40) &amp;&amp; (MHealth &gt; 0))
		{
			M-&gt;push_back(First);
		}
	} while ((First = rM&lt;DWORD&gt;(First + 4, Proc)) != Last);
}
</code></pre>
<p><em>I didn’t even need to include &lt;cmath&gt; in the end!</em><br>
<strong>NIAHAHAHA!</strong><br>
~ exploit</p>
            <p><small>10 posts - 6 participants</small></p>
            <p><a href="https://0x00sec.org/t/doom95-making-an-aimbot/19862">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/doom95-making-an-aimbot/19862</link>
          <pubDate>Mon, 16 Mar 2020 20:50:34 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-19862</guid>
          <source url="https://0x00sec.org/t/doom95-making-an-aimbot/19862.rss">DOOM95 | Making an aimbot</source>
        </item>
        <item>
          <title>Anti-virus Exploitation: Malwarebytes 4.0.4 - Protection Not Found - Hijacking Malwarebytes via COM IPC</title>
          <dc:creator><![CDATA[dtm]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <h1>Hijacking Malwarebytes via COM IPC</h1>
<p><a href="https://0x00sec.org/t/anti-virus-exploitation-local-privilege-escalation-in-k7-security-cve-2019-16897/17655">Attacking K7 Security</a> was my first attempt at discovering, analysing, and exploiting software at the protocol level. It made me curious as to how other vendors designed and developed their inter-process communication (IPC) methods between the untrusted client (the user-controlled software; usually the GUI) and the high integrity service process. Here is the diagram that shows the interaction between these two components again, for completeness:</p>
<p><a href="https://0x00sec.s3.amazonaws.com/original/2X/6/6a53340a79f1f087af9d10f11f8a81408927a8f0.jpeg" class="onebox" target="_blank" rel="noopener">https://0x00sec.s3.amazonaws.com/original/2X/6/6a53340a79f1f087af9d10f11f8a81408927a8f0.jpeg</a></p>
<p>This article will be about diving into reverse engineering the communication protocol used in Malwarebytes and the issues that I identified as a result of bypassing the intended (and assumed?) approach towards controlling functionality.</p>
<p><strong>Disclaimer</strong>: I do not claim to know everything on the topics discussed here as fact, this is purely what I have inferred from my research. Especially if the COM information is inaccurate in any way, shape or form, please let me know and I will fix it as soon as possible. PoC code snippets has been withheld until the vendor applies a patch or until a reasonable amount of time has passed.</p>
<h2>Recommended Pre-requisite Knowledge</h2>
<ul>
<li>Windows API</li>
<li>C/C++ and Intel Assembly</li>
<li>Inter-process communication
<ul>
<li>Named Pipes</li>
<li>Component Object Model (COM)</li>
</ul>
</li>
</ul>
<hr>
<h2>Discovering IPC Methods</h2>
<p>There are <a href="https://docs.microsoft.com/en-us/windows/win32/ipc/interprocess-communications">multiple ways with which software can perform IPC</a>. How do we figure out which ones Malwabytes uses? Let’s start with analysing the imported functions of the GUI and service executables in IDA. Starting with the service executable, <code>MBAMService.exe</code>, we can identify named pipe functions:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Named Pipe API" data-orig-src="upload://mj2OA9PXpyvsKLXdIH4NFrD0wRm.png" width="643" height="99"></p>
<p>While we’re here, let’s see if we can extract the pipe name. <a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea"><code>CreateNamedPipe</code> </a> is documented to receive the name of the pipe:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="CreateNamedPipe doc" data-orig-src="upload://eiKtb86A3aXYCXASFKhobq8RYyy.png" width="575" height="500"></p>
<p>Following the references of <code>CreateNamedPipeW</code> will lead us to:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Named pipe name" data-orig-src="upload://xk5li1epKsokXLCgiEjT7pXyrAn.png" width="488" height="355"></p>
<p>But what does <code>MBLG</code> mean…? If we take a look at the <code>ConnectNamedPipe</code> references, there are strings which will give us a hint:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="MBLG hint?" data-orig-src="upload://x9qGLt979LxmR34jnBDpEVIhFrS.png" width="690" height="438"></p>
<p>Perhaps <em>MalwareBytes License Generator</em>? Nevertheless, we’ve identified one of the IPC techniques.</p>
<p>In the documentation for the available IPC methods, it states that “the foundation of OLE is the Component Object Model (COM)”. If we look into the <code>ole32</code> library imports, we can see this:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="COM imports" data-orig-src="upload://elEShS3TVmVvmxHCwHuNy4Y30FC.png" width="542" height="303"></p>
<p>The <a href="https://docs.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-coinitializeex"><code>CoInitializeEx</code></a> documentation states:</p>
<aside class="quote no-group" data-username="MSDN">
<div class="title">
<div class="quote-controls"></div>
 MSDN:</div>
<blockquote>
<p>Initializes the COM library for use by the calling thread…</p>
</blockquote>
</aside>
<p>This verifies that the service process also uses COM IPC.</p>
<p>What about the GUI executable, <code>mbam.exe</code>? Let’s look for the same IPC methods beginning with named pipes:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Named pipe imports" data-orig-src="upload://ckIC6HHWJO5tmmKlNsqNUigo1EG.png" width="501" height="62"></p>
<p><a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-callnamedpipea"><code>CallNamedPipe</code></a> is documented to receive the target pipe name:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="CallNamedPipe docs" data-orig-src="upload://bP8p0KXQhKL6exjQptdkRU2ASgG.png" width="677" height="454"></p>
<p>Again, we will follow the reference to that function and again, we’ll see the <code>\\.\pipe\MBLG</code> string:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Named pipe name" data-orig-src="upload://l9Bny2KuV7GT0J1rjbiYR628JjQ.png" width="416" height="343"></p>
<p>This time, it’s accompanied with another string <code>NeedAKey</code> which is passed into the input buffer for the service process.</p>
<p><code>mbam.exe</code> also imports the COM functions from the <code>ole32</code> library:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="COM imports" data-orig-src="upload://A3vOZ7dhjjEbn2lYL1hD2RMk3lN.png" width="502" height="350"></p>
<h2>Reverse Engineering the COM Protocol</h2>
<p>One of the many amazing tools released by <a href="https://twitter.com/tiraniddo">James Foreshaw</a> is <a href="https://github.com/tyranid/oleviewdotnet">OleViewDotNet</a>. Using this, we can discover COM objects available on a system.</p>
<p>Firing up OleViewDotNet, we can list all the <a href="https://docs.microsoft.com/en-us/windows/win32/com/com-class-objects-and-clsids">COM classes exposed through their CLSIDs</a>. Filtering by servers, we can see that the <code>MBAMService.exe</code> executable is packaged with <a href="https://docs.microsoft.com/en-us/windows/win32/midl/com-dcom-and-type-libraries">type libraries</a> that define protocol information in human-readable and code form.</p>
<p>Here is the <code>RTPController</code> interface:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="RTPController interface" data-orig-src="upload://uiw92dlVbNCVf5MqAFX2Lh3fqvC.png" width="690" height="348"></p>
<p>and here is the <code>LicenseController</code> interface:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="LicenseController interface" data-orig-src="upload://aSHxhlPhNdeLpfLglKjTVs3aaGP.png" width="660" height="500"></p>
<p>How can we extract this information so we can use it? The OleViewDotNet tool is based on Microsoft’s OleView which can pull the type library information into a compilable <a href="https://docs.microsoft.com/en-us/windows/win32/midl/interface-definition-idl-file">Interface Definition Language</a> (IDL) file.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="AEController IDL file" data-orig-src="upload://c4QxV6eBOFq2lIP4sf07tKn4itW.png" width="536" height="500"></p>
<p>Notice that at the top of the generated IDL file there is a <code>typelib filename: 12</code> which probably indicates that there are <em>at least</em> 12 type libraries. After extracting all of the IDL files, we should have fourteen files:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="All IDL files" data-orig-src="upload://2S89u9hIXnS0dxLuTKgciAAGiJv.png" width="173" height="302"></p>
<h2>Compiling IDL Files</h2>
<p>To compile these into code, we can use Microsoft’s <code>midl.exe</code> utility like so:</p>
<pre><code class="lang-makefile">midl /out &lt;output directory path&gt; /header &lt;header output file path&gt; &lt;path to IDL file&gt;
</code></pre>
<p>But we have to do this is a specific order. Looking back at the generated <code>AEControllerCOMLib</code> IDL file in <code>OleView</code>, there are dependencies specified with <code>importlib("&lt;file&gt;")</code>. These are the other compiled IDL files used by Malwarebytes. We must first find and compile the IDL file with none of these dependencies and then gradually work our way up until we have all of the dependencies required to compile all of the other IDL files. Let’s take a brief look at an example.</p>
<p>The first file we need to compile is the <code>LogController</code>. We can see that it only has the <code>stdole2.tlb</code> type library as its dependency which is provided by Microsoft.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="LogController IDL file" data-orig-src="upload://oSNisuWFwpOV2SMWcwS024iJ7z8.png" width="556" height="499"></p>
<p>If we compile this using <code>midl</code>, we’ll get three files (depending on how you named them on the command line):</p>
<pre><code class="lang-makefile">LogController.h
LogController.tlb
LogController_i.c
</code></pre>
<p>The header file will contain the definition of all of the enums, structs, and class methods for the COM object:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="LogController.h" data-orig-src="upload://9R2luho8LqCUdeQzExDGnd94Om5.png" width="378" height="500"></p>
<p>The C file will contain the <a href="https://docs.microsoft.com/en-us/office/client-developer/outlook/mapi/iid">interface identifiers</a> (IID) and CLSIDs to query and use the COM object:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="LogController_i.c" data-orig-src="upload://tIeFESRmbAg8zIul9k3ouIonEcE.png" width="541" height="500"></p>
<p>The type library (<code>tlb</code>) file is required for dependencies to compile the other IDL files. This file name should correspond with what’s specified in the IDL file’s <code>typelib filename</code> - in this case, it’s just <code>2</code>.</p>
<p>The next IDL to be compiled is the <code>PoliciesController</code>. The IDL file states that its dependencies are <code>stdole2.tlb</code> and <code>2</code>, both of which we have.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="PoliciesController IDL file" data-orig-src="upload://fZVw8V8J532qRWCQFqiAsP4ZXRo.png" width="559" height="500"></p>
<p>Now we just repeat the steps as before with the <code>LogController</code> and the rest of the other IDL files.</p>
<h2>Querying Malwarebytes’ COM Object Classes</h2>
<p>To figure out how we can interact with the COM classes, we can look at how <code>mbam.exe</code> does it using <a href="http://www.rohitab.com/downloads#API_Monitor_v2_Alpha">Rohitab’s API Monitor</a>. With this information, hopefully we can re-implement it ourselves. We’ll set the filter to monitor for COM and Pipe API calls only in the <code>mbam.exe</code> module and it should look like this when monitoring the startup of the application:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="API Monitor" data-orig-src="upload://ybunjjcg8BhNWEFaUyww4ZReVIP.png" width="690" height="364"></p>
<p>Let’s ignore the first call to <code>CoCreateInstance</code>, because it fails, and move onto <code>CallNamedPipeW</code>. We saw this call earlier with the <code>NeedAKey</code> string in the input buffer. Here is what the output buffer contains:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="CallNamedPipeW" data-orig-src="upload://m12QhYXLFA1D6Zf2YzHYqP9VzSO.png" width="690" height="203"></p>
<p>Looks like a randomly-generated sequence of wide ASCII characters (we’ll call this the “license string”), and we can see it used in calls to <a href="https://docs.microsoft.com/en-us/windows/win32/api/oleauto/nf-oleauto-sysallocstringlen"><code>SysAllocStringLen</code></a> and <a href="https://docs.microsoft.com/en-us/windows/win32/api/oleauto/nf-oleauto-sysfreestring"><code>SysFreeString</code></a> which returns a <a href="https://docs.microsoft.com/en-us/cpp/atl-mfc-shared/allocating-and-releasing-memory-for-a-bstr?view=vs-2019"><code>BSTR</code></a> type of the input string and frees it, respectively. The <code>BSTR</code> type is used in passing data in COM objects. The license string is also used in <a href="https://docs.microsoft.com/en-us/windows/win32/api/ocidl/nf-ocidl-iclassfactory2-createinstancelic"><code>IClassFactory2::CreateInstanceLic</code></a> which is documented as so:</p>
<aside class="quote no-group" data-username="MSDN">
<div class="title">
<div class="quote-controls"></div>
 MSDN:</div>
<blockquote>
<p>Creates an instance of the licensed object for the specified license key. This method is the only possible means to create an object on an otherwise unlicensed machine.</p>
</blockquote>
</aside>
<p>That’s good to know! But how do we get here and what is this <code>IClassFactory2</code> used for? Let’s jump back to the call to <a href="https://docs.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-cogetclassobject"><code>CoGetClassObject</code></a> and its arguments. The <code>MBAMServiceController</code> CLSID is specified to retrieve its corresponding pointer to its object which is returned as an <a href="https://docs.microsoft.com/en-us/windows/win32/api/unknwn/nn-unknwn-iclassfactory"><code>IClassFactory</code></a>. The <a href="https://docs.microsoft.com/en-us/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(q)"><code>IClassFactory::QueryInterface</code></a> method is then used to obtain the <code>IClassFactory2</code> interface. But what’s the point in all of this? As it turns out - after a lot of experimentation - that the <code>IClassFactory2::CreateInstanceLic</code> interface can be used to acquire a pointer to the <code>IMBAMServiceController</code> interface. Using this interface, we can gain access to the COM object classes exposed by Malwarebytes, i.e. the <code>RTPController</code> class, the <code>LicenseController</code> class, etc. So just to summarise this section, here is what the flow looks like:</p>
<pre><code class="lang-makefile">1. Get a license string with CallNamedPipe("NeedAKey"),
2. Get an IClassFactory interface with CoGetClassObject(CLSID_MBAMServiceControllerClass)
3. Get an IClassFactory2 interface with IClassFactory::QueryInterface(IID_IClassFactory2),
4. Get a BSTR for the license string with SysAllocStringLen("LicenseKey"), 
5. Get an IMBAMServiceController interface with IClassFactory2::CreateInstanceLic("BSTR_LicenseString"),
6. Get the desired MBAM COM class's interface with the IMBAMServiceController interface.
</code></pre>
<h2>Bypassing Security Checks</h2>
<p>Of course it wouldn’t be so easy. Malwarebytes’ service implements some verification on the process that requests a license string on <code>ConnectNamedPipe</code>:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Verification" data-orig-src="upload://1eCEtxpIVIuzXfH6o4tdpXiv4VW.png" width="425" height="400"></p>
<p>We can see it in log files too:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Verification logs" data-orig-src="upload://c5Ku5za8PZZt4CMv4JzvrlRZtoy.png" width="690" height="204"></p>
<p>To use my time effectively, I opted to try a few methods to try to bypass the verification checks before digging into the assembly. I’ve seen these problems exist in other products so I had a few ideas. The immediate method that came into my head was to do process hollowing on <code>mbam.exe</code>. However, I don’t believe I can get that to work on the 64-bit architecture since I had never gotten it to work before. Perhaps it could work in the case of 32-bit? The next method was to append the signature using <a href="https://github.com/secretsquirrel/SigThief">SigThief</a>. Unfortunately, that did not work:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="SigThief fail" data-orig-src="upload://gQoDSyB6pN7rYrk9kewbjx47xED.png" width="689" height="60"></p>
<p>The last technique involves injecting shellcode into a <code>mbam.exe</code> process. Though this requires a fair bit of work to generate the shellcode, it was what ended up working. The shellcode can be generated through the compiler, thanks to <a href="https://twitter.com/mattifestation">Matt Graeber</a>’s excellent post on <a href="http://www.exploit-monday.com/2013/08/writing-optimized-windows-shellcode-in-c.html"><em>Writing Optimized Windows Shellcode in C</em></a>. Once the binary is compiled, simply extract the code from the <code>.text</code> section and copy it into another project that performs basic shellcode injection into a target process. Personally, I just used the classic <a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createremotethread"><code>CreateRemoteThread</code></a> method.</p>
<p>There are also two other security measures that I have not mentioned yet. The first is the <em>User access</em> option which, when set, requires a password to modify any selected settings. The second is a UAC prompt for when a non-administrative user tries to change critical settings such as self-protection or real-time protection. As I’ve discovered, directly interacting with the settings through the COM classes entirely bypasses these two security components.</p>
<h2>Demonstration</h2>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/e/e1b7ad0c3a9cb5e5a2dde4ca74c5d17fc78e64fc.gif" data-download-href="/uploads/short-url/wcMXceUPTuDmMBEbURIcAdh5DgU.gif?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/e/e1b7ad0c3a9cb5e5a2dde4ca74c5d17fc78e64fc_2_690x388.gif" alt="" data-base62-sha1="wcMXceUPTuDmMBEbURIcAdh5DgU" width="690" height="388" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/e/e1b7ad0c3a9cb5e5a2dde4ca74c5d17fc78e64fc_2_10x10.png"></a></div><p></p>
<hr>
<h1>Conclusion</h1>
<p>This post shows yet another example of attacking security products via their communication channels. Although there were layers of protection for preventing unauthorised access, the trust granted in the verification procedure was subverted using trivial impersonation that has impacted other products in the past and present. Perhaps the self-protection was insufficient and needs to extend to all of the Malwarebytes processes. This could stop the shellcode injection and therefore, this attack vector.</p>
<p>As always, the PoC code (currently withheld) can be found on my <a href="https://github.com/NtRaiseHardError/Antimalware-Research/tree/master/Malwarebytes/v4.0.4.49">Antimalware-Research GitHub</a>.</p>
<p>Thanks for reading and I hope you learned something!</p>
<p><em>– dtm</em></p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/anti-virus-exploitation-malwarebytes-4-0-4-protection-not-found-hijacking-malwarebytes-via-com-ipc/18766">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/anti-virus-exploitation-malwarebytes-4-0-4-protection-not-found-hijacking-malwarebytes-via-com-ipc/18766</link>
          <pubDate>Thu, 23 Jan 2020 21:09:49 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-18766</guid>
          <source url="https://0x00sec.org/t/anti-virus-exploitation-malwarebytes-4-0-4-protection-not-found-hijacking-malwarebytes-via-com-ipc/18766.rss">Anti-virus Exploitation: Malwarebytes 4.0.4 - Protection Not Found - Hijacking Malwarebytes via COM IPC</source>
        </item>
  </channel>
</rss>
