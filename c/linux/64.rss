<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Linux - 0x00sec - The Home of the Hacker</title>
    <link>https://0x00sec.org/c/linux/64</link>
    <description>Topics in the &#39;Linux&#39; category </description>
    
      <lastBuildDate>Sun, 29 Oct 2023 22:38:25 +0000</lastBuildDate>
      <atom:link href="https://0x00sec.org/c/linux/64.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>UbuntuMini.iso setup with UEFI for REMnux</title>
          <dc:creator><![CDATA[bootlegwifi]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <h2><a name="ubuntuminiiso-install-guide-1" class="anchor" href="https://0x00sec.org#ubuntuminiiso-install-guide-1"></a>UbuntuMini.iso Install Guide:</h2>
<li>By default the Ubuntu minimal .iso will only boot with a legacy BIOS. So im going to show you how you can get a UbuntuMini.iso on a UEFI system so we can install a minimal Ubuntu setup for REMnux. For this to happen we must build our own ISO using the Ubuntu minimal ISO, and a Ubuntu Server ISO.<br> Through my research on this, I came across a script on <a target="_blank" href="https://noobient.com/2019/06/25/ubuntu-18-04-uefi-network-installer/" rel="noopener nofollow ugc">Noobient</a>
<br>
</li><li>First lets create a temp directory for our work:<br>
                            <code>$ mkdir /tmp/remnux</code></li>
                        <li>Next we will create a file for our script: (You can call this whatever you'd like, I personally just named it customiso.sh)<br>
                            <code>$ touch customiso.sh</code></li>
                        <li>Lets copy the script into the customiso file, then make it executable. You can use whatever text editor you would like. I will be using vim in this example.<br>
                            <code>$ vim customiso.sh</code></li>
                        <br>
                            <div><i></i><pre><code>#!/bin/bash
<p>set -eu</p>
<p>server_iso=‘ubuntu-20.04.1-legacy-server-amd64.iso’<br>
mini_iso=‘mini.iso’<br>
dist_dir=‘ubuntu-20.04-netinstall’</p>
<p>if [ ! -e ${server_iso} ]<br>
then<br>
wget “<a href="https://cdimage.ubuntu.com/ubuntu-legacy-server/releases/focal/release/$%7Bserver_iso%7D" rel="noopener nofollow ugc">https://cdimage.ubuntu.com/ubuntu-legacy-server/releases/focal/release/${server_iso}</a>”<br>
fi</p>
<p>if [ ! -e ${mini_iso} ]<br>
then<br>
wget “<a href="http://archive.ubuntu.com/ubuntu/dists/focal/main/installer-amd64/current/legacy-images/netboot/$%7Bmini_iso%7D" rel="noopener nofollow ugc">http://archive.ubuntu.com/ubuntu/dists/focal/main/installer-amd64/current/legacy-images/netboot/${mini_iso}</a>”<br>
fi</p>
</code><p><code>rm -rf ${dist_dir}*<br>
7z x ${server_iso} -o${dist_dir}-tmp install/hwe-netboot/ubuntu-installer/amd64/linux<br>
7z x ${server_iso} -o${dist_dir}-tmp install/hwe-netboot/ubuntu-installer/amd64/initrd.gz<br>
7z x ${server_iso} -o${dist_dir} EFI<br>
7z x ${mini_iso} -o${dist_dir}<br>
mv ${dist_dir}-tmp/install/hwe-netboot/ubuntu-installer/amd64/linux ${dist_dir}/linux<br>
mv ${dist_dir}-tmp/install/hwe-netboot/ubuntu-installer/amd64/initrd.gz ${dist_dir}/initrd.gz<br>
zip -r ${dist_dir}.zip ${dist_dir}<br>
</code></p></pre><br>
<code>$ chmod +x customiso.sh</code><br>
<li>Run the script:<br><br>
<code>$ ./customish.sh</code></li><br>
<li>Now if you do a <code>ls</code> you will see three new files and a two new directories. The two important files to verify are <code>ubuntu-20.04.1-legacy-server-amd64.iso</code>, <code>mini.iso</code>, and a the new directory called <code>ubuntu-20.04-netinstall</code>.</li><br>
<li>Time to verify the sha of your .iso files. to do this run the <code>sha256sum</code> command on both files:</li><br>
<pre><code>$ sha256sum mini.iso<br>
0e79e00bf844929d40825b1f0e8634415cda195ba23bae0b041911fde4dfe018  mini.iso<br>
$ sha256sum ubuntu-20.04.1-legacy-server-amd64.iso<br>
f11bda2f2caed8f420802b59f382c25160b114ccc665dbac9c5046e7fceaced2  ubuntu-20.04.1-legacy-server-amd64.iso<br>
</code></pre><br>
<li>Now its time to make a custom ISO using the <code>mkisofs</code> command. If you do not have the command. You can download <code>cdrtools</code> through your package manager.</li><br>
<li>What I did was run<br><br>
<code>$ mkisofs -o ubuntu-20.04-netinstall.iso \ </code> <br> and this should give you a prompt to run the rest of the commands:</li><br>
<pre><code>&gt; -b ubuntu-20.04-netinstall/isolinux.bin <br>
&gt; -c ubuntu-20.04-netinstall/boot.cat <br>
&gt; -no-emul-boot <br>
&gt; -boot-load-size 4 <br>
&gt; -boot-info-table -J -R -V <br>
&gt; UbuntuMinimal .<br>
</code></pre><br>
<li>After completing the previous step, you should now see another file in your directory called <code>ubuntu-20.04-netinstall.iso</code>.</li><br>
<li>We now need to burn this iso onto our USB drive. Lets verify the name of our USB stick first with:</li><br>
<pre><code>$ lsblk<br>
NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS<br>
sda      8:0    0 931.5G  0 disk<br>
├─sda1   8:1    0     1G  0 part /boot<br>
├─sda2   8:2    0    30G  0 part /<br>
└─sda3   8:3    0 900.5G  0 part /home<br>
sdb      8:16   1  14.6G  0 disk<br>
</code></pre><br>
<li>Be careful to make sure you recognize the proper block device name for your USB. In the picture above my USB is listed as <code>sdb</code>. If you are unsure what the block device name of your USB stick is called, you can run the <code>lsblk</code> command without the USB inserted in your PC and compare the differences to see what NAME is added.</li><br>
<li>Lets actually burn the ISO onto our USB now using the command <code>dd</code>.</li><br>
<br><br>
<strong>WARNING: YOU CAN DELETE YOUR OS IF YOU TYPE IN THE INCORRECT BLOCK DEVICE NAME</strong><br>
<br><br><br>
<code>$ dd bs=4M if=ubuntu-20.04-netinstall.iso of=/dev/sdb status=progress<br>
</code><br>
<li>Once this is completed it’s now time to boot your USB stick. I am going to assume you are installing REMnux onto another device. So lets plug in the USB stick into a USB port on the device you’d like to install Ubuntu on.</li><br>
<br><b>DISCLAIMER: I am going to assume that you have the knowledge about setting your boot order, and GRUB, so a few steps here will be skipped.</b><br>
<li><br>
When I personally plugged in my USB I was getting an error that my PC could not find a bootable device when my USB stick was set to <span class="hashtag-raw">#1</span> in my boot order. I seen that this was not an issue with other people trying to boot a minimal Ubuntu iso with UEFI. If you are having the same issue as me, and already have grub installed, go back into your BIOS and set GRUB as <span class="hashtag-raw">#1</span> in your boot order.<br>
</li><br>
<li><br>
Once you see Grub pop up, depending on what is on your screen you will need to do a few steps differently<br>
</li><br>
<li><br>
Personally I previously had Arch installed on this device so I type in <code>c</code> to get to the grub terminal. If this is the case. We will need to type in a few commands to get the Ubuntu Installer to run. First lets list our devices.<br>
</li><br>
<code>grub&gt; ls</code><br><br>
<li>Depending on your previous setup and partitions this could look a bit differnt. In my case my output of <code>ls</code> looked like this:</li><br>
<code>(hd0) (hd1) (hd1,gpt3) (hd1,gpt2) (hd1,gpt1) (hd2)</code><br><br>
<li>If you are not positive on which device is your USB, once again you can unplug your usb device. Load up the grub terminal and perform a <code>ls</code> and see what device is missing. Pay close attention to the devices listed with <code>,gptX</code> in them as they can give you a hint. For example if I remove my USB and perform a <code>ls</code> my output would look like this:</li><br>
<code>(hd0) (hd0,gpt3) (hd0,gpt2) (hd0,gpt1) (hd1)</code><br><br>
<li>As you can see the <code>hdX</code> number changes based on the order its listed and not the actual device itself. I can see that when my USB stick in inserted it is listed as <code>(hd0)</code> since the <code>hdX,gptX)</code> devices change numbers, and the trailing (hdX) also changes numbers. So now lets boot into our Ubuntu install:</li><pre><code>grub&gt; set root=(hd0)<br>
grub&gt; linux /ubuntu-20.04-netinstall/linux<br>
grub&gt; initrd /ubuntu-20.04-netinstall/initrd.gz<br>
grub&gt; boot</code></pre><br>
<li>This will bring up the Ubuntu Installer. To finish the remnux install I will direct you to the <a target="_blank" href="http://Remnux.org" rel="noopener nofollow ugc">Remnux.org</a> website as they already have a detailed writeup on the correct steps to take.<br><br>
<a target="_blank" href="https://docs.remnux.org/install-distro/install-from-scratch" rel="noopener nofollow ugc">Remnux Docs</a></li><p></p></div>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/ubuntumini-iso-setup-with-uefi-for-remnux/37638">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/ubuntumini-iso-setup-with-uefi-for-remnux/37638</link>
          <pubDate>Sun, 29 Oct 2023 22:38:25 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-37638</guid>
          <source url="https://0x00sec.org/t/ubuntumini-iso-setup-with-uefi-for-remnux/37638.rss">UbuntuMini.iso setup with UEFI for REMnux</source>
        </item>
        <item>
          <title>Kali live boot on macbook M1</title>
          <dc:creator><![CDATA[0xbeep]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>Hey fam, I’ve been searching around but found nothing.<br>
I’ve tried to live boot Kali on my Macbook Pro (Intel i9), I did it but the trackpad, keyboard and wifi didn’t worked. I read something about needing to install some drivers but how I’ll use terminal, internet or anything without typing. I don’t have a cable keyboard. I could get it If it was the only problem. I can only use the cursor with my dongle mouse.</p>
<p>I’m getting back to M1 chip so the problem will be the same I’m sure.</p>
<p>Do y’all have any solution for runnin Kali live boot on M1 without tons of adapters (ext keyboard, mouse, wifi dongle)? I just want to plug and play.<br>
Thank y’all!!</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/kali-live-boot-on-macbook-m1/37623">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/kali-live-boot-on-macbook-m1/37623</link>
          <pubDate>Sun, 29 Oct 2023 01:42:03 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-37623</guid>
          <source url="https://0x00sec.org/t/kali-live-boot-on-macbook-m1/37623.rss">Kali live boot on macbook M1</source>
        </item>
        <item>
          <title>Custom Live OS for Optimal OPSEC</title>
          <dc:creator><![CDATA[jakeofark]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <ul>
<li>Let’s build an example Debian 11 Live OS from a fresh Debian 11 VPS with one script.</li>
</ul>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/9/9/99e7322b965d19bd06f4bfcb244104fdabec8d36.png" data-download-href="/uploads/short-url/lXuo3LqMRI0wVeyTLSyYgNoQVLM.png?dl=1" title="testos" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/9/9/99e7322b965d19bd06f4bfcb244104fdabec8d36_2_499x375.png" alt="testos" data-base62-sha1="lXuo3LqMRI0wVeyTLSyYgNoQVLM" width="499" height="375" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/9/9/99e7322b965d19bd06f4bfcb244104fdabec8d36_2_499x375.png, https://0x00sec.s3.amazonaws.com/optimized/3X/9/9/99e7322b965d19bd06f4bfcb244104fdabec8d36_2_748x562.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/9/9/99e7322b965d19bd06f4bfcb244104fdabec8d36_2_998x750.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/9/9/99e7322b965d19bd06f4bfcb244104fdabec8d36_2_10x10.png"></a></div><p></p>
<p>Start up some root scripting with:</p>
<pre><code class="lang-auto">sudo su
nano in.sh &amp;&amp; chmod 755 in.sh
</code></pre>
<p>First, let’s setup some aliases to help us get to where we’re going:</p>
<pre><code class="lang-auto">#!/bin/bash
cat &gt;&gt; /root/.bashrc &lt;&lt; EOA
alias opt='cd /root/liveos/config/includes.chroot/opt/;ls -lth'
alias packages='nano /root/liveos/config/package-lists/main.list.chroot'
alias run='nano /root/liveos/config/includes.chroot/opt/run.sh'
alias log='watch -d -n5 "tail -n 36 /root/liveos/build.log"'
alias build='cd /root/liveos;screen -dmS iso ./build.sh;htop -C || log;ls -lth'
EOA
</code></pre>
<p>So <em>opt</em> is going to be the directory we stash our additions in, <em>packages</em> is going to control the list of debian repository packages we want included in our build, <em>run</em> is going to edit the start-up control script, <em>log</em> lets us watch our 25 minute build session, and <em>build</em> of course builds the live disk ISO. Now, let’s install our prerequisites:</p>
<pre><code class="lang-auto">apt update &amp;&amp; apt upgrade -y
apt install -y live-build screen htop net-tools
</code></pre>
<p>Now setup a build directory and adjust some defaults. Most would want to change the architecture to <em>amd64</em>. This setup will produce an image of about 600mb.</p>
<pre><code class="lang-auto">mkdir -p /root/liveos
cd /root/liveos
lb config
cp /usr/share/doc/live-build/examples/auto/* auto/
cat &gt; auto/config &lt;&lt; EOF
#!/bin/sh
set -e
lb config noauto \
    -d bullseye \
    --mode debian \
    --architectures i386 \
    --linux-flavours 686-pae \
    --debian-installer false \
    --archive-areas "main contrib non-free" \
    --apt-indices false \
    --memtest none \
    --iso-volume "TestOS" \
    --bootappend-live "quiet hostname=testos boot=live" \
    "${@}"
EOF
lb config -d bullseye --apt-indices false --apt-recommends false --debootstrap-options "--variant=minbase" --firmware-chroot false --memtest none --bootappend-live "quiet boot=live hostname=testos"
echo "live-tools user-setup sudo eject" &gt; config/package-lists/recommends.list.chroot
</code></pre>
<p>Then lets add a list of packages and make that <em>opt</em> directory for additional software.</p>
<pre><code class="lang-auto">cat &gt; config/package-lists/main.list.chroot &lt;&lt; EOF
firefox-esr
lxterminal
net-tools
wget
xorg
openbox
pcmanfm
nano
mousepad
conky
feh
ufw
screen
htop
lsof
wipe
usbutils
gnome-screenshot
network-manager
pciutils
software-properties-common
ca-certificates
libfuse2
EOF
mkdir -p config/includes.chroot/opt &amp;&amp; sync
cd /root/liveos/config/includes.chroot/opt
</code></pre>
<p>Adjust as needed of course. The goal here is a minimally viable graphical operating system that is easily expandable.  Openbox as a window manager fits the bill here quit nicely. Conky is also very extensible. By setting it up this way we can do all of our configuration on-the-fly at boot time. Let’s add in the real workhorse, <em>run.sh</em>:</p>
<pre><code class="lang-auto">cat &gt; run.sh &lt;&lt; "EOR"
#!/bin/bash
cat &gt; /etc/motd &lt;&lt; EOF

████████ ███████ ███████ ████████  ██████  ███████
   ██    ██      ██         ██    ██    ██ ██
   ██    █████   ███████    ██    ██    ██ ███████
   ██    ██           ██    ██    ██    ██      ██
   ██    ███████ ███████    ██     ██████  ███████

EOF
cat &gt; /etc/conky/conky.conf &lt;&lt; "EOF"

conky.config = {
    alignment = 'top_right',
    background = false,
    border_width = 0,
    cpu_avg_samples = 2,
    default_color = 'white',
    default_outline_color = 'white',
    default_shade_color = 'white',
    draw_borders = false,
    draw_graph_borders = true,
    draw_outline = false,
    draw_shades = false,
    use_xft = true,
    font = 'DejaVu Sans Mono:size=16',
    gap_x = 30,
    gap_y = 20,
    minimum_height = 5,
    minimum_width = 6,
    net_avg_samples = 2,
    no_buffers = true,
    out_to_console = false,
    out_to_stderr = false,
    extra_newline = false,
    own_window = true,
    own_window_class = 'Conky',
    own_window_colour = 'black',
    own_window_type = 'desktop',
    stippled_borders = 0,
    update_interval = 2,
    uppercase = false,
    use_spacer = 'none',
    show_graph_scale = false,
    show_graph_range = false
}

conky.text = [[
${font Open Sans Light:size=88}$alignc${time %l:%M}${font}

${font Open Sans:size=23}$alignr${time %B %e}${font}
]]
EOF
ln -sf /usr/share/zoneinfo/America/Chicago /etc/localtime
sed -i '86s/9/14/g' /etc/xdg/openbox/rc.xml
sed -i '95s/9/14/g' /etc/xdg/openbox/rc.xml
xsetroot -solid black
xset s off -dpms
xhost +si:localuser:root
conky -b &amp;
cat &gt; /root/.bashrc &lt;&lt; "EOA"
source /home/user/.bashrc
EOA
cat &gt;&gt; /home/user/.bashrc &lt;&lt; "EOA"
alias aliases='sudo nano /home/user/.bashrc; . /home/user/.bashrc'
alias menu='sudo nano /etc/xdg/openbox/menu.xml; openbox --reconfigure'
alias pubip='wget --connect-timeout=10 -qO- checkip.dyn.com | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"'
alias wifi='sudo nmcli dev wifi list; echo "sudo nmcli --ask dev wifi connect [SSID here]"'
alias crypt='/opt/./truecrypt-console-x86 &amp;&amp; truecrypt -c'
EOA
chown user:user /home/user/.bashrc
cat &gt; /home/user/.profile &lt;&lt; "EOA"
source /home/user/.bashrc
clear
cat /etc/motd
EOA
chown user:user /home/user/.profile
cat &gt; /etc/xdg/openbox/menu.xml &lt;&lt; EOF
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;openbox_menu xmlns="http://openbox.org/3.4/menu"&gt;
&lt;menu id="root-menu" label="Openbox 3"&gt;
  &lt;separator label="TestOS" /&gt;
   &lt;item label="Terminal"&gt;
	&lt;action name="Execute"&gt;
      &lt;command&gt;lxterminal --geometry=109x45 --title=TestOS&lt;/command&gt;
    &lt;/action&gt;
  &lt;/item&gt;
   &lt;item label="Firefox"&gt;
	&lt;action name="Execute"&gt;
      &lt;command&gt;firefox http://start.duckduckgo.com&lt;/command&gt;
    &lt;/action&gt;
  &lt;/item&gt;
   &lt;item label="Files"&gt;
	&lt;action name="Execute"&gt;
      &lt;command&gt;pcmanfm&lt;/command&gt;
    &lt;/action&gt;
  &lt;/item&gt;
   &lt;item label="Text"&gt;
	&lt;action name="Execute"&gt;
      &lt;command&gt;mousepad&lt;/command&gt;
    &lt;/action&gt;
  &lt;/item&gt;
  &lt;item label="Shutdown"&gt;
    &lt;action name="Execute"&gt;
      &lt;command&gt;sudo shutdown -P --no-wall now&lt;/command&gt;
    &lt;/action&gt;
  &lt;/item&gt;
&lt;/menu&gt;
&lt;/openbox_menu&gt;
EOF
sed -i '317s/scrot/gnome-screenshot -i/g' /etc/xdg/openbox/rc.xml
openbox --reconfigure
ufw enable
ufw logging low
echo "nameserver 1.1.1.1" &gt; /etc/resolv.conf
echo "nameserver 1.0.0.1" &gt;&gt; /etc/resolv.conf
exit 0
EOR
chmod 755 run.sh
</code></pre>
<p>A live OS with Truecrypt, Veracrypt, or Shufflecake built-in is enough to justify this whole endeavor but really anything can be done once you get used to building for a live environment. The original Truecrypt docs [<strong>1</strong>] recommend building a live OS and the NSA used Truecrypt [<strong>2</strong>] back in the day so yea…this <strong>is</strong> worth it.</p>
<pre><code class="lang-auto">wget -q https://raw.githubusercontent.com/DrWhax/truecrypt-archive/master/truecrypt-7.1a-linux-console-x86.tar.gz &amp;&amp; tar -xvf *.tar.gz; rm -f truecrypt-7.1a-linux-console-x86.tar.gz
mv -v truecrypt-7.1a-setup-console-x86 truecrypt-console-x86; chmod 755 truecrypt-console-x86
cd ..
chown -Rv user:user opt
</code></pre>
<p>We need to hook the live disk boot process to hand off control to Openbox. We’re also changing the default four workspaces to one here as it cleans up the middle-click menu.</p>
<pre><code class="lang-auto">cd /root/liveos/
mkdir -p config/includes.chroot/lib/live/config
cat &gt; config/includes.chroot/lib/live/config/2000-custom-run &lt;&lt; "EOF"
#!/bin/sh
sed -i '131s/4/1/g' /etc/xdg/openbox/rc.xml
echo "sudo /opt/./run.sh" &gt;&gt; /etc/xdg/openbox/autostart
EOF
chmod 755 config/includes.chroot/lib/live/config/2000-custom-run
</code></pre>
<p>Let’s copy in the default boot loader and setup a tiny build script.</p>
<pre><code class="lang-auto">mkdir -p config/bootloaders/isolinux
cp -Rv /usr/share/live/build/bootloaders/isolinux/* config/bootloaders/isolinux

cat &gt; /root/liveos/build.sh &lt;&lt; "EOF"
#!/bin/bash
cd /root/liveos
lb clean
lb build 2&gt;&amp;1 | tee build.log
mv -v live-image-i386.hybrid.iso TestOS.iso
exit 0
EOF
chmod 755 /root/liveos/build.sh
</code></pre>
<p>That should be it! Run the script, source the aliases, and run the build.</p>
<pre><code class="lang-auto">./in.sh
source .bashrc
build
</code></pre>
<p>This script and setup has been thoroughly tested by myself so I’m confident in sharing this method. I think as a community we should have a better answer to our personal setups then “I use Kali.” <strong>F*ck Kali</strong>. Try this or literally anything else.<br>
[1]: <a href="https://www.grc.com/misc/truecrypt/TrueCrypt%20User%20Guide.pdf" rel="noopener nofollow ugc">https://www.grc.com/misc/truecrypt/TrueCrypt%20User%20Guide.pdf</a><br>
[2]: <a href="https://github.com/x0rz/EQGRP/blob/master/Linux/bin/scrubhands" class="inline-onebox" rel="noopener nofollow ugc">EQGRP/scrubhands at master · x0rz/EQGRP · GitHub</a></p>
            <p><small>6 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/custom-live-os-for-optimal-opsec/32182">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/custom-live-os-for-optimal-opsec/32182</link>
          <pubDate>Thu, 17 Nov 2022 19:21:09 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-32182</guid>
          <source url="https://0x00sec.org/t/custom-live-os-for-optimal-opsec/32182.rss">Custom Live OS for Optimal OPSEC</source>
        </item>
        <item>
          <title>The linux kernel modules programming</title>
          <dc:creator><![CDATA[0xf00]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>In this tutorial, I’m going to teach you how to write linux kernel modules, it is necessary to know C programming language.</p>
<p>You will probably ask  "So, what the hell is that linux kernel module?"</p>
<ul>
<li>it is a piece of code that can be dynamically loaded and unloaded from the kernel, "maybe you don’t know what kernel is"<br>
*<strong>It is the main part of each operating system. It is "program" that is loaded<br>
and executed by bootloader at the boot time</strong>  The kernel manages all system resources. It’s responsible for communication between software and hardware, manages all user’s processes and many, many more.</li>
</ul>
<ul>
<li>Kernel and user mode processes run in different privilege level. New processors support it i.e. Intel processors have the following privilege</li>
</ul>
<pre><code class="lang-auto">levels:
ring0(the most powerful privilege level)
ring1
ring2
ring3(the least powerful privilege level)
</code></pre>
<p>Linux uses only two of them  <code>ring0</code> for kernel and <code>ring3</code> for user mode proceses. You can ask - "What are these privilege levels useful for?".<br>
If user mode processes run in <code>ring0</code>, they would be able to execute some "destructive" code, For example they could execute "cli" processor command, It would stop all interrupts and as a result stop whole kernel! It would be very bad for safety of the system, That’s why only kernel runs in <code>ring0</code> and<br>
user mode processes in <code>ring3</code> when they run in <code>ring3</code> they can’t do anything bad to the kernel.</p>
<p>The main power of linux kernel modules is that they run in <code>ring0</code> (kernel mode), not as normal processes in <code>ring3</code>(user mode). Of course only root can load<br>
them <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"> Why are they useful? For example, there can be a sitation when we have some hardware and unfortunately we haven’t drivers for it compiled into the kernel. Then, kernel modules can help us.<br>
Kernel module can be driver for that hardware, We can load such a kernel module and then we can normally use our hardware without kernel module, it would be necessary to recompile the kernel with support for this hardware and it takes really long time…</p>
<p>How to load modules? Modules are usually files with ".ko" extension. All we need to do is to execute command as <code>root</code><br>
insmod module.ko<br>
The module was loaded. But after some time we will want to unload the module, How to do this? We execute again as <code>root</code></p>
<pre><code class="lang-auto">rmmod module
or
rmmod module.ko
# Never mind :)
</code></pre>
<p>OK. Now we know what are linux kernel modules, why they are useful and how to load them, We can write a simple module then<br>
it will be standard <em><strong>Hello world!</strong></em> module.</p>
<ul>
<li>Read the comments in code the explain many things.</li>
</ul>
<pre><code class="lang-auto">/* These are standard module include files */
#include &lt;linux/kernel.h&gt;
#include &lt;linux/module.h&gt;
#include &lt;linux/init.h&gt;

/* This is function that will be executed when we load the module */
int __init mod_init(void)
{
	/* Now we see printk function. This is something like
	standard printf in C. But we are working in kernel mode
	so we can't use functions used by user mode programs.
	I will give more information about this function right
	after the code of this module */
	printk(KERN_ALERT "Hello world!\n");

	return 0;
}

/* This function will be executed when we unload the module */
void __exit mod_exit(void)
{
	printk(KERN_ALERT "Bye world\n");
}


/* Here we register mod_init and mod_exit */

/* mod_init and mod_exit functions can have different names they only have to be registered by module_init and module_exit macros */

/* As a parameter of module_init we give function that has to be executed during loading of the module */
module_init(mod_init);

/* As a parameter of module_exit we give function that has to be executed during unloading of the module */
module_exit(mod_exit);

</code></pre>
<p>As promised, I will explain printk function, First thing if you want to "normally" see what printk writes you must load and unload module not in “X” but from standard tty console, So  <code>printk</code> just writes given text to the screen if you load module in “X” mode you won’t see what printk wrote. However you can still see it<br>
by executing command <code>dmesg</code> However, <code>printk</code> was not meant to communicate with user it is rather used as a logging mechanism.  <code>KERN_ALERT</code> is a priority of message to be logged, There are 8 priorities levels each level has its own macro if value of used priority is lower(the lower value it has, the more important is the message)<br>
than console_loglevel the message is written to the screen you can see all macros in <code>linux/kernel.h</code> file(this is relative path from root kernel’s source code directory).</p>
<p>How to compile such a module? We use a special Makefile:</p>
<pre><code class="lang-auto">obj-m += hello.o
all:
	make -C /lib/modules/$(shell uname -r)/build M=${PWD} modules
clean:
	make -C /lib/modules/$(shell uname -r)/build M=${PWD} clean


</code></pre>
<p>I assume that your file with source code of our module is “hello.c” Now we execute <code>make</code> ok we have “hello.ko” file, Load it as <code>root</code> from tty console <code>insmod hello.ko</code><br>
You should see “Hello world!” Now you can unload this module <code>rmmod hello</code> You should see “Bye world!”<br>
You should also include</p>
<pre><code class="lang-auto">```MODULE_LICENSE``` specifies what license is used for this module.
```MODULE_AUTHOR```  specifies who is he author of this module.
```MODULE_DESCRIPTION``` is a short description what the module does.
</code></pre>
<p>Let’s see modified module:</p>
<pre><code class="lang-auto">/* These are standard module include files */
#include &lt;linux/kernel.h&gt;
#include &lt;linux/module.h&gt;
#include &lt;linux/init.h&gt;

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Ormi &gt; ormi.ormi@gmail.com");
MODULE_DESCRIPTION("Hello World");

/* This is function that will be executed when we load the module */
int __init mod_init(void)
{
	/* Now we see printk function. This is something like
	standard printf in C. But we are working in kernel mode
	so we can't use functions used by user mode programs.
	I will give more information about this function right
	after the code of this module */
	printk(KERN_ALERT "Hello world!\n");

	return 0;
}

/* This function will be executed when we unload the module */
void __exit mod_exit(void)
{
	printk(KERN_ALERT "Bye world\n");
}


/* Here we register mod_init and mod_exit */

/* As a parameter of module_init we give function that has to be executed during loading of the module */
module_init(mod_init);

/* As a parameter of module_exit we give function that has to be executed during unloading of the module */
module_exit(mod_exit);

</code></pre>
<p>Let’s compile it again <code>make</code> Now we can see some information about module, Execute the command <code>modinfo hello.ko</code> We can see something like this:</p>
<pre><code class="lang-auto">filename:       hello.ko
description:    Hello World
author:         Ormi &gt; ormi.ormi@gmail.com
license:        GPL
srcversion:     0B4C5D175084D60DBC22242
depends:        
vermagic:       2.6.28-11-generic SMP mod_unload modversions 586 
</code></pre>
<p>One day we will write a module, which source code will be too big to fit in one file. For example it can fit in two files: one.c - two.c, How to compile it into one module? We can use such a Makefile:</p>
<pre><code class="lang-auto">obj-m += big.o
big-objs += one.o two.o

all:
	make -C /lib/modules/$(shell uname -r)/build M=${PWD} modules
clean:
	make -C /lib/modules/$(shell uname -r)/build M=${PWD} clean

</code></pre>
<p>When we compile it with <code>make</code> command, we will get “big.ko” file which is our module <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"> Now you can do some experiments with our modules, try creating something bigger you should be familiar with this because now we are moving<br>
to something more complicated. If you didn’t understand what I wrote you can have problems with next things.</p>
<h2>
<a name="procfs-1" class="anchor" href="https://0x00sec.org#procfs-1"></a>PROCFS</h2>
<p>Linux has a nice feature that helps kernel and modules to communicate with processes <strong>procfs</strong> In most of ditributions you can find it in<br>
/proc directory, There are sub-directories for all processes and some other "files"(for example /proc/version which gives us information about kernel’s version) In this section I will show how to create "files" or "entries" in <strong>procfs</strong>, I will explain what functions and structures we need for our module.</p>
<ul>
<li>
<code>struct proc_dir_entry</code> Each entry in <strong>procfs</strong> is represented by its own <code>proc_dir_entry structure</code> Let’s look at definition of this structure:</li>
</ul>
<pre><code class="lang-auto">struct proc_dir_entry {
        unsigned int low_ino;
        unsigned short namelen;
        const char *name;
        mode_t mode;
        nlink_t nlink;
        uid_t uid;
        gid_t gid;
        loff_t size;
        const struct inode_operations *proc_iops;
        /*
         * NULL proc_fops means PDE is going away RSN or
         * PDE is just created. In either case, e.g. read_proc won't be
         * called because it's too late or too early, respectively.
         *
         * If you're allocating proc_fops dynamically, save a pointer
         * somewhere.
         */
        const struct file_operations *proc_fops;
        struct proc_dir_entry *next, *parent, *subdir;
        void *data;
        read_proc_t *read_proc;
        write_proc_t *write_proc;
        atomic_t count;         /* use count */
        int pde_users;  /* number of callers into module in progress */
        spinlock_t pde_unload_lock; /* proc_fops checks and pde_users bumps */
        struct completion *pde_unload_completion;
        struct list_head pde_openers;   /* who did open, but not release */
};

</code></pre>
<p>We are interested only in following fields:</p>
<ol>
<li>name - name of the entry in profs</li>
<li>mode - who can access the entry(for example 777)</li>
<li>read_proc - pointer to function that manages reading from this file.</li>
<li>count - how many bytes can we write there.</li>
</ol>
<ul>
<li>Let’s look at prototype:</li>
</ul>
<pre><code class="lang-auto">typedef int (read_proc_t)(char *page, char **start, off_t off,
                          int count, int *eof, void *data);
</code></pre>
<p>Here we are interested only in page and count arguments page is pointer to user mode buffer where we have to write data</p>
<pre><code class="lang-auto">write_proc - pointer to function that manages writing to this file. Prototype:
typedef int (write_proc_t)(struct file *file, const char __user *buffer,
                           unsigned long count, void *data);
</code></pre>
<p>We are interested only in buffer and count buffer is pointer to user mode buffer in which there is stored data which has to be written to our entry <code>count</code> - size of this buffer<br>
OK. that’s all I wanted to say about <code>proc_dir_entry</code></p>
<ol start="2">
<li>
<code>create_proc_entry</code> function</li>
</ol>
<p>Let’s look at prototype:</p>
<pre><code class="lang-auto">extern struct proc_dir_entry *create_proc_entry(const char *name, mode_t mode, struct proc_dir_entry *parent);
</code></pre>
<ul>
<li>name - name of entry to be created</li>
<li>mode - this value will be written to mode field of proc_dir_entry structure of create entry</li>
<li>parent - in which sub-directory of /proc we want to create our entry. We give 0 here, because we want to create our entry right in /proc.</li>
</ul>
<p>This function return pointer to <code>proc_dir_entry</code> representing out entry in procfs.</p>
<p>What will our module do?</p>
<ol>
<li>It will create entry named "test_proc".</li>
<li>It will have special buffer our_buf where it will store some data.</li>
<li>When user writes to our entry(for example by command <code>echo hello &gt; /proc/test_proc</code> data written to this file will be stored in our_buf.</li>
<li>When user reads from our entry(for example by command <code>cat /proc/test_proc</code>, module "shows" him the content of our_buf.</li>
</ol>
<p>Next functions we need:</p>
<ol>
<li>
<code>sprintf and snprintf</code>(they are used as standard sprintf and snprintf for user mode programs)</li>
<li>
<code>copy_from_user(void *dst, void *src, int count)</code><br>
This function is used to copy data from user mode buffer(src) to our kernel mode buffer(dst). count bytes are copied.</li>
<li>
<code>remove_proc_entry(char *name, struct proc_dir_entry *parent)</code><br>
name - name of entry we want to delete<br>
parent - in which sub-directory of /proc is entry we want to delete. We give 0 here, because we want to delete entry in /proc.</li>
</ol>
<p>Now let’s take a look at code of our module:</p>
<pre><code class="lang-auto">/* Standard includes for modules */
#include &lt;linux/kernel.h&gt;
#include &lt;linux/module.h&gt;
#include &lt;linux/init.h&gt;

/* for proc_dir_entry and create_proc_entry */
#include &lt;linux/proc_fs.h&gt;

/* For sprintf and snprintf */
#include &lt;linux/string.h&gt;

/* For copy_from_user */
#include &lt;linux/uaccess.h&gt;

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Ormi &gt; ormi.ormi@gmail.com");
MODULE_DESCRIPTION("Simple module using procfs");

static char our_buf[256];

int buf_read(char *buf, char **start, off_t offset, int count, int *eof, void *data)
{
	int len;
	/* For example - when content of our_buf is hello when user executes command cat /proc/test_proc;
	he will see content of our_buf(in our example hello */
	len = snprintf(buf, count, "%s", our_buf);
	return len;
}

/* When user writes to our entry. For example echo aa &gt; /proc/test_ptoc. aa will be stored in our_buf.
Then, when user reads from our entry(cat /proc/test_proc) he will see aa */
static int buf_write(struct file *file, const char *buf, unsigned long count, void *data)
{
	/* If count is bigger than 255, data which user wants to write is too big to fit in our_buf. We don't want
	any buffer overflows, so we read only 255 bytes */	
	if(count &gt; 255)
		count = 255;
	/* Here we read from buf to our_buf */
	copy_from_user(our_buf, buf, count);
	/* we write NULL to end the string */
	our_buf[count] = '\0';
	return count;
}

int __init start_module(void)
{

	/* We create our entry */	
	struct proc_dir_entry *de = create_proc_entry("test_proc", 0666, 0);

	/* Set pointers to our functions reading and writing */
	de-&gt;read_proc = buf_read;
	de-&gt;write_proc = buf_write;

	/* We initialize our_buf with some text. */
	sprintf(our_buf, "hello");

	return 0 ;
}

void __exit exit_module(void)
{
	/* We delete our entry */
	remove_proc_entry("test_proc", NULL);
}

module_init(start_module);
module_exit(exit_module);

</code></pre>
<p>Now, edit Makefile and change hello.o to proc.o (if file with source code of this module is written as proc.c) and compile.<br>
<code>make</code> Then load module <code>insmod proc.ko</code> and test our module <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=12" title=":wink:" class="emoji" alt=":wink:" loading="lazy" width="20" height="20"></p>
<h2>
<a name="notifiers-2" class="anchor" href="https://0x00sec.org#notifiers-2"></a>NOTIFIERS</h2>
<p>Next thing I want to write about is something called "notify chain". There are some events, which are quite important, and when they occur some kernel sub-systems want to be informed about this. Here notify chains come to help us.<br>
We will use some keyboard events as an example and then we will write our first, doing-something module <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"> So:<br>
when user presses a key, kernel "reads" it and then, using notify chain informs all subsystems which want to be informed about pressed key, One of the structures used by notifiers is "notifier_block"<br>
Let’s look at the definition:</p>
<pre><code class="lang-auto">struct notifier_block {
        int (*notifier_call)(struct notifier_block *self, unsigned long x, void *data);
        struct notifier_block *next;
        int priority;
};
</code></pre>
<p>This structure is used to register in notify chains. <code>notifier_call</code> is pointer to function which is called when an event occurs. Priority informs about<br>
priority of that function. Functions with higher priorities are called earlier. However, this field is usually set to 0.<br>
next is pointer to next registered notifier_block, So:</p>
<ul>
<li>An event occurs, Kernel "looks" at head of list of notifier_blocks and executes first registered function. Then it goes where pointer next points and executes function, Then it goes again to next and again executes function. “So how can a module register in keyboard notify chain?”</li>
<li>It creates a notifier_block structure and initializes it. For example:</li>
</ul>
<pre><code class="lang-auto">struct notifier_block nb;
nb.notifier_call = function
</code></pre>
<p>Where function is function which has to be executed when an event occurs(in our example - when a key is pressed).<br>
Registers by register_keyboard_notifer<code>(struct notifier_block *nb)</code> . In our example:<br>
<code>register_keyboard_notifier(&amp;amp;nb);</code></p>
<p>We have to write function which will handle situation when a key is pressed. What are the parameters? As in the prototype:<br>
(struct notifier_block *self, unsigned long stage, void *data);<br>
self - pointer to our notifier_block - we don’t use it<br>
stage - stage of "handling" the pressed key. We do something only when stage is KBD_KEYSYM.<br>
data - pointer to keyboard_notifier_param structure.<br>
In this structure we are interested only in value field. It stores the value of pressed key.</p>
<p>Our module will be very simple random numbers generator. It’s only a toy and can’t be treated seriously <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<pre><code class="lang-auto">/* Standard includes for modules */
#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;
#include &lt;linux/init.h&gt;
/* For keyboard_notifier param etc. */
#include &lt;linux/keyboard.h&gt;
/* notifier_block etc. */
#include &lt;linux/notifier.h&gt;
/* create_proc_entry etc. */
#include &lt;linux/proc_fs.h&gt;
/* sprintf */
#include &lt;linux/string.h&gt;

MODULE_LICENSE("GPL") ;

static unsigned long long random_num ;

/* Our function that will be executed when a key is pressed */
static int kbd_notify(struct notifier_block *self, unsigned long stage, void *data)
{
	struct keyboard_notifier_param *param = data; /* Pointer to keyboard_notifier_param */
	int value = param-&gt;value - 0xf000; /* Value can't be to big */
	/* We calculate our random number by random_num*key_value
	This is really dummy and improfessional, but this module
	only has to show how to use notifiers */	
	/* Value must fit in long long :) */
	if(random_num &gt; 1000000000)
		random_num -= 10*value;	
	else	
		random_num  *= value;
	return NOTIFY_DONE ;
}

/* We prepare our notifier_block structure. kbd_notify is function handling events */
static struct notifier_block kbd_nb = { .notifier_call = kbd_notify, } ;

/* We register in notify chain */
static void handler_init(void)
{
	register_keyboard_notifier(&amp;kbd_nb) ;
}

/* We write this random number to user mode buffer */
static int random_read(char *buf, char **start, off_t off, int count, int *peof, void *data)
{
	int len = sprintf(buf, "%llu", random_num);

	return len ;
}

/* We create entry in procfs */
static void proc_init(void)
{
	struct proc_dir_entry *de = create_proc_entry("random_simple", 0444, 0);
	de-&gt;read_proc = random_read;
}

static int __init random_init(void) 
{
	handler_init();
	proc_init();
	random_num = 1;
	

	return 0 ;
}

static void __exit random_exit(void)
{
	remove_proc_entry("random_simple", 0);
	unregister_keyboard_notifier(&amp;kbd_nb);
}


module_init(random_init) ;
module_exit(random_exit) ;
/*  Now you can compile it and test. */
</code></pre>
<h2>
<a name="end-3" class="anchor" href="https://0x00sec.org#end-3"></a>END</h2>
<p>That’s all for now. I hope you learned something from this tutorial and became interested in linux kernel. If you want to start browsing kernel’s code,<br>
I can give an advise. I began my adventure with linux kernel by writing linux kernel modules one day I got an idea to write a <a href="https://0x00sec.org/t/writing-a-simple-rootkit-for-linux/29034">simple rootkit</a>, I wanted my rootkit to be difficult to detect to achieve this i had to know more organisation of kernel’s structures, Firstly, I analysed how <code>procfs</code> works and how new entries are created etc.</p>
            <p><small>4 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/the-linux-kernel-modules-programming/30639">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/the-linux-kernel-modules-programming/30639</link>
          <pubDate>Thu, 11 Aug 2022 00:02:10 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-30639</guid>
          <source url="https://0x00sec.org/t/the-linux-kernel-modules-programming/30639.rss">The linux kernel modules programming</source>
        </item>
        <item>
          <title>Threat Hunting and Mitigation in *Nix/macOS Environments. (Please comment and tell me what I&#39;m missing. This is initial work)</title>
          <dc:creator><![CDATA[hartescout]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>Written below are the beginnings of my research into hunting in the Linux environment. This is very high level for the time being and I have not yet gone into specifics as far as behavioral analytics and detections of certain families of malware. Working on it.</p>
<hr>
<p>Linux/macOS hunting operations. Focusing on suspicious activity tied to the MITRE ATT&amp;CK Framework allows researchers to simulate techniques and search for compromise based on activity observed in a controlled environment. Another technique attackers use is deploying Root Kits on victim machines providing access at either the kernel or user level to continue operations. In August of 2020 an advisory regarding the Drovorub RootKit was issued. This rootkit runs kernel modules allowing full access to the system, installing a file transfer and port forwarding tool. It specifically takes advantage of systems that have yet to update to more current Linux kernel software. There are other readily available rootkits such as Puzek and Reptile which provide interactive control using function hooking and syscall hooking.</p>
<ul>
<li>Command Line: o <code>sc!\^2a</code> o <code>*cs02</code> o `*/proc/net/tcp , */proc/net/udp , */proc/net/udp6</li>
<li>Syslog Entries o mod_security: Access denied<br>
o ModSecurity: Access denied<br>
o mod_security-message: Access denied</li>
</ul>
<hr>
<p>Recent vulnerabilities within Linux including Kernel 4.18.0-240.el8 and previous versions dating back to 2006 that allow for post-exploitation root access. These vulnerabilities were shown to be easily exploited in the current Red Hat Linux distributions and other platforms that utilize RHEL structure. Debian-based systems are vulnerable as well utilizing a different set of command-line arguments in the POC provided. The SCSI subsystem and the RDMA/RDMA-Core package use as a dependency is the focus of these CVE’s and is present on RHEL, CentOS, and Fedora distributions. They are also commonly installed on Ubuntu and Debian systems as a dependency.</p>
<p>While kernel exploits vary and do not necessarily indicate a need for immediate response, CVE- 2021-27363 , CVE-2021-27364, and CVE-2021-27365 may be utilized as part of post-exploitation to assist threat actors in movement through the killchain.</p>
<ul>
<li>CVE-2021-27363 - Access Denial and Information Disclosure<br>
o RHEL 7 and 8 and all previous versions running the package Kernel or Kernel-rt.
<ul>
<li>
<img src="https://0x00sec.org/images/emoji/twitter/black_small_square.png?v=9" title=":black_small_square:" class="emoji" alt=":black_small_square:"> show_transport_handle() in drivers/scsi/scsi_transport_iscsi.c</li>
<li>
<img src="https://0x00sec.org/images/emoji/twitter/black_small_square.png?v=9" title=":black_small_square:" class="emoji" alt=":black_small_square:"> LIBISCSI kernel module loads couple with system restart within focused timeframe. If not required by default this may indicate malicious behavior</li>
</ul>
</li>
<li>CVE-2021-27364 - Out-of-Bounds Read<br>
o RHEL 6, 7, 8 and all previous versions running the package Kernel, Kernel-rt, or Kernel-alt<br>
<img src="https://0x00sec.org/images/emoji/twitter/black_small_square.png?v=9" title=":black_small_square:" class="emoji" alt=":black_small_square:"> show_transport_handle() in drivers/scsi/scsi_transport_iscsi.c <img src="https://0x00sec.org/images/emoji/twitter/black_small_square.png?v=9" title=":black_small_square:" class="emoji" alt=":black_small_square:"> Specific user netlink message.</li>
<li>CVE-2021-27365 - Heap Buffer Overflow<br>
o RHEL 6, 7, 8 and all previous versions tunning the package Kernel, Kernel-rt, or Kernel-alt<br>
<img src="https://0x00sec.org/images/emoji/twitter/black_small_square.png?v=9" title=":black_small_square:" class="emoji" alt=":black_small_square:"> Specific user netlink to iSCSI, kstrdup/sprintf pattern.</li>
</ul>
<hr>
<p><a href="https://gtfobins.github.io/" rel="noopener nofollow ugc">GTFOBins</a> is a well-known resource for defenders similar to Windows <a href="https://lolbas-project.github.io/" rel="noopener nofollow ugc">LOLBAS</a> identify processes and command-line arguments with the potential for malicious use hidden behind normal activity. Queries for Linux machines are crafted to identify baseline and anomalous behavior on these clusters. Rootkits are another tool employed by adversaries accomplishing goals like dropping payloads, establishing C2 communications, and/or acting as a proxy for botnets. In particular, I’ve focused one of the more recent rootkits distributed called Drovorub. Among the capabilities above it employs embedded file transfer for exfiltration and operations. An open avenue of approach for any rootkit takes advantage of outdated an outdated kernel and modules.</p>
<p>**Carbon Black Response<br>
cmdline:history or cmdline:‘rm ~/.bash_history’ or cmdline:‘echo " " &gt; ~/.bash_history’ or cmdline:"cat /dev/null &gt; ~/.bash_history’ or cmdline:‘ln -sf /dev/null ~/.bash_history’ or cmdline:‘truncate -s0 ~/.bash_history’ or cmdline:‘unset HISTFILE’ or cmdline:‘export HISTFILESIZE=0’ or cmdline:‘history -c’</p>
<p>**Chronicle YARA-L 2.0</p>
<p>Usage of SU or SUDO</p>
<pre><code class="lang-auto">rule usage_of_sudo_or_su {
meta: 
description = "Looks for usage of sudo or su command"
author = "@is_henderson"
date = "2021-02-15"
reference = "reference"

events: 
(
$e1.metadata.event_type = "PROCESS_LAUNCH" and
(
re.regex($e1.principal.process.command_line, `.*sudo\s`) nocase or
re.regex($e1.principal.process.command_line, `.*su\s`) nocase
)
)

condition:
$e1
}
</code></pre>
<p>Usage of Package Manager</p>
<p>While usage is not inherently malicious, actors may use the package manager to install various tools needed during the campaign.</p>
<pre><code class="lang-auto">rule usage_of_yum_rpm {
meta:
author = "@is_henderson"
description = "Rule to detect package installation" 
date = "2021-02-15"

events:
(
$e1.metadata.event_type = "PROCESS_LAUNCH" and
(
re.regex($e1.principal.process.command_line, `.*sudo yum install\s.*`) nocase or
re.regex($e1.principal.process.command_line, `.*su bash yum install\s.*`) nocase or
re.regex($e1.principal.process.command_line, `.*sudo rpm install\s.*`) nocase or
re.regex($e1.principal.process.command_line, `.*su bash rpm install\s.*`) nocase
)
)
condition:
$e1
}
</code></pre>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/threat-hunting-and-mitigation-in-nix-macos-environments-please-comment-and-tell-me-what-im-missing-this-is-initial-work/25446">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/threat-hunting-and-mitigation-in-nix-macos-environments-please-comment-and-tell-me-what-im-missing-this-is-initial-work/25446</link>
          <pubDate>Wed, 31 Mar 2021 20:59:48 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-25446</guid>
          <source url="https://0x00sec.org/t/threat-hunting-and-mitigation-in-nix-macos-environments-please-comment-and-tell-me-what-im-missing-this-is-initial-work/25446.rss">Threat Hunting and Mitigation in *Nix/macOS Environments. (Please comment and tell me what I&#39;m missing. This is initial work)</source>
        </item>
        <item>
          <title>Load-Time Function Hijacking ( via Shared object injection)</title>
          <dc:creator><![CDATA[0x0fy]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>Hello guys, welcome to my writeup. I will get to the subject without further ado</p>
<p><strong>First of all, we need to know;</strong></p>
<p><em>Load-Time:</em> Before a software starts running, it has a load time. It installs its requirements until the program is fully functional (Libraries, Memory Regions)</p>
<p><em>Function Hooking:</em> Replacing or editing a function given in the software with a fake function.</p>
<p><strong>See the Functions used by a software</strong>;</p>
<p>You can use the ftrace binarys used by the majority in linux to see the functions used in the software.</p>
<p><strong>Let’s Start</strong><br>
Now I assume that we open linux and compile the following code:</p>
<blockquote>
<pre><code>#include &lt;stdio.h&gt;

int main(){

  puts("Hello world !");

}
</code></pre>
</blockquote>
<blockquote>
<p>Compiling : gcc hello.c -o hello</p>
</blockquote>
<p>What we’re going to do now is to replace this set function with the fake sets we provided at load time. Thus, the function we wrote will work, not the function written in the program.</p>
<p><strong>Writing the Fake library to hook the function:</strong></p>
<p>For the puts function, the creation of the fake library is as follows:</p>
<pre><code class="lang-auto">     
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;dlfcn.h&gt;
 
int puts(const char *message) {
 
  int (*new_puts)(const char *message);
 
  new_puts = dlsym(RTLD_NEXT, "puts");
 
  return new_puts("Hijacked!");
}

</code></pre>
<p>The library is simply puts (); Creates a fake of the function dlsym (); allows it to replace the original thanks to its function.</p>
<p>The dlsym(); function takes two arguments. The first of these, the RTLD_NEXT enum, tells the dynamic loader API part to return to the next instance linked with the 2nd argument. The last argument is asking for the name of the sample to be returned to, and this is the puts function, which we will substitute forged.</p>
<blockquote>
<p>return new_puts(“Hijacked!”);</p>
</blockquote>
<p>Here, puts (); The function that will replace the function is specified.</p>
<p><strong>Compiling the library and transferring it to LD_PRELOAD</strong></p>
<p>Compiling The Library :</p>
<pre><code class="lang-auto">gcc evil_library.c -o evil_library.so -fPIC -shared -ldl -D_GNU_SOURCE
</code></pre>
<p>The <strong>LD_PRELOAD</strong> environment variable can execute the library we provided at the moment the running software starts, so that we can manipulate the software.</p>
<p>In summary, when we assign the .Library path to the LD_PRELOAD environment variable, the library is enclosed in the running file.</p>
<p>Export our library to <strong>LD_PRELOAD</strong> environment variable with <strong>export command</strong></p>
<pre><code class="lang-auto">export LD_PRELOAD="/home/mehmet/evil_library.so"
</code></pre>
<p>Now, when our program is run, instead of “Hello world”, “Hijacked!” He will give our message.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/0/0cebd3d73710bbe455523d234301d6f5cdf6394c.jpeg" data-download-href="/uploads/short-url/1QiZeS0LvLlOGX53kTTkg0sJ8Ze.jpeg?dl=1" title="" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0cebd3d73710bbe455523d234301d6f5cdf6394c_2_690x499.jpeg" alt="" data-base62-sha1="1QiZeS0LvLlOGX53kTTkg0sJ8Ze" width="690" height="499" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0cebd3d73710bbe455523d234301d6f5cdf6394c_2_690x499.jpeg, https://0x00sec.s3.amazonaws.com/optimized/2X/0/0cebd3d73710bbe455523d234301d6f5cdf6394c_2_1035x748.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/0/0cebd3d73710bbe455523d234301d6f5cdf6394c.jpeg 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0cebd3d73710bbe455523d234301d6f5cdf6394c_2_10x10.png"></a></div><p></p>
            <p><small>5 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707</link>
          <pubDate>Fri, 14 Aug 2020 21:11:26 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-22707</guid>
          <source url="https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707.rss">Load-Time Function Hijacking ( via Shared object injection)</source>
        </item>
        <item>
          <title>Windows Terminal PenTesting</title>
          <dc:creator><![CDATA[blankdash]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>Hello everyone,<br>
This article is going to focus on setting up WSL 2 and gaining a full GUI access to Kali Linux<br>
along with Windows terminal configuration.</p>
<p>Youtube: <a href="https://www.youtube.com/watch?v=8sowYFeD5P0" class="inline-onebox-loading" rel="nofollow noopener">https://www.youtube.com/watch?v=8sowYFeD5P0</a></p>
<p>Link to Original post: <a href="http://blankdash.ninja/2020/07/27/windows-terminal-pentesting/" class="inline-onebox-loading" rel="nofollow noopener">http://blankdash.ninja/2020/07/27/windows-terminal-pentesting/</a></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d5b813bd2a63c6f666144b687348120a3287788b.png" alt="" data-base62-sha1="uuE5f8T0uOplTiaMoE5yjK8Ovtp"></p>
<p>May 2019, Microsoft announced about their windows terminal which has a lot of features<br>
focusing on user interaction with the terminal and managing multiple terminals.<br>
Original Link to Announcement: <a href="https://devblogs.microsoft.com/commandline/introducingwindows-terminal/" class="inline-onebox-loading" rel="nofollow noopener">https://devblogs.microsoft.com/commandline/introducingwindows-terminal/</a></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/f2ac6864fbeef8d834620da3f20f128c0b3bde17.png" alt="" data-base62-sha1="yCMVEidiTAhYCxlQDxfEQmZuhb9"></p>
<p>Links to download Windows Terminal:<br>
</p><aside class="onebox whitelistedgeneric">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon">
      <a href="https://github.com/microsoft/terminal/releases" target="_blank" rel="nofollow ugc noopener">GitHub</a>
  </header>
  <article class="onebox-body">
    <img src="https://repository-images.githubusercontent.com/100060912/dc77b180-764a-11e9-9e12-aace7d0ecd7d" class="thumbnail">

<h3><a href="https://github.com/microsoft/terminal/releases" target="_blank" rel="nofollow ugc noopener">Releases · microsoft/terminal</a></h3>

<p>The new Windows Terminal and the original Windows console host, all in the same place! - microsoft/terminal</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>
<aside class="onebox whitelistedgeneric">
  <header class="source">
      <a href="https://www.microsoft.com/en-in/p/windows-terminal/9n0dx20hk701?rtc=1&amp;activetab=pivot:overviewtab" target="_blank" rel="nofollow ugc noopener">Microsoft Store</a>
  </header>
  <article class="onebox-body">
    <img src="https://store-images.s-microsoft.com/image/apps.34065.13926773940052066.8978812d-6c65-429b-835d-2cecd178e2d7.3b5795a0-e24b-46a4-bfb3-f2d832f1d7e7?w=120&amp;h=120&amp;q=60" class="thumbnail">

<h3><a href="https://www.microsoft.com/en-in/p/windows-terminal/9n0dx20hk701?rtc=1&amp;activetab=pivot:overviewtab" target="_blank" rel="nofollow ugc noopener">Get Windows Terminal - Microsoft Store en-IN</a></h3>

<p>Download this app from Microsoft Store for Windows 10. See screenshots, read the latest customer reviews, and compare ratings for Windows Terminal.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
<p>We are going to take a look into how to set up the kali machine in windows terminal.<br>
<strong>STEP 1:</strong><br>
visit the microsoft store and install the windows terminal.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c8a4ee54519ff45fea7298d4beafa64adfcb3e1a.png" alt="" data-base62-sha1="sCYR8AhQ1rVJpEFk6Y22UAFjEx4"></p>
<p><strong>STEP 2:</strong><br>
Open Windows Terminal from the start menu, you will be able to open Powershell &amp; CMD by<br>
default.<br>
In order to have any other linux distro such as kali linux, you need to have it installed for<br>
which WLS2 is required.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/bc762d553fa8982dc7d2cfbd272f2869d166217c.png" alt="" data-base62-sha1="qTcXniLiva1G9WXm4SrC23PBPas"></p>
<p><strong>STEP 3:</strong><br>
Enable WSL2 &amp; Install Kali linux from microsoft store.<br>
To install WSL2 open powershell as admin and run the following commands.<br>
dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all<br>
/norestart<br>
dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b58c7b740a947f47ea67a75d0e65a7d4c7873a37.png" alt="" data-base62-sha1="pU3p2PeEpeyKhNLC1e47k4j0EL5"></p>
<p><strong>STEP 4:</strong><br>
Open Kali Linux or Ubuntu that you have installed from the menu</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/27697717d6ef9cf84614fc8352eb94aa3afa9471.png" alt="" data-base62-sha1="5CEzVE3s5Xi0e4yHZyI8Pk2eQff"></p>
<p>Input the user name and password to configure your device.<br>
Make sure to update your machine by running the following commands<br>
<strong>sudo -i<br>
sudo apt-get update &amp;&amp; sudo apt-get upgrade -y</strong></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d2ce1eb771057f8d314870b7e2de50a36642f52d.png" alt="" data-base62-sha1="u4RSudx4v8Xg3U2hEmmlKDPZC0J"></p>
<p><strong>STEP 5:</strong><br>
Setting up the desktop environment, you can install any Desktop Environment you want but<br>
we are going to focus in XFCE.<br>
Kali Linux Doc for DE (Reference)<br>
</p><aside class="onebox githubgist">
  <header class="source">
      <a href="https://gist.github.com/jayluxferro/5cb6ee45726bd30264918df2b0553b70" target="_blank" rel="nofollow ugc noopener">gist.github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://gist.github.com/jayluxferro/5cb6ee45726bd30264918df2b0553b70" target="_blank" rel="nofollow ugc noopener">https://gist.github.com/jayluxferro/5cb6ee45726bd30264918df2b0553b70</a></h4>
<h5>Kali_Desktop_Environments_Installation_and_Removal.md</h5>
<pre><code class="Markdown">----
## XFCE Desktop ##
----
### How to install XFCE Desktop Environment in Kali Linux:
Command:

```apt-get install kali-defaults kali-root-login desktop-base xfce4 xfce4-places-plugin xfce4-goodies```

### How to remove XFCE in Kali Linux:
Command:</code></pre>
This file has been truncated. <a href="https://gist.github.com/jayluxferro/5cb6ee45726bd30264918df2b0553b70" target="_blank" rel="nofollow ugc noopener">show original</a>

<p>
</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
<p>Open your kali linux terminal and run the following commands:<br>
<strong>sudo apt install -y xrdp<br>
apt-get install kali-defaults kali-root-login desktop-base xfce4 xfce4-places-plugin xfce4-<br>
goodies</strong></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c44abefbb7fd6e9ac4a270fbfecf96a897048e54.png" alt="" data-base62-sha1="s0tJ3XdczdZxW02078nbAZqsX3e"></p>
<p><strong>STEP 6:</strong><br>
Setting up RDP protocol to connect to an RDP session using XORG<br>
inorder to set up the rdp connection follow the steps below<br>
<strong>sudo cp /etc/xrdp/xrdp.ini /etc/xrdp/xrdp.ini.bakup<br>
sudo sed -i ‘s/3389/3390/g’ /etc/xrdp/xrdp.ini<br>
sudo sed -i ‘s/max_bpp=32/#max_bpp=32\nmax_bpp=128/g’ /etc/xrdp/xrdp.ini<br>
sudo sed -i ‘s/xserverbpp=24/#xserverbpp=24\nxserverbpp=128/g’ /etc/xrdp/xrdp.ini<br>
echo xfce4-session &gt; ~/.xsession</strong></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/09c13e0533fbb44c37539ad0566c454a2415fc55.png" alt="" data-base62-sha1="1oijE5IkYMGfqt7bz6oZz0ymWvX"></p>
<p><strong>STEP 7:</strong><br>
Configuring the XFCE DE<br>
We need to edit the startwm.sh to get xfce up &amp; running<br>
comment the following lines in the startwm.sh file:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/abec6c3453b52cb144eb45ecc1ca0dccdec4e255.png" alt="" data-base62-sha1="owUbcz8AvFjsINqM4UxEdeeN4Tr"></p>
<h5><strong># test -x /etc/X11/Xsession &amp;&amp; exec /etc/X11/Xsession</strong></h5>
<h5><strong># exec /bin/sh /etc/X11/Xsession</strong></h5>
<p>add the following lines in the startwm.sh:</p>
<h4><strong># xfce</strong></h4>
<h5><strong>startxfce4</strong></h5>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c9d621c48c0470f15b1389578523f5499a53459d.png" alt="" data-base62-sha1="sNwKjFiM6efyY9ltE3mfRGIe1Ep"></p>
<p>Start the RDP service:<br>
<strong>sudo /etc/init.d/xrdp start</strong></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/37ee3e0801ef0db6e776cf7f400cf64781cf6878.png" alt="" data-base62-sha1="7YMGWCrycOffYSzP5B3QGJSPNFu"></p>
<p><strong>STEP 8:</strong><br>
Connect to RDP<br>
Open windows RDP Client and connect to localhost:3390 which we have configured in<br>
the linux device.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/82d06d1a5e0c0251aad136e5225bb348ed750c4c.png" alt="" data-base62-sha1="iFeCzJ1oC8uCj1UJCMrkbuf47qk"></p>
<p>Input the user name and password of kali linux to login</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c0a188cdb413791ad9a2a752ffab7f6b59d4b990.png" alt="" data-base62-sha1="ru5L82WTRZfYdA5vEFUkuXGE00g"></p>
<p>Once done you will be logged into the Kali RDP session running on your localhost</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/daeb93c80caa317b07d53d2720465bed47de4c78.png" alt="" data-base62-sha1="veEOfGU4VOOoFyfJ47MZ1TyYPDq"></p>
<p>you need to remember that this ia a base install of kali linux that we have installed in<br>
which we don’t really have a lot of pre installed tools that you might find in a regular kali install. However, i am not a person that uses every tool in kali linux either for which this<br>
could be a potential regular use device for my workflow.</p>
<p><strong>STEP 9:</strong><br>
Configuring Kali linux to open in windows terminal<br>
Once you are done setting up kali linux you will find it in your windows terminal</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/ac3c47530c3d3b6f3e92630f695b928e7c4cd2c6.png" alt="" data-base62-sha1="ozFgOFq7Xjkof9hoL1gM1VlpO5w"></p>
<p>If you do not find it there all you need to do is add it the settings file, when you click on<br>
the settings icon on windows terminal it gives you a config file to which you can add the<br>
following lines, along with the guid, finding the guid:<br>
open kali linux and run the following commands to install the program and run the<br>
program.<br>
<strong>sudo apt-get install uuid-runtime</strong><br>
<strong>uuidgen</strong></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0f6858279d50fd0383d5725b87ae58486a511aed.png" alt="" data-base62-sha1="2ciIz5otxxS2C0IhRIzPnkZ8I7X"></p>
<p>Note down the number and add it to the setting file as follows</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/1d3c1e012eabd78789672ed2dcb5a588ffb574e7.png" alt="" data-base62-sha1="4aCE7GNgghtxWpDacnsQibZ2YJN"></p>
<p>Once adding all the informatin, you can save the file Note: “GUID is the ID you<br>
obtained from kali linux”<br>
you will not find kali linux in your windows terminal.</p>
<p><strong>STEP 10:</strong><br>
Theming the Windows Terminal:<br>
Windows terminal has a bunch of default custom themes that you can make use off, the<br>
link to the official documentation can be found below.<br>
Doc: <a href="https://docs.microsoft.com/en-us/windows/terminal/customize-settings/colorschemes" class="inline-onebox-loading" rel="nofollow noopener">https://docs.microsoft.com/en-us/windows/terminal/customize-settings/colorschemes</a></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/efc1169af956a5acd7cc4055b5cce59010ff099f.png" alt="" data-base62-sha1="ycXNVfJvJdRzYk8wJGaAyrBTe2P"></p>
<p>Choose a color from the above link, once you open settings you will have to add the<br>
name of the theme you have chosen like this:<br>
<strong>“colorScheme”: “One Half Dark”,</strong></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/69cb105400d546d0683062111b2005fcba0b5ee2.png" alt="" data-base62-sha1="f5TcbvJz4ieqR7nALb71UhMCldU"></p>
<p>Save the file and now you will find your kali linux terminal themed, you can do the<br>
same to your other profiles such as CMD, Powershell, etc.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/54e3805a628f86dd718d43ae1e3aeabf7230d49b.png" alt="" data-base62-sha1="c6XwFGOaOx880DjXVlznNm1DEld"></p>
<p>As you can see that we have an neat terminal and a GUI if its required, since i am gonna<br>
be spending most of my time in the terminal.<br>
<strong>Thank you for reading, hope it was useful, please consider subscribing.<br>
– blankdash</strong></p>
            <p><small>5 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/windows-terminal-pentesting/22448">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/windows-terminal-pentesting/22448</link>
          <pubDate>Mon, 27 Jul 2020 16:38:09 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-22448</guid>
          <source url="https://0x00sec.org/t/windows-terminal-pentesting/22448.rss">Windows Terminal PenTesting</source>
        </item>
        <item>
          <title>ZSH Tricks and Aliases to Level up [Discussion]</title>
          <dc:creator><![CDATA[pry0cc]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>This is a continuation of <a href="https://0x00sec.org/t/useful-aliases-in-bash/829" class="inline-onebox">Useful Aliases in bash</a>, but it’s 2020, and I have a bunch of aliases and functions I’ve been using to make my general life easier.</p>
<p>I use ZSH, but these additions can be transposed pretty easily to any shell.</p>
<p>In my <code>.zshrc</code>, the first trick I use is exporting wordlists, I’ve spoken about this before but I think it’s important to reiterate to those who haven’t used variables for common paths how helpful it can be.e</p>
<pre><code class="lang-auto">export BIG="~/Lists/SecLists/Discovery/Web-Content/big.txt"
export WEB="~/Lists/SecLists/Discovery/Web-Content/"
export DNS="~/Lists/SecLists/Discovery/DNS/bitquark-subdomains-top100000.txt"
export DIRS_LARGE="~/Lists/SecLists/Discovery/Web-Content/raft-large-directories.txt"
export DIRS_SMALL="~/Lists/SecLists/Discovery/Web-Content/raft-small-directories.txt"
export FILES_LARGE="~/Lists/SecLists/Discovery/Web-Content/raft-large-files.txt"
export FILES_SMALL="~/Lists/SecLists/Discovery/Web-Content/raft-small-files.txt"
export SECLISTS="~/Lists/SecLists/"
</code></pre>
<p>This means that I can do things such as <code>ffuf -ac -w $FILES_LARGE https://host.com/</code>, and not have to write out the entire path.</p>
<p>The next thing I have in my zshrc is:</p>
<pre><code class="lang-auto">alias hades="axiom-boxes new hades &amp;&amp; axiom-init hades --restore=hades &amp;&amp; axiom-ssh hades --tmux &amp;&amp; axiom-backup hades &amp;&amp; axiom
-rm hades -f"
</code></pre>
<p>This is a one-liner to start a VPS with my new tool, <a href="https://github.com/pry0cc/axiom/">Axiom</a>, a tool used for managing dynamic infrastructure. This one-liner will initialize a new instance, restore the last backup, and drop me into a tmux sessoin. Once I detach from the session, it will backup the machine (just the changes) and delete the box. As I only get charged when the machine is on, I can have multiple machines that I only initialize when I need it.</p>
<p>The beauty of dynamic infrastructure too is that I can spin this same machine up in any region at a moments notice, got a target that is located in San Francisco? Let me just tear down and put back up my scanning box in SFO2, oh we need to test London too? I can run</p>
<pre><code class="lang-auto">axiom-backup hades
axiom-region select lon1 &lt;- work in progress -&gt;
axiom-init hades-london --restore=hades
</code></pre>
<p>And then I have two identical machines, one in London, and one in San Francisco, when I’m done, I can tear them both down and back up their data. Should I want to restore my personal box to my work Digital Ocean for further work, I can do that too.</p>
<p>Eventually, I’m looking to expand to other cloud providers, I’m essentially trying to make portable cloud machine, where you control the data because you can just stop paying the provider and cancel the account at a moments notice.</p>
<p>But those are my handy aliases, this discussion is not just about me, what are your favourite aliases? And do we have any windows hackers on here with their shell tweaks? Share them all!</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/zsh-tricks-and-aliases-to-level-up-discussion/21760">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/zsh-tricks-and-aliases-to-level-up-discussion/21760</link>
          <pubDate>Sat, 13 Jun 2020 19:53:53 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-21760</guid>
          <source url="https://0x00sec.org/t/zsh-tricks-and-aliases-to-level-up-discussion/21760.rss">ZSH Tricks and Aliases to Level up [Discussion]</source>
        </item>
        <item>
          <title>Why you should learn Ansible</title>
          <dc:creator><![CDATA[L3akM3-0day]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <h1>Introduction</h1>
<p>Hi everyone ! It’s been a while since I have write something here.<br>
I think that my last post was in 2017 !</p>
<p>So today, I wanted to write you a little article about <strong>Ansible</strong></p>
<p><strong>Ansible</strong> is one of my favorite tool, I use it for automation in my current job but you can use <strong>Ansible</strong>  to automate a lot of things !</p>
<p><span alt="image" data-base62-sha1="y1LziWEYtBwJqXQczGrPzNodjjG" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Here are some example of things you can automate with <strong>Ansible</strong> :</p>
<ul>
<li>Automate a new installation of Arch on your new laptop</li>
<li>Easily deploy a Web server on the cloud</li>
<li>Create reusable server for hacking</li>
<li>Create a Red teams infrastructure</li>
<li>etc …</li>
</ul>
<h1>Install Ansible</h1>
<p>Ansible is a tool written in Python, to install ansible you will need to install Python and pip</p>
<p>Debian :<br>
<code>sudo apt install python3 python3-pip</code></p>
<p>Or Arch :<br>
<code>pacman -S python3 python3-pip</code></p>
<p>If you have python and pip install you can install <strong>Ansible</strong> with the following command :</p>
<p><code> pip3 install --user ansible</code></p>
<p>When the installation is done, you can test that ansible is correctly installed with the following commands :</p>
<pre><code class="lang-bash">ansible -m ping 127.0.0.1
</code></pre>
<p>You should have the following output :</p>
<pre><code class="lang-bash">ansible -m ping 127.0.0.1
[WARNING]: No inventory was parsed, only implicit localhost is available
127.0.0.1 | SUCCESS =&gt; {
    "changed": false,
    "ping": "pong"
}
</code></pre>
<p>Great ! You run your first <strong>Ansible</strong> command.</p>
<p><code>ansible -m ping 127.0.0.1</code> will just do a ping to 127.0.0.1</p>
<p><em>But I can run ping 127.0.0.1 to do that !</em></p>
<p>Well, it’s time to run more useful module</p>
<h1>Ansible ad-hoc command</h1>
<p><strong>Ansible</strong> have two “mode” :</p>
<ul>
<li>ad-hoc command</li>
<li>playbook</li>
</ul>
<p><strong>Ansible ad-hoc</strong> command can run single module on multiple host</p>
<p><strong>Ansible playbooks</strong> are yaml files with multiple tasks that should be executed on a given host or group of hosts</p>
<p>Let’s look at how ansible ad-hoc command work first</p>
<h3>Creating an Inventory file</h3>
<p>Let’s pretend we want to install an nginx server on 4 Raspberry pi in our network :</p>
<p>We have 4 Raspberry pi</p>
<pre><code class="lang-auto">raspberry1: 10.0.0.1
raspberry2: 10.0.0.2
raspberry3: 10.0.0.3
raspberry4: 10.0.0.4
</code></pre>
<p>The user to log into our raspberry pi is <code>pi</code> and we have our ssh key in the authorize_hosts</p>
<p>You can use : <code>ssh-copy-id -i ~/.ssh/id_rsa.pub pi@10.0.0.1</code> to copy your key in the authorized_keys</p>
<p>So let’s create a new file named inventory.ini with the following content :</p>
<pre><code class="lang-ini">[Raspberry] # This line is the name we give to our group of host
10.0.0.1 # This is one of our Raspberry Host ip
10.0.0.2
10.0.0.3
10.0.0.4

[Raspberry:vars] # We can assign variable to ansible
ansible_user=pi # Here the username to connect to our raspberry
</code></pre>
<p><em>PS: Inventory file can be written in .ini or .yml, to keep this tutorial simple I have decided to write the inventory in .ini</em></p>
<p>So now that we have our inventory file we can try to run the last command we used against our <code>Raspberry</code> group</p>
<pre><code class="lang-bash">ansible -m ping -i inventory.ini Raspberry
</code></pre>
<p>you will have the following output :</p>
<pre><code class="lang-auto"> ansible -m ping -i inventory.ini Raspberry
10.0.0.1 | SUCCESS =&gt; {
  "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python"
    },
    "changed": false,
    "ping": "pong"
}
10.0.0.2 | SUCCESS =&gt;  {
  "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python"
    },
    "changed": false,
    "ping": "pong"
}
10.0.0.3 | SUCCESS =&gt; {
  "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python"
    },
    "changed": false,
    "ping": "pong"
}
10.0.0.4 | SUCCESS =&gt;  {
  "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python"
    },
    "changed": false,
    "ping": "pong"
}
</code></pre>
<p>Now, we know that we can reach all 4 Raspberry pi, let’s install nginx :</p>
<p><code>ansible -m apt -a "name=nginx state=present" -i inventory.ini Raspberry --become</code></p>
<p>So here we use the apt module : <a href="https://docs.ansible.com/ansible/latest/modules/apt_module.html" rel="nofollow noopener">https://docs.ansible.com/ansible/latest/modules/apt_module.html</a></p>
<p>we give extra args to apt</p>
<p><strong>name</strong>: is the name of the package we want to install here: <em>nginx</em><br>
<strong>state</strong>: is the state of the package, here we want to have nginx present on our raspberry<br>
<strong>–become</strong>: is use to escalate to root to install nginx</p>
<p>When you run the command for the first time, the output will be</p>
<pre><code class="lang-auto">192.168.1.34 | CHANGED =&gt; {
  ...
}
</code></pre>
<p>If you run the command multiple time, the output will always be</p>
<pre><code class="lang-auto">192.168.1.34 | SUCCESS =&gt; {
    "cache_update_time": 1586104797,
    "cache_updated": false,
    "changed": false
}
</code></pre>
<p>Because nginx is already install, ansible will not try to reinstall nginx if the package is in the state you set before</p>
<p>if you want to uninstall nginx just replace present by absent.</p>
<h1>Ansible playbook</h1>
<p>Now that we have run some easy command to install nginx on our raspberry let’s make our first playbook</p>
<p>An Ansible playbook is a set of action use to run automate task, you can use all the module you used before in the ad-hoc command</p>
<p>let’s make a new directory</p>
<pre><code class="lang-auto">mkdir my-playbook
</code></pre>
<p>Create a new inventory file inside your new folder with the following content :</p>
<pre><code class="lang-auto">[localhost]
127.0.0.1
</code></pre>
<p>Now, let’s write an ansible playbook to install useful tools for CTF or HackTheBox machine</p>
<p>create a new file : <code>install-hacker-tools.yml</code></p>
<pre><code class="lang-auto">---
- hosts: localhost 
  connection: local
  tasks:
    - name: Install hacker tools # Here is the name of our task 
      apt: # We use Apt module here 
        name: "{{ item }}" # Here we want to loop on multiple package
        state: present # We want all our package present on our system
      with_items: # Here is the block use to run loops
        - nmap
        - golang
        - git
    - name: Install Gobuster 
      shell: go get github.com/OJ/gobuster # Here we use shell module to run inline command
</code></pre>
<p>This file will install nmap, golang, git and gobuster on your local machine</p>
<p>you can run this playbook with :</p>
<p><code>ansible-playbook install-hacker-tools.yml -i inventory.ini -b</code></p>
<p>Now all the tools are installed on your machine</p>
<p>With some modification on the playbook and on your inventory, you can run this playbook on a group of hosts</p>
<p>If we have the following inventory :</p>
<pre><code class="lang-auto">[Raspberry]
10.0.0.1
10.0.0.2

[WebServer]
10.20.40.1
10.20.40.5
</code></pre>
<p>And the following playbook</p>
<pre><code class="lang-auto">---
- hosts: all
  tasks:
    - name: Install hacker tools
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - nmap
        - golang
        - git
    - name: Install Gobuster
      shell: go get github.com/OJ/gobuster
</code></pre>
<p>We can run the playbook only on our Raspberry group with the following command:</p>
<p><code>ansible-playbook install-hacker-tools.yml -i inventory.ini -b --limit Raspberry</code></p>
<p>Now you can play a little bit with ansible and automate cool things !</p>
<p>If you have question about ansible tweet me at <strong>L3akM3_0d4y</strong> !</p>
            <p><small>9 posts - 6 participants</small></p>
            <p><a href="https://0x00sec.org/t/why-you-should-learn-ansible/20281">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/why-you-should-learn-ansible/20281</link>
          <pubDate>Sun, 05 Apr 2020 17:29:04 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20281</guid>
          <source url="https://0x00sec.org/t/why-you-should-learn-ansible/20281.rss">Why you should learn Ansible</source>
        </item>
        <item>
          <title>Linux Ricing Resources [WIKI]</title>
          <dc:creator><![CDATA[NullSystem]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <h1><strong>Tiling Window Managers</strong></h1>
<h4>X11</h4>
<ul>
<li>
<a href="https://wiki.archlinux.org/index.php/Bspwm" rel="nofollow noopener">bspwm</a> (<em>personal choice</em>)</li>
<li><a href="https://wiki.archlinux.org/index.php/Openbox" rel="nofollow noopener">Openbox</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Awesome" rel="nofollow noopener">Awesome</a></li>
<li><a href="https://wiki.archlinux.org/index.php/I3" rel="nofollow noopener">i3</a></li>
<li><a href="http://www.qtile.org/" rel="nofollow noopener">QTile</a></li>
<li><a href="http://www.herbstluftwm.org/" rel="nofollow noopener">herbstluftwm</a></li>
<li><a href="https://github.com/HarveyHunt/howm" rel="nofollow noopener">howm</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Dwm" rel="nofollow noopener">dwm</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Xmonad" rel="nofollow noopener">xmonad</a></li>
<li><a href="http://www.fvwm.org/" rel="nofollow noopener">FVWM</a></li>
<li><a href="https://stumpwm.github.io/" rel="nofollow noopener">StumpWM</a></li>
</ul>
<h4>Wayland</h4>
<ul>
<li><a href="https://github.com/michaelforney/velox" rel="nofollow noopener">velox</a></li>
<li><a href="https://github.com/SirCmpwn/sway" rel="nofollow noopener">sway</a></li>
<li><a href="https://github.com/Bl4ckb0ne/bspwc" rel="nofollow noopener">bspwc</a></li>
</ul>
<h1><strong>Stand-Alone Tiling Software</strong></h1>
<ul>
<li><a href="https://github.com/BurntSushi/pytyle3" rel="nofollow noopener">PyTile</a></li>
</ul>
<h1><strong>Bars / Panels</strong></h1>
<ul>
<li>
<a href="https://github.com/Lokaltog/candybar" rel="nofollow noopener">candybar</a> (<em>person choice</em>)</li>
<li><a href="https://wiki.archlinux.org/index.php/Dzen" rel="nofollow noopener">dzen</a></li>
<li><a href="https://github.com/LemonBoy/bar" rel="nofollow noopener">lemonbar</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Tint2" rel="nofollow noopener">tint2</a></li>
<li><a href="https://github.com/sdhand/n30f" rel="nofollow noopener">n30f</a></li>
<li><a href="https://github.com/jaagr/polybar" rel="nofollow noopener">polybar</a></li>
</ul>
<h1><strong>Program Launchers</strong></h1>
<ul>
<li>
<a href="https://github.com/DaveDavenport/rofi" rel="nofollow noopener">rofi</a> (<em>personal choice</em>)</li>
<li><a href="http://tools.suckless.org/dmenu/" rel="nofollow noopener">dmenu</a></li>
<li><a href="https://bitbucket.org/melek/dmenu2" rel="nofollow noopener">dmenu2</a></li>
<li><a href="https://github.com/Cloudef/bemenu" rel="nofollow noopener">bemenu</a></li>
<li><a href="https://github.com/emgram769/lighthouse" rel="nofollow noopener">lighthouse</a></li>
<li><a href="https://github.com/TrilbyWhite/interrobang" rel="nofollow noopener">interrobang</a></li>
<li><a href="http://git.r-36.net/thinglaunch/" rel="nofollow noopener">thinglaunch</a></li>
<li><a href="https://github.com/Tomas-M/xlunch" rel="nofollow noopener">xlunch</a></li>
</ul>
<h1><strong>Terminal Emulators</strong></h1>
<ul>
<li>
<a href="https://github.com/thestinger/termite" rel="nofollow noopener">termite</a> (<em>personal choice</em>)</li>
<li><a href="https://wiki.archlinux.org/index.php/Rxvt-unicode" rel="nofollow noopener">urxvt</a></li>
<li><a href="http://st.suckless.org/" rel="nofollow noopener">st</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Terminator" rel="nofollow noopener">terminator</a></li>
<li><a href="https://wiki.lxde.org/en/LXTerminal" rel="nofollow noopener">LXTerminal</a></li>
<li><a href="http://docs.xfce.org/apps/terminal/start" rel="nofollow noopener">xfce-terminal</a></li>
<li><a href="https://github.com/Swordfish90/cool-retro-term" rel="nofollow noopener">cool-retro-term</a></li>
<li><a href="https://sw.kovidgoyal.net/kitty/" rel="nofollow noopener">kitty</a></li>
<li><a href="https://github.com/jwilm/alacritty" rel="nofollow noopener">alacritty</a></li>
</ul>
<h1><strong>Color Schemes</strong></h1>
<ul>
<li><a href="http://terminal.sexy/" rel="nofollow noopener">terminal.sexy</a></li>
<li><a href="http://dotshare.it/category/terms/colors" rel="nofollow noopener">dotshare.it</a></li>
<li><a href="http://daylerees.github.io/" rel="nofollow noopener">daylerees</a></li>
<li><a href="http://coolors.co/" rel="nofollow noopener">coolors.co</a></li>
<li><a href="http://paletton.com/" rel="nofollow noopener">paletton</a></li>
<li><a href="http://www.colourlovers.com/" rel="nofollow noopener">colourlover</a></li>
<li><a href="http://www.materialpalette.com/" rel="nofollow noopener">materialpalette</a></li>
<li><a href="http://www.transparenttextures.com/" rel="nofollow noopener">transparenttextures</a></li>
<li><a href="http://www.imagecolorpicker.com/" rel="nofollow noopener">imagecolorpicker</a></li>
<li><a href="http://pltts.me/" rel="nofollow noopener">pltts</a></li>
<li><a href="https://image-color.com/" rel="nofollow noopener">image-color</a></li>
</ul>
<h1><strong>Wallpapers</strong></h1>
<ul>
<li><a href="http://alpha.wallhaven.cc/" rel="nofollow noopener">wallhaven</a></li>
<li><a href="https://www.flickr.com/" rel="nofollow noopener">flickr</a></li>
<li><a href="https://deviantart.com/" rel="nofollow noopener">deviantart</a></li>
<li><a href="http://simpledesktops.com/" rel="nofollow noopener">simpledesktops</a></li>
<li><a href="http://subtlepatterns.com/" rel="nofollow noopener">subtlepatterns</a></li>
<li><a href="https://unsplash.com/" rel="nofollow noopener">unsplash</a></li>
<li><a href="https://nik.bot.nu/browse.html" rel="nofollow noopener">nik</a></li>
<li><a href="http://www.stripegenerator.com/" rel="nofollow noopener">stripegenerator</a></li>
<li><a href="http://www.tartanmaker.com/" rel="nofollow noopener">tartanmaker</a></li>
<li><a href="http://gratisography.com/" rel="nofollow noopener">gratisgraphy</a></li>
<li><a href="http://thepatternlibrary.com/" rel="nofollow noopener">thepatternlibrary</a></li>
<li><a href="http://cs.gettysburg.edu/~duncjo01/archive/patterns/" rel="nofollow noopener">duncjo01’s archive</a></li>
<li><a href="http://bgrepeat.com/" rel="nofollow noopener">bgrepeat</a></li>
</ul>
<h1><strong>Fonts</strong></h1>
<ul>
<li><a href="http://www.dafont.com/" rel="nofollow noopener">DaFont</a></li>
<li><a href="https://github.com/chrissimpkins/codeface" rel="nofollow noopener">codeface</a></li>
</ul>
<h4>Vector</h4>
<ul>
<li><a href="http://fontawesome.io/" rel="nofollow noopener">Font-Awesome</a></li>
<li><a href="http://ionicons.com/" rel="nofollow noopener">Ionicons</a></li>
<li><a href="https://fonts.google.com/" rel="nofollow noopener">Google-Fonts</a></li>
</ul>
<h4>Bitmap</h4>
<ul>
<li><a href="https://github.com/Tecate/bitmap-fonts" rel="nofollow noopener">bitmap-fonts</a></li>
<li><a href="https://github.com/whitelynx/artwiz-fonts-wl" rel="nofollow noopener">artwiz</a></li>
<li><a href="https://github.com/eti0/fonts" rel="nofollow noopener">eti’s fonts</a></li>
</ul>
<h1><strong>System Info</strong></h1>
<ul>
<li><a href="https://github.com/dylanaraps/neofetch" rel="nofollow noopener">neofetch</a></li>
<li><a href="https://github.com/KittyKatt/screenFetch" rel="nofollow noopener">screenfetch</a></li>
<li><a href="https://github.com/djmelik/archey" rel="nofollow noopener">archey</a></li>
<li><a href="https://gitlab.com/jschx/ufetch" rel="nofollow noopener">ufetch</a></li>
</ul>
            <p><small>5 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/linux-ricing-resources-wiki/18465">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/linux-ricing-resources-wiki/18465</link>
          <pubDate>Mon, 06 Jan 2020 11:45:38 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-18465</guid>
          <source url="https://0x00sec.org/t/linux-ricing-resources-wiki/18465.rss">Linux Ricing Resources [WIKI]</source>
        </item>
        <item>
          <title>Use the Past to Conquer the Future - A How-To on BASH History Substitution</title>
          <dc:creator><![CDATA[Tac0caT]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <h1>Use The Past To Conquer The Future - History Substitution</h1>
<p>Since I had to get <strong><em>really</em></strong> close with bash recently and found myself typing the same things over and over again, I decided to open the amazing toolbox called <em>“History Substitution”</em> and was amazed by how much you can do with it. It’s a feature built into bash that allows you to get commands and arguments from your history.<br>
In this How-To I hope to be able to share this amazement with you! So let’s go!</p>
<hr>
<h2>1. Introduction</h2>
<p>A long time ago, the Grandmaster who taught me Linux brought a small detail to my attention.<br>
It went a little something like this:</p>
<blockquote>
<p>Me: apt update<br>
$ apt update: permission denied<br>
Me: sudo apt upda …<br>
Him: wait! I shall teach you …<br>
$ sudo !!<br>
sudo apt update</p>
</blockquote>
<p>Suffice to say, my mind was blown!</p>
<p>After learning this, I used it as often as I could, not realizing that this rabbit hole went even deeper than I imagined.</p>
<hr>
<h2>2. Down the hole we go</h2>
<p>In our daily life with bash we often come across situations like this:</p>
<blockquote>
<p>less /this/path/is/really/long/and/annoying/randomfile</p>
</blockquote>
<p>Now if we’re done looking at the file and want to open it in vi we have to:</p>
<p>press the up arrow -&gt; pos1 -&gt; del/del/del/del -&gt; vi</p>
<p>which is ok but still a pain in the butt if we have to do it more than once in our entire lifetime.<br>
Instead with history subsitution we can just do:</p>
<blockquote>
<p>vi !!$</p>
</blockquote>
<p>So how does this work?<br>
As you may have noticed by now, to start a history substitution command you begin with two exclamation points.<br>
Given only two consecutive exclamation points returns the whole last command.<br>
If we use history substitution with other options we can always omit the second exclamation point.</p>
<p>When used with a dollar sign it returns only the last argument.<br>
The other way around, an exclamation point followed by a circumflex (this thing -&gt; ^ ) takes only the first argument.<br>
Let’s look at some examples with <strong><em>“echo a b c”</em></strong> as the last command used:</p>
<blockquote>
<p>!! -&gt; echo a b c<br>
echo !! -&gt; echo echo a b c<br>
echo !$ -&gt; echo c<br>
echo !^ -&gt; echo a<br>
echo !* -&gt; echo  a b c</p>
</blockquote>
<p>The first command above would also execute it immediately.<br>
Notice that the two exclamations points also get the command and the one with ^ ignores it.<br>
To get all arguments but not the command, the asterisk is used.<br>
Additionally you can get specific arguments using a colon, in this context it’s called the word designator:</p>
<blockquote>
<p>echo !:0 -&gt; echo echo<br>
echo !:2 -&gt; echo b<br>
echo !:2-3 -&gt; echo b c<br>
echo !:2* -&gt; echo b c<br>
echo !:1 !:3 -&gt; echo a c</p>
</blockquote>
<p>But let’s say that you had to run a different command in the meantime and the things you need are not in the last command anymore. This is also easily done by telling it “how long ago” the command was used.</p>
<blockquote>
<p>$ echo a b c<br>
$ echo d e f<br>
!-1 -&gt; echo d e f<br>
!-2 -&gt; echo a b c</p>
</blockquote>
<p>This is very helpful when using them in quick succession but nigh impossible to keep track of over longer sessions. In those cases it’s a lot easier to use the built-in string function.</p>
<blockquote>
<p>$ uname -r<br>
$ uname -a<br>
$ echo a b c<br>
echo !un -&gt; echo uname -a<br>
echo !un:* -&gt; echo -a<br>
echo !?nam -&gt; echo uname -a<br>
echo !?me -r? -&gt; echo uname -r</p>
</blockquote>
<p>As we can see, only giving it the beginning of the command it automatically looks for the first occurence (going upwards) in the history and returns it. Using the question marks we can look for parts inside the command to further narrow it down and filter alike commands.</p>
<h3>Now onto paths!</h3>
<p>Another great feature built into this, is the path handling.<br>
It requires some getting used to but is also very straightforward.<br>
let’s assume we have this path:</p>
<blockquote>
<p>/home/user/folder/file.txt</p>
</blockquote>
<p>This is what we can do:</p>
<blockquote>
<p>Get the path up to file:<br>
echo !:h -&gt; /home/user/folder</p>
</blockquote>
<blockquote>
<p>Get the filename plus extension:<br>
echo !:t -&gt; file.txt</p>
</blockquote>
<blockquote>
<p>Get the path up to file extension:<br>
echo !:r -&gt; /home/user/folder/file</p>
</blockquote>
<blockquote>
<p>Get only file extension:<br>
echo !:e -&gt; .txt</p>
</blockquote>
<blockquote>
<p>Get only filename:<br>
echo !:t:r -&gt; file</p>
</blockquote>
<h3>Substitution!</h3>
<p>We can also substitute certain strings with other strings.<br>
For example if we have <strong><em>/path/file1</em></strong> and we want to change <strong>file1</strong> to <strong>file2</strong> we do:</p>
<blockquote>
<p>!:s/file1/file2</p>
</blockquote>
<p>But this only works on the first occurence found!<br>
If we want to do this globally, so for every occurence of <strong>file1</strong>, we use:</p>
<blockquote>
<p>!:gs/file1/file2</p>
</blockquote>
<p>Example:</p>
<blockquote>
<p>$ cp /path/file1 /path/folder/file1<br>
!:gs/file1/file2 -&gt; cp /path/file2 /path/folder/file2</p>
</blockquote>
<p>If you want to repeat a successful substitution in a different context then you don’t need to write it again.<br>
You can just use:</p>
<blockquote>
<p>!:&amp; -&gt; for single occurence substitution<br>
!:g&amp; -&gt; for global substitution</p>
</blockquote>
<hr>
<h2>3. Summary</h2>

Summary/Cheat-Sheet <a href="https://0x00sec.org/t/use-the-past-to-conquer-the-future-a-how-to-on-bash-history-substitution/12977/1">(click for more details)</a>
<hr>
<h2>4. Extras</h2>
<ul>
<li>If you missed it in the summary, you can only print the return value of the history substitution without executing it by using <code>!:p</code>
</li>
<li>Of course you can connect all of these to do some crazy things!</li>
<li>To use this feature in bash scripts, supply it with <code>set -H</code>
</li>
<li>To run a command and not have it in the history, just type a space in front of it! This works for any command, not just history substitution.</li>
</ul>
<hr>
<p>And that’s all! If you have any questions or found a mistake just leave a comment below.</p>
<p>I sincerely hope you were able to learn something new today and if you already knew about it then I hope I was able to refresh your memory! <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<h3>Happy Hacking!</h3>
            <p><small>7 posts - 6 participants</small></p>
            <p><a href="https://0x00sec.org/t/use-the-past-to-conquer-the-future-a-how-to-on-bash-history-substitution/12977">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/use-the-past-to-conquer-the-future-a-how-to-on-bash-history-substitution/12977</link>
          <pubDate>Sat, 13 Apr 2019 11:45:10 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-12977</guid>
          <source url="https://0x00sec.org/t/use-the-past-to-conquer-the-future-a-how-to-on-bash-history-substitution/12977.rss">Use the Past to Conquer the Future - A How-To on BASH History Substitution</source>
        </item>
        <item>
          <title>Parrot Security OS - MATE 2 XFCE</title>
          <dc:creator><![CDATA[Cry0l1t3]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p><img src="//0x00sec.s3.amazonaws.com/original/2X/2/21d3f1c443e4f1add39f51b734ffc97cdf32b0bb.jpg" alt="grafik" data-base62-sha1="4PfQpmZ9DLtagau8xFHXv4KclxF" width="520" height="500"></p>
<p>Heyho all,</p>
<p>upon Phoenix750 request I create this tutorial. Here I will show you how install Parrot Security and how to change the desktop environment of Parrot from MATE to XFCE.</p>
<h4>Content:</h4>
<ul>
<li>What is Parrot Security?</li>
<li>Installation of Parrot Security</li>
<li>Change your DE.</li>
</ul>
<h3>What is Parrot Security?</h3>
<p>Parrot Security is our complete all-in-one environment for pentesting, privacy, digital forensics, reverse engineering and software development.<br>
The system includes a full arsenal of security oriented tools to cover many categories of the work of a pentester.<br>
Source: <a href="https://www.parrotsec.org/download-security.php" rel="noopener nofollow ugc">https://www.parrotsec.org/download-security.php</a><br>
It’s a Debian based Linux Distribution and it’s an alternative to Kali Linux and BlackArch.</p>
<h3>Installation of Parrot Security</h3>
<p>First tings first. You will need to download the Image and check the hashes.<br>
To do so go to <a href="https://www.parrotsec.org/download.php" rel="noopener nofollow ugc">ParrotSec</a>  and choose the Image you want to download. After downloading check the signed hashes of it.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/4/457fd38e2c02da8535171ad91a7d4319ee360541.png" alt="grafik" data-base62-sha1="9UOOmedvqy2eUPZioO6NW3sOfG9" width="690" height="67"></p>
<p>If the hash is the same we can install the system.<br>
Install the system based on your needs.</p>
<h3>Change your DE</h3>
<p>Since 1 Sep 2017 the development Team of Parrot added full Parrot-XFCE support to their system.</p>
<ol>
<li>First of all we have to install XFCE.</li>
</ol>
<blockquote>
<p>sudo apt install xfce4</p>
</blockquote>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/a/a9db4cefb53054a935612328b97f49a562261181.png" alt="grafik" data-base62-sha1="oeCxApt2sChnSBHYP9Y1r2MSkVj" width="690" height="211"></p>
<ol start="2">
<li>After that go to <strong>/usr/share/xsessions/</strong> directory.</li>
</ol>
<blockquote>
<p>cd /usr/share/xsessions/</p>
</blockquote>
<ol start="3">
<li>Create a new directory. In my case its <strong>other_de</strong> .</li>
</ol>
<blockquote>
<p>sudo mkdir other_de</p>
</blockquote>
<ol start="4">
<li>Move all *.desktop-files except xfce.desktop to <strong>other_de</strong> directory.</li>
</ol>
<blockquote>
<p>for i in $(ls | grep -v xfce.desktop);do sudo mv $i other_de/;done</p>
</blockquote>
<ol start="5">
<li>Reboot the system.</li>
</ol>
<blockquote>
<p>reboot</p>
</blockquote>
<p>After logging in your desktop environment will be XFCE.</p>
<p>It should looking like this:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/f/f6b19a2a966318572476eec1cc4a9a976368ad7f.jpg" alt="grafik" data-base62-sha1="zclY3K1Bu3yOSlZbToonqZCs0j5" width="690" height="454"></p>
<p>Done.</p>
<p>Have fun!</p>
<p>Best regards,<br>
Cry0l1t3</p>
            <p><small>6 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/parrot-security-os-mate-2-xfce/7874">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/parrot-security-os-mate-2-xfce/7874</link>
          <pubDate>Thu, 02 Aug 2018 18:00:10 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-7874</guid>
          <source url="https://0x00sec.org/t/parrot-security-os-mate-2-xfce/7874.rss">Parrot Security OS - MATE 2 XFCE</source>
        </item>
        <item>
          <title>Like i clearly said...remove my profile/account and all my threads and info</title>
          <dc:creator><![CDATA[salvation]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>Like i clearly said…remove my profile/account and all my threads and info</p>
            <p><small>12 posts - 7 participants</small></p>
            <p><a href="https://0x00sec.org/t/like-i-clearly-said-remove-my-profile-account-and-all-my-threads-and-info/6333">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/like-i-clearly-said-remove-my-profile-account-and-all-my-threads-and-info/6333</link>
          <pubDate>Tue, 17 Apr 2018 01:42:52 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-6333</guid>
          <source url="https://0x00sec.org/t/like-i-clearly-said-remove-my-profile-account-and-all-my-threads-and-info/6333.rss">Like i clearly said...remove my profile/account and all my threads and info</source>
        </item>
        <item>
          <title>Like i clearly said...remove my profile/account and all my threads ans info</title>
          <dc:creator><![CDATA[salvation]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>Like i clearly said…remove my profile/account and all my threads and info</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/like-i-clearly-said-remove-my-profile-account-and-all-my-threads-ans-info/5929">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/like-i-clearly-said-remove-my-profile-account-and-all-my-threads-ans-info/5929</link>
          <pubDate>Wed, 21 Mar 2018 01:07:14 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-5929</guid>
          <source url="https://0x00sec.org/t/like-i-clearly-said-remove-my-profile-account-and-all-my-threads-ans-info/5929.rss">Like i clearly said...remove my profile/account and all my threads ans info</source>
        </item>
        <item>
          <title>Create your own Private Botnet with ProxyDock!</title>
          <dc:creator><![CDATA[pry0cc]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>Hello, fellow 0x00’ers!</p>
<p>First off, I lied. It’s not a botnet. But it enables you to achieve botnet-like abilities.</p>
<p>Today I am going to show you something that has been kept a secret for a long time in the hacker community and has never really been made accessible to the average hobbyist. With this knowledge you will be able to:</p>
<ul>
<li>Bypass rate limits on API’s</li>
<li>Google dork with impunity</li>
<li>Scan hosts extremely stealthily</li>
<li>Leverage hundreds of IP addresses, legally, and quickly</li>
</ul>
<p>And if that doesn’t already sound incredible. You’ll be able to do it all for less than 2.99 euro a month.</p>
<hr>
<h4>Author Assigned Level: Wannabe</h4>
<h4>Community Assigned Level:</h4>
<p><a href="https://0x00sec.org/t/create-your-own-private-botnet-with-proxydock/5917/1">Click to view the poll.</a></p>
<h4>Required Skills</h4>
<p>List of previous knowledge required to understand the paper. Contents that will not be explained and without knowing them it will be very difficult to follow the paper content.</p>
<ul>
<li>Have a basic understanding of Docker</li>
<li>Be able to use the linux CLI.</li>
<li>Have a VPN subscription with at least 1 file <a href="https://frootvpn.com/refer/dfc8ab8f166a160b0c8cba339ab91fbd">Click me!</a>
</li>
<li>Have Docker installed and your user in the Docker group.</li>
</ul>
<h4>Disclaimer</h4>
<p>Please don’t use this for illegal purposes. Abuse of this could lead to an increased crackdown on this method, and we’d like this to work as long as possible.</p>
<hr>
<h1>Why</h1>
<p>If you’ve ever tried to automate any sort of scraping, Google dorking, or pulling from API’s with rate limits, you’ll know this little guy very well,</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/ab04177e186582ebdef4ebe628e65ccc31e477db.png" alt="" data-base62-sha1="ooSpFuihfekq3K6kSxG2049Q3CH" width="424" height="274"></p>
<p>The dreaded captcha.</p>
<p>A traditional way you would bypass this would be to scrape some public proxies, however, Google has gotten smarter and upped their detection game. Using any public proxy, or any known Tor exit node doesn’t work either. Providers are quick to block these (freenode, API providers, and others).</p>
<p>Now the only option left seems to be VPN’s. Many VPN’s are difficult to detect, and very rarely ever used to scrape as switching between them is really difficult. Today that is about to change.</p>
<h1>Theory</h1>
<p>My first idea to solve this problem was to get a bunch of different computers and virtual machines, hook them up to a VPN, stand up a HTTP proxy server on them, and then manually load them up in a proxychains file. Sounds like a good idea, except it would take forever for my entire 45 VPN files.</p>
<p>Instead of using actual computers, I decided this would be a good job for Docker.</p>
<p>Inside each ProxyDock docker container, is OpenVPN connected to a VPN tunnel, with a HTTP proxy server exposed on port 8080, all traffic sent through port 8080 will go through the VPN connection.</p>
<p>The simple bash script repeats this for however many VPN files you have in the VPN directory. For each VPN file, it will forward the port 8080 on the container, to a local port, and it will write the local connection port into a proxychains configuration, which means usage of these proxies is super simple.</p>
<h1>Using ProxyDock</h1>
<h2>Downloading</h2>
<p>If you haven’t already, <a href="https://github.com/pry0cc/ProxyDock/">download this</a></p>
<pre><code class="lang-auto">git clone https://github.com/pry0cc/ProxyDock/
</code></pre>
<p>Now, create a new directory called ‘VPN’</p>
<pre><code class="lang-auto">cd ProxyDock
mkdir VPN
</code></pre>
<p>Put all your OpenVPN<code>.ovpn</code> files in there, and make sure they do not have any sketchy characters, they should look like this:</p>
<p><a href="https://0x0.st/sBiA.png" class="onebox" target="_blank" rel="noopener">https://0x0.st/sBiA.png</a></p>
<h2>Remove auth prompts from connection files</h2>
<h4>(skip this if it doesn’t prompt you on connection)</h4>
<p>Now, with most providers, they have built-in authentication prompts, so when you run <code>openvpn file.ovpn</code>, it will load, and ask for a username and password, not very helpful for automation, you can easily solve this using an <code>auth.txt</code> file.</p>
<p>Create a file in the ProxyDock directory called <code>auth.txt</code>, inside that file put your username, followed by your password on a newline. Then, append <code>auth-user-pass auth.txt</code> to each file in the VPN directory, a simple bash one liner will do the trick nicely:</p>
<pre><code class="lang-bash">for f in $(cd VPN; bash -c ls); do echo "auth-user-pass auth.txt" &gt;&gt; VPN/$f; done
</code></pre>
<p>You may find that if the string is not on a new line by itself, then this won’t work, it’s a bit hacky, but re-running this oneliner usually fixes that.</p>
<p>You can test this worked by running <code>sudo openvpn VPN/vpnfile.ovpn</code>, and it should connect without any prompts.</p>
<h2>Building the Dockerfile</h2>
<p>I have included a script for this, so it’s easy as:</p>
<pre><code class="lang-bash">./build.sh
</code></pre>
<h2>Running ProxyDock!</h2>
<p>Now you have done all the setup, it is time to run the <code>start.sh</code> script and let the beautiful collection of proxies startup before your eyes.</p>
<p>A simple run of <code>docker ps</code>, should reveal the running containers.</p>
<h1>Demo’s</h1>
<p>Starting:<br>
<a href="https://asciinema.org/a/mNUIk7oxrF6JAHhFANAPvgofl"><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4cf8f9c8e646b60c2200aefb7a7f42800408530b.png" alt="asciicast" data-base62-sha1="aYVInrTfdRrEgSJ2LerPOE1eKnx" width="690" height="407"></a></p>
<p>Usage:<br>
<a href="https://asciinema.org/a/gfNulkjQayioP7D26XvNy8eJ9"><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/1c788f8af1622a8ba9b4f26106166518d81827d1.png" alt="asciicast" data-base62-sha1="43RFuPuf9SbpmrwxzZQI54UrPUd" width="690" height="407"></a></p>
<h1>Usage</h1>
<p>Simply use proxychains in the current directory, proxychains will automatically recognize that a proxychains.conf is present and will use it.</p>
<p>Non-icmp nmap scans, curl’s, and other fun stuff can be run through proxychains, and each request will use a different proxy, you can even couple this to an IRC client or browser for maximum hacker cred <img src="https://0x00sec.org/images/emoji/twitter/laughing.png?v=9" title=":laughing:" class="emoji" alt=":laughing:"></p>
<h1>Conclusions</h1>
<p>This method is extremely simple, very affordable, and a wonder that nobody has thought of this before. What is very cool about this, is that you can throw in as many VPN files to the VPN directory, and potentially have the reach of 400-500 different non-blacklisted IP addresses. You essentially have a botnet that you can use for scraping or whatever else you’re doing.</p>
<p>If you liked this article please like it, share it, and drop a comment giving your thoughts! And as always, Stay Snappy <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
            <p><small>13 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/create-your-own-private-botnet-with-proxydock/5917">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/create-your-own-private-botnet-with-proxydock/5917</link>
          <pubDate>Tue, 20 Mar 2018 12:22:49 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-5917</guid>
          <source url="https://0x00sec.org/t/create-your-own-private-botnet-with-proxydock/5917.rss">Create your own Private Botnet with ProxyDock!</source>
        </item>
        <item>
          <title>Simplified Scraping with Lynx, Regex, and Bash</title>
          <dc:creator><![CDATA[fxbg]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <h2>LYNX</h2>
<p>I have been into web scraping for a long time, since the first time I realized people will pay for large neatly organized data. I came across something interesting and wanted to pass some knowledge onto others. <a href="http://lynx.invisible-island.net/" rel="nofollow noopener">Lynx is a command line based browser</a>. I first discovered it when I had my first Linux install complete only to realize I needed a desktop and couldn’t quite figure out how to get it going (KDE or Gnome; back when you could get free Linux cd’s from computer shops).</p>
<p>Our script using Lynx and it’s dump option. The dump option pretty much “dumps” the text of the webpage (the stuff you see).</p>
<h2>REGULAR EXPRESSIONS</h2>
<p><a href="https://en.wikipedia.org/wiki/Regular_expression" rel="nofollow noopener">Regular Expressions</a> have been around a very long time, since the 1950’s. Many different variants of the “language” have come about. In working your way through tons of data looking for more specific data, “regex” (regular expressions) is the way to go. It’s not hard to learn regular expressions but it helps to know that the regex you use in PHP isn’t necessarily the regex you will use with grep on the command line.</p>
<h2>BASH SCRIPTING</h2>
<p>All you need is a little bit of bash scripting knowledge. You can find some nice bash tutorials over at <a href="http://ryanstutorials.net/bash-scripting-tutorial/" rel="nofollow noopener">Ryan’s bash tutorials website</a>. The <a href="http://samair.ru" rel="nofollow noopener">samair.ru</a> website has a list of free proxies, not sure if they scan it themselves or rip them from somewhere else but we are gonna rip it from them (with our script at the end) with the help from bash.</p>
<p>We use a simple while loop that increments from 1 to 11. During the loop we will use the counter variable in our URL that we are <strong>dumping</strong> from <a href="http://lynx.invisible-island.net/" rel="nofollow noopener">Lynx</a>. We also use a simple linux command to “bash” our file the proxy sites contents dump into, truncate. The <em>truncate -s 0</em> command will empty our file called plist.</p>
<p>At the end of the script we simply cat out the plist file to our screen and grep the IP’s using our regular expression. There are many ways to go about this and as I sit here and write about it I am thinking of modifying it. It was a simple script and doesn’t need more attention, it does it’s job and the job is done. You can use this script to get the proxies from <a href="http://samair.ru/proxy/" rel="nofollow noopener">samair.ru</a> from it’s 11 free pages it provides. Possibly good to use with <a href="http://proxychains.sourceforge.net" rel="nofollow noopener">proxychains</a>.</p>
<h2>THE SCRIPT</h2>
<pre><code class="lang-auto">#!/bin/bash
truncate -s 0 plist

counter=1
while [ $counter -le 11 ]
do
  lynx -dump http://samair.ru/list/ip-port/$counter.htm &gt;&gt; plist
  ((counter++))
done
cat plist |grep -Eo ‘[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\:[0-9]{1,5}’
</code></pre>
            <p><small>14 posts - 7 participants</small></p>
            <p><a href="https://0x00sec.org/t/simplified-scraping-with-lynx-regex-and-bash/5149">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/simplified-scraping-with-lynx-regex-and-bash/5149</link>
          <pubDate>Sun, 28 Jan 2018 19:44:46 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-5149</guid>
          <source url="https://0x00sec.org/t/simplified-scraping-with-lynx-regex-and-bash/5149.rss">Simplified Scraping with Lynx, Regex, and Bash</source>
        </item>
        <item>
          <title>OpenBSD anyone?</title>
          <dc:creator><![CDATA[FormosaTBM]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>I personally have been using Arch Linux as my main OS, but was just wondering if anyone uses OpenBSD here?</p>
<p>Seems like a more well put together system - although, it is very stringent when it comes to support for hardware/software which may be a nuisance.</p>
<p>Just wondering if anyone have experience with it and if it’s worth the trouble.</p>
            <p><small>5 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/openbsd-anyone/4554">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/openbsd-anyone/4554</link>
          <pubDate>Sun, 03 Dec 2017 15:13:07 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-4554</guid>
          <source url="https://0x00sec.org/t/openbsd-anyone/4554.rss">OpenBSD anyone?</source>
        </item>
        <item>
          <title>More Stupid *nix Tricks: Inserting lines to the top of files with tac</title>
          <dc:creator><![CDATA[fraq]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <h2>Why do you do this, fraq?</h2>
<p>Occasionally I’ll encounter myself doing something in Linux I don’t do very often and I know other people aren’t doing much as well. When that happens, I try to document the stupid, quirky things I did. Maybe for posterity, maybe because I need a life, I dunno.</p>
<h2>What is the stupid trick today?</h2>
<p>Every once in a blue moon, I have to inject a line at the top of a file. Sometimes it’s an <code>import</code> statement in python, sometimes it’s a shebang line. While it’s easy to just <code>vim ./filename</code> and add it that way, it’s more fun to try to do it programmatically. I’ve seen a few solutions using <code>sed</code>, but I’d like to introduce a less popular tool: <code>tac</code></p>
<p><code>tac</code> reads files, but from bottom to top, moving the opposite direction of its cousin, <code>cat</code>. You might have even noticed that <code>tac</code> is just <code>cat</code> backwards. Clever, eh? <code>tac</code> doesn’t get much attention, but this is one instance in which its actually useful.</p>
<p>Let’s imagine you want to add an import statement at the top of a python script because you forgot it.</p>
<pre><code class="lang-auto"># useless_script.py
print(os.environ['PWD'])
</code></pre>
<p>This won’t work without <code>import os</code> at the top, so let’s add it.</p>
<p><code>tac useless_script.py &gt; useless_script.tmp; echo "import os" &gt;&gt; useless_script.tmp &amp;&amp; tac useless_script.tmp &gt; useless_script.py &amp;&amp; rm -f useless_script.tmp</code></p>
<p>Now, would it have been easier to use <code>sed</code>? Almost certainly. Is this fun? I think so. Will you find a use for this? Yes, when you least expect it.</p>
            <p><small>12 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/more-stupid-nix-tricks-inserting-lines-to-the-top-of-files-with-tac/3888">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/more-stupid-nix-tricks-inserting-lines-to-the-top-of-files-with-tac/3888</link>
          <pubDate>Sat, 14 Oct 2017 17:16:54 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-3888</guid>
          <source url="https://0x00sec.org/t/more-stupid-nix-tricks-inserting-lines-to-the-top-of-files-with-tac/3888.rss">More Stupid *nix Tricks: Inserting lines to the top of files with tac</source>
        </item>
        <item>
          <title>How to Run the CoinHive Miner in the Command Line (Headless)</title>
          <dc:creator><![CDATA[pry0cc]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <h1>Running and Mining from CoinHive in the Linux Command Line</h1>
<p>As you may be aware, 0x00sec has begun offering Monero Mining in the browser via Javascript. If you’re like me, you have some server somewhere that can happily take the load, but it’s headless, and you don’t want to be leaving a web browser window open forever.</p>
<p>Fear no more. I have been messing around and finally got it sorted.</p>
<p>What you need to do, is installed Google Chrome or Chromium and run this command.</p>
<pre><code class="lang-bash">chromium --headless --disable-gpu --repl https://0x00sec.org
</code></pre>
<p>This will start Chrome in <a href="https://developers.google.com/web/updates/2017/04/headless-chrome">headless mode</a>, with REPL enabled, Read-Evaluate-Print-Loop, basically this will allow you to execute javascript in the DOM via the command line, without having to render the actual page.</p>
<p>This may take a little while, once you’ve got this you’ll see a prompt. Paste this.</p>
<pre><code class="lang-auto">miner = new CoinHive.User('8GiCBvTene8ArpdPgDjPt2tUIIr4NrXM', "pry0cc", { throttle: 0, autoThreads: true});
</code></pre>
<p>Obviously change “pry0cc” to your username, or whoever you want to mine for!</p>
<p>Then start the miner with:</p>
<pre><code class="lang-auto">miner.start()
</code></pre>
<p>And then check it is running with</p>
<pre><code class="lang-auto">miner.isRunning()
</code></pre>
<p>You can execute any range of commands, the docs can be found <a href="https://coin-hive.com/documentation/miner">here</a></p>
<p>I hope this helped! Stay Snappy <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<p>pry0cc</p>
            <p><small>12 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/how-to-run-the-coinhive-miner-in-the-command-line-headless/3721">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/how-to-run-the-coinhive-miner-in-the-command-line-headless/3721</link>
          <pubDate>Mon, 25 Sep 2017 23:00:21 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-3721</guid>
          <source url="https://0x00sec.org/t/how-to-run-the-coinhive-miner-in-the-command-line-headless/3721.rss">How to Run the CoinHive Miner in the Command Line (Headless)</source>
        </item>
        <item>
          <title>A Simple Open Source Portscanner</title>
          <dc:creator><![CDATA[Red_Joker]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>Hello NullSec, Joker back with another tool that I wrote today. As the title says this is a portscanner that I’ve decided to code to learn more about packets and how they work. This is a very simple program that basically does a SYN scan. Issue is that most systems would block this type of scan and therefore I recommend using nmap for testing and hacking purposes. This project is for educational purposes only. I should note that the <a href="http://www.binarytides.com/tcp-connect-port-scanner-c-code-linux-sockets/" rel="nofollow noopener">site</a> I used as reference honestly both has ugly code and I don’t think the code works that well, but helped a lot with explaining to me how packets work at least for a SYN scan.</p>
<p>A overview of a SYN scan is simple enough:<br>
<code>client ----- sends -----&gt; SYN ----- to -----&gt; server</code><br>
<code>server ----- sends ----&gt; SYN+ACK ----- to ------&gt; client</code><br>
Simple? I think so.</p>
<p>Anyways, the <a href="https://gitlab.s-3.tech/v02alentine/portscanner" rel="nofollow noopener">code</a> is simple enough to compile and use. I’ve as usual added comments to help those who wish to look at my code to understand how it works-ish…</p>
<p>I’m gonna be working on different types of scans like FIN scan and others in the future.</p>
<p>Welp that’s it for now, cheers!</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/a-simple-open-source-portscanner/3285">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/a-simple-open-source-portscanner/3285</link>
          <pubDate>Fri, 11 Aug 2017 16:30:02 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-3285</guid>
          <source url="https://0x00sec.org/t/a-simple-open-source-portscanner/3285.rss">A Simple Open Source Portscanner</source>
        </item>
        <item>
          <title>Open Source Reverse Shell</title>
          <dc:creator><![CDATA[Red_Joker]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>Ok, so I’ve coded a very basic reverse shell that I’ve now decided to allow any member  to access and view the code, but before I post the code I gotta thank <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a> for his awesome <a href="https://0x00sec.org/t/remote-shells-part-i/269">tutorial</a> and <a class="mention" href="https://0x00sec.org/u/joe_schmoe">@Joe_Schmoe</a> for  <a href="https://gitlab.s-3.tech/JSchmoe/unnamed-shell" rel="nofollow noopener">STELF</a> which inspired me to code this shell. I’m trying to add functionality to my shell, but I’m a 1337 Skid haxor. I’m still learning but thanks to this community and their patience especially <a class="mention" href="https://0x00sec.org/u/_py">@_py</a> and of course <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> plus many others which helped me and answered my really really really dull questions. I’ve learned a lot coding this shell especially how file descriptors and sockets work. Thank you all that have helped me out quite a bit!</p>
<p>Now the <a href="https://gitlab.s-3.tech/v02alentine/reverse_shell" rel="nofollow noopener">code</a> is written in C and I’ve added comments to any that are interested in how it all works. To compile simply do,<br>
<code>gcc reverse_shell.c -o reverse_shell</code></p>
<p>and for the handler same thing,<br>
<code>gcc handler.c -o handler</code></p>
<p>The file named shell.c is actually a bind shell which I accidentally coded and just shows how stupid I can be, but I’ve decided to keep it just in case I and anyone else finds it useful. I hope this becomes useful for anyone that is interested. If anyone wants to help with the development of the shell please request access. Thank you!</p>
<p>Cheers!</p>
            <p><small>6 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/open-source-reverse-shell/3271">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/open-source-reverse-shell/3271</link>
          <pubDate>Thu, 10 Aug 2017 14:51:59 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-3271</guid>
          <source url="https://0x00sec.org/t/open-source-reverse-shell/3271.rss">Open Source Reverse Shell</source>
        </item>
        <item>
          <title>Another PC Emulator: Bochs</title>
          <dc:creator><![CDATA[Red_Joker]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>Before I begin, PC emulators are pretty cool piece of software especially when they allow you to run a full on Linux environment on your phone and not the pain in the <strong>BEEP</strong> that is Debian NoRoot and GNUroot. I did wrote a post on <a href="https://0x00sec.org/t/linux-without-root/2119">Limbo</a> which is another PC Emulator but the only issue I have is how slow it is and I wanted something faster which came to this really cool even awesomer piece of software written in C++ called Bochs. Yes guys, it is a box with a mini devil in the box as its logo.</p>
<p>#<span class="hashtag">#What</span> You’ll Need:</p>
<ul>
<li><a href="https://play.google.com/store/apps/details?id=net.sourceforge.bochs" rel="nofollow noopener">Bochs</a></li>
<li>Android Phone</li>
<li>
<a href="http://www.slax.org/" rel="nofollow noopener">Image File</a> (Any can do but I used Slax)</li>
<li>As usual, a brain (please)</li>
</ul>
<p>#<span class="hashtag">#Installation</span></p>
<p>The perk of Bochs is its simplicity when setting it up, but the important settings are the Fdisk  A and B master, but since I only used one OS I just changed from floppy to CDrom on Fdisk A and hit new selecting my Slax ISO file. You could hit start at the top right but the OS won’t boot. Why? The system is booting from a floppy. To change to booting to a CDrom go back to where you previously selected your image file and scroll down to the bottom of that setting and changed from booting to floppy to booting to CDrom. Now when you click start your OS should start.</p>
<p>Simple right?</p>
<p>#<span class="hashtag">#Conclusion</span></p>
<p>This is a very short post but I hope I did well on this post. There wasn’t much to talk about because of the simplicity. Maybe in the future I will dissect the source code of Bochs since it does claim it is written in C++ but who knows?</p>
<p>With all being said, Cheers!</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/another-pc-emulator-bochs/3196">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/another-pc-emulator-bochs/3196</link>
          <pubDate>Sat, 05 Aug 2017 13:01:17 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-3196</guid>
          <source url="https://0x00sec.org/t/another-pc-emulator-bochs/3196.rss">Another PC Emulator: Bochs</source>
        </item>
        <item>
          <title>Linux for Beginners</title>
          <dc:creator><![CDATA[thisadamis]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>Hey guys my name is Adam and I am brand new to the area of linux and pentesting in general. I am starting my journey in pentesting by learning linux and some of the tools that pen testers use.</p>
<p>I came across this site while looking for labs to do online and thought I would share it. If it has already been talked about then mods feel free to remove it. <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> Like I said I am brand new to learning linux and to this community. I look forward to learning from all of you and I hope to one day give back as well.</p>
<p><a href="http://overthewire.org/wargames/bandit/" class="onebox" target="_blank" rel="nofollow noopener">http://overthewire.org/wargames/bandit/</a></p>
            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/linux-for-beginners/3120">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/linux-for-beginners/3120</link>
          <pubDate>Tue, 01 Aug 2017 01:51:25 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-3120</guid>
          <source url="https://0x00sec.org/t/linux-for-beginners/3120.rss">Linux for Beginners</source>
        </item>
        <item>
          <title>Fully Interactive TTY Reverse Shell</title>
          <dc:creator><![CDATA[Mumbai]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>Came across this, went through it, worked swell!  Anyone know of any other ways to acquire a full “tty” shell reversly with history and FINALLY not killing your shell with CTRL-C?  <a href="https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/" rel="nofollow noopener">https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/</a></p>
            <p><small>5 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/fully-interactive-tty-reverse-shell/2877">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/fully-interactive-tty-reverse-shell/2877</link>
          <pubDate>Tue, 11 Jul 2017 00:26:34 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-2877</guid>
          <source url="https://0x00sec.org/t/fully-interactive-tty-reverse-shell/2877.rss">Fully Interactive TTY Reverse Shell</source>
        </item>
        <item>
          <title>Game Hacking on Linux - scanmem Basics</title>
          <dc:creator><![CDATA[jakob]]></dc:creator>
          <category>Linux</category>
          <description><![CDATA[
            <p>Hey, this is a very brief tutorial on scanmem, a memory manipulation tool for Linux that’s well suited to game hacking. I’ll be using GZDoom as an example, but you should be able to follow along with any game you want.</p>
<p>Firstly, install scanmem. Check your distro’s repositories as there’s a very good chance it’s in there. If you need to compile from source, you can download it <a href="https://github.com/scanmem/scanmem" rel="noopener nofollow ugc">here</a>.</p>
<pre><code class="lang-auto">$ # Arch Linux users would do the following:
$ sudo pacman -S scanmem
</code></pre>
<p>Now you’ll need to start scanmem. It’s a command-line tool, so you need to do it from a shell. scanmem doesn’t ask for much, just root privileges and the PID of the game you want to hack, which you can specify as a parameter when starting it:</p>
<pre><code class="lang-auto">$ sudo scanmem `pidof gzdoom`
</code></pre>
<p>You’ll initially be greeted with some copyright information, followed by a pretty courteous prompt:</p>
<pre><code class="lang-auto">Please enter current value, or "help" for other commands.
0&gt;
</code></pre>
<p>What it wants you to do now is enter the current value of the variable you want to change.  I suggest that you pick something easily changed by legitimate means, like health. In my example with GZDoom, I’ll be modifying the amount of shotgun ammo I have, so I would enter:</p>
<pre><code class="lang-auto">0&gt; 13
</code></pre>
<p>It will now scan through the process memory for everything that could be interpreted as a 13, and spit out a message about having some absurd amount of matches.</p>
<pre><code class="lang-auto">info: we currently have 22290 matches.
22290&gt;
</code></pre>
<p>We’re going to have to narrow that down. Go back to your game and change the value. If it’s health you’re trying to modify, go get hit by an enemy. For me, I’ll fire off some shotgun rounds.</p>
<p>When you’re done, you need to let scanmem know how the value changed. You can give it another literal value, like “12”, but scanmem provides a few helpful shortcuts. <code>&gt;</code> tells it that it generally increased, <code>&lt;</code> tells it that it generally decreased, and <code>=</code> tells it that it stayed the same.</p>
<pre><code class="lang-auto">22290&gt; 12
..........info: we currently have 5 matches.
5&gt;
</code></pre>
<p>Wow, that really narrowed it down. Just wash, rinse and repeat until that number of matches stops changing.</p>
<p>If you manage to narrow it down to 1, good job! You can just use the <code>set</code> command to set the variable like this:</p>
<pre><code class="lang-auto">1&gt; set 65535
</code></pre>
<p>Although for me, it’s stuck at four results. That’s not bad, though. You just need to experiment  with writing to those potential addresses. You’ll first need to <code>list</code> the addresses it found:</p>
<pre><code class="lang-auto">4&gt; list
[ 0]      345e214,  2 +       ecf214,  heap, 11, [I32 I16 I8 ]
[ 1]      34606c4,  2 +       ed16c4,  heap, 11, [I32 I16 I8 ]
[ 2]      346bc90,  2 +       edcc90,  heap, 11, [I64 I32 I16 I8 ]
[ 3]      3ecb358,  2 +      193c358,  heap, 11, [I32 I16 I8 ]
</code></pre>
<p>There’s a bit more information than we need here, but that’s no problem. The second column contains the memory address it thinks is the variable, and the last column is the possible integer types. (I8 is an 8-bit signed or unsigned integer, for example). What we’re going to do now is write the value we want to those addresses until the change we want happens. This is done with the <code>write</code> command, which takes the integer type, the address, and the value as parameters.</p>
<pre><code class="lang-auto">4&gt; write i32 34606c4 65535
4&gt; write i32 345e214 65535
4&gt; write i32 346bc90 65535
4&gt; write i32 3ecb358 65535
</code></pre>
<p>And eventually, you will be rewarded.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/6/68ecc59f291bbab8f67927936bd69360ac8a21e0.png" width="690" height="388"></p>
            <p><small>9 posts - 6 participants</small></p>
            <p><a href="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458</link>
          <pubDate>Sun, 18 Jun 2017 23:51:53 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-2458</guid>
          <source url="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458.rss">Game Hacking on Linux - scanmem Basics</source>
        </item>
  </channel>
</rss>
