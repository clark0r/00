<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Blue-Team - 0x00sec - The Home of the Hacker</title>
    <link>https://0x00sec.org/c/blue-team/105</link>
    <description>Topics in the &#39;Blue-Team&#39; category </description>
    
      <lastBuildDate>Sun, 10 Dec 2023 14:54:59 +0000</lastBuildDate>
      <atom:link href="https://0x00sec.org/c/blue-team/105.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Blue Teams Lab: Log Analysis — Compromised WordPress</title>
          <dc:creator><![CDATA[alarick]]></dc:creator>
          <category>Blue-Team</category>
          <description><![CDATA[
            <h1><a name="introduction-1" class="anchor" href="https://0x00sec.org#introduction-1"></a>Introduction</h1>
<p>This is an interesting challenge that contains an attack on a WordPress site using multiple IP addresses and techniques to breach the site. Our goal is to identify the attacker and their methods by analyzing the Apache access.log file. There are 6 question in the challenge and we will use Linux CLI to solve this.</p>
<h1><a name="analysis-2" class="anchor" href="https://0x00sec.org#analysis-2"></a>Analysis</h1>
<p>If an attacker is attacking a web application, he/she might try to login to the admin panel. If they don’t have the required credentials, they may try to brute force the account. This approach is noisy and reports a lot of login failure events in the access.log file. So first lets count the authentication failures for each IP.</p>
<pre><code class="lang-auto">cat access.log | grep "403" | cut -d " " -f 1 | sort | uniq -c | sort -nr
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/d/7/d73249c7fc5d8d23765feed0d71a87d83bcdcfb3.png" alt="image" data-base62-sha1="uHIoGqG8SicCP9XvsY14hxPfNl1" width="163" height="291"></p>
<p>So the IPs to investigate are 110.29.54.120, 168.22.54.119, 197.23.128.35 and 119.241.22.121</p>
<p>When we investigate the first IP in the list: 110.29.54.120 we see a large number of login failures.</p>
<pre><code class="lang-auto">cat access.log | grep "110.29.54.120"
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/4/64259e930d241eb789dabccaf773b426300c6a70.jpeg" data-download-href="/uploads/short-url/ehWltc8526x0XIvwwlMmqz2DCbC.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/6/4/64259e930d241eb789dabccaf773b426300c6a70.jpeg" alt="image" data-base62-sha1="ehWltc8526x0XIvwwlMmqz2DCbC" width="690" height="340" data-dominant-color="27282A"></a></div><p></p>
<p>Anyhow the above picture contains the answer to the first question in the challenge.</p>
<p>Interestingly before all those failures, this IP successfully made a couple of logins to the admin panel. However after all those login failures, this IP tried to enumerate the contact form 7 plugin, but had no luck.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/9/594a4f63b77abd6090cdb5500030294a0a392d6a.png" data-download-href="/uploads/short-url/cJTHCtvFchq1SN6PhRIFFBgHU38.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/9/594a4f63b77abd6090cdb5500030294a0a392d6a_2_690x46.png" alt="image" data-base62-sha1="cJTHCtvFchq1SN6PhRIFFBgHU38" width="690" height="46" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/9/594a4f63b77abd6090cdb5500030294a0a392d6a_2_690x46.png, https://0x00sec.s3.amazonaws.com/original/3X/5/9/594a4f63b77abd6090cdb5500030294a0a392d6a.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/5/9/594a4f63b77abd6090cdb5500030294a0a392d6a.png 2x" data-dominant-color="2E2F31"></a></div><p></p>
<p>Now if we investigate the second IP: 168.22.54.119 and match the wp-login attempts using the following command, we see something that looks like an SQL injection payload.</p>
<pre><code class="lang-auto">cat access.log | grep "168.22.54.119" | grep "/wp-login.php?itsec-hb-token=adminlogin"
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/2/d/2daa779a84f24ff40bb21e508be6b6ae0c53c21f.jpeg" data-download-href="/uploads/short-url/6vYI31INCZXErCbVdS8gfiYyBhZ.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/2/d/2daa779a84f24ff40bb21e508be6b6ae0c53c21f.jpeg" alt="image" data-base62-sha1="6vYI31INCZXErCbVdS8gfiYyBhZ" width="690" height="87" data-dominant-color="2F292A"></a></div><p></p>
<p>The payload is url encoded and if we decode it, it translates as follows:</p>
<pre><code class="lang-auto">2151+AND+1=1+UNION+ALL+SELECT+1,NULL,'&lt;script&gt;alert("XSS")&lt;/script&gt;',table_name+FROM+information_schema.tables+WHERE+2&gt;1--/**/;+EXEC+xp_cmdshell('cat+../../../etc/passwd')#
</code></pre>
<p>Please note there are few more SQLi payloads other than the one shown here. So we can suspect this attacker might have used something like sqlmap. To verify this we can isolate the user agent and analyze.</p>
<pre><code class="lang-auto">cat access.log | grep "168.22.54.119" | cut -d " " -f12-
</code></pre>
<p>And as we suspected, we can see sqlmap user agent in the logs:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/a/4a7b5d38fcb138926c78263960e05a39c8f37d00.jpeg" data-download-href="/uploads/short-url/aCTDDq4OpasacnQ00JgsqEPH6Y8.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/4/a/4a7b5d38fcb138926c78263960e05a39c8f37d00.jpeg" alt="image" data-base62-sha1="aCTDDq4OpasacnQ00JgsqEPH6Y8" width="690" height="126" data-dominant-color="2E2C2E"></a></div><p></p>
<p>If you examine the SQL injection payload, it tries to get a command shell using xp_cmdshell. However, the command xp_cmdshell is a MS SQL Server command so the attacker might be assuming that the wordpress site is using MS SQL Server for linux. Please check the links below.</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------">
  <header class="source">

      <a href="https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------" target="_blank" rel="noopener nofollow ugc">learn.microsoft.com</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/362;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_690x362.png" class="thumbnail" data-dominant-color="D1DDE2" width="690" height="362" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_690x362.png, https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_1035x543.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170.png 2x"></div>

<h3><a href="https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------" target="_blank" rel="noopener nofollow ugc">xp_cmdshell (Transact-SQL) - SQL Server</a></h3>

  <p>Spawns a Windows command shell and passes in a string for execution. Any output is returned as rows of text.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<aside class="onebox allowlistedgeneric" data-onebox-src="https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-overview?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------">
  <header class="source">

      <a href="https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-overview?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------" target="_blank" rel="noopener nofollow ugc">learn.microsoft.com</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/362;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_690x362.png" class="thumbnail" data-dominant-color="D1DDE2" width="690" height="362" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_690x362.png, https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_1035x543.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170.png 2x"></div>

<h3><a href="https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-overview?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------" target="_blank" rel="noopener nofollow ugc">Overview of SQL Server on Linux - SQL Server</a></h3>

  <p>This article describes how SQL Server runs on Linux and provides information on how to learn more.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>Additionally this IP had access to the admin page for a brief period of time. However it seems after trying some other SQL injection payloads, the IP got logged out of the account.</p>
<p>Another interesting thing with this IP is, it tried to enumerate two plugins, Contact Form 7 and Simple File List.</p>
<pre><code class="lang-auto">cat access.log | grep "168.22.54.119" | egrep "contact|simple"
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/8/68d8f1d0f06ea2986db87643245cf06ff29f7f7a.png" data-download-href="/uploads/short-url/eXwsqLDDrT3gnpvpeTvDR0FyisG.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68d8f1d0f06ea2986db87643245cf06ff29f7f7a_2_690x27.png" alt="image" data-base62-sha1="eXwsqLDDrT3gnpvpeTvDR0FyisG" width="690" height="27" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68d8f1d0f06ea2986db87643245cf06ff29f7f7a_2_690x27.png, https://0x00sec.s3.amazonaws.com/original/3X/6/8/68d8f1d0f06ea2986db87643245cf06ff29f7f7a.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/6/8/68d8f1d0f06ea2986db87643245cf06ff29f7f7a.png 2x" data-dominant-color="2F3032"></a></div><p></p>
<p>These two plugins are vulnerable to Arbitrary File Upload. This means an attacker can upload any file to the server, for example a webshell. If you simply search Contact Form 7 arbitrary file upload on duckduckgo, you will find the corresponding CVE (Link below) and that answers the 3rd question.</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://blog.wpsec.com/contact-form-7-vulnerability/">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/3X/6/4/648f7c48715cbf52c622873db322cb885b75dbf6.png" class="site-icon" data-dominant-color="0C86C4" width="32" height="32">

      <a href="https://blog.wpsec.com/contact-form-7-vulnerability/" target="_blank" rel="noopener nofollow ugc" title="02:34PM - 21 December 2020">WPSec – 21 Dec 20</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/285;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/0/b/0bb3cc7e4529df93dd9e0097581c43fbe02c49f2_2_690x285.png" class="thumbnail" data-dominant-color="798679" width="690" height="285" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/0/b/0bb3cc7e4529df93dd9e0097581c43fbe02c49f2_2_690x285.png, https://0x00sec.s3.amazonaws.com/optimized/3X/0/b/0bb3cc7e4529df93dd9e0097581c43fbe02c49f2_2_1035x427.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/0/b/0bb3cc7e4529df93dd9e0097581c43fbe02c49f2.png 2x"></div>

<h3><a href="https://blog.wpsec.com/contact-form-7-vulnerability/" target="_blank" rel="noopener nofollow ugc">CVE-2020-35489: Unrestricted File Upload Vulnerability found in Contact Form...</a></h3>

  <p>A high-severity&nbsp;Unrestricted File Upload&nbsp;vulnerability, tracked as CVE-2020–35489, was discovered in a popular WordPress plugin called&nbsp;Contact Form 7, currently installed on&nbsp;5 Million+ websites&nbsp;making them vulnerable to...</p>

  <p>
    <span class="label1">Est. reading time: 4 minutes</span>
  </p>

  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>The other plugin that is vulnerable is Simple File List. If you search again for a Simple File List exploit, you can find the following link that explains the exploit and the affected version, which answers the 4th question.</p>
<p><a href="https://wpscan.com/vulnerability/365da9c5-a8d0-45f6-863c-1b1926ffd574/" class="onebox" target="_blank" rel="noopener nofollow ugc">https://wpscan.com/vulnerability/365da9c5-a8d0-45f6-863c-1b1926ffd574/</a></p>
<p>Now lets go ahead and analyze the next IP on the list, 197.23.128.35.</p>
<p>It seems this IP also had some success with admin login before getting a lockout.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/c/7/c73647f3cbfdba9436aaab499c36789d21df4e71.png" data-download-href="/uploads/short-url/sqjjqb9kxsmrmbDUNSQf0KRlawx.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/7/c73647f3cbfdba9436aaab499c36789d21df4e71_2_690x55.png" alt="image" data-base62-sha1="sqjjqb9kxsmrmbDUNSQf0KRlawx" width="690" height="55" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/7/c73647f3cbfdba9436aaab499c36789d21df4e71_2_690x55.png, https://0x00sec.s3.amazonaws.com/original/3X/c/7/c73647f3cbfdba9436aaab499c36789d21df4e71.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/c/7/c73647f3cbfdba9436aaab499c36789d21df4e71.png 2x" data-dominant-color="2A2C2D"></a></div><p></p>
<p>After the lockout, it seems this IP tried various attacks, but without a success.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/d/f/df5cf98f265525d509b4cbf3d75106462a59d928.jpeg" data-download-href="/uploads/short-url/vRXFLgIpnl7ut8DvZZOqPuYYKzm.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/d/f/df5cf98f265525d509b4cbf3d75106462a59d928.jpeg" alt="image" data-base62-sha1="vRXFLgIpnl7ut8DvZZOqPuYYKzm" width="690" height="345" data-dominant-color="28292B"></a></div><p></p>
<p>So now, to the final IP address: 119.241.22.121. Now, a lot of things has happened with this IP as well.</p>
<p>First of all, just like the IP 168.22.54.119, this IP also tried to exploit the two plugins: Contact Form 7 and Simple File List.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/a/e/ae51827a4f2bf3a636770d155abe0021b707d16f.png" data-download-href="/uploads/short-url/oS5IeQs2OnSOdOELQcFwba8Pyz5.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/a/e/ae51827a4f2bf3a636770d155abe0021b707d16f_2_690x70.png" alt="image" data-base62-sha1="oS5IeQs2OnSOdOELQcFwba8Pyz5" width="690" height="70" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/a/e/ae51827a4f2bf3a636770d155abe0021b707d16f_2_690x70.png, https://0x00sec.s3.amazonaws.com/original/3X/a/e/ae51827a4f2bf3a636770d155abe0021b707d16f.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/a/e/ae51827a4f2bf3a636770d155abe0021b707d16f.png 2x" data-dominant-color="27292A"></a></div><p></p>
<p>Then it goes on and try a bunch of enumerations to find login portals and control panels:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/e/d/ed06803e318daa5f9d4a8c60fad658bee1a7b5ea.jpeg" data-download-href="/uploads/short-url/xOP5v1mPI4TrY43G6ckcmOajguu.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/e/d/ed06803e318daa5f9d4a8c60fad658bee1a7b5ea.jpeg" alt="image" data-base62-sha1="xOP5v1mPI4TrY43G6ckcmOajguu" width="690" height="232" data-dominant-color="28292A"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/7/6713f5457c41e0ee637e98bc923cc579b71ce546.jpeg" data-download-href="/uploads/short-url/eHRWfk21NkXptS58Zv3jDTUhy9U.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/6/7/6713f5457c41e0ee637e98bc923cc579b71ce546.jpeg" alt="image" data-base62-sha1="eHRWfk21NkXptS58Zv3jDTUhy9U" width="690" height="333" data-dominant-color="29282A"></a></div><p></p>
<p>Then it gains some access to the admin account before getting logged out of it.</p>
<p>Since this is an interesting IP address, lets check the user agents used by this IP. We issue the command like before but with this IP address.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/0/c/0c51995bc44cf389f7534b3823387cf50be2b834.jpeg" data-download-href="/uploads/short-url/1KYyoIA5PqdHrvtxZ2bKa56illq.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/0/c/0c51995bc44cf389f7534b3823387cf50be2b834_2_690x310.jpeg" alt="image" data-base62-sha1="1KYyoIA5PqdHrvtxZ2bKa56illq" width="690" height="310" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/0/c/0c51995bc44cf389f7534b3823387cf50be2b834_2_690x310.jpeg, https://0x00sec.s3.amazonaws.com/original/3X/0/c/0c51995bc44cf389f7534b3823387cf50be2b834.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/0/c/0c51995bc44cf389f7534b3823387cf50be2b834.jpeg 2x" data-dominant-color="29292B"></a></div><p></p>
<p>Here we see something interesting, the attacker used WPScan to enumerate or exploit the WordPress site. So now we know the two tools used by the attacker: sqlmap and wpscan. This answers the 2nd question.</p>
<p>Finally, the attacker has figured out that it is better to use a webshell to access the server. Hence he/she exploited the Simple File List plugin and uploaded the fr34k.png file.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/d/5d852859d40f5f6f65531f7da7988a43694b273d.png" data-download-href="/uploads/short-url/dljH0lqMsYpmlXzN8Dqcp8UaRsN.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d852859d40f5f6f65531f7da7988a43694b273d_2_690x63.png" alt="image" data-base62-sha1="dljH0lqMsYpmlXzN8Dqcp8UaRsN" width="690" height="63" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d852859d40f5f6f65531f7da7988a43694b273d_2_690x63.png, https://0x00sec.s3.amazonaws.com/original/3X/5/d/5d852859d40f5f6f65531f7da7988a43694b273d.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/5/d/5d852859d40f5f6f65531f7da7988a43694b273d.png 2x" data-dominant-color="2E2A2C"></a></div><p></p>
<p>Now we have a lead. The attacker found a way to exploit the application. So lets see if there are any other files with the same name “fr34k”</p>
<pre><code class="lang-auto">cat access.log | grep "fr34k"
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/d/8/d82cbea5928f5641636a15c11f31fb151a44f871.jpeg" data-download-href="/uploads/short-url/uQmZV60sgJ3aoine3JrTdjus4Bb.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/d/8/d82cbea5928f5641636a15c11f31fb151a44f871_2_690x255.jpeg" alt="image" data-base62-sha1="uQmZV60sgJ3aoine3JrTdjus4Bb" width="690" height="255" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/d/8/d82cbea5928f5641636a15c11f31fb151a44f871_2_690x255.jpeg, https://0x00sec.s3.amazonaws.com/original/3X/d/8/d82cbea5928f5641636a15c11f31fb151a44f871.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/d/8/d82cbea5928f5641636a15c11f31fb151a44f871.jpeg 2x" data-dominant-color="2C2D2F"></a></div><p></p>
<p>Yeah so we have a bunch. What stands out is fr34k.php and this is probably a webshell which the answer to the 5th question. Interestingly the webshell upload was done by using a different IP address: 103.69.55.212 which had only one 403 Forbidden case.</p>
<p>Finally if we match the IP: 103.69.55.212 and the word “fr34k.php” we get all the logs corresponding to the webshell.</p>
<pre><code class="lang-auto">cat access.log | grep "103.69.55.212" | grep "fr34k.php"
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/7/0/705adf9b7c6f130eecc256627b90c75ad02bf17a.jpeg" data-download-href="/uploads/short-url/g1WaFUCuEr815yBj2kzzToCOSLM.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/7/0/705adf9b7c6f130eecc256627b90c75ad02bf17a.jpeg" alt="image" data-base62-sha1="g1WaFUCuEr815yBj2kzzToCOSLM" width="690" height="234" data-dominant-color="2E2D2F"></a></div><p></p>
<p>Here, at the end we see when the attacker tried to access the webshell he/she got a 404 error and this answers the 6th question.</p>
<h1><a name="conclusion-3" class="anchor" href="https://0x00sec.org#conclusion-3"></a>Conclusion</h1>
<p>This is a very interesting challenge that teaches you how to use Linux CLI to analyze the web server logs. To prevent such an attacks, one can use Web Application Firewalls (WAFs). There is a plenty of WordPress WAFs available and you can also use application agnostic WAFs like CloudFlare or CrowdStrike to mitigate such attacks.</p>
<p>Originally published on Medium: <a href="https://medium.com/@higgsborn/blue-teams-lab-log-analysis-compromised-wordpress-15d9d7b883ce" class="inline-onebox" rel="noopener nofollow ugc">Blue Teams Lab: Log Analysis — Compromised WordPress | by Higgsborn | Dec, 2023 | Medium</a></p>
            <p><small>5 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286</link>
          <pubDate>Sun, 10 Dec 2023 14:54:59 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38286</guid>
          <source url="https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286.rss">Blue Teams Lab: Log Analysis — Compromised WordPress</source>
        </item>
        <item>
          <title>Canary Tokens - The Zero setup honeypot</title>
          <dc:creator><![CDATA[messede]]></dc:creator>
          <category>Blue-Team</category>
          <description><![CDATA[
            <p><a href="https://canarytokens.org"><strong>CanaryTokens</strong></a>  is a  free offering by  <a href="https://canary.tools/">Thinkst Canary</a> a  Haas(Honeypot as a service provider) provider ,  although it exists since 2015 , i came across it  recently and thought it was worth sharing (and also because our Blue Team Category looked a little pale ) .</p>
<h2>So what can canarytokens do  ?</h2>
<p>Canary Tokens is  what we could call subscribe and forget  honeypot service all you need to do is head over to <a href="https://canarytokens.org"><strong>canarytokens.org</strong></a>  and choose a  token that fits you , there are old school  url bugs to Bitcoin addresses to AWS keys , all you need to do is choose a token that fits you  ,  write a note to yourself on why you created the token and provide a email  to which the alert will be sent when a token is triggered  that’s it , zero hackery involved . Now its time for you to get creative and put  the tokens in the right place , my personal favourite is the AWS access token , i suggest you guys get one now and throw it in your home directory and forget about it  <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:"> .</p>
<h2>Dockerized  CanaryTokens :</h2>
<p>If anybody  wants  their own  <a href="https://github.com/thinkst/canarytokens-docker"><strong>CanaryTokens</strong></a>  setup , its just a<code> git clone</code> and <code>docker-compose up</code> away , it provides almost all the feature available on the site .</p>
<h2>What about SSH , FTP , telnet , git …?</h2>
<p>Well canary tokens can’t exactly do that , but hey there’s <a href="https://opencanary.readthedocs.io/"><strong>Open Canary</strong></a>   , it can emulate  a bunch of services and send alerts to email when triggered , i found it to be quick and easy to deploy , give it a shot.</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/canary-tokens-the-zero-setup-honeypot/22275">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/canary-tokens-the-zero-setup-honeypot/22275</link>
          <pubDate>Thu, 16 Jul 2020 13:23:48 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-22275</guid>
          <source url="https://0x00sec.org/t/canary-tokens-the-zero-setup-honeypot/22275.rss">Canary Tokens - The Zero setup honeypot</source>
        </item>
        <item>
          <title>Securing Docker Containers</title>
          <dc:creator><![CDATA[Rain]]></dc:creator>
          <category>Blue-Team</category>
          <description><![CDATA[
            <p>I made a guide on how to secure docker. I’ve split it up into 3 categories. Feedback is appreciated as this is more a compilation of other resources than anything else and I did not verify everything.</p>
<ul>
<li>
<p>Steps to be taken in the host OS when interacting with Docker</p>
</li>
<li>
<p>Instructions specific to the build configuration file and the creation of containers</p>
</li>
<li>
<p>Security functionality that can integrate with Docker Enterprise specific features.</p>
</li>
</ul>
<p>This guide was compiled from various other resources, many of which are linked below. It is not comprehensive, but it should cover all of the basics. What it does not cover can likely be found in the CIS benchmark linked at the end of this guide, as well as in the Docker documentation</p>
<p><strong>Docker Security Benchmark</strong><br>
The script linked here (<a href="https://github.com/docker/docker-bench-security" rel="noopener nofollow ugc">https://github.com/docker/docker-bench-security</a>) is an automated script that checks for many common Docker best practices. The benchmark script should be considered a good heuristic test of your security, but not as a comprehensive analysis tool.</p>
<p><strong>Host OS</strong><br>
It follows that a Docker container cannot be secured if the host OS is not secure. Therefore you must follow normal security best practices on the host OS, and it would be prudent to run some vulnerability scans against it in addition to implementing the following suggestions.</p>
<p><strong>Audit Rules</strong><br>
Create and use audit rules for Docker-related files using auditctl. An example would be appending “-w /usr/bin/dockerd -k docker” to /etc/audit.rules and then restarting the audit service</p>
<p><strong>FIPS Mode</strong><br>
Enabling FIPS mode forces cryptographic tools to implement their algorithms in a way that complies with federal and industry security standards and regulations. If your host OS supports FIPS Mode, you can enable it by doing the following:</p>
<pre><code class="lang-auto">sed -i 's/GRUB_CMDLINE_LINUX="/GRUB_CMDLINE_LINUX="fips=1 /g' /etc/default/grub
grub2-mkconfig -o /boot/grub2/grub.cfg &amp;&amp; reboot
</code></pre>
<p>Also enable FIPS on the Docker Engine with the command below</p>
<pre><code class="lang-auto">mkdir -p /etc/systemd/system/docker.service.d 2&gt;&amp;1; echo -e "[Service]\n  Environment=\"DOCKER_FIPS=1\"" &gt; /etc/systemd/system/docker.service.d/fips-module.conf; systemctl daemon-reload; systemctl restart docker
</code></pre>
<p>For further reading, see <a href="https://docs.docker.com/compliance/nist/fips140_2/" rel="noopener nofollow ugc">https://docs.docker.com/compliance/nist/fips140_2/</a> and <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/chap-federal_standards_and_regulations" rel="noopener nofollow ugc">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/chap-federal_standards_and_regulations</a></p>
<p><strong>Docker Secrets</strong><br>
Sensitive data should be stored as Docker secrets with the Docker service create command. An<br>
example is shown below:</p>
<pre><code class="lang-auto">docker service create --label com.docker.ucp.access.label=/prod --name nginx --publish 443 --secret source=orcabank_prod_mobile.ca.pem.v1,target=ca.pem nginx
</code></pre>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="/uploads/default/original/2X/5/5bc5313312a92568b6ea4acd18562be895630a45.png" class="site-icon" width="129" height="128">
      <a href="https://docs.docker.com/engine/swarm/secrets/" target="_blank" rel="noopener nofollow ugc" title="02:56PM - 26 September 2020">Docker Documentation – 26 Sep 20</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:129/128;"><img src="/uploads/default/original/2X/5/5bc5313312a92568b6ea4acd18562be895630a45.png" class="thumbnail" width="129" height="128"></div>

<h3><a href="https://docs.docker.com/engine/swarm/secrets/" target="_blank" rel="noopener nofollow ugc">Manage sensitive data with Docker secrets</a></h3>

<p>About secrets In terms of Docker Swarm services, a secret is a blob of data, such as a password, SSH private key, SSL certificate, or another piece of data that...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p><strong>The Docker Config File</strong><br>
The following settings can be added to the configuration file located at /etc/docker/daemon.json</p>
<pre><code class="lang-auto">“icc”:false 
</code></pre>
<p>This Disables inter-container communication to avoid unnecessary information leakage.</p>
<pre><code class="lang-auto">“log-level: “info” 
</code></pre>
<p>This Captures all non-debug logs</p>
<pre><code class="lang-auto">{
  "log-driver": "syslog",
  "log-opts": {
    "syslog-address": "udp://1.2.3.4:1111"
  }
}
</code></pre>
<p>This enables remote logging, sends logs to listed address. Only works if syslog daemon is running. TCP and UDP are accepted as options. Can also be done on a container-by container basis as a parameter when running Docker (–log-opt syslog-address=ADRESS)</p>
<pre><code class="lang-auto">“userns-remap”: “Your_User”
</code></pre>
<p>This prevents privilege escalation attempts by isolating the namespace to a specific user</p>
<p><strong>Transport Layer Security</strong><br>
Restrict connections to the Docker daemon (if remote access must be allowed) to users with access to the TLS client credentials.</p>
<p><strong>Authorization Plugins</strong><br>
Determine which commands should be granted to which users, and create an authorization plugin for Docker accordingly. Then when you run the Docker daemon, add the plugin like so:</p>
<pre><code class="lang-auto">dockerd --authorization-plugin=PLUGIN_ID
</code></pre>
<p>To learn about creating authorization plugins, see this documentation: <a href="https://docs.docker.com/engine/extend/plugins_authorization/" rel="noopener nofollow ugc">https://docs.docker.com/engine/extend/plugins_authorization/</a></p>
<p><strong>Daemon Parameters</strong><br>
The Docker daemon runs with a set of default parameters</p>
<pre><code class="lang-auto">--live-restore
</code></pre>
<p>Enables daemonless containers to maximize available after system shutdown or reboot. This makes it easier to patch and update with minimal downtime</p>
<pre><code class="lang-auto">--userland-proxy=false
</code></pre>
<p>When hairpin NATs are available or in-use, the userland proxy becomes a redundant service that only increases your attack surface.</p>
<pre><code class="lang-auto">--no-new-privileges
</code></pre>
<p>Stops containers from acquiring additional privileges via suid or sguid</p>
<pre><code class="lang-auto">--seccomp-profile /path/to/profile
</code></pre>
<p>If you have a custom seccomp profile you can apply it with this parameter. Learn more about Seccomp and Docker <a href="https://docs.docker.com/engine/security/seccomp/" rel="noopener nofollow ugc">here</a></p>
<p><strong>Container &amp; Build File Configurations</strong></p>
<p><strong>User Creation</strong><br>
Ensure a user is created for your container, and run the container as that user (do NOT run a container as root).</p>
<p><strong>Remote Access</strong><br>
Do not allow remote access to the daemon, and if you absolutely must do so anyway, secure that access with certificates.</p>
<p><strong>Isolate The User Namespace</strong><br>
It’s especially important to ensure that the user namespace is isolated in Docker, as it’s shared with the host namespace by default. This can be abused in some cases to gain privilege escalation, or even escape the container. You can isolate the user namespace by editing the config file as mentioned in the above section “The Docker Config File”. This is mentioned redundantly here to emphasize the importance of doing so.</p>
<p><strong>Healthchecks</strong><br>
Healthcheck is a powerful tool you can use to verify the integrity of a container, and can be configured in your dockerfile. You should implement healthchecks to ensure your container is functioning properly. The example healthcheck below exits with a 0 if the server is up, and a 1 if it is down.</p>
<pre><code class="lang-auto">HEALTHCHECK CMD curl --fail http://localhost || exit 1
</code></pre>
<p><strong>SELinux</strong><br>
If SELinux is supported by your host OS, create or import a SELinux policy and start Docker in daemon mode with SELinux enabled.</p>
<pre><code class="lang-auto">docker daemon --selinux-enable
</code></pre>
<p>Then you can start Docker containers with your security options like so:</p>
<pre><code class="lang-auto">docker run --interactive --tty --security-opt label=level:TopSecret centos /bin/bash 
</code></pre>
<p><strong>Network Interfaces</strong><br>
By default, Docker listens on every network interface. Since in most cases traffic is only expected on one interface, this increases the attack surface unduly. Therefore, when starting a<br>
Docker container you can bind container ports to specific interfaces on the host as shown below</p>
<p>docker run --detach --publish 10.2.3.4:49153:80 nginx</p>
<p><strong>Cached Image Versions</strong><br>
When you pull images, make sure the local cache matches what’s in the repository. Otherwise, you could end up extracting an outdated cached version of an image which contains vulnerabilities.</p>
<p><strong>Network Bridge</strong><br>
The default network model, docker0, is vulnerable to ARP spoofing and MAC flooding. In order to resolve this, make a user-defined bridge network to your specifications as described here: <a href="https://docs.docker.com/network/bridge/" rel="noopener nofollow ugc">https://docs.docker.com/network/bridge/</a></p>
<p><strong>Docker Socket Warning</strong><br>
Never run the Docker socket inside a container. Doing so enables that container to execute Docker commands, and consequently communicate with and control the host OS. So don’t do that.</p>
<p><strong>Enterprise Configurations</strong></p>
<p><strong>Docker Trust</strong><br>
Use the Docker trust tool to generate keys that can be used to verify the cryptographic integrity of your images. Docker trust keys can be used to sign Docker images with private keys, which can be verified with public keys on a Notary Server. More information at <a href="https://docs.docker.com/engine/security/trust/content_trust/" rel="noopener nofollow ugc">https://docs.docker.com/engine/security/trust/content_trust/</a>. To focus on enabling Docker Trust in the Enterprise Engine, skip to this section <a href="https://docs.docker.com/engine/security/trust/content_trust/#enabling-dct-within-the-docker-enterprise-engine" rel="noopener nofollow ugc">https://docs.docker.com/engine/security/trust/content_trust/#enabling-dct-within-the-docker-enterprise-engine</a></p>
<p><strong>Vulnerability Scanning</strong><br>
Docker Enterprise has a built in vulnerability scanning feature, which includes the option to download a database of CVE’s to run offline vuln scans against Docker images. Scanning images on a regular basis will help make them more secure by alerting you to vulnerabilities they possess. Learn more on how to do this here: <a href="https://docs.docker.com/ee/dtr/user/manage-images/scan-images-for-vulnerabilities/" rel="noopener nofollow ugc">https://docs.docker.com/ee/dtr/user/manage-images/scan-images-for-vulnerabilities/</a></p>
<p><strong>LDAP Integration With UCP</strong><br>
The Universal Control Plane can integrate with LDAP for a streamlined authentication system that avoids unnecessary redundancy. Read more about this process here:<br>
</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://docs.mirantis.com/docker-enterprise/v3.0/dockeree-products/ucp.html/_static/favicon.ico" class="site-icon" width="" height="">
      <a href="https://docs.mirantis.com/docker-enterprise/v3.0/dockeree-products/ucp.html" target="_blank" rel="noopener nofollow ugc">docs.mirantis.com</a>
  </header>
  <article class="onebox-body">
    <img src="" class="thumbnail" width="" height="">

<h3><a href="https://docs.mirantis.com/docker-enterprise/v3.0/dockeree-products/ucp.html" target="_blank" rel="noopener nofollow ugc">Mirantis Documentation: Universal Control Plane overview</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
<p><strong>Further Reading</strong><br>
For further reading on Docker security best practices, in addition to the <a href="http://docs.docker.com" rel="noopener nofollow ugc">docs.docker.com</a> resource linked throughout this guide, please also see the Center for Internet Security benchmarks for Docker that can be downloaded here: <a href="https://learn.cisecurity.org/benchmarks" rel="noopener nofollow ugc">https://learn.cisecurity.org/benchmarks</a></p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/securing-docker-containers/16913">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/securing-docker-containers/16913</link>
          <pubDate>Mon, 14 Oct 2019 13:35:06 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-16913</guid>
          <source url="https://0x00sec.org/t/securing-docker-containers/16913.rss">Securing Docker Containers</source>
        </item>
        <item>
          <title>A Blue Team guide to AWS Cloudtrail monitoring</title>
          <dc:creator><![CDATA[tr4cefl0w]]></dc:creator>
          <category>Blue-Team</category>
          <description><![CDATA[
            <h1>A Blue Team guide to AWS Cloudtrail monitoring</h1>
<p>In this post, we stay in the cloud services monitoring and we’ll tackle AWS Cloudtrail. Just like Azure, Cloudtrail can be tricky and there’s a lot of room for improvement, but the documentation is much better than Azure’s. The logs are also streamed in JSON, therefore parsing and field extraction in a SIEM should be easy. The searches in this post were written for Splunk but it might be easy to recreate in a different SIEM.</p>
<p>Once again, just like Azure, this is not a complete guide, first because it would be time consuming but also because companies have different threat models and corporate policies. However, I believe it will help to get you started with some essential and basic searches to build on-top of.</p>
<h2>Requirements</h2>
<p>This depends on your SIEM. Most SIEM or log management platforms provide apps or connectors to easily ingest logs from AWS Cloudtrail. For Splunk specifically, you will likely need the following apps:<br>
<a href="https://splunkbase.splunk.com/app/1876/" rel="nofollow noopener">Splunk Add-on for Amazon Web Services</a>: Responsible for the data ingestion<br>
<a href="https://splunkbase.splunk.com/app/1274/" rel="nofollow noopener">Splunk app for AWS</a> :Responsible for interpreting the data and provides some out of the box dashboards</p>
<p>If you’re using ArcSight, you’ll find the connectors on the ArcSight Marketplace. If such app is not available for the solution you are using, you can script the pulling with the Cloudtrail API. The logs provided are in JSON format so the parsing should be easy.</p>
<h2>AWS Management Console</h2>
<p>AWS Management Console events logged by Cloudtrail under the <code>signin.amazonaws.com</code> event source and enables us to track and monitor user sign-in activity and identify potential security issues. Below are a few examples of how to identify issues with the events from the sign-in logs.</p>
<h3>Successful or failed sign-in attempts</h3>
<p>To know if a sign-in attempt was a success or a failure, we need to search for the <code>ConsoleLogin</code> events in the <code>eventName</code> field. It will display all sign-in activity done through the AWS Management Console. The <code>userName</code> field contains the user name that generated the event and the <code>responseElements.ConsoleLogin</code> contains <code>Failure</code> for a failed sign-in attempt and <code>Success</code> for a successful one. Some additional fields are available, such as <code>additionalEventData.MFAUsed</code> that will tell whether the sign-in attempt was done using MFA or not and <code>userIdentity.type</code> which specifies whether the user is a Root user or IAM user.</p>
<p>As example, the search below returns successful authentications without multi-factor authentication. It can help detect suspicious logins or accounts on which MFA is not enforced.</p>
<pre><code class="lang-auto">sourcetype="aws:cloudtrail" eventName="ConsoleLogin" "responseElements.ConsoleLogin"=Success "additionalEventData.MFAUsed"=No
</code></pre>
<p>Using these events we can monitor and detect multiple types of security issues or successful attacks, such as:</p>
<ul>
<li>brute-forcing attempts</li>
<li>users logging in without MFA</li>
<li>successful logins from previously unseen country</li>
<li>successful logins from known malicious IP address</li>
</ul>
<h3>Failed authentications by source</h3>
<p>This simple search returns a table of failed authentication, including the source IP, country, city and the reason why the authentication failed.</p>
<pre><code class="lang-auto">sourcetype="aws:cloudtrail" eventName="ConsoleLogin" "responseElements.ConsoleLogin"=Failure
| iplocation sourceIPAddress
| stats count by userName, userIdentity.accountId, eventSource, sourceIPAddress, Country, City, errorMessage
| sort - count
</code></pre>
<p>Using this search as a base, you can enrich it by excluding known good IPs and build a list of known attackers in a lookup table. Then, with the list of known attacker, you can create a similar search to look for successful authentication from known attacker’s IPs.</p>
<h2>AWS Elastic Compute Cloud (EC2)</h2>
<p>Amazon Elastic Compute Cloud (Amazon EC2) is a web service that provides secure, resizable compute capacity in the cloud. In this section we will cover multiple type of events to monitor and that can be used to detect suspicious activity. Cloudtrail provides detailed events for any action related to an EC2 instance, including some features such as VPCs, volumes, routing tables, network ACLs and so on. While not all events event are relevant from a security perspective, some can be useful to detect misconfiguration or abuse of large EC2 instances.</p>
<h3>Abuse of GPU instances for Cryptocurrency Mining</h3>
<p>Creation of GPU instances is uncommon in most businesses as they serve specific purposes like parallel computation for artificial intelligence and machine learning. It’s also a good use case for abuse. An employee with malicious intentions could spawn multiple GPU instance to mine cryptocurrencies. Fortunately, we can detect this kind of abuse by looking at the <code>RunInstances</code> actions. These events are generated when a new instance is powered on. The field <code>requestParameters.instanceType</code> contains the type of the instance. The GPU EC2 instances to look for are the following:</p>
<ul>
<li>p3.2xlarge</li>
<li>p3.8xlarge</li>
<li>p3.16xlarge</li>
<li>p3dn.24xlarge</li>
<li>p2.xlarge</li>
<li>p2.8xlarge</li>
<li>p2.16xlarge</li>
<li>g3s.xlarge</li>
<li>g3.4xlarge</li>
<li>g3.8xlarge</li>
<li>g3.16xlarge</li>
</ul>
<p>Below is an example of Splunk search to identify GPU instances that have been started.</p>
<pre><code class="lang-auto">sourcetype="aws:cloudtrail" eventSource="ec2.amazonaws.com" eventName="RunInstances"
| spath output=instanceType path=requestParameters.instanceType
| spath output=minCount path=requestParameters.instancesSet{}.items{}.minCount
| search instanceType IN ("p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "g3s.xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge")
| stats count by eventSource, eventName, awsRegion, userName, userIdentity.accountId, sourceIPAddress, userIdentity.type, requestParameters.instanceType, responseElements.instancesSet.items{}.instanceId, responseElements.instancesSet.items{}.networkInterfaceSet.items{}.privateIpAddress, minCount
| fields - count
</code></pre>
<p>The results contain a variety of useful information that can help quickly identify if the activity was legitimate.</p>
<ul>
<li>One or multiple GPU instance created from a source IP address that is known to be malicious or from or from a previously unseen country might indicate a compromised AWS account.</li>
<li>One or multiple GPU instances created from an IAMUser user type instead of an AssumedRole.</li>
<li>EC2 API throttling hit by a single user in a short amount of time.</li>
<li>The number of instances started in a single API call (field minCount)</li>
</ul>
<h3>Security Groups</h3>
<p>Security groups act as virtual firewall for EC2 instances to control inbound and outbound traffic. By searching the <code>AuthorizeSecurityGroupIngress</code> action in the <code>eventName</code> field we can start looking for dangerous network configurations. Below is a description of the relevant fields for this type of event.</p>
<div class="md-table">
<table>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>requestParameters.groupId</td>
<td>Security group ID</td>
</tr>
<tr>
<td>requestParameters.ipPermissions.items{}.fromPort</td>
<td>From port (range)</td>
</tr>
<tr>
<td>requestParameters.ipPermissions.items{}.ipProtocol</td>
<td>Protocol</td>
</tr>
<tr>
<td>requestParameters.ipPermissions.items{}.ipRanges.items{}.cidrIp</td>
<td>IPv4 network range to allow or deny (CIDR notation)</td>
</tr>
<tr>
<td>requestParameters.ipPermissions.items{}.toPort</td>
<td>To port (range)</td>
</tr>
<tr>
<td>requestParameters.number</td>
<td>Rule number</td>
</tr>
<tr>
<td>sourceIPAddress</td>
<td>Source IP of user creating the ACL</td>
</tr>
</tbody>
</table>
</div><p>In the following example, we look for rules allowing inbound traffic on port 22 from any IPs. Then we look for the associated instance IDs and append them to the list.</p>
<pre><code class="lang-auto">sourcetype="aws:cloudtrail" eventSource="ec2.amazonaws.com" eventName="AuthorizeSecurityGroupIngress"
| spath output=fromPort path=requestParameters.ipPermissions.items{}.fromPort
| spath output=toPort path=requestParameters.ipPermissions.items{}.toPort
| spath output=cidrIp path=requestParameters.ipPermissions.items{}.ipRanges.items{}.cidrIp
| spath output=groupId path=requestParameters.groupId
| spath output=accountId path=userIdentity.accountId
| spath output=type path=userIdentity.type
| search fromPort=22 toPort=22 AND cidrIp="0.0.0.0/0"
| spath output=ipPermissions path=requestParameters.ipPermissions.items{}
| mvexpand ipPermissions
| fields - fromPort, toPort, cidrIp
| spath input=ipPermissions
| spath output=cidrIp path=ipRanges.items{}.cidrIp input=ipPermissions
| join groupId
    [ search index=aws eventName=RunInstances earliest=-7d
    | fields "responseElements.instancesSet.items{}.groupSet.items{}.groupId", "responseElements.instancesSet.items{}.instanceId"
    | rename responseElements.instancesSet.items{}.groupSet.items{}.groupId as groupId, "responseElements.instancesSet.items{}.instanceId" as instanceId]
| stats values(instanceId) by groupId, userName, accountId, type, sourceIPAddress, cidrIp, fromPort, toPort, ipProtocol
</code></pre>
<p>The table returned by this search not only gives us the misconfigured security groups, but also the affected instance IDs and account IDs (took me a while before figuring out how to write this one). If you wish to extract the public IP addresses for all instances IDs and append them to the results, you will need a subscription to AWS Config or use the <code>DescribeInstances</code> <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html" rel="nofollow noopener">API endpoint</a>.</p>
<h3>Network ACLs</h3>
<p>The <code>CreateNetworkAclEntry</code> action allows us to monitor newly created ACL entries (rules) to detect dangerous network configurations. Network ACLs are optional and provide an additional layer of security in addition to security groups.</p>
<p>What are the differences between Network ACLs and Security Groups? Network ACLs are applicable at the subnet level, so any instance in the subnet with an associated ACL will follow the rules of the ACL. That’s not the case with security groups as they have to be assigned explicitly to one or multiple instances.</p>
<p>If a security group allows traffic from ANY to port 22, before reporting this (depending on your company’s policy), I suggest confirming the following:</p>
<ul>
<li>Is there an ACL applied to the subnet concerned?</li>
<li>If there is, does it restrict SSH to a whitelist of IPs?</li>
</ul>
<p>Inversely, you can also investigate a Network ACL that allows SSH from ANY.</p>
<ul>
<li>Are the instances on this subnet protected by a security group?</li>
<li>If they are, does it restrict SSH to a whitelist of IPs?</li>
</ul>
<p>Below is a description of the relevant fields for this type of event.</p>
<div class="md-table">
<table>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>requestParameters.aclProtocol</td>
<td>Protocol number</td>
</tr>
<tr>
<td>requestParameters.cidrBlock</td>
<td>IPv4 network range to allow or deny (CIDR notation)</td>
</tr>
<tr>
<td>requestParameters.egress</td>
<td>True if outbound, False if inbound</td>
</tr>
<tr>
<td>requestParameters.number</td>
<td>Rule number</td>
</tr>
<tr>
<td>requestParameters.portRange.from</td>
<td>From port (range)</td>
</tr>
<tr>
<td>requestParameters.portRange.to</td>
<td>To port (range)</td>
</tr>
<tr>
<td>requestParameters.ruleAction</td>
<td>Allow or Deny</td>
</tr>
<tr>
<td>sourceIPAddress</td>
<td>Source IP of user creating the ACL</td>
</tr>
</tbody>
</table>
</div><p>In the following example, we search for creation of Network ACL rules allowing inbound connections from any sources.</p>
<pre><code class="lang-auto">sourcetype="aws:cloudtrail" eventSource="ec2.amazonaws.com" eventName=CreateNetworkAclEntry
| spath output=cidrBlock path=requestParameters.cidrBlock
| spath output=ruleAction path=requestParameters.ruleAction
| search cidrBlock=0.0.0.0/0 ruleAction=Allow
</code></pre>
<h2>AWS Simple Storage Service (S3)</h2>
<h3>Detecting public S3 buckets</h3>
<p>Public S3 buckets has been a big issue since the creation of the service. If a bucket is set to public by mistake, it can leak confidential and sensitive information. More importantly, if a bucket is public and also has the write permissions on it, its content could be altered by a malicious attacker. By looking for the <code>PutBucketAcl</code> event name where the grantee URI is <code>AllUsers</code> we can identify and report the open buckets. The search below does exactly that:</p>
<pre><code class="lang-auto">sourcetype=aws:cloudtrail AllUsers eventName=PutBucketAcl errorCode=Success
| spath output=userIdentityArn path=userIdentity.arn
| spath output=bucketName path=requestParameters.bucketName
| spath output=aclControlList path=requestParameters.AccessControlPolicy.AccessControlList
| spath input=aclControlList output=grantee path=Grant{}
| mvexpand grantee
| spath input=grantee
| search Grantee.URI=*AllUsers
| rename userIdentityArn as user
| table _time, src,awsRegion Permission, Grantee.URI, bucketName, user
</code></pre>
<h2>Conclusion</h2>
<p>I hope this was helpful in getting you started if you’ve just set up the ingestion of Cloudtrail and wondered where to start. If you have questions or would like to exchange ideas, you can email me at <a href="mailto:tr4cefl0w@protonmail.com">tr4cefl0w@protonmail.com</a> or by DM on <a href="https://twitter.com/tr4cefl0w" rel="nofollow noopener">Twitter</a>.</p>
<p>I will also be at DEFCON so message me if you think I could help you with something or simply to hang out or say hi. I’ll be pretty busy but I can always try to find some time to meet new people and help out.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/a-blue-team-guide-to-aws-cloudtrail-monitoring/15086">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/a-blue-team-guide-to-aws-cloudtrail-monitoring/15086</link>
          <pubDate>Sat, 20 Jul 2019 19:37:58 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-15086</guid>
          <source url="https://0x00sec.org/t/a-blue-team-guide-to-aws-cloudtrail-monitoring/15086.rss">A Blue Team guide to AWS Cloudtrail monitoring</source>
        </item>
        <item>
          <title>About the Blue-Team category</title>
          <dc:creator><![CDATA[ricksanchez]]></dc:creator>
          <category>Blue-Team</category>
          <description><![CDATA[
            <p>(Replace this first paragraph with a brief description of your new category. This guidance will appear in the category selection area, so try to keep it below 200 characters.)</p>
<p>Use the following paragraphs for a longer description, or to establish category guidelines or rules:</p>
<ul>
<li>
<p>Why should people use this category? What is it for?</p>
</li>
<li>
<p>How exactly is this different than the other categories we already have?</p>
</li>
<li>
<p>What should topics in this category generally contain?</p>
</li>
<li>
<p>Do we need this category? Can we merge with another category, or subcategory?</p>
</li>
</ul>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/about-the-blue-team-category/14423">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/about-the-blue-team-category/14423</link>
          <pubDate>Tue, 18 Jun 2019 08:51:35 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-14423</guid>
          <source url="https://0x00sec.org/t/about-the-blue-team-category/14423.rss">About the Blue-Team category</source>
        </item>
        <item>
          <title>A Blue Team guide to Azure &amp; Office 365 monitoring</title>
          <dc:creator><![CDATA[tr4cefl0w]]></dc:creator>
          <category>Blue-Team</category>
          <description><![CDATA[
            <p>A few weeks ago I thought that 0x00sec didn’t have enough Blue Team focused posts. Yet, detection of potential threats is incredibly important in any organization. Because Azure and Office 365 are widely used, I decided to start with this. I hope you will find it useful because unfortunately, there is a lack of good resources other than Microsoft when it comes to monitoring Azure with a SIEM and I had to spend many hours to study the logs and figure out what was relevant.</p>
<p>This is not a complete guide for all the products and services within Azure. I just don’t have enough spare time to do it all. But I think it’s a great starting point to monitor the commonly used services.</p>
<p>Most of the queries here are built for Splunk because of its increasing popularity as a SIEM. If you or your organization doesn’t use Splunk, you can convert them manually or try using <a href="https://github.com/Neo23x0/sigma" rel="nofollow noopener">Sigma</a>. The queries are meant to be base searches that you can built on top of and customize to your needs.</p>
<h2>Requirements for log ingestion</h2>
<p>This depends on your SIEM. Most SIEM or log management platforms provide apps or connectors to easily ingest logs from Azure. For Splunk specifically, you will likely need the following apps:</p>
<p><a href="https://splunkbase.splunk.com/app/4055/#/details" rel="nofollow noopener">Splunk Add-on for Microsoft Office 365</a><br>
<a href="https://splunkbase.splunk.com/app/3110/" rel="nofollow noopener">Splunk Add-on for Microsoft Cloud Services</a><br>
<a href="https://splunkbase.splunk.com/app/3720/" rel="nofollow noopener">Microsoft Office 365 Reporting Add-on for Splunk</a></p>
<p>If you’re using ArcSight, you’ll find the connectors on the ArcSight Marketplace.</p>
<p>If such app is not available for the solution you are using, you can script the pulling with the Azure API. The logs provided are in JSON format so the parsing should be easy.</p>
<p>The details on the integration for Azure activity logs can be found <a href="https://docs.microsoft.com/en-us/azure/security/azure-log-audit" rel="nofollow noopener">here</a> in the <em>integration</em> column for each type of log. For Office 365 specifically, details can be found <a href="https://docs.microsoft.com/en-us/office/office-365-management-api/office-365-management-activity-api-reference" rel="nofollow noopener">here</a>.</p>
<h2>Building a list of known attackers</h2>
<p>Chances are that you are the target of password spray and bruteforce attacks. This is something that your organization can use to its advantage by building a list of “known attackers”. You can then use this list for:</p>
<ul>
<li>Identifying other services targeted by the attackers</li>
<li>Succesful authentication from these sources to identify compromised account</li>
<li>Conduct intelligence gathering to determine if your organization is specifically targeted</li>
</ul>
<p>A reliable way I found to build such list using Azure is to look for an unknown IP generating an account lockout on N distinct accounts. In the search below, I first start by looking for sources generating locked accounts and exclude the IP addresses that already exist in the list to avoid duplicates. Then, I run the <code>iplocation</code> command in Splunk to get the country and city of each one of them. Finally, I do a distinct count on the UserId field by ClientIP and the source IPs that locked 5 or more accounts are appended to the list.</p>
<pre><code class="lang-auto">sourcetype=o365:management:activity
Operation=UserLoginFailed
LogonError=IdsLocked
`comment("Don`t include duplicates")`
NOT [|inputlookup azure_ipv4_blacklist | fields ClientIP]
| iplocation ClientIP
| stats dc(UserId) as DistinctUsersLocked by ClientIP, Country, City
| where DistinctUsersLocked &gt;= 5
| fields ClientIP, Country, City
| outputlookup append=t azure_ipv4_blacklist
</code></pre>
<h2>Exchange Online</h2>
<h3>Users sending large amount of emails to external recipients</h3>
<p>Attempts to detect potentially compromised hosts spamming external recipients. In large organization, this might generate multiple false-positive due to internal communications, mass mailing, etc so I recommend filtering by excluding some legitimate senders. The threshold can be modified in the <code>where RecipientCount &gt;= 100</code> part.</p>
<pre><code class="lang-auto">sourcetype=ms:o365:reporting:messagetrace
RecipientAddress!="*@&lt;yourdomain.tld&gt;" 
| stats dc(RecipientAddress) by SenderAddress, Subject 
| rename dc(RecipientAddress) as RecipientCount 
| where RecipientCount &gt;= 100 
| sort - RecipientCount
</code></pre>
<h3>Mail forwarding to external recipients</h3>
<p>Email forwarding can be set up by both administrators and users. It’s very important to monitor these kind of events to detect insider threats. The difference is that administrators can set up new mail transport rules that affect one or multiple users within Exchange Online while users can only do it on their own mailbox from the Outlook client.</p>
<h4>Forwarding to an external recipient by an administrator</h4>
<p>Administrator using <code>New-TransportRule</code> cmdlet</p>
<pre><code class="lang-auto">sourcetype=o365:management:activity
Workload=Exchange
Operation="New-TransportRule" 
| eval kv=mvzip('Parameters{}.Name', 'Parameters{}.Value', "=") 
| mvexpand kv 
| rex field=kv "^(?&lt;kv_key&gt;[^=]+)=(?&lt;kv_value&gt;[^=]+)$" 
| eval {kv_key}=kv_value 
| search kv_key=RedirectMessageTo 
| rename kv_value as dest 
| search dest!="*@&lt;yourdomain.tld&gt;" 
| table _time, user, src, dest 
</code></pre>
<h4>Forwarding to an external recipient by a user</h4>
<p>User using the Outlook client</p>
<pre><code class="lang-auto">sourcetype=o365:management:activity
Workload=Exchange
Operation="UpdateInboxRules"
"Forward"
| eval kv=mvzip('OperationProperties{}.Name', 'OperationProperties{}.Value', "=") 
| mvexpand kv 
| rex field=kv "^(?&lt;kv_key&gt;[^=]+)=(?&lt;kv_value&gt;[^=]+)$" 
| eval {kv_key}=kv_value 
| search kv_key=RuleActions
| rename kv_value as RuleActions
| rex field=RuleActions "(?&lt;dest&gt;(([^&lt;&gt;()\[\]\.,;:\s@\"]+(\.[^&lt;&gt;()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^&lt;&gt;()[\]\.,;:\s@\"]+\.)+[^&lt;&gt;()[\]\.,;:\s@\"]{2,}))"
| search dest!="*@&lt;yourdomain.ltd&gt;"
| table _time, user, dest, Operation, RuleActions
</code></pre>
<h3>Mailbox item deleted by a user other than a mailbox owner</h3>
<p>Useful to monitor users with permissions on another user’s mailbox deleting items that could be sensitive or that shouldn’t be deleted in the first place.</p>
<pre><code class="lang-auto">index=azure sourcetype=o365:management:activity
Workload=Exchange 
AND (Operation=HardDelete OR Operation=SoftDelete) 
| where MailboxOwnerUPN!=user 
| table _time, MailboxOwnerUPN, Operation, AffectedItems{}.ParentFolder.Path, AffectedItems{}.Subject, user
</code></pre>
<h2>OneDrive</h2>
<h3>Users sharing OneDrive items with individuals outside of the organizations</h3>
<p>This is self-explanatory and can be useful to detect individuals voluntarily sharing confidential information with external party or typo mistakes. Here too, a list of trusted third-party (partners, subsidiaries, etc) emails could be useful to filter out the noise.</p>
<pre><code class="lang-auto">index=azure sourcetype=o365:management:activity
Workload=OneDrive
Operation=AddedToSecureLink
TargetUserOrGroupName!="*@&lt;organization.tld&gt;" 
| stats count by _time, UserId, ObjectId, Operation, TargetUserOrGroupName
</code></pre>
<h2>Azure Active Directory</h2>
<h3>A note on MFA and legacy authentication</h3>
<p>Azure allows legacy authentication using ActiveSync. That means that even if you have MFA enforced in Azure across your organization, as long as legacy authentication is enabled, MFA is useless against successful bruteforcing, password spraying or authentication to a mailbox with a compromised account.</p>
<h3>Locked accounts</h3>
<p>Identifies locked accounts from existing users. I say existing, because oddly, Azure detects and locks non-existing accounts (I’m not kidding) which explain the exclusion of unknown actor IDs in the <code>"Actor{}.ID"!="Unknown"</code> part. Removing this would return many false-positive as it would include any locks for accounts that don’t exist in your organization.</p>
<pre><code class="lang-auto">sourcetype=o365:management:activity
Workload=AzureActiveDirectory
Operation=UserLoginFailed
LogonError=IdsLocked "Actor{}.ID"!="Unknown"
| iplocation ClientIP
| stats count by UserId, ClientIP, Country, City, ResourceName
| sort - count
</code></pre>
<h3>Succesful authentication without the use of MFA from a blacklisted IP</h3>
<p>This is where the blacklist from earlier can be useful. You can detect compromised accounts using a blacklist of known attackers of your own or using threat intelligence feeds.</p>
<pre><code class="lang-auto">sourcetype=o365:management:activity
NOT "OAuth2"
AND Operation=UserLoggedIn 
LogonError!=UserAccountNotFound 
    [| inputlookup &lt;blacklist_lookup&gt; 
    | fields &lt;ip_field&gt; 
    | rename &lt;ip_field&gt; as ClientIP] 
| table _time, UserId, ClientIP
</code></pre>
<p>If using Splunk Enterprise Security, you can replace the <code>|inputlookup</code> command part and use the <code>ip_intel</code> macro instead to match on the threat intel aggregated in Splunk.</p>
<pre><code class="lang-auto">sourcetype=o365:management:activity
Workload=AzureActiveDirectory
Operation=UserLoggedIn
LogonError!=UserAccountNotFound 
[| `ip_intel` 
| search threat_collection=ip_intel ip!="" 
| fields ip 
| rename ip as ClientIP] NOT "OAuth2"
</code></pre>
<h3>Users with a high count of failed MFA challenges</h3>
<p>That one can be noisy because the integration with some products can be very buggy. Otherwise, it’s very useful to detect accounts for which the password was compromised but the authentication failed because MFA was enabled. It’s really up to you and your knowledge of your environment to define the threshold and what is a high count. If you happen to have multiple offices or remote users, I strongly suggest excluding a list of known legitimate public IPs to reduce the noise.</p>
<pre><code class="lang-auto">sourcetype=o365:management:activity
LogonError=UserStrongAuthClientAuthNRequiredInterrupt 
| stats count by user, ClientIP 
| where count &gt;= 10
</code></pre>
<h2>eDiscovery</h2>
<p>eDiscovery is a very sensitive feature, part of the Security &amp; Compliance Center. It can be used to search anything in an indiviual account or all user accounts in your organization. While that seems creepy (and it is, which is why its use should be monitored), it is extremely useful for acquiring evidence in legal cases.</p>
<h3>Compliance search started or exported</h3>
<p>Anytime actions such as an eDiscovery compliance search is ran, it should be reported and validated by whoever is responsible for overseeing legal cases or HR in your company, due to the sensitivity of the information.</p>
<pre><code class="lang-auto">sourcetype=o365:management:activity
Workload=SecurityComplianceCenter 
Operation=AlertTriggered
Category=ThreatManagement
Name="eDiscovery search started or exported"
`comment("Use regex to re-write the user field with the user name that triggered the alert.
          Otherwise, the user appearing by default is 'SecurityComplianceAlerts'")`
| rex "(?&lt;user&gt;[\w\-\.]+@[\w\-]+\.+[\w\-]{2,4})"
| `map_notable_fields`
</code></pre>
<h3>Compliance search requesting the deletion of items</h3>
<p>Legitimate most of the time (i.e. removing phishing emails from users mailboxes), it can also be used to remove incriminating evidence. Pay a particular attention to the <code>-PurgeType</code> argument shown in the logs as a <code>HardDelete</code> indicates permanent removal.</p>
<pre><code class="lang-auto">sourcetype=o365:management:activity
Workload=SecurityComplianceCenter
"New-ComplianceSearchAction"
"-Purge"
</code></pre>
<p>As important as eDiscovery searches is monitoring users added as administrator in Security &amp; Compliance Center.</p>
<pre><code class="lang-auto">sourcetype=o365:management:activity
Workload=SecurityComplianceCenter
"Add-eDiscoveryCaseAdmin"
</code></pre>
<h2>Conclusion</h2>
<p>I hope this will help you getting start. Feel free to message me privately here or on <a href="https://twitter.com/tr4cefl0w" rel="nofollow noopener">Twitter</a> if you need any help or have any questions. You can also email me at <a href="mailto:tr4cefl0w@protonmail.com">tr4cefl0w@protonmail.com</a></p>
<p>Edit: Added a section on log ingestion and change the format of the queries so they are easier to read.</p>
            <p><small>7 posts - 6 participants</small></p>
            <p><a href="https://0x00sec.org/t/a-blue-team-guide-to-azure-office-365-monitoring/14411">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/a-blue-team-guide-to-azure-office-365-monitoring/14411</link>
          <pubDate>Mon, 17 Jun 2019 17:04:51 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-14411</guid>
          <source url="https://0x00sec.org/t/a-blue-team-guide-to-azure-office-365-monitoring/14411.rss">A Blue Team guide to Azure &amp; Office 365 monitoring</source>
        </item>
  </channel>
</rss>
