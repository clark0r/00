<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Nationwide Competition - Territory Tester [Part 1]</title>
    <link>https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548</link>
    <description>Hey Mates,
I have much to do at the moment, so I can&#39;t publish that often, but I try to do as much as I can :slight_smile:.
However, I am currently studying for the &quot;Bundeswettbewerb für Informatik&quot; in germany which takes place in September (*In english: Nationwide competition for informatics*) and I thought these exercises could be interesting for you too! Whenever I&#39;m finished with the next one I post the exercise description here and my solution, which will be probably in C#.

---
## Description
This time you have to build a simple program which takes a territoy as input and prints out if it overlaps with other territories. The territories are given like this: 3385. The first two numbers are the x and y coordinate of the corner on the bottom left of the rectangle. The last two numbers represent the x and y coordinate of the top right point.
See the coordinate system below:
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/14aaaf3fe441e609a6aef624489ab35bb22c1887.PNG&quot; width=&quot;690&quot; height=&quot;388&quot;&gt;
Here you can see 3 territories. The black and red one can get allowed, but the blue one overlaps, so it has to get disallowed!
Ok, I hope you understood the system.

---
## My Solution
Here you can find a simple program in C# which takes the territories one by one and always prints out if they can get allowed or not.

```
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Territory_Tester
{
    class Program
    {
        static void Main(string[] args)
        {
            List&lt;String&gt; areas = new List&lt;String&gt;();

            while (true)
            {
                //Get territory and validates
                String territory = input(&quot;\nYour territory (e.g. 3385): &quot;);
                if (!validate(territory))
                    continue;

                //Build a list of all points in the rectangle
                List&lt;String&gt; points = getAllPoints(territory);

                //Tests if the rectangle can be allowed
                if(testTerritory(areas, points))
                {
                    areas.Add(territory);
                    Console.WriteLine(&quot;[*] This territory can get allowed!&quot;);
                }
                else
                {
                    Console.WriteLine(&quot;[!] This territory can&#39;t get allowed!&quot;);
                }
            }
        }

        /// &lt;summary&gt;
        /// Tests if the territory overlaps
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;areas&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;points&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static bool testTerritory(List&lt;String&gt; areas, List&lt;String&gt; points)
        {
            foreach(String terr in areas)
            {
                foreach(String p in points)
                {
                    int x = int.Parse(p[0].ToString());
                    int y = int.Parse(p[1].ToString());

                    if(x &lt; int.Parse(terr[2].ToString()) &amp;&amp; x &gt; int.Parse(terr[0].ToString()))
                    {
                        if (y &lt; int.Parse(terr[3].ToString()) &amp;&amp; y &gt; int.Parse(terr[1].ToString()))
                            return false;
                    }
                }
            }

            return true;
        }

        /// &lt;summary&gt;
        /// This function builds a list with all points in the rectangle
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;territory&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static List&lt;String&gt; getAllPoints(String territory)
        {
            int x = int.Parse(territory[0].ToString());
            int y = int.Parse(territory[1].ToString());
            int xMax = int.Parse(territory[2].ToString());
            int yMax = int.Parse(territory[3].ToString());

            List&lt;String&gt; points = new List&lt;String&gt;();

            while (x &lt;= xMax)
            {
                while(y &lt;= yMax)
                {
                    String p = x.ToString() + y.ToString();
                    points.Add(p);

                    y += 1;
                }
                x += 1;
                y = int.Parse(territory[1].ToString());
            }

            return points;
        }

        /// &lt;summary&gt;
        /// Tests whether it&#39;s a valid territory
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;territory&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static bool validate(String territory)
        {
            //Tests the length
            if (territory.Length != 4)
            {
                Console.WriteLine(&quot;\n[!] Not a valid territory!&quot;);
                return false;
            }

            //Tests whether the input is a number
            try
            {
                int.Parse(territory);
            }
            catch
            {
                Console.WriteLine(&quot;\n[!] Not a valid territory!&quot;);
                return false;
            }

            return true;
        }

        /// &lt;summary&gt;
        /// Just a small input with given text function. It&#39;s like input() in Python.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;text&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;User input&lt;/returns&gt;
        static String input(String text)
        {
            Console.Write(text);
            return Console.ReadLine();
        }
    }
}
```

---
## Conclusion
This can be seen as a good programming challenge. I think it&#39;s good for learning to build up a strategy first and then work on accomplishing it. As always I hope you have fun with trying to solve this easy challenge.

|-TheDoctor-|</description>
    
    <lastBuildDate>Sun, 05 Jun 2016 16:14:50 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Nationwide Competition - Territory Tester [Part 1]</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/9</link>
        <pubDate>Sun, 21 Jan 2018 00:31:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-548-9</guid>
        <source url="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548.rss">Nationwide Competition - Territory Tester [Part 1]</source>
      </item>
      <item>
        <title>Nationwide Competition - Territory Tester [Part 1]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Well, when you start to learn C++, there will be a few things you’ll have to rethink. Again: <em>good C code makes for bad C++</em>.</p>
          <p><a href="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/8</link>
        <pubDate>Sun, 05 Jun 2016 16:14:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-548-8</guid>
        <source url="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548.rss">Nationwide Competition - Territory Tester [Part 1]</source>
      </item>
      <item>
        <title>Nationwide Competition - Territory Tester [Part 1]</title>
        <dc:creator><![CDATA[JaCube]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="oaktree" data-post="5" data-topic="548">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/oaktree/40/4077_2.png" class="avatar"> oaktree:</div>
<blockquote>
<p>So, don’t think you’re learning C/C++, understand you are learning C or C++</p>
</blockquote>
</aside>
<p>Sure, I’m just told C/C++ because I’m planned to learn C++ too (after C). In the next time, I’ll be more attentive to things like this.</p>
          <p><a href="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/7</link>
        <pubDate>Sat, 04 Jun 2016 23:17:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-548-7</guid>
        <source url="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548.rss">Nationwide Competition - Territory Tester [Part 1]</source>
      </item>
      <item>
        <title>Nationwide Competition - Territory Tester [Part 1]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Alright. Here’s my solution in the beautiful C++ Programming Language:</p>
<pre><code class="lang-auto">#include &lt;iostream&gt;
#include &lt;vector&gt;
 
struct rectangle {
    int bottom_left_x,
        bottom_left_y,
        top_right_x,
        top_right_y;
};
 
bool check_territory(const std::vector&lt;rectangle&gt;&amp; graph, const rectangle&amp; to_check);
bool are_ints(const std::string&amp; str);
 
int main() {
    std::vector&lt;rectangle&gt; graph;
    std::string input;
    rectangle new_rect;
    while(true) {
        std::cout &lt;&lt; "[!] Input graph coords. ";
        std::cin &gt;&gt; input;
 
        if (input.size() != 4 || !are_ints(input)) {
            std::cout &lt;&lt; "[!] ERROR: Invalid Input. Try again..." &lt;&lt; std::endl;
            continue;
        }
 
        new_rect = {
            int(input[0]) - 48,
            int(input[1]) - 48,
            int(input[2]) - 48,
            int(input[3]) - 48
        };
 
        if (check_territory(graph,new_rect)) {
            graph.push_back(new_rect);
            std::cout &lt;&lt; "[!] This rectangle will fit. "
                &lt;&lt; "Adding to graph... Ctrl+C to finish. "
                &lt;&lt; std::endl;
        } else {
            std::cout &lt;&lt; "[!] This rectangle does not fit. Try again."
                &lt;&lt; std::endl;
        }
    }
    return 0;
}
 
bool check_territory(const std::vector&lt;rectangle&gt;&amp; graph, const rectangle&amp; to_check) {
    if (graph.size() == 0) return true;
 
    for (auto&amp; rect : graph) {
        if ( !( to_check.bottom_left_x &lt; rect.bottom_left_x
                || to_check.bottom_left_y &lt; rect.bottom_left_y )
            || !( to_check.top_right_x &gt; rect.top_right_x
                || to_check.top_right_y &gt; rect.top_right_y )
            || !( to_check.bottom_left_x &lt; rect.top_right_x
                || to_check.bottom_left_y &lt; rect.top_right_y )
            || !( to_check.top_right_x &gt; rect.bottom_left_x
                || to_check.top_right_y &gt; rect.bottom_left_y )
            || !( to_check.bottom_left_x &gt; rect.top_right_x
                || to_check.top_right_y &lt; rect.bottom_left_y )
            || !( to_check.top_right_x &lt; rect.bottom_left_x
                || to_check.bottom_left_y &gt; rect.top_right_y )
            )
        {
            return false;
        }
    }
 
    return true;
}
 
bool are_ints(const std::string&amp; str) {
    for (auto&amp; c : str)
        if (c &lt; '0' || c &gt; '9')
            return false;
 
    return true;
}
</code></pre>
<p><em><strong>Line Count: 78</strong></em></p>
<p><a href="http://pastebin.com/dPY5iPyN" rel="nofollow noopener">Here</a> is an alternative pastebin link.</p>
<p>I’ll gladly explain this code if someone doesn’t “get it.”</p>
          <p><a href="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/6</link>
        <pubDate>Sat, 04 Jun 2016 22:05:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-548-6</guid>
        <source url="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548.rss">Nationwide Competition - Territory Tester [Part 1]</source>
      </item>
      <item>
        <title>Nationwide Competition - Territory Tester [Part 1]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/jacube">@JaCube</a> you shouldn’t use raw pointers in C++… I’m not one to talk, though…</p>
<p>EDIT: Crap, I saw the “C/C++” and assumed C++. Oh, well…</p>
<p>But then again: C and C++ are not the same. Good C code makes for awful C++ code. So, don’t think you’re learning C/C++, understand you are learning C <em><strong>or</strong></em> C++.</p>
          <p><a href="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/5</link>
        <pubDate>Sat, 04 Jun 2016 21:06:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-548-5</guid>
        <source url="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548.rss">Nationwide Competition - Territory Tester [Part 1]</source>
      </item>
      <item>
        <title>Nationwide Competition - Territory Tester [Part 1]</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>Yeah and I’m studying C for about 1 week and a half and just got done coding the Linux Kernel.</p>
          <p><a href="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/4</link>
        <pubDate>Sat, 04 Jun 2016 21:06:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-548-4</guid>
        <source url="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548.rss">Nationwide Competition - Territory Tester [Part 1]</source>
      </item>
      <item>
        <title>Nationwide Competition - Territory Tester [Part 1]</title>
        <dc:creator><![CDATA[JaCube]]></dc:creator>
        <description><![CDATA[
            <p>After my introducing I decide to learn C/C++ and I’m started about 1 week ago. So, look at my first solution written with C <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p><code>CTerritoryChecker.c</code> file:</p>
<pre><code class="lang-auto">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include "Rect.h"

int checkAllIntersections(Rect*, DynamicRectArray *);
int checkintersection(Rect *, Rect *);
int readnextrect(Rect *);
int isint(char *);
int chartoint(char *);

int main(void) {
	DynamicRectArray array;
	initializeRectArray(&amp;array);
	Rect *currentRect = getNewRect(&amp;array);

	while (1) {
		readnextrect(currentRect);
		if (checkAllIntersections(currentRect, &amp;array)) {
			printf("[*] This territory can get allowed!\n");
			currentRect = getNewRect(&amp;array);
		} else {
			printf("[!] This territory can't get allowed!\n");
		}
	}
	return EXIT_SUCCESS;
}

int checkAllIntersections(Rect * currentRect, DynamicRectArray *rects) {
	int i, j;
	for (i = 0; i &lt; rects-&gt;used; i++) {
		Rect *r0 = &amp;rects-&gt;elements[i];
		if (r0 != currentRect &amp;&amp; checkintersection(r0, currentRect)) {
			return 0;
		}
	}
	return 1;
}

int checkintersection(Rect * r0, Rect * r1) {
	if ((r0-&gt;left &lt; r1-&gt;right) &amp;&amp; (r0-&gt;right &gt; r1-&gt;left)
			&amp;&amp; (r0-&gt;top &gt; r1-&gt;bottom) &amp;&amp; (r0-&gt;bottom &lt; r1-&gt;top)) {
		return 1;
	}
	return 0;
}

int readnextrect(Rect* rect) {
	printf("Enter territory (e.x. 3385):");
	int done = 0;
	int parsedCount = 0;
	while (!done) {
		char c = getchar();
		if (c == '\0' || c == '\n') {
			continue;
		} else {
			if (isint(&amp;c)) {
				int val = chartoint(&amp;c);
				switch (parsedCount) {
				case 0:
					rect-&gt;left = val;
					break;
				case 1:
					rect-&gt;bottom = val;
					break;
				case 2:
					rect-&gt;right = val;
					break;
				case 3:
					rect-&gt;top = val;
					done = 1;
					break;
				}
				parsedCount++;
			}
		}
	}
}

int isint(char *c) {
	return *c &gt;= '0' &amp;&amp; *c &lt;= '9';
}

int chartoint(char *c) {
	return *c - '0';
}
</code></pre>
<p><code>Rect.h</code> header file:</p>
<pre><code class="lang-auto">typedef struct {
	int left;
	int right;
	int top;
	int bottom;
} Rect;

typedef struct {
	Rect * elements;
	size_t used;
	size_t size;
} DynamicRectArray;

void initializeRectArray(DynamicRectArray * arr) {
	arr-&gt;used = 0;
	arr-&gt;size = sizeof(Rect) * 2;
	arr-&gt;elements = (Rect*) malloc(arr-&gt;size);
}

Rect* getNewRect(DynamicRectArray * arr) {
	if (arr-&gt;used == arr-&gt;size) {
		arr-&gt;size += 1;
		arr-&gt;elements = (Rect*) realloc(arr-&gt;elements, arr-&gt;size);
	}

	Rect * r = &amp;arr-&gt;elements[arr-&gt;used++];
	r-&gt;left = r-&gt;right = r-&gt;top = r-&gt;bottom = 0;
	return r;
}
</code></pre>
          <p><a href="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/3</link>
        <pubDate>Sat, 04 Jun 2016 20:41:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-548-3</guid>
        <source url="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548.rss">Nationwide Competition - Territory Tester [Part 1]</source>
      </item>
      <item>
        <title>Nationwide Competition - Territory Tester [Part 1]</title>
        <dc:creator><![CDATA[CtrlAltDelete]]></dc:creator>
        <description><![CDATA[
            <p>You might be looking for the word “<em>vertices</em>”, “<em>corners</em>”, or simply “<em>points</em>”.<br>
I didn’t finish reading it yet but wanted to help you out with that. <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/2</link>
        <pubDate>Sat, 04 Jun 2016 19:02:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-548-2</guid>
        <source url="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548.rss">Nationwide Competition - Territory Tester [Part 1]</source>
      </item>
      <item>
        <title>Nationwide Competition - Territory Tester [Part 1]</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Hey Mates,<br>
I have much to do at the moment, so I can’t publish that often, but I try to do as much as I can <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">.<br>
However, I am currently studying for the “Bundeswettbewerb für Informatik” in germany which takes place in September (<em>In english: Nationwide competition for informatics</em>) and I thought these exercises could be interesting for you too! Whenever I’m finished with the next one I post the exercise description here and my solution, which will be probably in C#.</p>
<hr>
<h2>Description</h2>
<p>This time you have to build a simple program which takes a territoy as input and prints out if it overlaps with other territories. The territories are given like this: 3385. The first two numbers are the x and y coordinate of the corner on the bottom left of the rectangle. The last two numbers represent the x and y coordinate of the top right point.<br>
See the coordinate system below:<br>
<img src="//0x00sec.s3.amazonaws.com/original/1X/14aaaf3fe441e609a6aef624489ab35bb22c1887.PNG" width="690" height="388"><br>
Here you can see 3 territories. The black and red one can get allowed, but the blue one overlaps, so it has to get disallowed!<br>
Ok, I hope you understood the system.</p>
<hr>
<h2>My Solution</h2>
<p>Here you can find a simple program in C# which takes the territories one by one and always prints out if they can get allowed or not.</p>
<pre><code class="lang-auto">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Territory_Tester
{
    class Program
    {
        static void Main(string[] args)
        {
            List&lt;String&gt; areas = new List&lt;String&gt;();

            while (true)
            {
                //Get territory and validates
                String territory = input("\nYour territory (e.g. 3385): ");
                if (!validate(territory))
                    continue;

                //Build a list of all points in the rectangle
                List&lt;String&gt; points = getAllPoints(territory);

                //Tests if the rectangle can be allowed
                if(testTerritory(areas, points))
                {
                    areas.Add(territory);
                    Console.WriteLine("[*] This territory can get allowed!");
                }
                else
                {
                    Console.WriteLine("[!] This territory can't get allowed!");
                }
            }
        }

        /// &lt;summary&gt;
        /// Tests if the territory overlaps
        /// &lt;/summary&gt;
        /// &lt;param name="areas"&gt;&lt;/param&gt;
        /// &lt;param name="points"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static bool testTerritory(List&lt;String&gt; areas, List&lt;String&gt; points)
        {
            foreach(String terr in areas)
            {
                foreach(String p in points)
                {
                    int x = int.Parse(p[0].ToString());
                    int y = int.Parse(p[1].ToString());

                    if(x &lt; int.Parse(terr[2].ToString()) &amp;&amp; x &gt; int.Parse(terr[0].ToString()))
                    {
                        if (y &lt; int.Parse(terr[3].ToString()) &amp;&amp; y &gt; int.Parse(terr[1].ToString()))
                            return false;
                    }
                }
            }

            return true;
        }

        /// &lt;summary&gt;
        /// This function builds a list with all points in the rectangle
        /// &lt;/summary&gt;
        /// &lt;param name="territory"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static List&lt;String&gt; getAllPoints(String territory)
        {
            int x = int.Parse(territory[0].ToString());
            int y = int.Parse(territory[1].ToString());
            int xMax = int.Parse(territory[2].ToString());
            int yMax = int.Parse(territory[3].ToString());

            List&lt;String&gt; points = new List&lt;String&gt;();

            while (x &lt;= xMax)
            {
                while(y &lt;= yMax)
                {
                    String p = x.ToString() + y.ToString();
                    points.Add(p);

                    y += 1;
                }
                x += 1;
                y = int.Parse(territory[1].ToString());
            }

            return points;
        }

        /// &lt;summary&gt;
        /// Tests whether it's a valid territory
        /// &lt;/summary&gt;
        /// &lt;param name="territory"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static bool validate(String territory)
        {
            //Tests the length
            if (territory.Length != 4)
            {
                Console.WriteLine("\n[!] Not a valid territory!");
                return false;
            }

            //Tests whether the input is a number
            try
            {
                int.Parse(territory);
            }
            catch
            {
                Console.WriteLine("\n[!] Not a valid territory!");
                return false;
            }

            return true;
        }

        /// &lt;summary&gt;
        /// Just a small input with given text function. It's like input() in Python.
        /// &lt;/summary&gt;
        /// &lt;param name="text"&gt;&lt;/param&gt;
        /// &lt;returns&gt;User input&lt;/returns&gt;
        static String input(String text)
        {
            Console.Write(text);
            return Console.ReadLine();
        }
    }
}
</code></pre>
<hr>
<h2>Conclusion</h2>
<p>This can be seen as a good programming challenge. I think it’s good for learning to build up a strategy first and then work on accomplishing it. As always I hope you have fun with trying to solve this easy challenge.</p>
<p>|-TheDoctor-|</p>
          <p><a href="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548/1</link>
        <pubDate>Sat, 04 Jun 2016 08:44:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-548-1</guid>
        <source url="https://0x00sec.org/t/nationwide-competition-territory-tester-part-1/548.rss">Nationwide Competition - Territory Tester [Part 1]</source>
      </item>
  </channel>
</rss>
