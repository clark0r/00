<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Getting know - TCP handshake and messages</title>
    <link>https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115</link>
    <description>Lets get know to TCP 3 way handshake,  or TCP handshake three messages,
as we know TCP is reliable and that protocol point is to deliver data successfully, and if problem occurs TCP must fix that.

so, for reliability, before TCP transmits data it will use three way handshake to estabilish a connection.

**SYN**,  **SYN-ACK** , **ACK**  ,  they are messages (SYN = synchronize,ACK=acknowledge)
- - -
 explain - for  example we have **Computer A** and **Computer B** 

1) **Computr A** sending SYN segment to **Comutr B**, asking for synchronization
synchronization means &#39;hey computer B can you open connection for me?&#39;

2) after that **Computr B** sends back SYN-ACK to **Computer A** 
it acknowledges and also tells **computr A** to open connection too

3)  **Computer A** sends ACK, to **computr B** 
 it means OK, we agreed

4) *Connection Estabilished*

.
![](upload://8dpqX0qtWlhDQA8MXnEs9MWdXM8.png)
![](upload://yE50CIqNEPOzFrzxdrjFNfHRIQ9.gif)


FTP,SMTP,HTTP,HTTPS,Telnet,POP3,SSH and any other protocol that works over TCP also has a three way handshake performed as connection is opened.


maybe will ad some more details later</description>
    
    <lastBuildDate>Mon, 06 Apr 2020 01:33:28 +0000</lastBuildDate>
    <category>Networking</category>
    <atom:link href="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Getting know - TCP handshake and messages</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/8</link>
        <pubDate>Tue, 28 Jul 2020 15:33:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20115-8</guid>
        <source url="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115.rss">Getting know - TCP handshake and messages</source>
      </item>
      <item>
        <title>Getting know - TCP handshake and messages</title>
        <dc:creator><![CDATA[Xocho]]></dc:creator>
        <description><![CDATA[
            <p>Lets browse webserver and use <strong>wireshark</strong> to capture traffic for explain little more things</p>
<p>just simply i open wireshark start traffic capture and go to webserver</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="juisttt" data-orig-src="upload://mkPO1lgkyKvAuI91dsDa3OSJB5K.png" width="690" height="230"></p>
<p>in first screenshot we see three packets thats handshake, note that  “<strong>Len=0</strong>” it means packet size/lenght is zero no data is transmitted just handshake</p>
<p>if we click any of tcp handshake packets in wireshark, below on white space we will see deep information,<br>
we have source and destinaton ip address and ports,  port 5057 is us, port 80 is webserver</p>
<hr>
<p>flags:</p>
<p><img src="https://0x00sec.org/images/transparent.png" alt="flaggg" data-orig-src="upload://neFr88twq7j6jA6qVqDn1WgqHaM.png" width="517" height="295"></p>
<p>TCP flags/messages, here we have only 1 or 0,  1=Set, 0=Not set<br>
in this screenshot only one message is SET,</p>
<p>w<strong>e have couple messages :</strong></p>
<p><strong>Synchronization (SYN) –</strong>  It is used in first step of connection establishment phase or 3-way handshake process between the two hosts. Only the first packet from sender as well as receiver should have this flag set. This is used for synchronizing sequence number i.e. to tell the other end which sequence number they should except.</p>
<p><strong>Acknowledgement (ACK) –</strong>  It is used to acknowledge packets which are successful received by the host. The flag is set if the acknowledgement number field contains a valid acknowledgement number.<br>
In given below diagram, the receiver sends an ACK = 1 as well as SYN = 1 in the second step of connection establishment to tell sender that it received its initial packet.</p>
<p><strong>Finish (FIN) –</strong>  It is used to request for connection termination i.e. when there is no more data from the sender, it requests for connection termination. This is the last packet sent by sender. It frees the reserved resources and gracefully terminate the connection.</p>
<p><img src="/uploads/default/original/2X/b/b11ca961fcd992975f3be709a544d28612ac4791.gif" alt="" data-base62-sha1="pgNV0Ql31d3sgvNqhF91HLWRboZ" width="597" height="393"></p>
<p><strong>Reset (RST) –</strong>  It is used to terminate the connection if the RST sender feels something is wrong with the TCP connection or that the conversation should not exist. It can get send from receiver side when packet is send to particular host that was not expecting it.</p>
<p><strong>Push (PSH) –</strong>  Transport layer by default waits for some time for application layer to send enough data equal to maximum segment size so that the number of packets transmitted on network minimizes which is not desirable by some application like interactive applications(chatting). Similarly transport layer at receiver end buffers packets and transmit to application layer if it meets certain criteria.</p>
<p>This problem is solved by using PSH. Transport layer sets PSH = 1 and immediately sends the segment to network layer as soon as it receives signal from application layer. Receiver transport layer, on seeing PSH = 1 immediately forwards the data to application layer.<br>
In general, it tells the receiver to process these packets as they are received instead of buffering them.</p>
<p><strong>Urgent (URG) –</strong> Data inside a segment with URG = 1 flag is forwarded to application layer immediately even if there are more data to be given to application layer. It is used to notify the receiver to process the urgent packets before processing all other packets. The receiver will be notified when all known urgent data has been received.</p>
<hr>
<p><strong>Port Scanning and TCP messages</strong></p>
<h3>Open</h3>
<p>Port 80 was found  <em>open</em> . This means the server would be able to complete the full 3-way handshake for this port and allow incoming connections had we actually completed it. From a server-side that means it would reply with a SYN-ACK. If we wanted to make a connection, we should have replied with an ACK. However, doing a port scan, we’re not aiming to make the full 3-way handshake so we reply with a RESET instead:</p>
<p><img src="/uploads/default/original/2X/e/e9d6d05e4ff141d83935d44c0458c3ae22912d09.png" alt="" data-base62-sha1="xmDudoI1SMR9ofiGfozKtaG2k8V" width="600" height="251"></p>
<p>in wireshark it looks:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/4/4ae9324709374d05a8194f7b3a907560b76cb4a3.png" data-download-href="/uploads/short-url/aGGX8msYMQT36DYbInwt5yWlN9V.png?dl=1" title=""><img src="/uploads/default/original/2X/4/4ae9324709374d05a8194f7b3a907560b76cb4a3.png" alt="" data-base62-sha1="aGGX8msYMQT36DYbInwt5yWlN9V" width="690" height="71" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/4/4ae9324709374d05a8194f7b3a907560b76cb4a3_2_10x10.png"></a></div><p></p>
<h3>Closed</h3>
<p>Nmap discovered that port 22 was  <em>closed</em> . In this case, the SYN packet sent by the client was returned with a packet where both RESET and ACK flags are set, indicating the server was not listening on port 22 :</p>
<p><img src="/uploads/default/original/2X/7/7e8f71275170a2ab02f97ec863f1214305206598.png" alt="" data-base62-sha1="i3Bu1RX96ZK86xAaQskqkXSTNr2" width="600" height="251"><br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/9/9feb79db9e5067e8208fddbf49a5fca1a6b557fc.png" data-download-href="/uploads/short-url/mOIqdjWzf0v43XHFsL19QGkKZgo.png?dl=1" title=""><img src="/uploads/default/original/2X/9/9feb79db9e5067e8208fddbf49a5fca1a6b557fc.png" alt="" data-base62-sha1="mOIqdjWzf0v43XHFsL19QGkKZgo" width="690" height="59" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/9/9feb79db9e5067e8208fddbf49a5fca1a6b557fc_2_10x10.png"></a></div><p></p>
<h3>Filtered</h3>
<p>Nmap will attempt to resend the SYN-packet if no response is received. If after several retransmissions no response is received, the port is marked as  <em>filtered</em> . (reason maybe is firewall, filter, or other network obstacle is blocking the  <strong>port</strong>  so that Nmap cannot tell whether it is open or closed)</p>
<p><img src="/uploads/default/original/2X/b/be4e3c8c38d73bb7dce13095af242d043b918308.png" alt="" data-base62-sha1="r9wl6hHzpoBFcs8G4mVXEnaGlw4" width="600" height="251"><br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/c/c87f7754ef99630afe57aa3099424d0541885267.png" data-download-href="/uploads/short-url/sBGAwftCEKLuQHQ4eJDX1rLcPnp.png?dl=1" title=""><img src="/uploads/default/original/2X/c/c87f7754ef99630afe57aa3099424d0541885267.png" alt="" data-base62-sha1="sBGAwftCEKLuQHQ4eJDX1rLcPnp" width="690" height="58" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c87f7754ef99630afe57aa3099424d0541885267_2_10x10.png"></a></div><p></p>
<hr>
          <p><a href="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/7</link>
        <pubDate>Mon, 06 Apr 2020 01:33:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20115-7</guid>
        <source url="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115.rss">Getting know - TCP handshake and messages</source>
      </item>
      <item>
        <title>Getting know - TCP handshake and messages</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>You can take a look here… Not exactly what you want but may be interesting</p>
<aside class="quote quote-modified" data-post="1" data-topic="619">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/0x00sec.org/0x00pf/40/199_2.png" class="avatar">
    <a href="https://0x00sec.org/t/how-do-those-hacking-tools-work-the-art-of-port-scanning/619">How do those hacking tools work? The Art of Port Scanning</a> <a class="badge-wrapper  bullet" href="https://0x00sec.org/c/networking/63"><span class="badge-category-bg" style="background-color: #8C6238;"></span><span style="" data-drop-close="true" class="badge-category clear-badge">Networking</span></a>
  </div>
  <blockquote>
    LEVEL: Beginner 
Port scanning is the process of finding out which ports are open in a given machine. An open port usually means a program listening on that port, and a program means bugs, and bugs means exploits… roughly :). 
OK, everybody in the world uses nmap for this task. It would be stupid to write your own port scanner when such an advanced and polished tool is available. However, knowing how nmap does its magic and also, why not?, write your own simple scanner just for fun, are two valu…
  </blockquote>
</aside>

          <p><a href="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/6</link>
        <pubDate>Fri, 03 Apr 2020 06:03:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20115-6</guid>
        <source url="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115.rss">Getting know - TCP handshake and messages</source>
      </item>
      <item>
        <title>Getting know - TCP handshake and messages</title>
        <dc:creator><![CDATA[DamaneDz]]></dc:creator>
        <description><![CDATA[
            <p><span alt="Screenshot 04-02-2020 23.01.53" data-base62-sha1="wgFpHXuDp9QQcd18lhgTogNmBi" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
that also known as REASON in NMAP Scans …</p>
          <p><a href="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/5</link>
        <pubDate>Thu, 02 Apr 2020 22:02:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20115-5</guid>
        <source url="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115.rss">Getting know - TCP handshake and messages</source>
      </item>
      <item>
        <title>Getting know - TCP handshake and messages</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>This is a great idea</p>
          <p><a href="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/4</link>
        <pubDate>Wed, 01 Apr 2020 21:22:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20115-4</guid>
        <source url="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115.rss">Getting know - TCP handshake and messages</source>
      </item>
      <item>
        <title>Getting know - TCP handshake and messages</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            <p>RFC’s are never a bad place to start : <a href="https://tools.ietf.org/html/rfc793">https://tools.ietf.org/html/rfc793</a></p>
          <p><a href="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/3</link>
        <pubDate>Mon, 30 Mar 2020 04:49:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20115-3</guid>
        <source url="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115.rss">Getting know - TCP handshake and messages</source>
      </item>
      <item>
        <title>Getting know - TCP handshake and messages</title>
        <dc:creator><![CDATA[Danus]]></dc:creator>
        <description><![CDATA[
            <p>It would be cool if you would explained this a little more in depth and perhaps added some Wireshark logs to show how it all works in a practical way <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/2</link>
        <pubDate>Sun, 29 Mar 2020 08:08:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20115-2</guid>
        <source url="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115.rss">Getting know - TCP handshake and messages</source>
      </item>
      <item>
        <title>Getting know - TCP handshake and messages</title>
        <dc:creator><![CDATA[Xocho]]></dc:creator>
        <description><![CDATA[
            <p>Lets get know to TCP 3 way handshake,  or TCP handshake three messages,<br>
as we know TCP is reliable and that protocol point is to deliver data successfully, and if problem occurs TCP must fix that.</p>
<p>so, for reliability, before TCP transmits data it will use three way handshake to estabilish a connection.</p>
<p><strong>SYN</strong>,  <strong>SYN-ACK</strong> , <strong>ACK</strong>  ,  they are messages (SYN = synchronize,ACK=acknowledge)</p>
<hr>
<p>explain - for  example we have <strong>Computer A</strong> and <strong>Computer B</strong></p>
<ol>
<li>
<p><strong>Computr A</strong> sending SYN segment to <strong>Comutr B</strong>, asking for synchronization<br>
synchronization means ‘hey computer B can you open connection for me?’</p>
</li>
<li>
<p>after that <strong>Computr B</strong> sends back SYN-ACK to <strong>Computer A</strong><br>
it acknowledges and also tells <strong>computr A</strong> to open connection too</p>
</li>
<li>
<p><strong>Computer A</strong> sends ACK, to <strong>computr B</strong><br>
it means OK, we agreed</p>
</li>
<li>
<p><em>Connection Estabilished</em></p>
</li>
</ol>
<p>.<br>
<img src="/uploads/default/original/2X/3/399576096ad46e600eab9270adfe9f322835e00c.png" alt="" data-base62-sha1="8dpqX0qtWlhDQA8MXnEs9MWdXM8" width="578" height="490"><br>
<img src="/uploads/default/original/2X/f/f2d1c8f3bb5ac14271908260b6cf485d42e8c439.gif" alt="" data-base62-sha1="yE50CIqNEPOzFrzxdrjFNfHRIQ9" width="366" height="226"></p>
<p>FTP,SMTP,HTTP,HTTPS,Telnet,POP3,SSH and any other protocol that works over TCP also has a three way handshake performed as connection is opened.</p>
<p>maybe will ad some more details later</p>
          <p><a href="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115/1</link>
        <pubDate>Sat, 28 Mar 2020 23:33:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20115-1</guid>
        <source url="https://0x00sec.org/t/getting-know-tcp-handshake-and-messages/20115.rss">Getting know - TCP handshake and messages</source>
      </item>
  </channel>
</rss>
