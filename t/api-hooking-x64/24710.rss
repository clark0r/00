<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Api hooking -- x64</title>
    <link>https://0x00sec.org/t/api-hooking-x64/24710</link>
    <description>hii everyone, hope your good.
so i am trying to hook messageboxA() function:
    
    /*
    ** Simple MessageBoxA hook using the classic 5 byte relative jump technique without a         
    trampoline.
    ** Instead of bypassing the hook in the proxy function when passing execution to 
    MessageBoxA, we
    ** will simply re-write the original bytes, unhooking the function.
    */
    
    #include &lt;iostream&gt;
    #include &lt;Windows.h&gt;
    
    
    #pragma comment(lib,&quot;user32.lib&quot;)
    
    char saved_buffer[5]; // buffer to save the original bytes
    FARPROC hooked_address = NULL;
    typedef int(__cdecl* MYPROC)(LPWSTR);
    // The proxy function we will jump to after the hook has been installed
    int __stdcall proxy_function(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT 
    uType)
    {
    std::cout &lt;&lt; &quot;Hello from MessageBox!\n&quot;;
    std::cout &lt;&lt; &quot;Text: &quot; &lt;&lt; (LPCSTR)lpText &lt;&lt; &quot;\nCaption: &quot; &lt;&lt; (LPCSTR)lpCaption &lt;&lt; 
    std::endl;
    
    // unhook the function (re-write the saved buffer) to prevent infinite recursion
    WriteProcessMemory(GetCurrentProcess(), (LPVOID)hooked_address, saved_buffer, 5, 
    NULL);
    
    // return to the original function, which is now unhooked, and modify the intended     
    parameters
    return MessageBoxA(NULL, &quot;yeet&quot;, &quot;yeet&quot;, uType);
    }
    
    void install_hook()
    {
    HINSTANCE hinstLib;
    VOID* proxy_address;
    DWORD* relative_offset;
    DWORD src;
    DWORD dst;
    CHAR patch[5] = { 0 };
     
    // 1. get memory address of the MessageBoxA function from user32.dll 
    hinstLib = LoadLibrary(TEXT(&quot;user32.dll&quot;));
    hooked_address = GetProcAddress(hinstLib, &quot;MessageBoxA&quot;);
    
    // 2. save the first 5 bytes into saved_buffer
    ReadProcessMemory(GetCurrentProcess(), hooked_address, saved_buffer, 5, NULL);
    
    // 3. overwrite the first 5 bytes with a jump to proxy_function
    proxy_address = &amp;proxy_function;
    src = (DWORD)hooked_address + 5; // will jump from the next instruction (after our 5 byte         
    jmp instruction)
    dst = (DWORD)proxy_address;
    relative_offset = (DWORD*)(dst - src);
    
    memcpy(patch, &quot;\xE9&quot;, 1);
    memcpy(patch + 1, &amp;relative_offset, 4);
    
    WriteProcessMemory(GetCurrentProcess(), (LPVOID)hooked_address, patch, 5, NULL);
    }
     
    
    
    int main()
    { 
    
    // call without hook
    MessageBoxA(NULL, &quot;hello calling from the program&quot;, &quot;hello&quot;, MB_OK);
    
    install_hook();
    
    // call with hook (arguments will be altered through the proxy function)
    MessageBoxA(NULL, &quot;we are the hook &quot;, &quot;hello&quot;, MB_OK);
    
    return 0;
    }


and it didnt work, the main reason why i am doing this is because i want to hook creatprocessA / W
so if anyone can help in a library for that or some source code, or a guide or anything ill be so thankful, or at least what did i do wrong in the above code. 
i found a lot of libraries on github but it is so big, and i don&#39;t want my executable to be that big, specially since i am trying to hook 2 or 3 functions,  and most of them are for x86 and not for x64
and does the same code work if i changed it to hook createprocessw/a or createprocess</description>
    
    <lastBuildDate>Tue, 26 Jan 2021 08:09:27 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://0x00sec.org/t/api-hooking-x64/24710.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Api hooking -- x64</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed 3 days after the last reply. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/api-hooking-x64/24710/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/api-hooking-x64/24710/3</link>
        <pubDate>Fri, 29 Jan 2021 08:09:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24710-3</guid>
        <source url="https://0x00sec.org/t/api-hooking-x64/24710.rss">Api hooking -- x64</source>
      </item>
      <item>
        <title>Api hooking -- x64</title>
        <dc:creator><![CDATA[alexa]]></dc:creator>
        <description><![CDATA[
            <p>hii everyone, hope your good.<br>
so i am trying to hook messageboxA() function:</p>
<pre><code>/*
** Simple MessageBoxA hook using the classic 5 byte relative jump technique without a         
trampoline.
** Instead of bypassing the hook in the proxy function when passing execution to 
MessageBoxA, we
** will simply re-write the original bytes, unhooking the function.
*/

#include &lt;iostream&gt;
#include &lt;Windows.h&gt;


#pragma comment(lib,"user32.lib")

char saved_buffer[5]; // buffer to save the original bytes
FARPROC hooked_address = NULL;
typedef int(__cdecl* MYPROC)(LPWSTR);
// The proxy function we will jump to after the hook has been installed
int __stdcall proxy_function(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT 
uType)
{
std::cout &lt;&lt; "Hello from MessageBox!\n";
std::cout &lt;&lt; "Text: " &lt;&lt; (LPCSTR)lpText &lt;&lt; "\nCaption: " &lt;&lt; (LPCSTR)lpCaption &lt;&lt; 
std::endl;

// unhook the function (re-write the saved buffer) to prevent infinite recursion
WriteProcessMemory(GetCurrentProcess(), (LPVOID)hooked_address, saved_buffer, 5, 
NULL);

// return to the original function, which is now unhooked, and modify the intended     
parameters
return MessageBoxA(NULL, "yeet", "yeet", uType);
}

void install_hook()
{
HINSTANCE hinstLib;
VOID* proxy_address;
DWORD* relative_offset;
DWORD src;
DWORD dst;
CHAR patch[5] = { 0 };
 
// 1. get memory address of the MessageBoxA function from user32.dll 
hinstLib = LoadLibrary(TEXT("user32.dll"));
hooked_address = GetProcAddress(hinstLib, "MessageBoxA");

// 2. save the first 5 bytes into saved_buffer
ReadProcessMemory(GetCurrentProcess(), hooked_address, saved_buffer, 5, NULL);

// 3. overwrite the first 5 bytes with a jump to proxy_function
proxy_address = &amp;proxy_function;
src = (DWORD)hooked_address + 5; // will jump from the next instruction (after our 5 byte         
jmp instruction)
dst = (DWORD)proxy_address;
relative_offset = (DWORD*)(dst - src);

memcpy(patch, "\xE9", 1);
memcpy(patch + 1, &amp;relative_offset, 4);

WriteProcessMemory(GetCurrentProcess(), (LPVOID)hooked_address, patch, 5, NULL);
}
 


int main()
{ 

// call without hook
MessageBoxA(NULL, "hello calling from the program", "hello", MB_OK);

install_hook();

// call with hook (arguments will be altered through the proxy function)
MessageBoxA(NULL, "we are the hook ", "hello", MB_OK);

return 0;
}
</code></pre>
<p>and it didnt work, the main reason why i am doing this is because i want to hook creatprocessA / W<br>
so if anyone can help in a library for that or some source code, or a guide or anything ill be so thankful, or at least what did i do wrong in the above code.<br>
i found a lot of libraries on github but it is so big, and i donâ€™t want my executable to be that big, specially since i am trying to hook 2 or 3 functions,  and most of them are for x86 and not for x64<br>
and does the same code work if i changed it to hook createprocessw/a or createprocess</p>
          <p><a href="https://0x00sec.org/t/api-hooking-x64/24710/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/api-hooking-x64/24710/1</link>
        <pubDate>Mon, 25 Jan 2021 06:19:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24710-1</guid>
        <source url="https://0x00sec.org/t/api-hooking-x64/24710.rss">Api hooking -- x64</source>
      </item>
  </channel>
</rss>
