<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Fraq vs. the webapp: Reflective XSS</title>
    <link>https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696</link>
    <description>It&#39;s already time for my first lesson learned. As I mentioned before, even though I have experience here I&#39;m assuming that I&#39;m starting from the bottom. Without further ado, here&#39;s the first thing I discovered:

### Reflective XSS
---
OWASP explains things so much better than I do, so I&#39;m going to borrow from their page for a bit: 
&gt; Reflected Cross-site Scripting (XSS) occur when an attacker injects browser executable code within a single HTTP response. The injected attack is not stored within the application itself; it is non-persistent and only impacts users who open a maliciously crafted link or third-party web page. The attack string is included as part of the crafted URI or HTTP parameters, improperly processed by the application, and returned to the victim.

tl;dr: You embed the XSS in the URL itself and send everything as one single GET or POST.

### Finding it

Obviously, to exploit a bug you have to find it. This flavor of bug is plentiful and easy to find, apparently. Makes sense that it was the first one I discovered on this great big hacker Easter egg hunt, eh?

Browsers these days have a lot of protections built in to keep you safe from the boogey man, so you&#39;ll probably need a special one. I&#39;m using Mantra, a browser build by the OWASP project specially for this purpose (I&#39;ll probably do a review on it later)

After I fired up Mantra, I browsed to the URL in question to start my investigation, but got a redirect: browser not supported. O noes! They&#39;re limiting me to &quot;safe&quot; browsers. Nothing a little user-agent spoofing can&#39;t fix.

Over on the left-hand side of the browser, there is a vertical bar with a few buttons. Third from the bottom is a a little globe. Click on that and you get a choice of user-agent strings to send, but the default list is pretty weak, so I had to craft my own. Here&#39;s the Mozilla one I used:

```
Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:18.0) Gecko/20100101 Firefox/31.0
```

Enable the user-agent, refresh the page, no more rejection. Now, on to finding our first bug. 

The page gives me a form: a username and password with a &quot;login&quot; button. Nothing we haven&#39;t seen a thousand times. 

This is where I used a bit of prior knowledge: OWASP says, &quot;Hey, you wanna find an XSS, you need to test _all_ the params the site may be using.&quot; So, I fire up my old friend [Burp]() to capture and examine the requests as they come across the wire. 

Capturing the request in Burp and looking at it, I see that I sent a POST with parameters like this:

`email=foo%40bar.com&amp;rememberme=on&amp;password=baz` 

Email looks like it&#39;s using URL encoding, so I&#39;ll skip that one. Let&#39;s try rememberme. 

Again, back to OWASP to see what they recommend on trying this. 

`“&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;` as the XSS, and to do it in place of a parameter. 

Therefore, our URL will look like so: 
`https://vulnerable.app.bar/login?email=foo%40bar.com&amp;rememberme=“&gt;&lt;script&gt;alert(&quot;pwnd&quot;)&lt;/script&gt;&amp;password=baz`

Let&#39;s give that a whirl.

Nope. Didn&#39;t work. Dang.

Oh, wait, there&#39;s a &quot;Params&quot; tab for each request in burp. Let&#39;s log in properly and see what happens.

Nope, nothing new. Let&#39;s try the other two params.

Nope. No dice. 

Okay, going to get coffee....

Came back a few minutes later to see that I had been signed out and look! the URL has new parameters in it! Didn&#39;t catch those before! 

So I tried the two new params: let&#39;s call them `foo` and `bar`. 

Trying the first one failed, but the second one worked!

`https://vulnerable.app.bar/login?foo=true&amp;bar=“&gt;&lt;script&gt;alert(&quot;pwnd&quot;)&lt;/script&gt;`

Sweet. We have an XSS. 

So how do you know what to put in the URL? It&#39;s got a few basic pieces going on here. I think everyone knows how the first bit is constructed, so we&#39;ll focus on the tail end here. 

`/login` is the route or page we&#39;re trying to hit. This manifests itself to us as clients as a page, but in the webapp, it&#39;s actually a &quot;route&quot;, meaning that URI gets collected and acted on by falling through a series of checks until it hits a matching route handler. Once it hits a matching handler, that request gets dispatched to the corresponding function. So in this case, I&#39;m visiting the `/login` page that&#39;s getting handled by a route on the backend.

`?` is the start of parameters. It&#39;s a delimiter.

`foo=bar` is just the format for parameters. `param=value` and to string a few together, it looks like `param1=val1&amp;param2=val2`. Nothing crazy there.

Now, the fun starts when we try to swap those values out for a little bit of JavaScript. An XSS works because the page will accept and return whatever you throw at it without sanitizing or validating or re-encoding. In our case, the `bar` parameter was something it was asking the page to do, which meant it was serving that javascript right back to us. 

Why did I use the tag I did? Well, at first it was because OWASP told me to. After some digging, I found a great example explaining why:

That `&quot;&gt;` at the beginning actually escapes and extends an HTML attribute, which we can now insert anything we want into, arbitrarily. Yes, it doesn&#39;t have to be JS. It can be anything the page will try to run. Another HTML tag, JS, whatever. We tend to just use JS&#39;s `alert()` because it&#39;s easy to return and check that way.

So code that may have started like this: 
```
&quot;]Search for a product on our site: 
&lt;input type=&quot;text&quot; value=&quot;search term&quot;&gt; 
&lt;input type=&quot;submit&quot; value=&quot;Search&quot;&gt; 
```

Now ends up looking like this:

```
&quot;]Search for a product on our site: 
&lt;input type=&quot;text&quot; value=&quot;&quot; onmouseover=&quot;alert(&#39;XSS&#39;)&quot;&gt;
&lt;input type=&quot;submit&quot; value=&quot;Search&quot;&gt; 
```

With an XSS like this: `” onmouseover=”alert(‘XSS’)` that in the case of this [example](http://www.securitysift.com/quotes-and-xss-planning-your-escape/) was injected into a text field, rather than a URL. 

tl;dr: Sanitize your inputs if you&#39;re on defense. If you&#39;re on the other team, well, look for fields that might want to return data back to the page and start escaping inputs like there&#39;s no tomorrow.</description>
    
    <lastBuildDate>Fri, 24 Feb 2017 13:56:20 +0000</lastBuildDate>
    <category>Web Hacking</category>
    <atom:link href="https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Fraq vs. the webapp: Reflective XSS</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>Good point! I was actually reading up on OWASP’s XSS evasion techniques and came across things similar to that. They recommended actually breaking up the first <code>&lt;script&gt;</code> tag so that it would get intentionally picked up by a filter, leaving another one behind for execution.</p>
<p>Once I get some XSS filters in place on this app, I’ll try again using those evasion techniques.</p>
          <p><a href="https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696/6</link>
        <pubDate>Fri, 24 Feb 2017 13:56:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1696-6</guid>
        <source url="https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696.rss">Fraq vs. the webapp: Reflective XSS</source>
      </item>
      <item>
        <title>Fraq vs. the webapp: Reflective XSS</title>
        <dc:creator><![CDATA[L3akM3-0day]]></dc:creator>
        <description><![CDATA[
            <p>Little trick I found about xss ,</p>
<p>If the two params <code>foo</code> and <code>bar</code> where vulnerable to xss<br>
You could do<br>
<code>https://vulnerable.app.bar/login?foo="&gt;&lt;script&gt;void=('&amp;bar=“&gt;');alert(/xss/);&lt;/script&gt;</code></p>
<p>and then bypass xss auditor</p>
          <p><a href="https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696/5</link>
        <pubDate>Fri, 24 Feb 2017 13:31:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1696-5</guid>
        <source url="https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696.rss">Fraq vs. the webapp: Reflective XSS</source>
      </item>
      <item>
        <title>Fraq vs. the webapp: Reflective XSS</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <p>interesting read. some of that already sounds familiar from some uni course, but never really tried it my own afterwards. Solid start to the series <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> !</p>
          <p><a href="https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696/4</link>
        <pubDate>Fri, 24 Feb 2017 07:57:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1696-4</guid>
        <source url="https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696.rss">Fraq vs. the webapp: Reflective XSS</source>
      </item>
      <item>
        <title>Fraq vs. the webapp: Reflective XSS</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>Of course I will, fear not.</p>
          <p><a href="https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696/3</link>
        <pubDate>Thu, 23 Feb 2017 23:13:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1696-3</guid>
        <source url="https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696.rss">Fraq vs. the webapp: Reflective XSS</source>
      </item>
      <item>
        <title>Fraq vs. the webapp: Reflective XSS</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>You’ll get to SQLi right?</p>
<p>And is there any reason you’re not showing us the site you’re testing on?</p>
          <p><a href="https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696/2</link>
        <pubDate>Thu, 23 Feb 2017 23:13:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1696-2</guid>
        <source url="https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696.rss">Fraq vs. the webapp: Reflective XSS</source>
      </item>
      <item>
        <title>Fraq vs. the webapp: Reflective XSS</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>It’s already time for my first lesson learned. As I mentioned before, even though I have experience here I’m assuming that I’m starting from the bottom. Without further ado, here’s the first thing I discovered:</p>
<h3>Reflective XSS</h3>
<hr>
<p>OWASP explains things so much better than I do, so I’m going to borrow from their page for a bit:</p>
<blockquote>
<p>Reflected Cross-site Scripting (XSS) occur when an attacker injects browser executable code within a single HTTP response. The injected attack is not stored within the application itself; it is non-persistent and only impacts users who open a maliciously crafted link or third-party web page. The attack string is included as part of the crafted URI or HTTP parameters, improperly processed by the application, and returned to the victim.</p>
</blockquote>
<p>tl;dr: You embed the XSS in the URL itself and send everything as one single GET or POST.</p>
<h3>Finding it</h3>
<p>Obviously, to exploit a bug you have to find it. This flavor of bug is plentiful and easy to find, apparently. Makes sense that it was the first one I discovered on this great big hacker Easter egg hunt, eh?</p>
<p>Browsers these days have a lot of protections built in to keep you safe from the boogey man, so you’ll probably need a special one. I’m using Mantra, a browser build by the OWASP project specially for this purpose (I’ll probably do a review on it later)</p>
<p>After I fired up Mantra, I browsed to the URL in question to start my investigation, but got a redirect: browser not supported. O noes! They’re limiting me to “safe” browsers. Nothing a little user-agent spoofing can’t fix.</p>
<p>Over on the left-hand side of the browser, there is a vertical bar with a few buttons. Third from the bottom is a a little globe. Click on that and you get a choice of user-agent strings to send, but the default list is pretty weak, so I had to craft my own. Here’s the Mozilla one I used:</p>
<pre><code class="lang-auto">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:18.0) Gecko/20100101 Firefox/31.0
</code></pre>
<p>Enable the user-agent, refresh the page, no more rejection. Now, on to finding our first bug.</p>
<p>The page gives me a form: a username and password with a “login” button. Nothing we haven’t seen a thousand times.</p>
<p>This is where I used a bit of prior knowledge: OWASP says, “Hey, you wanna find an XSS, you need to test <em>all</em> the params the site may be using.” So, I fire up my old friend <a href="https://0x00sec.org">Burp</a> to capture and examine the requests as they come across the wire.</p>
<p>Capturing the request in Burp and looking at it, I see that I sent a POST with parameters like this:</p>
<p><code>email=foo%40bar.com&amp;rememberme=on&amp;password=baz</code></p>
<p>Email looks like it’s using URL encoding, so I’ll skip that one. Let’s try rememberme.</p>
<p>Again, back to OWASP to see what they recommend on trying this.</p>
<p><code>“&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code> as the XSS, and to do it in place of a parameter.</p>
<p>Therefore, our URL will look like so:<br>
<code>https://vulnerable.app.bar/login?email=foo%40bar.com&amp;rememberme=“&gt;&lt;script&gt;alert("pwnd")&lt;/script&gt;&amp;password=baz</code></p>
<p>Let’s give that a whirl.</p>
<p>Nope. Didn’t work. Dang.</p>
<p>Oh, wait, there’s a “Params” tab for each request in burp. Let’s log in properly and see what happens.</p>
<p>Nope, nothing new. Let’s try the other two params.</p>
<p>Nope. No dice.</p>
<p>Okay, going to get coffee…</p>
<p>Came back a few minutes later to see that I had been signed out and look! the URL has new parameters in it! Didn’t catch those before!</p>
<p>So I tried the two new params: let’s call them <code>foo</code> and <code>bar</code>.</p>
<p>Trying the first one failed, but the second one worked!</p>
<p><code>https://vulnerable.app.bar/login?foo=true&amp;bar=“&gt;&lt;script&gt;alert("pwnd")&lt;/script&gt;</code></p>
<p>Sweet. We have an XSS.</p>
<p>So how do you know what to put in the URL? It’s got a few basic pieces going on here. I think everyone knows how the first bit is constructed, so we’ll focus on the tail end here.</p>
<p><code>/login</code> is the route or page we’re trying to hit. This manifests itself to us as clients as a page, but in the webapp, it’s actually a “route”, meaning that URI gets collected and acted on by falling through a series of checks until it hits a matching route handler. Once it hits a matching handler, that request gets dispatched to the corresponding function. So in this case, I’m visiting the <code>/login</code> page that’s getting handled by a route on the backend.</p>
<p><code>?</code> is the start of parameters. It’s a delimiter.</p>
<p><code>foo=bar</code> is just the format for parameters. <code>param=value</code> and to string a few together, it looks like <code>param1=val1&amp;param2=val2</code>. Nothing crazy there.</p>
<p>Now, the fun starts when we try to swap those values out for a little bit of JavaScript. An XSS works because the page will accept and return whatever you throw at it without sanitizing or validating or re-encoding. In our case, the <code>bar</code> parameter was something it was asking the page to do, which meant it was serving that javascript right back to us.</p>
<p>Why did I use the tag I did? Well, at first it was because OWASP told me to. After some digging, I found a great example explaining why:</p>
<p>That <code>"&gt;</code> at the beginning actually escapes and extends an HTML attribute, which we can now insert anything we want into, arbitrarily. Yes, it doesn’t have to be JS. It can be anything the page will try to run. Another HTML tag, JS, whatever. We tend to just use JS’s <code>alert()</code> because it’s easy to return and check that way.</p>
<p>So code that may have started like this:</p>
<pre><code class="lang-auto">"]Search for a product on our site: 
&lt;input type="text" value="search term"&gt; 
&lt;input type="submit" value="Search"&gt; 
</code></pre>
<p>Now ends up looking like this:</p>
<pre><code class="lang-auto">"]Search for a product on our site: 
&lt;input type="text" value="" onmouseover="alert('XSS')"&gt;
&lt;input type="submit" value="Search"&gt; 
</code></pre>
<p>With an XSS like this: <code>” onmouseover=”alert(‘XSS’)</code> that in the case of this <a href="http://www.securitysift.com/quotes-and-xss-planning-your-escape/" rel="nofollow noopener">example</a> was injected into a text field, rather than a URL.</p>
<p>tl;dr: Sanitize your inputs if you’re on defense. If you’re on the other team, well, look for fields that might want to return data back to the page and start escaping inputs like there’s no tomorrow.</p>
          <p><a href="https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696/1</link>
        <pubDate>Thu, 23 Feb 2017 23:08:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1696-1</guid>
        <source url="https://0x00sec.org/t/fraq-vs-the-webapp-reflective-xss/1696.rss">Fraq vs. the webapp: Reflective XSS</source>
      </item>
  </channel>
</rss>
