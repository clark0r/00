<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Crackme.c - A small reversing puzzle</title>
    <link>https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762</link>
    <description>What&#39;s up everyone? It&#39;s been quite a while. This is just going to be an easy little puzzle for you guys to play around with. I got bored in class so I decided to make a fake login in C.

There are 3 intended solutions to this, but those are for you to find out!

The code for the puzzle can be found here: http://pastebin.com/T9XA0gjS

BUT! If you want to solve the puzzles without looking at the code first, just follow this:
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/e/e2105fa2426f718e6e79c6bc7e18304dfb0719e8.png&quot; width=&quot;540&quot; height=&quot;230&quot;&gt;

I&#39;ll have my 3 solutions in the spoilers below. Have fun!

-Defalt

Solution 1:
[spoiler]
Buffer overflow

The first solution is the easiest. We can simply overflow the buffer used to store the given password to change the value of the &quot;valid&quot; integer to a non-zero number, which will evaluate to true when it&#39;s checked.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/b/b6b58bd00a84d8611d4e782921b925fe4bd97d38.png&quot; width=&quot;690&quot; height=&quot;146&quot;&gt;
[/spoiler]

Solution 2:
[spoiler]
The second solution is a bit harder, but still pretty easy. We&#39;ll start by using objdump on our executable to get the assembly for all of the funtions:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/b/b07934a9f355aabeff8e0d937bfea0e8f24da591.png&quot; width=&quot;626&quot; height=&quot;96&quot;&gt;

Now that we have this dump file, let&#39;s take a look in it. We&#39;ll scroll all the way down to the assembly for the main function. BUT, what&#39;s this? Right above the main function we can see there is another function that is hidden from us:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/b/b9aa1ce91788a4bdc1ee90766ecc04e8f9204aff.png&quot; width=&quot;599&quot; height=&quot;254&quot;&gt;

But, if we look at the main function, this secret function is never called. But don&#39;t worry, GDB to the rescue! We can changed the EIP to point to the secret function, and force it to execute:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/f/fea0802de1bb9a3a133c29d44a3f1a33ee3a9908.png&quot; width=&quot;416&quot; height=&quot;134&quot;&gt;

Now if we let the program finish, we should see the output of the secret function:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/f/ff92d1b2ed305f759802a70be806d161a125ff10.png&quot; width=&quot;389&quot; height=&quot;144&quot;&gt;
[/spoiler]

Solution 3:
[spoiler]
Our last solution is the largest pain in the ass out the 3. When we execute our login, the values are juggled around in the registers, as usual. BUT, using GDB, we can read these registers and find the password while it&#39;s being tested.

To do this, we just start our login in GDB normally:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/3/33033a7044b89a1aa68ed5343c1e6759b83860ff.png&quot; width=&quot;690&quot; height=&quot;398&quot;&gt;

Now that we&#39;re here, let&#39;s disassemble this program and take a look at the assembly. Specifically, we&#39;re going to look where the gets() function is called, and the instructions that follow it:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/4/42fb9a7fba87edde14d17dd09be9acda5f2afb2d.png&quot; width=&quot;584&quot; height=&quot;127&quot;&gt;

Here we can see that after gets() is called, there&#39;s a lot of movement done with the EAX register. So, if we monitor the EAX register, we might be able to find something. We&#39;ll use the display command to show whats in EAX every time we step through an instruction.

This is what a change in EAX will look like, that number to the right will change. Now, let&#39;s step through our program until we&#39;re prompted for a password, then we&#39;ll start paying attention to this number:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/d/dc80edee5b41f54c7bb54f9b9523d1bb70a564b5.png&quot; width=&quot;396&quot; height=&quot;148&quot;&gt;

Now that we&#39;ve been prompted for the password, let&#39;s keep an eye on EAX until it changes again:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/9/9a5bfb58d51f55d05ad5c9d137046aa6a9e10c83.png&quot; width=&quot;193&quot; height=&quot;72&quot;&gt;

There we go. Now, if we use &quot;x/s&quot; to convert to contents of the address currently stored in EAX to a string, we should have the password for our login:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/2/2f7213d4e458f90042f52bb1a5e2ee9ce467d525.png&quot; width=&quot;355&quot; height=&quot;56&quot;&gt;
[/spoiler]</description>
    
    <lastBuildDate>Tue, 18 Jul 2017 19:45:53 +0000</lastBuildDate>
    <category>Challenges</category>
    <atom:link href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Crackme.c - A small reversing puzzle</title>
        <dc:creator><![CDATA[lacike]]></dc:creator>
        <description><![CDATA[
            <p>Hello, I tried another two solutions.</p>
<p>The first one is similar that the first one of <a class="mention" href="https://0x00sec.org/u/defalt">@Defalt</a> solutions.</p>
<div class="spoiler"><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/6">spoiler</a></div>
<p>The second solution uses different approach then other solutions in this thread.</p>
<div class="spoiler"><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/6">spoiler</a></div>
<p>Here is my input for second solution:</p>
<div class="spoiler"><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/6">spoiler</a></div>
<p>Thanks for this small puzzle.</p>
          <p><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/6</link>
        <pubDate>Tue, 18 Jul 2017 19:45:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1762-6</guid>
        <source url="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762.rss">Crackme.c - A small reversing puzzle</source>
      </item>
      <item>
        <title>Crackme.c - A small reversing puzzle</title>
        <dc:creator><![CDATA[ATGC]]></dc:creator>
        <description><![CDATA[
            <p>This feels like cheating, but…</p>
<div class="spoiler"><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/5">spoiler</a></div>
          <p><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/5</link>
        <pubDate>Sat, 08 Jul 2017 20:58:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1762-5</guid>
        <source url="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762.rss">Crackme.c - A small reversing puzzle</source>
      </item>
      <item>
        <title>Crackme.c - A small reversing puzzle</title>
        <dc:creator><![CDATA[lantern-shadowclaw]]></dc:creator>
        <description><![CDATA[
            <p>Been trying out binary ninja demo.<br>
Made this very easy…</p>
<div class="spoiler"><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/4">spoiler</a></div>
          <p><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/4</link>
        <pubDate>Thu, 06 Jul 2017 17:52:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1762-4</guid>
        <source url="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762.rss">Crackme.c - A small reversing puzzle</source>
      </item>
      <item>
        <title>Crackme.c - A small reversing puzzle</title>
        <dc:creator><![CDATA[besa]]></dc:creator>
        <description><![CDATA[
            <p>Simple solution:</p>
<p><span class="spoiler"><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/3">spoiler</a></span></p>
          <p><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/3</link>
        <pubDate>Wed, 29 Mar 2017 05:28:12 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1762-3</guid>
        <source url="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762.rss">Crackme.c - A small reversing puzzle</source>
      </item>
      <item>
        <title>Crackme.c - A small reversing puzzle</title>
        <dc:creator><![CDATA[Neo]]></dc:creator>
        <description><![CDATA[
            <p>Nice little Challenge. Looking forward for more!</p>
<p>Here’s my solution:</p>
<div class="spoiler"><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/2">spoiler</a></div>
<p>edit: Thanks <a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a> for setting the spoiler tags. Sorry, totally forgot about that.</p>
          <p><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/2</link>
        <pubDate>Tue, 21 Mar 2017 07:05:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1762-2</guid>
        <source url="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762.rss">Crackme.c - A small reversing puzzle</source>
      </item>
      <item>
        <title>Crackme.c - A small reversing puzzle</title>
        <dc:creator><![CDATA[Defalt]]></dc:creator>
        <description><![CDATA[
            <p>What’s up everyone? It’s been quite a while. This is just going to be an easy little puzzle for you guys to play around with. I got bored in class so I decided to make a fake login in C.</p>
<p>There are 3 intended solutions to this, but those are for you to find out!</p>
<p>The code for the puzzle can be found here: <a href="http://pastebin.com/T9XA0gjS" rel="noopener nofollow ugc">http://pastebin.com/T9XA0gjS</a></p>
<p>BUT! If you want to solve the puzzles without looking at the code first, just follow this:<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/e/e2105fa2426f718e6e79c6bc7e18304dfb0719e8.png" width="540" height="230"></p>
<p>I’ll have my 3 solutions in the spoilers below. Have fun!</p>
<p>-Defalt</p>
<p>Solution 1:</p>
<div class="spoiler"><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/1">spoiler</a></div>
<p>Solution 2:</p>
<div class="spoiler"><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/1">spoiler</a></div>
<p>Solution 3:</p>
<div class="spoiler"><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/1">spoiler</a></div>
          <p><a href="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762/1</link>
        <pubDate>Thu, 09 Mar 2017 21:12:42 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1762-1</guid>
        <source url="https://0x00sec.org/t/crackme-c-a-small-reversing-puzzle/1762.rss">Crackme.c - A small reversing puzzle</source>
      </item>
  </channel>
</rss>
