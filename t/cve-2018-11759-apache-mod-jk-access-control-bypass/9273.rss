<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[CVE-2018-11759] Apache mod_jk access control bypass</title>
    <link>https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273</link>
    <description>**DISCLAIMER:** Article originally published on [immunIT ](https://www.immunit.ch/blog/2018/11/01/cve-2018-11759-apache-mod_jk-access-bypass/)
&lt;hr&gt;

Hi fellas,

I&#39;m exiting to introduce you to a new vulnerability found by my colleague (Xel) and me during one of our pentesting engagements :slight_smile:

I almost had my first CVE on [Wordpress](https://0x00sec.org/t/wordpress-has-never-been-safer/1875?u=nitrax) a year ago but now here we are! 

# Vulnerability summary

1. Due to discrepancies between the specifications of httpd and Tomcat for path handling, Apache mod_jk Connector 1.2.0 to 1.2.44 access controls to endpoints defined by a JkMount httpd directive can be bypassed.

2. Notably, if a read-only JK status manager interface is available, it is possible to disclose the internal routes of AJP services served by mod_jk.

3. Furthermore, if a read-write JK status manager interface is available, it is possible to hijack or shutdown all traffic traversing mod_jk by altering the configuration of AJP workers, or to conduct internal port scanning.

# Technical details

## Patch-diffing CVE-2018-1323

During a penetration test for one of our customers involving a load balancer/reverse-proxy based on Apache mod_jk serving JBoss/Tomcat webservers, we found out about vulnerability CVE-2018-1323 (reported by Alphan YAVAS from Biznet Bilisim A.S.) affecting mod_jk up to version 1.2.42.

After analyzing the mod_jk 1.2.43 patch to understand this vulnerability, we realized it was a path traversal based on discrepancies between how Apache httpd and Tomcat or other Java servers handled the semicolon character for path resolution.

Apache httpd interprets semicolons in URL as ordinary characters for path resolution, while Tomcat interprets them as query delimiters (with a similar functionality as “?”). Thus, an attacker could fetch a path such as `http://server/java_app/..;` did not trigger a path traversal for the logic of httpd, it was forwarded as is to the Tomcat webserver, which interpreted the string as `..` .

This allowed to fetch resources that were not supposed to be accessible on the Tomcat webserver.

![patch_diffing|445x500](upload://qJh93h2Yulkzx0PUUzRCcCZX0HG.jpeg) 

We have identified that the vulnerability was not fully understood, as the mod_jk patch did fix this specific path traversal attack against mod_jk, but not the core issue revolving around the handling of semicolons by mod_jk.

## Playing with the JK Status Manager

The JK status manager is an administration interface for mod_jk. When set in read-write, it allows the configuration of AJP workers to connect to Java Web servers to proxy HTTP requests to them.
It is normally possible to restrict access to the JK status manager, for example by using httpd directives such as:

```bash
&lt;Location /jkstatus&gt;

JKMount jk-status
Require ip 127.0.0.1

&lt;/Location&gt;
```

This directive is supposed to prevent any external access to the JK status manager.

![JKSTATUS|690x203](upload://6eQeqlKRLdab2E4WPnh9ECvChww.jpeg) 

We found out that by injecting a semicolon behind the /jkstatus URL, it was possible to bypass such a restriction.

![JK_BYPASS|676x499](upload://e2b0IPUeq529kM7oNXjdhG0jsQZ.jpeg) 

It is possible to submit GET parameters after this URL, so that state-changing requests can be made to the JK manager.

![JK_DUMP|577x500](upload://e0AweiIsacrr6eXxEVfKR1uII1K.jpeg) 

The impact of acccess bypass on the JK manager could be a denial of service of all applications served by mod_jk, by changing ports used by workers if the JK status manager is set with read-write access, and possibly the hijacking of all web applications served by mod_jk if an attacker connects the corresponding AJP workers to a server in his control.

It would also be theoretically possible to conduct internal TCP port scanning, by changing the destination and port of an AJP worker to an internal host and port, because of the discrepancy of error messages returned by the manager depending on whether the submitted AJP port is valid or not (Bad Gateway versus Service Unavailable). The full impact of this type of SSRF is unknown.

![LAST|603x500](upload://8L3RHnhJNtkXzYn0w5Uq5kBGdW7.jpeg) 

The JK manager (in read-only) also discloses the hostnames, IPs and ports of internal servers, routes that are served by mod_jk, and the absolute path of the httpd server on the filesystem.

This example of access bypass has a high impact. However, it has to be noted that access control to any endpoint defined through a JkMount directive could possibly be bypassed by a semicolon injection.

# Mitigation

A patch is available for mod_jk ([version 1.2.46](https://tomcat.apache.org/download-connectors.cgi)).
Other mitigations include the use of Location values such as `/jkstatus*` , which seems to fix the issue.

# Bug reference

[CVE-2018-11759](https://mail-archives.us.apache.org/mod_mbox/www-announce/201810.mbox/%3c16a616e5-5245-f26a-a5a4-2752b2826703@apache.org%3e)

# Github POC

A Docker environment is available to test this vulnerability on our [GitHub](https://github.com/immunIT/CVE-2018-11759)

# Timeline

* 06/09/2018 : First contact with Apache Tomcat security team
* 06/09/2018 : First response from Apache Tomcat security team
* 13/10/2018 : [mod_jk v1.2.46 fix is released](https://tomcat.apache.org/download-connectors.cgi)
* 31/10/2018 : CVE-2018-11759 advisory is issued
* 01/11/2018 : Full disclosure

I hope you enjoyed your reading and find this finding interesting.

Best,
Nitrax</description>
    
    <lastBuildDate>Fri, 02 Nov 2018 13:17:30 +0000</lastBuildDate>
    <category>Web Hacking</category>
    <atom:link href="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[CVE-2018-11759] Apache mod_jk access control bypass</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273/7</link>
        <pubDate>Sun, 02 Dec 2018 08:37:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9273-7</guid>
        <source url="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273.rss">[CVE-2018-11759] Apache mod_jk access control bypass</source>
      </item>
      <item>
        <title>[CVE-2018-11759] Apache mod_jk access control bypass</title>
        <dc:creator><![CDATA[lkw]]></dc:creator>
        <description><![CDATA[
            <p>Nice!<br>
Secure interoperability between different systems seems to be a bit of an issue. Reminds me of attacks using discrepancies between <a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf">url parsing</a> and <a href="https://www.schneier.com/blog/archives/2018/04/obscure_e-mail_.html">email address handling</a>. I think I wouldn’t be surprised to see a lot more of this in the future.</p>
          <p><a href="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273/6</link>
        <pubDate>Fri, 02 Nov 2018 13:17:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9273-6</guid>
        <source url="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273.rss">[CVE-2018-11759] Apache mod_jk access control bypass</source>
      </item>
      <item>
        <title>[CVE-2018-11759] Apache mod_jk access control bypass</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <p>I don’t think so cause the Jk Status Manager interface has no default endpoint. Basically, you can assume that any Apache servers running with the module mod_jk below 1.2.46 is vulnerable to access bypass whatever the endpoint concerned.</p>
          <p><a href="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273/5</link>
        <pubDate>Fri, 02 Nov 2018 11:41:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9273-5</guid>
        <source url="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273.rss">[CVE-2018-11759] Apache mod_jk access control bypass</source>
      </item>
      <item>
        <title>[CVE-2018-11759] Apache mod_jk access control bypass</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Talking of thousands of companies:</p>
<p>Has anybody been able to make a Shodan filter or a Google dork to find vulnerable hosts?</p>
          <p><a href="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273/4</link>
        <pubDate>Fri, 02 Nov 2018 11:14:42 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9273-4</guid>
        <source url="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273.rss">[CVE-2018-11759] Apache mod_jk access control bypass</source>
      </item>
      <item>
        <title>[CVE-2018-11759] Apache mod_jk access control bypass</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <p>Feeling awesome mate. What is more, it’s a well known and widely used component which is affected by this finding, signifying that thousands of companies accross the world are vulnerable to this access bypass <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273/3</link>
        <pubDate>Fri, 02 Nov 2018 11:01:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9273-3</guid>
        <source url="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273.rss">[CVE-2018-11759] Apache mod_jk access control bypass</source>
      </item>
      <item>
        <title>[CVE-2018-11759] Apache mod_jk access control bypass</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Wow man, this is awesome <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Congrats! How does it feel to have your first CVE?</p>
          <p><a href="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273/2</link>
        <pubDate>Fri, 02 Nov 2018 10:58:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9273-2</guid>
        <source url="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273.rss">[CVE-2018-11759] Apache mod_jk access control bypass</source>
      </item>
      <item>
        <title>[CVE-2018-11759] Apache mod_jk access control bypass</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <p><strong>DISCLAIMER:</strong> Article originally published on <a href="https://www.immunit.ch/blog/2018/11/01/cve-2018-11759-apache-mod_jk-access-bypass/" rel="noopener nofollow ugc">immunIT </a></p>
<hr>
<p>Hi fellas,</p>
<p>I’m exiting to introduce you to a new vulnerability found by my colleague (Xel) and me during one of our pentesting engagements <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>I almost had my first CVE on <a href="https://0x00sec.org/t/wordpress-has-never-been-safer/1875">Wordpress</a> a year ago but now here we are!</p>
<h1>Vulnerability summary</h1>
<ol>
<li>
<p>Due to discrepancies between the specifications of httpd and Tomcat for path handling, Apache mod_jk Connector 1.2.0 to 1.2.44 access controls to endpoints defined by a JkMount httpd directive can be bypassed.</p>
</li>
<li>
<p>Notably, if a read-only JK status manager interface is available, it is possible to disclose the internal routes of AJP services served by mod_jk.</p>
</li>
<li>
<p>Furthermore, if a read-write JK status manager interface is available, it is possible to hijack or shutdown all traffic traversing mod_jk by altering the configuration of AJP workers, or to conduct internal port scanning.</p>
</li>
</ol>
<h1>Technical details</h1>
<h2>Patch-diffing CVE-2018-1323</h2>
<p>During a penetration test for one of our customers involving a load balancer/reverse-proxy based on Apache mod_jk serving JBoss/Tomcat webservers, we found out about vulnerability CVE-2018-1323 (reported by Alphan YAVAS from Biznet Bilisim A.S.) affecting mod_jk up to version 1.2.42.</p>
<p>After analyzing the mod_jk 1.2.43 patch to understand this vulnerability, we realized it was a path traversal based on discrepancies between how Apache httpd and Tomcat or other Java servers handled the semicolon character for path resolution.</p>
<p>Apache httpd interprets semicolons in URL as ordinary characters for path resolution, while Tomcat interprets them as query delimiters (with a similar functionality as “?”). Thus, an attacker could fetch a path such as <code>http://server/java_app/..;</code> did not trigger a path traversal for the logic of httpd, it was forwarded as is to the Tomcat webserver, which interpreted the string as <code>..</code> .</p>
<p>This allowed to fetch resources that were not supposed to be accessible on the Tomcat webserver.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/bb56bfc37ab11b7a9b5d39df5fd39fd0276837cc.jpeg" alt="patch_diffing" data-base62-sha1="qJh93h2Yulkzx0PUUzRCcCZX0HG" width="445" height="500"></p>
<p>We have identified that the vulnerability was not fully understood, as the mod_jk patch did fix this specific path traversal attack against mod_jk, but not the core issue revolving around the handling of semicolons by mod_jk.</p>
<h2>Playing with the JK Status Manager</h2>
<p>The JK status manager is an administration interface for mod_jk. When set in read-write, it allows the configuration of AJP workers to connect to Java Web servers to proxy HTTP requests to them.<br>
It is normally possible to restrict access to the JK status manager, for example by using httpd directives such as:</p>
<pre><code class="lang-bash">&lt;Location /jkstatus&gt;

JKMount jk-status
Require ip 127.0.0.1

&lt;/Location&gt;
</code></pre>
<p>This directive is supposed to prevent any external access to the JK status manager.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2bba8f2d8807e3818929cfc2ceef18cc6b8309a4.jpeg" alt="JKSTATUS" data-base62-sha1="6eQeqlKRLdab2E4WPnh9ECvChww" width="690" height="203"></p>
<p>We found out that by injecting a semicolon behind the /jkstatus URL, it was possible to bypass such a restriction.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/625d73a93aa5e8420669deae51464a9a5daedb2d.jpeg" alt="JK_BYPASS" data-base62-sha1="e2b0IPUeq529kM7oNXjdhG0jsQZ" width="676" height="499"></p>
<p>It is possible to submit GET parameters after this URL, so that state-changing requests can be made to the JK manager.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/622f7b2815d3f40025ed715808f6f5a91a2748bc.jpeg" alt="JK_DUMP" data-base62-sha1="e0AweiIsacrr6eXxEVfKR1uII1K" width="577" height="500"></p>
<p>The impact of acccess bypass on the JK manager could be a denial of service of all applications served by mod_jk, by changing ports used by workers if the JK status manager is set with read-write access, and possibly the hijacking of all web applications served by mod_jk if an attacker connects the corresponding AJP workers to a server in his control.</p>
<p>It would also be theoretically possible to conduct internal TCP port scanning, by changing the destination and port of an AJP worker to an internal host and port, because of the discrepancy of error messages returned by the manager depending on whether the submitted AJP port is valid or not (Bad Gateway versus Service Unavailable). The full impact of this type of SSRF is unknown.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3d634bbe49bf5d0591aac2aec2deb4ba30c5f807.jpeg" alt="LAST" data-base62-sha1="8L3RHnhJNtkXzYn0w5Uq5kBGdW7" width="603" height="500"></p>
<p>The JK manager (in read-only) also discloses the hostnames, IPs and ports of internal servers, routes that are served by mod_jk, and the absolute path of the httpd server on the filesystem.</p>
<p>This example of access bypass has a high impact. However, it has to be noted that access control to any endpoint defined through a JkMount directive could possibly be bypassed by a semicolon injection.</p>
<h1>Mitigation</h1>
<p>A patch is available for mod_jk (<a href="https://tomcat.apache.org/download-connectors.cgi" rel="noopener nofollow ugc">version 1.2.46</a>).<br>
Other mitigations include the use of Location values such as <code>/jkstatus*</code> , which seems to fix the issue.</p>
<h1>Bug reference</h1>
<p><a href="https://mail-archives.us.apache.org/mod_mbox/www-announce/201810.mbox/%3c16a616e5-5245-f26a-a5a4-2752b2826703@apache.org%3e" rel="noopener nofollow ugc">CVE-2018-11759</a></p>
<h1>Github POC</h1>
<p>A Docker environment is available to test this vulnerability on our <a href="https://github.com/immunIT/CVE-2018-11759" rel="noopener nofollow ugc">GitHub</a></p>
<h1>Timeline</h1>
<ul>
<li>06/09/2018 : First contact with Apache Tomcat security team</li>
<li>06/09/2018 : First response from Apache Tomcat security team</li>
<li>13/10/2018 : <a href="https://tomcat.apache.org/download-connectors.cgi" rel="noopener nofollow ugc">mod_jk v1.2.46 fix is released</a>
</li>
<li>31/10/2018 : CVE-2018-11759 advisory is issued</li>
<li>01/11/2018 : Full disclosure</li>
</ul>
<p>I hope you enjoyed your reading and find this finding interesting.</p>
<p>Best,<br>
Nitrax</p>
          <p><a href="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273/1</link>
        <pubDate>Fri, 02 Nov 2018 08:37:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9273-1</guid>
        <source url="https://0x00sec.org/t/cve-2018-11759-apache-mod-jk-access-control-bypass/9273.rss">[CVE-2018-11759] Apache mod_jk access control bypass</source>
      </item>
  </channel>
</rss>
