<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Fundamentals: DNS Sinkholes</title>
    <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029</link>
    <description>_NB: Categorized as Networking Tutorial since this is a concept that uses networking. However, it might fall into malware or exploit dev as well. Admins, please change at your discretion._

Given the recent saga of WannaCry and the amazingly hilarious way it was foiled (for now), I think it&#39;s apropos to take a moment to explain sinkholes. So what even is it?

&gt; _A sinkhole domain is a domain registered (or seized) and used to redirect malware traffic away from its intended command and control servers_

 Most malware, particularly ransomware, communicates with command and control servers (also called C2 or C&amp;C) in order to receive instructions, updates, etc. Our fearless firefighters of the internet, malware researchers, figured out early on that they could register or seize a C&amp;C domain and take control of a botnet for their own use. After reverse-engineering the malware, they will then often disable it by sending a command to disable the instances on infected nodes.

### So what happened with WannaCrypt?

This is actually kind of funny. The MalwareTech [blog post](https://www.malwaretech.com/2017/05/how-to-accidentally-stop-a-global-cyber-attacks.html) explains it in detail, but in the process of researching a sample of WannaCrypt, he discovered that it was calling out to a crazy &quot;random&quot; domain. When he checked to see if it was registered, he found it wasn&#39;t and promptly registered it. Standard procedure. The funny part was what happened next: everything stopped and nobody quite knew why.

They had accidentally discovered a killswitch. 

See, the normal process is something like 
 
 1. Register a sinkhole domain
 1. Survey for affected machines and reverse engineer malware
 1. Send disabling command to bots

As the blog post stated, steps 1-3 were actually rolled into just 1 this time. To see why the authors might have coded this, I encourage you to read the article for yourself. It&#39;s a good one.

Anyways, that&#39;s it. A sinkhole is just a way to direct machines with malware into something controlled by someone other than the person supposed to be in charge :wink:</description>
    
    <lastBuildDate>Sun, 14 May 2017 22:24:30 +0000</lastBuildDate>
    <category>Networking</category>
    <atom:link href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Fundamentals: DNS Sinkholes</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/15</link>
        <pubDate>Sun, 21 Jan 2018 00:38:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2029-15</guid>
        <source url="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss">Fundamentals: DNS Sinkholes</source>
      </item>
      <item>
        <title>Fundamentals: DNS Sinkholes</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>It was a bad attempt at an anti-analysis trick. The technique is sort of the result of a very stupid arms race between researchers and malware writers.</p>
<p>First, malware writers would use obscure domains for C2.<br>
Then researchers caught on and would watch for them. They did this by setting up a DNS that would forward all requests for legitimate domains (ones that were registered in some global DNS like 8.8.8.8). All others that weren’t in global DNS would return a lab IP.<br>
Then writers went, “Oh crap, they’re reversing our malware by intercepting our C2 traffic in the lab!” and set up a new mechanism: They would request a handful of randomly generated domains names (different each time) and if they all returned as registered (or even worse, all have the same IP), that’s an indicator that they’re in a lab and they exit to prevent more analysis.</p>
<p>This one appears to have attempted that poorly by only checking a single, hardcoded domain. Therefore, registering the domain and pointing it at an IP meant it thought it was in a lab, even when it wasn’t.</p>
          <p><a href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/14</link>
        <pubDate>Sun, 14 May 2017 22:24:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2029-14</guid>
        <source url="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss">Fundamentals: DNS Sinkholes</source>
      </item>
      <item>
        <title>Fundamentals: DNS Sinkholes</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>So why would the functionality actually cause it to stop working? That seems like poor design. Or perhaps, done on purpose?</p>
          <p><a href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/13</link>
        <pubDate>Sun, 14 May 2017 17:04:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2029-13</guid>
        <source url="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss">Fundamentals: DNS Sinkholes</source>
      </item>
      <item>
        <title>Fundamentals: DNS Sinkholes</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>I don’t believe it was a kill switch; I think it was an anti-analysis trick.</p>
          <p><a href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/12</link>
        <pubDate>Sun, 14 May 2017 16:18:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2029-12</guid>
        <source url="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss">Fundamentals: DNS Sinkholes</source>
      </item>
      <item>
        <title>Fundamentals: DNS Sinkholes</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>I think it is indeed a smart failsafe. Smart enough that the researchers didn’t even realise until after they had registered it.</p>
<p>The fact they had thought about a kill switch was smart. And showed they had thought about the potential consequences.</p>
          <p><a href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/11</link>
        <pubDate>Sun, 14 May 2017 14:37:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2029-11</guid>
        <source url="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss">Fundamentals: DNS Sinkholes</source>
      </item>
      <item>
        <title>Fundamentals: DNS Sinkholes</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>This type of killswitch is actually used to prevent analysis by detecting if it’s within a lab environment. In the lab that you mentioned, any call to a domain that’s not in global DNS will return an IP anyways, as an attempt to capture C&amp;C traffic. These applications will generate an array of several “random” domains and query them. If they all come back with the same IP, they realize that they’re in a lab and exit in order to prevent analysis.</p>
</blockquote>
<blockquote>
<p>The failing of this particular malware was that it used a single hard-coded domain.</p>
</blockquote>
          <p><a href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/10</link>
        <pubDate>Sat, 13 May 2017 22:31:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2029-10</guid>
        <source url="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss">Fundamentals: DNS Sinkholes</source>
      </item>
      <item>
        <title>Fundamentals: DNS Sinkholes</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Seems to me to be a weak failsafe. Avoids analysis by rookies.</p>
<p>Oh well, WannaCry did some damage so I’m not hating on them or anything.</p>
<p>But I’m sure that some m4lw4r3z have a few more anti-analysis tricks to use.</p>
          <p><a href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/9</link>
        <pubDate>Sat, 13 May 2017 22:31:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2029-9</guid>
        <source url="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss">Fundamentals: DNS Sinkholes</source>
      </item>
      <item>
        <title>Fundamentals: DNS Sinkholes</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>Exactly. It’s a failsafe to prevent analysis.</p>
          <p><a href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/8</link>
        <pubDate>Sat, 13 May 2017 22:29:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2029-8</guid>
        <source url="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss">Fundamentals: DNS Sinkholes</source>
      </item>
      <item>
        <title>Fundamentals: DNS Sinkholes</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>So what I’ve gathered after reviewing your comments and the <a href="https://www.malwaretech.com/2017/05/how-to-accidentally-stop-a-global-cyber-attacks.html" rel="nofollow noopener">article</a> is that:</p>
<ol>
<li>The malware hits some random domain <code>D</code> that isn’t globally registered.</li>
<li>If <code>D</code> is correctly unregistered, the malware continues,</li>
<li>otherwise (i.e., <code>D</code> is apparently registered), the malware quits to avoid being analyzed.</li>
</ol>
<p>All domains, including globally unregistered ones, appear registered in certain analysis environments. In these environments, an IP is returned for all DNS queries (even those that would fail in the wild) so that the analysts can record all the data the malware sends anywhere.</p>
          <p><a href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/7</link>
        <pubDate>Sat, 13 May 2017 22:27:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2029-7</guid>
        <source url="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss">Fundamentals: DNS Sinkholes</source>
      </item>
      <item>
        <title>Fundamentals: DNS Sinkholes</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>But it’s actually more common than I realized and definitely by design,.</p>
          <p><a href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/6</link>
        <pubDate>Sat, 13 May 2017 22:16:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2029-6</guid>
        <source url="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss">Fundamentals: DNS Sinkholes</source>
      </item>
      <item>
        <title>Fundamentals: DNS Sinkholes</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>Yep. Read the explanation in the MalwareTech article because he explains it so much better than me (also, homie deserves clicks for his good work).</p>
          <p><a href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/5</link>
        <pubDate>Sat, 13 May 2017 22:16:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2029-5</guid>
        <source url="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss">Fundamentals: DNS Sinkholes</source>
      </item>
      <item>
        <title>Fundamentals: DNS Sinkholes</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>So if the domain isn’t registered, it points… nowhere?</p>
          <p><a href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/4</link>
        <pubDate>Sat, 13 May 2017 22:15:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2029-4</guid>
        <source url="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss">Fundamentals: DNS Sinkholes</source>
      </item>
      <item>
        <title>Fundamentals: DNS Sinkholes</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>Correct, and that was actually by design.</p>
          <p><a href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/3</link>
        <pubDate>Sat, 13 May 2017 22:15:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2029-3</guid>
        <source url="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss">Fundamentals: DNS Sinkholes</source>
      </item>
      <item>
        <title>Fundamentals: DNS Sinkholes</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>So the malware makers never registered the domain themselves?</p>
          <p><a href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/2</link>
        <pubDate>Sat, 13 May 2017 22:11:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2029-2</guid>
        <source url="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss">Fundamentals: DNS Sinkholes</source>
      </item>
      <item>
        <title>Fundamentals: DNS Sinkholes</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p><em>NB: Categorized as Networking Tutorial since this is a concept that uses networking. However, it might fall into malware or exploit dev as well. Admins, please change at your discretion.</em></p>
<p>Given the recent saga of WannaCry and the amazingly hilarious way it was foiled (for now), I think it’s apropos to take a moment to explain sinkholes. So what even is it?</p>
<blockquote>
<p><em>A sinkhole domain is a domain registered (or seized) and used to redirect malware traffic away from its intended command and control servers</em></p>
</blockquote>
<p>Most malware, particularly ransomware, communicates with command and control servers (also called C2 or C&amp;C) in order to receive instructions, updates, etc. Our fearless firefighters of the internet, malware researchers, figured out early on that they could register or seize a C&amp;C domain and take control of a botnet for their own use. After reverse-engineering the malware, they will then often disable it by sending a command to disable the instances on infected nodes.</p>
<h3>So what happened with WannaCrypt?</h3>
<p>This is actually kind of funny. The MalwareTech <a href="https://www.malwaretech.com/2017/05/how-to-accidentally-stop-a-global-cyber-attacks.html" rel="nofollow noopener">blog post</a> explains it in detail, but in the process of researching a sample of WannaCrypt, he discovered that it was calling out to a crazy “random” domain. When he checked to see if it was registered, he found it wasn’t and promptly registered it. Standard procedure. The funny part was what happened next: everything stopped and nobody quite knew why.</p>
<p>They had accidentally discovered a killswitch.</p>
<p>See, the normal process is something like</p>
<ol>
<li>Register a sinkhole domain</li>
<li>Survey for affected machines and reverse engineer malware</li>
<li>Send disabling command to bots</li>
</ol>
<p>As the blog post stated, steps 1-3 were actually rolled into just 1 this time. To see why the authors might have coded this, I encourage you to read the article for yourself. It’s a good one.</p>
<p>Anyways, that’s it. A sinkhole is just a way to direct machines with malware into something controlled by someone other than the person supposed to be in charge <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fundamentals-dns-sinkholes/2029/1</link>
        <pubDate>Sat, 13 May 2017 22:08:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2029-1</guid>
        <source url="https://0x00sec.org/t/fundamentals-dns-sinkholes/2029.rss">Fundamentals: DNS Sinkholes</source>
      </item>
  </channel>
</rss>
