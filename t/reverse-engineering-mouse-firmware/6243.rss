<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Reverse engineering mouse firmware</title>
    <link>https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243</link>
    <description>Hey, I have been reverse engeneering the protocol from my SteelSeries Rival 310. You can find my work [here](https://github.com/FFY00/rival310-re). I would also like to reverse engineer the firmware of the mouse because there are still things I don&#39;t understand. I have the firmware files that I have extracted from the official driver (they&#39;re in the repo too). I&#39;ve ran `binwalk` on them but as I expected it didn&#39;t match anything because the files are probably binaries for the microcontroller. I am not really familiar with the ARM Thumb binary structure so I can&#39;t identify anything inside the file. I tried to open it in IDA Pro and radare2 but I didn&#39;t get anything, probably because there might be some kind of padding or a signature in the `.bin` file. So, I am here to ask if anyone can have a look at the files and point me where to start. If anyone want&#39;s to help, it might be helpful to give some more details. The mouse has a STM32F103, which has a Cortex-M3 core, so the architecture should be ARMv7-M (this architecture only supports Thumb mode). In the repo there are 2 files, the main firmware and the secondary firmware. The secondary firmware works as a fallback, the mouse only blinks orange (`FF 52 00`) and waits for a firmware update.</description>
    
    <lastBuildDate>Fri, 13 Apr 2018 07:12:49 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Reverse engineering mouse firmware</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed 3 days after the last reply. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/9</link>
        <pubDate>Mon, 16 Apr 2018 07:12:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6243-9</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243.rss">Reverse engineering mouse firmware</source>
      </item>
      <item>
        <title>Reverse engineering mouse firmware</title>
        <dc:creator><![CDATA[FFY00]]></dc:creator>
        <description><![CDATA[
            <p>Thanks! I actually knew about Azeria Labs but totally forgot. I was also watching this videos on the Cortex-M architecture <a href="https://www.youtube.com/channel/UCB_pO4oDYxxbsRPZ-5RluAA" rel="nofollow noopener">https://www.youtube.com/channel/UCB_pO4oDYxxbsRPZ-5RluAA</a>.</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/8</link>
        <pubDate>Fri, 13 Apr 2018 07:12:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6243-8</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243.rss">Reverse engineering mouse firmware</source>
      </item>
      <item>
        <title>Reverse engineering mouse firmware</title>
        <dc:creator><![CDATA[Wunkolo]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-VIP" data-username="Leeky" data-post="6" data-topic="6243">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/leeky/40/2309_2.png" class="avatar"> Leeky:</div>
<blockquote>
<p>Maybe we could work together on some crackme’s or something similar? Only if you want to and have time for it obviously.</p>
</blockquote>
</aside>
<p>Sounds like an idea. I haven’t been able to join the irc at all lately though for some reason but I’m up for making some little challenges based in ARM.</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/7</link>
        <pubDate>Thu, 12 Apr 2018 21:46:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6243-7</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243.rss">Reverse engineering mouse firmware</source>
      </item>
      <item>
        <title>Reverse engineering mouse firmware</title>
        <dc:creator><![CDATA[Leeky]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/_py">@_py</a>   I’m not that good with ARM actually.<br>
<a class="mention" href="https://0x00sec.org/u/wunkolo">@Wunkolo</a> seems to know a lot more than me.<br>
(I can also really recommend GPATEK and Tonc for learning ARM as the GBA kinda forces you to use normal ARM and THUMBS as the different memory regions have different IO sizes, I’ve just experimented with it a little though and mainly in C. And of course azeria-labs is an amazing place for learning ARM!)<br>
I personally never used ARMSim before, I just assembled ARM Code for a qemu Linux box and tested it there (and on my NDS of course <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"> ) but <a class="mention" href="https://0x00sec.org/u/wunkolo">@Wunkolo</a>’s OakSim looks pretty good (and actually easy to interact with compared to the keystone/unicorn web wrapper I use).</p>
<p><a class="mention" href="https://0x00sec.org/u/wunkolo">@Wunkolo</a> Maybe we could work together on some crackme’s or something similar? Only if you want to and have time for it obviously.</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/6</link>
        <pubDate>Thu, 12 Apr 2018 06:08:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6243-6</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243.rss">Reverse engineering mouse firmware</source>
      </item>
      <item>
        <title>Reverse engineering mouse firmware</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Wunkolo" data-post="4" data-topic="6243">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/wunkolo/40/1614_2.png" class="avatar"> Wunkolo:</div>
<blockquote>
<p>I think something that would be cool was if 0x00sec had an ARM based “crackme”.</p>
</blockquote>
</aside>
<p>There’s an ARM legend staying quiet in between us. I summon you, <a class="mention" href="https://0x00sec.org/u/leeky">@Leeky</a>.</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/5</link>
        <pubDate>Thu, 12 Apr 2018 05:37:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6243-5</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243.rss">Reverse engineering mouse firmware</source>
      </item>
      <item>
        <title>Reverse engineering mouse firmware</title>
        <dc:creator><![CDATA[Wunkolo]]></dc:creator>
        <description><![CDATA[
            <p>Thumb code is just one of the facets of the ARM arch so it might be hard to find a book or discipline around just Thumb code in particular. Thumb is just a <em>subset</em> of sorts for an ARM processor so once you learn the ARM side of things, you’ll find that Thumb code is just one particular feature of most ARM processors. Outside of just being an instruction set, your ARM/Thumb code does not exist in a vacuum and will instead find itself in the atmosphere of an SoC or much larger architecture where your firmware exists on a flash chip, which is mapped to a certain portion of memory such that when the CPU reads from a range of addresses it is actually interfacing with a peripheral.<br>
When you’re at the embedded level you won’t have the benefit of having ELF files or a Linux operating system running on your chip that trends to lend you things like entry points but instead will have a lot of its abstractions made via read and writes to memory and will have to read up data sheets such as above for the specific SoC(such as the STM32F103, which arranges its memory space in a particular way so that certain memory operations interface with an underlying harder) rather than just the processor or ARM/Thumb instruction set on its own(which all pretty much only know how to do mathematical arithmetic and move memory around).</p>
<p>Here’s some links related to the ARM atmosphere.<br>
<a href="https://godbolt.org/" rel="nofollow noopener">GodBolt</a> - A web tool where you can type in C or C++ code, and see the compiled assembly on the right. That way you can experiment and see how certain algorithms look like when emitted to assembly and gain an intuition as to what a chunk of assembly is doing. (ex. how <a href="https://godbolt.org/g/dFJrUo" rel="nofollow noopener">strlen</a> looks like under the hood or finding a good attack surface for a rop chain)<br>
<a href="http://problemkaputt.de/gbatek.htm" rel="nofollow noopener">GBATEK</a> - This page documents everything that makes up the Gameboy Advance, The Nintendo DS, and the Nintendo DSi. Just a very verbose unofficial “datasheet” of a console that you are probably already familiar with. Jump around the headers and you’ll see how all these peripherals are all linked together and how they are interfaced and mapped in memory. Especially the <a href="http://problemkaputt.de/gbatek.htm#armcpureference" rel="nofollow noopener">ARM7TDMI</a> section. You’ll find that the ARM7TDMI was very popular around this time. Also check out the <a href="http://problemkaputt.de/gbatek.htm#dsmemorymaps" rel="nofollow noopener">Memory Map sections</a> for some of them.<br>
<a href="https://www.coranac.com/tonc/text/asm.htm" rel="nofollow noopener">Tonc: A Whirlwind Tour of ARM assembly</a> - Another expansive tutorial on writing assembly for the Gameboy Advanced. Compliments the GBATEK document into more practical examples.<br>
<a href="https://azeria-labs.com/writing-arm-assembly-part-1/" rel="nofollow noopener">azeria-labs, ARM Assembly</a> - Goes over a lot of the atmosphere of developing for ARM and how these environments tend to look like<br>
<a href="https://wunkolo.github.io/OakSim/" rel="nofollow noopener">OakSim</a> - A little web tool I made where you can type in arm or thumb assembly and see the resulting binary data on the right, and also step through your instructions.<br>
<a href="http://armsim.cs.uvic.ca/" rel="nofollow noopener">ARMSim</a> - An “ide” for arm assembly. This is what a lot of schools use. I personally hate it and it was my motivation for writing OakSim.</p>
<p>I think something that would be cool was if 0x00sec had an ARM based “crackme”.</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/4</link>
        <pubDate>Wed, 11 Apr 2018 17:06:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6243-4</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243.rss">Reverse engineering mouse firmware</source>
      </item>
      <item>
        <title>Reverse engineering mouse firmware</title>
        <dc:creator><![CDATA[FFY00]]></dc:creator>
        <description><![CDATA[
            <p>Thanks! That was definitely helpful! Do you know some good books (or other resources) on ARM, more particularly, Thumb? I have messed a bit with x86 binaries and those are easy to understand because you have an entry point. I am interested in reverse engineering more physical devices like this but I don’t have the knowledge yet to dive into more complex binaries. Again, thank you so much! That was really helpful!</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/3</link>
        <pubDate>Tue, 10 Apr 2018 21:41:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6243-3</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243.rss">Reverse engineering mouse firmware</source>
      </item>
      <item>
        <title>Reverse engineering mouse firmware</title>
        <dc:creator><![CDATA[Wunkolo]]></dc:creator>
        <description><![CDATA[
            <p>I managed to open the 1.33 firmware file just fine in IDA Pro after reading the data-sheet and knowing where certain addresses should be mapped to.<br>
<a href="http://www.st.com/content/ccc/resource/technical/document/datasheet/33/d4/6f/1d/df/0b/4c/6d/CD00161566.pdf/files/CD00161566.pdf/jcr:content/translations/en.CD00161566.pdf" rel="noopener nofollow ugc">Here’s the datasheet for the STM32F103</a><br>
Check out the memory map of Section 4 to give you some insight on the address space so you’ll know where to map the segments in IDA pro. From the looks of things flash memory is mapped to <code>0x8000000</code> so I had IDA pro map the firmware.bin file there and to map RAM to <code>0x20000000</code> and guessed the size to be 64kb(0xFFFF bytes) and from there you’ll have to manually dive around and press <code>C</code> to get ida pro to start analyzing and recursively finding more and more functions and data xrefs. ARM(and Thumb) assembly trends to have these pools of constant values and data right after the functions and just from experience you can intuitively find them just from looking at the entropy of the byte data. Given the spec sheet and knowing that RAM is going to be in the <code>0x20000000</code> range I naturally expected to see a lot of <code>0x20000000</code>-like integers in these pools and being a Thumb/ARM machine I knew that instructions would be aligned to 2-byte or 4-byte addresses depending on the execution mode that it was in. And from there I can go in and press “C” bit by bit until I reach full coverage. You could also of course just know the bytes for stuff like push and pop to find the beginning and end of subroutines so you know where to get IDA to start declaring bytes as code but this is just a quick poke into your project.</p>
<p>Check it out:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/c/ce9246a111ca299b367d343f17f96e6bcfba8aa6.png" data-download-href="/uploads/short-url/ttpKIJsTm7SojmynurBozxpv0CW.png?dl=1" title="" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/c/ce9246a111ca299b367d343f17f96e6bcfba8aa6_2_453x499.png" alt="" data-base62-sha1="ttpKIJsTm7SojmynurBozxpv0CW" width="453" height="499" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/c/ce9246a111ca299b367d343f17f96e6bcfba8aa6_2_453x499.png, https://0x00sec.s3.amazonaws.com/optimized/2X/c/ce9246a111ca299b367d343f17f96e6bcfba8aa6_2_679x748.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/c/ce9246a111ca299b367d343f17f96e6bcfba8aa6_2_906x998.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/c/ce9246a111ca299b367d343f17f96e6bcfba8aa6_2_10x10.png"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/a/af4bb636a60a24ceec1a637757bdba582acaffb1.png" data-download-href="/uploads/short-url/p0JLGeiA7ltn7gxmIjb4fN9J7fH.png?dl=1" title="" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/a/af4bb636a60a24ceec1a637757bdba582acaffb1_2_690x397.png" alt="" data-base62-sha1="p0JLGeiA7ltn7gxmIjb4fN9J7fH" width="690" height="397" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/a/af4bb636a60a24ceec1a637757bdba582acaffb1_2_690x397.png, https://0x00sec.s3.amazonaws.com/original/2X/a/af4bb636a60a24ceec1a637757bdba582acaffb1.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/a/af4bb636a60a24ceec1a637757bdba582acaffb1.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/a/af4bb636a60a24ceec1a637757bdba582acaffb1_2_10x10.png"></a></div><p></p>
<p>Based on the data sheet writes to the <code>0x40000000 </code> region are writes to peripherals:</p>
<p>so that <code>0x40010800</code> constant there means that that subroutine is interfacing with some peripheral.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b20b3ee0d71150e4c598735e870cdb0cec672393.png" alt="" width="" height=""><br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/6/67e6cff4dd39a388ebcb8a1501b57e9d9004d1d7.png" data-download-href="/uploads/short-url/eP9GWkfCWdxPG4OOynLKfOBguW3.png?dl=1" title="" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/67e6cff4dd39a388ebcb8a1501b57e9d9004d1d7_2_333x500.png" alt="" data-base62-sha1="eP9GWkfCWdxPG4OOynLKfOBguW3" width="333" height="500" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/67e6cff4dd39a388ebcb8a1501b57e9d9004d1d7_2_10x10.png"></a></div><br>
Which seems to be <strong>Port A</strong>. It’s up to the designer and manufacturer to wire whatever peripheral they want to Port A though so you might not be able to make much sense to some of those exact reads and writes are doing but you’ll know for sure that it is reaching out to a peripheral.<p></p>
<p>Hope this little offhand lunch break writeup gets you in the right general direction.</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/2</link>
        <pubDate>Mon, 09 Apr 2018 20:54:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6243-2</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243.rss">Reverse engineering mouse firmware</source>
      </item>
      <item>
        <title>Reverse engineering mouse firmware</title>
        <dc:creator><![CDATA[FFY00]]></dc:creator>
        <description><![CDATA[
            <p>Hey, I have been reverse engeneering the protocol from my SteelSeries Rival 310. You can find my work <a href="https://github.com/FFY00/rival310-re" rel="nofollow noopener">here</a>. I would also like to reverse engineer the firmware of the mouse because there are still things I don’t understand. I have the firmware files that I have extracted from the official driver (they’re in the repo too). I’ve ran <code>binwalk</code> on them but as I expected it didn’t match anything because the files are probably binaries for the microcontroller. I am not really familiar with the ARM Thumb binary structure so I can’t identify anything inside the file. I tried to open it in IDA Pro and radare2 but I didn’t get anything, probably because there might be some kind of padding or a signature in the <code>.bin</code> file. So, I am here to ask if anyone can have a look at the files and point me where to start. If anyone want’s to help, it might be helpful to give some more details. The mouse has a STM32F103, which has a Cortex-M3 core, so the architecture should be ARMv7-M (this architecture only supports Thumb mode). In the repo there are 2 files, the main firmware and the secondary firmware. The secondary firmware works as a fallback, the mouse only blinks orange (<code>FF 52 00</code>) and waits for a firmware update.</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243/1</link>
        <pubDate>Mon, 09 Apr 2018 19:49:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6243-1</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-mouse-firmware/6243.rss">Reverse engineering mouse firmware</source>
      </item>
  </channel>
</rss>
