<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How To Get Started in CTF?</title>
    <link>https://0x00sec.org/t/how-to-get-started-in-ctf/18978</link>
    <description>&gt; First, What are CTF Competitions?

Capture the Flag (CTF) is a special kind of information security competition There are three common types of CTFs: Jeopardy, Attack-Defence and mixed.

Jeopardy-style CTFs have a couple of questions (tasks) in a range of categories. For example, Web, Forensic, Crypto, Binary or something else. A team can gain some points for every solved task. More points for more complicated tasks usually. The next task in a chain can be opened only after some team solves the previous task. Then the game time is over the sum of points shows you a CTF winner.

Attack Defence is another interesting kind of competition. Here every team has own network(or only one host) with vulnerable services. Your team has time for patching your services and developing exploits usually. So, then organizers connect participants of the competition and the wargame starts! You should protect own services for defense points and hack opponents for attack points. Historically this is the first type of CTFs, everybody knows about [DEF CON CTF](http://ctftime.org/ctf/2/) — something like a World Cup of all other competitions.

Mixed competitions may vary possible formats. It may be something like wargame with special time for task-based elements

CTF competitions generally focus on the following skills: reverse engineering, cryptography, ACM style programming, web vulnerabilities, binary exercises, networking, and forensics. Pick one and focus on a single topic as you get started…

1. Reverse Engineering: I highly suggest that you get a copy of IDA Pro. There is a free version available as well as a discounted student license. Try some crack me exercises. Write your own C code and then reverse the compiled versions. Repeat this process while changing compiler options and program logic. How does an “if” statement differs from a “select” in your compiled binary? I suggest you focus on a single architecture initially: x86, x86_64, or ARM. Read the processor manual for whichever one you choose. Book recommendations include:

&gt;Practical Reverse Engineering

&gt;Reversing: Secrets of Reverse Engineering

&gt;The IDA Pro Book

2. ACM style programming: Pick a high-level language. I recommend Python or Ruby. For Python, read Dive into Python (free) and find a pet project you want to participate in. It is worth noting that Metasploit is written in Ruby. Computer science classes dealing with algorithms and data structures will go a long way in this category as well. Look at past programming challenges from CTF and other competitions — do them! Focus on creating a working solution rather than the fastest or most elegant solution, especially if you are just getting started.

3. Web vulnerabilities: There are many web programming technologies out there. The most popular in CTF tend to be PHP and SQL. The php.net site is a fantastic language reference. Just search for any function you are curious about. After PHP, the next most common way to see web challenges presented is with Python or Ruby scripts. Notice the overlap of skills? There is a good book on web vulnerabilities, The Web Application Hacker’s Handbook. Other than that, after learning some of the basic techniques, you might also think about gaining expertise in a few of the more popular free tools available. These are occasionally useful in CTF competitions too. This category also frequently overlaps with cryptography in my experience.

4. Binary exercises: This is my personal favorite. I recommend you go through reverse engineering before jumping into the binary exercises. There are a few common vulnerability types you can learn in isolation: stack overflows, heap overflows, and format string bugs for starters. A lot of this is training your mind to recognize vulnerable patterns. Looking at past vulnerabilities is a great way to pick up these patterns. You should also read through:

&gt;Hacking: The Art of Exploitation

&gt;The Shellcoders Handbook

&gt; The Art of Software Security Assessment

5. Forensics: I suggest you learn how to use the 010 hex editor and don’t be afraid to make absurd, wild, random guesses as to what could be going on in some of these problems.

* [[Digital Evidence and Forensics](http://www.nij.gov/topics/forensics/evidence/digital/Pages/welcome.aspx)
* [Computer Forensics](https://www.us-cert.gov/sites/default/files/publications/forensics.pdf) (PDF)
* [Computer Forensics in a LAN Environment](http://csrc.nist.gov/nissc/1999/proceeding/papers/t16.pdf) (PDF)
* [Digital Forensics](https://www.fbi.gov/news/stories/2011/may/forensics_053111)
* [Forensic Examination of Digital Evidence: A Guide for Law Enforcement](https://www.ncjrs.gov/pdffiles1/nij/199408.pdf) (PDF)

6. Cryptography: Try with the basic terminology and concepts so that when you read about hashing, Wireless cracking or Password Cracking and encryption technologies. There is a very specialized language for cryptography and encryption. Terms like cipher, plaintext, ciphertext, keyspace, block size, and collisions can make studying cryptography a bit confusing and overwhelming to the beginner. I *will* use the term “collision,” as there is no other word in plain English that can replace it.

[ **Hack Like a Pro: Cryptography Basics for the Aspiring Hacker*] (https://null-byte.wonderhowto.com/how-to/hack-like-pro-cryptography-basics-for-aspiring-hacker-0161246/)

Books :

&gt;Applied Cryptography

&gt;Practical Cryptography

&gt;Cryptography I

Source — GOOGLE!</description>
    
    <lastBuildDate>Fri, 21 Feb 2020 11:12:53 +0000</lastBuildDate>
    <category>Beginner Guides</category>
    <atom:link href="https://0x00sec.org/t/how-to-get-started-in-ctf/18978.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How To Get Started in CTF?</title>
        <dc:creator><![CDATA[statusredox]]></dc:creator>
        <description><![CDATA[
            <p>Thank you, that’s a good info for a beginner like me.</p>
          <p><a href="https://0x00sec.org/t/how-to-get-started-in-ctf/18978/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-get-started-in-ctf/18978/7</link>
        <pubDate>Fri, 21 Feb 2020 11:12:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18978-7</guid>
        <source url="https://0x00sec.org/t/how-to-get-started-in-ctf/18978.rss">How To Get Started in CTF?</source>
      </item>
      <item>
        <title>How To Get Started in CTF?</title>
        <dc:creator><![CDATA[Reisen_1943]]></dc:creator>
        <description><![CDATA[
            <p>I suggest newbie to play at picoCTF. Its really helpful at the first<br>
<img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji only-emoji" alt=":stuck_out_tongue:"></p>
          <p><a href="https://0x00sec.org/t/how-to-get-started-in-ctf/18978/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-get-started-in-ctf/18978/6</link>
        <pubDate>Fri, 21 Feb 2020 11:04:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18978-6</guid>
        <source url="https://0x00sec.org/t/how-to-get-started-in-ctf/18978.rss">How To Get Started in CTF?</source>
      </item>
      <item>
        <title>How To Get Started in CTF?</title>
        <dc:creator><![CDATA[statusredox]]></dc:creator>
        <description><![CDATA[
            <p>Great post, thanks for sharing this info with us.</p>
          <p><a href="https://0x00sec.org/t/how-to-get-started-in-ctf/18978/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-get-started-in-ctf/18978/5</link>
        <pubDate>Thu, 13 Feb 2020 12:17:42 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18978-5</guid>
        <source url="https://0x00sec.org/t/how-to-get-started-in-ctf/18978.rss">How To Get Started in CTF?</source>
      </item>
      <item>
        <title>How To Get Started in CTF?</title>
        <dc:creator><![CDATA[Prom3DNS]]></dc:creator>
        <description><![CDATA[
            <p>Thank you so much! Appreciate you listing source to furthur your knowledge!</p>
          <p><a href="https://0x00sec.org/t/how-to-get-started-in-ctf/18978/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-get-started-in-ctf/18978/4</link>
        <pubDate>Fri, 07 Feb 2020 23:51:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18978-4</guid>
        <source url="https://0x00sec.org/t/how-to-get-started-in-ctf/18978.rss">How To Get Started in CTF?</source>
      </item>
      <item>
        <title>How To Get Started in CTF?</title>
        <dc:creator><![CDATA[vict0ni]]></dc:creator>
        <description><![CDATA[
            <p>Here is a <a href="https://captf.com/practice-ctf/">list</a> of online CTF to start. Also <a href="http://ctftime.org">ctftime.org</a> is nice for more competitive live CTF</p>
          <p><a href="https://0x00sec.org/t/how-to-get-started-in-ctf/18978/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-get-started-in-ctf/18978/3</link>
        <pubDate>Thu, 06 Feb 2020 15:25:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18978-3</guid>
        <source url="https://0x00sec.org/t/how-to-get-started-in-ctf/18978.rss">How To Get Started in CTF?</source>
      </item>
      <item>
        <title>How To Get Started in CTF?</title>
        <dc:creator><![CDATA[muffin]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>First, What are CTF Competitions?</p>
</blockquote>
<p>Capture the Flag (CTF) is a special kind of information security competition There are three common types of CTFs: Jeopardy, Attack-Defence and mixed.</p>
<p>Jeopardy-style CTFs have a couple of questions (tasks) in a range of categories. For example, Web, Forensic, Crypto, Binary or something else. A team can gain some points for every solved task. More points for more complicated tasks usually. The next task in a chain can be opened only after some team solves the previous task. Then the game time is over the sum of points shows you a CTF winner.</p>
<p>Attack Defence is another interesting kind of competition. Here every team has own network(or only one host) with vulnerable services. Your team has time for patching your services and developing exploits usually. So, then organizers connect participants of the competition and the wargame starts! You should protect own services for defense points and hack opponents for attack points. Historically this is the first type of CTFs, everybody knows about <a href="http://ctftime.org/ctf/2/" rel="nofollow noopener">DEF CON CTF</a> — something like a World Cup of all other competitions.</p>
<p>Mixed competitions may vary possible formats. It may be something like wargame with special time for task-based elements</p>
<p>CTF competitions generally focus on the following skills: reverse engineering, cryptography, ACM style programming, web vulnerabilities, binary exercises, networking, and forensics. Pick one and focus on a single topic as you get started…</p>
<ol>
<li>Reverse Engineering: I highly suggest that you get a copy of IDA Pro. There is a free version available as well as a discounted student license. Try some crack me exercises. Write your own C code and then reverse the compiled versions. Repeat this process while changing compiler options and program logic. How does an “if” statement differs from a “select” in your compiled binary? I suggest you focus on a single architecture initially: x86, x86_64, or ARM. Read the processor manual for whichever one you choose. Book recommendations include:</li>
</ol>
<blockquote>
<p>Practical Reverse Engineering</p>
</blockquote>
<blockquote>
<p>Reversing: Secrets of Reverse Engineering</p>
</blockquote>
<blockquote>
<p>The IDA Pro Book</p>
</blockquote>
<ol start="2">
<li>
<p>ACM style programming: Pick a high-level language. I recommend Python or Ruby. For Python, read Dive into Python (free) and find a pet project you want to participate in. It is worth noting that Metasploit is written in Ruby. Computer science classes dealing with algorithms and data structures will go a long way in this category as well. Look at past programming challenges from CTF and other competitions — do them! Focus on creating a working solution rather than the fastest or most elegant solution, especially if you are just getting started.</p>
</li>
<li>
<p>Web vulnerabilities: There are many web programming technologies out there. The most popular in CTF tend to be PHP and SQL. The <a href="http://php.net" rel="nofollow noopener">php.net</a> site is a fantastic language reference. Just search for any function you are curious about. After PHP, the next most common way to see web challenges presented is with Python or Ruby scripts. Notice the overlap of skills? There is a good book on web vulnerabilities, The Web Application Hacker’s Handbook. Other than that, after learning some of the basic techniques, you might also think about gaining expertise in a few of the more popular free tools available. These are occasionally useful in CTF competitions too. This category also frequently overlaps with cryptography in my experience.</p>
</li>
<li>
<p>Binary exercises: This is my personal favorite. I recommend you go through reverse engineering before jumping into the binary exercises. There are a few common vulnerability types you can learn in isolation: stack overflows, heap overflows, and format string bugs for starters. A lot of this is training your mind to recognize vulnerable patterns. Looking at past vulnerabilities is a great way to pick up these patterns. You should also read through:</p>
</li>
</ol>
<blockquote>
<p>Hacking: The Art of Exploitation</p>
</blockquote>
<blockquote>
<p>The Shellcoders Handbook</p>
</blockquote>
<blockquote>
<p>The Art of Software Security Assessment</p>
</blockquote>
<ol start="5">
<li>Forensics: I suggest you learn how to use the 010 hex editor and don’t be afraid to make absurd, wild, random guesses as to what could be going on in some of these problems.</li>
</ol>
<ul>
<li>[<a href="http://www.nij.gov/topics/forensics/evidence/digital/Pages/welcome.aspx" rel="nofollow noopener">Digital Evidence and Forensics</a>
</li>
<li>
<a href="https://www.us-cert.gov/sites/default/files/publications/forensics.pdf" rel="nofollow noopener">Computer Forensics</a> (PDF)</li>
<li>
<a href="http://csrc.nist.gov/nissc/1999/proceeding/papers/t16.pdf" rel="nofollow noopener">Computer Forensics in a LAN Environment</a> (PDF)</li>
<li><a href="https://www.fbi.gov/news/stories/2011/may/forensics_053111" rel="nofollow noopener">Digital Forensics</a></li>
<li>
<a href="https://www.ncjrs.gov/pdffiles1/nij/199408.pdf" rel="nofollow noopener">Forensic Examination of Digital Evidence: A Guide for Law Enforcement</a> (PDF)</li>
</ul>
<ol start="6">
<li>Cryptography: Try with the basic terminology and concepts so that when you read about hashing, Wireless cracking or Password Cracking and encryption technologies. There is a very specialized language for cryptography and encryption. Terms like cipher, plaintext, ciphertext, keyspace, block size, and collisions can make studying cryptography a bit confusing and overwhelming to the beginner. I <em>will</em> use the term “collision,” as there is no other word in plain English that can replace it.</li>
</ol>
<p>[ *<em>Hack Like a Pro: Cryptography Basics for the Aspiring Hacker</em>] (<a href="https://null-byte.wonderhowto.com/how-to/hack-like-pro-cryptography-basics-for-aspiring-hacker-0161246/" rel="nofollow noopener">https://null-byte.wonderhowto.com/how-to/hack-like-pro-cryptography-basics-for-aspiring-hacker-0161246/</a>)</p>
<p>Books :</p>
<blockquote>
<p>Applied Cryptography</p>
</blockquote>
<blockquote>
<p>Practical Cryptography</p>
</blockquote>
<blockquote>
<p>Cryptography I</p>
</blockquote>
<p>Source — GOOGLE!</p>
          <p><a href="https://0x00sec.org/t/how-to-get-started-in-ctf/18978/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-get-started-in-ctf/18978/1</link>
        <pubDate>Wed, 05 Feb 2020 18:57:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18978-1</guid>
        <source url="https://0x00sec.org/t/how-to-get-started-in-ctf/18978.rss">How To Get Started in CTF?</source>
      </item>
  </channel>
</rss>
