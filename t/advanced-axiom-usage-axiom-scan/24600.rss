<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Advanced Axiom Usage - axiom-scan</title>
    <link>https://0x00sec.org/t/advanced-axiom-usage-axiom-scan/24600</link>
    <description>Hey 0x00ers! 

You may have heard of the tool I&#39;ve been working on for the past 6 months called axiom, incase you haven&#39;t, I&#39;ll provide you with a quick overview.

[https://github.com/pry0cc/axiom](https://github.com/pry0cc/axiom)

&gt; The dynamic infrastructure framework for anybody! Distribute the workload of many different tools with ease, including nmap, ffuf, masscan, nuclei and many more!

Axiom is a larger infrastructure framework that allows you to quickly spin up and down different hackbox hosts packed with tools for you to perform testing. Axiom instances have tools preinstalled including nmap, ffuf, masscan, nuclei, subfinder, httpx, dnsx and shuffledns (and many more!). You can also spin up lots of hosts at one time by using axiom-fleet. 

Once you have a fleet, you can perform distributed scanning! It&#39;s really up to you how you want to use it.

If you&#39;re new to axiom, I recommend reading the wiki in its entirety - and remember - it&#39;s still in Beta, we&#39;re still really just prototyping :P If you find any issues, please open an issue, it&#39;s probable that we can fix it!

[https://github.com/pry0cc/axiom/wiki](https://github.com/pry0cc/axiom/wiki)

This article is intended for existing users, I will not explain the code too much but provide a basic example of how you can use it. I&#39;d like for current users of axiom to try these out and follow along.

---

# Just axiom-scan

Spin up a fleet with more than 2 instances, you can find out how to do this here: [https://github.com/pry0cc/axiom/wiki/Fleets](https://github.com/pry0cc/axiom/wiki/Fleets). I&#39;ll let the code speak for the rest of a demo for axiom-scan, feel free to follow on with this demo:

### Step 1 - Download Chaos Subdomains

Download subs from here: [https://chaos.projectdiscovery.io/](https://chaos.projectdiscovery.io/#/)

We need to get some data to test with!

```bash
# Pull random 50 root levels from chaos - pretty one liner
for domain in $(curl -s https://raw.githubusercontent.com/projectdiscovery/public-bugbounty-programs/master/chaos-bugbounty-list.json | jq -r &#39;.programs[].domains[]&#39; | shuf | head -n 50); do echo &quot;Pulling $domain&quot;; chaos -silent -key $token -d $domain &gt;&gt; subs.txt; done

wc -l subs.txt
```

### Step 2 - Merge Subdomains together

```bash
cd ~/Downloads

mkdir demo
mv chaos* demo
cd demo

# Unzip
unzip chaos*

# Show files
ls

find . -name &#39;*.txt&#39; -exec cat {} \; &gt; allsubs.txt
```

### Step 3 - Spin up a fleet (may already be prepared)

```bash
axiom-fleet fire -i=15
axiom-select &#39;fire*&#39;
axiom-ls
```

### Step 4 - Resolve Subdomains

We can resolve subdomains at mass using `dnsx`

```bash
Code - Bash

axiom-scan allsubs.txt -m dnsx -resp -o resolvedfqdns.txt # simple

add resolvers
```

### Step 5  - Nmap IP&#39;s

We can do some portscanning with nmap in a distributed axiom-scan.

### Ports

`80,81,443,591,2082,2087,2095,2096,3000,8000,8001,8008,8080,8083,8443,8834,8888`

&gt; Note ðŸ§¨ nmapx doesn&#39;t work with old versions of interlace

```bash
# Experimental
axiom-scan ips.txt -m nmapx -p80,81,443,591,2082,2087,2095,2096,3000,8000,8001,8008,8080,8083,8443,8834,8888 -oX chaos-scan.xml
axiom-scan ips.txt -m nmapx --top-ports 5 -sV -oX chaos-scan.xml

# Tried and true (the old way, slower)
axiom-scan ips.txt -m nmap -p80,81,443,591,2082,2087,2095,2096,3000,8000,8001,8008,8080,8083,8443,8834,8888 -oX chaos-scan.xml
```

### Step 6 - Extracting hosts &amp; IP&#39;s from Nmap XML output

Essentially convert nmap.xml â†’ host:ip notation. 

```bash
&gt; ports.txt
wget https://gist.githubusercontent.com/pry0cc/dd2e7955d0a0222eb6c09cb283a6d614/raw/3c7bd4c20bb7649a944a36507073d9c9ab4100d8/ports.py
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
python2 get-pip.py
python2 -m pip install python-libnmap
python2 ports.py chaos-scan.xml &gt; ports.txt

head -n 100 ports.txt
wc -l ports.txt
```

&gt; READ THE HTML OUTPUT! It looks totally cool.. ðŸ”¥

Axiom-scan xml nmap scans auto generate html output too!

(You must have xsltproc installed :))

```bash
xdg-open chaos-scan.xml.html
```

### Step 7 - Scanning port combos with httpx

Using the file we created earlier.

```bash
axiom-scan ports.txt -m httpx -o http.txt
```

### Step 8 - Gowitness

&gt; Use a shortened sample for gowitness just because it takes foreverrrr otherwise!

```bash
cat http.txt | shuf | head -n 150
cat http.txt | shuf | head -n 150 &gt; sample-http.txt

axiom-scan sample-http.txt -m gowitness -o screenshots
```

### Step 9 - Run httpx on subs

Convert ip:port notation into [http://ip:port/](http://ip:port/) notation for using our other tools.

```bash
cat allsubs.txt | shuf | head -n 500 
cat allsubs.txt | shuf | head -n 500 &gt; subs.txt

axiom-scan subs.txt -m httpx -o http.txt -title -follow-redirects -ip -content-length -cname -content-type -status-code -vhost
```

# Axiom-proxy

Start a proxy round-robin listener against all our nodes in our fleet.

```bash
axiom-proxy &#39;fire*&#39; --single
```

&gt; Run curl over and over again  to show it&#39;s different ips

&gt; This proxy can be used in burp :)

```bash
curl --socks5-hostname 127.0.0.1:1337 https://ipinfo.io | jq
curl --socks5-hostname 127.0.0.1:1337 https://ipinfo.io | jq -c
curl --socks5-hostname 127.0.0.1:1337 https://ipinfo.io | jq -c
curl --socks5-hostname 127.0.0.1:1337 https://ipinfo.io | jq -c
curl --socks5-hostname 127.0.0.1:1337 https://ipinfo.io | jq -c
curl --socks5-hostname 127.0.0.1:1337 https://ipinfo.io | jq -c
```

# Axiom-exec

&gt; Get a list of all the hosts

```bash
axiom-exec &#39;curl -s ifconfig.me&#39; &#39;fire*&#39;
```

# Axiom-rm

Finally, we can delete our fleet so it doesn&#39;t cost us any $$$. Easy as that!

```bash
axiom-rm &#39;fire*&#39; -f
```

# Conclusion

Today we&#39;ve demonstrated a few ways of executing distributed scans using axiom-scan, I hope this was informative! I hope you enjoy axiom! &lt;3 Enjoy 0x00ers!</description>
    
    <lastBuildDate>Mon, 18 Jan 2021 19:17:54 +0000</lastBuildDate>
    <category>Reconnaissance</category>
    <atom:link href="https://0x00sec.org/t/advanced-axiom-usage-axiom-scan/24600.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Advanced Axiom Usage - axiom-scan</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/advanced-axiom-usage-axiom-scan/24600/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/advanced-axiom-usage-axiom-scan/24600/4</link>
        <pubDate>Tue, 18 May 2021 09:17:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24600-4</guid>
        <source url="https://0x00sec.org/t/advanced-axiom-usage-axiom-scan/24600.rss">Advanced Axiom Usage - axiom-scan</source>
      </item>
      <item>
        <title>Advanced Axiom Usage - axiom-scan</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Iâ€™d suggest installing it inside tmux on a digitalocean droplet - then you can just SSH in. Thatâ€™s what I do and I control it from my iPhone too.</p>
          <p><a href="https://0x00sec.org/t/advanced-axiom-usage-axiom-scan/24600/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/advanced-axiom-usage-axiom-scan/24600/3</link>
        <pubDate>Mon, 18 Jan 2021 19:17:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24600-3</guid>
        <source url="https://0x00sec.org/t/advanced-axiom-usage-axiom-scan/24600.rss">Advanced Axiom Usage - axiom-scan</source>
      </item>
      <item>
        <title>Advanced Axiom Usage - axiom-scan</title>
        <dc:creator><![CDATA[CQR.ADS]]></dc:creator>
        <description><![CDATA[
            <p>Did you planned support and testing this app for Android 5.0.0+ with Termux?</p>
          <p><a href="https://0x00sec.org/t/advanced-axiom-usage-axiom-scan/24600/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/advanced-axiom-usage-axiom-scan/24600/2</link>
        <pubDate>Mon, 18 Jan 2021 17:01:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24600-2</guid>
        <source url="https://0x00sec.org/t/advanced-axiom-usage-axiom-scan/24600.rss">Advanced Axiom Usage - axiom-scan</source>
      </item>
      <item>
        <title>Advanced Axiom Usage - axiom-scan</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Hey 0x00ers!</p>
<p>You may have heard of the tool Iâ€™ve been working on for the past 6 months called axiom, incase you havenâ€™t, Iâ€™ll provide you with a quick overview.</p>
<p><a href="https://github.com/pry0cc/axiom">https://github.com/pry0cc/axiom</a></p>
<blockquote>
<p>The dynamic infrastructure framework for anybody! Distribute the workload of many different tools with ease, including nmap, ffuf, masscan, nuclei and many more!</p>
</blockquote>
<p>Axiom is a larger infrastructure framework that allows you to quickly spin up and down different hackbox hosts packed with tools for you to perform testing. Axiom instances have tools preinstalled including nmap, ffuf, masscan, nuclei, subfinder, httpx, dnsx and shuffledns (and many more!). You can also spin up lots of hosts at one time by using axiom-fleet.</p>
<p>Once you have a fleet, you can perform distributed scanning! Itâ€™s really up to you how you want to use it.</p>
<p>If youâ€™re new to axiom, I recommend reading the wiki in its entirety - and remember - itâ€™s still in Beta, weâ€™re still really just prototyping <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> If you find any issues, please open an issue, itâ€™s probable that we can fix it!</p>
<p><a href="https://github.com/pry0cc/axiom/wiki">https://github.com/pry0cc/axiom/wiki</a></p>
<p>This article is intended for existing users, I will not explain the code too much but provide a basic example of how you can use it. Iâ€™d like for current users of axiom to try these out and follow along.</p>
<hr>
<h1>Just axiom-scan</h1>
<p>Spin up a fleet with more than 2 instances, you can find out how to do this here: <a href="https://github.com/pry0cc/axiom/wiki/Fleets">https://github.com/pry0cc/axiom/wiki/Fleets</a>. Iâ€™ll let the code speak for the rest of a demo for axiom-scan, feel free to follow on with this demo:</p>
<h3>Step 1 - Download Chaos Subdomains</h3>
<p>Download subs from here: <a href="https://chaos.projectdiscovery.io/#/">https://chaos.projectdiscovery.io/</a></p>
<p>We need to get some data to test with!</p>
<pre><code class="lang-bash"># Pull random 50 root levels from chaos - pretty one liner
for domain in $(curl -s https://raw.githubusercontent.com/projectdiscovery/public-bugbounty-programs/master/chaos-bugbounty-list.json | jq -r '.programs[].domains[]' | shuf | head -n 50); do echo "Pulling $domain"; chaos -silent -key $token -d $domain &gt;&gt; subs.txt; done

wc -l subs.txt
</code></pre>
<h3>Step 2 - Merge Subdomains together</h3>
<pre><code class="lang-bash">cd ~/Downloads

mkdir demo
mv chaos* demo
cd demo

# Unzip
unzip chaos*

# Show files
ls

find . -name '*.txt' -exec cat {} \; &gt; allsubs.txt
</code></pre>
<h3>Step 3 - Spin up a fleet (may already be prepared)</h3>
<pre><code class="lang-bash">axiom-fleet fire -i=15
axiom-select 'fire*'
axiom-ls
</code></pre>
<h3>Step 4 - Resolve Subdomains</h3>
<p>We can resolve subdomains at mass using <code>dnsx</code></p>
<pre><code class="lang-bash">Code - Bash

axiom-scan allsubs.txt -m dnsx -resp -o resolvedfqdns.txt # simple

add resolvers
</code></pre>
<h3>Step 5  - Nmap IPâ€™s</h3>
<p>We can do some portscanning with nmap in a distributed axiom-scan.</p>
<h3>Ports</h3>
<p><code>80,81,443,591,2082,2087,2095,2096,3000,8000,8001,8008,8080,8083,8443,8834,8888</code></p>
<blockquote>
<p>Note <img src="https://0x00sec.org/images/emoji/twitter/firecracker.png?v=9" title=":firecracker:" class="emoji" alt=":firecracker:"> nmapx doesnâ€™t work with old versions of interlace</p>
</blockquote>
<pre><code class="lang-bash"># Experimental
axiom-scan ips.txt -m nmapx -p80,81,443,591,2082,2087,2095,2096,3000,8000,8001,8008,8080,8083,8443,8834,8888 -oX chaos-scan.xml
axiom-scan ips.txt -m nmapx --top-ports 5 -sV -oX chaos-scan.xml

# Tried and true (the old way, slower)
axiom-scan ips.txt -m nmap -p80,81,443,591,2082,2087,2095,2096,3000,8000,8001,8008,8080,8083,8443,8834,8888 -oX chaos-scan.xml
</code></pre>
<h3>Step 6 - Extracting hosts &amp; IPâ€™s from Nmap XML output</h3>
<p>Essentially convert nmap.xml â†’ host:ip notation.</p>
<pre><code class="lang-bash">&gt; ports.txt
wget https://gist.githubusercontent.com/pry0cc/dd2e7955d0a0222eb6c09cb283a6d614/raw/3c7bd4c20bb7649a944a36507073d9c9ab4100d8/ports.py
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
python2 get-pip.py
python2 -m pip install python-libnmap
python2 ports.py chaos-scan.xml &gt; ports.txt

head -n 100 ports.txt
wc -l ports.txt
</code></pre>
<blockquote>
<p>READ THE HTML OUTPUT! It looks totally coolâ€¦ <img src="https://0x00sec.org/images/emoji/twitter/fire.png?v=9" title=":fire:" class="emoji" alt=":fire:"></p>
</blockquote>
<p>Axiom-scan xml nmap scans auto generate html output too!</p>
<p>(You must have xsltproc installed :))</p>
<pre><code class="lang-bash">xdg-open chaos-scan.xml.html
</code></pre>
<h3>Step 7 - Scanning port combos with httpx</h3>
<p>Using the file we created earlier.</p>
<pre><code class="lang-bash">axiom-scan ports.txt -m httpx -o http.txt
</code></pre>
<h3>Step 8 - Gowitness</h3>
<blockquote>
<p>Use a shortened sample for gowitness just because it takes foreverrrr otherwise!</p>
</blockquote>
<pre><code class="lang-bash">cat http.txt | shuf | head -n 150
cat http.txt | shuf | head -n 150 &gt; sample-http.txt

axiom-scan sample-http.txt -m gowitness -o screenshots
</code></pre>
<h3>Step 9 - Run httpx on subs</h3>
<p>Convert ip:port notation into <a href="http://ip:port/" rel="noopener nofollow ugc">http://ip:port/</a> notation for using our other tools.</p>
<pre><code class="lang-bash">cat allsubs.txt | shuf | head -n 500 
cat allsubs.txt | shuf | head -n 500 &gt; subs.txt

axiom-scan subs.txt -m httpx -o http.txt -title -follow-redirects -ip -content-length -cname -content-type -status-code -vhost
</code></pre>
<h1>Axiom-proxy</h1>
<p>Start a proxy round-robin listener against all our nodes in our fleet.</p>
<pre><code class="lang-bash">axiom-proxy 'fire*' --single
</code></pre>
<blockquote>
<p>Run curl over and over again  to show itâ€™s different ips</p>
</blockquote>
<blockquote>
<p>This proxy can be used in burp <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
</blockquote>
<pre><code class="lang-bash">curl --socks5-hostname 127.0.0.1:1337 https://ipinfo.io | jq
curl --socks5-hostname 127.0.0.1:1337 https://ipinfo.io | jq -c
curl --socks5-hostname 127.0.0.1:1337 https://ipinfo.io | jq -c
curl --socks5-hostname 127.0.0.1:1337 https://ipinfo.io | jq -c
curl --socks5-hostname 127.0.0.1:1337 https://ipinfo.io | jq -c
curl --socks5-hostname 127.0.0.1:1337 https://ipinfo.io | jq -c
</code></pre>
<h1>Axiom-exec</h1>
<blockquote>
<p>Get a list of all the hosts</p>
</blockquote>
<pre><code class="lang-bash">axiom-exec 'curl -s ifconfig.me' 'fire*'
</code></pre>
<h1>Axiom-rm</h1>
<p>Finally, we can delete our fleet so it doesnâ€™t cost us any $$$. Easy as that!</p>
<pre><code class="lang-bash">axiom-rm 'fire*' -f
</code></pre>
<h1>Conclusion</h1>
<p>Today weâ€™ve demonstrated a few ways of executing distributed scans using axiom-scan, I hope this was informative! I hope you enjoy axiom! &lt;3 Enjoy 0x00ers!</p>
          <p><a href="https://0x00sec.org/t/advanced-axiom-usage-axiom-scan/24600/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/advanced-axiom-usage-axiom-scan/24600/1</link>
        <pubDate>Sat, 16 Jan 2021 17:17:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24600-1</guid>
        <source url="https://0x00sec.org/t/advanced-axiom-usage-axiom-scan/24600.rss">Advanced Axiom Usage - axiom-scan</source>
      </item>
  </channel>
</rss>
