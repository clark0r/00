<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Self copying at the running state</title>
    <link>https://0x00sec.org/t/self-copying-at-the-running-state/13827</link>
    <description>I am trying to create a self-copy or move while the program is running , but however I dont have idea how to achieve this without getting the ``` access denied because of running state ```  or using ``` MoveFileEx(MOVEFILE_DELAY_UNTIL_REBOOT) ``` which it will act after the reboot.

```c
int _tmain(int argc, _TCHAR* argv[]){
	WCHAR szFilepath[MAX_PATH];
	std::wstring wFilepath;
	std::wstring wFilename;
	std::wstring wDestpath;

	/* Get the current executable&#39;s full path */
	wFilepath = std::wstring(szFilepath, GetModuleFileNameW(NULL, szFilepath, MAX_PATH));
	std::wcout &lt;&lt; L&quot;filepath: &quot; &lt;&lt; wFilepath &lt;&lt; std::endl;

	/* Extract just the name */
	wFilename = wFilepath.substr(wFilepath.find_last_of(L&quot;\\/&quot;) + 1);
	std::wcout &lt;&lt; L&quot;filename: &quot; &lt;&lt; wFilename &lt;&lt; std::endl;

	/* Set the destination folder path and file name */
	wDestpath = L&quot;D:\\&quot; + wFilename;
	std::wcout &lt;&lt; L&quot;dest path: &quot; &lt;&lt; wDestpath &lt;&lt; std::endl;

	// copys the file of your &#39;.exe&#39;

	if (!CopyFileW(wFilepath.c_str(), wDestpath.c_str(), FALSE)) {
		std::wcout &lt;&lt; L&quot;couldnt copy the file&quot;;
	}
	else {
		std::wcout &lt;&lt; L&quot;copied&quot;;
	}
	return 0;
}
```</description>
    
    <lastBuildDate>Sat, 08 Jun 2019 22:44:31 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://0x00sec.org/t/self-copying-at-the-running-state/13827.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Self copying at the running state</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/self-copying-at-the-running-state/13827/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-copying-at-the-running-state/13827/10</link>
        <pubDate>Fri, 21 Jun 2019 01:34:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13827-10</guid>
        <source url="https://0x00sec.org/t/self-copying-at-the-running-state/13827.rss">Self copying at the running state</source>
      </item>
      <item>
        <title>Self copying at the running state</title>
        <dc:creator><![CDATA[larkwiot]]></dc:creator>
        <description><![CDATA[
            <p>Or better, detect an external device connected event and do stuff based on that. Async ftw</p>
          <p><a href="https://0x00sec.org/t/self-copying-at-the-running-state/13827/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-copying-at-the-running-state/13827/9</link>
        <pubDate>Sat, 08 Jun 2019 22:44:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13827-9</guid>
        <source url="https://0x00sec.org/t/self-copying-at-the-running-state/13827.rss">Self copying at the running state</source>
      </item>
      <item>
        <title>Self copying at the running state</title>
        <dc:creator><![CDATA[cuckkoo]]></dc:creator>
        <description><![CDATA[
            <p>If your target is to spread malware then you could try run a function continuously which looks for the device to spread or watever youre trying to do and keep the rest of it as payload.<br>
Its is a little more on the heavier side but gets the work done!!</p>
          <p><a href="https://0x00sec.org/t/self-copying-at-the-running-state/13827/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-copying-at-the-running-state/13827/8</link>
        <pubDate>Thu, 06 Jun 2019 10:21:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13827-8</guid>
        <source url="https://0x00sec.org/t/self-copying-at-the-running-state/13827.rss">Self copying at the running state</source>
      </item>
      <item>
        <title>Self copying at the running state</title>
        <dc:creator><![CDATA[KR_Nails]]></dc:creator>
        <description><![CDATA[
            <p>I see. this piece of code . I am using a for a malware research programming, but I dont know if malware writter uses</p>
<p>copy itself. I mean with I download <code>malware</code> then this one search for network drives and copy to <code>D:</code> and <code>K:</code> keeping the orignal file where was setup as storage . lets guess <code>APPDATA</code> or just encrypt all drives including local , and use x exploit to jump to another victim</p>
          <p><a href="https://0x00sec.org/t/self-copying-at-the-running-state/13827/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-copying-at-the-running-state/13827/7</link>
        <pubDate>Wed, 22 May 2019 21:57:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13827-7</guid>
        <source url="https://0x00sec.org/t/self-copying-at-the-running-state/13827.rss">Self copying at the running state</source>
      </item>
      <item>
        <title>Self copying at the running state</title>
        <dc:creator><![CDATA[larkwiot]]></dc:creator>
        <description><![CDATA[
            <p>I am not much of a Windows programmer, unfortunately. You can look at the MSDN documentation and see if there is a either a version of or a parameter in CreateProcess that might be of use to you. I suggest writing a new executable file somewhere with code to delete your current executable,then using CreateProcess or some variant of it to launch that executable. The other executable should wait 1 or 2 seconds then delete your current file and move it somewhere else. That wait would be the time for your current process to exit after starting the other one.</p>
          <p><a href="https://0x00sec.org/t/self-copying-at-the-running-state/13827/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-copying-at-the-running-state/13827/6</link>
        <pubDate>Wed, 22 May 2019 21:44:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13827-6</guid>
        <source url="https://0x00sec.org/t/self-copying-at-the-running-state/13827.rss">Self copying at the running state</source>
      </item>
      <item>
        <title>Self copying at the running state</title>
        <dc:creator><![CDATA[KR_Nails]]></dc:creator>
        <description><![CDATA[
            <p>I got the last one tactic , but I want a bit more stealthy tecnique. how can I do it the first one at a code level?</p>
          <p><a href="https://0x00sec.org/t/self-copying-at-the-running-state/13827/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-copying-at-the-running-state/13827/5</link>
        <pubDate>Wed, 22 May 2019 21:20:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13827-5</guid>
        <source url="https://0x00sec.org/t/self-copying-at-the-running-state/13827.rss">Self copying at the running state</source>
      </item>
      <item>
        <title>Self copying at the running state</title>
        <dc:creator><![CDATA[larkwiot]]></dc:creator>
        <description><![CDATA[
            <p>Can you spawn another process, end your current one, and have the other process move the file? Or could you just copy yourself from memory onto the filesystem in another location?</p>
          <p><a href="https://0x00sec.org/t/self-copying-at-the-running-state/13827/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-copying-at-the-running-state/13827/4</link>
        <pubDate>Wed, 22 May 2019 21:10:15 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13827-4</guid>
        <source url="https://0x00sec.org/t/self-copying-at-the-running-state/13827.rss">Self copying at the running state</source>
      </item>
      <item>
        <title>Self copying at the running state</title>
        <dc:creator><![CDATA[KR_Nails]]></dc:creator>
        <description><![CDATA[
            <p>at the code level how can I do it? I am so confused</p>
          <p><a href="https://0x00sec.org/t/self-copying-at-the-running-state/13827/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-copying-at-the-running-state/13827/3</link>
        <pubDate>Wed, 22 May 2019 17:36:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13827-3</guid>
        <source url="https://0x00sec.org/t/self-copying-at-the-running-state/13827.rss">Self copying at the running state</source>
      </item>
      <item>
        <title>Self copying at the running state</title>
        <dc:creator><![CDATA[Ph03n1x_Crus4d3r]]></dc:creator>
        <description><![CDATA[
            <p>Could code it to kill program for a split second in order to replicate it and re-engage it. Or suspend it.</p>
          <p><a href="https://0x00sec.org/t/self-copying-at-the-running-state/13827/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-copying-at-the-running-state/13827/2</link>
        <pubDate>Wed, 22 May 2019 14:48:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13827-2</guid>
        <source url="https://0x00sec.org/t/self-copying-at-the-running-state/13827.rss">Self copying at the running state</source>
      </item>
      <item>
        <title>Self copying at the running state</title>
        <dc:creator><![CDATA[KR_Nails]]></dc:creator>
        <description><![CDATA[
            <p>I am trying to create a self-copy or move while the program is running , but however I dont have idea how to achieve this without getting the <code>access denied because of running state</code>  or using <code>MoveFileEx(MOVEFILE_DELAY_UNTIL_REBOOT)</code> which it will act after the reboot.</p>
<pre><code class="lang-auto">int _tmain(int argc, _TCHAR* argv[]){
	WCHAR szFilepath[MAX_PATH];
	std::wstring wFilepath;
	std::wstring wFilename;
	std::wstring wDestpath;

	/* Get the current executable's full path */
	wFilepath = std::wstring(szFilepath, GetModuleFileNameW(NULL, szFilepath, MAX_PATH));
	std::wcout &lt;&lt; L"filepath: " &lt;&lt; wFilepath &lt;&lt; std::endl;

	/* Extract just the name */
	wFilename = wFilepath.substr(wFilepath.find_last_of(L"\\/") + 1);
	std::wcout &lt;&lt; L"filename: " &lt;&lt; wFilename &lt;&lt; std::endl;

	/* Set the destination folder path and file name */
	wDestpath = L"D:\\" + wFilename;
	std::wcout &lt;&lt; L"dest path: " &lt;&lt; wDestpath &lt;&lt; std::endl;

	// copys the file of your '.exe'

	if (!CopyFileW(wFilepath.c_str(), wDestpath.c_str(), FALSE)) {
		std::wcout &lt;&lt; L"couldnt copy the file";
	}
	else {
		std::wcout &lt;&lt; L"copied";
	}
	return 0;
}
</code></pre>
          <p><a href="https://0x00sec.org/t/self-copying-at-the-running-state/13827/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-copying-at-the-running-state/13827/1</link>
        <pubDate>Wed, 22 May 2019 01:34:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13827-1</guid>
        <source url="https://0x00sec.org/t/self-copying-at-the-running-state/13827.rss">Self copying at the running state</source>
      </item>
  </channel>
</rss>
