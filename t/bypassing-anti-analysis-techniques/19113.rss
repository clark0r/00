<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Bypassing Anti Analysis Techniques</title>
    <link>https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113</link>
    <description>I&#39;m currently trying to reverse windows x86 malware to identify small sections of code of the malware that make it malicious. I&#39;m using immunity debugger and running into issues.

As i&#39;m stepping through the code I can see certain win32 api calls in the code, while there is a string like `c73rfg.exe` in a register. Which makes me think i&#39;m about to see something happen, however I then run into what seems like an infinite loop and never reaching those win32 calls. I set breakpoints just before the win32 calls, however when running it instead exits execution. I&#39;m quite confused and have a few questions

1. How does malware actually run differently under analysis? I.e. does the binary actually change or does it just take a different branch of execution when running?

2. What can I do to make it behave normally under analysis?

3. Do Malware authors write these anti analysis techniques into the malware themself or is there a tool to optimize the code?

thank you</description>
    
    <lastBuildDate>Sat, 15 Feb 2020 11:53:43 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Bypassing Anti Analysis Techniques</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed 3 days after the last reply. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113/7</link>
        <pubDate>Tue, 18 Feb 2020 11:53:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19113-7</guid>
        <source url="https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113.rss">Bypassing Anti Analysis Techniques</source>
      </item>
      <item>
        <title>Bypassing Anti Analysis Techniques</title>
        <dc:creator><![CDATA[randomer]]></dc:creator>
        <description><![CDATA[
            <p>hi,<br>
if you’d like to learn more about anti reverse-engineering techniques, there are several good resources under the AntiRE topic.<br>
I first learned about these in “Anti Reverse Engineering for Linux” <a href="https://leanpub.com/anti-reverse-engineering-linux" rel="nofollow noopener">Free eBook</a> - though it is written for linux, many techniques can be adopted under windows.<br>
Additional there is the <a href="https://bitbucket.org/fkie_cd_dare/simplifire.antire/src/master/" rel="nofollow noopener">AntiRE binary collection</a> that might help understand different techniques under lab conditions.</p>
<p>I hope these might help you <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113/6</link>
        <pubDate>Sat, 15 Feb 2020 11:53:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19113-6</guid>
        <source url="https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113.rss">Bypassing Anti Analysis Techniques</source>
      </item>
      <item>
        <title>Bypassing Anti Analysis Techniques</title>
        <dc:creator><![CDATA[kingler]]></dc:creator>
        <description><![CDATA[
            <p>Thanks this helped a lot! <img src="https://0x00sec.org/images/emoji/twitter/grinning.png?v=9" title=":grinning:" class="emoji" alt=":grinning:"></p>
          <p><a href="https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113/5</link>
        <pubDate>Thu, 13 Feb 2020 23:14:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19113-5</guid>
        <source url="https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113.rss">Bypassing Anti Analysis Techniques</source>
      </item>
      <item>
        <title>Bypassing Anti Analysis Techniques</title>
        <dc:creator><![CDATA[Danus]]></dc:creator>
        <description><![CDATA[
            <p>Jarvis gave a very detailed answer.</p>
<p>I would like to add that in most cases you will never directly encounter calls to APIs in obfuscated malware samples, and even if you would it’s not worth the time too look for them.</p>
<p>I would suggest to set direct breakpoints on these APIs and to view the call stack to see what exactly is going on and where are these calls being made from(In x64dbg its done by executing bp/h &lt;API_FULL_NAME&gt; in the command prompt under the debugging view).</p>
<p>Setting memory breakpoints on all the APIs you see as not always a good idea, you should be very goal oriented when performing unpacking otherwise you’ll just get lost.</p>
<p>If you have no experience with malware unpacking I suggest you do two things:</p>
<ol>
<li>
<p>Subscribe to <a href="https://www.youtube.com/channel/UC--DwaiMV-jtO-6EvmKOnqg">OALabs</a> on YouTube, most of the knowledge I gained in anti analysis was from that channel.</p>
</li>
<li>
<p>Get yourself a copy of Practical Malware Analysis and read chapters 15-18.</p>
</li>
</ol>
<p>Hope I helped, feel free to DM me or find me on Discord <img src="https://0x00sec.org/images/emoji/twitter/nerd_face.png?v=9" title=":nerd_face:" class="emoji" alt=":nerd_face:"></p>
          <p><a href="https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113/4</link>
        <pubDate>Tue, 11 Feb 2020 16:00:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19113-4</guid>
        <source url="https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113.rss">Bypassing Anti Analysis Techniques</source>
      </item>
      <item>
        <title>Bypassing Anti Analysis Techniques</title>
        <dc:creator><![CDATA[Jarvis]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="kingler" data-post="1" data-topic="19113">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/letter_avatar_proxy/v4/letter/k/ebca7d/40.png" class="avatar"> kingler:</div>
<blockquote>
<p>How does malware actually run differently under analysis? I.e. does the binary actually change or does it just take a different branch of execution when running?</p>
</blockquote>
</aside>
<p>What’s the difference between normal Execution and a binary “under analysis” ?</p>
<p>One has a debugger attached to it, the other doesnt <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>One (Windows-)function being <strong>isDebuggerPresent</strong>.</p>
<pre><code> if(IsDebuggerPresent())
 {
   TerminateProcess(GetCurrentProcess(), 1);
 }
</code></pre>
<p><strong>IsDebuggerPresent</strong> reads the <strong>BeingDebugged</strong> byte from the PEB, so that could be another check.</p>
<p>These are just 2 possible checks that happen on Windows, there’s a lot more, and you can find some pretty good resources here too.</p>
<p><a href="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-3/18943">Like this one for example.</a></p>
<aside class="quote no-group" data-username="kingler" data-post="1" data-topic="19113">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/letter_avatar_proxy/v4/letter/k/ebca7d/40.png" class="avatar"> kingler:</div>
<blockquote>
<p>What can I do to make it behave normally under analysis?</p>
</blockquote>
</aside>
<p>Well, it “knows” you attached a debugger, so you’re gonna have to tell it there’s no debugger there!<br>
Lucky for you, a lot of debuggers have scripts to auto-hide your debugger against a lot of different features.</p>
<p>One such plugin, is <a href="https://github.com/x64dbg/ScyllaHide" rel="nofollow noopener">ScyllaHide</a>.</p>
<aside class="quote no-group" data-username="kingler" data-post="1" data-topic="19113">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/letter_avatar_proxy/v4/letter/k/ebca7d/40.png" class="avatar"> kingler:</div>
<blockquote>
<p>Do Malware authors write these anti analysis techniques into the malware themself or is there a tool to optimize the code?</p>
</blockquote>
</aside>
<p>Well, I suppose a lot of people just copy pasta SO code, also, implementing something like “IsdebuggerPresent” is not that hard as you can see above.</p>
<p>Of course, the amount of effort you put into obfuscation and anti-debugging / anti-vm / … will result in higher effort on the other side (to reverse it back).</p>
<p>I’m not aware of any tools that automatically implement advanced anti-debugging, but this is of course without consideration of packers and crypters.</p>
          <p><a href="https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113/3</link>
        <pubDate>Tue, 11 Feb 2020 15:38:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19113-3</guid>
        <source url="https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113.rss">Bypassing Anti Analysis Techniques</source>
      </item>
      <item>
        <title>Bypassing Anti Analysis Techniques</title>
        <dc:creator><![CDATA[fr0nk]]></dc:creator>
        <description><![CDATA[
            <p>Interesting question, I’d like to know as well.</p>
          <p><a href="https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113/2</link>
        <pubDate>Tue, 11 Feb 2020 09:10:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19113-2</guid>
        <source url="https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113.rss">Bypassing Anti Analysis Techniques</source>
      </item>
      <item>
        <title>Bypassing Anti Analysis Techniques</title>
        <dc:creator><![CDATA[kingler]]></dc:creator>
        <description><![CDATA[
            <p>I’m currently trying to reverse windows x86 malware to identify small sections of code of the malware that make it malicious. I’m using immunity debugger and running into issues.</p>
<p>As i’m stepping through the code I can see certain win32 api calls in the code, while there is a string like <code>c73rfg.exe</code> in a register. Which makes me think i’m about to see something happen, however I then run into what seems like an infinite loop and never reaching those win32 calls. I set breakpoints just before the win32 calls, however when running it instead exits execution. I’m quite confused and have a few questions</p>
<ol>
<li>
<p>How does malware actually run differently under analysis? I.e. does the binary actually change or does it just take a different branch of execution when running?</p>
</li>
<li>
<p>What can I do to make it behave normally under analysis?</p>
</li>
<li>
<p>Do Malware authors write these anti analysis techniques into the malware themself or is there a tool to optimize the code?</p>
</li>
</ol>
<p>thank you</p>
          <p><a href="https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113/1</link>
        <pubDate>Mon, 10 Feb 2020 22:45:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19113-1</guid>
        <source url="https://0x00sec.org/t/bypassing-anti-analysis-techniques/19113.rss">Bypassing Anti Analysis Techniques</source>
      </item>
  </channel>
</rss>
