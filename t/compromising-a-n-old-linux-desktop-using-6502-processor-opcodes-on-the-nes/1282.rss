<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Compromising a(n OLD) Linux desktop using... 6502 processor opcodes on the NES?!</title>
    <link>https://0x00sec.org/t/compromising-a-n-old-linux-desktop-using-6502-processor-opcodes-on-the-nes/1282</link>
    <description>[This](https://scarybeastsecurity.blogspot.com.au/2016/11/0day-exploit-compromising-linux-desktop.html) is a very thorough write up of an **old** but previously unknown 0day exploit for Ubuntu 12.04.5, leveraging libgstnsf.so in gstreamer 0.10.x to bypass 64-bit ASLR and DEP.  

Essentially that version of gstreamer uses 6502 assembly code to emulate the NES&#39; CPU and sound hardware in realtime, which due to its lack of bounds checking can be tricked into performing an out of bounds read that will bypass ASLR and execute an arbitrary binary.  The exploit can also be run on out of date versions of totem, rhythmbox, and nautilus, and goes to show how Ubuntu lags behind in using ASLR on binaries, as the equivalent versions in Fedora were not affected.  

While much of the granular detail with regards to the 6502 assembly is lost on me (and I presume most hackers under the age of 35...) I found the methodological approach and detailed description to be fascinating and thought others here would appreciate as well.</description>
    
    <lastBuildDate>Wed, 16 Nov 2016 11:03:26 +0000</lastBuildDate>
    <category>Exploit Development</category>
    <atom:link href="https://0x00sec.org/t/compromising-a-n-old-linux-desktop-using-6502-processor-opcodes-on-the-nes/1282.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Compromising a(n OLD) Linux desktop using... 6502 processor opcodes on the NES?!</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Nice share! This is pretty scary <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue_winking_eye.png?v=9" title=":stuck_out_tongue_winking_eye:" class="emoji" alt=":stuck_out_tongue_winking_eye:"> I wonder how many there are out there that we don’t know about.</p>
          <p><a href="https://0x00sec.org/t/compromising-a-n-old-linux-desktop-using-6502-processor-opcodes-on-the-nes/1282/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/compromising-a-n-old-linux-desktop-using-6502-processor-opcodes-on-the-nes/1282/2</link>
        <pubDate>Wed, 16 Nov 2016 11:03:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1282-2</guid>
        <source url="https://0x00sec.org/t/compromising-a-n-old-linux-desktop-using-6502-processor-opcodes-on-the-nes/1282.rss">Compromising a(n OLD) Linux desktop using... 6502 processor opcodes on the NES?!</source>
      </item>
      <item>
        <title>Compromising a(n OLD) Linux desktop using... 6502 processor opcodes on the NES?!</title>
        <dc:creator><![CDATA[ntropi]]></dc:creator>
        <description><![CDATA[
            <p><a href="https://scarybeastsecurity.blogspot.com.au/2016/11/0day-exploit-compromising-linux-desktop.html" rel="nofollow noopener">This</a> is a very thorough write up of an <strong>old</strong> but previously unknown 0day exploit for Ubuntu 12.04.5, leveraging libgstnsf.so in gstreamer 0.10.x to bypass 64-bit ASLR and DEP.</p>
<p>Essentially that version of gstreamer uses 6502 assembly code to emulate the NES’ CPU and sound hardware in realtime, which due to its lack of bounds checking can be tricked into performing an out of bounds read that will bypass ASLR and execute an arbitrary binary.  The exploit can also be run on out of date versions of totem, rhythmbox, and nautilus, and goes to show how Ubuntu lags behind in using ASLR on binaries, as the equivalent versions in Fedora were not affected.</p>
<p>While much of the granular detail with regards to the 6502 assembly is lost on me (and I presume most hackers under the age of 35…) I found the methodological approach and detailed description to be fascinating and thought others here would appreciate as well.</p>
          <p><a href="https://0x00sec.org/t/compromising-a-n-old-linux-desktop-using-6502-processor-opcodes-on-the-nes/1282/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/compromising-a-n-old-linux-desktop-using-6502-processor-opcodes-on-the-nes/1282/1</link>
        <pubDate>Tue, 15 Nov 2016 14:58:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1282-1</guid>
        <source url="https://0x00sec.org/t/compromising-a-n-old-linux-desktop-using-6502-processor-opcodes-on-the-nes/1282.rss">Compromising a(n OLD) Linux desktop using... 6502 processor opcodes on the NES?!</source>
      </item>
  </channel>
</rss>
