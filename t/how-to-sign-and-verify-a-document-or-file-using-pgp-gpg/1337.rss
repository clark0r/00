<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to Sign and Verify a Document or File using PGP/GPG</title>
    <link>https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337</link>
    <description>Note that you will need to have [GnuPG (GPG)](https://www.gnupg.org/)  _installed before starting the tutorial._

First, a bit of background as to how this works:



&gt;     A digital signature certifies and timestamps a document. 
If the document is subsequently modified in any way, a verification of the signature will fail. A digital signature can serve the same purpose as a hand-written signature with the additional benefit of being tamper-resistant.

&gt; Creating and verifying signatures uses the public/private keypair in an operation different from encryption and decryption. A signature is created using the private key of the signer. The signature is verified using the corresponding public key.

Alright, now that we know what it is all about we can take a look at how you can sign your document. I&#39;ll show you an example after I show you what to do first.

To sign a document with PGP, run this in the command-line:
&gt;gpg --output document.sig --sign document.pdf

Where &quot;document.pdf&quot; is the path to the document you want to sign and compress. It doesn&#39;t need to be a .pdf; in fact, it can be any type of file you want. After you have entered your password for your private key, GPG will output the &quot;document.sig&quot; file into C:\Users\YourPCName (on Windows).

To verify a document that has been signed with PGP, run this in the command line:
&gt;gpg --output document.pdf --decrypt document.sig

This will output the decrypted &quot;document.pdf&quot; into C:\Users\YourPCName if you have the person who signed the document&#39;s public key. In the command line you will see something like this:
&gt;gpg: Signature made 03/12/16 12:02:38 Coordinated Universal Time using DSA key ID ABD907D3 gpg: Good signature from &quot;Person &lt; person@domain.tld &gt;&quot;



----------


Now, on to an example:

Bob wants to send Kate a sensitive document, and he wants to make sure that it isn&#39;t tampered with along the way. The document is called &quot;classifiedinfo.docx&quot; and it is located at D:\Users\Bob. He types this into the command line:
&gt;gpg --output classifiedinfo.sig --sign D:\Users\Bob\classifiedinfo.docx

_Note that you can choose any name you like for the .sig file._

Now he types in his private key&#39;s password, retrieves the signed file from D:\Users\Bob and sends it to Kate. He also tells her that it is a .docx file. Kate has already imported Bob&#39;s public key into GPG.

Kate verifies and decompresses Bob&#39;s file by running this in the command line:
&gt;gpg --output classifiedinfo.docx --decrypt C:\Users\Kate\Downloads\classifiedinfo.sig

She gets this message in the command line: 
&gt;gpg: Signature made 02/12/2016 15:39:05 Central African Time using DSA key ID A657BC83 gpg: Good signature from &quot;Bob &lt; bob@pgp.com &gt;&quot;

Good. The document is untampered and genuine. She opens it.

In my next tutorial I will show you how to clearsign a document.</description>
    
    <lastBuildDate>Sat, 10 Dec 2016 11:19:47 +0000</lastBuildDate>
    <category>Cryptology</category>
    <atom:link href="https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to Sign and Verify a Document or File using PGP/GPG</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <p>Nice stylesheet. However, would it not have made more sense to prior explained what is PGPkeyring and its trust reputation system, which are enascapable knowledge when using PGP ?</p>
<p>Did you think about it ? Those articles are on my todo list so, if you want some help.</p>
<p>Best,<br>
Nitrax</p>
          <p><a href="https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337/5</link>
        <pubDate>Sat, 10 Dec 2016 11:19:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1337-5</guid>
        <source url="https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337.rss">How to Sign and Verify a Document or File using PGP/GPG</source>
      </item>
      <item>
        <title>How to Sign and Verify a Document or File using PGP/GPG</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>So it isn’t encrypting the file? Just signing it?</p>
          <p><a href="https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337/4</link>
        <pubDate>Sat, 10 Dec 2016 11:07:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1337-4</guid>
        <source url="https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337.rss">How to Sign and Verify a Document or File using PGP/GPG</source>
      </item>
      <item>
        <title>How to Sign and Verify a Document or File using PGP/GPG</title>
        <dc:creator><![CDATA[VoidAccess]]></dc:creator>
        <description><![CDATA[
            <p>–recipient flag is used when sending a file to someone like gpg -e -u “VoidAccess (Test)” -r “pry0cc” filename.txt . Here we are verifying the signature of a file to test whether it has been modified in any way</p>
          <p><a href="https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337/3</link>
        <pubDate>Sat, 10 Dec 2016 10:51:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1337-3</guid>
        <source url="https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337.rss">How to Sign and Verify a Document or File using PGP/GPG</source>
      </item>
      <item>
        <title>How to Sign and Verify a Document or File using PGP/GPG</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Nice tutorial man! GPG is great, and we should really use it more for things.</p>
<p>One question though. Shouldn’t we be using the --recipient flag? Or else anybody could read it right?</p>
          <p><a href="https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337/2</link>
        <pubDate>Sat, 10 Dec 2016 10:26:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1337-2</guid>
        <source url="https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337.rss">How to Sign and Verify a Document or File using PGP/GPG</source>
      </item>
      <item>
        <title>How to Sign and Verify a Document or File using PGP/GPG</title>
        <dc:creator><![CDATA[VoidAccess]]></dc:creator>
        <description><![CDATA[
            <p>Note that you will need to have <a href="https://www.gnupg.org/" rel="nofollow noopener">GnuPG (GPG)</a>  <em>installed before starting the tutorial.</em></p>
<p>First, a bit of background as to how this works:</p>
<blockquote>
<pre><code>A digital signature certifies and timestamps a document. 
</code></pre>
</blockquote>
<p>If the document is subsequently modified in any way, a verification of the signature will fail. A digital signature can serve the same purpose as a hand-written signature with the additional benefit of being tamper-resistant.</p>
<blockquote>
<p>Creating and verifying signatures uses the public/private keypair in an operation different from encryption and decryption. A signature is created using the private key of the signer. The signature is verified using the corresponding public key.</p>
</blockquote>
<p>Alright, now that we know what it is all about we can take a look at how you can sign your document. I’ll show you an example after I show you what to do first.</p>
<p>To sign a document with PGP, run this in the command-line:</p>
<blockquote>
<p>gpg --output document.sig --sign document.pdf</p>
</blockquote>
<p>Where “document.pdf” is the path to the document you want to sign and compress. It doesn’t need to be a .pdf; in fact, it can be any type of file you want. After you have entered your password for your private key, GPG will output the “document.sig” file into C:\Users\YourPCName (on Windows).</p>
<p>To verify a document that has been signed with PGP, run this in the command line:</p>
<blockquote>
<p>gpg --output document.pdf --decrypt document.sig</p>
</blockquote>
<p>This will output the decrypted “document.pdf” into C:\Users\YourPCName if you have the person who signed the document’s public key. In the command line you will see something like this:</p>
<blockquote>
<p>gpg: Signature made 03/12/16 12:02:38 Coordinated Universal Time using DSA key ID ABD907D3 gpg: Good signature from “Person &lt; person@domain.tld &gt;”</p>
</blockquote>
<hr>
<p>Now, on to an example:</p>
<p>Bob wants to send Kate a sensitive document, and he wants to make sure that it isn’t tampered with along the way. The document is called “classifiedinfo.docx” and it is located at D:\Users\Bob. He types this into the command line:</p>
<blockquote>
<p>gpg --output classifiedinfo.sig --sign D:\Users\Bob\classifiedinfo.docx</p>
</blockquote>
<p><em>Note that you can choose any name you like for the .sig file.</em></p>
<p>Now he types in his private key’s password, retrieves the signed file from D:\Users\Bob and sends it to Kate. He also tells her that it is a .docx file. Kate has already imported Bob’s public key into GPG.</p>
<p>Kate verifies and decompresses Bob’s file by running this in the command line:</p>
<blockquote>
<p>gpg --output classifiedinfo.docx --decrypt C:\Users\Kate\Downloads\classifiedinfo.sig</p>
</blockquote>
<p>She gets this message in the command line:</p>
<blockquote>
<p>gpg: Signature made 02/12/2016 15:39:05 Central African Time using DSA key ID A657BC83 gpg: Good signature from “Bob &lt; <a href="mailto:bob@pgp.com">bob@pgp.com</a> &gt;”</p>
</blockquote>
<p>Good. The document is untampered and genuine. She opens it.</p>
<p>In my next tutorial I will show you how to clearsign a document.</p>
          <p><a href="https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337/1</link>
        <pubDate>Sat, 10 Dec 2016 09:48:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1337-1</guid>
        <source url="https://0x00sec.org/t/how-to-sign-and-verify-a-document-or-file-using-pgp-gpg/1337.rss">How to Sign and Verify a Document or File using PGP/GPG</source>
      </item>
  </channel>
</rss>
