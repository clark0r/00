<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Sorting (Part 5.0): Selection Sort</title>
    <link>https://0x00sec.org/t/sorting-part-5-0-selection-sort/201</link>
    <description>Hello 0x00sec people! Let&#39;s talk about Selection Sort -- oh yeah, I linked Wikipedia!

Selection sort is a lot like Insertion Sort, which -- if you can recall from an [earlier post](https://0x00sec.org/t/sorting-part-3-0-insertion-sort/199/1) of mine -- involves finding the smallest element in an array and shifting it to one side, proceeding to find the next smallest element, and so on, and so on...

But Selection Sort, in contrast, does not shift over all of the elements; it finds the smallest element `a[i]`, wherever it may be, and swaps it with whichever element currently occupies `a[0]`, unless `i == 0`.

It goes on to find the next smallest element, excluding the new `a[0]`. We could call this `a[j]`. The algorithm swaps this out with `a[1]` unless `j == 1`. And this goes on until the elements are all in order.

![selection sort](upload://bAkhN6lFqjpkv8DdA8tVteCT23W.jpeg)

The algorithm is `O(n^2)` and `o(n)`. This is the last quadratic complexity sorting algorithm I intend to cover.

## Ruby Implementation
```ruby
#! /usr/bin/env ruby
 
# just input, ignore
puts &quot;give me a string&quot;
str = gets.chomp.split(&#39;&#39;)
strlen = str.length
# end of input section, stop ignoring
 
# begin sorting
for i in 0...strlen
    min_pos = i # assume the min element is the first element in the unsorted section of str
 
    for j in i+1...strlen # now loop through str, starting from i+1 since there is no need to reevaluate str[i]
        min_pos = j if (str[j] &lt; str[min_pos]) # update min_pos if we find a smaller element
    end
   
    # now we swap them IF AND ONLY IF the smallest element in the unsorted portion of the array is not in its place yet
    # below you&#39;ll see the Ruby syntax for swapping two variables&#39; values... it might look strange, but it actually
    # makes it stupidly simple
    str[i] , str[min_pos] = str[min_pos] , str[i] if min_pos != i
end
 
puts str.join(&#39;&#39;)
```
First of all, notice the nested `for` loops are what makes this algorithm `O(n^2)`.

Alright, so we start with the first element, `str[0]`. And we go ahead and assume that `str[0]` is the smallest element, because we have yet to see any smaller element in `str`. But let&#39;s only store the _position_ of this minimum element, `0`. Thus, we have `min_pos = i`.

So now we go through the array in the inner `for` loop looking for a smaller element. We won&#39;t start from `i` because that would just be silly and redundant, since we know that the `if` condition inside the loop could never evaluate to true when `i == j` without Divine interference from the Computer Science gods.

If we find a smaller element, let&#39;s update `min_pos` to contain the index of that element. Once we&#39;ve looped through `str`, finishing the inner `for`, we know we&#39;ve found the smallest element between `i` and the end of the array (`n-1`).

If i is not the position of the smallest element in the unsorted portion of `str`, we must swap `str[i]` with `str[min_pos]`, meaning we put the smallest element from the still unsorted portion of `str` (***Note:*** _any elements to the left of `str[i]` make up the sorted portion of `str`_) where it belongs and toss the &quot;original&quot; `str[i]` in the only available slot, `str[min_pos]`, since that smallest element in the unsorted portion has moved to the sorted portion of the array.

Here&#39;s a visual:

![visual of selection sort](http://img.wonderhowto.com/img/65/56/63594174248792/0/sorting-part-5-0-selection-sort.w654.jpg)

And we just keep on with this process until we&#39;ve gone through the entirety of `str`, making all of `str` part of the sorted portion.

## C++ Version
```c++
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;cstdlib&gt;
 
using namespace std;
 
void selectionsort(vector&lt;char&gt;&amp; vec) {
    int n = vec.size();
   
    // start from first element till last
    for (int i = 0; i &lt; n; i++) {
 
        int min_pos = i; // assume first element is the smallest
 
        for (int j = i + 1; j &lt; n; j++) {
            // update position of min element if we find a smaller one
            if (vec[j] &lt; vec[min_pos]) {
                min_pos = j;
            }
        }
 
        // if the minimun is not at position i, we must swap
        if (min_pos != i) {
            int tmp = vec[i];
            vec[i] = vec[min_pos];
            vec[min_pos] = tmp;
        }
    }
}
 
int main() {
    cout &lt;&lt; &quot;give me a string&quot; &lt;&lt; endl;
    string s; getline(cin, s);
 
    vector&lt;char&gt; vec(s.begin(), s.end());
 
    if (!vec.empty()) selectionsort(vec);
 
    string str(vec.begin(), vec.end());
 
    cout &lt;&lt; str &lt;&lt; endl;
    return 0;
}
```
It&#39;s fundamentally the same as the Ruby code is, semantically.

Peruse the comments, but I feel that there is no point in explaining this code more, since I did a (hopefully) bang-up job up above. ***Note:*** _what was `str` in the Ruby code is `vec` in the C++ code, because I... uh... no reason, really._

## Python
I know I said I&#39;d be using Ruby and C++ exclusively for this series, but good guy JSchmoe went and ported the algorithms to Python. You can find his sorty porties (IRC joke [join ##0x00sec !]) [on pastebin here](http://pastebin.com/iLYm75pu).

## Conclusion
That&#39;s it for Selection Sort, the last quadratic complexity sorting algorithm I set out to cover in this series.

&#39;Twas a pleasure,
oaktree

P.S. Quicksort is still to come!</description>
    
    <lastBuildDate>Fri, 06 May 2016 00:37:38 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/sorting-part-5-0-selection-sort/201.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Sorting (Part 5.0): Selection Sort</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/sorting-part-5-0-selection-sort/201/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-5-0-selection-sort/201/3</link>
        <pubDate>Sun, 21 Jan 2018 00:37:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-201-3</guid>
        <source url="https://0x00sec.org/t/sorting-part-5-0-selection-sort/201.rss">Sorting (Part 5.0): Selection Sort</source>
      </item>
      <item>
        <title>Sorting (Part 5.0): Selection Sort</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Well done <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/sorting-part-5-0-selection-sort/201/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-5-0-selection-sort/201/2</link>
        <pubDate>Fri, 06 May 2016 00:37:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-201-2</guid>
        <source url="https://0x00sec.org/t/sorting-part-5-0-selection-sort/201.rss">Sorting (Part 5.0): Selection Sort</source>
      </item>
      <item>
        <title>Sorting (Part 5.0): Selection Sort</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Hello 0x00sec people! Let’s talk about Selection Sort – oh yeah, I linked Wikipedia!</p>
<p>Selection sort is a lot like Insertion Sort, which – if you can recall from an <a href="https://0x00sec.org/t/sorting-part-3-0-insertion-sort/199/1">earlier post</a> of mine – involves finding the smallest element in an array and shifting it to one side, proceeding to find the next smallest element, and so on, and so on…</p>
<p>But Selection Sort, in contrast, does not shift over all of the elements; it finds the smallest element <code>a[i]</code>, wherever it may be, and swaps it with whichever element currently occupies <code>a[0]</code>, unless <code>i == 0</code>.</p>
<p>It goes on to find the next smallest element, excluding the new <code>a[0]</code>. We could call this <code>a[j]</code>. The algorithm swaps this out with <code>a[1]</code> unless <code>j == 1</code>. And this goes on until the elements are all in order.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/51332934f87c8ccf1fde815e1344ed513391daa4.jpeg" alt="selection sort" data-base62-sha1="bAkhN6lFqjpkv8DdA8tVteCT23W" width="" height=""></p>
<p>The algorithm is <code>O(n^2)</code> and <code>o(n)</code>. This is the last quadratic complexity sorting algorithm I intend to cover.</p>
<h2>Ruby Implementation</h2>
<pre><code class="lang-ruby">#! /usr/bin/env ruby
 
# just input, ignore
puts "give me a string"
str = gets.chomp.split('')
strlen = str.length
# end of input section, stop ignoring
 
# begin sorting
for i in 0...strlen
    min_pos = i # assume the min element is the first element in the unsorted section of str
 
    for j in i+1...strlen # now loop through str, starting from i+1 since there is no need to reevaluate str[i]
        min_pos = j if (str[j] &lt; str[min_pos]) # update min_pos if we find a smaller element
    end
   
    # now we swap them IF AND ONLY IF the smallest element in the unsorted portion of the array is not in its place yet
    # below you'll see the Ruby syntax for swapping two variables' values... it might look strange, but it actually
    # makes it stupidly simple
    str[i] , str[min_pos] = str[min_pos] , str[i] if min_pos != i
end
 
puts str.join('')
</code></pre>
<p>First of all, notice the nested <code>for</code> loops are what makes this algorithm <code>O(n^2)</code>.</p>
<p>Alright, so we start with the first element, <code>str[0]</code>. And we go ahead and assume that <code>str[0]</code> is the smallest element, because we have yet to see any smaller element in <code>str</code>. But let’s only store the <em>position</em> of this minimum element, <code>0</code>. Thus, we have <code>min_pos = i</code>.</p>
<p>So now we go through the array in the inner <code>for</code> loop looking for a smaller element. We won’t start from <code>i</code> because that would just be silly and redundant, since we know that the <code>if</code> condition inside the loop could never evaluate to true when <code>i == j</code> without Divine interference from the Computer Science gods.</p>
<p>If we find a smaller element, let’s update <code>min_pos</code> to contain the index of that element. Once we’ve looped through <code>str</code>, finishing the inner <code>for</code>, we know we’ve found the smallest element between <code>i</code> and the end of the array (<code>n-1</code>).</p>
<p>If i is not the position of the smallest element in the unsorted portion of <code>str</code>, we must swap <code>str[i]</code> with <code>str[min_pos]</code>, meaning we put the smallest element from the still unsorted portion of <code>str</code> (<em><strong>Note:</strong></em> <em>any elements to the left of <code>str[i]</code> make up the sorted portion of <code>str</code></em>) where it belongs and toss the “original” <code>str[i]</code> in the only available slot, <code>str[min_pos]</code>, since that smallest element in the unsorted portion has moved to the sorted portion of the array.</p>
<p>Here’s a visual:</p>
<p><span alt="visual of selection sort" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>And we just keep on with this process until we’ve gone through the entirety of <code>str</code>, making all of <code>str</code> part of the sorted portion.</p>
<h2>C++ Version</h2>
<pre><code class="lang-auto">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;cstdlib&gt;
 
using namespace std;
 
void selectionsort(vector&lt;char&gt;&amp; vec) {
    int n = vec.size();
   
    // start from first element till last
    for (int i = 0; i &lt; n; i++) {
 
        int min_pos = i; // assume first element is the smallest
 
        for (int j = i + 1; j &lt; n; j++) {
            // update position of min element if we find a smaller one
            if (vec[j] &lt; vec[min_pos]) {
                min_pos = j;
            }
        }
 
        // if the minimun is not at position i, we must swap
        if (min_pos != i) {
            int tmp = vec[i];
            vec[i] = vec[min_pos];
            vec[min_pos] = tmp;
        }
    }
}
 
int main() {
    cout &lt;&lt; "give me a string" &lt;&lt; endl;
    string s; getline(cin, s);
 
    vector&lt;char&gt; vec(s.begin(), s.end());
 
    if (!vec.empty()) selectionsort(vec);
 
    string str(vec.begin(), vec.end());
 
    cout &lt;&lt; str &lt;&lt; endl;
    return 0;
}
</code></pre>
<p>It’s fundamentally the same as the Ruby code is, semantically.</p>
<p>Peruse the comments, but I feel that there is no point in explaining this code more, since I did a (hopefully) bang-up job up above. <em><strong>Note:</strong></em> <em>what was <code>str</code> in the Ruby code is <code>vec</code> in the C++ code, because I… uh… no reason, really.</em></p>
<h2>Python</h2>
<p>I know I said I’d be using Ruby and C++ exclusively for this series, but good guy JSchmoe went and ported the algorithms to Python. You can find his sorty porties (IRC joke [join #<a class="hashtag" href="https://0x00sec.org/tag/0x00sec">#<span>0x00sec</span></a> !]) <a href="http://pastebin.com/iLYm75pu" rel="noopener nofollow ugc">on pastebin here</a>.</p>
<h2>Conclusion</h2>
<p>That’s it for Selection Sort, the last quadratic complexity sorting algorithm I set out to cover in this series.</p>
<p>'Twas a pleasure,<br>
oaktree</p>
<p>P.S. Quicksort is still to come!</p>
          <p><a href="https://0x00sec.org/t/sorting-part-5-0-selection-sort/201/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-5-0-selection-sort/201/1</link>
        <pubDate>Thu, 05 May 2016 23:34:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-201-1</guid>
        <source url="https://0x00sec.org/t/sorting-part-5-0-selection-sort/201.rss">Sorting (Part 5.0): Selection Sort</source>
      </item>
  </channel>
</rss>
