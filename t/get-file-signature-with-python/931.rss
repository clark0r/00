<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Get file signature with Python</title>
    <link>https://0x00sec.org/t/get-file-signature-with-python/931</link>
    <description>While tackling a CTF VM from Vulnhub today, I wrote this script to help me figure out if I had a file masquerading as another file-type. I know there is a &lt;code&gt;file&lt;/code&gt; command in linux to get file type, but... I was suspicious, wanted to check deeper than the first few bytes, which could have been faked, so you can adjust the offset of how much into the file you want to check, or just select a &#39;slice&#39; of the file to check. It takes a file and attempts to detect any signatures it knows, and should return all possibilities... I&#39;ve peppered the code with comments, which hopefully explain most of the workings. Any questions, or any sort of criticism, I&#39;m all eyes

**Example output:**

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/59080f94f9d306b04f0e8bedd467cd7f4db195b2.png&quot; width=&quot;690&quot; height=&quot;265&quot;&gt;

```python
#!/usr/bin/env python
# check_sigs.py - EnergyWolf 2016
# Take a file path as argument, and check it for known file
# signatures using www.filesignatures.net

# pickling the signatures file makes subsequent look ups
# significantly faster

import os
import urllib2
import cPickle as Pickle
from subprocess import Popen, PIPE
from argparse import ArgumentParser
from bs4 import BeautifulSoup

# the {} will be used to dynamically enter different ints with .format()
URL = &quot;http://www.filesignatures.net/index.php?page=all&amp;currentpage={}&quot;
PATH = os.path.expanduser(&#39;~/file_sigs.pickle&#39;)
signatures = [] # contains all (signatures, descriptions)

def compile_sigs():
    &#39;&#39;&#39; Compile the list of file signatures &#39;&#39;&#39;
    global signatures, PATH

    if not os.path.exists(PATH):
        for i in range(19): # 19 pages of signatures on the site
            response = urllib2.urlopen(URL.format(i))
            html = response.read() # get the html as a string

            soup = BeautifulSoup(html, &quot;lxml&quot;) # parse the source

            t_cells = soup.find_all(&quot;td&quot;, {&quot;width&quot;: 236}) # find td elements with width=236
            for td in t_cells:
                # append (signature, description) to signatures
                sig = str(td.get_text()).replace(&#39; &#39;, &#39;&#39;).lower() # strip spaces, lowercase
                desc = str(td.find_next_sibling(&quot;td&quot;).get_text())
                signatures.append([sig, desc])

        # pickle them sigs
        with open(PATH, &#39;wb&#39;) as f:
            Pickle.dump(signatures, f)

    else:
        with open(PATH, &#39;rb&#39;) as f:
            signatures = Pickle.load(f)


def check_sig(fn):
    &#39;&#39;&#39; Hex dump the file and search for signatures &#39;&#39;&#39;

    p = Popen([&#39;xxd&#39;, &#39;-p&#39;, fn], stdout=PIPE) # get plain(-p) hex dump of the file
    dump = p.communicate()[0]           # execute and extract stdout

    res = []

    for sig, desc in signatures:
        if sig in dump:
            res.append([sig, desc, dump.find(sig)])

    return res # [(sig, desc, offset), (sig, desc, offset), ... etc.]


# script really starts here
if __name__ == &quot;__main__&quot;:
    parser = ArgumentParser()
    parser.add_argument(&quot;file_path&quot;, help=&quot;Detect signatures in file at this path&quot;)

    args = parser.parse_args()

    print(&quot;[*] Checking File for Known Signatures&quot;)
    print(&quot;[*] This may take a moment...&quot;)

    compile_sigs()
    results = check_sig(args.file_path)

    if results:
        results.sort(key=lambda x: x[2]) # sort results by offset in file
        # find longest signature, and desc for output formatting purposes
        big_sig = len(max([i[0] for i in results], key=lambda x: len(x)))
        big_desc = len(max([i[1] for i in results], key=lambda x: len(x)))

        print(&quot;\n[*] File Signature(s) detected:\n&quot;)
        for sig, desc, offset in results:
            print(&quot;[+] {0:&lt;%ds} : {1:&lt;%d} {2:&lt;20s}&quot; % (big_sig, big_desc)).format(
                sig, desc, &quot;&lt;- Offset: &quot;+str(offset))
    else:
        print(&quot;\n[!] No File Signature Detected.\n&quot;)

```

Thanks for reading</description>
    
    <lastBuildDate>Fri, 22 Dec 2017 00:29:57 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/get-file-signature-with-python/931.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Get file signature with Python</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/get-file-signature-with-python/931/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/get-file-signature-with-python/931/7</link>
        <pubDate>Sun, 21 Jan 2018 00:30:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-931-7</guid>
        <source url="https://0x00sec.org/t/get-file-signature-with-python/931.rss">Get file signature with Python</source>
      </item>
      <item>
        <title>Get file signature with Python</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/get-file-signature-with-python/931/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/get-file-signature-with-python/931/6</link>
        <pubDate>Fri, 22 Dec 2017 00:29:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-931-6</guid>
        <source url="https://0x00sec.org/t/get-file-signature-with-python/931.rss">Get file signature with Python</source>
      </item>
      <item>
        <title>Get file signature with Python</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/get-file-signature-with-python/931/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/get-file-signature-with-python/931/5</link>
        <pubDate>Sat, 18 Nov 2017 10:10:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-931-5</guid>
        <source url="https://0x00sec.org/t/get-file-signature-with-python/931.rss">Get file signature with Python</source>
      </item>
      <item>
        <title>Get file signature with Python</title>
        <dc:creator><![CDATA[robo3945]]></dc:creator>
        <description><![CDATA[
            <p>I managed a little the code to run better in Python3. Deleted the dependecy on xxd.</p>
<p>Useful code.</p>
<pre><code>#!/usr/bin/env python
# check_sigs.py - EnergyWolf 2016
# Take a file path as argument, and check it for known file
# signatures using www.filesignatures.net

# pickling the signatures file makes subsequent look ups
# significantly faster
# https://0x00sec.org/t/get-file-signature-with-python/931

import os
from urllib.request import urlopen

import pickle as Pickle
from argparse import ArgumentParser

import binascii
from bs4 import BeautifulSoup

# the {} will be used to dynamically enter different ints with .format()
URL = "http://www.filesignatures.net/index.php?page=all&amp;currentpage={}"
PATH = os.path.expanduser('./file_sigs.pickle')
signatures = [] # contains all (signatures, descriptions)

def compile_sigs():
    """ Compile the list of file signatures """
    global signatures, PATH

    if not os.path.exists(PATH):
        for i in range(19): # 19 pages of signatures on the site
            response = urlopen(URL.format(i))
            html = response.read() # get the html as a string

            soup = BeautifulSoup(html, "lxml") # parse the source

            t_cells = soup.find_all("td", {"width": 236}) # find td elements with width=236
            for td in t_cells:
                # append (signature, description) to signatures
                sig = str(td.get_text()).replace(' ', '').lower() # strip spaces, lowercase
                desc = str(td.find_next_sibling("td").get_text())
                signatures.append([sig, desc])

        # pickle them sigs
        with open(PATH, 'wb') as f:
            Pickle.dump(signatures, f)

    else:
        with open(PATH, 'rb') as f:
            signatures = Pickle.load(f)


def check_sig(fn):
    """ Hex dump the file and search for signatures """

    with open(fn, 'rb') as fn:
        dump = str(binascii.hexlify(fn.read()))[2:-1]

    res = []

    for sig, desc in signatures:
        if sig in dump:
            res.append([sig, desc, dump.find(sig)])

    res.sort(key=lambda x: x[2])  # sort results by offset in file
    return res # [(sig, desc, offset), (sig, desc, offset), ... etc.]


# script really starts here
if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("file_path", help="Detect signatures in file at this path")

    args = parser.parse_args()

    print("[*] Checking File for Known Signatures")
    print("[*] This may take a moment...")

    compile_sigs()
    results = check_sig(args.file_path)

    if results:
        # find longest signature, and desc for output formatting purposes
        big_sig = len(max([i[0] for i in results], key=lambda x: len(x)))
        big_desc = len(max([i[1] for i in results], key=lambda x: len(x)))

        print("\n[*] File Signature(s) detected:\n")
        for sig, desc, offset in results:
            s = ("[+] {0:&lt;%ds} : {1:&lt;%d} {2:&lt;20s}" % (big_sig, big_desc)).format(sig, desc, "&lt;- Offset: "+str(offset))
            print(s)

        print("\n[*] First candidate signature:\n")
        sig, desc, offset = results[0][0],results[0][1],results[0][2]
        s = ("[+] {0:&lt;%ds} : {1:&lt;%d} {2:&lt;20s}" % (big_sig, big_desc)).format(sig, desc, "&lt;- Offset: " + str(offset))
        print(s)

    else:
        print("\n[!] No File Signature Detected.\n")</code></pre>
          <p><a href="https://0x00sec.org/t/get-file-signature-with-python/931/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/get-file-signature-with-python/931/4</link>
        <pubDate>Sat, 18 Nov 2017 06:43:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-931-4</guid>
        <source url="https://0x00sec.org/t/get-file-signature-with-python/931.rss">Get file signature with Python</source>
      </item>
      <item>
        <title>Get file signature with Python</title>
        <dc:creator><![CDATA[EnergyWolf]]></dc:creator>
        <description><![CDATA[
            <p>Improved formatting to sort signatures by offset into the file, and added a screen-shot of example output because coffee</p>
          <p><a href="https://0x00sec.org/t/get-file-signature-with-python/931/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/get-file-signature-with-python/931/3</link>
        <pubDate>Wed, 17 Aug 2016 16:08:00 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-931-3</guid>
        <source url="https://0x00sec.org/t/get-file-signature-with-python/931.rss">Get file signature with Python</source>
      </item>
      <item>
        <title>Get file signature with Python</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>This is really cool! I like this a lot. Nice work!</p>
          <p><a href="https://0x00sec.org/t/get-file-signature-with-python/931/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/get-file-signature-with-python/931/2</link>
        <pubDate>Mon, 15 Aug 2016 11:32:00 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-931-2</guid>
        <source url="https://0x00sec.org/t/get-file-signature-with-python/931.rss">Get file signature with Python</source>
      </item>
      <item>
        <title>Get file signature with Python</title>
        <dc:creator><![CDATA[EnergyWolf]]></dc:creator>
        <description><![CDATA[
            <p>While tackling a CTF VM from Vulnhub today, I wrote this script to help me figure out if I had a file masquerading as another file-type. I know there is a <code>file</code> command in linux to get file type, but… I was suspicious, wanted to check deeper than the first few bytes, which could have been faked, so you can adjust the offset of how much into the file you want to check, or just select a ‘slice’ of the file to check. It takes a file and attempts to detect any signatures it knows, and should return all possibilities… I’ve peppered the code with comments, which hopefully explain most of the workings. Any questions, or any sort of criticism, I’m all eyes</p>
<p><strong>Example output:</strong></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/59080f94f9d306b04f0e8bedd467cd7f4db195b2.png" width="690" height="265"></p>
<pre><code class="lang-python">#!/usr/bin/env python
# check_sigs.py - EnergyWolf 2016
# Take a file path as argument, and check it for known file
# signatures using www.filesignatures.net

# pickling the signatures file makes subsequent look ups
# significantly faster

import os
import urllib2
import cPickle as Pickle
from subprocess import Popen, PIPE
from argparse import ArgumentParser
from bs4 import BeautifulSoup

# the {} will be used to dynamically enter different ints with .format()
URL = "http://www.filesignatures.net/index.php?page=all&amp;currentpage={}"
PATH = os.path.expanduser('~/file_sigs.pickle')
signatures = [] # contains all (signatures, descriptions)

def compile_sigs():
    ''' Compile the list of file signatures '''
    global signatures, PATH

    if not os.path.exists(PATH):
        for i in range(19): # 19 pages of signatures on the site
            response = urllib2.urlopen(URL.format(i))
            html = response.read() # get the html as a string

            soup = BeautifulSoup(html, "lxml") # parse the source

            t_cells = soup.find_all("td", {"width": 236}) # find td elements with width=236
            for td in t_cells:
                # append (signature, description) to signatures
                sig = str(td.get_text()).replace(' ', '').lower() # strip spaces, lowercase
                desc = str(td.find_next_sibling("td").get_text())
                signatures.append([sig, desc])

        # pickle them sigs
        with open(PATH, 'wb') as f:
            Pickle.dump(signatures, f)

    else:
        with open(PATH, 'rb') as f:
            signatures = Pickle.load(f)


def check_sig(fn):
    ''' Hex dump the file and search for signatures '''

    p = Popen(['xxd', '-p', fn], stdout=PIPE) # get plain(-p) hex dump of the file
    dump = p.communicate()[0]           # execute and extract stdout

    res = []

    for sig, desc in signatures:
        if sig in dump:
            res.append([sig, desc, dump.find(sig)])

    return res # [(sig, desc, offset), (sig, desc, offset), ... etc.]


# script really starts here
if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("file_path", help="Detect signatures in file at this path")

    args = parser.parse_args()

    print("[*] Checking File for Known Signatures")
    print("[*] This may take a moment...")

    compile_sigs()
    results = check_sig(args.file_path)

    if results:
        results.sort(key=lambda x: x[2]) # sort results by offset in file
        # find longest signature, and desc for output formatting purposes
        big_sig = len(max([i[0] for i in results], key=lambda x: len(x)))
        big_desc = len(max([i[1] for i in results], key=lambda x: len(x)))

        print("\n[*] File Signature(s) detected:\n")
        for sig, desc, offset in results:
            print("[+] {0:&lt;%ds} : {1:&lt;%d} {2:&lt;20s}" % (big_sig, big_desc)).format(
                sig, desc, "&lt;- Offset: "+str(offset))
    else:
        print("\n[!] No File Signature Detected.\n")

</code></pre>
<p>Thanks for reading</p>
          <p><a href="https://0x00sec.org/t/get-file-signature-with-python/931/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/get-file-signature-with-python/931/1</link>
        <pubDate>Sat, 13 Aug 2016 18:16:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-931-1</guid>
        <source url="https://0x00sec.org/t/get-file-signature-with-python/931.rss">Get file signature with Python</source>
      </item>
  </channel>
</rss>
