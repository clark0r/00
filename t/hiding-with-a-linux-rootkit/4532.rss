<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Hiding with a Linux Rootkit</title>
    <link>https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532</link>
    <description>I have always wanted to dive a bit deeper into how to linux kernel internals work. To do this I figured a good starting point would be to create a small proof of concept rootkit! You can find the code for the rootkit on github &lt;a href=&quot;https://github.com/jordan9001/superhide&quot;&gt;https://github.com/jordan9001/superhide&lt;/a&gt;.

This is a very simple rootkit. All it does is hide files that begin with a certain prefix from being seen. You can still access those files/folders if you know where they are, but &#39;ls -a&#39; or a file manager won&#39;t see them. It also hides itself from being listed with lsmod or by viewing /proc/modules.
##Looking at LS
So, my first task was to see how ls finds it&#39;s files. Whenever a program works with networking, the file system, or other system specific activities, it is going to have to go through the kernel. That means it will use a system call. You can see a table of linux 64 bit system calls &lt;a href=&quot;http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/&quot;&gt;here&lt;/a&gt;.

In order to find what system calls ls was using, I used a tool called &lt;a href=&quot;https://linux.die.net/man/1/strace&quot;&gt;strace&lt;/a&gt;. Strace will list system calls made by a program. When you run &lt;code&gt;strace ls&lt;/code&gt; there will be a lot of noise having to do with the program linking, but if we scroll a bit down, we see the following lines.

```
openat(AT_FDCWD, &quot;.&quot;, O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC) = 3
getdents(3, /* 11 entries */, 32768)    = 344
getdents(3, /* 0 entries */, 32768)     = 0
close(3)                                = 0
```

Sweet. Looks like the system call we need to mess with is &lt;a href=&quot;http://man7.org/linux/man-pages/man2/getdents.2.html&quot;&gt;getdents&lt;/a&gt;. Ls is probably calling the libc function, readdir, but it all boils down to getdents eventually.

We will get back to getdents in a second. First let&#39;s talk about how we are going to get into the kernel.
##Loadable Kernel Modules
On linux, when we want to run code in the kernel we can make a Loadable Kernel Module (LKM). I won&#39;t spend too much explaining how they work, because &lt;a href=&quot;http://tldp.org/HOWTO/Module-HOWTO/&quot;&gt;others have&lt;/a&gt; &lt;a href=&quot;https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485&quot;&gt;done so better&lt;/a&gt; &lt;a href=&quot;http://derekmolloy.ie/writing-a-linux-kernel-module-part-1-introduction/&quot;&gt;than I can here&lt;/a&gt;. The idea is that we can load our own module into the kernel. Some useful kernel symbols will be exported by the kernel for us to be able to use, or we can grab them with the ```kallsyms_lookup_name``` function. Once in the kernel, we are going to want to intercept the getdents call, and make changes to the values it returns. We are also going to want to hide ourselves a bit so it is not readily apparent that our module is in the system.

So how do we hook getdents. How does the linux kernel respond to a system call?
##System Call Table
In the kernel, there is a table called the system call table. The system call number (rax&#39;s value at the time of syscall) is the offset into that table for that handler. If we were on Windows, this table would be untouchable due to &lt;a href=&quot;https://en.wikipedia.org/wiki/Kernel_Patch_Protection&quot;&gt;PatchGuard&lt;/a&gt;. On linux, for now, we can get away with it. &lt;i&gt;(It is noisy of us to mess with this table, and if this was more than a silly proof of concept, we would want to put our hook somewhere else.)&lt;/i&gt;

The system call table is at the symbol ```sys_call_table```, which in not a symbol that modern linux kernels will export for you to use. &lt;i&gt;(There really is not a legitimate reason for you to mess with it.)&lt;/i&gt; So we have 4 options to find it:
&lt;ol&gt;
 	&lt;li&gt;Bruteforce search for it. This worked better on 32 bit, but is still doable if you are smart about it.&lt;/li&gt;
 	&lt;li&gt;Find somewhere it is used. There are a few functions that use the ```sys_call_table``` symbol, and if we parse through them, we can find their reference.&lt;/li&gt;
 	&lt;li&gt;Find it somewhere else. It is actually easy to find if you are not in the kernel.&lt;/li&gt;
 	&lt;li&gt;Don&#39;t find it. This is the best &lt;i&gt;(but most involved)&lt;/i&gt; option. Instead of hooking at the table, we could put our hook in at the handler.&lt;/li&gt;
&lt;/ol&gt;
For this simple module, we will go with option #3. #4 would be fun, and I may write about doing that in a separate post. As for #3, we only have to read and parse the &lt;a href=&quot;https://en.wikipedia.org/wiki/System.map&quot;&gt;/boot/System.map-$(uname -r)&lt;/a&gt; file. We can do this when we insert ourselves into the kernel, and we will be sure we have the correct address. My code does this in my &lt;a href=&quot;https://github.com/jordan9001/superhide/blob/master/build_and_install.sh#L12&quot;&gt;build_and_install.sh&lt;/a&gt; file. I generate a header file that will be compiled with the LKM.

```
smap=&quot;/boot/System.map-$(uname -r)&quot;
echo -e &quot;#pragma once&quot; &amp;gt; ./sysgen.h
echo -e &quot;#include &lt;linux/fs.h&gt;&quot; &gt;&gt; ./sysgen.h
symbline=$(cat $smap | grep &#39;\Wsys_call_table$&#39;)
set $symbline
echo -e &quot;void** sys_call_table = (void**)0x$1;&quot; &gt;&gt; ./sysgen.h
```
##The Hook
The system call table is read only. Fortunately, when we are in the kernel that doesn&#39;t mean much. In the kernel the &lt;a href=&quot;https://en.wikipedia.org/wiki/Control_register#CR0&quot;&gt;CR0 register&lt;/a&gt; is a control register that modifies how the processor operates. Bit 16 is the Write Protect flag, and if this flag is 0, then the CPU will let the kernel write to read-only pages. Linux provides us with two helper functions for messing with the CR0 register, write_cr0 and read_cr0.

In my code I turn off write protection by ```write_cr0(read_cr0() &amp; (~WRITE_PROTECT_FLAG));``` and turn it back on with ```write_cr0(read_cr0() | WRITE_PROTECT_FLAG);``` where ```#define WRITE_PROTECT_FLAG   (1&lt;&lt;16)```.

I save the current entry for the getdents handler, so I can put it back when I remove my module. Then I write my new handler to the table, with ```sys_call_table[GETDENTS_SYSCALL_NUM] = sys_getdents_new;```.

The sys_getdents_new function simply runs the original handler, and then inspects its results, removing any entries that start with our special prefix or have to do with our module.
##Hiding from /proc/modules
On linux the /proc/ file system serves as an interface between userspace and the kernel. They are not traditional files, but rather opening, writing, or reading from then invokes a handler in the kernel that will gather the required information. By hooking the read handler for the /proc/modules file, we can filter out any lines referring to our module. In order to do this, first we need to know where the /proc/modules file is registered in the kernel.

After a bit of sleuthing &lt;i&gt;(I searched the linux source on github for &#39;proc_create(&quot;modules&quot;)&#39;)&lt;/i&gt; we find &lt;a href=&quot;https://github.com/torvalds/linux/blob/ef0010a30935de4e0211cbc7bdffc30446cdee9b/kernel/module.c#L4227&quot;&gt;the following lines&lt;/a&gt;:

```
static int __init proc_modules_init(void)
{
    proc_create(&quot;modules&quot;, 0, NULL, &amp;proc_modules_operations);
    return 0;
}
```

Sweet! So proc_modules_operations is a struct that contains a the handler functions. It isn&#39;t an exported symbol, but we are using the System.map file already, so we might as well just use it again.

Once it is imported, adding our hook is as simple as ```proc_modules_operations-&gt;read  = proc_modules_read_new;```. In ```proc_modules_read_new``` we run the original read, then take the result and filter out any lines that tell on us.
##Conclusion
And then we have made our first linux rootkit! From here we could improve by hooking outside of the system call table, and by hiding out module from the kernel as well.

I hope I explained everything well. I had a lot of fun making this, and if anyone has any questions or finds a bug in my code, feel free to ask! I would also love to hear suggestions for other cool rootkit tricks! I am new to the community, so feel free to give me pointers on my post.</description>
    
    <lastBuildDate>Fri, 01 Dec 2017 19:20:35 +0000</lastBuildDate>
    <category>Exploit Development</category>
    <atom:link href="https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Hiding with a Linux Rootkit</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532/7</link>
        <pubDate>Sun, 21 Jan 2018 00:44:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-4532-7</guid>
        <source url="https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532.rss">Hiding with a Linux Rootkit</source>
      </item>
      <item>
        <title>Hiding with a Linux Rootkit</title>
        <dc:creator><![CDATA[Sirius]]></dc:creator>
        <description><![CDATA[
            <p>Unfortunately not off the top of my head, most of my knowledge is fairly basic. Which is why I’m looking forward to future publications from your account! <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          <p><a href="https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532/6</link>
        <pubDate>Fri, 01 Dec 2017 19:20:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-4532-6</guid>
        <source url="https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532.rss">Hiding with a Linux Rootkit</source>
      </item>
      <item>
        <title>Hiding with a Linux Rootkit</title>
        <dc:creator><![CDATA[jordan9001]]></dc:creator>
        <description><![CDATA[
            <p>I hope so! I want to write about hooking other places besides the system call table, but I need to find/make a small instruction-length decoder for x86_64 in c first. If you know of any, let me know!</p>
          <p><a href="https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532/5</link>
        <pubDate>Fri, 01 Dec 2017 19:15:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-4532-5</guid>
        <source url="https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532.rss">Hiding with a Linux Rootkit</source>
      </item>
      <item>
        <title>Hiding with a Linux Rootkit</title>
        <dc:creator><![CDATA[Sirius]]></dc:creator>
        <description><![CDATA[
            <p>I was already familiar with the basic concepts of the article so I didn’t have to reread sections as often as I normally would have.</p>
          <p><a href="https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532/4</link>
        <pubDate>Fri, 01 Dec 2017 19:14:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-4532-4</guid>
        <source url="https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532.rss">Hiding with a Linux Rootkit</source>
      </item>
      <item>
        <title>Hiding with a Linux Rootkit</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/sirius">@Sirius</a> how did you read that so fast!?!?!</p>
          <p><a href="https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532/3</link>
        <pubDate>Fri, 01 Dec 2017 19:08:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-4532-3</guid>
        <source url="https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532.rss">Hiding with a Linux Rootkit</source>
      </item>
      <item>
        <title>Hiding with a Linux Rootkit</title>
        <dc:creator><![CDATA[Sirius]]></dc:creator>
        <description><![CDATA[
            <p>This was an incredible write-up, any plans for related material in the future?</p>
          <p><a href="https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532/2</link>
        <pubDate>Fri, 01 Dec 2017 19:07:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-4532-2</guid>
        <source url="https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532.rss">Hiding with a Linux Rootkit</source>
      </item>
      <item>
        <title>Hiding with a Linux Rootkit</title>
        <dc:creator><![CDATA[jordan9001]]></dc:creator>
        <description><![CDATA[
            <p>I have always wanted to dive a bit deeper into how to linux kernel internals work. To do this I figured a good starting point would be to create a small proof of concept rootkit! You can find the code for the rootkit on github <a href="https://github.com/jordan9001/superhide" rel="nofollow noopener">https://github.com/jordan9001/superhide</a>.</p>
<p>This is a very simple rootkit. All it does is hide files that begin with a certain prefix from being seen. You can still access those files/folders if you know where they are, but ‘ls -a’ or a file manager won’t see them. It also hides itself from being listed with lsmod or by viewing /proc/modules.<br>
#<span class="hashtag">#Looking</span> at LS<br>
So, my first task was to see how ls finds it’s files. Whenever a program works with networking, the file system, or other system specific activities, it is going to have to go through the kernel. That means it will use a system call. You can see a table of linux 64 bit system calls <a href="http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/" rel="nofollow noopener">here</a>.</p>
<p>In order to find what system calls ls was using, I used a tool called <a href="https://linux.die.net/man/1/strace" rel="nofollow noopener">strace</a>. Strace will list system calls made by a program. When you run <code>strace ls</code> there will be a lot of noise having to do with the program linking, but if we scroll a bit down, we see the following lines.</p>
<pre><code class="lang-auto">openat(AT_FDCWD, ".", O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC) = 3
getdents(3, /* 11 entries */, 32768)    = 344
getdents(3, /* 0 entries */, 32768)     = 0
close(3)                                = 0
</code></pre>
<p>Sweet. Looks like the system call we need to mess with is <a href="http://man7.org/linux/man-pages/man2/getdents.2.html" rel="nofollow noopener">getdents</a>. Ls is probably calling the libc function, readdir, but it all boils down to getdents eventually.</p>
<p>We will get back to getdents in a second. First let’s talk about how we are going to get into the kernel.<br>
#<span class="hashtag">#Loadable</span> Kernel Modules<br>
On linux, when we want to run code in the kernel we can make a Loadable Kernel Module (LKM). I won’t spend too much explaining how they work, because <a href="http://tldp.org/HOWTO/Module-HOWTO/" rel="nofollow noopener">others have</a> <a href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485">done so better</a> <a href="http://derekmolloy.ie/writing-a-linux-kernel-module-part-1-introduction/" rel="nofollow noopener">than I can here</a>. The idea is that we can load our own module into the kernel. Some useful kernel symbols will be exported by the kernel for us to be able to use, or we can grab them with the <code>kallsyms_lookup_name</code> function. Once in the kernel, we are going to want to intercept the getdents call, and make changes to the values it returns. We are also going to want to hide ourselves a bit so it is not readily apparent that our module is in the system.</p>
<p>So how do we hook getdents. How does the linux kernel respond to a system call?<br>
#<span class="hashtag">#System</span> Call Table<br>
In the kernel, there is a table called the system call table. The system call number (rax’s value at the time of syscall) is the offset into that table for that handler. If we were on Windows, this table would be untouchable due to <a href="https://en.wikipedia.org/wiki/Kernel_Patch_Protection" rel="nofollow noopener">PatchGuard</a>. On linux, for now, we can get away with it. <i>(It is noisy of us to mess with this table, and if this was more than a silly proof of concept, we would want to put our hook somewhere else.)</i></p>
<p>The system call table is at the symbol <code>sys_call_table</code>, which in not a symbol that modern linux kernels will export for you to use. <i>(There really is not a legitimate reason for you to mess with it.)</i> So we have 4 options to find it:</p>
<ol>
 	<li>Bruteforce search for it. This worked better on 32 bit, but is still doable if you are smart about it.</li>
 	<li>Find somewhere it is used. There are a few functions that use the ```sys_call_table``` symbol, and if we parse through them, we can find their reference.</li>
 	<li>Find it somewhere else. It is actually easy to find if you are not in the kernel.</li>
 	<li>Don't find it. This is the best <i>(but most involved)</i> option. Instead of hooking at the table, we could put our hook in at the handler.</li>
</ol>
For this simple module, we will go with option #3. #4 would be fun, and I may write about doing that in a separate post. As for #3, we only have to read and parse the <a href="https://en.wikipedia.org/wiki/System.map" rel="nofollow noopener">/boot/System.map-$(uname -r)</a> file. We can do this when we insert ourselves into the kernel, and we will be sure we have the correct address. My code does this in my <a href="https://github.com/jordan9001/superhide/blob/master/build_and_install.sh#L12" rel="nofollow noopener">build_and_install.sh</a> file. I generate a header file that will be compiled with the LKM.
<pre><code class="lang-auto">smap="/boot/System.map-$(uname -r)"
echo -e "#pragma once" &amp;gt; ./sysgen.h
echo -e "#include &lt;linux/fs.h&gt;" &gt;&gt; ./sysgen.h
symbline=$(cat $smap | grep '\Wsys_call_table$')
set $symbline
echo -e "void** sys_call_table = (void**)0x$1;" &gt;&gt; ./sysgen.h
</code></pre>
<p>#<span class="hashtag">#The</span> Hook<br>
The system call table is read only. Fortunately, when we are in the kernel that doesn’t mean much. In the kernel the <a href="https://en.wikipedia.org/wiki/Control_register#CR0" rel="nofollow noopener">CR0 register</a> is a control register that modifies how the processor operates. Bit 16 is the Write Protect flag, and if this flag is 0, then the CPU will let the kernel write to read-only pages. Linux provides us with two helper functions for messing with the CR0 register, write_cr0 and read_cr0.</p>
<p>In my code I turn off write protection by <code>write_cr0(read_cr0() &amp; (~WRITE_PROTECT_FLAG));</code> and turn it back on with <code>write_cr0(read_cr0() | WRITE_PROTECT_FLAG);</code> where <code>#define WRITE_PROTECT_FLAG   (1&lt;&lt;16)</code>.</p>
<p>I save the current entry for the getdents handler, so I can put it back when I remove my module. Then I write my new handler to the table, with <code>sys_call_table[GETDENTS_SYSCALL_NUM] = sys_getdents_new;</code>.</p>
<p>The sys_getdents_new function simply runs the original handler, and then inspects its results, removing any entries that start with our special prefix or have to do with our module.<br>
#<span class="hashtag">#Hiding</span> from /proc/modules<br>
On linux the /proc/ file system serves as an interface between userspace and the kernel. They are not traditional files, but rather opening, writing, or reading from then invokes a handler in the kernel that will gather the required information. By hooking the read handler for the /proc/modules file, we can filter out any lines referring to our module. In order to do this, first we need to know where the /proc/modules file is registered in the kernel.</p>
<p>After a bit of sleuthing <i>(I searched the linux source on github for ‘proc_create(“modules”)’)</i> we find <a href="https://github.com/torvalds/linux/blob/ef0010a30935de4e0211cbc7bdffc30446cdee9b/kernel/module.c#L4227" rel="nofollow noopener">the following lines</a>:</p>
<pre><code class="lang-auto">static int __init proc_modules_init(void)
{
    proc_create("modules", 0, NULL, &amp;proc_modules_operations);
    return 0;
}
</code></pre>
<p>Sweet! So proc_modules_operations is a struct that contains a the handler functions. It isn’t an exported symbol, but we are using the System.map file already, so we might as well just use it again.</p>
<p>Once it is imported, adding our hook is as simple as <code>proc_modules_operations-&gt;read  = proc_modules_read_new;</code>. In <code>proc_modules_read_new</code> we run the original read, then take the result and filter out any lines that tell on us.<br>
#<span class="hashtag">#Conclusion</span><br>
And then we have made our first linux rootkit! From here we could improve by hooking outside of the system call table, and by hiding out module from the kernel as well.</p>
<p>I hope I explained everything well. I had a lot of fun making this, and if anyone has any questions or finds a bug in my code, feel free to ask! I would also love to hear suggestions for other cool rootkit tricks! I am new to the community, so feel free to give me pointers on my post.</p>
          <p><a href="https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532/1</link>
        <pubDate>Fri, 01 Dec 2017 19:05:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-4532-1</guid>
        <source url="https://0x00sec.org/t/hiding-with-a-linux-rootkit/4532.rss">Hiding with a Linux Rootkit</source>
      </item>
  </channel>
</rss>
