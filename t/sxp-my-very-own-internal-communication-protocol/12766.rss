<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>SXP - My very own internal communication protocol</title>
    <link>https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766</link>
    <description>Hello 0x00sec,

&gt; **In the following I want to give you an idea of the inner workings of a protocol that I&#39;m currently developing.** 
&lt;br&gt;First and foremost I&#39;m looking for feedback. I&#39;m not sure in how fare anyone has experience in something like this but at least you likely know how to break it - so I get ideas on how to improve it.

![24|690x430](upload://1i6TkhqyCy3uZH51beNrFrOcy1f.png) 

In the past days I&#39;ve been working on an idea for my project.

For the project, a web platform, I wanted to be familiar with object oriented PHP, which I will use for an essential part of it.

&gt; The general architecture of the platform is based on three levels:
&gt; &lt;ul&gt;
&gt; &lt;li&gt; I/O Level 
&gt; &lt;li&gt; Processing Level
&gt; &lt;li&gt; Data Core 
&gt; &lt;/ul&gt;

As I have a lot of different modules interacting/communicating with each other, I wanted to create a standardized way how they communicate. 

&gt; **The idea of a protocol was born.**
&gt; 
&gt; **I called it SXP - for two reason:**
&gt; 1. It sounds flashy!
&gt; 2. The platform is called &quot;SCARDA&quot;, thus Scarda Exchange Protocol
&lt;br&gt;

The general concept of the protocol packet is quite easy:

    *----------------*
    |     HEADER     |
    *----------------*
    |      HASH      |
    *----------------*
    |                |
    |     BODY /     |
    |    PAYLOAD     |
    |                |
    *----------------*


The `HEADER` contains four elements:

    *--------------------*
    |  DESTINATION DEPT. |
    *--------------------*
    |  DESTINATION DIV.  |
    *--------------------*
    |    SOURCE DEPT.    |
    *--------------------*
    |     SOURCE DIV.    |
    *--------------------*


Whereas all information in the `HEADER` are represented by integers:

    DESTINATION DEPT.
    &#39;--&gt;  General Branch of Destination (what kind of module is it? Processing, Query etc.)

    DESTINATION DIV.  
    &#39;--&gt;  Specific module, such as a certain analysis module


    Same goes for the SOURCE


So, the `HEADER` tells about the WHERE:
1. Where is the packet going?
2. Where does it come from?

**Now comes the interesting part:**
Next section of the packet is the `HASH`.

I wanted to have a self-validating protocol that makes sure only the right information is transferred to the right place. So I came up the a basic idea:

When information is ready to be sent off, the `SOURCE` sends its `HEADER` to the

    IVM = Internal Validation Module

&gt; **&lt;br&gt;Then the following process takes place:**
&gt; 1. The __`IVM`__ reads the __`HEADER`__.
&gt; 2. It creates a random __` SHA512 HASH `__ (10 digit random integer to SHA512).
&gt; 2.5 This happens everytime a packet sends its __`HEADER`__ to the IVM, so each transfer has a unique __`HASH`__.
&gt; 3. It sends the __` SOURCE `__ information (two integers) and the __`HASH`__ to the __`DESTINATION`__. 
&gt; 4. At __`DESTINATION`__ the information is put on a  __`STACK / QUEUE`__.
&gt; 5. The __`IVM`__ then sends the __same__ __`HASH`__ to the __`SOURCE`__.
&gt; 6. The __`SOURCE`__ adds the __`HASH`__ to the __`HEADER`__ and loads on the __`PAYLOAD`__, here called __`BODY`__.
&gt; 7. Once ready to go, the packet is send to the __`DESTINATION`__.
&gt; 8. At __`DESTINATION`__ the packet is going to the __`STACK`__, where the actual validation happens when the __`HASHES`__ are compared.
&gt; 9. If packet and stack have the same __`HASH`__, the packet is allowed to unload its data at the __`DESTINATION`__.

&lt;br&gt;

![46|689x435](upload://by51422DLBQWsd64Td5QdeOHNTx.png) 

&lt;br&gt;

Each module is __`SOURCE`__ and __`DESTINATION`__ at the same time(except those on I/O level)  so all modules can communicate with each other.

So far, that&#39;s it.

Tthis was basically just for fun as I wanted to do something to learn OOP in PHP and didn&#39;t want to feel miserable when failing at the actual task, the backend of the platform.

&gt; However, I had two more ideas about it:
&gt; 
&gt; * Transferring this concept on the internet, where a server (?) might act as the IVM, sending those hashes to the connecting parties
&gt; 
&gt; * Transferring this concept to the very core of an OS
&gt; 
&gt; Both could be combined with a decent encryption as well to make it almost impossible to capture/infiltrate the stream of data.

As mentioned at the very beginning, I&#39;m looking forward to feedback in any form!
&lt;br&gt;
 
Cheers</description>
    
    <lastBuildDate>Sat, 06 Apr 2019 20:46:57 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>SXP - My very own internal communication protocol</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766/7</link>
        <pubDate>Sat, 04 May 2019 19:56:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12766-7</guid>
        <source url="https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766.rss">SXP - My very own internal communication protocol</source>
      </item>
      <item>
        <title>SXP - My very own internal communication protocol</title>
        <dc:creator><![CDATA[dedady157]]></dc:creator>
        <description><![CDATA[
            <p>nice, very good. make more <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766/6</link>
        <pubDate>Sat, 06 Apr 2019 20:46:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12766-6</guid>
        <source url="https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766.rss">SXP - My very own internal communication protocol</source>
      </item>
      <item>
        <title>SXP - My very own internal communication protocol</title>
        <dc:creator><![CDATA[Shellsquid]]></dc:creator>
        <description><![CDATA[
            <p>Well I think I’ll add at the very top that this was</p>
<ol>
<li>Only an exercise for me</li>
<li>That using this as a way of internet communication was just an <strong>idea</strong> not more. I dont have any plans for that and honestly for that I dont understand enough about this topic in general.</li>
</ol>
<p>However, it’s great to get any feedback so I’ll be able to work on it a bit more.</p>
<p>Sometimes things dont make sense to anyone but yourself.</p>
<p>I guess this is such thing. But thanks for your ideas and questions.</p>
<p>This is what I really like about you guys here: someone comes up with a shitty idea and you still are able to give input to make it better <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:"></p>
          <p><a href="https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766/5</link>
        <pubDate>Fri, 05 Apr 2019 10:56:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12766-5</guid>
        <source url="https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766.rss">SXP - My very own internal communication protocol</source>
      </item>
      <item>
        <title>SXP - My very own internal communication protocol</title>
        <dc:creator><![CDATA[c0wm1lk]]></dc:creator>
        <description><![CDATA[
            <p>I don’t know too much about networking, however, I find this post pretty interesting.<br>
So let me raise some concerns that I have and I hope you will be able to answer any questions I may have <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<ol>
<li>Aren’t SHA512 hashes a bit too big to be sent with every single packet? 64 bytes plus all the headers might make for some pretty bloated packets.</li>
<li>Due to there needing to be communication with a IVM first, I believe this would make packets quite slow to get to their destination, also what protocol will you use to talk to your IVM? TCP?</li>
<li>The IVM will be responsible for creating hashes by hasing a random 10 digit number, how will you generate these random numbers. Will you use the current time as the seed? Also if you open source this, can’t people figure out what hashes are being generated under what circumstances and then just bypass the entire security model?</li>
<li>Generating random 10 digit numbers and hashing them are pretty expensive operations, wouldn’t it be pretty easy to attack the IVMs with a DoS attack?</li>
</ol>
<p>Anyways even if I don’t believe this will be widely used you should still make some programs that work on this protocol to squash any design mistakes and because it’s great to practice!</p>
<p>Have a nice day <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766/4</link>
        <pubDate>Fri, 05 Apr 2019 10:20:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12766-4</guid>
        <source url="https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766.rss">SXP - My very own internal communication protocol</source>
      </item>
      <item>
        <title>SXP - My very own internal communication protocol</title>
        <dc:creator><![CDATA[Shellsquid]]></dc:creator>
        <description><![CDATA[
            <p>Wow that is more feedback than I expected!</p>
<p>I will check the mentioned things later today.</p>
<p>As you said, it is or can be a nice exercise - which it basically was for me to get used to the OO syntax in PHP (back then I learned it the procedural way).</p>
<p>Anyways, that is some valuable feedback <a class="mention" href="https://0x00sec.org/u/nitrax">@nitrax</a> so thanks a lot for it! I might improve it in the coming days/weeks - for further exercise <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766/3</link>
        <pubDate>Fri, 05 Apr 2019 09:04:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12766-3</guid>
        <source url="https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766.rss">SXP - My very own internal communication protocol</source>
      </item>
      <item>
        <title>SXP - My very own internal communication protocol</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <p>Hi <a class="mention" href="https://0x00sec.org/u/shellsquid">@Shellsquid</a>,</p>
<p>Let me summarized your idea. You want to develop a protocol whose aim is to standardized your modules inter-communications as well as implementing integrity check by ensuring, through hashes generation, the packet content, source, and destination.</p>
<p>By using a single server as IVM, you are putting yourself in a single point of failure configuration. Indeed, your whole application would be unavailable if your IVM server is down. Please consider clustering your IVM instance in order to provide redundancy and resilience.</p>
<p>On another hand, have you thought about replay attacks? Your protocol does not seem to implement timestamp check which could allow an attacker to replay previously intercepted packets.</p>
<p>Furthermore, your packets are not signed, exposing your server to packet forging. Relying your integrity check on a hash computes from such information is not enough.</p>
<p>I would also add that you forgot to take into consideration network topology in your scheme. The IVM should be deployed on a different subnet, served by a reverse proxy and protected by IP filtering to ensure that only your microservices are able to request the validation server.</p>
<p>Lastly, I wish to draw your attention to the fact that creating a protocol from scratch is far for being secure. There is no security through obscurity (kerckhoffs principle) and I advised you to use approved standards existing out there. Indeed, using X.509 certificate should be enough to ensure the legitimacy of your packet. Combined with SSL pinning, it would be impossible for an attacker to forge packet towards your microservices.</p>
<p>To conclude, from my POV, creating such a protocol could be a good exercise but is not viable in a real-world scenario.</p>
<p>Hope it helps,<br>
Best,<br>
Nitrax</p>
          <p><a href="https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766/2</link>
        <pubDate>Fri, 05 Apr 2019 08:13:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12766-2</guid>
        <source url="https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766.rss">SXP - My very own internal communication protocol</source>
      </item>
      <item>
        <title>SXP - My very own internal communication protocol</title>
        <dc:creator><![CDATA[Shellsquid]]></dc:creator>
        <description><![CDATA[
            <p>Hello 0x00sec,</p>
<blockquote>
<p><strong>In the following I want to give you an idea of the inner workings of a protocol that I’m currently developing.</strong><br>
<br>First and foremost I’m looking for feedback. I’m not sure in how fare anyone has experience in something like this but at least you likely know how to break it - so I get ideas on how to improve it.</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/090e47b9b32ca0235887379d416a052b42c833f5.png" alt="24" data-base62-sha1="1i6TkhqyCy3uZH51beNrFrOcy1f" width="690" height="430"></p>
<p>In the past days I’ve been working on an idea for my project.</p>
<p>For the project, a web platform, I wanted to be familiar with object oriented PHP, which I will use for an essential part of it.</p>
<blockquote>
<p>The general architecture of the platform is based on three levels:</p>
<ul>
<li> I/O Level 
</li>
<li> Processing Level
</li>
<li> Data Core 
</li>
</ul>
</blockquote>
<p>As I have a lot of different modules interacting/communicating with each other, I wanted to create a standardized way how they communicate.</p>
<blockquote>
<p><strong>The idea of a protocol was born.</strong></p>
<p><strong>I called it SXP - for two reason:</strong></p>
<ol>
<li>It sounds flashy!</li>
<li>The platform is called “SCARDA”, thus Scarda Exchange Protocol<br>
<br>
</li>
</ol>
</blockquote>
<p>The general concept of the protocol packet is quite easy:</p>
<pre><code>*----------------*
|     HEADER     |
*----------------*
|      HASH      |
*----------------*
|                |
|     BODY /     |
|    PAYLOAD     |
|                |
*----------------*
</code></pre>
<p>The <code>HEADER</code> contains four elements:</p>
<pre><code>*--------------------*
|  DESTINATION DEPT. |
*--------------------*
|  DESTINATION DIV.  |
*--------------------*
|    SOURCE DEPT.    |
*--------------------*
|     SOURCE DIV.    |
*--------------------*
</code></pre>
<p>Whereas all information in the <code>HEADER</code> are represented by integers:</p>
<pre><code>DESTINATION DEPT.
'--&gt;  General Branch of Destination (what kind of module is it? Processing, Query etc.)

DESTINATION DIV.  
'--&gt;  Specific module, such as a certain analysis module


Same goes for the SOURCE
</code></pre>
<p>So, the <code>HEADER</code> tells about the WHERE:</p>
<ol>
<li>Where is the packet going?</li>
<li>Where does it come from?</li>
</ol>
<p><strong>Now comes the interesting part:</strong><br>
Next section of the packet is the <code>HASH</code>.</p>
<p>I wanted to have a self-validating protocol that makes sure only the right information is transferred to the right place. So I came up the a basic idea:</p>
<p>When information is ready to be sent off, the <code>SOURCE</code> sends its <code>HEADER</code> to the</p>
<pre><code>IVM = Internal Validation Module
</code></pre>
<blockquote>
<p><strong><br>Then the following process takes place:</strong></p>
<ol>
<li>The <strong><code>IVM</code></strong> reads the <strong><code>HEADER</code></strong>.</li>
<li>It creates a random <strong><code>SHA512 HASH</code></strong> (10 digit random integer to SHA512).<br>
2.5 This happens everytime a packet sends its <strong><code>HEADER</code></strong> to the IVM, so each transfer has a unique <strong><code>HASH</code></strong>.</li>
<li>It sends the <strong><code>SOURCE</code></strong> information (two integers) and the <strong><code>HASH</code></strong> to the <strong><code>DESTINATION</code></strong>.</li>
<li>At <strong><code>DESTINATION</code></strong> the information is put on a  <strong><code>STACK / QUEUE</code></strong>.</li>
<li>The <strong><code>IVM</code></strong> then sends the <strong>same</strong> <strong><code>HASH</code></strong> to the <strong><code>SOURCE</code></strong>.</li>
<li>The <strong><code>SOURCE</code></strong> adds the <strong><code>HASH</code></strong> to the <strong><code>HEADER</code></strong> and loads on the <strong><code>PAYLOAD</code></strong>, here called <strong><code>BODY</code></strong>.</li>
<li>Once ready to go, the packet is send to the <strong><code>DESTINATION</code></strong>.</li>
<li>At <strong><code>DESTINATION</code></strong> the packet is going to the <strong><code>STACK</code></strong>, where the actual validation happens when the <strong><code>HASHES</code></strong> are compared.</li>
<li>If packet and stack have the same <strong><code>HASH</code></strong>, the packet is allowed to unload its data at the <strong><code>DESTINATION</code></strong>.</li>
</ol>
</blockquote>
<br>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/50f228425be9317a2216c2c434f00f490a0fb67f.png" alt="46" data-base62-sha1="by51422DLBQWsd64Td5QdeOHNTx" width="689" height="435"></p>
<br>
<p>Each module is <strong><code>SOURCE</code></strong> and <strong><code>DESTINATION</code></strong> at the same time(except those on I/O level)  so all modules can communicate with each other.</p>
<p>So far, that’s it.</p>
<p>Tthis was basically just for fun as I wanted to do something to learn OOP in PHP and didn’t want to feel miserable when failing at the actual task, the backend of the platform.</p>
<blockquote>
<p>However, I had two more ideas about it:</p>
<ul>
<li>
<p>Transferring this concept on the internet, where a server (?) might act as the IVM, sending those hashes to the connecting parties</p>
</li>
<li>
<p>Transferring this concept to the very core of an OS</p>
</li>
</ul>
<p>Both could be combined with a decent encryption as well to make it almost impossible to capture/infiltrate the stream of data.</p>
</blockquote>
<p>As mentioned at the very beginning, I’m looking forward to feedback in any form!<br>
<br></p>
<p>Cheers</p>
          <p><a href="https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766/1</link>
        <pubDate>Thu, 04 Apr 2019 19:56:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12766-1</guid>
        <source url="https://0x00sec.org/t/sxp-my-very-own-internal-communication-protocol/12766.rss">SXP - My very own internal communication protocol</source>
      </item>
  </channel>
</rss>
