<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
    <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980</link>
    <description>Hey 0x00ers!

I&#39;m so sorry that it&#39;s been such a long time since I&#39;ve dropped an article here! I&#39;ve been writing for my current company navisec.io @ delta.navisec.io and I&#39;ve not had the chance to drop a good article for 0x00sec for a little while.

Today that is changing! Whoop!

In this article I&#39;m going to discuss CTF methodology, really, this links in so closely to real life penetration methodology (if you were scoped down to an internal or to a single machine).

Specifically, we&#39;re going to be discussing boot2root CTF&#39;s, things such as HackTheBox.eu, and how I generally go about pwning a box.

### The Basics - what is our objective?

Usually, the objective of these CTF&#39;s is to obtain a shell, usually unprivileged, and then escalate your privileges to gain access to root. Occasionally this doesn&#39;t necessarily mean you have to obtain a root shell, but be people to read/write files as root, (which with more time could be used to gain a root shell).

As per hackthebox, you usually have these two files known as flags stored on the machine. On Linux machines the &quot;user.txt&quot; flag denotes a user own, and is stored in /home/someusername/user.txt, and on Linux, the &quot;root.txt&quot; flag file is stored in /root/root.txt.

On windows boxes, these files are usually stored in C:\Users\Username\Desktop\user.txt, and C:\Users\Administrator\Desktop\root.txt respectively. 

When you gain access to these files, you just need to view the contents (`cat`/`type`) and copy the code into the HackTheBox page for that box.

### How do we even start?
Ok, so now you know what you&#39;re trying to achieve, you need to know where to start.

I recommend now if you&#39;re reading so far, and you are not familiar with basic networking, Linux or Windows basic usage, and scripting languages such as python/ruby, then you&#39;re not ready for CTF&#39;s. For networking [watch this](https://www.youtube.com/watch?v=n2D1o-aM-2s) and for Linux [watch this](https://www.youtube.com/watch?v=x73WTEltyHU). Obviously, this is nowhere near enough to get started but it should provide some structure for absolute newbies!

 The first stage of hacking is enumeration.
  
### Enumeration
Enumeration is the stage where we attempt to collect as much information as we can from the host before even trying to exploit anything. I will easily spend 1-2 hours of enumeration on a medium box. Take your time with this step, never rush this. Go very slow, read everything, save anything and everything in your notes that might be relevant later.

For a quick reference containing everything here, read [this](https://delta.navisec.io/web-enumeration-reference/).

#### Port scanning
Typically in a CTF, I will begin with a portscan.

This is the real nmap scan I use for SwagShop this weekend.
```
sudo nmap -v -sS -A -Pn -T5 -p- -oN swagshop.txt 10.10.10.140
```
Just to make sure you&#39;re not missing anything a quick UDP scan, since this is so slow I generally won&#39;t wait for it and will just go ahead while it&#39;s running. 

```
sudo nmap -v -sU -T5 -oN swagshop-udp.txt 10.10.10.140
```

You rarely will find UDP ports open &amp; relevant in CTF&#39;s, but they can catch you out (for example Access). 

This command will return your nmap results, very often if it&#39;s a Linux box, you&#39;ll end up with a webserver on port 80, maybe 443, and port 22 open. Bruteforcing SSH is rarely fruitful and something I will only ever do if i&#39;m scrabbling for access (I&#39;ve never bruteforced successfully on a HTB before).

Now that you&#39;ve done a network map, you need to enumerate each service. So in our case:
```
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 b6:55:2b:d2:4e:8f:a3:81:72:61:37:9a:12:f6:24:ec (RSA)
|   256 2e:30:00:7a:92:f0:89:30:59:c1:77:56:ad:51:c0:ba (ECDSA)
|_  256 4c:50:d5:f2:70:c5:fd:c4:b2:f0:bc:42:20:32:64:34 (ED25519)
80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))
|_http-favicon: Unknown favicon MD5: 88733EE53676A47FC354A61C32516E82
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-title: Home page
```

#### Service Enumeration

Now I will write down things such as the OpenSSH version, the distribution discovered via this fingerprint. I will also do the same for HTTP. Generally, to ensure I&#39;m not missing anything dumb, I will search [https://www.exploit-db.com/](https://www.exploit-db.com/) for these version numbers.

(Tip, if you get a version like OpenSSH 7.2p2, search SSH 7.2, or OpenSSH 7 and look over the results. You might find that the description on the exploit is like &quot;&lt; 7.3&quot;. )

Quite often, I will not find a full on RCE here, if I do spot an RCE, I&#39;ll fire up metasploit and search the software as well. Sometimes there are exploits in here (and vice versa). You&#39;re probably noticing the trend here is &quot;just check in case&quot;. As @cry0lit3 always says, leave no stone unturned. 

If you&#39;re on a Windows box, you might find that port 21 is open, port 139, 445 are open. If this is the case, try and connect to FTP (I use ncftp thanks to @guly), note down the version numbers, try and connect with the &quot;Anonymous&quot; user. For 139 and 445, try and enumerate SMB. 

```
smbclient -L 10.10.10.140
``` 
This will return shares listed in SMB. Once you&#39;ve got a few, use smbclient to try and connect to each one.

```
smbclient //10.10.10.140/TheShare
```
This will prompt you for a password, you can also specify a username with the -U flag. If your credentials are successful, you will be dropped into an interactive prompt similar to that of FTP and you&#39;ll be able to navigate files and download files. 

You can also use the SMB script that comes with nmap, 
```
nmap -p445 -sV --script smb-enum-services 10.10.10.140
```
This script works ok, but it&#39;s best to try both.

### HTTP Enumeration
A crucial part of lots of hacktheboxes and CTF&#39;s is HTTP enumeration. I love using Burpsuite for this, setup burpsuite and proxy all your requests, if you have pro, do an active spider. Click through the entire website and click everything, every link, the file structure will be populated in the left-hand side of the Burpsuite window. I strongly recommend flipping through each request and nothing things such as the request cookies, the response headers, and scanning through the web source. You might get lucky and find some comments containing a hint!

Now that you&#39;ve completed some level of passive reconnaissance, go in hard with the active. I will generally begin this step before I do passive enum just for the sake of efficiency. 

There are many different tools you can use here, but I really like gobuster.

```
gobuster -w SecLists/Discovery/Web_Content/big.txt -u http://10.10.10.140/
```

You can also chuck in the -x flag and supply some different extensions if the app has a lot of aspx pages I will chuck on `-x aspx`. Focus this bit depending on what you&#39;re dealing with, is it a NodeJS app? Try `-x js,json`.  It&#39;s unlikely you&#39;ll find a .php page on a NodeJS app.   

For good measure, once I&#39;ve run this and begin investigating further, I will chuck this at it:

```
gobuster -w SecLists/Discovery/Web_Content/raft-large-files.txt -u http://10.10.10.140/
```
Once I&#39;ve gotten a list of different directories that have been discovered, I will visit them, curl them, and investigate further. Usually, on an easy box, you&#39;ll find something you might be able to exploit here, or maybe just more hints! 

What you find might happen is that the developer has been crafty and enabled wildcard directories. This is a common thing on harder boxes and you will often notice that this the developer&#39;s way of telling you &quot;its not by dirbusting!&quot;. Sometimes, though, they might hide something inside this, maybe a comment or a page with a 404 not found status code, but with something inside the source, you can use burp intruder and examine the response lengths if you feel this might be the case. 

Again - examine all of your traffic through Burp, its so invaluable to be able to read the source. Doing this would of gotten me a foothold on OneTwoSeven so much quicker!

#### Finding subdomains with SSL certs
If you find that port 443 is open, or an SSL port is open, you might be able to leverage this to get yourself some subdomains! You can either click on the cert and navigate and read all the information until you find some other valid certnames.

Or you can use this one-liner, (I recommend doing both though).

```
echo | openssl s_client -connect 0x00sec.org:443  | openssl x509 -noout -text | grep DNS | sed &#39;s/,/\n/g&#39;
```

Once you&#39;ve got these, put them in your hosts file or try and request with curl:

```
curl -vv &#39;Host: yournewdomain.com&#39; 10.10.10.40
```
You might get lucky! If you want to bruteforce these, you can use the `auxiliary/scanner/http/vhost_scanner` module in Metasploit. 

### Exploitation
Now that you&#39;ve enumerated a bunch, and hopefully organized this into a nice set of notes (I usually just use a text file), I recommend (taking your time), and going over the data you&#39;ve collected. Focus on trying to use your current gathered information to gain and gather more information. Perhaps you read some text on the website that suggested the username or potential name of the fictional user of the system. 

If you&#39;ve obtained creds, try them everywhere! And note down that you&#39;ve tried them. Noting down what you&#39;ve tried and being methodical is so useful.

Now after you&#39;ve reviewed your notes, you will likely find that something pops into your head; an &quot;OH OF COURSE&quot; moment. If you&#39;ve done your enumeration well enough, you should see the path that has been laid out for you pretty clearly. Whether that is a vulnerable webapp, a wordpress instance located in a sub path, a status page giving you more information, an LDAP instance that is leaking hashes (that you can crack!), an LFI that you can get ssh private keys from!

Try and think through what the app does, what the system is, and how it works. Where is it communicating? How did the developer design this? How might this be vulnerable?

Once you&#39;ve found this path, try and exploit it. Depending on the difficulty of the box, you might need to spend a little while on this. Google is your best friend! If you&#39;re really struggling, you can look over some hints from the HackTheBox forums, but remember, if you&#39;re planning on doing the OSCP, you won&#39;t get the luxury of these hints. Usually, this involves getting a shell, for a quick shell reference [this](https://delta.navisec.io/reverse-shell-reference/) can be very helpful.

### Getting the Root!
Now really, since this is not intended to be an exhaustive article on enumeration, but more of a quick overview of CTF methodology. I won&#39;t go too deep into rooting and privesc. The metholodgy is exactly the same for me. Collect as much information as possible, organize your collected data and then the path should reveal itself.

If you want a privesc reference, check [this](https://delta.navisec.io/privilege-escalation/]) out!

### Conclusion
In conclusion, the methodology of gaining access to a CTF box contains a few steps:
- Information gathering
- More information gathering
- Review your collected information
- Exploit the path that you&#39;ve been shown by the hacker gods
- Repeat

It&#39;s dead easy when you think about it like this, and really taking your time is invaluable. If you don&#39;t see a path, just keep enumerating. You&#39;ll find something, it just might take a LOT of enumeration. In many ways, knowing the path to exploitation but just struggling on the actual exploitation execution is a really rewarding feeling, because finding that flaw to exploit is literally half the battle.

I hope this was helpful, and not too scrappy, this was thrown together in a mad blaze of creativity before my workday. If you spot any typo&#39;s let me know and I&#39;ll fix it.

What does your CTF methodology look like? Do you have a different approach or tips for others on this topic? Please let me know!

Thanks, 0x00ers!

Stay snappy ;)</description>
    
    <lastBuildDate>Thu, 12 Dec 2019 11:32:01 +0000</lastBuildDate>
    <category>CTF</category>
    <atom:link href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Yes that’s a great idea!</p>
<p>Start a <a href="http://hackmd.io">hackmd.io</a> document?</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/25">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/25</link>
        <pubDate>Mon, 28 Oct 2019 13:48:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-25</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[clarkee]]></dc:creator>
        <description><![CDATA[
            <p>Not a question per se, but I think it would be cool if we put together guides on different “in roads”,</p>
<p>ie after you get admin access to the web app what are the common things to look for (eg, file upload and filter evasion, lfi, rfi, template editing etc.)</p>
<p>or the different things you can do if you have access to smb shares or anon ftp… there’s a lot more to do than the usual CTF “collect the files and follow the clues” type stuff.</p>
<p>(afterall, this is where it gets <em>interesting</em> imho <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:">)</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/24">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/24</link>
        <pubDate>Mon, 28 Oct 2019 12:35:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-24</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Cheeky bump - does anybody have any questions regarding HTB and their methodology? Any suggestions? Now is the time to ask!</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/20">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/20</link>
        <pubDate>Tue, 17 Sep 2019 13:08:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-20</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/19">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/19</link>
        <pubDate>Tue, 17 Sep 2019 13:07:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-19</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/18">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/18</link>
        <pubDate>Thu, 27 Jun 2019 12:35:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-18</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[Cgboal]]></dc:creator>
        <description><![CDATA[
            <p>Pretty awesome man, thanks for this. Hadn’t  considered trying SSL cert domain enum for virtual hosts on HTB.</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/17">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/17</link>
        <pubDate>Wed, 12 Jun 2019 09:00:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-17</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[xYantix]]></dc:creator>
        <description><![CDATA[
            <p>Great guide! A really good base on how to tackle these boxes. This approach might not suit everyone but I think it’s good to understand how others tackle various situations.</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/16">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/16</link>
        <pubDate>Mon, 10 Jun 2019 11:52:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-16</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[c0wm1lk]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for letting me know, and if there are no clicks on a link that probably means it’s broken somehow <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/15</link>
        <pubDate>Mon, 10 Jun 2019 10:57:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-15</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Ugh! I thought I fixed it. I will fix this when I get a reliable internet connection.</p>
<p>It’s the DNS and web enumeration reference on <a href="http://delta.navisec.io">delta.navisec.io</a></p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/14</link>
        <pubDate>Sun, 09 Jun 2019 07:36:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-14</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[c0wm1lk]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-VIP" data-username="pry0cc" data-post="1" data-topic="13980">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/pry0cc/40/6_2.png" class="avatar"> pry0cc:</div>
<blockquote>
<p>For a quick reference containing everything here, read this.</p>
</blockquote>
</aside>
<p>Could you please tell me where the clickable “this” leads to? It doesn’t open any page when I click on it and I’m curious to what it leads.</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/13</link>
        <pubDate>Sat, 08 Jun 2019 13:20:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-13</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[SecurityFlaw]]></dc:creator>
        <description><![CDATA[
            <p>Nice one. More of this texts please.<br>
Really informative!</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/12</link>
        <pubDate>Fri, 07 Jun 2019 19:53:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-12</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Hey man! I’m glad you got some value from this.</p>
<p>I completely agree, enumeration is the name of the game. If you can’t pop it, you’ve not enumerated enough - generally.</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/11</link>
        <pubDate>Fri, 07 Jun 2019 10:03:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-11</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[hostile.node]]></dc:creator>
        <description><![CDATA[
            <p>Gobuster is excellent and is my go-to tool for HTTP enumeration as well. It’s important to keep in mind that it is not recursive though, and that adding 401 to the list of status codes to report is useful. And bump the threads, <em>-t 50</em> has worked nicely on HTB so far.</p>
<p>As you’ve said, enumerating is a crucial step. The “enumerate, enumerate, enumerate” mantra that gets thrown around can’t be overstated: comprehensive information gathering can save many headaches.</p>
<p>Good shout about extracting subdomains from the certificate, too.</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/10</link>
        <pubDate>Fri, 07 Jun 2019 09:15:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-10</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[c0wm1lk]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for this amazing guide, I’m keeping this pinned for later, I currently haven’t pwn’d any boxes yet but I’ve been making work of it by reading writeups and watching walkthroughs and trying it myself and failing.</p>
<p>However I think there might be a little error in your guide:</p>
<aside class="quote group-VIP" data-username="pry0cc" data-post="1" data-topic="13980">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/pry0cc/40/6_2.png" class="avatar"> pry0cc:</div>
<blockquote>
<p>For a quick reference containing everything here, read this.</p>
</blockquote>
</aside>
<p>The “this” shows up as if it was a link but it’s unclickable.<br>
I’d love to know where it leads to so therefore the little remark <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/9</link>
        <pubDate>Sun, 02 Jun 2019 18:09:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-9</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[Sea]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Alice" data-post="6" data-topic="13980">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/alice/40/7706_2.png" class="avatar"> Alice:</div>
<blockquote>
<p>I do suggest you take a couple of hours or so and read Hacker’s Playbook Volume 3</p>
</blockquote>
</aside>
<p>The Hacker’s Playbook 3 shows you how to re-create real attacks for red teaming. It was written with that objective in mind, so it goes into far more detail than a post like this to enable you to explain to your client what you are doing and how they can improve their defenses.</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/8</link>
        <pubDate>Fri, 31 May 2019 15:16:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-8</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[overcast]]></dc:creator>
        <description><![CDATA[
            <p>I’d agree with <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> on this one. While HVAC and SCADA hacking does happen, there is a reason why MITRE ATT&amp;CK and the OWASP Top 10 exist - these things are far more common, and those vulnerabilities appear on many HTB boxes.</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/7</link>
        <pubDate>Wed, 29 May 2019 16:39:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-7</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[Alice]]></dc:creator>
        <description><![CDATA[
            <p>I disagree, but I doubt you and I both have the experience to back our claims up. Mirai for one thing infected IoT devices and last I checked, IoT devices are now being secured via a key encryption thing… Eternalblue was a joke in my opinion. Only reason why it was effective was because it was easy to re-arm. My suspicions are more toward HVAC and SCADA as the next ‘disaster in the making’. The ICS devices in general are vulnerable as far as I can tell and also, controls the infrastructure of a country which is a necessity of a country to function.</p>
<p>I do suggest you take a couple of hours or so and read Hacker’s Playbook Volume 3. There are a lot of stuff in there that I feel can better explain what I am trying to well… explain.</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/6</link>
        <pubDate>Tue, 28 May 2019 20:02:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-6</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>I’m glad man! I cannot wait for you to get back into HTB! It’s so much fun and getting that root is the best feeling ever.</p>
<p>Don’t put too much pressure on yourself, go slow and enjoy the ride. Get lost in the rabbit holes and don’t be too hard on yourself. It’s like a muscle, you gotta go easy when you’ve not flexed it for a while.</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/5</link>
        <pubDate>Tue, 28 May 2019 17:34:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-5</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>I really have no idea what you’re talking about.</p>
<p>There are some really realistic boxes on HTB. Even ctfy boxes teach you a lot about enumeration.</p>
<p>Boxes like Querier &amp; Access are hella realistic. But then again, I guess it’s never going to be as easy as “hacking” a printer that’s completely open with a web GUI <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>With regards to realistic threats, the actual realistic threats are unpatched eternalblue and open FTP shares. It’s the stupid stuff that causes stuff like Mirai, not some 1337 0day.</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/4</link>
        <pubDate>Tue, 28 May 2019 17:33:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-4</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[Kage]]></dc:creator>
        <description><![CDATA[
            <p>That’s a great resource, thanks pry! The links you’ve shared are as invaluable as the rest of your content. This post boosted my motivation to boot up my Linux machine and work on some HTB machines.</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/3</link>
        <pubDate>Tue, 28 May 2019 14:14:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-3</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[Alice]]></dc:creator>
        <description><![CDATA[
            <p>For nmap, I usually use the -sV (service scan) instead of -sS and if need be, I run a  FIN scan (-sF), but that is unreliable because the nature of how the packets are sent and received. Of course there is also the X-mas and NULL scans. I think that sV is the same as sS packet wise, but whatever.</p>
<p>I should note that <strong>MOST</strong> CTF’s that I have seen aren’t that realistic especially when we are talking the real world threats that are actually problematic.</p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/2</link>
        <pubDate>Tue, 28 May 2019 13:11:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-2</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
      <item>
        <title>My HackTheBox CTF Methodology - From fresh box to root!</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Hey 0x00ers!</p>
<p>I’m so sorry that it’s been such a long time since I’ve dropped an article here! I’ve been writing for my current company <a href="http://navisec.io">navisec.io</a> @ <a href="http://delta.navisec.io">delta.navisec.io</a> and I’ve not had the chance to drop a good article for 0x00sec for a little while.</p>
<p>Today that is changing! Whoop!</p>
<p>In this article I’m going to discuss CTF methodology, really, this links in so closely to real life penetration methodology (if you were scoped down to an internal or to a single machine).</p>
<p>Specifically, we’re going to be discussing boot2root CTF’s, things such as HackTheBox.eu, and how I generally go about pwning a box.</p>
<h3>The Basics - what is our objective?</h3>
<p>Usually, the objective of these CTF’s is to obtain a shell, usually unprivileged, and then escalate your privileges to gain access to root. Occasionally this doesn’t necessarily mean you have to obtain a root shell, but be people to read/write files as root, (which with more time could be used to gain a root shell).</p>
<p>As per hackthebox, you usually have these two files known as flags stored on the machine. On Linux machines the “user.txt” flag denotes a user own, and is stored in /home/someusername/user.txt, and on Linux, the “root.txt” flag file is stored in /root/root.txt.</p>
<p>On windows boxes, these files are usually stored in C:\Users\Username\Desktop\user.txt, and C:\Users\Administrator\Desktop\root.txt respectively.</p>
<p>When you gain access to these files, you just need to view the contents (<code>cat</code>/<code>type</code>) and copy the code into the HackTheBox page for that box.</p>
<h3>How do we even start?</h3>
<p>Ok, so now you know what you’re trying to achieve, you need to know where to start.</p>
<p>I recommend now if you’re reading so far, and you are not familiar with basic networking, Linux or Windows basic usage, and scripting languages such as python/ruby, then you’re not ready for CTF’s. For networking <a href="https://www.youtube.com/watch?v=n2D1o-aM-2s">watch this</a> and for Linux <a href="https://www.youtube.com/watch?v=x73WTEltyHU">watch this</a>. Obviously, this is nowhere near enough to get started but it should provide some structure for absolute newbies!</p>
<p>The first stage of hacking is enumeration.</p>
<h3>Enumeration</h3>
<p>Enumeration is the stage where we attempt to collect as much information as we can from the host before even trying to exploit anything. I will easily spend 1-2 hours of enumeration on a medium box. Take your time with this step, never rush this. Go very slow, read everything, save anything and everything in your notes that might be relevant later.</p>
<p>For a quick reference containing everything here, read <a href="https://delta.navisec.io/web-enumeration-reference/">this</a>.</p>
<h4>Port scanning</h4>
<p>Typically in a CTF, I will begin with a portscan.</p>
<p>This is the real nmap scan I use for SwagShop this weekend.</p>
<pre><code class="lang-auto">sudo nmap -v -sS -A -Pn -T5 -p- -oN swagshop.txt 10.10.10.140
</code></pre>
<p>Just to make sure you’re not missing anything a quick UDP scan, since this is so slow I generally won’t wait for it and will just go ahead while it’s running.</p>
<pre><code class="lang-auto">sudo nmap -v -sU -T5 -oN swagshop-udp.txt 10.10.10.140
</code></pre>
<p>You rarely will find UDP ports open &amp; relevant in CTF’s, but they can catch you out (for example Access).</p>
<p>This command will return your nmap results, very often if it’s a Linux box, you’ll end up with a webserver on port 80, maybe 443, and port 22 open. Bruteforcing SSH is rarely fruitful and something I will only ever do if i’m scrabbling for access (I’ve never bruteforced successfully on a HTB before).</p>
<p>Now that you’ve done a network map, you need to enumerate each service. So in our case:</p>
<pre><code class="lang-auto">PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 b6:55:2b:d2:4e:8f:a3:81:72:61:37:9a:12:f6:24:ec (RSA)
|   256 2e:30:00:7a:92:f0:89:30:59:c1:77:56:ad:51:c0:ba (ECDSA)
|_  256 4c:50:d5:f2:70:c5:fd:c4:b2:f0:bc:42:20:32:64:34 (ED25519)
80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))
|_http-favicon: Unknown favicon MD5: 88733EE53676A47FC354A61C32516E82
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-title: Home page
</code></pre>
<h4>Service Enumeration</h4>
<p>Now I will write down things such as the OpenSSH version, the distribution discovered via this fingerprint. I will also do the same for HTTP. Generally, to ensure I’m not missing anything dumb, I will search <a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a> for these version numbers.</p>
<p>(Tip, if you get a version like OpenSSH 7.2p2, search SSH 7.2, or OpenSSH 7 and look over the results. You might find that the description on the exploit is like “&lt; 7.3”. )</p>
<p>Quite often, I will not find a full on RCE here, if I do spot an RCE, I’ll fire up metasploit and search the software as well. Sometimes there are exploits in here (and vice versa). You’re probably noticing the trend here is “just check in case”. As <span class="mention">@cry0lit3</span> always says, leave no stone unturned.</p>
<p>If you’re on a Windows box, you might find that port 21 is open, port 139, 445 are open. If this is the case, try and connect to FTP (I use ncftp thanks to <a class="mention" href="https://0x00sec.org/u/guly">@guly</a>), note down the version numbers, try and connect with the “Anonymous” user. For 139 and 445, try and enumerate SMB.</p>
<pre><code class="lang-auto">smbclient -L 10.10.10.140
</code></pre>
<p>This will return shares listed in SMB. Once you’ve got a few, use smbclient to try and connect to each one.</p>
<pre><code class="lang-auto">smbclient //10.10.10.140/TheShare
</code></pre>
<p>This will prompt you for a password, you can also specify a username with the -U flag. If your credentials are successful, you will be dropped into an interactive prompt similar to that of FTP and you’ll be able to navigate files and download files.</p>
<p>You can also use the SMB script that comes with nmap,</p>
<pre><code class="lang-auto">nmap -p445 -sV --script smb-enum-services 10.10.10.140
</code></pre>
<p>This script works ok, but it’s best to try both.</p>
<h3>HTTP Enumeration</h3>
<p>A crucial part of lots of hacktheboxes and CTF’s is HTTP enumeration. I love using Burpsuite for this, setup burpsuite and proxy all your requests, if you have pro, do an active spider. Click through the entire website and click everything, every link, the file structure will be populated in the left-hand side of the Burpsuite window. I strongly recommend flipping through each request and nothing things such as the request cookies, the response headers, and scanning through the web source. You might get lucky and find some comments containing a hint!</p>
<p>Now that you’ve completed some level of passive reconnaissance, go in hard with the active. I will generally begin this step before I do passive enum just for the sake of efficiency.</p>
<p>There are many different tools you can use here, but I really like gobuster.</p>
<pre><code class="lang-auto">gobuster -w SecLists/Discovery/Web_Content/big.txt -u http://10.10.10.140/
</code></pre>
<p>You can also chuck in the -x flag and supply some different extensions if the app has a lot of aspx pages I will chuck on <code>-x aspx</code>. Focus this bit depending on what you’re dealing with, is it a NodeJS app? Try <code>-x js,json</code>.  It’s unlikely you’ll find a .php page on a NodeJS app.</p>
<p>For good measure, once I’ve run this and begin investigating further, I will chuck this at it:</p>
<pre><code class="lang-auto">gobuster -w SecLists/Discovery/Web_Content/raft-large-files.txt -u http://10.10.10.140/
</code></pre>
<p>Once I’ve gotten a list of different directories that have been discovered, I will visit them, curl them, and investigate further. Usually, on an easy box, you’ll find something you might be able to exploit here, or maybe just more hints!</p>
<p>What you find might happen is that the developer has been crafty and enabled wildcard directories. This is a common thing on harder boxes and you will often notice that this the developer’s way of telling you “its not by dirbusting!”. Sometimes, though, they might hide something inside this, maybe a comment or a page with a 404 not found status code, but with something inside the source, you can use burp intruder and examine the response lengths if you feel this might be the case.</p>
<p>Again - examine all of your traffic through Burp, its so invaluable to be able to read the source. Doing this would of gotten me a foothold on OneTwoSeven so much quicker!</p>
<h4>Finding subdomains with SSL certs</h4>
<p>If you find that port 443 is open, or an SSL port is open, you might be able to leverage this to get yourself some subdomains! You can either click on the cert and navigate and read all the information until you find some other valid certnames.</p>
<p>Or you can use this one-liner, (I recommend doing both though).</p>
<pre><code class="lang-auto">echo | openssl s_client -connect 0x00sec.org:443  | openssl x509 -noout -text | grep DNS | sed 's/,/\n/g'
</code></pre>
<p>Once you’ve got these, put them in your hosts file or try and request with curl:</p>
<pre><code class="lang-auto">curl -vv 'Host: yournewdomain.com' 10.10.10.40
</code></pre>
<p>You might get lucky! If you want to bruteforce these, you can use the <code>auxiliary/scanner/http/vhost_scanner</code> module in Metasploit.</p>
<h3>Exploitation</h3>
<p>Now that you’ve enumerated a bunch, and hopefully organized this into a nice set of notes (I usually just use a text file), I recommend (taking your time), and going over the data you’ve collected. Focus on trying to use your current gathered information to gain and gather more information. Perhaps you read some text on the website that suggested the username or potential name of the fictional user of the system.</p>
<p>If you’ve obtained creds, try them everywhere! And note down that you’ve tried them. Noting down what you’ve tried and being methodical is so useful.</p>
<p>Now after you’ve reviewed your notes, you will likely find that something pops into your head; an “OH OF COURSE” moment. If you’ve done your enumeration well enough, you should see the path that has been laid out for you pretty clearly. Whether that is a vulnerable webapp, a wordpress instance located in a sub path, a status page giving you more information, an LDAP instance that is leaking hashes (that you can crack!), an LFI that you can get ssh private keys from!</p>
<p>Try and think through what the app does, what the system is, and how it works. Where is it communicating? How did the developer design this? How might this be vulnerable?</p>
<p>Once you’ve found this path, try and exploit it. Depending on the difficulty of the box, you might need to spend a little while on this. Google is your best friend! If you’re really struggling, you can look over some hints from the HackTheBox forums, but remember, if you’re planning on doing the OSCP, you won’t get the luxury of these hints. Usually, this involves getting a shell, for a quick shell reference <a href="https://delta.navisec.io/reverse-shell-reference/">this</a> can be very helpful.</p>
<h3>Getting the Root!</h3>
<p>Now really, since this is not intended to be an exhaustive article on enumeration, but more of a quick overview of CTF methodology. I won’t go too deep into rooting and privesc. The metholodgy is exactly the same for me. Collect as much information as possible, organize your collected data and then the path should reveal itself.</p>
<p>If you want a privesc reference, check <a href="https://delta.navisec.io/privilege-escalation/%5D">this</a> out!</p>
<h3>Conclusion</h3>
<p>In conclusion, the methodology of gaining access to a CTF box contains a few steps:</p>
<ul>
<li>Information gathering</li>
<li>More information gathering</li>
<li>Review your collected information</li>
<li>Exploit the path that you’ve been shown by the hacker gods</li>
<li>Repeat</li>
</ul>
<p>It’s dead easy when you think about it like this, and really taking your time is invaluable. If you don’t see a path, just keep enumerating. You’ll find something, it just might take a LOT of enumeration. In many ways, knowing the path to exploitation but just struggling on the actual exploitation execution is a really rewarding feeling, because finding that flaw to exploit is literally half the battle.</p>
<p>I hope this was helpful, and not too scrappy, this was thrown together in a mad blaze of creativity before my workday. If you spot any typo’s let me know and I’ll fix it.</p>
<p>What does your CTF methodology look like? Do you have a different approach or tips for others on this topic? Please let me know!</p>
<p>Thanks, 0x00ers!</p>
<p>Stay snappy <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980/1</link>
        <pubDate>Tue, 28 May 2019 12:35:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13980-1</guid>
        <source url="https://0x00sec.org/t/my-hackthebox-ctf-methodology-from-fresh-box-to-root/13980.rss">My HackTheBox CTF Methodology - From fresh box to root!</source>
      </item>
  </channel>
</rss>
