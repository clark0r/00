<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</title>
    <link>https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216</link>
    <description>Hey guys, 
I&#39;ve been working on a huge project since the beginning of August, and now that finals are done I plan to be working more on it. But before I start adding too many more features, I would really like some people to test it out in its current state and give me feedback. So I thought posting it here would be a good way to do that :smiley:

Without further ado, let me introduce you to Bashfuscator, a modular Bash obfuscation framework written in Python 3.

![](//0x00sec.s3.dualstack.us-east-1.amazonaws.com/original/2X/f/fc13518e2732d419dde3f109512da9b87bdb17ef.png)

Link: https://github.com/Bashfuscator/Bashfuscator

Demo video: https://asciinema.org/a/6LmMVyoxUbDIwvl5yzynVbrS1

Example obfuscated payload (input is `cat /etc/passwd`):

```bash
${@~}eval &quot;$(pr&quot;&quot;i&#39;&#39;n\t${@%%G}f &quot;\x$(&quot;&quot;${*##x:}prin&quot;&quot;$&#39;\x74&#39;f %s &#39;P?&#39;|${*//_f/M:}md5\s&#39;&#39;\um|${@,,}c&quot;&quot;\ut -b 24-25)&quot;&quot;${@^^}&quot;;${*~~}prin&#39;&#39;t\f &quot;\x$(prin&quot;${@,,}&quot;tf %s &#39;~&#39;|${*%%&gt;}m$&#39;\144&#39;5s$&#39;\165&#39;\m|${*##hG}$&#39;\x63&#39;$&#39;\x75&#39;${@##N|}t -b 4-5)&quot;;&#39;&#39;${*%%Z}print$&#39;\x66&#39; &quot;\x$(p&#39;&#39;r$&#39;\x69&#39;n&quot;&quot;\t$&#39;\x66&#39; %s &#39;2[&#39;|md${*##+}5&quot;&quot;sum|${@##l}cu${!@}t -b 17-18${@^^})&quot;${*^}&amp;&amp;p&quot;&quot;r&quot;&quot;$&#39;\151&#39;ntf &quot;\x$($&#39;\x70&#39;r${@/m}int$&#39;\x66&#39; %s &#39;1&#39;|${*,}m\d5${!*}su$&#39;\155&#39;|${*%%E}c${*%%#}ut -b 16-17)&quot;;$&#39;\160&#39;&#39;&#39;\r$&#39;\151&#39;\n&quot;&quot;t&quot;&quot;${@,}f &quot;\x$(p\rintf %s &#39;t9&#39;${*//i/wm}|${*/J\)}m&quot;${@//j/6=}&quot;d5s&#39;&#39;um|&quot;${@}&quot;&#39;&#39;c${*#L\{}u${*//0}t -b 2-3${*})&quot;&amp;&amp;${*~~}pri&#39;&#39;nt\f &quot;\x$(p\ri$&#39;\x6e&#39;t\f %s &#39;g}&#39;${*//\!J}|$@m&#39;&#39;${*~}d5su${@/99}m|${*/7}&quot;${@,}&quot;c&#39;&#39;ut -b 2-3)&quot;&quot;${@//#p/B\(}&quot;;p&quot;&quot;${*#=}r${*/\{/]}in$&#39;\x74&#39;f &quot;\x$(\p&quot;${@,,}&quot;rin$&#39;\x74&#39;\f %s &#39;sW&#39;|md\5&#39;&#39;su&quot;&quot;m&quot;${@//rR/#i}&quot;|cut -b 7-8)&quot;&amp;&amp;&quot;&quot;\p$&#39;\x72&#39;$&#39;\x69&#39;nt\f &quot;\x$(p&quot;&quot;${*//3U}r${*,}in${*/me}t&#39;&#39;f %s &#39;.&#39;${@%g}|&#39;&#39;&quot;${@~}&quot;md\5$&#39;\x73&#39;${*%#X}um|&quot;${@,}&quot;&quot;&quot;$&#39;\x63&#39;\u$&#39;\x74&#39; -b 13-14)&quot;${*~}&amp;&amp;${@~~}$&#39;\x70&#39;r$&#39;\x69&#39;ntf &quot;\x$(\printf %s &#39;g&#39;${*#Jh}|md$&#39;\65&#39;&quot;&quot;sum|&quot;&quot;c\u\t -b 2-3${@^^})&quot;&amp;&amp;${*~~}pri&quot;&quot;\ntf &quot;\x$(p&#39;&#39;r&#39;&#39;\i$&#39;\156&#39;&#39;&#39;t&#39;&#39;f %s &#39;fC&#39;${*//F-/^}|${@,}m$&#39;\x64&#39;5sum|&#39;&#39;cut -b 19-20)&quot;${*,}&amp;&amp;&quot;${@//9/*#}&quot;pr&#39;&#39;i\n&quot;&quot;&quot;${@~}&quot;tf &quot;\x$(${@,}p\r&quot;&quot;$&#39;\x69&#39;$&#39;\x6e&#39;$*t\f %s &#39;ys&#39;|$&#39;\155&#39;&quot;&quot;d5sum$*|cu\t -b 12-13&quot;${@^^}&quot;)&quot;${@//yZ}&amp;&amp;p&quot;&quot;$&#39;\162&#39;in$&#39;\164&#39;f &quot;\x$(printf %s &#39;(&#39;|${@}&quot;&quot;md5&#39;&#39;$&#39;\163&#39;&#39;&#39;$&#39;\x75&#39;m|c$&#39;\165&#39;\t -b 7-8${*//\(P/k})&quot;&amp;&amp;${*/rd}$&#39;\160&#39;${*//Q5/u}r&quot;${@//&lt;/3}&quot;i${*~}n&quot;&quot;tf &quot;\x$(p\r${*//W}in$&#39;\x74&#39;f %s &#39;{J&#39;${*~}|md${@%%NA}5\sum|c$&#39;\165&#39;$&#39;\x74&#39; -b 27-28&quot;${@^^}&quot;)&quot;${*^^};printf &quot;\x$(&quot;&quot;p&quot;&quot;rintf %s &#39;;e&#39;|m${@/4}d5sum|${!@}c&#39;&#39;$&#39;\x75&#39;t -b 3-4&quot;${@,}&quot;)&quot;&amp;&amp;$*${*^^}prin$&#39;\x74&#39;f &quot;\x$(&quot;&quot;p&quot;&quot;\r&quot;$@&quot;i&quot;&quot;\n&#39;&#39;tf %s &#39;q;&#39;&quot;${@~~}&quot;|${*,,}m&#39;&#39;d5sum&quot;${@~~}&quot;|&quot;${@,,}&quot;cu&#39;&#39;\t -b 14-15)&quot;)&quot;
``` 

---

Bashfuscator makes obfuscating Bash one-liners and scripts incredibly easy. It can be used from the command line, or as a Python library. You can manually specify commands or scripts for Bashfuscator to obfuscate, feed it stdin to obfuscate and pass output though a pipeline, or use it an existing Python 3 project.

A great example of Bashfuscator&#39;s use as a library is integration with a reverse or bind shell handler. In only 3 extra lines of code, every command you send through your reverse or bind shell will now be obfuscated transparently. Example:

```python
from bashfuscator.core.obfuscation_handler import ObfuscationHandler

# socket code here

obHandler = ObfuscationHandler()

inputCmd = input(&quot;$ &quot;)
obfCommand = obHandler.genObfuscationLayer(inputCmd)

# send command to reverse/bind shell
```

---
 
I intend for red teamers to use Bashfuscator to evade or bypass detections or make incident response much more time consuming. The modular and extendable nature of Bashfuscator allows red teams to build their own innovative and custom obfuscation modules, to keep blue team on their toes :wink:

Conversely, I intend for blue teamers to use Bashfuscator to generate thousands of varied, complex, and layered payloads that they can use to improve or create robust Bash obfuscation detections. This tool wasn&#39;t just built for the red team, blue team&#39;s gotta have some fun too :grin:  

---

So, if you&#39;re still interested in this project, please try it out and let me know any and every thought or criticism you have. Installation and basic usage instructions are in the README, but I would recommend also viewing the [usage docs](https://bashfuscator.readthedocs.io/en/latest/Usage.html) and help menu for advanced usage. Bashfuscator really comes to life when you&#39;re cooking your own obfuscation recipe :wink: (Hint: try the `--choose-mutators` option).

Do note that the project is still in development; there are bugs, but overall I believe the project is reasonably stable. If you find a bug, checkout the &#39;dev&#39; branch,  and verify it exists there as well before reporting it to me please. I&#39;ve done a lot of work there that I haven&#39;t merged into master yet.

Also, as I&#39;ve previously mentioned, Bashfuscator is a framework, designed to be extended with additional obfuscation modules. There isn&#39;t any formal documentation regarding how to create an obfuscation module, but if you contact me I&#39;ll be happy to walk you through the process. I&#39;ve had a few people add modules already, but I could always use some more. I&#39;m sure you guys have some crazy ideas in you!

One last thing: I have a lot of ideas for features I&#39;m going to be adding to the project in the near future. Check the issues panel for issues I self-assigned, that&#39;ll give you an idea for what&#39;s to come :sunglasses:</description>
    
    <lastBuildDate>Mon, 24 Dec 2018 09:19:50 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/12</link>
        <pubDate>Sun, 13 Jan 2019 04:54:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10216-12</guid>
        <source url="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216.rss">Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</source>
      </item>
      <item>
        <title>Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</title>
        <dc:creator><![CDATA[eugenelee]]></dc:creator>
        <description><![CDATA[
            <p>Hi.<br>
You are cool.<img src="https://0x00sec.org/images/emoji/twitter/sunglasses.png?v=9" title=":sunglasses:" class="emoji" alt=":sunglasses:"><br>
Can you help me?</p>
          <p><a href="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/11</link>
        <pubDate>Mon, 24 Dec 2018 09:19:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10216-11</guid>
        <source url="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216.rss">Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</source>
      </item>
      <item>
        <title>Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</title>
        <dc:creator><![CDATA[hunter]]></dc:creator>
        <description><![CDATA[
            <p>Thatâ€™s why we mainly look for malicious behavior, not payloads. Good job with the tool though the techniques seem interesting <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/10</link>
        <pubDate>Tue, 18 Dec 2018 20:40:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10216-10</guid>
        <source url="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216.rss">Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</source>
      </item>
      <item>
        <title>Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</title>
        <dc:creator><![CDATA[capnspacehook]]></dc:creator>
        <description><![CDATA[
            <p>Brilliant explanation mate, you hit the nail right on the head <img src="https://0x00sec.org/images/emoji/twitter/+1.png?v=9" title=":+1:" class="emoji" alt=":+1:"> And as far as lengthening IR, <a href="https://github.com/Bashfuscator/Bashfuscator/issues/9" rel="nofollow noopener">Iâ€™ve got a feature</a> that Iâ€™m going to start working on soon that will take that to the maxâ€¦ <img src="https://0x00sec.org/images/emoji/twitter/sunglasses.png?v=9" title=":sunglasses:" class="emoji" alt=":sunglasses:"></p>
<p>Please let me know your thoughts on Bashfuscator, good or bad! Always looking to improve it!</p>
          <p><a href="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/9</link>
        <pubDate>Fri, 14 Dec 2018 17:03:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10216-9</guid>
        <source url="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216.rss">Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</source>
      </item>
      <item>
        <title>Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</title>
        <dc:creator><![CDATA[capnspacehook]]></dc:creator>
        <description><![CDATA[
            <p>Why is Bashfuscator relevant/useful? As far as I know, currently there is <em>no</em> kinds of detections of any kind for Bash obfuscation. Iâ€™m sure some vendors or corporate networks somewhere have built some, but as far as public, well known vendors, there doesnâ€™t appear to be much at all. So I created this project to spread awareness of this fact, as well as allow red teamers to have some fun <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<p>For example, the <a href="https://www.zdnet.com/article/new-linux-crypto-miner-steals-your-root-password-and-disables-your-antivirus" rel="nofollow noopener">Linux.BtcMin.174</a> virus is fairly sophisticated mining malware, almost exclusively written in Bash. In fact, it has multiple layers that are all written in Bash. Signatures have been made for the unobfuscated variants, via ClamAV or whatever. But when you obfuscate them with Bashfuscator, 0/57 engines detect it on VirusTotal.</p>
<p>Whatâ€™s even more distressing though, is simple Base64 encoding can also defeat most AntiVirus scanners. I took the same known-malicious sample, Base64 encoded it, and fed it to VirusTotal. Again, 0/57 engines detected it.</p>
<p>As a red teamer, you could take this one of two ways.</p>
<ol>
<li>Bash obfuscation isnâ€™t nessesary, Iâ€™ll just Base64 encode my commands and be set.</li>
</ol>
<p><strong>OR</strong></p>
<ol start="2">
<li>If vendors arenâ€™t catching Base64 encoded malware, they definitely wonâ€™t catch Bashfuscated payloadsâ€¦ time to start using those.</li>
</ol>
<p>To any defenders out there, this should be alarmingâ€¦ which is why I am going to be working on providing signatures for Bashfuscated payloads in the near future. But because Bashfuscator is a modular framework though, any red teamer can easily add a new, never-before-seen obfuscation module to Bashfuscator to bypass the default Bashfuscator signatures. Itâ€™s always a cat and mouse game.</p>
<p>Eventually, I hope for the industry to get to the point of where Powershell obfuscation detection and logging is now; attackers are shifting away from using Powershell as a Post-Exploitation language now because of the wealth of detection and logging available for defenders. Hopefully someday, that will be the same with Bash.</p>
          <p><a href="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/8</link>
        <pubDate>Fri, 14 Dec 2018 16:59:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10216-8</guid>
        <source url="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216.rss">Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</source>
      </item>
      <item>
        <title>Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</title>
        <dc:creator><![CDATA[capnspacehook]]></dc:creator>
        <description><![CDATA[
            <p>Thanks man! I really appreciate the kind words. Yeah the goal from the start was to have obfuscated payloads be runnable in Bashâ€¦ though with so many different versions of Bash in the wild, and GNU vs BSD style utilities in different distros, supporting an Bash shell just isnâ€™t feasible. But I aim to support as much as possible.</p>
<p>Itâ€™s kind of amazing how much Bash is capable ofâ€¦ the Special-Char-Only module for instance, turns Bash input into entirely special characters. Not a single alphanumeric character present in the final payload. To think that Bash can do that isâ€¦ crazy. I actually ported that obfuscator from Invoke-Obfuscation, the guy who wrote that tool is a genius haha.</p>
<p>Wow, I didnâ€™t realize that there was a good repo for IPfuscationâ€¦ I actually discovered IPfuscation through <a href="https://twitter.com/vysecurity/status/997918240054620160" rel="nofollow noopener">Vysec on Twitter</a>, and integrated it into <a href="https://github.com/0x00-0x00/ShellPop#obfuscation" rel="nofollow noopener">Shellpop</a> this summer, but itâ€™s definitely not as robust as XIP. I will definitely be looking into thatâ€¦</p>
<p>As for obfuscating a Python reverse shell, if your target is a Linux system, you could obfuscate the python payload with Bashfuscator and execute it in Bash <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/7</link>
        <pubDate>Fri, 14 Dec 2018 16:42:08 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10216-7</guid>
        <source url="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216.rss">Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</source>
      </item>
      <item>
        <title>Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</title>
        <dc:creator><![CDATA[hackerShadow04]]></dc:creator>
        <description><![CDATA[
            <p>Uhâ€¦ why?</p>
<p>Iâ€™m not kiddingâ€¦</p>
          <p><a href="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/6</link>
        <pubDate>Fri, 14 Dec 2018 15:23:00 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10216-6</guid>
        <source url="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216.rss">Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</source>
      </item>
      <item>
        <title>Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</title>
        <dc:creator><![CDATA[eugenelee]]></dc:creator>
        <description><![CDATA[
            <p>Thank you for your kindness!<br>
See you often here.<img src="https://0x00sec.org/images/emoji/twitter/frowning_face.png?v=9" title=":frowning_face:" class="emoji" alt=":frowning_face:"><img src="https://0x00sec.org/images/emoji/twitter/slightly_smiling_face.png?v=9" title=":slightly_smiling_face:" class="emoji" alt=":slightly_smiling_face:"></p>
          <p><a href="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/5</link>
        <pubDate>Fri, 14 Dec 2018 15:10:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10216-5</guid>
        <source url="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216.rss">Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</source>
      </item>
      <item>
        <title>Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</title>
        <dc:creator><![CDATA[Baud]]></dc:creator>
        <description><![CDATA[
            <p>It says it in the post, if you are part of a red team you want to remain undetected for as much as possible, if you have a shell running on a target machine that is monitored regularly you need to encrypt or encode your data, if you donâ€™t want an analyst to find plain text commands inside the packets or if you wish to bypass IDS and firewall rules.</p>
<p>With this you can also buy yourself some time in case the blue team finds out suspicious activities, recognizing the purpose of a command after itâ€™s been obfuscated by the program seems to be impossible if you donâ€™t execute it yourself, imagine how much time it would take the team to understand exactly everything the attackers have done in order to stop them if all the commands they had to analyze were obfuscated this way. The advantage is that with encoding and encryption you will always need to obtain the original command back at some point, while this obfuscator leaves the command in a completely executable and hard to read form at the same time. I think itâ€™s brilliant, already cloned it in my box.</p>
          <p><a href="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/4</link>
        <pubDate>Fri, 14 Dec 2018 14:56:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10216-4</guid>
        <source url="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216.rss">Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</source>
      </item>
      <item>
        <title>Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</title>
        <dc:creator><![CDATA[eugenelee]]></dc:creator>
        <description><![CDATA[
            <p>I think it is good to someone,but i can`t still understand why obfuscate the bash?<br>
mind if u help me  why it need?</p>
          <p><a href="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/3</link>
        <pubDate>Fri, 14 Dec 2018 12:14:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10216-3</guid>
        <source url="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216.rss">Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</source>
      </item>
      <item>
        <title>Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Wow man this is really cool.</p>
<p>It sort of reminds me of a project I worked on that converted text to base64, and then turned base64 into words (the first letter was a base64 character).</p>
<p>Obviously, the really cool thing here is that your obfuscated bash is fully runnable; this is amazing. Iâ€™ve also been looking into making a python-obfuscator script (perhaps for obfuscating a reverse shell that uses this module <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p>Infact, Iâ€™d love to couple this with <a href="https://0x00sec.org/t/xip-ip-addresses-mutation/8428" class="inline-onebox">XIP - IP addresses mutation</a>, you could really make a forensic responders life difficult.</p>
<p>Let me know when youâ€™re next working on a project, Iâ€™d love to see early additions of your stuff!</p>
          <p><a href="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/2</link>
        <pubDate>Fri, 14 Dec 2018 09:22:27 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10216-2</guid>
        <source url="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216.rss">Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</source>
      </item>
      <item>
        <title>Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</title>
        <dc:creator><![CDATA[capnspacehook]]></dc:creator>
        <description><![CDATA[
            <p>Hey guys,<br>
Iâ€™ve been working on a huge project since the beginning of August, and now that finals are done I plan to be working more on it. But before I start adding too many more features, I would really like some people to test it out in its current state and give me feedback. So I thought posting it here would be a good way to do that <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p>Without further ado, let me introduce you to Bashfuscator, a modular Bash obfuscation framework written in Python 3.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/fc13518e2732d419dde3f109512da9b87bdb17ef.png" alt="" width="" height=""></p>
<p>Link: <a href="https://github.com/Bashfuscator/Bashfuscator" rel="noopener nofollow ugc">https://github.com/Bashfuscator/Bashfuscator</a></p>
<p>Demo video: <a href="https://asciinema.org/a/6LmMVyoxUbDIwvl5yzynVbrS1" rel="noopener nofollow ugc">https://asciinema.org/a/6LmMVyoxUbDIwvl5yzynVbrS1</a></p>
<p>Example obfuscated payload (input is <code>cat /etc/passwd</code>):</p>
<pre><code class="lang-bash">${@~}eval "$(pr""i''n\t${@%%G}f "\x$(""${*##x:}prin""$'\x74'f %s 'P?'|${*//_f/M:}md5\s''\um|${@,,}c""\ut -b 24-25)""${@^^}";${*~~}prin''t\f "\x$(prin"${@,,}"tf %s '~'|${*%%&gt;}m$'\144'5s$'\165'\m|${*##hG}$'\x63'$'\x75'${@##N|}t -b 4-5)";''${*%%Z}print$'\x66' "\x$(p''r$'\x69'n""\t$'\x66' %s '2['|md${*##+}5""sum|${@##l}cu${!@}t -b 17-18${@^^})"${*^}&amp;&amp;p""r""$'\151'ntf "\x$($'\x70'r${@/m}int$'\x66' %s '1'|${*,}m\d5${!*}su$'\155'|${*%%E}c${*%%#}ut -b 16-17)";$'\160'''\r$'\151'\n""t""${@,}f "\x$(p\rintf %s 't9'${*//i/wm}|${*/J\)}m"${@//j/6=}"d5s''um|"${@}"''c${*#L\{}u${*//0}t -b 2-3${*})"&amp;&amp;${*~~}pri''nt\f "\x$(p\ri$'\x6e't\f %s 'g}'${*//\!J}|$@m''${*~}d5su${@/99}m|${*/7}"${@,}"c''ut -b 2-3)""${@//#p/B\(}";p""${*#=}r${*/\{/]}in$'\x74'f "\x$(\p"${@,,}"rin$'\x74'\f %s 'sW'|md\5''su""m"${@//rR/#i}"|cut -b 7-8)"&amp;&amp;""\p$'\x72'$'\x69'nt\f "\x$(p""${*//3U}r${*,}in${*/me}t''f %s '.'${@%g}|''"${@~}"md\5$'\x73'${*%#X}um|"${@,}"""$'\x63'\u$'\x74' -b 13-14)"${*~}&amp;&amp;${@~~}$'\x70'r$'\x69'ntf "\x$(\printf %s 'g'${*#Jh}|md$'\65'""sum|""c\u\t -b 2-3${@^^})"&amp;&amp;${*~~}pri""\ntf "\x$(p''r''\i$'\156'''t''f %s 'fC'${*//F-/^}|${@,}m$'\x64'5sum|''cut -b 19-20)"${*,}&amp;&amp;"${@//9/*#}"pr''i\n"""${@~}"tf "\x$(${@,}p\r""$'\x69'$'\x6e'$*t\f %s 'ys'|$'\155'""d5sum$*|cu\t -b 12-13"${@^^}")"${@//yZ}&amp;&amp;p""$'\162'in$'\164'f "\x$(printf %s '('|${@}""md5''$'\163'''$'\x75'm|c$'\165'\t -b 7-8${*//\(P/k})"&amp;&amp;${*/rd}$'\160'${*//Q5/u}r"${@//&lt;/3}"i${*~}n""tf "\x$(p\r${*//W}in$'\x74'f %s '{J'${*~}|md${@%%NA}5\sum|c$'\165'$'\x74' -b 27-28"${@^^}")"${*^^};printf "\x$(""p""rintf %s ';e'|m${@/4}d5sum|${!@}c''$'\x75't -b 3-4"${@,}")"&amp;&amp;$*${*^^}prin$'\x74'f "\x$(""p""\r"$@"i""\n''tf %s 'q;'"${@~~}"|${*,,}m''d5sum"${@~~}"|"${@,,}"cu''\t -b 14-15)")"
</code></pre>
<hr>
<p>Bashfuscator makes obfuscating Bash one-liners and scripts incredibly easy. It can be used from the command line, or as a Python library. You can manually specify commands or scripts for Bashfuscator to obfuscate, feed it stdin to obfuscate and pass output though a pipeline, or use it an existing Python 3 project.</p>
<p>A great example of Bashfuscatorâ€™s use as a library is integration with a reverse or bind shell handler. In only 3 extra lines of code, every command you send through your reverse or bind shell will now be obfuscated transparently. Example:</p>
<pre><code class="lang-python">from bashfuscator.core.obfuscation_handler import ObfuscationHandler

# socket code here

obHandler = ObfuscationHandler()

inputCmd = input("$ ")
obfCommand = obHandler.genObfuscationLayer(inputCmd)

# send command to reverse/bind shell
</code></pre>
<hr>
<p>I intend for red teamers to use Bashfuscator to evade or bypass detections or make incident response much more time consuming. The modular and extendable nature of Bashfuscator allows red teams to build their own innovative and custom obfuscation modules, to keep blue team on their toes <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<p>Conversely, I intend for blue teamers to use Bashfuscator to generate thousands of varied, complex, and layered payloads that they can use to improve or create robust Bash obfuscation detections. This tool wasnâ€™t just built for the red team, blue teamâ€™s gotta have some fun too <img src="https://0x00sec.org/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:"></p>
<hr>
<p>So, if youâ€™re still interested in this project, please try it out and let me know any and every thought or criticism you have. Installation and basic usage instructions are in the README, but I would recommend also viewing the <a href="https://bashfuscator.readthedocs.io/en/latest/Usage.html" rel="noopener nofollow ugc">usage docs</a> and help menu for advanced usage. Bashfuscator really comes to life when youâ€™re cooking your own obfuscation recipe <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"> (Hint: try the <code>--choose-mutators</code> option).</p>
<p>Do note that the project is still in development; there are bugs, but overall I believe the project is reasonably stable. If you find a bug, checkout the â€˜devâ€™ branch,  and verify it exists there as well before reporting it to me please. Iâ€™ve done a lot of work there that I havenâ€™t merged into master yet.</p>
<p>Also, as Iâ€™ve previously mentioned, Bashfuscator is a framework, designed to be extended with additional obfuscation modules. There isnâ€™t any formal documentation regarding how to create an obfuscation module, but if you contact me Iâ€™ll be happy to walk you through the process. Iâ€™ve had a few people add modules already, but I could always use some more. Iâ€™m sure you guys have some crazy ideas in you!</p>
<p>One last thing: I have a lot of ideas for features Iâ€™m going to be adding to the project in the near future. Check the issues panel for issues I self-assigned, thatâ€™ll give you an idea for whatâ€™s to come <img src="https://0x00sec.org/images/emoji/twitter/sunglasses.png?v=9" title=":sunglasses:" class="emoji" alt=":sunglasses:"></p>
          <p><a href="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216/1</link>
        <pubDate>Fri, 14 Dec 2018 04:54:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10216-1</guid>
        <source url="https://0x00sec.org/t/yes-bash-can-get-uglier-introducing-bashfuscator-a-bash-obfuscation-framework/10216.rss">Yes, Bash Can Get Uglier: Introducing Bashfuscator, A Bash Obfuscation Framework</source>
      </item>
  </channel>
</rss>
