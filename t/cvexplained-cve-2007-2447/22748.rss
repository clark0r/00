<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>CVExplained - CVE-2007-2447</title>
    <link>https://0x00sec.org/t/cvexplained-cve-2007-2447/22748</link>
    <description>Summary and TLDR at the bottom.

CVE-2007–2447 allows remote attackers to run commands via the username parameter in Samba 3.0.0–3.0.25rc3. Below is the POC seen in most scripts.

&gt;  /=\`nohup {payload}\`

You can send this text as the username via the “logon” command in smbclient and your payload is executed. (Note: The “=” is not actually required to run this exploit. I am not sure why it is in most POCs.) Interestingly, if you send the username via impacket or another script, the &quot;/&quot; isn&#39;t required! I&#39;ll explain later in this post why that is. Below is a script modified by @Jarvis that shows there is no need for the &quot;/&quot;.

![exploitimpacket|636x304, 75%](upload://gzkyPz7KSjrTbW0Fj1R8l3aCcWQ.png) 
Now that we know how to exploit this CVE, let&#39;s dig into how it works!



After a bit of investigation I found two files that are important to look at:

* source/lib/smbrun.c
* source/smbd/map_username.c

Looking into map_username.c we find this little blob of code.

![mapusername|690x314, 75%](upload://1LfDcLszSCvu8ODZAG5NOXPfvfI.png) 
From this we can see that the username we send is combined with the script that is set in the smb.conf file to give us a string such as 
&gt; /etc/samba/script/usermap.sh &quot;Jimmy&quot;

That string is then sent to the smbrun function. Taking a quick peek at the smbrun function reveals that it has been turned into a wrapper for a new smbrun_internal function with a hard coded parameter.

![smbrun|690x184, 75%](upload://vifAfakHK6imyBUEDmvUcurArFJ.png) 

Taking a peek at the smbrun_internal function we find that the hardcoded parameter in smbrun is the sanitize parameter! We also see that previously, the smbrun function sent unsanitized data to the execl function. 

![smbruninternal|690x473](upload://5ELUGOhNAjTPJu25m5LAmgrhlMh.png) 

This is the root cause of our vulnerability. A normal logon request would look like this to execl:

&gt;/bin/sh sh -c /etc/samba/scripts/mapscript.sh &quot;Jimmy&quot;

However if we were to inject the username with our exploit this is what would be passed to execl:

&gt;/bin/sh sh -c /etc/samba/scripts/mapscript.sh &quot;\`nohup {payload}\`&quot;

Cool! So a relatively simple exploit. We abuse backticks in unsanitized text that is passed to sh to gain command execution. But what happened to the forward slash? Long story short, the &quot;/&quot; acts as a delimiter for the domain field in smbclient. Below is a side by side comparison of an attempt to run this exploit with and without the &quot;/&quot; (Left without the &quot;/&quot;, right with the &quot;/&quot;)

![domainfieldskip|690x330](upload://As4IFf4QVLs0yXwSP0Ma48YLKkG.png) 

**Summary/TLDR**
CVE-2007–2447 is a remote command injection vulnerability in the username parameter of Samba 3.0.0–3.0.25rc3 caused by a lack of input sanitization. The reason for the &quot;/&quot; character in the exploit is to separate the domain field and the username field in smbclient. I do not know the reason for the &quot;=&quot; character in most POCs.

**Credits**
@Jarvis - Modified impacket script to exploit CVE-2007-2447
Amriunix - Helped me understand why the &quot;/&quot; was needed and also let me know that the &quot;=&quot; wasn&#39;t required.

This is my first &quot;writeup&quot; of sorts, I appreciate any and all feedback! Hopefully you learned something :slight_smile:</description>
    
    <lastBuildDate>Wed, 19 Aug 2020 13:09:16 +0000</lastBuildDate>
    <category>Exploit Development</category>
    <atom:link href="https://0x00sec.org/t/cvexplained-cve-2007-2447/22748.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>CVExplained - CVE-2007-2447</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/cvexplained-cve-2007-2447/22748/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cvexplained-cve-2007-2447/22748/3</link>
        <pubDate>Thu, 17 Dec 2020 15:25:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-22748-3</guid>
        <source url="https://0x00sec.org/t/cvexplained-cve-2007-2447/22748.rss">CVExplained - CVE-2007-2447</source>
      </item>
      <item>
        <title>CVExplained - CVE-2007-2447</title>
        <dc:creator><![CDATA[escollapse]]></dc:creator>
        <description><![CDATA[
            <p>great write-up, <a class="mention" href="https://0x00sec.org/u/nikkiofthenet">@nikkiofthenet</a>!</p>
<p>I have been trying to drive home the importance of sources and sinks to folks.  This is another example of a less-than-immediately-obvious source that finds its way into a sink - with potentially catastrophic results.</p>
<p>source = username<br>
sink = execl<br>
the path is debatable, but I contest it all starts with the function pstr_sprintf just accepting ‘any’ user input</p>
<p>.<br>
.</p>
<p>LiveOverflow did a video on sources and sinks: <a href="https://www.youtube.com/watch?v=ZaOtY4i5w_U" rel="nofollow noopener">https://www.youtube.com/watch?v=ZaOtY4i5w_U</a><br>
I strongly encourage checking out his YouTube channel - see below disclosure</p>
<p>**full disclosure, I get absolutely no kickback.  his binary hacking / RE playlist is what got me into exploit dev without being totally lost.  if he was able to explain it so that I could understand it, ANYONE can understand it</p>
          <p><a href="https://0x00sec.org/t/cvexplained-cve-2007-2447/22748/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cvexplained-cve-2007-2447/22748/2</link>
        <pubDate>Wed, 19 Aug 2020 13:09:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-22748-2</guid>
        <source url="https://0x00sec.org/t/cvexplained-cve-2007-2447/22748.rss">CVExplained - CVE-2007-2447</source>
      </item>
      <item>
        <title>CVExplained - CVE-2007-2447</title>
        <dc:creator><![CDATA[nikkiofthenet]]></dc:creator>
        <description><![CDATA[
            <p>Summary and TLDR at the bottom.</p>
<p>CVE-2007–2447 allows remote attackers to run commands via the username parameter in Samba 3.0.0–3.0.25rc3. Below is the POC seen in most scripts.</p>
<blockquote>
<p>/=`nohup {payload}`</p>
</blockquote>
<p>You can send this text as the username via the “logon” command in smbclient and your payload is executed. (Note: The “=” is not actually required to run this exploit. I am not sure why it is in most POCs.) Interestingly, if you send the username via impacket or another script, the “/” isn’t required! I’ll explain later in this post why that is. Below is a script modified by <a class="mention" href="https://0x00sec.org/u/jarvis">@Jarvis</a> that shows there is no need for the “/”.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/742138862ae421c44e9f06e6532c7af0f0bae7c0.png" alt="exploitimpacket" data-base62-sha1="gzkyPz7KSjrTbW0Fj1R8l3aCcWQ" width="477" height="228"><br>
Now that we know how to exploit this CVE, let’s dig into how it works!</p>
<p>After a bit of investigation I found two files that are important to look at:</p>
<ul>
<li>source/lib/smbrun.c</li>
<li>source/smbd/map_username.c</li>
</ul>
<p>Looking into map_username.c we find this little blob of code.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/0/0c5991e779f11e0fefbaf1f8965b99cd57a5eea2.png" data-download-href="/uploads/short-url/1LfDcLszSCvu8ODZAG5NOXPfvfI.png?dl=1" title="mapusername" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0c5991e779f11e0fefbaf1f8965b99cd57a5eea2_2_517x235.png" alt="mapusername" data-base62-sha1="1LfDcLszSCvu8ODZAG5NOXPfvfI" width="517" height="235" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0c5991e779f11e0fefbaf1f8965b99cd57a5eea2_2_517x235.png, https://0x00sec.s3.amazonaws.com/optimized/2X/0/0c5991e779f11e0fefbaf1f8965b99cd57a5eea2_2_775x352.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/0/0c5991e779f11e0fefbaf1f8965b99cd57a5eea2_2_1034x470.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0c5991e779f11e0fefbaf1f8965b99cd57a5eea2_2_10x10.png"></a></div><br>
From this we can see that the username we send is combined with the script that is set in the smb.conf file to give us a string such as<p></p>
<blockquote>
<p>/etc/samba/script/usermap.sh “Jimmy”</p>
</blockquote>
<p>That string is then sent to the smbrun function. Taking a quick peek at the smbrun function reveals that it has been turned into a wrapper for a new smbrun_internal function with a hard coded parameter.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/d/db538e6a249785957a743647cc578a340a3fde57.png" data-download-href="/uploads/short-url/vifAfakHK6imyBUEDmvUcurArFJ.png?dl=1" title="smbrun" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/d/db538e6a249785957a743647cc578a340a3fde57_2_517x138.png" alt="smbrun" data-base62-sha1="vifAfakHK6imyBUEDmvUcurArFJ" width="517" height="138" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/d/db538e6a249785957a743647cc578a340a3fde57_2_517x138.png, https://0x00sec.s3.amazonaws.com/optimized/2X/d/db538e6a249785957a743647cc578a340a3fde57_2_775x207.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/d/db538e6a249785957a743647cc578a340a3fde57_2_1034x276.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/d/db538e6a249785957a743647cc578a340a3fde57_2_10x10.png"></a></div><p></p>
<p>Taking a peek at the smbrun_internal function we find that the hardcoded parameter in smbrun is the sanitize parameter! We also see that previously, the smbrun function sent unsanitized data to the execl function.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/2/27a6c3eaf1e33975e433ee35491f374c6e5a49ad.png" data-download-href="/uploads/short-url/5ELUGOhNAjTPJu25m5LAmgrhlMh.png?dl=1" title="smbruninternal" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/2/27a6c3eaf1e33975e433ee35491f374c6e5a49ad_2_690x473.png" alt="smbruninternal" data-base62-sha1="5ELUGOhNAjTPJu25m5LAmgrhlMh" width="690" height="473" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/2/27a6c3eaf1e33975e433ee35491f374c6e5a49ad_2_690x473.png, https://0x00sec.s3.amazonaws.com/optimized/2X/2/27a6c3eaf1e33975e433ee35491f374c6e5a49ad_2_1035x709.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/2/27a6c3eaf1e33975e433ee35491f374c6e5a49ad.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/2/27a6c3eaf1e33975e433ee35491f374c6e5a49ad_2_10x10.png"></a></div><p></p>
<p>This is the root cause of our vulnerability. A normal logon request would look like this to execl:</p>
<blockquote>
<p>/bin/sh sh -c /etc/samba/scripts/mapscript.sh “Jimmy”</p>
</blockquote>
<p>However if we were to inject the username with our exploit this is what would be passed to execl:</p>
<blockquote>
<p>/bin/sh sh -c /etc/samba/scripts/mapscript.sh “`nohup {payload}`”</p>
</blockquote>
<p>Cool! So a relatively simple exploit. We abuse backticks in unsanitized text that is passed to sh to gain command execution. But what happened to the forward slash? Long story short, the “/” acts as a delimiter for the domain field in smbclient. Below is a side by side comparison of an attempt to run this exploit with and without the “/” (Left without the “/”, right with the “/”)</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/f/ff7abcfc8dec7688f404c1ee21588995384d6e02.png" data-download-href="/uploads/short-url/As4IFf4QVLs0yXwSP0Ma48YLKkG.png?dl=1" title="domainfieldskip" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/f/ff7abcfc8dec7688f404c1ee21588995384d6e02_2_690x330.png" alt="domainfieldskip" data-base62-sha1="As4IFf4QVLs0yXwSP0Ma48YLKkG" width="690" height="330" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/f/ff7abcfc8dec7688f404c1ee21588995384d6e02_2_690x330.png, https://0x00sec.s3.amazonaws.com/optimized/2X/f/ff7abcfc8dec7688f404c1ee21588995384d6e02_2_1035x495.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/f/ff7abcfc8dec7688f404c1ee21588995384d6e02_2_1380x660.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/f/ff7abcfc8dec7688f404c1ee21588995384d6e02_2_10x10.png"></a></div><p></p>
<p><strong>Summary/TLDR</strong><br>
CVE-2007–2447 is a remote command injection vulnerability in the username parameter of Samba 3.0.0–3.0.25rc3 caused by a lack of input sanitization. The reason for the “/” character in the exploit is to separate the domain field and the username field in smbclient. I do not know the reason for the “=” character in most POCs.</p>
<p><strong>Credits</strong><br>
<a class="mention" href="https://0x00sec.org/u/jarvis">@Jarvis</a> - Modified impacket script to exploit CVE-2007-2447<br>
Amriunix - Helped me understand why the “/” was needed and also let me know that the “=” wasn’t required.</p>
<p>This is my first “writeup” of sorts, I appreciate any and all feedback! Hopefully you learned something <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/cvexplained-cve-2007-2447/22748/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cvexplained-cve-2007-2447/22748/1</link>
        <pubDate>Mon, 17 Aug 2020 23:24:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-22748-1</guid>
        <source url="https://0x00sec.org/t/cvexplained-cve-2007-2447/22748.rss">CVExplained - CVE-2007-2447</source>
      </item>
  </channel>
</rss>
