<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Unlock Windows 11 personalization settings by modifying Settings app DLL</title>
    <link>https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763</link>
    <description>### Introduction

After doing a research on how to temporarily remove Windows 10  &#39;Activate Windows&#39; watermark, I decided to try to overcome another limitation of unactivated Windows 11.

This limitation (besides watermark in the lower right corner of the screen) is locked / disabled personalization settings inside Settings app. The method described here allows you to fully enable these settings without activating OS.

### Debugging methods

Windows Settings app is stored in the following directory:

```
C:\Windows\ImmersiveControlPanel
```

Now, since Settings is a program stored in a UWP container, it means that you cannot launch it directly by double-clicking it or load it in a debugger and simply run it (although you can attach a debugger once the app is launched).

Let&#39;s first attach a debugger to a running Settings app, to see what DLL&#39;s are loaded.

![symbols|690x98, 100%](upload://u2ZM8oJEP33CAOJTR1PHre8hYRH.png)

We can see that the **slc.dll** (Software Licensing Client) is loaded, with an interesting function called **SLIsWindowsGenuineLocal**. We can put a breakpoint on it, and try to navigate around Personalization settings, but nothing happens.

Since we attached debugger after the full app startup, it means that the potential check for an activated Windows already passed early during the Settings app startup, so it didn&#39;t get caught.

There are two methods to overcome this.

#### First method
\
Use the Settings app built-in support for a debugging, as mentioned here:

[https://www.hexacorn.com/blog/2018/08/12/debugging-dosing-system-settings-win10/](https://)

Simply add Debug DWORD value (set it to 1) and launch Settings app which will now be in a suspended mode, waiting for a debugger to be attached to it.

#### Second method
\
Use the **PLMDebug.exe** which comes with the Debugging Tools as a part of the Windows SDK. It is located in the following directory (x64 version):

```
C:\Program Files (x86)\Windows Kits\10\Debuggers\x64
```

With this you can control the state (suspend, resume, etc...) of the UWP app while you are debugging, and you can use debuggers such as WinDbg, x64dbg etc.. (in this example I will use x64dbg).

You will need Settings full package name in order to use PLMDebug, which you can find out using the following Powershell command:

```
Get-AppxPackage windows.immersivecontrolpanel
```

Use the following command to enable debugging:

```
plmdebug.exe /enableDebug windows.immersivecontrolpanel_10.0.6.1000_neutral_neutral_cw5n1h2txyewy &quot;C:\Program Files\x64\x64dbg.exe&quot;
```

Now, when you click on the Settings app, it will be launched along with the x64dbg attached automatically.

The debugger is attached, but only the core DLL&#39;s are loaded, so you will need to instruct x64dbg to break on system DLL load, and execute the target (F9) until the **slc.dll** is loaded. 

![x64prefs|428x264, 75%](upload://z1C3lEu6Qiu9z8Riu3hIiKwRBUz.png)

![dllload|502x86, 100%](upload://wkh8WCDIaWvDjx6jJDK1IlginjR.png)

After the slc.dll is loaded, you can set a breakpoint on **SLIsWindowsGenuineLocal** function. 

Remember to uncheck break on system DLL load inside preferences, to avoid breaking on subsequent DLL&#39;s.

### Bypass method

After choosing one of the debugging methods decribed above, the target will now break on a SLIsWindowsGenuineLocal call.

We return from the call, and end up inside *SettingsEnvironment.Desktop.dll* module from which the call is being made.

If we search for all intermodular calls inside this DLL, we can see that there are two calls to the SLIsWindowsGenuineLocal.

![slcall|470x80](upload://n5hlAmAhorlTNBI0I2teAHzoCuG.png)

The second call leads us to a small wrapper function (simple and unobfuscated) which checks if Windows is activated or not.

![function|690x224, 75%](upload://zJSrh7WSwzEtpzvnlyTPN0993RO.png)

This small function can be expressed like the following pseudocode:

![pseudoc|319x193, 100%](upload://xZpcy6gYNzoS0ZbeioHQKXmybNi.png)

Entire personalization settings are enabled or disabled, based on the return value of that function.:slightly_smiling_face:


### How to use the unlock tool (sunlock11.exe)

This tool is simple, and it works by patching the function described above inside SettingsEnvironment.Desktop.dll so that it always returns true value, tricking Settings app into thinking that the Windows is activated, thus enabling all of the personalization settings.

*SettingsEnvironment.Desktop.dll* is a &quot;system&quot; file, owned by TrustedInstaller as other files in the System32 directory, so before patching it is necessary to set adequate permissions to be able to write to that DLL. This can be done manually (using takeown and icacls) or by using provided **setpm.bat** script which will do this automatically for you.

After modifying owner and permissions, run sunlock11.exe. Both the script and the unlock tool require administrative privileges, so make sure that you execute them as administrator.

### Project &amp; demo

Visit the link below for a project:

https://github.com/revengsmK/sunlock11

Video demo here:

https://www.youtube.com/watch?v=GWBxjqhGOzg

### Disclaimer

This program serves mainly as a reverse engineering demo, and you use it at your own risk. The author of this program cannot be held liable for any damages due to the use of this program. It is advisable not to use it on your main production PC, as it is modifying operating system file.</description>
    
    <lastBuildDate>Thu, 09 Mar 2023 02:04:20 +0000</lastBuildDate>
    <category>Reverse Engineering</category>
    <atom:link href="https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Unlock Windows 11 personalization settings by modifying Settings app DLL</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763/4</link>
        <pubDate>Thu, 06 Jul 2023 07:13:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33763-4</guid>
        <source url="https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763.rss">Unlock Windows 11 personalization settings by modifying Settings app DLL</source>
      </item>
      <item>
        <title>Unlock Windows 11 personalization settings by modifying Settings app DLL</title>
        <dc:creator><![CDATA[EVIL-ACID]]></dc:creator>
        <description><![CDATA[
            <p>I definitely did not think it was gonna be a simple true/false check, makes me wonder if other features are guarded the same way.  I did some reverse engineering a couple times before, this make me wanna dive in but in a more practical way.</p>
<p>Really nice post keep it up <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"> !</p>
          <p><a href="https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763/3</link>
        <pubDate>Thu, 09 Mar 2023 02:04:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33763-3</guid>
        <source url="https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763.rss">Unlock Windows 11 personalization settings by modifying Settings app DLL</source>
      </item>
      <item>
        <title>Unlock Windows 11 personalization settings by modifying Settings app DLL</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            <p>First thing that came to mind when i saw your post was the bluementals crack that you previously published (surprising that i should remember it, since it was a long time ago), nice to see another post from you, keep it up!</p>
          <p><a href="https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763/2</link>
        <pubDate>Tue, 07 Mar 2023 14:41:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33763-2</guid>
        <source url="https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763.rss">Unlock Windows 11 personalization settings by modifying Settings app DLL</source>
      </item>
      <item>
        <title>Unlock Windows 11 personalization settings by modifying Settings app DLL</title>
        <dc:creator><![CDATA[systematiK]]></dc:creator>
        <description><![CDATA[
            <h3><a name="introduction-1" class="anchor" href="https://0x00sec.org#introduction-1"></a>Introduction</h3>
<p>After doing a research on how to temporarily remove Windows 10  ‘Activate Windows’ watermark, I decided to try to overcome another limitation of unactivated Windows 11.</p>
<p>This limitation (besides watermark in the lower right corner of the screen) is locked / disabled personalization settings inside Settings app. The method described here allows you to fully enable these settings without activating OS.</p>
<h3><a name="debugging-methods-2" class="anchor" href="https://0x00sec.org#debugging-methods-2"></a>Debugging methods</h3>
<p>Windows Settings app is stored in the following directory:</p>
<pre><code class="lang-auto">C:\Windows\ImmersiveControlPanel
</code></pre>
<p>Now, since Settings is a program stored in a UWP container, it means that you cannot launch it directly by double-clicking it or load it in a debugger and simply run it (although you can attach a debugger once the app is launched).</p>
<p>Let’s first attach a debugger to a running Settings app, to see what DLL’s are loaded.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/d/2/d297edf7bd687d57564e5a0b714a971404bb0969.png" data-download-href="/uploads/short-url/u2ZM8oJEP33CAOJTR1PHre8hYRH.png?dl=1" title="symbols" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/d/2/d297edf7bd687d57564e5a0b714a971404bb0969.png" alt="symbols" data-base62-sha1="u2ZM8oJEP33CAOJTR1PHre8hYRH" width="690" height="98" data-dominant-color="E1DDD5"></a></div><p></p>
<p>We can see that the <strong>slc.dll</strong> (Software Licensing Client) is loaded, with an interesting function called <strong>SLIsWindowsGenuineLocal</strong>. We can put a breakpoint on it, and try to navigate around Personalization settings, but nothing happens.</p>
<p>Since we attached debugger after the full app startup, it means that the potential check for an activated Windows already passed early during the Settings app startup, so it didn’t get caught.</p>
<p>There are two methods to overcome this.</p>
<h4><a name="first-method-3" class="anchor" href="https://0x00sec.org#first-method-3"></a>First method</h4>
<p><br>
Use the Settings app built-in support for a debugging, as mentioned here:</p>
<p><a href="https://0x00sec.org">https://www.hexacorn.com/blog/2018/08/12/debugging-dosing-system-settings-win10/</a></p>
<p>Simply add Debug DWORD value (set it to 1) and launch Settings app which will now be in a suspended mode, waiting for a debugger to be attached to it.</p>
<h4><a name="second-method-4" class="anchor" href="https://0x00sec.org#second-method-4"></a>Second method</h4>
<p><br>
Use the <strong>PLMDebug.exe</strong> which comes with the Debugging Tools as a part of the Windows SDK. It is located in the following directory (x64 version):</p>
<pre><code class="lang-auto">C:\Program Files (x86)\Windows Kits\10\Debuggers\x64
</code></pre>
<p>With this you can control the state (suspend, resume, etc…) of the UWP app while you are debugging, and you can use debuggers such as WinDbg, x64dbg etc… (in this example I will use x64dbg).</p>
<p>You will need Settings full package name in order to use PLMDebug, which you can find out using the following Powershell command:</p>
<pre><code class="lang-auto">Get-AppxPackage windows.immersivecontrolpanel
</code></pre>
<p>Use the following command to enable debugging:</p>
<pre><code class="lang-auto">plmdebug.exe /enableDebug windows.immersivecontrolpanel_10.0.6.1000_neutral_neutral_cw5n1h2txyewy "C:\Program Files\x64\x64dbg.exe"
</code></pre>
<p>Now, when you click on the Settings app, it will be launched along with the x64dbg attached automatically.</p>
<p>The debugger is attached, but only the core DLL’s are loaded, so you will need to instruct x64dbg to break on system DLL load, and execute the target (F9) until the <strong>slc.dll</strong> is loaded.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/f/5/f57ac9eddb8a2ae586892d0f3eba17747e939c5f.png" alt="x64prefs" data-base62-sha1="z1C3lEu6Qiu9z8Riu3hIiKwRBUz" width="321" height="198"></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/e/2/e29055b7dae4a8d6023b952934edb42945f36c7b.png" alt="dllload" data-base62-sha1="wkh8WCDIaWvDjx6jJDK1IlginjR" width="502" height="86"></p>
<p>After the slc.dll is loaded, you can set a breakpoint on <strong>SLIsWindowsGenuineLocal</strong> function.</p>
<p>Remember to uncheck break on system DLL load inside preferences, to avoid breaking on subsequent DLL’s.</p>
<h3><a name="bypass-method-5" class="anchor" href="https://0x00sec.org#bypass-method-5"></a>Bypass method</h3>
<p>After choosing one of the debugging methods decribed above, the target will now break on a SLIsWindowsGenuineLocal call.</p>
<p>We return from the call, and end up inside <em>SettingsEnvironment.Desktop.dll</em> module from which the call is being made.</p>
<p>If we search for all intermodular calls inside this DLL, we can see that there are two calls to the SLIsWindowsGenuineLocal.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/a/1/a1caca390a5814d7c95c6b9ede59bdca0aaed516.png" alt="slcall" data-base62-sha1="n5hlAmAhorlTNBI0I2teAHzoCuG" width="470" height="80"></p>
<p>The second call leads us to a small wrapper function (simple and unobfuscated) which checks if Windows is activated or not.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/f/a/fa7bb8bb72e07397878ff84fcd8b4253a4a09f1c.png" data-download-href="/uploads/short-url/zJSrh7WSwzEtpzvnlyTPN0993RO.png?dl=1" title="function" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/f/a/fa7bb8bb72e07397878ff84fcd8b4253a4a09f1c.png" alt="function" data-base62-sha1="zJSrh7WSwzEtpzvnlyTPN0993RO" width="517" height="168" data-dominant-color="EAE5C9"></a></div><p></p>
<p>This small function can be expressed like the following pseudocode:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/e/e/ee38bd63494712c5ae02816584617f30f6dd308c.png" alt="pseudoc" data-base62-sha1="xZpcy6gYNzoS0ZbeioHQKXmybNi" width="319" height="193"></p>
<p>Entire personalization settings are enabled or disabled, based on the return value of that function.<img src="https://0x00sec.org/images/emoji/twitter/slightly_smiling_face.png?v=12" title=":slightly_smiling_face:" class="emoji" alt=":slightly_smiling_face:" loading="lazy" width="20" height="20"></p>
<h3><a name="how-to-use-the-unlock-tool-sunlock11exe-6" class="anchor" href="https://0x00sec.org#how-to-use-the-unlock-tool-sunlock11exe-6"></a>How to use the unlock tool (sunlock11.exe)</h3>
<p>This tool is simple, and it works by patching the function described above inside SettingsEnvironment.Desktop.dll so that it always returns true value, tricking Settings app into thinking that the Windows is activated, thus enabling all of the personalization settings.</p>
<p><em>SettingsEnvironment.Desktop.dll</em> is a “system” file, owned by TrustedInstaller as other files in the System32 directory, so before patching it is necessary to set adequate permissions to be able to write to that DLL. This can be done manually (using takeown and icacls) or by using provided <strong>setpm.bat</strong> script which will do this automatically for you.</p>
<p>After modifying owner and permissions, run sunlock11.exe. Both the script and the unlock tool require administrative privileges, so make sure that you execute them as administrator.</p>
<h3><a name="project-demo-7" class="anchor" href="https://0x00sec.org#project-demo-7"></a>Project &amp; demo</h3>
<p>Visit the link below for a project:</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://github.com/revengsmK/sunlock11">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">

      <a href="https://github.com/revengsmK/sunlock11" target="_blank" rel="noopener nofollow ugc">GitHub</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/345;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/7/c7e2a663b6be3dd58b1063cc1e7c85ce54a085f4_2_690x345.png" class="thumbnail" data-dominant-color="E7E8E9" width="690" height="345" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/7/c7e2a663b6be3dd58b1063cc1e7c85ce54a085f4_2_690x345.png, https://0x00sec.s3.amazonaws.com/optimized/3X/c/7/c7e2a663b6be3dd58b1063cc1e7c85ce54a085f4_2_1035x517.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/c/7/c7e2a663b6be3dd58b1063cc1e7c85ce54a085f4.png 2x"></div>

<h3><a href="https://github.com/revengsmK/sunlock11" target="_blank" rel="noopener nofollow ugc">GitHub - revengsmK/sunlock11: Windows 11 Pro personalization settings unlock...</a></h3>

  <p>Windows 11 Pro personalization settings unlock tool. - GitHub - revengsmK/sunlock11: Windows 11 Pro personalization settings unlock tool.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>Video demo here:</p>
<p><a href="https://www.youtube.com/watch?v=GWBxjqhGOzg">Enable Windows 11 personalization settings without activation - sunlock11</a></p>

<h3><a name="disclaimer-8" class="anchor" href="https://0x00sec.org#disclaimer-8"></a>Disclaimer</h3>
<p>This program serves mainly as a reverse engineering demo, and you use it at your own risk. The author of this program cannot be held liable for any damages due to the use of this program. It is advisable not to use it on your main production PC, as it is modifying operating system file.</p>
          <p><a href="https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763/1</link>
        <pubDate>Mon, 06 Mar 2023 15:12:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33763-1</guid>
        <source url="https://0x00sec.org/t/unlock-windows-11-personalization-settings-by-modifying-settings-app-dll/33763.rss">Unlock Windows 11 personalization settings by modifying Settings app DLL</source>
      </item>
  </channel>
</rss>
