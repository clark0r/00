<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Stealing Cookies for Fun and Profit (PHPSESSID Theory)</title>
    <link>https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607</link>
    <description>You no doubt have heard of Cookie Sniffing before. You sniff out a cookie, and you have their session, right? Sounds easy. 

Firesheep made it incredibly easy, and you can do this easily with things like MiTMF or STELF. But what exactly are cookies, how do they work, and how can we exploit them? Let&#39;s investigate. 

To be a successful hacker we need to see the world through 3 viewpoints, a user&#39;s perspective, a developers perspective, and a hackers perspective. The latter of the three will fall into place by itself, but the first two can be more tricky than you think.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/5/5e5fdcf80d86ecca5d8f8fe7ffde5d0eea571b25.jpg&quot; width=&quot;650&quot; height=&quot;425&quot;&gt;

## A Users Perspective

Hi! My name is Larry, I&#39;m a user and I use example.com for email. I put in my email address and password and I can log on, then I can see my emails. I can open several tabs, and still be logged in.

## A Developers Perspective

There are two critical things to sessions (as is the case with pretty much anything web-app related), the client side and the server side. 

### Client Side
The client side is whatever the user&#39;s browser does, or store, We must be careful not to do anything too critical here since an attacker can easily modify their own browser, they control it. 
 
Cookies are stored on the client side, cookies are just small segments that store text. In PHP you can use cookies by referencing their ID and you will get a value from that.

### Server side

```php
// Set Cookie
$name = &quot;Gary Host&quot;;
$ttexpiry = time() + (86400 * 30); // 1 Day
setcookie(&quot;fullname&quot;, &quot;Gary Host&quot;, $ttexpiry, &quot;/&quot;);


// Retrieve Cookie Data
echo $_COOKIE[&quot;fullname&quot;];
```

As we can see in this short snippet, we can create a cookie, with setcookie (this takes 4 arguments)

-  **Cookie ID** - Or the thing we&#39;ll refer to it as
- **Value** - The value we&#39;ll get when we reference it
- **Time To Expiry** - How long the cookie will be valid and remain in the browser
- **Path** - Where the cookie will be valid in path etc &quot;/&quot; for the entire site

This snippet will output on the screen the words &quot;Gary Host&quot;. We can leave this page and come back later in the day and the words will still say that (even if the first 3 lines are removed).

Sessions in PHP work the same way, except the value in the cookie is not the user&#39;s name, it is the Session ID of the user. 

A Session ID is literally just a string unique to a user. This is generated randomly and associated to a particular account. 

However, since the discovery of certain tools, developers have worked hard to mitigate this session snatching problem, so they implemented guards against this. On modern services, no longer just having the same session ID is enough to own their session. 

Now they will generate hashes from data unique to the user, this may be a hash of the useragent, IP, and even resolution! 

## Hackers Perspective

Now that we know about how a cookie works, and how sessions operate on a basic level, we can understand how to exploit it. We must strive to imitate everything on the victim&#39;s computer. The most commonly used variables are the user agent, and resolution. Depending on the service, these will differ.

Data such as the user agent and resolution should be easy picking, especially with good recon. However if you have managed to steal the cookies, you will hopefully have found this in the logs. Whether you&#39;re using BeEF, STELF or MITMf. 

As for the IP, you might have to tunnel through their connection, unless you are on the same network. Again, BeEF and STELF allow you to do this via proxies. 

Services also tend to use more cookies than just the session ID, watch out as these have been known in the past to be taken into account for session resume. 

## Conclusion
Stealing cookies may be a simple task, but using those cookies is another beast. An understanding of how cookies work, and how sessions use those cookies can be eye-opening for an attacker. 

As with everything in the security world, knowing how a sysadmin and a developer thinks, helps you as a hacker know how to exploit it. The same way as a detective must know how a criminal thinks.

I hope this was of some use to you all! Especially those who will be trying out the new cookie dumping feature in STELF. If you have any questions drop a comment! And be sure to like this if you found this interesting! 

Until next time!

\- pry0cc</description>
    
    <lastBuildDate>Mon, 03 Dec 2018 20:54:50 +0000</lastBuildDate>
    <category>Web Hacking</category>
    <atom:link href="https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Stealing Cookies for Fun and Profit (PHPSESSID Theory)</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Necrobump, this might be helpful to some!</p>
<p>This is an old article!</p>
          <p><a href="https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607/9</link>
        <pubDate>Mon, 03 Dec 2018 20:54:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1607-9</guid>
        <source url="https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607.rss">Stealing Cookies for Fun and Profit (PHPSESSID Theory)</source>
      </item>
      <item>
        <title>Stealing Cookies for Fun and Profit (PHPSESSID Theory)</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607/8</link>
        <pubDate>Sun, 21 Jan 2018 00:41:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1607-8</guid>
        <source url="https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607.rss">Stealing Cookies for Fun and Profit (PHPSESSID Theory)</source>
      </item>
      <item>
        <title>Stealing Cookies for Fun and Profit (PHPSESSID Theory)</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Oh, I like it! Don’t worry!</p>
          <p><a href="https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607/7</link>
        <pubDate>Wed, 15 Feb 2017 22:33:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1607-7</guid>
        <source url="https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607.rss">Stealing Cookies for Fun and Profit (PHPSESSID Theory)</source>
      </item>
      <item>
        <title>Stealing Cookies for Fun and Profit (PHPSESSID Theory)</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>STELF is going to take over the world whether you like it or not. Just saying…</p>
          <p><a href="https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607/6</link>
        <pubDate>Wed, 15 Feb 2017 22:21:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1607-6</guid>
        <source url="https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607.rss">Stealing Cookies for Fun and Profit (PHPSESSID Theory)</source>
      </item>
      <item>
        <title>Stealing Cookies for Fun and Profit (PHPSESSID Theory)</title>
        <dc:creator><![CDATA[Fust3rCluck]]></dc:creator>
        <description><![CDATA[
            <p>Thank you, I needed a guide like this hahahaaa.</p>
          <p><a href="https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607/5</link>
        <pubDate>Wed, 15 Feb 2017 03:59:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1607-5</guid>
        <source url="https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607.rss">Stealing Cookies for Fun and Profit (PHPSESSID Theory)</source>
      </item>
      <item>
        <title>Stealing Cookies for Fun and Profit (PHPSESSID Theory)</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-VIP" data-username="pry0cc" data-post="1" data-topic="1607">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/pry0cc/40/6_2.png" class="avatar"> pry0cc:</div>
<blockquote>
<p>I hope this was of some use to you all! Especially those who will be trying out the new cookie dumping feature in STELF. If you have any questions drop a comment! And be sure to like this if you found this interesting!</p>
</blockquote>
</aside>
<p>Shameless self-promotion of a great piece of open-source software! Erm: <a href="https://git.0x00sec.org/JSchmoe/unnamed-shell">git it</a>.</p>
          <p><a href="https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607/4</link>
        <pubDate>Tue, 14 Feb 2017 22:31:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1607-4</guid>
        <source url="https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607.rss">Stealing Cookies for Fun and Profit (PHPSESSID Theory)</source>
      </item>
      <item>
        <title>Stealing Cookies for Fun and Profit (PHPSESSID Theory)</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>You no doubt have heard of Cookie Sniffing before. You sniff out a cookie, and you have their session, right? Sounds easy.</p>
<p>Firesheep made it incredibly easy, and you can do this easily with things like MiTMF or STELF. But what exactly are cookies, how do they work, and how can we exploit them? Let’s investigate.</p>
<p>To be a successful hacker we need to see the world through 3 viewpoints, a user’s perspective, a developers perspective, and a hackers perspective. The latter of the three will fall into place by itself, but the first two can be more tricky than you think.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/5/5e5fdcf80d86ecca5d8f8fe7ffde5d0eea571b25.jpg" width="650" height="425"></p>
<h2>A Users Perspective</h2>
<p>Hi! My name is Larry, I’m a user and I use <a href="http://example.com">example.com</a> for email. I put in my email address and password and I can log on, then I can see my emails. I can open several tabs, and still be logged in.</p>
<h2>A Developers Perspective</h2>
<p>There are two critical things to sessions (as is the case with pretty much anything web-app related), the client side and the server side.</p>
<h3>Client Side</h3>
<p>The client side is whatever the user’s browser does, or store, We must be careful not to do anything too critical here since an attacker can easily modify their own browser, they control it.</p>
<p>Cookies are stored on the client side, cookies are just small segments that store text. In PHP you can use cookies by referencing their ID and you will get a value from that.</p>
<h3>Server side</h3>
<pre><code class="lang-php">// Set Cookie
$name = "Gary Host";
$ttexpiry = time() + (86400 * 30); // 1 Day
setcookie("fullname", "Gary Host", $ttexpiry, "/");


// Retrieve Cookie Data
echo $_COOKIE["fullname"];
</code></pre>
<p>As we can see in this short snippet, we can create a cookie, with setcookie (this takes 4 arguments)</p>
<ul>
<li>
<strong>Cookie ID</strong> - Or the thing we’ll refer to it as</li>
<li>
<strong>Value</strong> - The value we’ll get when we reference it</li>
<li>
<strong>Time To Expiry</strong> - How long the cookie will be valid and remain in the browser</li>
<li>
<strong>Path</strong> - Where the cookie will be valid in path etc “/” for the entire site</li>
</ul>
<p>This snippet will output on the screen the words “Gary Host”. We can leave this page and come back later in the day and the words will still say that (even if the first 3 lines are removed).</p>
<p>Sessions in PHP work the same way, except the value in the cookie is not the user’s name, it is the Session ID of the user.</p>
<p>A Session ID is literally just a string unique to a user. This is generated randomly and associated to a particular account.</p>
<p>However, since the discovery of certain tools, developers have worked hard to mitigate this session snatching problem, so they implemented guards against this. On modern services, no longer just having the same session ID is enough to own their session.</p>
<p>Now they will generate hashes from data unique to the user, this may be a hash of the useragent, IP, and even resolution!</p>
<h2>Hackers Perspective</h2>
<p>Now that we know about how a cookie works, and how sessions operate on a basic level, we can understand how to exploit it. We must strive to imitate everything on the victim’s computer. The most commonly used variables are the user agent, and resolution. Depending on the service, these will differ.</p>
<p>Data such as the user agent and resolution should be easy picking, especially with good recon. However if you have managed to steal the cookies, you will hopefully have found this in the logs. Whether you’re using BeEF, STELF or MITMf.</p>
<p>As for the IP, you might have to tunnel through their connection, unless you are on the same network. Again, BeEF and STELF allow you to do this via proxies.</p>
<p>Services also tend to use more cookies than just the session ID, watch out as these have been known in the past to be taken into account for session resume.</p>
<h2>Conclusion</h2>
<p>Stealing cookies may be a simple task, but using those cookies is another beast. An understanding of how cookies work, and how sessions use those cookies can be eye-opening for an attacker.</p>
<p>As with everything in the security world, knowing how a sysadmin and a developer thinks, helps you as a hacker know how to exploit it. The same way as a detective must know how a criminal thinks.</p>
<p>I hope this was of some use to you all! Especially those who will be trying out the new cookie dumping feature in STELF. If you have any questions drop a comment! And be sure to like this if you found this interesting!</p>
<p>Until next time!</p>
<p>- pry0cc</p>
          <p><a href="https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607/1</link>
        <pubDate>Tue, 14 Feb 2017 18:38:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1607-1</guid>
        <source url="https://0x00sec.org/t/stealing-cookies-for-fun-and-profit-phpsessid-theory/1607.rss">Stealing Cookies for Fun and Profit (PHPSESSID Theory)</source>
      </item>
  </channel>
</rss>
