<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Writeup: 0x00sec CTF - Exercise #3</title>
    <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-3/19957</link>
    <description>![header-ctf-0x00sec|690x269](upload://wOiVhJMMswDlMlkqZB8w6ZTLfjQ.png) 

# Writeup CTF 0x00sec Web - Exercise #3

Another day, another ctf challenge.  This time no. 3 of the web exercises

## Challenge

As you may have read my previous write-ups you will know that it is always good to checkout the page source first. As you can get a lot of useful information out of it.

And this time, we also proceed the same way.

![ctf-source|690x369](upload://6uZ6GtMRSTe4TsdpWtjZSDDyLf5.png) 

If we take a look at the page source, we will find a left-over html comment with a nice hint.

```html
  &lt;!-- TODO: --&gt;
  &lt;!-- * Implement secure object references--&gt;
```


## Object References

Well, if you not familiar with this kind of attack you may want to google a bit and after a while you will find tons of articles about IDOR (Insecure Direct Object Reference) attacks.

[OWASP](https://owasp.org/www-chapter-ghana/assets/slides/IDOR.pdf)for example is always a good source of information and worth a read.

## The Attack

Based on the hint, let&#39;s assume that we are dealing here with an IDOR Vulnerability.

But, ... we only see a login field in there. Nothing more. Now it is guessing time.
Let&#39;s try to login with some commonly used credentials. If we try `admin:admin` we are logged in.

![login|690x468](upload://y3P0UvH3ULXBrJ4E6hqfelFRbnx.png) 

If we take a close look at the URL we see that is has the query parameter `user_id=5` . We can assume that this is our `user_id`.

But what happens if we supply another `user_id` ?

If we visit `user_id=1` we get the profile of another user. Now we just need to test along the ids. 

And with `user_id=2` we get a profile where the flag is hidden.


## Conclusion

This was a fun little challenge which teaches you one of the most important and critical vulnerabilities. 

Some examples from hackerone:

- [https://hackerone.com/reports/681473](https://hackerone.com/reports/681473)
- [https://hackerone.com/reports/380410](https://hackerone.com/reports/380410)
- [https://hackerone.com/reports/148764](https://hackerone.com/reports/148764)

Happy Hacking.</description>
    
    <lastBuildDate>Sat, 21 Mar 2020 15:34:56 +0000</lastBuildDate>
    <category>CTF</category>
    <atom:link href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-3/19957.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Writeup: 0x00sec CTF - Exercise #3</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-3/19957/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-3/19957/2</link>
        <pubDate>Tue, 21 Jul 2020 07:34:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19957-2</guid>
        <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-3/19957.rss">Writeup: 0x00sec CTF - Exercise #3</source>
      </item>
      <item>
        <title>Writeup: 0x00sec CTF - Exercise #3</title>
        <dc:creator><![CDATA[H45uK1mchi]]></dc:creator>
        <description><![CDATA[
            <p><span alt="header-ctf-0x00sec" data-base62-sha1="wOiVhJMMswDlMlkqZB8w6ZTLfjQ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<h1>Writeup CTF 0x00sec Web - Exercise <span class="hashtag">#3</span>
</h1>
<p>Another day, another ctf challenge.  This time no. 3 of the web exercises</p>
<h2>Challenge</h2>
<p>As you may have read my previous write-ups you will know that it is always good to checkout the page source first. As you can get a lot of useful information out of it.</p>
<p>And this time, we also proceed the same way.</p>
<p><span alt="ctf-source" data-base62-sha1="6uZ6GtMRSTe4TsdpWtjZSDDyLf5" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>If we take a look at the page source, we will find a left-over html comment with a nice hint.</p>
<pre><code class="lang-auto">  &lt;!-- TODO: --&gt;
  &lt;!-- * Implement secure object references--&gt;
</code></pre>
<h2>Object References</h2>
<p>Well, if you not familiar with this kind of attack you may want to google a bit and after a while you will find tons of articles about IDOR (Insecure Direct Object Reference) attacks.</p>
<p><a href="https://owasp.org/www-chapter-ghana/assets/slides/IDOR.pdf" rel="nofollow noopener">OWASP</a>for example is always a good source of information and worth a read.</p>
<h2>The Attack</h2>
<p>Based on the hint, let’s assume that we are dealing here with an IDOR Vulnerability.</p>
<p>But, … we only see a login field in there. Nothing more. Now it is guessing time.<br>
Let’s try to login with some commonly used credentials. If we try <code>admin:admin</code> we are logged in.</p>
<p><span alt="login" data-base62-sha1="y3P0UvH3ULXBrJ4E6hqfelFRbnx" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>If we take a close look at the URL we see that is has the query parameter <code>user_id=5</code> . We can assume that this is our <code>user_id</code>.</p>
<p>But what happens if we supply another <code>user_id</code> ?</p>
<p>If we visit <code>user_id=1</code> we get the profile of another user. Now we just need to test along the ids.</p>
<p>And with <code>user_id=2</code> we get a profile where the flag is hidden.</p>
<h2>Conclusion</h2>
<p>This was a fun little challenge which teaches you one of the most important and critical vulnerabilities.</p>
<p>Some examples from hackerone:</p>
<ul>
<li><a href="https://hackerone.com/reports/681473" rel="nofollow noopener">https://hackerone.com/reports/681473</a></li>
<li><a href="https://hackerone.com/reports/380410" rel="nofollow noopener">https://hackerone.com/reports/380410</a></li>
<li><a href="https://hackerone.com/reports/148764" rel="nofollow noopener">https://hackerone.com/reports/148764</a></li>
</ul>
<p>Happy Hacking.</p>
          <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-3/19957/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-3/19957/1</link>
        <pubDate>Sat, 21 Mar 2020 15:34:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19957-1</guid>
        <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-3/19957.rss">Writeup: 0x00sec CTF - Exercise #3</source>
      </item>
  </channel>
</rss>
