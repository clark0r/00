<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>IOT Firmware Hacking (tutorial)</title>
    <link>https://0x00sec.org/t/iot-firmware-hacking-tutorial/28862</link>
    <description>Hello everyone, today I will give a tutorial on IOT Firmware Hacking. I hope that  you find this useful.

### How to get the firmware

* Vendors website
* Support groups
* Community forums
* OTA update sniffing
* Mobile application
* Dumping from the device

### Analyzing firmware

* Analyze it via `strings` and `hexdump`
* **Is the firmware encrypted?**
  * What kind of encryption is being used?
    * `hexdump -C firmware.bin`
    * `strings firmware.bin`
    * `binwalk -E firmware.bin` to figure out the entropy
  * Where can you find the encryption keys?
  * How can you get a copy of the decrypted firmware?
* **Extracting components from the firmware**
  * Extract the file system ( `binwalk -e firmware.bin` )
  * Does the file system has hardcoded credentials ( `grep` is your friend)
    * API keys
    * Private certificates
    * Backdoors
    * Sensitive URLs
    * Config files revealing useful information
* **Emulating the firmware**
  * Identify the architecture
  * Emulate the firmware using Qemu and Chroot or FAT ( `python fat.py` - FAT available from [here](https://github.com/attify/firmware-analysis-toolkit) )
  * Perform analysis and exploitation via emulation
* **Reverse engineering firmware binaries**
  * Command Injection bugs (IDA analysis and looking at the web files)
  * Identifying Buffer overflows and other software binary specific vulns and exploitation
    * what all security protections are there in place?
    * Bypassing the security protections.</description>
    
    <lastBuildDate>Sat, 02 Apr 2022 12:11:56 +0000</lastBuildDate>
    <category>Uncategorized</category>
    <atom:link href="https://0x00sec.org/t/iot-firmware-hacking-tutorial/28862.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>IOT Firmware Hacking (tutorial)</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/iot-firmware-hacking-tutorial/28862/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/iot-firmware-hacking-tutorial/28862/2</link>
        <pubDate>Tue, 02 Aug 2022 04:11:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-28862-2</guid>
        <source url="https://0x00sec.org/t/iot-firmware-hacking-tutorial/28862.rss">IOT Firmware Hacking (tutorial)</source>
      </item>
      <item>
        <title>IOT Firmware Hacking (tutorial)</title>
        <dc:creator><![CDATA[C_J]]></dc:creator>
        <description><![CDATA[
            <p>Hello everyone, today I will give a tutorial on IOT Firmware Hacking. I hope that  you find this useful.</p>
<h3>
<a name="how-to-get-the-firmware-1" class="anchor" href="https://0x00sec.org#how-to-get-the-firmware-1"></a>How to get the firmware</h3>
<ul>
<li>Vendors website</li>
<li>Support groups</li>
<li>Community forums</li>
<li>OTA update sniffing</li>
<li>Mobile application</li>
<li>Dumping from the device</li>
</ul>
<h3>
<a name="analyzing-firmware-2" class="anchor" href="https://0x00sec.org#analyzing-firmware-2"></a>Analyzing firmware</h3>
<ul>
<li>Analyze it via <code>strings</code> and <code>hexdump</code>
</li>
<li>
<strong>Is the firmware encrypted?</strong>
<ul>
<li>What kind of encryption is being used?
<ul>
<li><code>hexdump -C firmware.bin</code></li>
<li><code>strings firmware.bin</code></li>
<li>
<code>binwalk -E firmware.bin</code> to figure out the entropy</li>
</ul>
</li>
<li>Where can you find the encryption keys?</li>
<li>How can you get a copy of the decrypted firmware?</li>
</ul>
</li>
<li>
<strong>Extracting components from the firmware</strong>
<ul>
<li>Extract the file system ( <code>binwalk -e firmware.bin</code> )</li>
<li>Does the file system has hardcoded credentials ( <code>grep</code> is your friend)
<ul>
<li>API keys</li>
<li>Private certificates</li>
<li>Backdoors</li>
<li>Sensitive URLs</li>
<li>Config files revealing useful information</li>
</ul>
</li>
</ul>
</li>
<li>
<strong>Emulating the firmware</strong>
<ul>
<li>Identify the architecture</li>
<li>Emulate the firmware using Qemu and Chroot or FAT ( <code>python fat.py</code> - FAT available from <a href="https://github.com/attify/firmware-analysis-toolkit" rel="noopener nofollow ugc">here</a> )</li>
<li>Perform analysis and exploitation via emulation</li>
</ul>
</li>
<li>
<strong>Reverse engineering firmware binaries</strong>
<ul>
<li>Command Injection bugs (IDA analysis and looking at the web files)</li>
<li>Identifying Buffer overflows and other software binary specific vulns and exploitation
<ul>
<li>what all security protections are there in place?</li>
<li>Bypassing the security protections.</li>
</ul>
</li>
</ul>
</li>
</ul>
          <p><a href="https://0x00sec.org/t/iot-firmware-hacking-tutorial/28862/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/iot-firmware-hacking-tutorial/28862/1</link>
        <pubDate>Sat, 02 Apr 2022 12:11:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-28862-1</guid>
        <source url="https://0x00sec.org/t/iot-firmware-hacking-tutorial/28862.rss">IOT Firmware Hacking (tutorial)</source>
      </item>
  </channel>
</rss>
