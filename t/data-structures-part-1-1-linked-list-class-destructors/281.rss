<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Data Structures (Part 1.1): Linked List [Class Destructors]</title>
    <link>https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281</link>
    <description>Hey 0x00sec community!

This one will be short. Today, I&#39;m going to show you the destructors I have implemented for my `List` and `node` classes.

----
# A Recap of the Header Files

__node.h__:
```java
template &lt;class T&gt;
class node {
  private:
	T data;
	
  public:

  	node&lt;T&gt;* next;
	
	// class constructor
	node(T _data = 0, node&lt;T&gt;* ptr = nullptr)
		: data(_data), next(ptr) {}
	
	~node();

	// other methods
};
```
(lol, so using Java syntax highlighting makes comments work, but C++ highlighting doesn&#39;t. &quot;Note to self...&quot;)

----
__list.h__:
```java
template &lt;class T&gt;
class List {
  private:
	  node&lt;T&gt;* root;
	  size_t len;

  public:

  	List()
  		: root(nullptr), len(0) {}

  	~List();

  	// other methods
```
----
# Destructors

__list destructor__
```java
template &lt;class T&gt;
List&lt;T&gt;::~List() {
        if (root != nullptr) //EDIT: only delete root if it isn&#39;t a nullptr
	        delete root; // root is a node&lt;T&gt;*,
	// whose destructor deletes whatever the node points to
}
```
----
__node destructor__
```java
template &lt;class T&gt;
node&lt;T&gt;::~node() {
	if (next != nullptr) {
		delete next;
	}
}
```
---
# Why It Works

In my design for linked lists, we never interact with `node`s outside of the `List` class, meaning we never deal with naked `node`s, nor do we deal with pointers to `node`s on our own.

Every `node` is handled by a `List`.

In some `main()`, I can make a new list  like so:
```java
List&lt;int&gt; mylist;
```
Currently, I have only made a constructor for `List` that takes no parameters.

If I want to add a `node` to `mylist`, I call `mylist.append(&lt;some data&gt;)`. __Note__: _I have yet to show you `append(...)`, but it does exist and it does work._

`List`&#39;s `append()` takes care of acquiring resources for a new `node`. Now, remember that `List` has two data members: `node&lt;T&gt;* root` and `size_t len`. The one relevant to us now is `node&lt;T&gt;* root`. That is a pointer. How do we work with pointers in C++? `new` and `delete`.

So, when I `append(...)` to `mylist`, I essentially do `new node&lt;T&gt;`.

When `mylist` goes out of scope, `~List()` gets called. All it does is `delete root`. But, in deleting `root`, which is a `node&lt;T&gt;*`, we call `~node()`. In `~node()`, we `delete next` (remember that `next` is a `node&lt;T&gt;*`) __IF__ `next` is not a `nullptr` (`NULL` in C). When we `delete next`, we call the destructor for `next`. Wait, what destructor is that? `~node()`!

__BOOM__. So, using _implicit recursion_, the entire linked list, consisting of `node&lt;T&gt;*`s gets deallocated responsibly.

Keep linking those lists guys,
oaktree</description>
    
    <lastBuildDate>Wed, 24 Aug 2016 20:34:09 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Data Structures (Part 1.1): Linked List [Class Destructors]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281/5</link>
        <pubDate>Sun, 21 Jan 2018 00:37:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-281-5</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281.rss">Data Structures (Part 1.1): Linked List [Class Destructors]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.1): Linked List [Class Destructors]</title>
        <dc:creator><![CDATA[Donnette]]></dc:creator>
        <description><![CDATA[
            <p>You are seriously smart, oaktree!</p>
<p>Thanks for inviting me here! I love it!</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281/4</link>
        <pubDate>Wed, 24 Aug 2016 20:34:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-281-4</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281.rss">Data Structures (Part 1.1): Linked List [Class Destructors]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.1): Linked List [Class Destructors]</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>C implementation:</p>
<h3>node.c</h3>
<pre><code class="lang-auto">void freeNode(link n) {
    free(n);
}
</code></pre>
<h3>list.c</h3>
<pre><code class="lang-cpp">void freeList(List l) {
    while (l-&gt;first != NULL) {
        // grab a hold of the first node so it is reachable
        link temp = l-&gt;first;
        // shift first's next node to become new first
        l-&gt;first = l-&gt;first-&gt;next;
        // free old first
        free(temp);
    }
    // free list itself
    free(l);
}
</code></pre>
<p>P.S. I also noticed the syntax highlighting disappearing after the first code block.</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281/3</link>
        <pubDate>Tue, 10 May 2016 10:50:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-281-3</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281.rss">Data Structures (Part 1.1): Linked List [Class Destructors]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.1): Linked List [Class Destructors]</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for the post mate! Keep 'em coming! Excited to see what you’ll have for “Part 1.2” <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281/2</link>
        <pubDate>Tue, 10 May 2016 02:02:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-281-2</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281.rss">Data Structures (Part 1.1): Linked List [Class Destructors]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.1): Linked List [Class Destructors]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Hey 0x00sec community!</p>
<p>This one will be short. Today, I’m going to show you the destructors I have implemented for my <code>List</code> and <code>node</code> classes.</p>
<hr>
<h1>A Recap of the Header Files</h1>
<p><strong>node.h</strong>:</p>
<pre><code class="lang-java">template &lt;class T&gt;
class node {
  private:
	T data;
	
  public:

  	node&lt;T&gt;* next;
	
	// class constructor
	node(T _data = 0, node&lt;T&gt;* ptr = nullptr)
		: data(_data), next(ptr) {}
	
	~node();

	// other methods
};
</code></pre>
<p>(lol, so using Java syntax highlighting makes comments work, but C++ highlighting doesn’t. “Note to self…”)</p>
<hr>
<p><strong>list.h</strong>:</p>
<pre><code class="lang-java">template &lt;class T&gt;
class List {
  private:
	  node&lt;T&gt;* root;
	  size_t len;

  public:

  	List()
  		: root(nullptr), len(0) {}

  	~List();

  	// other methods
</code></pre>
<hr>
<h1>Destructors</h1>
<p><strong>list destructor</strong></p>
<pre><code class="lang-java">template &lt;class T&gt;
List&lt;T&gt;::~List() {
        if (root != nullptr) //EDIT: only delete root if it isn't a nullptr
	        delete root; // root is a node&lt;T&gt;*,
	// whose destructor deletes whatever the node points to
}
</code></pre>
<hr>
<p><strong>node destructor</strong></p>
<pre><code class="lang-java">template &lt;class T&gt;
node&lt;T&gt;::~node() {
	if (next != nullptr) {
		delete next;
	}
}
</code></pre>
<hr>
<h1>Why It Works</h1>
<p>In my design for linked lists, we never interact with <code>node</code>s outside of the <code>List</code> class, meaning we never deal with naked <code>node</code>s, nor do we deal with pointers to <code>node</code>s on our own.</p>
<p>Every <code>node</code> is handled by a <code>List</code>.</p>
<p>In some <code>main()</code>, I can make a new list  like so:</p>
<pre><code class="lang-java">List&lt;int&gt; mylist;
</code></pre>
<p>Currently, I have only made a constructor for <code>List</code> that takes no parameters.</p>
<p>If I want to add a <code>node</code> to <code>mylist</code>, I call <code>mylist.append(&lt;some data&gt;)</code>. <strong>Note</strong>: <em>I have yet to show you <code>append(...)</code>, but it does exist and it does work.</em></p>
<p><code>List</code>'s <code>append()</code> takes care of acquiring resources for a new <code>node</code>. Now, remember that <code>List</code> has two data members: <code>node&lt;T&gt;* root</code> and <code>size_t len</code>. The one relevant to us now is <code>node&lt;T&gt;* root</code>. That is a pointer. How do we work with pointers in C++? <code>new</code> and <code>delete</code>.</p>
<p>So, when I <code>append(...)</code> to <code>mylist</code>, I essentially do <code>new node&lt;T&gt;</code>.</p>
<p>When <code>mylist</code> goes out of scope, <code>~List()</code> gets called. All it does is <code>delete root</code>. But, in deleting <code>root</code>, which is a <code>node&lt;T&gt;*</code>, we call <code>~node()</code>. In <code>~node()</code>, we <code>delete next</code> (remember that <code>next</code> is a <code>node&lt;T&gt;*</code>) <strong>IF</strong> <code>next</code> is not a <code>nullptr</code> (<code>NULL</code> in C). When we <code>delete next</code>, we call the destructor for <code>next</code>. Wait, what destructor is that? <code>~node()</code>!</p>
<p><strong>BOOM</strong>. So, using <em>implicit recursion</em>, the entire linked list, consisting of <code>node&lt;T&gt;*</code>s gets deallocated responsibly.</p>
<p>Keep linking those lists guys,<br>
oaktree</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281/1</link>
        <pubDate>Tue, 10 May 2016 01:49:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-281-1</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-1-linked-list-class-destructors/281.rss">Data Structures (Part 1.1): Linked List [Class Destructors]</source>
      </item>
  </channel>
</rss>
