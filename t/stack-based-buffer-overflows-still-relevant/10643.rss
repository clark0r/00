<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Stack based buffer overflows... still relevant?</title>
    <link>https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643</link>
    <description>Hey guys, newbie here. 
In your opinion, is studying stack based buffer overflows still relevant nowadays? I mean with stack protection compilation by default, and other memory security measures in modern Linux and Windows systems?
Do you know if this kind of vulnerabilities are still being developed and exploited &quot;in the wild&quot; ?
Thank for answering,

Regards</description>
    
    <lastBuildDate>Fri, 22 Feb 2019 08:45:48 +0000</lastBuildDate>
    <category>Beginner Guides</category>
    <atom:link href="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Stack based buffer overflows... still relevant?</title>
        <dc:creator><![CDATA[hunter]]></dc:creator>
        <description><![CDATA[
            <p>Yes it is certainly relevant. Return pointer isn’t the goal everytime. There are whole bunch of other variables and structures on a function stack that you can exploit, to make your application misbehave. So it’s all up to imagination.</p>
          <p><a href="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/8</link>
        <pubDate>Fri, 22 Feb 2019 08:45:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10643-8</guid>
        <source url="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643.rss">Stack based buffer overflows... still relevant?</source>
      </item>
      <item>
        <title>Stack based buffer overflows... still relevant?</title>
        <dc:creator><![CDATA[binshift2]]></dc:creator>
        <description><![CDATA[
            <p>Here is an interesting read I just saw this morning on Slashdot.  Looks to be quite relevant.<br>
</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://it.slashdot.org/favicon.ico" class="site-icon" width="16" height="16">
      <a href="https://it.slashdot.org/story/19/02/11/2019247/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues" target="_blank" rel="noopener nofollow ugc">it.slashdot.org</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d54b3fba0b0a68a7750066319d33b84b81c4692c.png" class="thumbnail" width="" height="">

<h3><a href="https://it.slashdot.org/story/19/02/11/2019247/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues" target="_blank" rel="noopener nofollow ugc">Microsoft: 70 Percent of All Security Bugs Are Memory Safety Issues - Slashdot</a></h3>

<p>Around 70 percent of all the vulnerabilities in Microsoft products addressed through a security update each year are memory safety issues; a Microsoft engineer revealed last week at a security conference. From a report: Memory safety is a term used...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
<p>Enjoy</p>
<p>Bin</p>
          <p><a href="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/7</link>
        <pubDate>Tue, 12 Feb 2019 18:36:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10643-7</guid>
        <source url="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643.rss">Stack based buffer overflows... still relevant?</source>
      </item>
      <item>
        <title>Stack based buffer overflows... still relevant?</title>
        <dc:creator><![CDATA[stromy]]></dc:creator>
        <description><![CDATA[
            <p>I just want to point out that it actually is still relevant today, even in modern software equipped with all the latest mitigations. For example in his 35c3 talk, <a href="https://www.youtube.com/watch?v=kg0J8nRIAhk" rel="nofollow noopener">Modern Windows Userspace Exploitation</a> Saar Amar uses arbitrary r/w primitive to overwrite return address on stack (which is literally what stack overflows are mostly all about) to bypass the latest mitigations. Ofc it’s much more complicated than a simple buffer overflow, but studying those simple techniques gives you a better understanding and feel on what you can do with a program.</p>
          <p><a href="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/6</link>
        <pubDate>Sun, 13 Jan 2019 11:31:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10643-6</guid>
        <source url="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643.rss">Stack based buffer overflows... still relevant?</source>
      </item>
      <item>
        <title>Stack based buffer overflows... still relevant?</title>
        <dc:creator><![CDATA[VonNaturAustreVe]]></dc:creator>
        <description><![CDATA[
            <p>I my opinion is relevant because IoT, many device used old operation system of the never received updates with many vulnerabilities.</p>
<p>[]'s</p>
          <p><a href="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/5</link>
        <pubDate>Sun, 06 Jan 2019 13:24:00 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10643-5</guid>
        <source url="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643.rss">Stack based buffer overflows... still relevant?</source>
      </item>
      <item>
        <title>Stack based buffer overflows... still relevant?</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>I would like to point out that although there are all these fancy new exploitation protection mitigations, it still does not excuse the fact that they should not be relied upon 100% of the time. This may be news to you but there <em>are</em> ways to bypass stack cookies even though there is a buffer overflow vulnerability. AFAIK, under Windows, stack cookies are <strong>not</strong> present in functions other than where there are string buffers meaning that if you have an array of any other data type, a buffer overflow exploit is possible. Another way to bypass stack cookies is by leveraging the SEH <strong>or</strong> by overwriting a (C++) class’s virtual table’s method (this is protected by CFG/CFI but not all programs are compiled with this! e.g. Steam, Discord, Firefox…).</p>
<p>If you intend to learn exploitation, I would highly advise you to learn them anyway, not only because they are one of the easier concepts to grasp but because they will help you understand the stack a bit more if you aren’t already familiar with it. Remember that it’s not as simple as it was 10 years ago where a single buffer overflow that took 10 minutes to develop would own the program, it requires much more effort and should be important to learn as many techniques as you can.</p>
          <p><a href="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/4</link>
        <pubDate>Sun, 06 Jan 2019 02:05:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10643-4</guid>
        <source url="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643.rss">Stack based buffer overflows... still relevant?</source>
      </item>
      <item>
        <title>Stack based buffer overflows... still relevant?</title>
        <dc:creator><![CDATA[r10d]]></dc:creator>
        <description><![CDATA[
            <p>Sure. It’s quite hard for buffer overflow vulnerabilities to be found and exploited. You cannot just input something to a program to cause buffer overflow with no understanding what you are doing. Basically, it usually takes much more time to get the program to accept some input, and vulnerability research is required for that, which requires patience and motivation. It’s easy in examples only.</p>
<p>I’d say that training your programming skills will help you, that’s the point where your programming skills are important, especially C.</p>
          <p><a href="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/3</link>
        <pubDate>Fri, 04 Jan 2019 17:51:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10643-3</guid>
        <source url="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643.rss">Stack based buffer overflows... still relevant?</source>
      </item>
      <item>
        <title>Stack based buffer overflows... still relevant?</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <p>Hey,</p>
<p>IMHO you always should learn and master the basics before continuing with the “next level”. Otherwise you will encounter things on your journey which you do not understand but should have knowledge of!</p>
<p>Stack based buffer overflows belong to the basics and have been spotted in the wild ever since they first became public knowledge.<br>
If I check the last submitted entries on <a href="https://www.exploit-db.com/search?q=buffer">ExploitDB</a> there are quite a bunch of submissions for buffer overflows. Mostly for older operating systems or software versions though. This is due to the already mentioned fact that things are getting hardened and more difficult to exploit via basic techniques.</p>
<p><em>But</em>, do you want to learn all the basics, where it started and how it evolved with only a certain possibility for later usage of that knowledge? Then it’s totally relevant. Look at it as academically and personally relevant.</p>
<p>That said especially in the IoT world many if not most devices there run on older hardware with ancient kernels (2.6.X) and outdated software. Often with not enough space or even capabilities to update those. So for someone researching these devices buffer overflows might be a necessary form of craftsmanship to know because exploit mitigations are seldom present either.</p>
<p>If your target is the hottest new software on the hottest new OS with the latest fresh security updates stack based buffer overflows most likely will not be the way to go (who knows though <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"> ), but the knowledge you learned along the way when starting from the bottom moving to new exploitation techniques will be more than helpful.</p>
<p>TL;DR: IMHO yes.</p>
          <p><a href="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/2</link>
        <pubDate>Fri, 04 Jan 2019 14:32:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10643-2</guid>
        <source url="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643.rss">Stack based buffer overflows... still relevant?</source>
      </item>
      <item>
        <title>Stack based buffer overflows... still relevant?</title>
        <dc:creator><![CDATA[alco]]></dc:creator>
        <description><![CDATA[
            <p>Hey guys, newbie here.<br>
In your opinion, is studying stack based buffer overflows still relevant nowadays? I mean with stack protection compilation by default, and other memory security measures in modern Linux and Windows systems?<br>
Do you know if this kind of vulnerabilities are still being developed and exploited “in the wild” ?<br>
Thank for answering,</p>
<p>Regards</p>
          <p><a href="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643/1</link>
        <pubDate>Fri, 04 Jan 2019 14:03:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10643-1</guid>
        <source url="https://0x00sec.org/t/stack-based-buffer-overflows-still-relevant/10643.rss">Stack based buffer overflows... still relevant?</source>
      </item>
  </channel>
</rss>
