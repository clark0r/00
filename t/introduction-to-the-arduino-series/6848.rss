<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Introduction to the Arduino Series</title>
    <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848</link>
    <description>**My Introduction**
First, I would like to thank 0x00sec for providing such a great community. I would also like to thank [Arrogant Bastard](http://www.arrogantbrewing.com), [Sierra Nevada](https://sierranevada.com/beer) and [Deathwish Coffee](http://deathwishcoffee.com) for providing the sustenance necessary for starting and completing the following series. Not only should you get drunk while completing these projects but you should consume the correct amount of coffee as well. It&#39;s part of a well balanced diet (which includes ramen of course). You may also need bic lighters and your choice of tobacco, pre rolled cigarettes (like Marlboro) and my favorite, Zig Zag rolling papers.

I hold a degree in Information Systems (CIS), and am not an electrician or mechanical engineer. I have been creating software since 1998, so about 20 years. I run my own SEO and web development business and am creating this series to help this community grow and to help you, the reader, grow. I was creating software before the internet was blessed with PHP and when Oracle was still 8i. I am an old drunken tattooed programmer, so excuse the language if you&#39;re a christian, excuse the drinking if you&#39;re a teetotaler, and most importantly remember that I am always open to criticism, hate and suggestions. 

**Arduino Series Introduction**
The Arduino has made it possible for hundreds of thousands of people to create gadgets they normally otherwise wouldn&#39;t have been able to build. The Arduino is a micro controller that allows you to assemble and create just about anything you can dream up. Arduinos can be bought for dirt cheap online ([ebay](https://www.ebay.com/sch/i.html?_from=R40&amp;_trksid=p2380057.m570.l1311.R4.TR12.TRC2.A0.H0.Xarduino+un.TRS0&amp;_nkw=arduino+uno+r3&amp;_sacat=0), [amazon](https://www.amazon.com/s/ref=nb_sb_ss_i_3_10?url=search-alias%3Daps&amp;field-keywords=arduino+uno+r3&amp;sprefix=arduino+un%2Caps%2C286&amp;crid=32ARQFC3MV6P7)) and there are even resources to [create your own Arduino](http://www.instructables.com/id/Build-Your-Own-Arduino/) using schematics provided by the Arduino team.

I will be using Ubuntu (Xenial) as the operating system of my choice. I will not be covering anything under the Windows operating system. I will also not be using any of the online Arduino compilers/Uploaders such as the one at [arduino.cc](https://create.arduino.cc). I will also use the words method and function interchangeably, as they mean the same thing. Some language (such as C#) call them methods and some languages prefer to call them functions (like PHP).

This series will walk you through creating projects with the Arduino. The projects will be more advanced the further we dive into the Arduino. This series will require you to have certain sensors and and hardware required to complete the projects. I will provide links to websites to purchase the sensors and hardware, and of course, I will keep price in mind. Most sensors and &quot;shields&quot; for the Arduino are inexpensive. Some of the sensors and components we will be integrating will be:

* [LCD screens](https://www.gearbest.com/goods/pp_009979800776.html)
* Heat and Temperature
* Light
* Flame
* Buttons
* [WiFi](https://www.gearbest.com/goods/pp_009268601400.html)
* [Sound detectors](https://www.gearbest.com/goods/pp_009101055960.html)
* [Lasers](https://www.gearbest.com/goods/pp_009542167908.html)
* [Cameras](https://www.gearbest.com/goods/pp_009369146062.html)
* Dot Matrixes
* etc etc

**Pre-requisites**
* It is assumed that you have a basic understanding of the C programming language. If you don&#39;t know anything about programming, you may not make it very far in this series.
* You will need a laptop/desktop computer capable of running the Arduino IDE.
* I will be using an Arduino Uno R3. You can use another type of Arduino provided you understand the pinouts and voltages required for the upcoming projects/articles.
* A breadboard
* Jumper wires
* An Arduino board

**Getting Started**
First, let&#39;s install the IDE and get it up and connected to the board.
&gt; sudo apt-get -y install arduino

Once it is installed, open the IDE and connect the Arduino via the USB cable. You will need to make sure the correct board is chosen from the **Tools** menu.

![png|690x387](upload://kRgvx9xOc4lK0r4xKQPBJbj6Iac.jpg)

The Arduino&#39;s code that we will upload is called a sketch. You can find many many free sketches online for all sorts of things. The code is a set of C and C++, so knowing C will help you greatly and YES you must know the basics of C. You could learn along the way but I strongly suggest learning it before continuing this series. So let&#39;s take a look at the Arduino.

![IMG_20180527_012959|690x388](upload://18falzp1M7RI5HPo5iVYCWQeqmW.jpg)
![IMG_20180527_012959-2|690x388](upload://fVqVshrYtIFiOXzKq2T0KZYfPHt.jpg)

1. Reset button
2. Digital pins
3. USB connector
4. AT Mega 328P ([data sheet](http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-42735-8-bit-AVR-Microcontroller-ATmega328-328P_Datasheet.pdf))
5. DC power connector

The reset button will reset the board, replaying the sketch from the beginning. The digital pins you need to know about right now, (from left to right as pictured) are GND for ground and 13 to 0. We might cover the AREF pin later on (this pin is for Analog reference). The pins on the other side is for Analog, which we will use later as well.

**Voltage and Dangers**
The Arduino outputs 5 volts. This is indeed what is referred to as &quot;low voltage&quot;. Nothing we do here will involve &quot;mains&quot; voltage, which could kill you. We will be using sensors that could possibly burnt he shit out of you and cause you to go blind momentarily, but I assure you, you will be okay. For example, if your pumping 5 volts into a sensor that requires 1 volt or half a volt and you touch it, you will probably be burned. Be careful and use your head brain.

**Your First LED Blink**
Our first project will be something very simple, to get you familiar with the coding and uploading process. We will use a very simple LED project, which is normally the first thing you do in any other &quot;hello world&quot; type Arduino project. So you will need an [LED](https://en.wikipedia.org/wiki/Light-emitting_diode) for this one, like my red one below. We won&#39;t even need a breadboard for this one.

![IMG_20180527_021727|690x388](upload://mwiI2KRp73Sytm3JJIW2Eff6OdK.jpg)

As you can see, there is one little prong longer than the other. This is what distinguishes the positive from the ground. The bottom one, which is the longer one, is called the **anode** and the shorter one we are going to ground is the **cathode**. Some LED&#39;s even have a flat spot on the casing which can help identify which one is which, one side won&#39;t always be longer in some cases.

Take this LED and put the longer end (positive) into pin 13 on your Arduino. Pin 13 is right next to the ground, your LED should be able to fit in both, like below:

![IMG_20180527_022525|690x388](upload://zB73vPjM3zNYnFpve7LkgkzSdB1.jpg)

Now, we are ready for some easy code. You can go ahead and copy and paste the following code into the IDE.

```
void setup()
{
  pinMode(13, OUTPUT);
}

void loop()
{
  digitalWrite(13,HIGH);
  delay(2000);
  digitalWrite(13, LOW);
  delay(2000);
}
```

There are two functions above, **[setup](https://www.arduino.cc/reference/en/language/structure/sketch/setup/)** and **[loop](https://www.arduino.cc/reference/en/language/structure/sketch/loop/)**. The setup function is used to declare variables and is run when the sketch starts. The loop function will, as you may have guessed it, loop over and over again. These functions will be used often and probably in every project we do.

In the setup function we are setting up pin 13 to be used an output, meaning voltage will be output to this pin. You can tell that *OUTPUT* is a constant, since it&#39;s in all capitals. In the loop function we are sending the *HIGH* signal to pin 13, waiting 2000ms (2 seconds), sending the *LOW* signal, then waiting another 2000ms. Once it reached the end it will loop again, over and over again. Once this is uploaded to the board, you should have a fancy blinking light, which isn&#39;t much of anything, but at least you got your &quot;hello world&quot; out of the way.

Once the code is in place, your Arduino is plugged into the USB and you have the correct com selected, upload the sketch to the board. There is a button on the top bar that has an arrow pointing to the right, this is the upload button. When you hover over the button, you should see it&#39;s meaning in the status bar. If the upload fails, you will see error messages at the bottom of the IDE, probably in the color red.

**Serial Monitor**
The Serial Monitor is a console area where you can write debug stuff too. This window is very helpful for debugging. You can access it by pressing **Ctrl+Shift+M**. The serial monitor is not active by default. We need to activate it by using the Serial.begin() method. In the setup function is where you need to activate it.

```
Serial.begin(9600);
```

When you want to log something to the console (serial monitor) you will use the **[println](https://www.arduino.cc/en/serial/println)** method. Here is an example of how to use it with the code we already have in place:

```
void setup()
{
  pinMode(13, OUTPUT);
  Serial.begin(9600);
}

void loop()
{
  digitalWrite(13,HIGH);
  Serial.println(&quot;LED is on&quot;);
  delay(2000);
  
  digitalWrite(13, LOW);
  Serial.println(&quot;LED is off&quot;);
  delay(2000);
}
```
![png|690x387](upload://3bLa8dt8BEMEjy2sUTTqN3xXFWY.jpg)

Remember, you don&#39;t need to save the sketch to upload it. You will need to upload it after you enter new code, the hotkey for that is **Ctrl+u**, or like earlier, press the upload button.

**Breadboards**
Breadboards are a place you can &quot;prototype&quot; your electronics before soldering them. We will do most of our work on breadboards so it is important to understand how they work. My breadboard has a sticky back on it (obviously to stick it in place somewhere). I chose not to stick it down since I am usually mobile.

**Your First Button**
Here is what you will need for this:

* 1 Button
* 1 Breadboard
* 10k Ohm Resister
* 5 Jumper wires

![IMG_20180527_032015|690x388](upload://vtPDiC6tGZ9vyS6MqA5U8cFZPgz.jpg)

You will notice that there is 2 lines, one red and one blue. The red line has a plus sign (positive) and the blue has a minus sign (for ground). When we power things on the breadboard will be putting the output voltage into the red line.

![IMG_20180527_032641|690x388](upload://oX5cUcraDHoLxKMGZWhqqkmK1Mw.jpg)

Above is the button I will be attaching to the breadboard. This can be a pain in the ass depending on how cheap your breadboard is. My breadboard is pretty cheap so it may take some wiggling to get it in the right place and secure. The button has 4 **legs** (pins) on the bottom.

![IMG_20180527_033020|690x388](upload://hogmAioPmkSXcMdDcdqsa0cCkd6.jpg)

Our button will have 1 leg fed 5 volts, this leg will have the resistor on it, which we will ground out. We will use another leg to get the button&#39;s state to to connect the circuit to our LED on pin 13. So, just like in our first LED project, go ahead and connect the LED back to pin 13 and the ground, directly onto the Arduino itself.

Now, let&#39;s add the resistor. I cut mine down so it looks nice and neat on the board, and keeps it tight and together. I am not using a 10k ohm, I am using a 220. You can tell by the colored bands on the resistor what it is. You should still use a 10k for best (non buggy) results.

![IMG_20180527_040645|690x388](upload://xlvjqfU9dwsdy9NRi64aJ2qDrmx.jpg)

Next, from the pin that says 5v (on the other side of the digital pins) on the analog side, run a jumper wire into the red (positive) side of our breadboard.

![IMG_20180527_041000|690x388](upload://gnohOlHKfdxA5cTkSC0lGwipUnc.jpg)

Next, connect a jump from GND (ground) to the blue line (negative/ground).

![IMG_20180527_041238|690x388](upload://nBqpdgYh70hU16wOaluXyW9MBV8.jpg)

Now, ground off the resistor

![IMG_20180527_041410|690x388](upload://l8bnQPNf1FJEfSE394poW1G9qo6.jpg)

Feed our last leg into the digital side of the Arduino in pin 7.

![IMG_20180527_041614|690x388](upload://n6NUt6ftskyl4EzYPYFALocKVi2.jpg)

Our button will have two states, not pressed and pressed. Everything should be in place now, go ahead and put the code below in the IDE and upload it to the board.

```
const int btnPin = 7;
const int led =  13;
int btnState = 0;

void setup() {
  pinMode(led, OUTPUT);
  pinMode(btnPin, INPUT);
}

void loop() {
  btnState = digitalRead(btnPin);

  if (btnState == HIGH) {
    digitalWrite(ledPin, HIGH);
  } else {
    digitalWrite(ledPin, LOW);
  }
}
```

Now you can have fun pressing a button to turn on your LED. How fun huh? Yea, not exciting but you gotta start somewhere. The code to me is self explanatory but for shits and giggles, let&#39;s run through it. In the setup function we are setting pin 13 as our output and pin 7 as our input, which is our button. In the main loop we have a conditional that is checking if our button is being pressed or not. If the button is pressed send the HIGH signal (send voltage to the LED), if it&#39;s not pressed, send the LOW signal, turning the LED off. Well, not so much turning it off but not giving it any voltage.

**What&#39;s Next**
Next in this Arduino series I will show you how to use a 7 segment LED, potentiometers, sound detection and temperature detection. I will also go into reading schematics, writing schematics and using [Fritzing](http://fritzing.org/home/).

Remember, you should always drink beer, run with scissors, throw change at rich people and keep coding.</description>
    
    <lastBuildDate>Fri, 01 Jun 2018 14:22:15 +0000</lastBuildDate>
    <category>Hardware</category>
    <atom:link href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/17">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/17</link>
        <pubDate>Tue, 26 Jun 2018 11:41:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-17</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[RedRose]]></dc:creator>
        <description><![CDATA[
            <p>man you know this job… thanks</p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/16">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/16</link>
        <pubDate>Fri, 01 Jun 2018 14:22:15 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-16</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="fxbg" data-post="14" data-topic="6848">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/fxbg/40/5000_2.png" class="avatar"> fxbg:</div>
<blockquote>
<p>I believe the ohm resistor I used helps with this as well,</p>
</blockquote>
</aside>
<p>I’d say that is a <a href="https://learn.sparkfun.com/tutorials/pull-up-resistors" rel="nofollow noopener">Pull-up/down resistor</a>.</p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/15</link>
        <pubDate>Wed, 30 May 2018 16:10:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-15</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[fxbg]]></dc:creator>
        <description><![CDATA[
            <p>Ah yes, debouncing (which I did not cover), I believe the ohm resistor I used helps with this as well, just for some added extra info for people reading this post.</p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/14</link>
        <pubDate>Wed, 30 May 2018 06:03:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-14</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/smartone">@SmartOne</a><br>
As far as I know a button is just a button. The button used in the post looks like a push-button or more specifically a momentary push button (because it comes back to the original position when you stop pushing it).</p>
<p>This kind of button are usually switches with a spring. When you push it, pins in both sides of the switch get connected by a small piece of metal. When you release it, the spring push back that piece of metal and the contact disappears.</p>
<p>There are switches with 3 and even more pins. Those, basically connects one of those pins to another, when the switch is actioned. However, there is no real <em>switch state</em> in the sense that you have to read the value from each of the switch pins to verify which one has been activated. Otherwise you have to use a multiplexor or some <em>smart wiring</em> (<a href="https://en.wikipedia.org/wiki/Charlieplexing#Input_data_multiplexing" rel="nofollow noopener">Charlieplexing</a> for instance).</p>
<p>So what all this means is that, using <code>analogRead</code> will just read the voltage that is the other side of button whatever it is. The voltage will not change because the button is pressed. (<em>Well, it actually will change during the transient state but that is not relevant here)</em>.</p>
<p>So for that multi-state button, the closest thing I can think about is a smartphone headset with volume control. In this case you have to read an analogue value (<code>analogRead</code> for Arduino). You connect each button to a ADC (the mic input typically in your phone) through a simple voltage divider. Using different resistor values for each button will produce different voltage in the  DAC and effectively lead to code like the one you proposed. You have to chose those resistors so there is some voltage margin between the readings for each button.</p>
<p>Alternatives are using potentiometers or encoders… Even when you could use both as <em>kindof</em> buttons, they are not buttons/switches strictly speaking.</p>
<p><a class="mention" href="https://0x00sec.org/u/fxbg">@fxbg</a>  nice post. It is very easy to read and gives a very nice overview to let people dive in this world. You really go into the relevant parts for getting started.</p>
<p>My 2 cents: Specifically for push buttons, it is a good idea to use some <a href="https://www.arduino.cc/en/Tutorial/Debounce" rel="nofollow noopener">Debouncing code</a>. In your example it won’t make much of a difference but in the general case is something to keep in mind.</p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/13</link>
        <pubDate>Tue, 29 May 2018 22:07:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-13</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[dtwozero]]></dc:creator>
        <description><![CDATA[
            <p>LOL i’m not having a problem with the content. i was looking for the button to keep me posted on the thread itself.</p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/12</link>
        <pubDate>Tue, 29 May 2018 19:13:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-12</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>The <code>&gt; 400</code> was only a guess, you’ll have to read the documentation depending on which button you use <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/11</link>
        <pubDate>Tue, 29 May 2018 06:10:42 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-11</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[fxbg]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/dtwozero">@dtwozero</a>, What are you having a problem with?</p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/10</link>
        <pubDate>Tue, 29 May 2018 04:20:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-10</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[dtwozero]]></dc:creator>
        <description><![CDATA[
            <p>i’m diggin this thread. trying to figure out how to follow it.</p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/9</link>
        <pubDate>Tue, 29 May 2018 03:31:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-9</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[fxbg]]></dc:creator>
        <description><![CDATA[
            <p>The button used in the tutorial only has 2 states, some buttons (switches I guess) have multiple states, but I’ve never used one on the Arduino, I’ll have to get one and check it out.</p>
<p>Also, will this work with the button? (I’m not in the office right now or I’d give it a go)</p>
<pre><code class="lang-auto">analogRead(0) &gt; 400
</code></pre>
<p>I am glad this topic is getting attention here, I might have to move into more advanced territory sooner than I thought <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/8</link>
        <pubDate>Mon, 28 May 2018 20:52:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-8</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>Just curious, but what do you mean by buttons with a neutral state(3 states)?<br>
If you retrieve the state with <code>analogRead()</code> there, it still should work as in Arduino C <code>HIGH</code> corresponds to a boolean true.<br>
E.g. <code>bool btnState = analogRead(0) &gt; 400 &amp;&amp; analogRead(0) &lt; 800;</code></p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/7</link>
        <pubDate>Mon, 28 May 2018 20:22:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-7</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[fxbg]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/smartone">@SmartOne</a>, you’re right, for two state buttons like in this tutorial that would be fine, I’m not sure if it would be okay for buttons with a neutral state.</p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/6</link>
        <pubDate>Mon, 28 May 2018 19:49:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-6</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>Hi <a class="mention" href="https://0x00sec.org/u/fxbg">@fxbg</a>,<br>
Nice series which surely helps beginners a lot!<br>
Just wanted to point out that this passage:</p>
<pre><code class="lang-auto">if (btnState == HIGH) {
    digitalWrite(ledPin, HIGH);
  } else {
    digitalWrite(ledPin, LOW);
  }
</code></pre>
<p>Can be shortened to:</p>
<pre><code class="lang-auto">digitalWrite(ledPin, btnState);
</code></pre>
<p><strong>elitism off</strong> <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue_winking_eye.png?v=9" title=":stuck_out_tongue_winking_eye:" class="emoji" alt=":stuck_out_tongue_winking_eye:"></p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/5</link>
        <pubDate>Mon, 28 May 2018 16:50:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-5</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[alco]]></dc:creator>
        <description><![CDATA[
            <p>Hey man, very nice article. I’ve been using arduinos and atmega328 based hardware for a few years, and just wanted to comment that it’s so much more than hobby stuff… i designed an industrial water pump control system around it, and it’s been up and running for 3+ years without any serious mishaps.<br>
right now working on interfacing the atmega to an esp01 wifi board, dirt cheap and very effective</p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/4</link>
        <pubDate>Mon, 28 May 2018 16:42:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-4</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[anon79434934]]></dc:creator>
        <description><![CDATA[
            <p>Comprehensive article with an emphasis on those who don’t know hardware all too well.</p>
<p>Am I glad that you started this series so I won’t have to!</p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/3</link>
        <pubDate>Sun, 27 May 2018 15:25:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-3</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[Techno_Forg]]></dc:creator>
        <description><![CDATA[
            <p>FINALLY!!! Something that I understand instead of these weirdos posting RE stuff (RE sucks (jk))…</p>
<p>I’m excited to do more projects with my Arduino Uno. Good job! I will do a more thorougher reading later since I’m busy atm, but I see from a fast scrolling how well in detail this is. Oh btw, <a class="mention" href="https://0x00sec.org/u/anon79434934">@anon79434934</a> is our hardware dude. If you want to, maybe collaborate with him? With that all being said…</p>
<p>Anyways, ~Cheers!</p>
<p>–Techno Forg–</p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/2</link>
        <pubDate>Sun, 27 May 2018 14:10:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-2</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
      <item>
        <title>Introduction to the Arduino Series</title>
        <dc:creator><![CDATA[fxbg]]></dc:creator>
        <description><![CDATA[
            <p><strong>My Introduction</strong><br>
First, I would like to thank 0x00sec for providing such a great community. I would also like to thank <a href="http://www.arrogantbrewing.com" rel="noopener nofollow ugc">Arrogant Bastard</a>, <a href="https://sierranevada.com/beer" rel="noopener nofollow ugc">Sierra Nevada</a> and <a href="http://deathwishcoffee.com" rel="noopener nofollow ugc">Deathwish Coffee</a> for providing the sustenance necessary for starting and completing the following series. Not only should you get drunk while completing these projects but you should consume the correct amount of coffee as well. It’s part of a well balanced diet (which includes ramen of course). You may also need bic lighters and your choice of tobacco, pre rolled cigarettes (like Marlboro) and my favorite, Zig Zag rolling papers.</p>
<p>I hold a degree in Information Systems (CIS), and am not an electrician or mechanical engineer. I have been creating software since 1998, so about 20 years. I run my own SEO and web development business and am creating this series to help this community grow and to help you, the reader, grow. I was creating software before the internet was blessed with PHP and when Oracle was still 8i. I am an old drunken tattooed programmer, so excuse the language if you’re a christian, excuse the drinking if you’re a teetotaler, and most importantly remember that I am always open to criticism, hate and suggestions.</p>
<p><strong>Arduino Series Introduction</strong><br>
The Arduino has made it possible for hundreds of thousands of people to create gadgets they normally otherwise wouldn’t have been able to build. The Arduino is a micro controller that allows you to assemble and create just about anything you can dream up. Arduinos can be bought for dirt cheap online (<a href="https://www.ebay.com/sch/i.html?_from=R40&amp;_trksid=p2380057.m570.l1311.R4.TR12.TRC2.A0.H0.Xarduino+un.TRS0&amp;_nkw=arduino+uno+r3&amp;_sacat=0" rel="noopener nofollow ugc">ebay</a>, <a href="https://www.amazon.com/s/ref=nb_sb_ss_i_3_10?tag=0x00sec03-20" rel="noopener nofollow ugc">amazon</a>) and there are even resources to <a href="http://www.instructables.com/id/Build-Your-Own-Arduino/" rel="noopener nofollow ugc">create your own Arduino</a> using schematics provided by the Arduino team.</p>
<p>I will be using Ubuntu (Xenial) as the operating system of my choice. I will not be covering anything under the Windows operating system. I will also not be using any of the online Arduino compilers/Uploaders such as the one at <a href="https://create.arduino.cc" rel="noopener nofollow ugc">arduino.cc</a>. I will also use the words method and function interchangeably, as they mean the same thing. Some language (such as C#) call them methods and some languages prefer to call them functions (like PHP).</p>
<p>This series will walk you through creating projects with the Arduino. The projects will be more advanced the further we dive into the Arduino. This series will require you to have certain sensors and and hardware required to complete the projects. I will provide links to websites to purchase the sensors and hardware, and of course, I will keep price in mind. Most sensors and “shields” for the Arduino are inexpensive. Some of the sensors and components we will be integrating will be:</p>
<ul>
<li><a href="https://www.gearbest.com/goods/pp_009979800776.html" rel="noopener nofollow ugc">LCD screens</a></li>
<li>Heat and Temperature</li>
<li>Light</li>
<li>Flame</li>
<li>Buttons</li>
<li><a href="https://www.gearbest.com/goods/pp_009268601400.html" rel="noopener nofollow ugc">WiFi</a></li>
<li><a href="https://www.gearbest.com/goods/pp_009101055960.html" rel="noopener nofollow ugc">Sound detectors</a></li>
<li><a href="https://www.gearbest.com/goods/pp_009542167908.html" rel="noopener nofollow ugc">Lasers</a></li>
<li><a href="https://www.gearbest.com/goods/pp_009369146062.html" rel="noopener nofollow ugc">Cameras</a></li>
<li>Dot Matrixes</li>
<li>etc etc</li>
</ul>
<p><strong>Pre-requisites</strong></p>
<ul>
<li>It is assumed that you have a basic understanding of the C programming language. If you don’t know anything about programming, you may not make it very far in this series.</li>
<li>You will need a laptop/desktop computer capable of running the Arduino IDE.</li>
<li>I will be using an Arduino Uno R3. You can use another type of Arduino provided you understand the pinouts and voltages required for the upcoming projects/articles.</li>
<li>A breadboard</li>
<li>Jumper wires</li>
<li>An Arduino board</li>
</ul>
<p><strong>Getting Started</strong><br>
First, let’s install the IDE and get it up and connected to the board.</p>
<blockquote>
<p>sudo apt-get -y install arduino</p>
</blockquote>
<p>Once it is installed, open the IDE and connect the Arduino via the USB cable. You will need to make sure the correct board is chosen from the <strong>Tools</strong> menu.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/9/9230ea01564e93ce7baba2c099ca59a47cec4088.jpg" alt="png" data-base62-sha1="kRgvx9xOc4lK0r4xKQPBJbj6Iac" width="690" height="387"></p>
<p>The Arduino’s code that we will upload is called a sketch. You can find many many free sketches online for all sorts of things. The code is a set of C and C++, so knowing C will help you greatly and YES you must know the basics of C. You could learn along the way but I strongly suggest learning it before continuing this series. So let’s take a look at the Arduino.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/0/07f0c2673854d4a71fdd35d95336cc4d98b25e06.jpg" alt="IMG_20180527_012959" data-base62-sha1="18falzp1M7RI5HPo5iVYCWQeqmW" width="690" height="388"><br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/6/6f9ea8f61110736c9cbccb8581eea3269a4adb7b.jpg" alt="IMG_20180527_012959-2" data-base62-sha1="fVqVshrYtIFiOXzKq2T0KZYfPHt" width="690" height="388"></p>
<ol>
<li>Reset button</li>
<li>Digital pins</li>
<li>USB connector</li>
<li>AT Mega 328P (<a href="http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-42735-8-bit-AVR-Microcontroller-ATmega328-328P_Datasheet.pdf" rel="noopener nofollow ugc">data sheet</a>)</li>
<li>DC power connector</li>
</ol>
<p>The reset button will reset the board, replaying the sketch from the beginning. The digital pins you need to know about right now, (from left to right as pictured) are GND for ground and 13 to 0. We might cover the AREF pin later on (this pin is for Analog reference). The pins on the other side is for Analog, which we will use later as well.</p>
<p><strong>Voltage and Dangers</strong><br>
The Arduino outputs 5 volts. This is indeed what is referred to as “low voltage”. Nothing we do here will involve “mains” voltage, which could kill you. We will be using sensors that could possibly burnt he shit out of you and cause you to go blind momentarily, but I assure you, you will be okay. For example, if your pumping 5 volts into a sensor that requires 1 volt or half a volt and you touch it, you will probably be burned. Be careful and use your head brain.</p>
<p><strong>Your First LED Blink</strong><br>
Our first project will be something very simple, to get you familiar with the coding and uploading process. We will use a very simple LED project, which is normally the first thing you do in any other “hello world” type Arduino project. So you will need an <a href="https://en.wikipedia.org/wiki/Light-emitting_diode" rel="noopener nofollow ugc">LED</a> for this one, like my red one below. We won’t even need a breadboard for this one.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/9/9dd695ea11fce4e062f75bffb80cc08906503dfc.jpg" alt="IMG_20180527_021727" data-base62-sha1="mwiI2KRp73Sytm3JJIW2Eff6OdK" width="690" height="388"></p>
<p>As you can see, there is one little prong longer than the other. This is what distinguishes the positive from the ground. The bottom one, which is the longer one, is called the <strong>anode</strong> and the shorter one we are going to ground is the <strong>cathode</strong>. Some LED’s even have a flat spot on the casing which can help identify which one is which, one side won’t always be longer in some cases.</p>
<p>Take this LED and put the longer end (positive) into pin 13 on your Arduino. Pin 13 is right next to the ground, your LED should be able to fit in both, like below:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/f/f97e196c5cfe8f8b68aa3f55d163f0d8c71a2f2b.jpg" alt="IMG_20180527_022525" data-base62-sha1="zB73vPjM3zNYnFpve7LkgkzSdB1" width="690" height="388"></p>
<p>Now, we are ready for some easy code. You can go ahead and copy and paste the following code into the IDE.</p>
<pre><code class="lang-auto">void setup()
{
  pinMode(13, OUTPUT);
}

void loop()
{
  digitalWrite(13,HIGH);
  delay(2000);
  digitalWrite(13, LOW);
  delay(2000);
}
</code></pre>
<p>There are two functions above, <strong><a href="https://www.arduino.cc/reference/en/language/structure/sketch/setup/" rel="noopener nofollow ugc">setup</a></strong> and <strong><a href="https://www.arduino.cc/reference/en/language/structure/sketch/loop/" rel="noopener nofollow ugc">loop</a></strong>. The setup function is used to declare variables and is run when the sketch starts. The loop function will, as you may have guessed it, loop over and over again. These functions will be used often and probably in every project we do.</p>
<p>In the setup function we are setting up pin 13 to be used an output, meaning voltage will be output to this pin. You can tell that <em>OUTPUT</em> is a constant, since it’s in all capitals. In the loop function we are sending the <em>HIGH</em> signal to pin 13, waiting 2000ms (2 seconds), sending the <em>LOW</em> signal, then waiting another 2000ms. Once it reached the end it will loop again, over and over again. Once this is uploaded to the board, you should have a fancy blinking light, which isn’t much of anything, but at least you got your “hello world” out of the way.</p>
<p>Once the code is in place, your Arduino is plugged into the USB and you have the correct com selected, upload the sketch to the board. There is a button on the top bar that has an arrow pointing to the right, this is the upload button. When you hover over the button, you should see it’s meaning in the status bar. If the upload fails, you will see error messages at the bottom of the IDE, probably in the color red.</p>
<p><strong>Serial Monitor</strong><br>
The Serial Monitor is a console area where you can write debug stuff too. This window is very helpful for debugging. You can access it by pressing <strong>Ctrl+Shift+M</strong>. The serial monitor is not active by default. We need to activate it by using the Serial.begin() method. In the setup function is where you need to activate it.</p>
<pre><code class="lang-auto">Serial.begin(9600);
</code></pre>
<p>When you want to log something to the console (serial monitor) you will use the <strong><a href="https://www.arduino.cc/en/serial/println" rel="noopener nofollow ugc">println</a></strong> method. Here is an example of how to use it with the code we already have in place:</p>
<pre><code class="lang-auto">void setup()
{
  pinMode(13, OUTPUT);
  Serial.begin(9600);
}

void loop()
{
  digitalWrite(13,HIGH);
  Serial.println("LED is on");
  delay(2000);
  
  digitalWrite(13, LOW);
  Serial.println("LED is off");
  delay(2000);
}
</code></pre>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/1/165adb4147598f382a7c61e36bb6619bf0211304.jpg" alt="png" data-base62-sha1="3bLa8dt8BEMEjy2sUTTqN3xXFWY" width="690" height="387"></p>
<p>Remember, you don’t need to save the sketch to upload it. You will need to upload it after you enter new code, the hotkey for that is <strong>Ctrl+u</strong>, or like earlier, press the upload button.</p>
<p><strong>Breadboards</strong><br>
Breadboards are a place you can “prototype” your electronics before soldering them. We will do most of our work on breadboards so it is important to understand how they work. My breadboard has a sticky back on it (obviously to stick it in place somewhere). I chose not to stick it down since I am usually mobile.</p>
<p><strong>Your First Button</strong><br>
Here is what you will need for this:</p>
<ul>
<li>1 Button</li>
<li>1 Breadboard</li>
<li>10k Ohm Resister</li>
<li>5 Jumper wires</li>
</ul>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/d/dca2b41077912c3149e3dfe1f643b3fb81032af7.jpg" alt="IMG_20180527_032015" data-base62-sha1="vtPDiC6tGZ9vyS6MqA5U8cFZPgz" width="690" height="388"></p>
<p>You will notice that there is 2 lines, one red and one blue. The red line has a plus sign (positive) and the blue has a minus sign (for ground). When we power things on the breadboard will be putting the output voltage into the red line.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/a/aee1f71a7a8d64757f0ebf02fc85858a005f7cb4.jpg" alt="IMG_20180527_032641" data-base62-sha1="oX5cUcraDHoLxKMGZWhqqkmK1Mw" width="690" height="388"></p>
<p>Above is the button I will be attaching to the breadboard. This can be a pain in the ass depending on how cheap your breadboard is. My breadboard is pretty cheap so it may take some wiggling to get it in the right place and secure. The button has 4 <strong>legs</strong> (pins) on the bottom.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/79e31d4949559e5a40c9ff1a7707200e79fedd8c.jpg" alt="IMG_20180527_033020" data-base62-sha1="hogmAioPmkSXcMdDcdqsa0cCkd6" width="690" height="388"></p>
<p>Our button will have 1 leg fed 5 volts, this leg will have the resistor on it, which we will ground out. We will use another leg to get the button’s state to to connect the circuit to our LED on pin 13. So, just like in our first LED project, go ahead and connect the LED back to pin 13 and the ground, directly onto the Arduino itself.</p>
<p>Now, let’s add the resistor. I cut mine down so it looks nice and neat on the board, and keeps it tight and together. I am not using a 10k ohm, I am using a 220. You can tell by the colored bands on the resistor what it is. You should still use a 10k for best (non buggy) results.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/e/e9b60f78317418d328e59addc5f6f5575153c649.jpg" alt="IMG_20180527_040645" data-base62-sha1="xlvjqfU9dwsdy9NRi64aJ2qDrmx" width="690" height="388"></p>
<p>Next, from the pin that says 5v (on the other side of the digital pins) on the analog side, run a jumper wire into the red (positive) side of our breadboard.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/72c7b33ef1e567e1b37d306b9d4deca7219011d6.jpg" alt="IMG_20180527_041000" data-base62-sha1="gnohOlHKfdxA5cTkSC0lGwipUnc" width="690" height="388"></p>
<p>Next, connect a jump from GND (ground) to the blue line (negative/ground).</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/a/a56d0b117d1398728ca962aea13f37d7f89a283a.jpg" alt="IMG_20180527_041238" data-base62-sha1="nBqpdgYh70hU16wOaluXyW9MBV8" width="690" height="388"></p>
<p>Now, ground off the resistor</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/9/941a7933713d8a2bb60115ffbc259ba62d1f4cf6.jpg" alt="IMG_20180527_041410" data-base62-sha1="l8bnQPNf1FJEfSE394poW1G9qo6" width="690" height="388"></p>
<p>Feed our last leg into the digital side of the Arduino in pin 7.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/a/a1f6ed3d684688778c491afd251a72a151a55952.jpg" alt="IMG_20180527_041614" data-base62-sha1="n6NUt6ftskyl4EzYPYFALocKVi2" width="690" height="388"></p>
<p>Our button will have two states, not pressed and pressed. Everything should be in place now, go ahead and put the code below in the IDE and upload it to the board.</p>
<pre><code class="lang-auto">const int btnPin = 7;
const int led =  13;
int btnState = 0;

void setup() {
  pinMode(led, OUTPUT);
  pinMode(btnPin, INPUT);
}

void loop() {
  btnState = digitalRead(btnPin);

  if (btnState == HIGH) {
    digitalWrite(ledPin, HIGH);
  } else {
    digitalWrite(ledPin, LOW);
  }
}
</code></pre>
<p>Now you can have fun pressing a button to turn on your LED. How fun huh? Yea, not exciting but you gotta start somewhere. The code to me is self explanatory but for shits and giggles, let’s run through it. In the setup function we are setting pin 13 as our output and pin 7 as our input, which is our button. In the main loop we have a conditional that is checking if our button is being pressed or not. If the button is pressed send the HIGH signal (send voltage to the LED), if it’s not pressed, send the LOW signal, turning the LED off. Well, not so much turning it off but not giving it any voltage.</p>
<p><strong>What’s Next</strong><br>
Next in this Arduino series I will show you how to use a 7 segment LED, potentiometers, sound detection and temperature detection. I will also go into reading schematics, writing schematics and using <a href="http://fritzing.org/home/" rel="noopener nofollow ugc">Fritzing</a>.</p>
<p>Remember, you should always drink beer, run with scissors, throw change at rich people and keep coding.</p>
          <p><a href="https://0x00sec.org/t/introduction-to-the-arduino-series/6848/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/introduction-to-the-arduino-series/6848/1</link>
        <pubDate>Sun, 27 May 2018 11:41:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6848-1</guid>
        <source url="https://0x00sec.org/t/introduction-to-the-arduino-series/6848.rss">Introduction to the Arduino Series</source>
      </item>
  </channel>
</rss>
