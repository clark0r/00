<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Realmode Assembly - Writing bootable stuff - Part 7</title>
    <link>https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-7/8798</link>
    <description># Realmode Assembly - Writing bootable stuff
## Part 7: Let&#39;s write a small game (2/2)

----------

## What is this?

This is going to be a walk-through in writing an Operation System in assembly which operates purely in Realmode.
Goal will be writing different kernels from a simple &quot;Hello World&quot; over small terminal programs to
graphically displayed games.

This will probably be the last part of the series as well.

## Requirements

* Being able to read x86 Intel Assembly
* Being tolerant enough to accept my assembly code even though it might not be perfect
* Reading the previous articles

## Notes

* This information is the result of my research and own programming, everything said here might be wrong, correct me if you spot mistakes though!
* I will try to list my sources at the bottom but I can&#39;t guarantee that these are all of them.
* I&#39;M NOT RESPONSIBLE IF YOU BREAK SOMETHING USING INFORMATION I PROVIDED HERE.

## Content of this Article

This article will be about utilizing hardware interrupts (and how to handle interrupts in general) and how to use them to make the controls of the small test game asynchronous.
Again the rest of the article consists of skipping over the development of the last example to a somewhat finished state of being a small &quot;game&quot;.
If you are actually interested in the implementation of the game you can take a look into the git project! :D

I&#39;ve also again included a few pictures of bugs in development because they are always fun to look at (and debug :P)

----------

## Interrupts you say?

Interrupts are signals raised from the CPU or from external Hardware (Keyboard, Mouse) that tell the CPU to save the current execution context, stop doing what it was doing and give execution to the handler for the specific event.
Exceptions are as one example handled in that way in Realmode, but also keydown/keyup events from a keyboard get send to the CPU in this way to notify it of changes.
In Realmode the interrupt handler addresses are stored in the Interrupt Vector Table (contrary to the Interrupt Descriptor Table used in protected mode) which is usually positioned at 0000:000 for comp ability reasons.
Each entry in the Interrupt Vector Table (IVT) is 4 byte in size where the first two byte are representing the segment of the handler and the last two byte the offset from there to the handler, because of this very simple format we can find the position of the handler address by multiplying the interrupt number with 4 where we can then overwrite the segment:offset structure there to point to custom handler. 

## Writing a custom key event handler

Based on the simple structure of the IVT (and a handy IVT mapping from osdev) we can overwrite the keyboard interrupt handler pretty easily

    IVT Offset | INT # | IRQ # | Description
    -----------+-------+-------+------------------------------
    0x0020     | 0x08  | 0     | PIT
    0x0024     | 0x09  | 1     | Keyboard                       &lt;-- We will overwrite this
    0x0028     | 0x0A  | 2     | 8259A slave controller
    0x002C     | 0x0B  | 3     | COM2 / COM4
    0x0030     | 0x0C  | 4     | COM1 / COM3
    0x0034     | 0x0D  | 5     | LPT2
    0x0038     | 0x0E  | 6     | Floppy controller
    0x003C     | 0x0F  | 7     | LPT1


```asm
registerInterruptHandlers:
	mov [0x0024], dword keyboardINTListener ;implements keyboardListener
	ret
```
So now we will get all interrupts triggered by the keyboard (or through a software interrupt 9) in our keyboardINTListener function.
Now let&#39;s look into implementing the actual handler function:

First of all we have to remember that this event is asynchronous to the other tasks the CPU does, so when entering our function we could (and will) have arbitrary values (from the functions that were executed previously) in not only our normal working registers but also in the segment registers which is why we can&#39;t assume any predictable values in them.
Also it&#39;s important to know that after the interrupt handler is ended with a IRET instruction the execution will continue at the previous position with the current register values which means we also have to watch out to reset everything to the state it was before calling our handler to prevent crashes and unexpected behaviour.

Now looking at the keyboard handler itself we have to make sure that we tell the Programmable Interrupt Controller (PIC) that passed the signal through from the keyboard that it arrived correctly at the end of our code to assure that it keeps sending us future interrupts.
```asm
    mov al, 20h ;20h
    out 20h, al ;acknowledge the interrupt so further interrupts can be handled again 
```
As you can see in this code snippet we do this by sending a 0x20 through the IO port 0x20. Depending on the interrupt it might be needed to send this signal to a slave PIC as well.

Reading the current key status itself is rather simple as we directly pull it from the IO port 0x60 which is the PS/2 Keyboard and Mouse Port (Don&#39;t worry because of the way Keyboards are handled on modern systems a USB Keyboard will be treated as a PS/2 here).
Note here that the key mappings are not in ASCII or similar format but have their own (Link for file containing the mapping in the References section).

Now the last part we can&#39;t forget about is that because of the asynchronous nature of interrupts we can&#39;t move the player in the handler if we somehow want it synchronous to game and render ticks which means we have to save the state from the handler in memory which then can be read synchronously.

```asm
pressA db 0
pressD db 0
pressW db 0
pressS db 0
keyboardINTListener: ;interrupt handler for keyboard events
	pusha	
		xor bx,bx ; bx = 0: signify key down event
		inc bx
		in al,0x60 ;get input to AX, 0x60 = ps/2 first port for keyboard
		btr ax, 7 ;al now contains the key code without key pressed flag, also carry flag set if key up event
		jnc .keyDown
			dec bx ; bx = 1: key up event
		.keyDown:
		cmp al,0x1e ;a
		jne .check1         
			mov byte [cs:pressA], bl ;use cs overwrite because we don&#39;t know where the data segment might point to
		.check1:
		cmp al,0x20 ;d
		jne .check2
			mov byte [cs:pressD], bl
		.check2:
		cmp al,0x11 ;w
		jne .check3
			mov byte [cs:pressW], bl
		.check3:
		cmp al,0x1f ;s
		jne .check4
			mov byte [cs:pressS], bl
		.check4:
		mov al, 20h ;20h
		out 20h, al ;acknowledge the interrupt so further interrupts can be handled again 
	popa ;resume state to not modify something by accident
	iret ;return from an interrupt routine
```

After implementing this (and a few more things) a new problem appeared which already existed when booting the kernel on a real system instead of an emulator:

https://github.com/Pusty/realmode-assembly/raw/master/part7/doc/part7_img1.gif


Because we don&#39;t have any limitations on the game speed it runs as fast as the processor can, which makes movement quite troublesome.

## Sleeping for a fixed amount of time

To actually maneuver in this now even in the emulator fast environment we need to slow it down.
Because the game speed should be similar on different devices (and emulators) it makes sense to use a BIOS provided interrupt for that.

```plain
|----int----|--ah--|----cx-----|----dx----|------CF------|---------Description---------|
|  int 0x15 | 0x68 | High Word | Low Word | Set if Error | Wait for CX:DX Microseconds |
|-----------|------|-----------|----------|--------------|-----------------------------|
```

```asm
synchronize:
	pusha
		mov si, 20 ; si = time in ms
		mov dx, si
		mov cx, si
		shr cx, 6
		shl dx, 10
		mov ah, 86h
		int 15h ;cx,dx sleep time in microseconds - cx = high word, dx = low word
	popa
	ret
```

Now after having this sleep time in the code it works at acceptable speed both in the emulator and on a real system

https://github.com/Pusty/realmode-assembly/raw/master/part7/doc/part7_img2.gif



## Final Conclusion

So now after after 7 parts we went over the theory of how the booting process works,to basic text output,input and processing and ended with a small bootable &quot;game&quot; runnable on most x86 systems. Content wise there isn&#39;t much to it, just running around and collecting coins but then again that&#39;s just a small example of what you can do with not too much effort.
I know that the last parts were getting released pretty delayed from each other but I still hope that this series was somewhat interesting and motivating to look into the lower level inner workings of operation systems and programs in general.
If you any mistakes please point them out to me so I can correct them, also again feedback to the series is appreciated :)

Thank you for taking your time to read through or parts of my series!

## Some Development Screenshots

Also as I promised let&#39;s end it with some (buggy) development screenshots:

https://github.com/Pusty/realmode-assembly/raw/master/part7/doc/part7_img3.PNG


When writing the code scaling images up this happened

https://github.com/Pusty/realmode-assembly/raw/master/part7/doc/part7_img4.PNG


I messed up the address of the play sprite resulting in this

https://github.com/Pusty/realmode-assembly/raw/master/part7/doc/part7_img5.PNG


Here I loaded up the wrong address for the base of the map, resulting in rendering the code positioned there

https://github.com/Pusty/realmode-assembly/raw/master/part7/doc/part7_img6.PNG


When I optimized the world rendering I at some point choose a too small radius resulting in this

### [Previous Part](https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-6/)

----------

## Link to source files:
* https://github.com/Pusty/realmode-assembly/tree/master/part7


## Sources and References
* https://wiki.osdev.org/Interrupt_Vector_Table
* https://wiki.osdev.org/IDT
* https://en.wikipedia.org/wiki/Interrupt_descriptor_table
* http://inglorion.net/documents/tutorials/x86ostut/keyboard/us_keymap.inc
* http://stanislavs.org/helppc/int_15-86.html</description>
    
    <lastBuildDate>Sun, 12 Jul 2020 13:05:57 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-7/8798.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Realmode Assembly - Writing bootable stuff - Part 7</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-7/8798/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-7/8798/6</link>
        <pubDate>Sun, 12 Jul 2020 13:24:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-8798-6</guid>
        <source url="https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-7/8798.rss">Realmode Assembly - Writing bootable stuff - Part 7</source>
      </item>
      <item>
        <title>Realmode Assembly - Writing bootable stuff - Part 7</title>
        <dc:creator><![CDATA[Rot127]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-VIP quote-modified" data-username="Leeky" data-post="1" data-topic="8798">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/leeky/40/2309_2.png" class="avatar"> Leeky:</div>
<blockquote>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/0/04f4a43330f53cd988cd146d69145ee1bd2f51a8.PNG" alt="" width="637" height="395"></p>
</blockquote>
</aside>
<p>Tell Pikachu to use Flash. Bug fixed <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"><br>
But seriously, create series! Thanks for writing it.</p>
          <p><a href="https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-7/8798/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-7/8798/3</link>
        <pubDate>Tue, 02 Oct 2018 12:40:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-8798-3</guid>
        <source url="https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-7/8798.rss">Realmode Assembly - Writing bootable stuff - Part 7</source>
      </item>
      <item>
        <title>Realmode Assembly - Writing bootable stuff - Part 7</title>
        <dc:creator><![CDATA[quantum_bracket]]></dc:creator>
        <description><![CDATA[
            <p>I enjoyed this series very much, I hope you do a protected mode series:smiley:</p>
          <p><a href="https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-7/8798/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-7/8798/2</link>
        <pubDate>Tue, 02 Oct 2018 00:46:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-8798-2</guid>
        <source url="https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-7/8798.rss">Realmode Assembly - Writing bootable stuff - Part 7</source>
      </item>
      <item>
        <title>Realmode Assembly - Writing bootable stuff - Part 7</title>
        <dc:creator><![CDATA[Leeky]]></dc:creator>
        <description><![CDATA[
            <h1>Realmode Assembly - Writing bootable stuff</h1>
<h2>Part 7: Let’s write a small game (2/2)</h2>
<hr>
<h2>What is this?</h2>
<p>This is going to be a walk-through in writing an Operation System in assembly which operates purely in Realmode.<br>
Goal will be writing different kernels from a simple “Hello World” over small terminal programs to<br>
graphically displayed games.</p>
<p>This will probably be the last part of the series as well.</p>
<h2>Requirements</h2>
<ul>
<li>Being able to read x86 Intel Assembly</li>
<li>Being tolerant enough to accept my assembly code even though it might not be perfect</li>
<li>Reading the previous articles</li>
</ul>
<h2>Notes</h2>
<ul>
<li>This information is the result of my research and own programming, everything said here might be wrong, correct me if you spot mistakes though!</li>
<li>I will try to list my sources at the bottom but I can’t guarantee that these are all of them.</li>
<li>I’M NOT RESPONSIBLE IF YOU BREAK SOMETHING USING INFORMATION I PROVIDED HERE.</li>
</ul>
<h2>Content of this Article</h2>
<p>This article will be about utilizing hardware interrupts (and how to handle interrupts in general) and how to use them to make the controls of the small test game asynchronous.<br>
Again the rest of the article consists of skipping over the development of the last example to a somewhat finished state of being a small “game”.<br>
If you are actually interested in the implementation of the game you can take a look into the git project! <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p>I’ve also again included a few pictures of bugs in development because they are always fun to look at (and debug :P)</p>
<hr>
<h2>Interrupts you say?</h2>
<p>Interrupts are signals raised from the CPU or from external Hardware (Keyboard, Mouse) that tell the CPU to save the current execution context, stop doing what it was doing and give execution to the handler for the specific event.<br>
Exceptions are as one example handled in that way in Realmode, but also keydown/keyup events from a keyboard get send to the CPU in this way to notify it of changes.<br>
In Realmode the interrupt handler addresses are stored in the Interrupt Vector Table (contrary to the Interrupt Descriptor Table used in protected mode) which is usually positioned at 0000:000 for comp ability reasons.<br>
Each entry in the Interrupt Vector Table (IVT) is 4 byte in size where the first two byte are representing the segment of the handler and the last two byte the offset from there to the handler, because of this very simple format we can find the position of the handler address by multiplying the interrupt number with 4 where we can then overwrite the segment:offset structure there to point to custom handler.</p>
<h2>Writing a custom key event handler</h2>
<p>Based on the simple structure of the IVT (and a handy IVT mapping from osdev) we can overwrite the keyboard interrupt handler pretty easily</p>
<pre><code>IVT Offset | INT # | IRQ # | Description
-----------+-------+-------+------------------------------
0x0020     | 0x08  | 0     | PIT
0x0024     | 0x09  | 1     | Keyboard                       &lt;-- We will overwrite this
0x0028     | 0x0A  | 2     | 8259A slave controller
0x002C     | 0x0B  | 3     | COM2 / COM4
0x0030     | 0x0C  | 4     | COM1 / COM3
0x0034     | 0x0D  | 5     | LPT2
0x0038     | 0x0E  | 6     | Floppy controller
0x003C     | 0x0F  | 7     | LPT1
</code></pre>
<pre><code class="lang-auto">registerInterruptHandlers:
	mov [0x0024], dword keyboardINTListener ;implements keyboardListener
	ret
</code></pre>
<p>So now we will get all interrupts triggered by the keyboard (or through a software interrupt 9) in our keyboardINTListener function.<br>
Now let’s look into implementing the actual handler function:</p>
<p>First of all we have to remember that this event is asynchronous to the other tasks the CPU does, so when entering our function we could (and will) have arbitrary values (from the functions that were executed previously) in not only our normal working registers but also in the segment registers which is why we can’t assume any predictable values in them.<br>
Also it’s important to know that after the interrupt handler is ended with a IRET instruction the execution will continue at the previous position with the current register values which means we also have to watch out to reset everything to the state it was before calling our handler to prevent crashes and unexpected behaviour.</p>
<p>Now looking at the keyboard handler itself we have to make sure that we tell the Programmable Interrupt Controller (PIC) that passed the signal through from the keyboard that it arrived correctly at the end of our code to assure that it keeps sending us future interrupts.</p>
<pre><code class="lang-auto">    mov al, 20h ;20h
    out 20h, al ;acknowledge the interrupt so further interrupts can be handled again 
</code></pre>
<p>As you can see in this code snippet we do this by sending a 0x20 through the IO port 0x20. Depending on the interrupt it might be needed to send this signal to a slave PIC as well.</p>
<p>Reading the current key status itself is rather simple as we directly pull it from the IO port 0x60 which is the PS/2 Keyboard and Mouse Port (Don’t worry because of the way Keyboards are handled on modern systems a USB Keyboard will be treated as a PS/2 here).<br>
Note here that the key mappings are not in ASCII or similar format but have their own (Link for file containing the mapping in the References section).</p>
<p>Now the last part we can’t forget about is that because of the asynchronous nature of interrupts we can’t move the player in the handler if we somehow want it synchronous to game and render ticks which means we have to save the state from the handler in memory which then can be read synchronously.</p>
<pre><code class="lang-auto">pressA db 0
pressD db 0
pressW db 0
pressS db 0
keyboardINTListener: ;interrupt handler for keyboard events
	pusha	
		xor bx,bx ; bx = 0: signify key down event
		inc bx
		in al,0x60 ;get input to AX, 0x60 = ps/2 first port for keyboard
		btr ax, 7 ;al now contains the key code without key pressed flag, also carry flag set if key up event
		jnc .keyDown
			dec bx ; bx = 1: key up event
		.keyDown:
		cmp al,0x1e ;a
		jne .check1         
			mov byte [cs:pressA], bl ;use cs overwrite because we don't know where the data segment might point to
		.check1:
		cmp al,0x20 ;d
		jne .check2
			mov byte [cs:pressD], bl
		.check2:
		cmp al,0x11 ;w
		jne .check3
			mov byte [cs:pressW], bl
		.check3:
		cmp al,0x1f ;s
		jne .check4
			mov byte [cs:pressS], bl
		.check4:
		mov al, 20h ;20h
		out 20h, al ;acknowledge the interrupt so further interrupts can be handled again 
	popa ;resume state to not modify something by accident
	iret ;return from an interrupt routine
</code></pre>
<p>After implementing this (and a few more things) a new problem appeared which already existed when booting the kernel on a real system instead of an emulator:</p>
<p>          <a href="https://raw.githubusercontent.com/Pusty/realmode-assembly/master/part7/doc/part7_img1.gif" target="_blank" rel="noopener nofollow ugc" class="onebox">
            <img src="https://0x00sec.s3.amazonaws.com/original/2X/c/ce3553a6efba2972cf5cecb0c736768fda5c8e32.gif" width="" height="">
          </a>
</p>
<p>Because we don’t have any limitations on the game speed it runs as fast as the processor can, which makes movement quite troublesome.</p>
<h2>Sleeping for a fixed amount of time</h2>
<p>To actually maneuver in this now even in the emulator fast environment we need to slow it down.<br>
Because the game speed should be similar on different devices (and emulators) it makes sense to use a BIOS provided interrupt for that.</p>
<pre><code class="lang-nohighlight">|----int----|--ah--|----cx-----|----dx----|------CF------|---------Description---------|
|  int 0x15 | 0x68 | High Word | Low Word | Set if Error | Wait for CX:DX Microseconds |
|-----------|------|-----------|----------|--------------|-----------------------------|
</code></pre>
<pre><code class="lang-auto">synchronize:
	pusha
		mov si, 20 ; si = time in ms
		mov dx, si
		mov cx, si
		shr cx, 6
		shl dx, 10
		mov ah, 86h
		int 15h ;cx,dx sleep time in microseconds - cx = high word, dx = low word
	popa
	ret
</code></pre>
<p>Now after having this sleep time in the code it works at acceptable speed both in the emulator and on a real system</p>
<p>          <a href="https://raw.githubusercontent.com/Pusty/realmode-assembly/master/part7/doc/part7_img2.gif" target="_blank" rel="noopener nofollow ugc" class="onebox">
            <img src="https://0x00sec.s3.amazonaws.com/original/2X/6/699b2cae9288307652e53703dd1538f6a0e42afb.gif" width="" height="">
          </a>
</p>
<h2>Final Conclusion</h2>
<p>So now after after 7 parts we went over the theory of how the booting process works,to basic text output,input and processing and ended with a small bootable “game” runnable on most x86 systems. Content wise there isn’t much to it, just running around and collecting coins but then again that’s just a small example of what you can do with not too much effort.<br>
I know that the last parts were getting released pretty delayed from each other but I still hope that this series was somewhat interesting and motivating to look into the lower level inner workings of operation systems and programs in general.<br>
If you any mistakes please point them out to me so I can correct them, also again feedback to the series is appreciated <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Thank you for taking your time to read through or parts of my series!</p>
<h2>Some Development Screenshots</h2>
<p>Also as I promised let’s end it with some (buggy) development screenshots:</p>
<p>          <a href="https://raw.githubusercontent.com/Pusty/realmode-assembly/master/part7/doc/part7_img3.PNG" target="_blank" rel="noopener nofollow ugc" class="onebox">
            <img src="//0x00sec.s3.amazonaws.com/original/2X/2/2135ed336f7170771e151cab1d8e9310137d25a0.PNG" width="" height="">
          </a>
</p>
<p>When writing the code scaling images up this happened</p>
<p>          <a href="https://raw.githubusercontent.com/Pusty/realmode-assembly/master/part7/doc/part7_img4.PNG" target="_blank" rel="noopener nofollow ugc" class="onebox">
            <img src="//0x00sec.s3.amazonaws.com/original/2X/d/d6290767c2ec58472fad42fe778db24198cfdcb3.PNG" width="" height="">
          </a>
</p>
<p>I messed up the address of the play sprite resulting in this</p>
<p>          <a href="https://raw.githubusercontent.com/Pusty/realmode-assembly/master/part7/doc/part7_img5.PNG" target="_blank" rel="noopener nofollow ugc" class="onebox">
            <img src="//0x00sec.s3.amazonaws.com/original/2X/f/fc174b9591dae148f6478fd987b2329784e46c58.PNG" width="" height="">
          </a>
</p>
<p>Here I loaded up the wrong address for the base of the map, resulting in rendering the code positioned there</p>
<p>          <a href="https://raw.githubusercontent.com/Pusty/realmode-assembly/master/part7/doc/part7_img6.PNG" target="_blank" rel="noopener nofollow ugc" class="onebox">
            <img src="//0x00sec.s3.amazonaws.com/original/2X/0/04f4a43330f53cd988cd146d69145ee1bd2f51a8.PNG" width="" height="">
          </a>
</p>
<p>When I optimized the world rendering I at some point choose a too small radius resulting in this</p>
<h3><a href="https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-6/">Previous Part</a></h3>
<hr>
<h2>Link to source files:</h2>
<ul>
<li><a href="https://github.com/Pusty/realmode-assembly/tree/master/part7" rel="noopener nofollow ugc">https://github.com/Pusty/realmode-assembly/tree/master/part7</a></li>
</ul>
<h2>Sources and References</h2>
<ul>
<li><a href="https://wiki.osdev.org/Interrupt_Vector_Table" rel="noopener nofollow ugc">https://wiki.osdev.org/Interrupt_Vector_Table</a></li>
<li><a href="https://wiki.osdev.org/IDT" rel="noopener nofollow ugc">https://wiki.osdev.org/IDT</a></li>
<li><a href="https://en.wikipedia.org/wiki/Interrupt_descriptor_table" rel="noopener nofollow ugc">https://en.wikipedia.org/wiki/Interrupt_descriptor_table</a></li>
<li><a href="http://inglorion.net/documents/tutorials/x86ostut/keyboard/us_keymap.inc" rel="noopener nofollow ugc">http://inglorion.net/documents/tutorials/x86ostut/keyboard/us_keymap.inc</a></li>
<li><a href="http://stanislavs.org/helppc/int_15-86.html" rel="noopener nofollow ugc">http://stanislavs.org/helppc/int_15-86.html</a></li>
</ul>
          <p><a href="https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-7/8798/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-7/8798/1</link>
        <pubDate>Mon, 01 Oct 2018 22:28:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-8798-1</guid>
        <source url="https://0x00sec.org/t/realmode-assembly-writing-bootable-stuff-part-7/8798.rss">Realmode Assembly - Writing bootable stuff - Part 7</source>
      </item>
  </channel>
</rss>
