<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Wannabe Tutorials: Section 2 Part 1</title>
    <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254</link>
    <description>I have talked to some people on IRC and have realized that my tutorials need some work. Thanks you for those who pointed out my errors and gave me suggestions. This tutorial, I hope, is better. Cheers.

---
# Recon

As I stated in [Section 1 Part 4](https://0x00sec.org/t/wannabe-tutorials-section-1-part-4/1223) of my series, recon is probably the most important step of hacking. There are many techniques used, but in these tutorials I will only cover Scanners, specifically Port Scanners and Web Scanners.

By definition, Port Scanners are:

    &quot;Application designed to probe a server or hosts for open ports.&quot;

The results of a scan on a port usually is categorized in one of three categories:

* __Open or Accepted:__ Host sent a reply that indicates that a service is listening on a port.
* __Closed and/or Denied or Not Listening:__ Host sent a repy indicating that connections will be denied to the port.			
* __Filtered, Dropped, or Blocked:__ No reply from host or a Firewall (other security measures) is in place.
	
In `nmap` there are many types of scans, but I&#39;m only going to cover TCP, SYN, and UDP scans.

---
# Types of Scans

The simplest port scanners use the operating system&#39;s network functions. `nmap` calls this a connect scan. In other words, if a port is open then the OS completes a TCP three-way-handshake, but afterwards the connection is closed to avoid a DoS attack.

A TCP three-way-handshake is when each device sends a SYN and an ACK (also known as a SYN-SYN-ACK). In normal sequence of a connection establishment, a SYN  is sent by one device (`host a`). Once the SYN is received by the other device, `host b` sends a SYN-ACK. The SYN-ACK is received by `host a` and then host a sends a ACK. Once `host b` receives an ACK the TCP socket connection is established. A quick diagram is:

    host a ------ SYN ------&gt; host b
    host a &lt;------ SYN-ACK ------ host b
    host a ------ ACK ------&gt; host b

In `nmap`, the connect scan is as follows:

```
$ nmap -sT (Ip)
```

The problem with TCP scanning is that it&#39;s noisy because services may log a sender&#39;s IP address or an Intrusion Detection System may raise an alarm.

Thus, a SYN scan is often preferred. A SYN scan is a bit different. As with the TCP scan, a SYN scan first sends a SYN, but instead of a SYN-ACK returned only a ACK is actually returned. A quick diagram is:

    Client ------ SYN ------&gt; Server
    Client &lt;------ ACK ------ Server

---	
A SYN (TCP SYN) scan is done in `nmap` using:

```
nmap -sS (Ip)
```

---	
The last scan type, UDP, is the trickiest. UDP is known as a connectionless protocol: when a packet is sent to a UDP port, that open port receives a packet, but the closed ports send a ICMP back. A quick diagram is:

    Client ------- Packet ------&gt; Server
    Client &lt;------ ICMP ------- Server
	
In `nmap`, a UDP (UDP-ICMP) scan can be performed with this command:

```
nmap -sU (Ip)
```
	
The UDP scan is the only scan type that can be inserted with another scan type, for example, SYN scan:

```
nmap -sS -sU (Ip)
```
---
# Conclusion

Well, that&#39;s it for this tutorial. I decided not to talk about the Web Scanners in this part because this tutorial was getting long, but I will have that tutorial up next. Please comment down below, as any suggestions are welcome, but please don&#39;t flame me.

Cheers.</description>
    
    <lastBuildDate>Sun, 06 Nov 2016 01:01:54 +0000</lastBuildDate>
    <category>Networking</category>
    <atom:link href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Wannabe Tutorials: Section 2 Part 1</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Then <code>FIN</code> is the equivalent to the <code>SYN</code> flag for ordered disconnection. There is again a interchange of packets to ensure that whatever has been sent arrives to the destination. The wiki has a good general description <a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol#Connection_termination" rel="nofollow noopener">https://en.wikipedia.org/wiki/Transmission_Control_Protocol#Connection_termination</a></p>
<p>A brief description of the use of <code>FIN</code> for port scanning can be found here:</p>
<aside class="quote quote-modified" data-post="1" data-topic="619">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/0x00sec.org/0x00pf/40/199_2.png" class="avatar">
    <a href="https://0x00sec.org/t/how-do-those-hacking-tools-work-the-art-of-port-scanning/619">How do those hacking tools work? The Art of Port Scanning</a> <a class="badge-wrapper  bullet" href="https://0x00sec.org/c/networking/63"><span class="badge-category-bg" style="background-color: #8C6238;"></span><span style="" data-drop-close="true" class="badge-category clear-badge">Networking</span></a>
  </div>
  <blockquote>
    LEVEL: Beginner 
Port scanning is the process of finding out which ports are open in a given machine. An open port usually means a program listening on that port, and a program means bugs, and bugs means exploits… roughly :). 
OK, everybody in the world uses nmap for this task. It would be stupid to write your own port scanner when such an advanced and polished tool is available. However, knowing how nmap does its magic and also, why not?, write your own simple scanner just for fun, are two valu…
  </blockquote>
</aside>

          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/16">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/16</link>
        <pubDate>Sun, 06 Nov 2016 01:01:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1254-16</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss">Wannabe Tutorials: Section 2 Part 1</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 2 Part 1</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Very nice! That has made me understand a hell of a lot more!!</p>
<p>So what about Sending a <code>FIN</code> packet? Is that used for an entirely different scenario as well?</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/15</link>
        <pubDate>Sat, 05 Nov 2016 21:51:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1254-15</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss">Wannabe Tutorials: Section 2 Part 1</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 2 Part 1</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Summing up:</p>
<ul>
<li>In order to know the state of the port (Open|Close|Filtered) you do not need to send a <code>RST</code> packet. You will know the state when you get the first packet from the remote machine, independently of sending an extra <code>RST</code> or not.</li>
</ul>
<ul>
<li>If a <code>SYN|ACK</code> packet is received the port is <strong>OPEN</strong>
</li>
<li>if a <code>RST</code> or an <code>ICMP</code> error message is received, the port is <strong>CLOSED</strong>
</li>
<li>If nothing is received, the port is <strong>FILTERED</strong>
</li>
</ul>
<ul>
<li>
<code>nmap</code> does not send an <code>RST</code> packet as part of a <code>SYN</code> scan (just <code>strace</code> it).</li>
<li>Your sniffer will show an <code>RST</code> packet coming from the attacker machine, when scanning an Open Port. That packet is generated by the kernel in response to a <code>SYN|ACK</code> from the remote machine that is not associated to any on-going TCP connection.</li>
<li>Even when sending the <code>RST</code> packet is not really needed, it is a good practice to close the connection. This will happen automatically because of the previous point (the kernel will send the <code>RST</code>). In other words, sending a <code>RST</code> packet from the port scanner program is just redundant.</li>
<li>In a default Linux configuration, the <code>SYN|ACK</code> packet will be re-send up to 5 times with an increasing time-out, something like 1, 3, 6, 12, 24 seconds. This will happen if the <code>RST</code> packet is not sent to the target machine. In general, you will get 5 bursts of data that will be smaller than the original burst produced by the scanning itself… Because you will just get this packets back only from the open ports. The closed ones will not produce any re-send. If you can be DoSed by this you will also be DoS by the simple fact of running a scan. Nevertheless, not sending the <code>RST</code> packet is just dirty and a waste of resources more than a threat. And, as we have seen, it will only happen if you explicitly block them.</li>
</ul>
<ul>
<li>You really need to scan a big network with a lot of hosts up and a lot of open ports in each host to get something back that can be considered a DoS… (A <code>SYN|ACK</code> packet is 44 bytes long).</li>
</ul>
<p>This is how it works for a Linux box. For other system it may be different. Based on what is said above you can try and report back if something works differently in your system.</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/14</link>
        <pubDate>Sat, 05 Nov 2016 13:22:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1254-14</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss">Wannabe Tutorials: Section 2 Part 1</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 2 Part 1</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Have we established a full answer yet? Does anybody agree with my explanation, or is <a class="mention" href="https://0x00sec.org/u/defalt">@Defalt</a> correct.</p>
<p>I’m glad we have a forum of discussion like this, and are able to have these discussions objectively.</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/13</link>
        <pubDate>Sat, 05 Nov 2016 11:08:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1254-13</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss">Wannabe Tutorials: Section 2 Part 1</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 2 Part 1</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>To my knowledge, an RST flag is only sent in the event of an error, or in response to a socket close.  RST stands for Reset, AKA Abort, quite like if you did a return 1 in a piece of C code, it would terminate the connection, although it isn’t the correct way to close it.</p>
<p>A FIN flag also exists; this is just like doing a return 0; it closes the connection stream, although is to communicate that no more data needs to be sent.</p>
<p>This is what Wikipedia mentions on TCP Reset Flags:</p>
<blockquote>
<p>In a stream of packets of a TCP connection, each packet contains a TCP header. Each of these headers contains a bit known as the “reset” (RST) flag. In most packets this bit is set to 0 and has no effect; however, if this bit is set to 1, it indicates to the receiving computer that the computer should immediately stop using the TCP connection; it should not send any more packets using the connection’s identifying numbers, called ports, and discard any further packets it receives with headers indicating they belong to that connection. A TCP reset basically kills a TCP connection instantly.</p>
</blockquote>
<blockquote>
<p>When used as designed, this can be a useful tool. One common application is the scenario where a computer (computer A) crashes while a TCP connection is in progress. The computer on the other end (computer B) will continue to send TCP packets since it does not know that computer A has crashed. When computer A reboots, it will then receive packets from the old pre-crash connection. Computer A has no context for these packets and no way of knowing what to do with them, so it might send a TCP reset to computer B. This reset lets computer B know that the connection is no longer working. The user on computer B can now try another connection or take other action.</p>
</blockquote>
<p>I think you may be referring to a TCP reset attack, which is, in essence, the opposite of what you’ve said: where you flood a machine with RST packets; and therefore kill any connection established, or any connection attempting to create itself.</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/12</link>
        <pubDate>Thu, 03 Nov 2016 21:28:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1254-12</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss">Wannabe Tutorials: Section 2 Part 1</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 2 Part 1</title>
        <dc:creator><![CDATA[Valentine]]></dc:creator>
        <description><![CDATA[
            <p>Where is this going?</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/11</link>
        <pubDate>Thu, 03 Nov 2016 18:39:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1254-11</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss">Wannabe Tutorials: Section 2 Part 1</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 2 Part 1</title>
        <dc:creator><![CDATA[Valentine]]></dc:creator>
        <description><![CDATA[
            <p><em>“A SYN packet is sent (as if we are going to open a connection), and the target host responds with a SYN+ACK, this indicates the port is listening, and an RST indicates a non- listener. The server process is never informed by the TCP layer because the connection did not complete.”</em></p>
<p><a href="http://www.auditmypc.com/port-scanning.asp" class="onebox" target="_blank" rel="nofollow noopener">http://www.auditmypc.com/port-scanning.asp</a></p>
<p>I did a bit of research and this is what I found throughout the internet via google.</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/9</link>
        <pubDate>Thu, 03 Nov 2016 12:54:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1254-9</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss">Wannabe Tutorials: Section 2 Part 1</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 2 Part 1</title>
        <dc:creator><![CDATA[Defalt]]></dc:creator>
        <description><![CDATA[
            <p>It’s not that the attacker needs to send the packet, it’s that the victim needs to receive one. Due to TCP’s error checking/correction, if you did stop the outgoing RST packets, the victim will follow protocol and keep sending SYN-ACK packets until it gets a response or times out (if the port is open), this will effectively DoS the target, which is not the intended goal.</p>
<p>It doesn’t matter what the kernel thinks, the RST packet is sent so the victim machine doesn’t use up all it’s resources responding.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/8/801d5f7b869d114e5b77f3c4b683712a4cad4a3d.gif" width="389" height="140"></p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/8</link>
        <pubDate>Thu, 03 Nov 2016 00:48:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1254-8</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss">Wannabe Tutorials: Section 2 Part 1</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 2 Part 1</title>
        <dc:creator><![CDATA[Valentine]]></dc:creator>
        <description><![CDATA[
            <p>I used wikipedia so it could be wrong. Lmao. Sorry for the misshap.</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/7</link>
        <pubDate>Wed, 02 Nov 2016 23:57:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1254-7</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss">Wannabe Tutorials: Section 2 Part 1</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 2 Part 1</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Defalt" data-post="5" data-topic="1254">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/defalt/40/18_2.png" class="avatar"> Defalt:</div>
<blockquote>
<p>The reason the SYN scan works is because the attacker responds to a server with an RST packet, closing the connection before it’s actually established</p>
</blockquote>
</aside>
<p>AFAIK no port scanner sends a <code>RST</code> packet during the scan. Only the <code>SYN</code> packet is sent. What happens is that, as we are not calling <code>connect</code> the TCP/IP stack in the kernel does not know about any connection going on and it responds to the <em>unexpected</em> <code>SYN|ACK</code> packet with a <code>RST</code>, as it does for any unexpected packet.</p>
<p>To verify this you can easily write a simple program that sends one single <code>SYN</code> packet. Launch your preferred sniffer and run it against an open port (otherwise you just get a <code>RST</code> packet from the remote machine). You will see a <code>RST</code> packet in your sniffer trace even when your program is not sending it.</p>
<p>Then you can drop any outgoing <code>RST</code> packet in your machine (with a firewall rule) and your scan will still work.</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/6</link>
        <pubDate>Wed, 02 Nov 2016 23:05:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1254-6</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss">Wannabe Tutorials: Section 2 Part 1</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 2 Part 1</title>
        <dc:creator><![CDATA[Defalt]]></dc:creator>
        <description><![CDATA[
            <p>I small note about SYN scans.</p>
<p>The server will always respond to a successful connection request with a SYN-ACK, it’s just the way TCP works. The reason the SYN scan works is because the attacker responds to a server with an RST packet, closing the connection before it’s actually established. This is why SYN scans are also known as half-open scans.</p>
<p>So, the diagram for a SYN scan would look like this…</p>
<pre><code>host a ------SYN-----&gt; host b
host a &lt;---SYN-ACK---- host b
host a ------RST-----&gt; host b
        Port is open
</code></pre>
<p>Otherwise, great write-up!</p>
<p>-Defalt</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/5</link>
        <pubDate>Wed, 02 Nov 2016 19:37:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1254-5</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss">Wannabe Tutorials: Section 2 Part 1</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 2 Part 1</title>
        <dc:creator><![CDATA[Valentine]]></dc:creator>
        <description><![CDATA[
            <p>Whoopsie daisy. I can fix that. XD</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/4</link>
        <pubDate>Wed, 02 Nov 2016 12:50:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1254-4</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss">Wannabe Tutorials: Section 2 Part 1</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 2 Part 1</title>
        <dc:creator><![CDATA[kowalski]]></dc:creator>
        <description><![CDATA[
            <p>In your diagram for the three way handshake, host a should have the arrow pointed towards host b, since it is returning ack.</p>
<p>host a -------------ACK------------&gt; host b</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/3</link>
        <pubDate>Wed, 02 Nov 2016 10:31:00 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1254-3</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss">Wannabe Tutorials: Section 2 Part 1</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 2 Part 1</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Really really really enjoyed this overview  <a class="mention" href="https://0x00sec.org/u/valentine">@Valentine</a>, I can really see you’ve done some research, and learnt a lot, and therefore put effort into this.</p>
<p>I actually learnt a lot from this, my understanding actually was wrong, and you’ve put me right <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> I am so pleased you’ve done that. Also, I’ve never really 100% understood ICMP &amp; UDP, but you’ve really improved my understanding with your simple explanations! Good job!</p>
<p>PS: I would recommend placing this in the networking tutorial category since it is a lot about networking, right?</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/2</link>
        <pubDate>Tue, 01 Nov 2016 20:56:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1254-2</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss">Wannabe Tutorials: Section 2 Part 1</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 2 Part 1</title>
        <dc:creator><![CDATA[Valentine]]></dc:creator>
        <description><![CDATA[
            <p>I have talked to some people on IRC and have realized that my tutorials need some work. Thanks you for those who pointed out my errors and gave me suggestions. This tutorial, I hope, is better. Cheers.</p>
<hr>
<h1>Recon</h1>
<p>As I stated in <a href="https://0x00sec.org/t/wannabe-tutorials-section-1-part-4/1223">Section 1 Part 4</a> of my series, recon is probably the most important step of hacking. There are many techniques used, but in these tutorials I will only cover Scanners, specifically Port Scanners and Web Scanners.</p>
<p>By definition, Port Scanners are:</p>
<pre><code>"Application designed to probe a server or hosts for open ports."
</code></pre>
<p>The results of a scan on a port usually is categorized in one of three categories:</p>
<ul>
<li>
<strong>Open or Accepted:</strong> Host sent a reply that indicates that a service is listening on a port.</li>
<li>
<strong>Closed and/or Denied or Not Listening:</strong> Host sent a repy indicating that connections will be denied to the port.</li>
<li>
<strong>Filtered, Dropped, or Blocked:</strong> No reply from host or a Firewall (other security measures) is in place.</li>
</ul>
<p>In <code>nmap</code> there are many types of scans, but I’m only going to cover TCP, SYN, and UDP scans.</p>
<hr>
<h1>Types of Scans</h1>
<p>The simplest port scanners use the operating system’s network functions. <code>nmap</code> calls this a connect scan. In other words, if a port is open then the OS completes a TCP three-way-handshake, but afterwards the connection is closed to avoid a DoS attack.</p>
<p>A TCP three-way-handshake is when each device sends a SYN and an ACK (also known as a SYN-SYN-ACK). In normal sequence of a connection establishment, a SYN  is sent by one device (<code>host a</code>). Once the SYN is received by the other device, <code>host b</code> sends a SYN-ACK. The SYN-ACK is received by <code>host a</code> and then host a sends a ACK. Once <code>host b</code> receives an ACK the TCP socket connection is established. A quick diagram is:</p>
<pre><code>host a ------ SYN ------&gt; host b
host a &lt;------ SYN-ACK ------ host b
host a ------ ACK ------&gt; host b
</code></pre>
<p>In <code>nmap</code>, the connect scan is as follows:</p>
<pre><code class="lang-auto">$ nmap -sT (Ip)
</code></pre>
<p>The problem with TCP scanning is that it’s noisy because services may log a sender’s IP address or an Intrusion Detection System may raise an alarm.</p>
<p>Thus, a SYN scan is often preferred. A SYN scan is a bit different. As with the TCP scan, a SYN scan first sends a SYN, but instead of a SYN-ACK returned only a ACK is actually returned. A quick diagram is:</p>
<pre><code>Client ------ SYN ------&gt; Server
Client &lt;------ ACK ------ Server
</code></pre>
<hr>
<p>A SYN (TCP SYN) scan is done in <code>nmap</code> using:</p>
<pre><code class="lang-auto">nmap -sS (Ip)
</code></pre>
<hr>
<p>The last scan type, UDP, is the trickiest. UDP is known as a connectionless protocol: when a packet is sent to a UDP port, that open port receives a packet, but the closed ports send a ICMP back. A quick diagram is:</p>
<pre><code>Client ------- Packet ------&gt; Server
Client &lt;------ ICMP ------- Server
</code></pre>
<p>In <code>nmap</code>, a UDP (UDP-ICMP) scan can be performed with this command:</p>
<pre><code class="lang-auto">nmap -sU (Ip)
</code></pre>
<p>The UDP scan is the only scan type that can be inserted with another scan type, for example, SYN scan:</p>
<pre><code class="lang-auto">nmap -sS -sU (Ip)
</code></pre>
<hr>
<h1>Conclusion</h1>
<p>Well, that’s it for this tutorial. I decided not to talk about the Web Scanners in this part because this tutorial was getting long, but I will have that tutorial up next. Please comment down below, as any suggestions are welcome, but please don’t flame me.</p>
<p>Cheers.</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254/1</link>
        <pubDate>Tue, 01 Nov 2016 10:29:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1254-1</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-2-part-1/1254.rss">Wannabe Tutorials: Section 2 Part 1</source>
      </item>
  </channel>
</rss>
