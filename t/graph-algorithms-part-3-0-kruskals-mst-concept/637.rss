<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Graph Algorithms (Part 3.0): Kruskal&#39;s MST [Concept]</title>
    <link>https://0x00sec.org/t/graph-algorithms-part-3-0-kruskals-mst-concept/637</link>
    <description>Hey everyone! I&#39;m back with another Graph tutorial. This time, I plan to discuss Kruskal&#39;s Algorithm.

[Kruskal&#39;s Algorithm](https://en.wikipedia.org/wiki/Kruskal%27s_algorithm) is one of a few algorithms (we&#39;ll get to the rest later) for finding an _undirected_ graph&#39;s [Minimum Spanning Tree](https://en.wikipedia.org/wiki/Minimum_spanning_tree) (MST).

A _Minimum Spanning Tree_ is a tree connecting all nodes of a graph. Any node is reachable from any other node, and the total cost of traveling from one node in this MST to another is _minimized_.

I ___strongly recommend___ that you go watch [this video](https://www.youtube.com/watch?v=71UQH7Pr9kU) ___right now.___  It&#39;s the best walk-through of the algorithm I have found thus far.

---
# Explanation

Alright, now that you&#39;ve seen the video, you should get the gist of what&#39;s to be done here:

1. Sort the edges by weight.
2. Pick the lightest edge (the one with the smallest weight) and add that to the tree.
3. Pick the next smallest edge and add it to the tree. It __doesn&#39;t__ have to be connected to either of the nodes connected by the first edge (step 2).
4. Keep picking the next smallest edge that __doesn&#39;t__ create a cycle. If we already have `A =&gt; B` and `B =&gt; C`, we do not want to add `A =&gt; C`, since we can already go from `A` to `C` through `B`. 
___Note:___ In this hypothetical situation, `A =&gt; B` and `B =&gt; C` both have edge weights equal to or less than `A =&gt; C`, so adding `A =&gt; C` instead of one of the other edges increases the __cost__ of our tree, meaning it would no longer be the _Minimum Spanning Tree_.
5. Once we have __one__ tree, which includes _all_ of a graph&#39;s nodes, we have arrived at the _Minimum Spanning Tree_.

---
# Conclusion

I hope that I explained the rough process well enough. If not, re-read the entire article, and watch the video one more time. If you&#39;re still having troubles after that, post a comment and I&#39;ll help you out.

Oh, and don&#39;t worry about the pseudo-code at the end of the video... It&#39;s confusing, and the narrator doesn&#39;t discuss all the aspects of it. Next time, I&#39;ll walk through a code implementation of this algorithm, which&#39;ll be more clear than that pseudo-code.

@oaktree out.</description>
    
    <lastBuildDate>Tue, 21 Jun 2016 22:12:42 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/graph-algorithms-part-3-0-kruskals-mst-concept/637.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Graph Algorithms (Part 3.0): Kruskal&#39;s MST [Concept]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/graph-algorithms-part-3-0-kruskals-mst-concept/637/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/graph-algorithms-part-3-0-kruskals-mst-concept/637/2</link>
        <pubDate>Sun, 21 Jan 2018 00:37:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-637-2</guid>
        <source url="https://0x00sec.org/t/graph-algorithms-part-3-0-kruskals-mst-concept/637.rss">Graph Algorithms (Part 3.0): Kruskal&#39;s MST [Concept]</source>
      </item>
      <item>
        <title>Graph Algorithms (Part 3.0): Kruskal&#39;s MST [Concept]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Hey everyone! I’m back with another Graph tutorial. This time, I plan to discuss Kruskal’s Algorithm.</p>
<p><a href="https://en.wikipedia.org/wiki/Kruskal%27s_algorithm" rel="nofollow noopener">Kruskal’s Algorithm</a> is one of a few algorithms (we’ll get to the rest later) for finding an <em>undirected</em> graph’s <a href="https://en.wikipedia.org/wiki/Minimum_spanning_tree" rel="nofollow noopener">Minimum Spanning Tree</a> (MST).</p>
<p>A <em>Minimum Spanning Tree</em> is a tree connecting all nodes of a graph. Any node is reachable from any other node, and the total cost of traveling from one node in this MST to another is <em>minimized</em>.</p>
<p>I <em><strong>strongly recommend</strong></em> that you go watch <a href="https://www.youtube.com/watch?v=71UQH7Pr9kU" rel="nofollow noopener">this video</a> <em><strong>right now.</strong></em>  It’s the best walk-through of the algorithm I have found thus far.</p>
<hr>
<h1>Explanation</h1>
<p>Alright, now that you’ve seen the video, you should get the gist of what’s to be done here:</p>
<ol>
<li>Sort the edges by weight.</li>
<li>Pick the lightest edge (the one with the smallest weight) and add that to the tree.</li>
<li>Pick the next smallest edge and add it to the tree. It <strong>doesn’t</strong> have to be connected to either of the nodes connected by the first edge (step 2).</li>
<li>Keep picking the next smallest edge that <strong>doesn’t</strong> create a cycle. If we already have <code>A =&gt; B</code> and <code>B =&gt; C</code>, we do not want to add <code>A =&gt; C</code>, since we can already go from <code>A</code> to <code>C</code> through <code>B</code>.<br>
<em><strong>Note:</strong></em> In this hypothetical situation, <code>A =&gt; B</code> and <code>B =&gt; C</code> both have edge weights equal to or less than <code>A =&gt; C</code>, so adding <code>A =&gt; C</code> instead of one of the other edges increases the <strong>cost</strong> of our tree, meaning it would no longer be the <em>Minimum Spanning Tree</em>.</li>
<li>Once we have <strong>one</strong> tree, which includes <em>all</em> of a graph’s nodes, we have arrived at the <em>Minimum Spanning Tree</em>.</li>
</ol>
<hr>
<h1>Conclusion</h1>
<p>I hope that I explained the rough process well enough. If not, re-read the entire article, and watch the video one more time. If you’re still having troubles after that, post a comment and I’ll help you out.</p>
<p>Oh, and don’t worry about the pseudo-code at the end of the video… It’s confusing, and the narrator doesn’t discuss all the aspects of it. Next time, I’ll walk through a code implementation of this algorithm, which’ll be more clear than that pseudo-code.</p>
<p><a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a> out.</p>
          <p><a href="https://0x00sec.org/t/graph-algorithms-part-3-0-kruskals-mst-concept/637/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/graph-algorithms-part-3-0-kruskals-mst-concept/637/1</link>
        <pubDate>Tue, 21 Jun 2016 22:12:42 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-637-1</guid>
        <source url="https://0x00sec.org/t/graph-algorithms-part-3-0-kruskals-mst-concept/637.rss">Graph Algorithms (Part 3.0): Kruskal&#39;s MST [Concept]</source>
      </item>
  </channel>
</rss>
