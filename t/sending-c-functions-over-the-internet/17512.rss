<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Sending c# Functions over the internet?</title>
    <link>https://0x00sec.org/t/sending-c-functions-over-the-internet/17512</link>
    <description>Well let&#39;s start this off with a good old question that a lot of beginner programmers especially those who work around creating servers ask. &quot;can I just send specific functions over sockets?&quot;. and usually its either a &quot;No&quot; or &quot;if you create a specific assembly for them&quot;.

well, sometimes people are really stupid (like me) and don&#39;t want to do that. we want all our code in one file and for it all to just &#39;work&#39; well.... that doesn&#39;t work right?

well, it does, theoretically at least. and the use cases for this would be rather nice for example in games sending mods to clients, mod creators don&#39;t want to have 3 separate assemblies, just for their mods.

so how do we do it?
well simple, but actually not...
and I &#39;v came across the idea as I was in the shower after working with [System.Reflection.Metadata](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.metadata?view=netcore-3.0) witch-like the rest of the reflection library lets you look at assemblies guts. but a more low level, with the usual method of reflection you can&#39;t really extract a lot out of them, you can of course but its much slower and much harder, and then you get stuck with a dynamic assembly that might not properly work over the internet.
with a more low-level approach, we can fully dissect the assembly, in a semi-fast manner.

Using [MetadataReader](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.metadata.metadatareader?view=netcore-3.0) alongside [System.Reflection.PortableExecutable.PEReader](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.portableexecutable.pereader?view=netcore-3.0) we can get all the nice juicy stuff about a given Assembly. with this, we can do a bit of high to low transitioning by Getting our [MethodInfo](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.methodinfo?view=netcore-3.0) and then the [MethodInfo.MetadataToken](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.memberinfo.metadatatoken?view=netcore-3.0#System_Reflection_MemberInfo_MetadataToken) we can get the raw metadata definition of that function. alongside a bit of IL Reflection (which is the hardest part) we can extract all the referenced Functions and Types thus allowing us to build a nice large list of all the things we need to pack in order to send a compressed version of this function or better yet functions and types through our socket.

But we need to first build this assembly we plan on sending. with the help of [Dynamic Assembly Generation](https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/emitting-dynamic-methods-and-assemblies) we can push all the metadata types into one assembly, first building the types than the members, and then finally the functions. 

[A Basic IL Types, Fields and Method reference Extractor](https://pastebin.com/tLpQuXjd).
of course, you would need to do quite a bit of work to get something like this to work.
but it would be an interesting way of Sandboxing mods from game servers.

Well, I might start a project to create something like this soon. any thoughts?</description>
    
    <lastBuildDate>Mon, 02 Dec 2019 07:49:32 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/sending-c-functions-over-the-internet/17512.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Sending c# Functions over the internet?</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/sending-c-functions-over-the-internet/17512/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sending-c-functions-over-the-internet/17512/7</link>
        <pubDate>Mon, 16 Mar 2020 15:09:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-17512-7</guid>
        <source url="https://0x00sec.org/t/sending-c-functions-over-the-internet/17512.rss">Sending c# Functions over the internet?</source>
      </item>
      <item>
        <title>Sending c# Functions over the internet?</title>
        <dc:creator><![CDATA[Aegis]]></dc:creator>
        <description><![CDATA[
            <p>I think you are misunderstood by other people here and I can say that something like that is doable. I will not go into implementation details but similar things are done in some high-level language byte code obfuscation techniques such as class encryption where encrypted payload is dynamically loaded into runtime. I think it’s completely possible to create something viable but… What exactly are you trying to achieve? I think the amount of work required here overwhelms benefits. I suggest thinking of sending whole dll and dynamically load it. It’s way easier to implement and basically does what you need unless I missed something.<br>
Anyway, good luck!</p>
<p>P.S. Embedded scripting backend suggestion is good too! Lua is supper easy to embed.</p>
          <p><a href="https://0x00sec.org/t/sending-c-functions-over-the-internet/17512/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sending-c-functions-over-the-internet/17512/6</link>
        <pubDate>Mon, 02 Dec 2019 07:49:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-17512-6</guid>
        <source url="https://0x00sec.org/t/sending-c-functions-over-the-internet/17512.rss">Sending c# Functions over the internet?</source>
      </item>
      <item>
        <title>Sending c# Functions over the internet?</title>
        <dc:creator><![CDATA[_indirection]]></dc:creator>
        <description><![CDATA[
            <p>What you’re describing isn’t generally achieved by writing some kind of bytecode payload over sockets. It’s achieved by having an embedded scripting language on the server (as a lot of game servers have, notably GSC in the Call of Duty series).</p>
<p>The reason for this is that it’s a lot simpler to encapsulate any details regarding evaluation/interpretation of whatever the scripting language yields (especially in the cases where JIT is performed) and not burden the user with it. Also allows you to implement some vague security in the sense that you can sandbox the interpreter and only expose certain routines to it.</p>
<p>Of course, there’s other solutions like RPC (remote procedure call), where you can invoke selective (you’d hope) functions remotely. Though, I like to think of RPC as a sort of debugging feature (like what was done on the Xbox 360 with XBDM - Xbox Debug Manager) that won’t be used for any real heavy-lifting (as it’s very error-prone if you don’t have things like authentication, heuristics, a clear guide of which functions can be invoked (goes back to sandboxing), a fast serialisation format for calls; such as msgpack).</p>
<p>So, yeah, I’d look into some kind of embedded scripting language like Lua, Python, (some) Scheme, etc. before opting for some ad-hoc solution of mapping and then interpreting bytecode compiled by a networked peer.</p>
          <p><a href="https://0x00sec.org/t/sending-c-functions-over-the-internet/17512/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sending-c-functions-over-the-internet/17512/5</link>
        <pubDate>Thu, 28 Nov 2019 01:24:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-17512-5</guid>
        <source url="https://0x00sec.org/t/sending-c-functions-over-the-internet/17512.rss">Sending c# Functions over the internet?</source>
      </item>
      <item>
        <title>Sending c# Functions over the internet?</title>
        <dc:creator><![CDATA[pin]]></dc:creator>
        <description><![CDATA[
            <p>You’re probably making things more complex than you really need to.</p>
<p>I’d have to go back through things to remember the specifics, I wondered something related some time back and whether it was possible to bootstrap a minimal .NET environment from within a traditional native application- I found it annoying that the tools for reversing each are so horribly incompatible that I thought mixing the two so that you were hopping in and out of the CLR would be especially annoying. I reviewed the subject matter far enough to know that it should be trivially possible, which is more or less what you mean by sending a function through a socket.</p>
<p>Basically you’d want a file that replicates some of the native API functionality in terms of interpreting bytecode. In your use-case, this means writing a class or series of classes that wrap native API functionality. Then you’d transmit CIL bytecode across the network connection and load it.</p>
<p>If you dig around a bit and reverse some of the CLR you’ll find the functions in the native API that essentially allow you to take a string and execute it. The CIL itself is well documented, I think the most annoying part would be writing a compiler/decompiler, but for hand-coded CIL it should be trivial.</p>
          <p><a href="https://0x00sec.org/t/sending-c-functions-over-the-internet/17512/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sending-c-functions-over-the-internet/17512/4</link>
        <pubDate>Mon, 25 Nov 2019 16:30:08 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-17512-4</guid>
        <source url="https://0x00sec.org/t/sending-c-functions-over-the-internet/17512.rss">Sending c# Functions over the internet?</source>
      </item>
      <item>
        <title>Sending c# Functions over the internet?</title>
        <dc:creator><![CDATA[hostile.node]]></dc:creator>
        <description><![CDATA[
            <p>This is somewhat outside my area - I think I do understand (at a high level) what you’re trying to achieve, and although I feel like that solution is going to be a pain to get right I don’t really have the necessary experience with the reflection systems to provide a constructive alternative.</p>
<p>I do have to ask, however, is original question a good one to ask? This would allow a client to execute arbitrary code on the server, which is a fairly disturbing thing to do (I mean, I’m quite happy when I find a RCE, but those are usually unintended!).</p>
          <p><a href="https://0x00sec.org/t/sending-c-functions-over-the-internet/17512/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sending-c-functions-over-the-internet/17512/3</link>
        <pubDate>Wed, 20 Nov 2019 11:00:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-17512-3</guid>
        <source url="https://0x00sec.org/t/sending-c-functions-over-the-internet/17512.rss">Sending c# Functions over the internet?</source>
      </item>
      <item>
        <title>Sending c# Functions over the internet?</title>
        <dc:creator><![CDATA[fxbg]]></dc:creator>
        <description><![CDATA[
            <p>i have no idea what you mean</p>
          <p><a href="https://0x00sec.org/t/sending-c-functions-over-the-internet/17512/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sending-c-functions-over-the-internet/17512/2</link>
        <pubDate>Wed, 20 Nov 2019 00:57:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-17512-2</guid>
        <source url="https://0x00sec.org/t/sending-c-functions-over-the-internet/17512.rss">Sending c# Functions over the internet?</source>
      </item>
      <item>
        <title>Sending c# Functions over the internet?</title>
        <dc:creator><![CDATA[dedady157]]></dc:creator>
        <description><![CDATA[
            <p>Well let’s start this off with a good old question that a lot of beginner programmers especially those who work around creating servers ask. “can I just send specific functions over sockets?”. and usually its either a “No” or “if you create a specific assembly for them”.</p>
<p>well, sometimes people are really stupid (like me) and don’t want to do that. we want all our code in one file and for it all to just ‘work’ well… that doesn’t work right?</p>
<p>well, it does, theoretically at least. and the use cases for this would be rather nice for example in games sending mods to clients, mod creators don’t want to have 3 separate assemblies, just for their mods.</p>
<p>so how do we do it?<br>
well simple, but actually not…<br>
and I 'v came across the idea as I was in the shower after working with <a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.metadata?view=netcore-3.0" rel="nofollow noopener">System.Reflection.Metadata</a> witch-like the rest of the reflection library lets you look at assemblies guts. but a more low level, with the usual method of reflection you can’t really extract a lot out of them, you can of course but its much slower and much harder, and then you get stuck with a dynamic assembly that might not properly work over the internet.<br>
with a more low-level approach, we can fully dissect the assembly, in a semi-fast manner.</p>
<p>Using <a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.metadata.metadatareader?view=netcore-3.0" rel="nofollow noopener">MetadataReader</a> alongside <a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.portableexecutable.pereader?view=netcore-3.0" rel="nofollow noopener">System.Reflection.PortableExecutable.PEReader</a> we can get all the nice juicy stuff about a given Assembly. with this, we can do a bit of high to low transitioning by Getting our <a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.methodinfo?view=netcore-3.0" rel="nofollow noopener">MethodInfo</a> and then the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.memberinfo.metadatatoken?view=netcore-3.0#System_Reflection_MemberInfo_MetadataToken" rel="nofollow noopener">MethodInfo.MetadataToken</a> we can get the raw metadata definition of that function. alongside a bit of IL Reflection (which is the hardest part) we can extract all the referenced Functions and Types thus allowing us to build a nice large list of all the things we need to pack in order to send a compressed version of this function or better yet functions and types through our socket.</p>
<p>But we need to first build this assembly we plan on sending. with the help of <a href="https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/emitting-dynamic-methods-and-assemblies" rel="nofollow noopener">Dynamic Assembly Generation</a> we can push all the metadata types into one assembly, first building the types than the members, and then finally the functions.</p>
<p><a href="https://pastebin.com/tLpQuXjd" rel="nofollow noopener">A Basic IL Types, Fields and Method reference Extractor</a>.<br>
of course, you would need to do quite a bit of work to get something like this to work.<br>
but it would be an interesting way of Sandboxing mods from game servers.</p>
<p>Well, I might start a project to create something like this soon. any thoughts?</p>
          <p><a href="https://0x00sec.org/t/sending-c-functions-over-the-internet/17512/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sending-c-functions-over-the-internet/17512/1</link>
        <pubDate>Fri, 15 Nov 2019 23:09:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-17512-1</guid>
        <source url="https://0x00sec.org/t/sending-c-functions-over-the-internet/17512.rss">Sending c# Functions over the internet?</source>
      </item>
  </channel>
</rss>
