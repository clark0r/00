<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Android] UnlockWatch - mitigate phone pattern/pin guessing</title>
    <link>https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442</link>
    <description>Believe it or not i could not find an app which would reboot phone on certain number of failed unlock attempts. Why would anyone want this? To prevent unlocking encrypted devices of course!

## My setup
1. Phone: galaxy S5 stock rom, rooted and debloated.
2. Encrypt device.
3. Set pattern lock.
4. Set cryptfs password using [Cryptfs password manager](https://play.google.com/store/apps/details?id=org.nick.cryptfs.passwdmanager)
5. Install and run [UnlockWatch](https://github.com/rokups/UnlockWatch/releases) once, grant permanent root and add as device administrator.

## Result
This setup provides you with encrypted device which uses strong password on boot, and pattern (or pin if you choose so) lock to unlock device normally. Three failed pattern (or pin) entries will reboot device and you will have to enter your long and strong password. Application is using android device administrator API and does not need to run in the background. It is very light on resources and reliable. Also note that invalid attempt is counted only if invalid pattern or pin length is at least as long as minimal length enforced by OS.

## Other software
While writing this post i discovered [SnooperStopper](https://play.google.com/store/apps/details?id=cz.eutopia.snooperstopper) app. It is supposed to do same thing as UnlockWatch + Cryptfs password manager, however setting password did not work on my android 6 and source code is nowhere to be seen.

## The good stuff

Source code: https://github.com/rokups/UnlockWatch</description>
    
    <lastBuildDate>Thu, 31 Aug 2017 06:51:17 +0000</lastBuildDate>
    <category>Phone Hacking</category>
    <atom:link href="https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Android] UnlockWatch - mitigate phone pattern/pin guessing</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>As for that, I would recommend locking your bootloader as well, you can have an encrypted phone, but somebody could still use ADB and flash a custom application to intercept the password, and then retrieve the phone back and have full access.</p>
          <p><a href="https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442/5</link>
        <pubDate>Thu, 31 Aug 2017 06:51:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3442-5</guid>
        <source url="https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442.rss">[Android] UnlockWatch - mitigate phone pattern/pin guessing</source>
      </item>
      <item>
        <title>[Android] UnlockWatch - mitigate phone pattern/pin guessing</title>
        <dc:creator><![CDATA[rokups]]></dc:creator>
        <description><![CDATA[
            <p>Yes, forgot about root part. Actually there is bit of a story behind calling <code>su -c reboot</code>. As it turns out android allows only system apps to get reboot capability. Device administrator API got a reboot call, but its on android 7.0 or 8.0. So i had to use <code>su -c reboot</code> to reboot the device.</p>
<p>As for shadowing <code>reboot</code> command to invoke malicious code - if someone can land code on your device then no amount of lock screen magic is going to help.</p>
          <p><a href="https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442/4</link>
        <pubDate>Thu, 31 Aug 2017 06:48:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3442-4</guid>
        <source url="https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442.rss">[Android] UnlockWatch - mitigate phone pattern/pin guessing</source>
      </item>
      <item>
        <title>[Android] UnlockWatch - mitigate phone pattern/pin guessing</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>I don’t think there is anything wrong in this case, your scenario of copying applications and stealing root is possible across the board, that is not just this application.</p>
          <p><a href="https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442/3</link>
        <pubDate>Thu, 31 Aug 2017 06:47:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3442-3</guid>
        <source url="https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442.rss">[Android] UnlockWatch - mitigate phone pattern/pin guessing</source>
      </item>
      <item>
        <title>[Android] UnlockWatch - mitigate phone pattern/pin guessing</title>
        <dc:creator><![CDATA[Xorus]]></dc:creator>
        <description><![CDATA[
            <p>I really like the concept, I know Blackberry has something similar. Though their method is a lot more “Slash and Burn” as it will wipe with device after so many failed retries. You should probably also mention that this requires a rooted device as you are calling <code>su</code>.</p>
<p>Something that does bother me is that you are calling reboot directly through <code>su</code>. Maybe I’m just showing my ignorance of Linux, but I know that on Windows its generally not a good idea to call system commands like that as an attacker could hijack the name of the application you are trying to call. If someone could clarify if this is an issue on linux machines as well that would be greatly appreciated.</p>
          <p><a href="https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442/2</link>
        <pubDate>Wed, 30 Aug 2017 22:04:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3442-2</guid>
        <source url="https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442.rss">[Android] UnlockWatch - mitigate phone pattern/pin guessing</source>
      </item>
      <item>
        <title>[Android] UnlockWatch - mitigate phone pattern/pin guessing</title>
        <dc:creator><![CDATA[rokups]]></dc:creator>
        <description><![CDATA[
            <p>Believe it or not i could not find an app which would reboot phone on certain number of failed unlock attempts. Why would anyone want this? To prevent unlocking encrypted devices of course!</p>
<h2>My setup</h2>
<ol>
<li>Phone: galaxy S5 stock rom, rooted and debloated.</li>
<li>Encrypt device.</li>
<li>Set pattern lock.</li>
<li>Set cryptfs password using <a href="https://play.google.com/store/apps/details?id=org.nick.cryptfs.passwdmanager" rel="nofollow noopener">Cryptfs password manager</a>
</li>
<li>Install and run <a href="https://github.com/rokups/UnlockWatch/releases" rel="nofollow noopener">UnlockWatch</a> once, grant permanent root and add as device administrator.</li>
</ol>
<h2>Result</h2>
<p>This setup provides you with encrypted device which uses strong password on boot, and pattern (or pin if you choose so) lock to unlock device normally. Three failed pattern (or pin) entries will reboot device and you will have to enter your long and strong password. Application is using android device administrator API and does not need to run in the background. It is very light on resources and reliable. Also note that invalid attempt is counted only if invalid pattern or pin length is at least as long as minimal length enforced by OS.</p>
<h2>Other software</h2>
<p>While writing this post i discovered <a href="https://play.google.com/store/apps/details?id=cz.eutopia.snooperstopper" rel="nofollow noopener">SnooperStopper</a> app. It is supposed to do same thing as UnlockWatch + Cryptfs password manager, however setting password did not work on my android 6 and source code is nowhere to be seen.</p>
<h2>The good stuff</h2>
<p>Source code: <a href="https://github.com/rokups/UnlockWatch" rel="nofollow noopener">https://github.com/rokups/UnlockWatch</a></p>
          <p><a href="https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442/1</link>
        <pubDate>Wed, 30 Aug 2017 09:44:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3442-1</guid>
        <source url="https://0x00sec.org/t/android-unlockwatch-mitigate-phone-pattern-pin-guessing/3442.rss">[Android] UnlockWatch - mitigate phone pattern/pin guessing</source>
      </item>
  </channel>
</rss>
