<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Data Structures (Part 1.2): Linked Lists [search()]</title>
    <link>https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316</link>
    <description>Hello 0x00sec! Today, I&#39;ll be going over `search(...)`, as promised.

# Basic Algorithm Description
`search(...)` will take one parameter `q` of type `T`, the value to look for in a linked list. The function returns a `node&lt;T&gt;*` (a pointer to a `node` in the list) if `q` is found; or `nullptr` if `q` is not found.

This implementation of `search(...)` will at most traverse the entire linked list. Thus, it has `O(n)` complexity.

----
# The Code

```java
template &lt;class T&gt;
node&lt;T&gt;* List&lt;T&gt;::search(const T&amp; q) {
	node&lt;T&gt;* h = root;

	while(h != nullptr &amp;&amp; h-&gt;d() != q)
                h = h-&gt;next;

                // d() is a member function of `node` is the
                // getter for the attribute `data` of a `node`

	return h;
}
```
The first thing we do is use `h` to store the pointer to the `root` of our linked list. We then traverse the list, stopping only when we have reached the end OR have found the value for which we are looking.

Whatever `h` is at that point, we return.

----
# Example

```java
#include &lt;node.h&gt;
#include &lt;node.cpp&gt;
#include &lt;list.h&gt;
#include &lt;list.cpp&gt;
#include &lt;iostream&gt;

int main() {
    List&lt;int&gt; mylist;

    for (int i =0; i&lt;10; i++) mylist.append(i);
    // append() tacks the value passed to it onto the end of the linked list

    if (mylist.search(5) != nullptr)
        std::cout &lt;&lt; &quot;found 5 in mylist\n&quot;;
    else
        std::cout &lt;&lt; &quot;didn&#39;t find 5 in mylist\n&quot;;

    if (mylist.search(12) != nullptr)
        std::cout &lt;&lt; &quot;found 12 in mylist\n&quot;;
    else
        std::cout &quot;did not find 12 in mylist\n&quot;;
}
```
This code should read out:
&gt; found 5 in mylist
&gt; did not find 12 in mylist
----
# Conclusion
In its current state, you could use this `search(...)` to interact with `node`s. I&#39;m now debating whether I should have returned an index instead. Ah, oh well. It still _is_ a search function though. And it works.

Bai,
oaktree

P.S. If you have any suggestions, go ahead and comment or PM me! After all, I&#39;m no _node-it-all_.</description>
    
    <lastBuildDate>Thu, 12 May 2016 15:56:17 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Data Structures (Part 1.2): Linked Lists [search()]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316/7</link>
        <pubDate>Sun, 21 Jan 2018 00:37:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-316-7</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316.rss">Data Structures (Part 1.2): Linked Lists [search()]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.2): Linked Lists [search()]</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>I haven’t manage myself <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>In case somebody do not know what you are talking about, or wants to try:</p>
<p><a href="http://www.claymath.org/millennium-problems/p-vs-np-problem" class="onebox" target="_blank" rel="nofollow noopener">http://www.claymath.org/millennium-problems/p-vs-np-problem</a></p>
<p>You would be contributing to mankind!</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316/6</link>
        <pubDate>Thu, 12 May 2016 15:56:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-316-6</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316.rss">Data Structures (Part 1.2): Linked Lists [search()]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.2): Linked Lists [search()]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>That’s exactly why I’m doing it!!! Also GPS…</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316/5</link>
        <pubDate>Thu, 12 May 2016 14:20:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-316-5</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316.rss">Data Structures (Part 1.2): Linked Lists [search()]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.2): Linked Lists [search()]</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>Fyi Dijkstra’s Algorithm is being used in routing protocols. Looking forward to it oakey.</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316/4</link>
        <pubDate>Thu, 12 May 2016 14:12:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-316-4</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316.rss">Data Structures (Part 1.2): Linked Lists [search()]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.2): Linked Lists [search()]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>I’ll be writing up a Dijkstra’s Algorithm tutorial, <a class="mention" href="https://0x00sec.org/u/sea">@Sea</a>, but I’ll wrap up this Linked List series first. Lol if I solve P = NP I’d like my million-dollar check payed to the order of <a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a>.</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316/3</link>
        <pubDate>Thu, 12 May 2016 14:00:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-316-3</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316.rss">Data Structures (Part 1.2): Linked Lists [search()]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.2): Linked Lists [search()]</title>
        <dc:creator><![CDATA[Sea]]></dc:creator>
        <description><![CDATA[
            <p>Another well written post! For your next algorithm, how about you solve P = NP? <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>I would like to see some posts on algorithms and their real life uses, as that would be pretty cool. Although sorting itself is pretty useful.</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316/2</link>
        <pubDate>Thu, 12 May 2016 01:58:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-316-2</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316.rss">Data Structures (Part 1.2): Linked Lists [search()]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.2): Linked Lists [search()]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Hello 0x00sec! Today, I’ll be going over <code>search(...)</code>, as promised.</p>
<h1>Basic Algorithm Description</h1>
<p><code>search(...)</code> will take one parameter <code>q</code> of type <code>T</code>, the value to look for in a linked list. The function returns a <code>node&lt;T&gt;*</code> (a pointer to a <code>node</code> in the list) if <code>q</code> is found; or <code>nullptr</code> if <code>q</code> is not found.</p>
<p>This implementation of <code>search(...)</code> will at most traverse the entire linked list. Thus, it has <code>O(n)</code> complexity.</p>
<hr>
<h1>The Code</h1>
<pre><code class="lang-java">template &lt;class T&gt;
node&lt;T&gt;* List&lt;T&gt;::search(const T&amp; q) {
	node&lt;T&gt;* h = root;

	while(h != nullptr &amp;&amp; h-&gt;d() != q)
                h = h-&gt;next;

                // d() is a member function of `node` is the
                // getter for the attribute `data` of a `node`

	return h;
}
</code></pre>
<p>The first thing we do is use <code>h</code> to store the pointer to the <code>root</code> of our linked list. We then traverse the list, stopping only when we have reached the end OR have found the value for which we are looking.</p>
<p>Whatever <code>h</code> is at that point, we return.</p>
<hr>
<h1>Example</h1>
<pre><code class="lang-java">#include &lt;node.h&gt;
#include &lt;node.cpp&gt;
#include &lt;list.h&gt;
#include &lt;list.cpp&gt;
#include &lt;iostream&gt;

int main() {
    List&lt;int&gt; mylist;

    for (int i =0; i&lt;10; i++) mylist.append(i);
    // append() tacks the value passed to it onto the end of the linked list

    if (mylist.search(5) != nullptr)
        std::cout &lt;&lt; "found 5 in mylist\n";
    else
        std::cout &lt;&lt; "didn't find 5 in mylist\n";

    if (mylist.search(12) != nullptr)
        std::cout &lt;&lt; "found 12 in mylist\n";
    else
        std::cout "did not find 12 in mylist\n";
}
</code></pre>
<p>This code should read out:</p>
<blockquote>
<p>found 5 in mylist<br>
did not find 12 in mylist</p>
</blockquote>
<hr>
<h1>Conclusion</h1>
<p>In its current state, you could use this <code>search(...)</code> to interact with <code>node</code>s. I’m now debating whether I should have returned an index instead. Ah, oh well. It still <em>is</em> a search function though. And it works.</p>
<p>Bai,<br>
oaktree</p>
<p>P.S. If you have any suggestions, go ahead and comment or PM me! After all, I’m no <em>node-it-all</em>.</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316/1</link>
        <pubDate>Thu, 12 May 2016 00:10:15 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-316-1</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-2-linked-lists-search/316.rss">Data Structures (Part 1.2): Linked Lists [search()]</source>
      </item>
  </channel>
</rss>
