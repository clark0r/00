<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Self Deleting Executables</title>
    <link>https://0x00sec.org/t/self-deleting-executables/33702</link>
    <description>In this post, I&#39;ll provide an example of self-deleting programs, as well as the different ways it can be used, and finally a detailed explanation.  The first example is for Windows (OS), which create a temporary file and use it to delete the original executable, The second example is  Linux based simply uses built in functions to initiate the self-deletion process.


## Example 01 

This program can help make sure that any executables that are created are removed from the system once their job is complete.

```
int 
CommitSuicide(char *szCmdLine)

{
HANDLE hTemp;
char szPath[MAX_PATH];
char szTemp[MAX_PATH];

static BYTE buf[1024];
STARTUPINFO si;
PROCESS_INFORMATION pi;
UINT ret;

//open a temporary file
GetTempPath(MAX_PATH, szTemp);
lstrcat(szTemp, &quot;suicide.exe&quot;);

GetModuleFileName(0, szPath, MAX_PATH);
CopyFile(szPath, szTemp, FALSE);


hTemp = CreateFile(szTemp, GENERIC_READ, FILE_SHARE_READ|FILE_SHARE_DELETE, 0,

OPEN_EXISTING, FILE_FLAG_DELETE_ON_CLOSE, 0);


//Create a process using the temporary executable. This will cause

//the file&#39;s handle count to increase, so we can close it.

ZeroMemory(&amp;si, sizeof(STARTUPINFO));
ZeroMemory(&amp;pi, sizeof(PROCESS_INFORMATION));  

ZeroMemory(&amp;si, sizeof(STARTUPINFO));

si.cb = sizeof(STARTUPINFO);


lstrcat(szTemp, &quot; &quot;);
lstrcat(szTemp, szCmdLine);

ret = CreateProcess(0, szTemp, 0, 0, FALSE, NORMAL_PRIORITY_CLASS, 0, 0, &amp;si, &amp;pi);

//Close our handle to the new process. Because the process is

//memory-mapped, there will still be a handle held by the O/S, so

//it won&#39;t get deleted. Give the other process a chance to run..

Sleep(100);

CloseHandle(hTemp);
  
return 0;

}
```

- When it&#39;s time to delete ourselves we first spawns a new process using that file, and then deletes the temporary file. Calling `szCmdLine` as its input parameter which creates a temporary file in the system&#39;s tmp directory and copies the current executable file to that tmp file finally creates a new process using the temporary file, waits for  `Sleep();` and then closes the handle to the tmp file

```
int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrev, PSTR szCmdLine, int iCmdShow)

{

char szPath[MAX_PATH];

//

// Parse the command line

// Normally, we should not be run with any paramters

// We re-spawn ourselves with the current module&#39;s path

//

if(szCmdLine[0] == &#39;\0&#39;)

{

// Spawn a duplicate process, and tell it to delete US

HMODULE hModule = GetModuleHandle(0);

GetModuleFileName(hModule, szPath, MAX_PATH);

CommitSuicide(szPath);

// Exit normally
return 0;

}

// This is where we pick up execution second time we run,

// When a filename has been specified on the command line

else

{

// Give the calling process time to exit...

Sleep(200);

// Delete the file specified on command line.

DeleteFile(szCmdLine);

// Exit normally. When we close, this executable will be automatically

return 0;

	}
}
```

- Next, we check if any command line parameters have been passed we `Sleep();` and then deletes the file specified by the command line parameter if none we re-spawn the path of the current executable file as a command line parameter.

## Example 02 

This actually a simple one this function deletes the current executable by obtaining its path `readlink` and calling the `unlink` .

```
void 
CommitSuicide() {
    char path[256];
    int status;

    // Get the path of the current program
    status = readlink(&quot;/proc/self/exe&quot;, path, sizeof(path) - 1);
    if (status == -1) {
        exit(EXIT_FAILURE);
    }
    path[status] = &#39;\0&#39;;

    // Copy the executable to a temporary file
    char tmp_path[] = &quot;/tmp/XXXXXX&quot;;
    int fd = mkstemp(tmp_path);
    if (fd == -1) {
        exit(EXIT_FAILURE);
    }
    if (write(fd, path, status) != status) {
        exit(EXIT_FAILURE);
    }
    close(fd);

    // Launch the temporary executable as a new process
    if (fork() == 0) {
        execl(tmp_path, &quot;&quot;, NULL);
    }

    // Delete the original executable
    unlink(path);

    // Exit the current process
    exit(EXIT_SUCCESS);
}

int main() {
    CommitSuicide();
    return 0;
}
```

The general idea is to create a temporary copy of the executable file, launch it as a new process, and then delete the original executable before the new process terminates, This can be used as an anti-analysis technique since the executable file will no longer be available after `CommitSuicide` function gets called. 

That’s all for now. I hope you learned something from this. Please feel free to share any techniques or thought

## References 
https://www.catch22.net/tuts/win32/self-deleting-executables</description>
    
    <lastBuildDate>Fri, 19 May 2023 02:37:33 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/self-deleting-executables/33702.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Self Deleting Executables</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/self-deleting-executables/33702/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-deleting-executables/33702/10</link>
        <pubDate>Sun, 02 Jul 2023 16:30:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33702-10</guid>
        <source url="https://0x00sec.org/t/self-deleting-executables/33702.rss">Self Deleting Executables</source>
      </item>
      <item>
        <title>Self Deleting Executables</title>
        <dc:creator><![CDATA[TheAnalizer]]></dc:creator>
        <description><![CDATA[
            <p>Very interesting, might use this later.</p>
          <p><a href="https://0x00sec.org/t/self-deleting-executables/33702/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-deleting-executables/33702/9</link>
        <pubDate>Fri, 19 May 2023 02:37:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33702-9</guid>
        <source url="https://0x00sec.org/t/self-deleting-executables/33702.rss">Self Deleting Executables</source>
      </item>
      <item>
        <title>Self Deleting Executables</title>
        <dc:creator><![CDATA[0xf00]]></dc:creator>
        <description><![CDATA[
            <aside class="onebox allowlistedgeneric" data-onebox-src="https://github.com/0xf00I/self-delete/">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">

      <a href="https://github.com/0xf00I/self-delete/" target="_blank" rel="noopener nofollow ugc">GitHub</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/345;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/f/6/f600c1860240ec244a774245fe57bd8c110f404a_2_690x345.png" class="thumbnail" width="690" height="345" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/f/6/f600c1860240ec244a774245fe57bd8c110f404a_2_690x345.png, https://0x00sec.s3.amazonaws.com/optimized/3X/f/6/f600c1860240ec244a774245fe57bd8c110f404a_2_1035x517.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/f/6/f600c1860240ec244a774245fe57bd8c110f404a.png 2x" data-dominant-color="F3F3F4"></div>

<h3><a href="https://github.com/0xf00I/self-delete/" target="_blank" rel="noopener nofollow ugc">GitHub - 0xf00I/self-delete: Self deleting executables</a></h3>

  <p>Self deleting executables. Contribute to 0xf00I/self-delete development by creating an account on GitHub.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/self-deleting-executables/33702/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-deleting-executables/33702/8</link>
        <pubDate>Sat, 06 May 2023 14:20:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33702-8</guid>
        <source url="https://0x00sec.org/t/self-deleting-executables/33702.rss">Self Deleting Executables</source>
      </item>
      <item>
        <title>Self Deleting Executables</title>
        <dc:creator><![CDATA[RiskLimit]]></dc:creator>
        <description><![CDATA[
            <p>I have found a similar solution to yours</p>
<pre><code class="lang-cpp">void DelMe() // function to delete self after running
{
     TCHAR szModuleName[MAX_PATH];
     TCHAR szCmd[2 * MAX_PATH];
     STARTUPINFO si = { 0 };
     PROCESS_INFORMATION pi = { 0 };

     GetModuleFileName(NULL, szModuleName, MAX_PATH);

     StringCbPrintf(szCmd, 2 * MAX_PATH, "cmd.exe /C ping 1.1.1.1 -n 1 -w 3000 &gt; Nul &amp; Del /f /q \"%s\"", szModuleName); // cmd.exe ping ... del

     CreateProcess(NULL, szCmd, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &amp;si, &amp;pi);

     CloseHandle(pi.hThread);
     CloseHandle(pi.hProcess);
     exit(0);
}
</code></pre>
          <p><a href="https://0x00sec.org/t/self-deleting-executables/33702/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-deleting-executables/33702/7</link>
        <pubDate>Sat, 15 Apr 2023 20:27:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33702-7</guid>
        <source url="https://0x00sec.org/t/self-deleting-executables/33702.rss">Self Deleting Executables</source>
      </item>
      <item>
        <title>Self Deleting Executables</title>
        <dc:creator><![CDATA[BillGatesSux]]></dc:creator>
        <description><![CDATA[
            <p>This is very intresting. Thanks for the great info!</p>
          <p><a href="https://0x00sec.org/t/self-deleting-executables/33702/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-deleting-executables/33702/6</link>
        <pubDate>Mon, 13 Mar 2023 00:54:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33702-6</guid>
        <source url="https://0x00sec.org/t/self-deleting-executables/33702.rss">Self Deleting Executables</source>
      </item>
      <item>
        <title>Self Deleting Executables</title>
        <dc:creator><![CDATA[0xf00]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="c0z" data-post="4" data-topic="33702">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/c0z/40/42163_2.png" class="avatar"> c0z:</div>
<blockquote>
<p>modified $MFT entries</p>
</blockquote>
</aside>
<p>There are some tricky aspect for example <em>SDelete</em> has no way of allocating free space to securely overwrite it, So to overwrite file names of a file that you delete, <em>SDelete</em> renames the file 26 times, each time replacing each character For instance, the first rename of “foo.txt” would be to “AAA.AAA”.</p>
<p><a href="https://learn.microsoft.com/en-us/sysinternals/downloads/sdelete" class="inline-onebox" rel="noopener nofollow ugc">SDelete - Sysinternals | Microsoft Learn</a></p>
          <p><a href="https://0x00sec.org/t/self-deleting-executables/33702/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-deleting-executables/33702/5</link>
        <pubDate>Sun, 05 Mar 2023 19:18:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33702-5</guid>
        <source url="https://0x00sec.org/t/self-deleting-executables/33702.rss">Self Deleting Executables</source>
      </item>
      <item>
        <title>Self Deleting Executables</title>
        <dc:creator><![CDATA[c0z]]></dc:creator>
        <description><![CDATA[
            <p>Didn’t know sdelete modified $MFT entries</p>
          <p><a href="https://0x00sec.org/t/self-deleting-executables/33702/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-deleting-executables/33702/4</link>
        <pubDate>Sun, 05 Mar 2023 11:14:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33702-4</guid>
        <source url="https://0x00sec.org/t/self-deleting-executables/33702.rss">Self Deleting Executables</source>
      </item>
      <item>
        <title>Self Deleting Executables</title>
        <dc:creator><![CDATA[0xf00]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="c0z" data-post="2" data-topic="33702">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/c0z/40/42163_2.png" class="avatar"> c0z:</div>
<blockquote>
<p>on-disk and in-memory cleanup. Though the in-memory cleanup is usually implemented the on-disk cleanup isn’t.</p>
</blockquote>
</aside>
<p><a href="https://learn.microsoft.com/en-us/sysinternals/downloads/sdelete" rel="noopener nofollow ugc">SDelete</a>  it handles any existing free portions of the “NTFS”  with files that fit within an “MFT record”  I actually implemented a self destructive program on Windows Server using this tool worked just fine</p>
<aside class="quote no-group" data-username="c0z" data-post="2" data-topic="33702">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/c0z/40/42163_2.png" class="avatar"> c0z:</div>
<blockquote>
<p>to <em>almost</em> completely remove the history of the malware ever running</p>
</blockquote>
</aside>
<p>It would be nice but it’s not necessary, putting the effort and time specially it the goal does not require a high success rate is not worth it.</p>
          <p><a href="https://0x00sec.org/t/self-deleting-executables/33702/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-deleting-executables/33702/3</link>
        <pubDate>Sat, 04 Mar 2023 23:28:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33702-3</guid>
        <source url="https://0x00sec.org/t/self-deleting-executables/33702.rss">Self Deleting Executables</source>
      </item>
      <item>
        <title>Self Deleting Executables</title>
        <dc:creator><![CDATA[c0z]]></dc:creator>
        <description><![CDATA[
            <p>I remember reading about OPSEC TTPs and this was one of them, on-disk and in-memory cleanup. Though the in-memory cleanup is usually implemented the on-disk cleanup isn’t.</p>
<p>What would be nice to see is the manual modification of the <code>$MFT</code> record for NTFS and other artifacts, like JumpLists, AppCompatCache and so on, to <em>almost</em> completely remove the history of the malware ever running (or more like touching disk). Obviously everything from userland is a joke anyway (OALabs reference).</p>
          <p><a href="https://0x00sec.org/t/self-deleting-executables/33702/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-deleting-executables/33702/2</link>
        <pubDate>Sat, 04 Mar 2023 06:26:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33702-2</guid>
        <source url="https://0x00sec.org/t/self-deleting-executables/33702.rss">Self Deleting Executables</source>
      </item>
      <item>
        <title>Self Deleting Executables</title>
        <dc:creator><![CDATA[0xf00]]></dc:creator>
        <description><![CDATA[
            <p>In this post, I’ll provide an example of self-deleting programs, as well as the different ways it can be used, and finally a detailed explanation.  The first example is for Windows (OS), which create a temporary file and use it to delete the original executable, The second example is  Linux based simply uses built in functions to initiate the self-deletion process.</p>
<h2>
<a name="example-01-1" class="anchor" href="https://0x00sec.org#example-01-1"></a>Example 01</h2>
<p>This program can help make sure that any executables that are created are removed from the system once their job is complete.</p>
<pre><code class="lang-auto">int 
CommitSuicide(char *szCmdLine)

{
HANDLE hTemp;
char szPath[MAX_PATH];
char szTemp[MAX_PATH];

static BYTE buf[1024];
STARTUPINFO si;
PROCESS_INFORMATION pi;
UINT ret;

//open a temporary file
GetTempPath(MAX_PATH, szTemp);
lstrcat(szTemp, "suicide.exe");

GetModuleFileName(0, szPath, MAX_PATH);
CopyFile(szPath, szTemp, FALSE);


hTemp = CreateFile(szTemp, GENERIC_READ, FILE_SHARE_READ|FILE_SHARE_DELETE, 0,

OPEN_EXISTING, FILE_FLAG_DELETE_ON_CLOSE, 0);


//Create a process using the temporary executable. This will cause

//the file's handle count to increase, so we can close it.

ZeroMemory(&amp;si, sizeof(STARTUPINFO));
ZeroMemory(&amp;pi, sizeof(PROCESS_INFORMATION));  

ZeroMemory(&amp;si, sizeof(STARTUPINFO));

si.cb = sizeof(STARTUPINFO);


lstrcat(szTemp, " ");
lstrcat(szTemp, szCmdLine);

ret = CreateProcess(0, szTemp, 0, 0, FALSE, NORMAL_PRIORITY_CLASS, 0, 0, &amp;si, &amp;pi);

//Close our handle to the new process. Because the process is

//memory-mapped, there will still be a handle held by the O/S, so

//it won't get deleted. Give the other process a chance to run..

Sleep(100);

CloseHandle(hTemp);
  
return 0;

}
</code></pre>
<ul>
<li>When it’s time to delete ourselves we first spawns a new process using that file, and then deletes the temporary file. Calling <code>szCmdLine</code> as its input parameter which creates a temporary file in the system’s tmp directory and copies the current executable file to that tmp file finally creates a new process using the temporary file, waits for  <code>Sleep();</code> and then closes the handle to the tmp file</li>
</ul>
<pre><code class="lang-auto">int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrev, PSTR szCmdLine, int iCmdShow)

{

char szPath[MAX_PATH];

//

// Parse the command line

// Normally, we should not be run with any paramters

// We re-spawn ourselves with the current module's path

//

if(szCmdLine[0] == '\0')

{

// Spawn a duplicate process, and tell it to delete US

HMODULE hModule = GetModuleHandle(0);

GetModuleFileName(hModule, szPath, MAX_PATH);

CommitSuicide(szPath);

// Exit normally
return 0;

}

// This is where we pick up execution second time we run,

// When a filename has been specified on the command line

else

{

// Give the calling process time to exit...

Sleep(200);

// Delete the file specified on command line.

DeleteFile(szCmdLine);

// Exit normally. When we close, this executable will be automatically

return 0;

	}
}
</code></pre>
<ul>
<li>Next, we check if any command line parameters have been passed we <code>Sleep();</code> and then deletes the file specified by the command line parameter if none we re-spawn the path of the current executable file as a command line parameter.</li>
</ul>
<h2>
<a name="example-02-2" class="anchor" href="https://0x00sec.org#example-02-2"></a>Example 02</h2>
<p>This actually a simple one this function deletes the current executable by obtaining its path <code>readlink</code> and calling the <code>unlink</code> .</p>
<pre><code class="lang-auto">void 
CommitSuicide() {
    char path[256];
    int status;

    // Get the path of the current program
    status = readlink("/proc/self/exe", path, sizeof(path) - 1);
    if (status == -1) {
        exit(EXIT_FAILURE);
    }
    path[status] = '\0';

    // Copy the executable to a temporary file
    char tmp_path[] = "/tmp/XXXXXX";
    int fd = mkstemp(tmp_path);
    if (fd == -1) {
        exit(EXIT_FAILURE);
    }
    if (write(fd, path, status) != status) {
        exit(EXIT_FAILURE);
    }
    close(fd);

    // Launch the temporary executable as a new process
    if (fork() == 0) {
        execl(tmp_path, "", NULL);
    }

    // Delete the original executable
    unlink(path);

    // Exit the current process
    exit(EXIT_SUCCESS);
}

int main() {
    CommitSuicide();
    return 0;
}
</code></pre>
<p>The general idea is to create a temporary copy of the executable file, launch it as a new process, and then delete the original executable before the new process terminates, This can be used as an anti-analysis technique since the executable file will no longer be available after <code>CommitSuicide</code> function gets called.</p>
<p>That’s all for now. I hope you learned something from this. Please feel free to share any techniques or thought</p>
<h2>
<a name="references-3" class="anchor" href="https://0x00sec.org#references-3"></a>References</h2>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://www.catch22.net/tuts/win32/self-deleting-executables">
  <header class="source">

      <a href="https://www.catch22.net/tuts/win32/self-deleting-executables" target="_blank" rel="noopener nofollow ugc" title="12:00AM - 01 October 2001">Catch22 – 1 Oct 01</a>
  </header>

  <article class="onebox-body">
    

<h3><a href="https://www.catch22.net/tuts/win32/self-deleting-executables" target="_blank" rel="noopener nofollow ugc">Self-deleting Executables</a></h3>

  <p>This is a subject that tends to come up every so often in the newsgroups, so I thought I’d write an article about the techniques I’ve collected to enable an executable to delete itself from disk (whilst running, that is). There is very little...</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/self-deleting-executables/33702/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/self-deleting-executables/33702/1</link>
        <pubDate>Fri, 03 Mar 2023 00:29:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33702-1</guid>
        <source url="https://0x00sec.org/t/self-deleting-executables/33702.rss">Self Deleting Executables</source>
      </item>
  </channel>
</rss>
