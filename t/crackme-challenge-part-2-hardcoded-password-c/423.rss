<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>CrackMe Challenge [Part 2] - Hardcoded Password (C#)</title>
    <link>https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423</link>
    <description>Hey Mates,
in this post I&#39;m going to tell you about RE C# programs(This is my favourite language for reversing :D). I prepared a very simple password program in C# which we&#39;ll use to cover the fundamental concepts of C# reversing. This program is not obfuscated, so that it is again an easy to crack program for beginners, but in the next parts I&#39;ll probably always give an obfuscated and a normal program, so you can chose what you want to use :slight_smile:.
What is obfuscation do you ask?  For now I only say that they make it a bit harder (But not that hard) for use to reverse the programs, but I&#39;ll explain it more detailed in the next part.

## Description of the todays RE Challenge
This challenge is a bit harder than the little python challenge we had before, but as soon as you installed the required tools it will be easier to crack the password &quot;mechanism&quot; (I think this time it can&#39;t really be called a mechanism...) than in the python challenge.
The program can be just started without arguments.Then It will ask you for a password and says if it&#39;s right or not. Very simple code, very simple cracking ;).

You can get the compiled program here: https://mega.nz#!XlYSQAJA!hI2bdYtPXxE3GdxDOQTwO39lrnukCkLMg6fA49RcQkk
If you are scared of any malware embedded, don&#39;t run the program and read my explanation of reversing C# applications. This time you can look on yourself if it&#39;s infected or not ;P. I don&#39;t upload the source, because the process of reversing would be useless then...

## How to RE C# Applications
Today I won&#39;t give my way of accomplishing the task, but a full tutorial on how to use decompilers for RE C# apps. If you know how to use them properly this won&#39;t be new for you and you can just wait for the next parts, because this one won&#39;t be of any interest for you :slight_smile:.

C# doesn&#39;t compile into machine code, but in MSIL (MicroSoft Intermediate Language), so we can&#39;t disassemble it properly. Maybe some of you think that&#39;s bad, but here comes the great thing of MIL: We can just decompile the application to get **normal sourcecode** (If it&#39;s not obfuscated ;))! I am not that experinced at RE that I can provide you a good explanation how this works, so I recommend you to just google it if you&#39;re interested in the technique. For now it is only important that it works (And it&#39;s scary how similar the decompiled source is...).

## How do we use decompilers?
In this series I&#39;ll only cover JetBrains dotPeek, which is the one I like the most. First download and install it from here: https://www.jetbrains.com/decompiler/. The install manager maybe confuses someone, but see it as the first challenge of decompiling C# applications to install the required tools. I won&#39;t cover it here, because RE is already an advanced topic which I try to make as simple as possible here, but it should be possible for you to install it on your own :stuck_out_tongue_winking_eye:.
After you have installed it just start it and have a look at the interface. Although I think it&#39;s easy to understand, I&#39;ll cover here some fundamentals.
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/a937b04281e843272f7b366174621e7d86b2cfc9.PNG&quot; width=&quot;668&quot; height=&quot;499&quot;&gt;
To select the file you want to reverse just use File-&gt;Open. Now you should see a new item on the left list which can be explored via the file manager.
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/9449c58d2b6199cb3e9eb97007a404f9fbd160e2.PNG&quot; width=&quot;665&quot; height=&quot;499&quot;&gt;
Find the source with opening the manager like I did on the left side of dotPeek. After a double-click on the Main function you should see the source code of the program. Note: I am always scared of how precise this works. Not only the mechanisms are reconstructed, but also the names of the variables and functions... In this case the decompiled source matches **exactly** the real source code! This will change when obfuscators come into play, but I&#39;ll cover that next time ;).
Also for people who don&#39;t know C# it should be no problem to find the password now ;P.

## Conclusion
Reversing C# seems to be an easy challenge for us. Now we know how to use decompilers to get a real source, which is a great advantage over looking at the ASM code! In the next part I&#39;ll show you how to RE, although the program is obfuscated. After that last part of introduction we&#39;ll come to the real challenges where you can show how good you are at RE.

|-TheDoctor-|</description>
    
    <lastBuildDate>Thu, 19 Sep 2019 18:10:28 +0000</lastBuildDate>
    <category>Challenges</category>
    <atom:link href="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>CrackMe Challenge [Part 2] - Hardcoded Password (C#)</title>
        <dc:creator><![CDATA[pavan]]></dc:creator>
        <description><![CDATA[
            <p>it was quite easy, thanks for the blog!!</p>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/12</link>
        <pubDate>Thu, 19 Sep 2019 18:10:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-423-12</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423.rss">CrackMe Challenge [Part 2] - Hardcoded Password (C#)</source>
      </item>
      <item>
        <title>CrackMe Challenge [Part 2] - Hardcoded Password (C#)</title>
        <dc:creator><![CDATA[m0rph]]></dc:creator>
        <description><![CDATA[
            <p>Sorry for necroposting, just thought I would add how I did it.</p>
<div class="spoiler"><a href="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/11">spoiler</a></div>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/11</link>
        <pubDate>Tue, 18 Jul 2017 07:25:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-423-11</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423.rss">CrackMe Challenge [Part 2] - Hardcoded Password (C#)</source>
      </item>
      <item>
        <title>CrackMe Challenge [Part 2] - Hardcoded Password (C#)</title>
        <dc:creator><![CDATA[UserXGnu]]></dc:creator>
        <description><![CDATA[
            <p>For Linux users that would like to solve this challenge, MonoDevelop has an AsmBrowser tool that decompiles C# applications… =-D</p>
<p>Nice writeup dude! =-D</p>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/10</link>
        <pubDate>Fri, 17 Feb 2017 17:32:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-423-10</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423.rss">CrackMe Challenge [Part 2] - Hardcoded Password (C#)</source>
      </item>
      <item>
        <title>CrackMe Challenge [Part 2] - Hardcoded Password (C#)</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>;)… You are right. Good catch</p>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/9</link>
        <pubDate>Wed, 20 Jul 2016 17:17:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-423-9</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423.rss">CrackMe Challenge [Part 2] - Hardcoded Password (C#)</source>
      </item>
      <item>
        <title>CrackMe Challenge [Part 2] - Hardcoded Password (C#)</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="0x00pf" data-post="2" data-topic="423">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/0x00pf/40/199_2.png" class="avatar"> 0x00pf:</div>
<blockquote>
<p>For a case like this, were the password has not been obfuscated at all, you can just try:</p>
<p>string -e l file.exe</p>
</blockquote>
</aside>
<p>I think that you refered to the command <strong>strings</strong> right ? ^^</p>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/8</link>
        <pubDate>Wed, 20 Jul 2016 17:08:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-423-8</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423.rss">CrackMe Challenge [Part 2] - Hardcoded Password (C#)</source>
      </item>
      <item>
        <title>CrackMe Challenge [Part 2] - Hardcoded Password (C#)</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Great job! Just like <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> seems I got to the party late!</p>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/7</link>
        <pubDate>Wed, 20 Jul 2016 17:00:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-423-7</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423.rss">CrackMe Challenge [Part 2] - Hardcoded Password (C#)</source>
      </item>
      <item>
        <title>CrackMe Challenge [Part 2] - Hardcoded Password (C#)</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>I missed this when it first came out! Awesome guide. I didn’t know decompiling C# was that simple <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/6</link>
        <pubDate>Wed, 20 Jul 2016 12:22:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-423-6</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423.rss">CrackMe Challenge [Part 2] - Hardcoded Password (C#)</source>
      </item>
      <item>
        <title>CrackMe Challenge [Part 2] - Hardcoded Password (C#)</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>I hope this will work after obfuscation. Would be very nice if this works on Linux too…<br>
And thank you for the response, mabe it helps others <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">.</p>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/5</link>
        <pubDate>Sun, 22 May 2016 18:48:08 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-423-5</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423.rss">CrackMe Challenge [Part 2] - Hardcoded Password (C#)</source>
      </item>
      <item>
        <title>CrackMe Challenge [Part 2] - Hardcoded Password (C#)</title>
        <dc:creator><![CDATA[JaCube]]></dc:creator>
        <description><![CDATA[
            <p>On linux I used MonoDevelop for decompile. In monodevelop it’s named ‘Assembly Browser’ and works very similar to dotPeak (at least the same part like in post)</p>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/4</link>
        <pubDate>Sun, 22 May 2016 18:44:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-423-4</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423.rss">CrackMe Challenge [Part 2] - Hardcoded Password (C#)</source>
      </item>
      <item>
        <title>CrackMe Challenge [Part 2] - Hardcoded Password (C#)</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Thank you!</p>
<p>I wanted to cover this and other more extensive cracking ways when we come to C++ (Ok, it sounds a bit weird to say more extensive when speaking about 1 command, but I hope you know what I mean ;)).</p>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/3</link>
        <pubDate>Fri, 20 May 2016 17:40:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-423-3</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423.rss">CrackMe Challenge [Part 2] - Hardcoded Password (C#)</source>
      </item>
      <item>
        <title>CrackMe Challenge [Part 2] - Hardcoded Password (C#)</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Nice post!</p>
<p>Just to let you know. The program works great on GNU/Linux using mono. For a case like this, were the password has not been obfuscated at all, you can just try:</p>
<p><code>string -e l file.exe </code></p>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/2</link>
        <pubDate>Fri, 20 May 2016 15:09:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-423-2</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423.rss">CrackMe Challenge [Part 2] - Hardcoded Password (C#)</source>
      </item>
      <item>
        <title>CrackMe Challenge [Part 2] - Hardcoded Password (C#)</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Hey Mates,<br>
in this post I’m going to tell you about RE C# programs(This is my favourite language for reversing :D). I prepared a very simple password program in C# which we’ll use to cover the fundamental concepts of C# reversing. This program is not obfuscated, so that it is again an easy to crack program for beginners, but in the next parts I’ll probably always give an obfuscated and a normal program, so you can chose what you want to use <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">.<br>
What is obfuscation do you ask?  For now I only say that they make it a bit harder (But not that hard) for use to reverse the programs, but I’ll explain it more detailed in the next part.</p>
<h2>Description of the todays RE Challenge</h2>
<p>This challenge is a bit harder than the little python challenge we had before, but as soon as you installed the required tools it will be easier to crack the password “mechanism” (I think this time it can’t really be called a mechanism…) than in the python challenge.<br>
The program can be just started without arguments.Then It will ask you for a password and says if it’s right or not. Very simple code, very simple cracking ;).</p>
<p>You can get the compiled program here: <a href="https://mega.nz#!XlYSQAJA!hI2bdYtPXxE3GdxDOQTwO39lrnukCkLMg6fA49RcQkk" rel="noopener nofollow ugc">https://mega.nz#!XlYSQAJA!hI2bdYtPXxE3GdxDOQTwO39lrnukCkLMg6fA49RcQkk</a><br>
If you are scared of any malware embedded, don’t run the program and read my explanation of reversing C# applications. This time you can look on yourself if it’s infected or not ;P. I don’t upload the source, because the process of reversing would be useless then…</p>
<h2>How to RE C# Applications</h2>
<p>Today I won’t give my way of accomplishing the task, but a full tutorial on how to use decompilers for RE C# apps. If you know how to use them properly this won’t be new for you and you can just wait for the next parts, because this one won’t be of any interest for you <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">.</p>
<p>C# doesn’t compile into machine code, but in MSIL (MicroSoft Intermediate Language), so we can’t disassemble it properly. Maybe some of you think that’s bad, but here comes the great thing of MIL: We can just decompile the application to get <strong>normal sourcecode</strong> (If it’s not obfuscated ;))! I am not that experinced at RE that I can provide you a good explanation how this works, so I recommend you to just google it if you’re interested in the technique. For now it is only important that it works (And it’s scary how similar the decompiled source is…).</p>
<h2>How do we use decompilers?</h2>
<p>In this series I’ll only cover JetBrains dotPeek, which is the one I like the most. First download and install it from here: <a href="https://www.jetbrains.com/decompiler/" rel="noopener nofollow ugc">https://www.jetbrains.com/decompiler/</a>. The install manager maybe confuses someone, but see it as the first challenge of decompiling C# applications to install the required tools. I won’t cover it here, because RE is already an advanced topic which I try to make as simple as possible here, but it should be possible for you to install it on your own <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue_winking_eye.png?v=9" title=":stuck_out_tongue_winking_eye:" class="emoji" alt=":stuck_out_tongue_winking_eye:">.<br>
After you have installed it just start it and have a look at the interface. Although I think it’s easy to understand, I’ll cover here some fundamentals.<br>
<img src="//0x00sec.s3.amazonaws.com/original/1X/a937b04281e843272f7b366174621e7d86b2cfc9.PNG" width="668" height="499"><br>
To select the file you want to reverse just use File-&gt;Open. Now you should see a new item on the left list which can be explored via the file manager.<br>
<img src="//0x00sec.s3.amazonaws.com/original/1X/9449c58d2b6199cb3e9eb97007a404f9fbd160e2.PNG" width="665" height="499"><br>
Find the source with opening the manager like I did on the left side of dotPeek. After a double-click on the Main function you should see the source code of the program. Note: I am always scared of how precise this works. Not only the mechanisms are reconstructed, but also the names of the variables and functions… In this case the decompiled source matches <strong>exactly</strong> the real source code! This will change when obfuscators come into play, but I’ll cover that next time ;).<br>
Also for people who don’t know C# it should be no problem to find the password now ;P.</p>
<h2>Conclusion</h2>
<p>Reversing C# seems to be an easy challenge for us. Now we know how to use decompilers to get a real source, which is a great advantage over looking at the ASM code! In the next part I’ll show you how to RE, although the program is obfuscated. After that last part of introduction we’ll come to the real challenges where you can show how good you are at RE.</p>
<p>|-TheDoctor-|</p>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423/1</link>
        <pubDate>Fri, 20 May 2016 14:20:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-423-1</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-2-hardcoded-password-c/423.rss">CrackMe Challenge [Part 2] - Hardcoded Password (C#)</source>
      </item>
  </channel>
</rss>
