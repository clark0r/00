<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>0x00sec CTF Writeup - Forward then Reverse</title>
    <link>https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071</link>
    <description>#0x00sec CTF Writeup - Forward then Reverse
----------

So yeah, I finally got time to write a writeup for @Deshi&#39;s CTF but I sadly only have stuff written down for the RE challenge (mainly because the other stuff I solved was pretty easy and didn&#39;t require more than a quick google search or simple stuff like ROT-n).
Considering me and @Towel were the only ones who solved it in time this might be interesting to some people so I decided to post it anyways.

##First look

So we have a ELF x86-64 binary called counter.
```bash
leeky@backbox:/media/sf_SharedSpace/current$ ./counter
usage: ./counter password
leeky@backbox:/media/sf_SharedSpace/current$ 
```
```bash
leeky@backbox:/media/sf_SharedSpace/current$ ./counter test
leeky@backbox:/media/sf_SharedSpace/current$ 
```
So it requires one parameter but doesn&#39;t return anything when the wrong password is entered.

After running &#39;strings counter&#39; we see that is contains a text for the correct password which means that we only get output when the amount of arguments is wrong or the right password is entered.

```plain
..
usage: %s password
Great! EKO{%s}
..
```

##Further Investigation

Ok. So the 1st argument is most likely in someway compared with the inputed string.
So how about we start this in gdb, break at the entry point and then set a memory read breakpoint at the entered password.
The entered password is argv[1] (as argv[0] = the name under which the binary was called) which means the address of it is at
rsp+16 when the program is started.

```plain
|----------------------------------|
| argc  |  argv[0] | argv[1] | ... |
|----------------------------------|
| $rsp  |  $rsp+8  | $rsp+16 | ... |
|----------------------------------|
* Source 1
```

```plain
leeky@backbox:/media/sf_SharedSpace/current$ gdb counter
Reading symbols from /media/sf_SharedSpace/current/counter...(no debugging symbols found)...done.
(gdb) info files
Symbols from &quot;/media/sf_SharedSpace/current/counter&quot;.
Local exec file:
	`/media/sf_SharedSpace/current/counter&#39;, file type elf64-x86-64.
	Entry point: 0x4003f0
	..
(gdb) b *0x4003f0
Breakpoint 1 at 0x4003f0
(gdb) run teststring
Starting program: /media/sf_SharedSpace/current/counter 
Breakpoint 1, 0x00000000004003f0 in ?? ()
(gdb) p/a *((long*)($rsp+16))
$1 = 0x7fffffffe3eb
(gdb) rwatch *0x7fffffffe3eb
Hardware read watchpoint 2: *0x7fffffffe3eb
```
So now we continue to run the program and see where we end:
(note that it might be necessary to skip a few hits because of internal processing which is uninteresting for getting the result)
```bash
(gdb) x/4i $rip-3
   0x43d2c3:	movsx  esi,BYTE PTR [rdx]
=&gt; 0x43d2c6:	cmp    esi,0x53
   0x43d2cc:	sete   dil
   0x43d2d0:	and    dil,0x1
(gdb) p/c $esi
$2 = 116 &#39;t&#39;
(gdb) p/c 0x53
$3 = 83 &#39;S&#39;
```
Ok we see the first character (&#39;t&#39;) of our dummy password (&quot;teststring&quot;) and we see it gets compared with &#39;S&#39; (After that the program stops).
Let&#39;s see what happens when our password starts with &#39;S&#39; (I entered &#39;run String&#39;):
```bash
(gdb) x/40i $rip-4
   0x43e0b6:	movsx  edi,BYTE PTR [rsi+0x1]
=&gt; 0x43e0ba:	mov    r8d,edi
   0x43e0bd:	xor    r8d,0xffffffff
   ..
   0x43e168:	movsx  edx,BYTE PTR [rsi]
   0x43e16b:	cmp    edx,0x1c
(gdb) p/c $edi
$4 = 116 &#39;t&#39;
```
So the second character is somehow changed through a seemingly complex process (which I cut out as it&#39;s not relevant) and then compared to a value.
The process for comparing all other characters looks similar but the complicated changing process is different for each character (oh noes).
Also some comparing calculations between refer to characters already checked.
```plain
|------------------------------------------------|
| char[0] -&gt; char[1] -&gt; char[2] -&gt; char[1] -&gt; .. |
|------------------------------------------------|
* not the actually verification sequence
```

##How I solved it

Well now I knew enough to solve this:

* Setting memory read break point at password
* Continue till a relevant memory access is reported
* Read the address of the character currently checked
* Try every character till the next compare instruction says they are equal (brute force)
* Repeat this for all compares till the program ends and then print out the string

To do that I wrote a script which runs from inside gdb (please be merciful it&#39;s 90% the original script I used with the comments I made while writing it):
```python
def tillNextCMP(): #skip till next compare
	while True:
		str = gdb.execute(&quot;x/i $rip&quot;,False,True)
		opcode = str.split(&quot;:&quot;)[1].strip().split(&quot; &quot;)[0].strip()
		if opcode.startswith(&quot;cmp&quot;) == True:
			return
		gdb.execute(&quot;ni&quot;)
		
def getV1(): #get 1st parameter of the given compare statement
	v1 = (gdb.execute(&quot;x/i $rip&quot;,False,True).split(&quot;:&quot;)[1].strip().split(&quot; &quot;)[4].strip().split(&quot;,&quot;)[0].strip())
	return v1
def getV2(): #get 2nd parameter of the given compare statement
	v2 = (gdb.execute(&quot;x/i $rip&quot;,False,True).split(&quot;:&quot;)[1].strip().split(&quot; &quot;)[4].strip().split(&quot;,&quot;)[1].strip())
	return v2
#Program starts here
gdb.execute(&quot;set pagination off&quot;) #gdb would ask for pressing enter if this isn&#39;t deactivated
gdb.execute(&quot;set confirm off&quot;) #this stops gdb from asking for permission
gdb.execute(&quot;d&quot;) #delete old breakpoints

brutePass = list(&quot;^&quot;*128) #the array containing the password

import string
bruteForce = string.ascii_letters+string.digits+&quot;{}().,-_+!&amp;*#=?%/\\&lt;&gt;&quot; #this is the list of brute force character
for charNum in range(0,1024):
	found = False
	for charCon in bruteForce:
		if found == True: #stop checking other characters if solution was found
			break
		gdb.execute(&quot;d&quot;) #clean up old breakpoints
		gdb.execute(&quot;b *0x004003f0&quot;) #entry of program
		gdb.execute(&quot;run &#39;%s&#39;&quot; % &#39;&#39;.join(brutePass))  #run with brutepass as parameter
		tmp = long(gdb.parse_and_eval(&quot;((long*)($rsp+16))&quot;)) #get address of the second argument as rwatch requires this for setting a memory breakpoint
		stringPos = long(gdb.parse_and_eval(&quot;*((long*)($rsp+16))&quot;)) #get address of string (2nd argument)
		gdb.execute(&quot;rwatch *%d&quot; % (tmp)) #sets a read memory watch to the string
		gdb.execute(&quot;continue&quot;) #continue the program

		for i in range(charNum): #skips the already solved parts
			gdb.execute(&quot;continue&quot;)	
			
		save = (gdb.execute(&quot;x/i $rip&quot;,False,True).split(&quot;:&quot;)[1].strip().split(&quot; &quot;)[4].strip().replace(&quot;[&quot;,&quot;&quot;).replace(&quot;]&quot;,&quot;&quot;).replace(&quot;r&quot;,&quot;$r&quot;).strip()) #gets the string of the location of the character to read
		reg = &quot;$&quot;+(gdb.execute(&quot;x/i $rip&quot;,False,True).split(&quot;:&quot;)[1].strip().split(&quot; &quot;)[2].split(&quot;,&quot;)[0].strip()) #get the register stuff it getting written to
		gdb.execute(&quot;ni&quot;) #process mov instruction
		tmp = int(long(gdb.parse_and_eval(save))-stringPos) #offset of character - string offset =&gt; index of character being processed
		gdb.execute(&quot;set %s = &#39;%s&#39;&quot; % (reg, charCon)) #sets the character to the testing character
		tillNextCMP() #skips till the next compare instruction
		cValue = (int(gdb.parse_and_eval(&quot;$&quot;+getV1()))&amp;0xFFFFFFFF) #gets the value of the register containing data
		wValue = (int(getV2().split(&quot;x&quot;)[1], 16)) #get the fixed value this is getting compared with
		if cValue == wValue: #if values identical =&gt; character correct
			brutePass[tmp] = charCon #sets character in string
			password = open(&quot;memory.txt&quot;, &quot;w&quot;)
			password.write(&#39;&#39;.join(brutePass).replace(&quot;^&quot;, &quot;&quot;)) #saves password to memory.txt
			password.close()
			found = True	#don&#39;t process more characters
		gdb.execute(&quot;continue&quot;)	

gdb.execute(&quot;set confirm on&quot;) #Restores GDB
gdb.execute(&quot;set pagination on&quot;)
gdb.execute(&quot;d&quot;) 
```
Run by starting &#39;gdb counter&#39; and then using the command &#39;source script.py&#39;.
Now lots of stuff happens on screen, let this run until nothing new appears on screen. (this might take a few minutes)
The script should have created a file named &#39;memory.txt&#39; which contains the flag.
[spoiler]
Resulting password, enter this and you get the flag
```plain
St4t1c_4n4lyS1s_randomstring1234
=&gt; &#39;Great! EKO{St4t1c_4n4lyS1s_randomstring1234}&#39;
```
[/spoiler]

##Conclusion

Well anyways that&#39;s how I solved it. Maybe this helped someone.
Thanks to @Deshi for organizing such a fun event! :D

##Link to Binary
https://transfer.sh/nlZJl/counter

##Sources:
* https://stackoverflow.com/questions/16721164/assembler-get-program-parameters</description>
    
    <lastBuildDate>Mon, 31 Jul 2017 13:53:04 +0000</lastBuildDate>
    <category>CTF</category>
    <atom:link href="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>0x00sec CTF Writeup - Forward then Reverse</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/10</link>
        <pubDate>Sun, 21 Jan 2018 00:42:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3071-10</guid>
        <source url="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071.rss">0x00sec CTF Writeup - Forward then Reverse</source>
      </item>
      <item>
        <title>0x00sec CTF Writeup - Forward then Reverse</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>Great writeup, <a class="mention" href="https://0x00sec.org/u/leeky">@Leeky</a>! I haven’t seen any examples of scripting inside GDB before, let along with python. This makes debugging and reversing so much more sane now</p>
          <p><a href="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/9</link>
        <pubDate>Mon, 31 Jul 2017 13:53:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3071-9</guid>
        <source url="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071.rss">0x00sec CTF Writeup - Forward then Reverse</source>
      </item>
      <item>
        <title>0x00sec CTF Writeup - Forward then Reverse</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <p>nice write-up <a class="mention" href="https://0x00sec.org/u/leeky">@Leeky</a> <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> !<br>
Logical way to solve it after your made observations, which made it easy to follow.</p>
<p>Also nice additions from you <a class="mention" href="https://0x00sec.org/u/mkhdznfq">@mkhdznfq</a> I didn’t know about that and will definitely try that on my own!</p>
          <p><a href="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/8</link>
        <pubDate>Sun, 30 Jul 2017 16:38:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3071-8</guid>
        <source url="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071.rss">0x00sec CTF Writeup - Forward then Reverse</source>
      </item>
      <item>
        <title>0x00sec CTF Writeup - Forward then Reverse</title>
        <dc:creator><![CDATA[mkhdznfq]]></dc:creator>
        <description><![CDATA[
            <p>glad that i can help <img src="https://0x00sec.org/images/emoji/twitter/grinning.png?v=9" title=":grinning:" class="emoji" alt=":grinning:"></p>
          <p><a href="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/7</link>
        <pubDate>Sat, 29 Jul 2017 16:45:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3071-7</guid>
        <source url="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071.rss">0x00sec CTF Writeup - Forward then Reverse</source>
      </item>
      <item>
        <title>0x00sec CTF Writeup - Forward then Reverse</title>
        <dc:creator><![CDATA[Leeky]]></dc:creator>
        <description><![CDATA[
            <p>Wow this is much simpler than my approach. I knew that there were tools for this but I had no clue how they are called so my approach for this was stepping through with gdb and counting (although I didn’t think about using it here).<br>
Thank you very much for posting this!</p>
          <p><a href="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/6</link>
        <pubDate>Sat, 29 Jul 2017 16:19:27 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3071-6</guid>
        <source url="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071.rss">0x00sec CTF Writeup - Forward then Reverse</source>
      </item>
      <item>
        <title>0x00sec CTF Writeup - Forward then Reverse</title>
        <dc:creator><![CDATA[mkhdznfq]]></dc:creator>
        <description><![CDATA[
            <p>as an alternative to the method above, we also can bruteforce the password by counting the instructions executed which can be done using <a href="https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool" rel="noopener nofollow ugc">intel’s pin tool</a> or <a href="https://perf.wiki.kernel.org/index.php/Tutorial" rel="noopener nofollow ugc">Linux’s performance analysis tool (perf)</a>. this method exploit the fact that the program exits when incorrect character is guessed and executes more instructions after each correct guess. so the idea is to iterate through all printable characters and store the character which executes most instructions. then, repeat for the next letter in the password.</p>
<p>as i don’t have pin tool installed, here’s a poc using perf</p>
<pre><code class="lang-python">import string
import sys
from subprocess import Popen, PIPE, STDOUT

argv1 = ""

while True:
    max_ins = (0, 0)
    for c in string.printable:
        cmd = ["perf", "stat", "-x", ",", "-e", "instructions:u", "./counter", argv1 + c]
        out, _ = Popen(cmd, stdout=PIPE, stderr=STDOUT).communicate()
        if "Great!" in out:
            Popen(["./counter", argv1 + c])
            sys.exit()
        ins_count = int(out.split(',')[0])
        if ins_count &gt; max_ins[0]:
            max_ins = (ins_count, c)
    argv1 = argv1 + max_ins[1]
</code></pre>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/f/fa272e8c34817c5ae29600d9db14d20e8e1f8821.png" width="642" height="378"></p>
          <p><a href="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/5</link>
        <pubDate>Sat, 29 Jul 2017 15:50:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3071-5</guid>
        <source url="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071.rss">0x00sec CTF Writeup - Forward then Reverse</source>
      </item>
      <item>
        <title>0x00sec CTF Writeup - Forward then Reverse</title>
        <dc:creator><![CDATA[Leeky]]></dc:creator>
        <description><![CDATA[
            <p>sure! <a href="https://transfer.sh/nlZJl/counter" rel="nofollow noopener">Here</a></p>
          <p><a href="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/4</link>
        <pubDate>Fri, 28 Jul 2017 20:53:27 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3071-4</guid>
        <source url="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071.rss">0x00sec CTF Writeup - Forward then Reverse</source>
      </item>
      <item>
        <title>0x00sec CTF Writeup - Forward then Reverse</title>
        <dc:creator><![CDATA[mkhdznfq]]></dc:creator>
        <description><![CDATA[
            <p>great writeup <img src="https://0x00sec.org/images/emoji/twitter/thumbsup.png?v=9" title=":thumbsup:" class="emoji" alt=":thumbsup:"> any chance you can upload the binary?</p>
          <p><a href="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/3</link>
        <pubDate>Fri, 28 Jul 2017 09:35:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3071-3</guid>
        <source url="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071.rss">0x00sec CTF Writeup - Forward then Reverse</source>
      </item>
      <item>
        <title>0x00sec CTF Writeup - Forward then Reverse</title>
        <dc:creator><![CDATA[hkh4cks]]></dc:creator>
        <description><![CDATA[
            <p>Learned so many things from this writeup. Thanks <a class="mention" href="https://0x00sec.org/u/leeky">@Leeky</a><br>
I’m still very new to RE, but I understood almost everything from this writeup <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:"></p>
          <p><a href="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/2</link>
        <pubDate>Fri, 28 Jul 2017 05:00:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3071-2</guid>
        <source url="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071.rss">0x00sec CTF Writeup - Forward then Reverse</source>
      </item>
      <item>
        <title>0x00sec CTF Writeup - Forward then Reverse</title>
        <dc:creator><![CDATA[Leeky]]></dc:creator>
        <description><![CDATA[
            <h2>
<a class="hashtag" href="https://0x00sec.org/tag/0x00sec">#<span>0x00sec</span></a> CTF Writeup - Forward then Reverse</h2>
<p>So yeah, I finally got time to write a writeup for <a class="mention" href="https://0x00sec.org/u/deshi">@Deshi</a>’s CTF but I sadly only have stuff written down for the RE challenge (mainly because the other stuff I solved was pretty easy and didn’t require more than a quick google search or simple stuff like ROT-n).<br>
Considering me and <a class="mention" href="https://0x00sec.org/u/towel">@Towel</a> were the only ones who solved it in time this might be interesting to some people so I decided to post it anyways.</p>
<p>#<span class="hashtag">#First</span> look</p>
<p>So we have a ELF x86-64 binary called counter.</p>
<pre><code class="lang-bash">leeky@backbox:/media/sf_SharedSpace/current$ ./counter
usage: ./counter password
leeky@backbox:/media/sf_SharedSpace/current$ 
</code></pre>
<pre><code class="lang-bash">leeky@backbox:/media/sf_SharedSpace/current$ ./counter test
leeky@backbox:/media/sf_SharedSpace/current$ 
</code></pre>
<p>So it requires one parameter but doesn’t return anything when the wrong password is entered.</p>
<p>After running ‘strings counter’ we see that is contains a text for the correct password which means that we only get output when the amount of arguments is wrong or the right password is entered.</p>
<pre><code class="lang-nohighlight">..
usage: %s password
Great! EKO{%s}
..
</code></pre>
<p>#<span class="hashtag">#Further</span> Investigation</p>
<p>Ok. So the 1st argument is most likely in someway compared with the inputed string.<br>
So how about we start this in gdb, break at the entry point and then set a memory read breakpoint at the entered password.<br>
The entered password is argv[1] (as argv[0] = the name under which the binary was called) which means the address of it is at<br>
rsp+16 when the program is started.</p>
<pre><code class="lang-nohighlight">|----------------------------------|
| argc  |  argv[0] | argv[1] | ... |
|----------------------------------|
| $rsp  |  $rsp+8  | $rsp+16 | ... |
|----------------------------------|
* Source 1
</code></pre>
<pre><code class="lang-nohighlight">leeky@backbox:/media/sf_SharedSpace/current$ gdb counter
Reading symbols from /media/sf_SharedSpace/current/counter...(no debugging symbols found)...done.
(gdb) info files
Symbols from "/media/sf_SharedSpace/current/counter".
Local exec file:
	`/media/sf_SharedSpace/current/counter', file type elf64-x86-64.
	Entry point: 0x4003f0
	..
(gdb) b *0x4003f0
Breakpoint 1 at 0x4003f0
(gdb) run teststring
Starting program: /media/sf_SharedSpace/current/counter 
Breakpoint 1, 0x00000000004003f0 in ?? ()
(gdb) p/a *((long*)($rsp+16))
$1 = 0x7fffffffe3eb
(gdb) rwatch *0x7fffffffe3eb
Hardware read watchpoint 2: *0x7fffffffe3eb
</code></pre>
<p>So now we continue to run the program and see where we end:<br>
(note that it might be necessary to skip a few hits because of internal processing which is uninteresting for getting the result)</p>
<pre><code class="lang-bash">(gdb) x/4i $rip-3
   0x43d2c3:	movsx  esi,BYTE PTR [rdx]
=&gt; 0x43d2c6:	cmp    esi,0x53
   0x43d2cc:	sete   dil
   0x43d2d0:	and    dil,0x1
(gdb) p/c $esi
$2 = 116 't'
(gdb) p/c 0x53
$3 = 83 'S'
</code></pre>
<p>Ok we see the first character (‘t’) of our dummy password (“teststring”) and we see it gets compared with ‘S’ (After that the program stops).<br>
Let’s see what happens when our password starts with ‘S’ (I entered ‘run String’):</p>
<pre><code class="lang-bash">(gdb) x/40i $rip-4
   0x43e0b6:	movsx  edi,BYTE PTR [rsi+0x1]
=&gt; 0x43e0ba:	mov    r8d,edi
   0x43e0bd:	xor    r8d,0xffffffff
   ..
   0x43e168:	movsx  edx,BYTE PTR [rsi]
   0x43e16b:	cmp    edx,0x1c
(gdb) p/c $edi
$4 = 116 't'
</code></pre>
<p>So the second character is somehow changed through a seemingly complex process (which I cut out as it’s not relevant) and then compared to a value.<br>
The process for comparing all other characters looks similar but the complicated changing process is different for each character (oh noes).<br>
Also some comparing calculations between refer to characters already checked.</p>
<pre><code class="lang-nohighlight">|------------------------------------------------|
| char[0] -&gt; char[1] -&gt; char[2] -&gt; char[1] -&gt; .. |
|------------------------------------------------|
* not the actually verification sequence
</code></pre>
<p>#<span class="hashtag">#How</span> I solved it</p>
<p>Well now I knew enough to solve this:</p>
<ul>
<li>Setting memory read break point at password</li>
<li>Continue till a relevant memory access is reported</li>
<li>Read the address of the character currently checked</li>
<li>Try every character till the next compare instruction says they are equal (brute force)</li>
<li>Repeat this for all compares till the program ends and then print out the string</li>
</ul>
<p>To do that I wrote a script which runs from inside gdb (please be merciful it’s 90% the original script I used with the comments I made while writing it):</p>
<pre><code class="lang-python">def tillNextCMP(): #skip till next compare
	while True:
		str = gdb.execute("x/i $rip",False,True)
		opcode = str.split(":")[1].strip().split(" ")[0].strip()
		if opcode.startswith("cmp") == True:
			return
		gdb.execute("ni")
		
def getV1(): #get 1st parameter of the given compare statement
	v1 = (gdb.execute("x/i $rip",False,True).split(":")[1].strip().split(" ")[4].strip().split(",")[0].strip())
	return v1
def getV2(): #get 2nd parameter of the given compare statement
	v2 = (gdb.execute("x/i $rip",False,True).split(":")[1].strip().split(" ")[4].strip().split(",")[1].strip())
	return v2
#Program starts here
gdb.execute("set pagination off") #gdb would ask for pressing enter if this isn't deactivated
gdb.execute("set confirm off") #this stops gdb from asking for permission
gdb.execute("d") #delete old breakpoints

brutePass = list("^"*128) #the array containing the password

import string
bruteForce = string.ascii_letters+string.digits+"{}().,-_+!&amp;*#=?%/\\&lt;&gt;" #this is the list of brute force character
for charNum in range(0,1024):
	found = False
	for charCon in bruteForce:
		if found == True: #stop checking other characters if solution was found
			break
		gdb.execute("d") #clean up old breakpoints
		gdb.execute("b *0x004003f0") #entry of program
		gdb.execute("run '%s'" % ''.join(brutePass))  #run with brutepass as parameter
		tmp = long(gdb.parse_and_eval("((long*)($rsp+16))")) #get address of the second argument as rwatch requires this for setting a memory breakpoint
		stringPos = long(gdb.parse_and_eval("*((long*)($rsp+16))")) #get address of string (2nd argument)
		gdb.execute("rwatch *%d" % (tmp)) #sets a read memory watch to the string
		gdb.execute("continue") #continue the program

		for i in range(charNum): #skips the already solved parts
			gdb.execute("continue")	
			
		save = (gdb.execute("x/i $rip",False,True).split(":")[1].strip().split(" ")[4].strip().replace("[","").replace("]","").replace("r","$r").strip()) #gets the string of the location of the character to read
		reg = "$"+(gdb.execute("x/i $rip",False,True).split(":")[1].strip().split(" ")[2].split(",")[0].strip()) #get the register stuff it getting written to
		gdb.execute("ni") #process mov instruction
		tmp = int(long(gdb.parse_and_eval(save))-stringPos) #offset of character - string offset =&gt; index of character being processed
		gdb.execute("set %s = '%s'" % (reg, charCon)) #sets the character to the testing character
		tillNextCMP() #skips till the next compare instruction
		cValue = (int(gdb.parse_and_eval("$"+getV1()))&amp;0xFFFFFFFF) #gets the value of the register containing data
		wValue = (int(getV2().split("x")[1], 16)) #get the fixed value this is getting compared with
		if cValue == wValue: #if values identical =&gt; character correct
			brutePass[tmp] = charCon #sets character in string
			password = open("memory.txt", "w")
			password.write(''.join(brutePass).replace("^", "")) #saves password to memory.txt
			password.close()
			found = True	#don't process more characters
		gdb.execute("continue")	

gdb.execute("set confirm on") #Restores GDB
gdb.execute("set pagination on")
gdb.execute("d") 
</code></pre>
<p>Run by starting ‘gdb counter’ and then using the command ‘source script.py’.<br>
Now lots of stuff happens on screen, let this run until nothing new appears on screen. (this might take a few minutes)<br>
The script should have created a file named ‘memory.txt’ which contains the flag.</p>
<div class="spoiler"><a href="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/1">spoiler</a></div>
<p>#<span class="hashtag">#Conclusion</span></p>
<p>Well anyways that’s how I solved it. Maybe this helped someone.<br>
Thanks to <a class="mention" href="https://0x00sec.org/u/deshi">@Deshi</a> for organizing such a fun event! <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p>#<span class="hashtag">#Link</span> to Binary<br>
<a href="https://transfer.sh/nlZJl/counter" class="onebox" target="_blank" rel="nofollow noopener">https://transfer.sh/nlZJl/counter</a></p>
<p>#<span class="hashtag">#Sources:</span></p>
<ul>
<li><a href="https://stackoverflow.com/questions/16721164/assembler-get-program-parameters" rel="nofollow noopener">https://stackoverflow.com/questions/16721164/assembler-get-program-parameters</a></li>
</ul>
          <p><a href="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071/1</link>
        <pubDate>Fri, 28 Jul 2017 03:26:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3071-1</guid>
        <source url="https://0x00sec.org/t/0x00sec-ctf-writeup-forward-then-reverse/3071.rss">0x00sec CTF Writeup - Forward then Reverse</source>
      </item>
  </channel>
</rss>
