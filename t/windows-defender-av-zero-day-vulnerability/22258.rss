<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Windows Defender AV Zero Day Vulnerability</title>
    <link>https://0x00sec.org/t/windows-defender-av-zero-day-vulnerability/22258</link>
    <description>**Windows Defender Elevation Of Privileges Vulnerability**

Well first of all why?

Cause Microsoft stopped their shitty bug bounty program for windows eop bugs so I don’t have any interest to report them to the vendor

In the last decade I was looking for windows defender bugs but I was just spending time I thought MS just made the perfect av, until I saw [this](https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2020-1170)

However, this is the description From Microsoft:

![image|601x190](upload://2QWQgN7cg8V2iI7N4YtdRIBB2h7.png)
The guy who’s acknowledged is usually disclosing his bugs so I was waiting for him this time to see if I can bypass the security patch. 
and then he posted his [article](https://itm4n.github.io/cve-2020-1170-windows-defender-eop/)  so when I read his write up it seemed bypassable to me (if you’re reading this it4mn THANK YOU !).
Let’s get into the bug, on a default configuration there’s a file in `c:\windows\temp\mpcmdrun.log` this file is used for event logging that happen in `mpcmdrun.log` process, which runs in the context of the local system (highest privileges that exist on windows), as `it4mn` said when the log file should reach   **16,777,216 bytes (16MB)** in order to trigger the bug let’s thing on process monitor, you can download it [here](https://download.sysinternals.com/files/ProcessMonitor.zip) 

Okay Let’s try to reproduce the bug
![image|602x314](upload://1M8TFJlAM9vuhBRffucZBxGWojC.png) 
Let’s see what happens on procmon
![image|601x260](upload://suVv9Ano6TJHNxeYIQNW8mUbwvo.png) 
As you can see the patch seems to be working as it supposed to be, you can see the `MpCmdRun.exe` handling the junction with `GENERIC_ALL` access and then he execute the control code `FSCTL_GET_REPARSE_POINT` and `FSCTL_DELETE_REPARSE_POINT` both result in success, the get reparse point control is simply check if the directory is a reparse point but the control code delete reparse point will attempt to convert the junction `mpcmdrun.log.bak` to a directory then it proceeds to delete it. Seems to be patched correctly! but there’s still something wrong with the patch, what if we created a junction inside the mpcmdrun.log.bak ? ex: mpcmdrun.log.bak\test, let’s check it out

![image|601x362](upload://pWo9k8KhqT2kp6GQMevroBqAwUp.jpeg) 
It worked we now have an arbitrary file deletion issue in windows defender.

Okay let’s do some more damage, let’s go for a system shell

**NOTE: this method will work on windows 10 only**

Let’s see what privileges are given to `MpCmdRun.exe` we can inspect them in process explorer
![image|601x338](upload://3U90KIywm4wfScM9JRSBacVdngv.jpeg) 
It seems look like `mpcmdrun` is child process from `MsMpEng.exe` which is actually the AV
Let’s check the AV:
![image|601x342](upload://wiOSRiEx5t7UvVT7cE2VrCrjLFz.png) 
It ran in the context of `NT AUTHORITY\SYSTEM` but what about other privileges in the token ?
![image|346x500](upload://rSWqjb2Br9JqLTb57I7QFeMW5Ae.png) 
The `SeRestorePrivilege` seems to be enabled this happen because of the inherit token of `MsMpEng.exe`
This seems to be destructive, this privilege will allow its owner to delete any file even if it isn’t allowed to do so the ACL.
![image|601x219](upload://lf0QK0qkhOPHanBlUUPOgxQztcp.png) 
In this case we will have the ability to hijack a service which we will target the Windows Media Player Network Service which is by default located on `C:\Program Files\Windows Media Player\wmpnetwk.exe`, this file is protected by `NT SERVICE\TRUSTEDINSTALLER` this mitigation protected such folders from being deleted from a privileged process (such as `administrators` or `SYSTEM`) and then here’s the roll of having the `SeRestorePrivilege` Enabled this will allow us to bypass this mitigation so we can clean the entire directory `C:\Program Files\Windows Media Player`, However the Windows Media Player Network Service is on demand service start in windows 10 and it’s ACL allow INTERACTIVE group to start it we can inspect such services detail in process hacker
![image|448x471](upload://fKHlIm6DgJb37oM6hPHHXYNqOaH.png) 
![image|446x468](upload://gCoSXsQTESmJGoVlJBwBljpyTp2.png) 
Those are some good info so if we have the ability to recreate `C:\Program Files\Windows Media Player` directory we can hijack the service with a malicious one, luckily and a big thanks to jonasLyk for providing a technique to allow arbitrary directory creation from an arbitrary file deletion you can see the article [here](https://secret.club/2020/04/23/directory-deletion-shell.html)

The technique is simple if we deleted the entire `C:\ProgramData\Microsoft\Windows\WER` directory, the windows error reporting tool will recreate it for us and then  create `C:\ProgramData\Microsoft\Windows\WER\Temp` allowing authenticated Users to have write&amp;delete access on both WER and Temp directories
![image|601x202](upload://pnVmFo4izoV2oIpRpoV6gxK5bWZ.png) 
which will allow user to abuse the Temp folder creation by creating a reparse point from `C:\ProgramData\Microsoft\Windows\WER` to `\RPC CONTROL\` and then creating a symlink from `\RPC CONTROL\Temp` -&gt; `C:\Program Files\Windows Media Player` so as soon we rerun the scheduled task `\Microsoft\Windows\Windows Error Reporting\QueueReporting` the `C:\Program Files\Windows Media Player` folder will be created with new rights allowing authenticated user to write on it so we can write a payload and then start the service the only problem we will have is the gained privileges
![image|448x471](upload://fKHlIm6DgJb37oM6hPHHXYNqOaH.png) 

As you can see here we aren’t running as `NT AUTHORITY\SYSTEM` instead the service is ran as `NT AUTHORITY\Network Service` this service account doesn’t have full control over the system which is an issue we can easily address, Thanks again to it4mn for his awesome blog about elevating from network service to system you can find it [here](https://itm4n.github.io/printspoofer-abusing-impersonate-privileges)
You can find the PoC [here](https://github.com/klinix5/WinDefend_ZeroDay) it&#39;s a chained one so it&#39;s supposed to spawn a system shell when it succeed

**NOTES**
- exploiting the issue will take up to 35min according to clement we need to fill `mpcmdrun.log` with 16.5mb data in order to trigger the issue.
- the Poc will work only on windows 10 and I didn’t tested on windows server.
and lastly Shootout To @jeff</description>
    
    <lastBuildDate>Tue, 03 Nov 2020 10:27:09 +0000</lastBuildDate>
    <category>Exploit Development</category>
    <atom:link href="https://0x00sec.org/t/windows-defender-av-zero-day-vulnerability/22258.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Windows Defender AV Zero Day Vulnerability</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/windows-defender-av-zero-day-vulnerability/22258/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-defender-av-zero-day-vulnerability/22258/5</link>
        <pubDate>Sat, 14 Nov 2020 08:09:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-22258-5</guid>
        <source url="https://0x00sec.org/t/windows-defender-av-zero-day-vulnerability/22258.rss">Windows Defender AV Zero Day Vulnerability</source>
      </item>
      <item>
        <title>Windows Defender AV Zero Day Vulnerability</title>
        <dc:creator><![CDATA[HACKER]]></dc:creator>
        <description><![CDATA[
            <p>Good job, thank you for writeup.</p>
          <p><a href="https://0x00sec.org/t/windows-defender-av-zero-day-vulnerability/22258/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-defender-av-zero-day-vulnerability/22258/3</link>
        <pubDate>Wed, 28 Oct 2020 15:11:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-22258-3</guid>
        <source url="https://0x00sec.org/t/windows-defender-av-zero-day-vulnerability/22258.rss">Windows Defender AV Zero Day Vulnerability</source>
      </item>
      <item>
        <title>Windows Defender AV Zero Day Vulnerability</title>
        <dc:creator><![CDATA[hunter]]></dc:creator>
        <description><![CDATA[
            <p>Good job! Very nice article.</p>
          <p><a href="https://0x00sec.org/t/windows-defender-av-zero-day-vulnerability/22258/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-defender-av-zero-day-vulnerability/22258/2</link>
        <pubDate>Sun, 06 Sep 2020 18:35:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-22258-2</guid>
        <source url="https://0x00sec.org/t/windows-defender-av-zero-day-vulnerability/22258.rss">Windows Defender AV Zero Day Vulnerability</source>
      </item>
      <item>
        <title>Windows Defender AV Zero Day Vulnerability</title>
        <dc:creator><![CDATA[bruh11]]></dc:creator>
        <description><![CDATA[
            <p><strong>Windows Defender Elevation Of Privileges Vulnerability</strong></p>
<p>Well first of all why?</p>
<p>Cause Microsoft stopped their shitty bug bounty program for windows eop bugs so I don’t have any interest to report them to the vendor</p>
<p>In the last decade I was looking for windows defender bugs but I was just spending time I thought MS just made the perfect av, until I saw <a href="https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2020-1170" rel="noopener nofollow ugc">this</a></p>
<p>However, this is the description From Microsoft:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/14009a93a9f8fe62bef735a5c3756238e617d895.png" alt="image" data-base62-sha1="2QWQgN7cg8V2iI7N4YtdRIBB2h7" width="601" height="190"><br>
The guy who’s acknowledged is usually disclosing his bugs so I was waiting for him this time to see if I can bypass the security patch.<br>
and then he posted his <a href="https://itm4n.github.io/cve-2020-1170-windows-defender-eop/" rel="noopener nofollow ugc">article</a>  so when I read his write up it seemed bypassable to me (if you’re reading this it4mn THANK YOU !).<br>
Let’s get into the bug, on a default configuration there’s a file in <code>c:\windows\temp\mpcmdrun.log</code> this file is used for event logging that happen in <code>mpcmdrun.log</code> process, which runs in the context of the local system (highest privileges that exist on windows), as <code>it4mn</code> said when the log file should reach   <strong>16,777,216 bytes (16MB)</strong> in order to trigger the bug let’s thing on process monitor, you can download it <a href="https://download.sysinternals.com/files/ProcessMonitor.zip" rel="noopener nofollow ugc">here</a></p>
<p>Okay Let’s try to reproduce the bug<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0c735d6ea757736c8f863b8d3d0372e7247a4a90.png" alt="image" data-base62-sha1="1M8TFJlAM9vuhBRffucZBxGWojC" width="602" height="314"><br>
Let’s see what happens on procmon<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c7bbdbe20518d7d437ea5a7abde92ac40444bf82.png" alt="image" data-base62-sha1="suVv9Ano6TJHNxeYIQNW8mUbwvo" width="601" height="260"><br>
As you can see the patch seems to be working as it supposed to be, you can see the <code>MpCmdRun.exe</code> handling the junction with <code>GENERIC_ALL</code> access and then he execute the control code <code>FSCTL_GET_REPARSE_POINT</code> and <code>FSCTL_DELETE_REPARSE_POINT</code> both result in success, the get reparse point control is simply check if the directory is a reparse point but the control code delete reparse point will attempt to convert the junction <code>mpcmdrun.log.bak</code> to a directory then it proceeds to delete it. Seems to be patched correctly! but there’s still something wrong with the patch, what if we created a junction inside the mpcmdrun.log.bak ? ex: mpcmdrun.log.bak\test, let’s check it out</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b5d00aca4f3f283035debc853cb6a684395bf589.jpeg" alt="image" data-base62-sha1="pWo9k8KhqT2kp6GQMevroBqAwUp" width="601" height="362"><br>
It worked we now have an arbitrary file deletion issue in windows defender.</p>
<p>Okay let’s do some more damage, let’s go for a system shell</p>
<p><strong>NOTE: this method will work on windows 10 only</strong></p>
<p>Let’s see what privileges are given to <code>MpCmdRun.exe</code> we can inspect them in process explorer<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/1/1b5f45c4725366527302d6365fb0587b37668603.jpeg" alt="image" data-base62-sha1="3U90KIywm4wfScM9JRSBacVdngv" width="601" height="338"><br>
It seems look like <code>mpcmdrun</code> is child process from <code>MsMpEng.exe</code> which is actually the AV<br>
Let’s check the AV:<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e26634e01e1b51aafb22d357474cbc2a49e90565.png" alt="image" data-base62-sha1="wiOSRiEx5t7UvVT7cE2VrCrjLFz" width="601" height="342"><br>
It ran in the context of <code>NT AUTHORITY\SYSTEM</code> but what about other privileges in the token ?<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/c/c370a2594619aa24f275d2eec7ca3ac7b8de0c8a.png" data-download-href="/uploads/short-url/rSWqjb2Br9JqLTb57I7QFeMW5Ae.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c370a2594619aa24f275d2eec7ca3ac7b8de0c8a.png" alt="image" data-base62-sha1="rSWqjb2Br9JqLTb57I7QFeMW5Ae" width="346" height="500" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c370a2594619aa24f275d2eec7ca3ac7b8de0c8a_2_10x10.png"></a></div><br>
The <code>SeRestorePrivilege</code> seems to be enabled this happen because of the inherit token of <code>MsMpEng.exe</code><br>
This seems to be destructive, this privilege will allow its owner to delete any file even if it isn’t allowed to do so the ACL.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/9/94e01fef4acfa53e834407c894dde3fc0bc7277d.png" alt="image" data-base62-sha1="lf0QK0qkhOPHanBlUUPOgxQztcp" width="601" height="219"><br>
In this case we will have the ability to hijack a service which we will target the Windows Media Player Network Service which is by default located on <code>C:\Program Files\Windows Media Player\wmpnetwk.exe</code>, this file is protected by <code>NT SERVICE\TRUSTEDINSTALLER</code> this mitigation protected such folders from being deleted from a privileged process (such as <code>administrators</code> or <code>SYSTEM</code>) and then here’s the roll of having the <code>SeRestorePrivilege</code> Enabled this will allow us to bypass this mitigation so we can clean the entire directory <code>C:\Program Files\Windows Media Player</code>, However the Windows Media Player Network Service is on demand service start in windows 10 and it’s ACL allow INTERACTIVE group to start it we can inspect such services detail in process hacker<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6e6801236bca76a66922fd6e486f99012a7eb45f.png" alt="image" data-base62-sha1="fKHlIm6DgJb37oM6hPHHXYNqOaH" width="448" height="471"><br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/7/747a0dde74a1c21e1e261e919bd8ee4d71a2fccc.png" alt="image" data-base62-sha1="gCoSXsQTESmJGoVlJBwBljpyTp2" width="446" height="468"><br>
Those are some good info so if we have the ability to recreate <code>C:\Program Files\Windows Media Player</code> directory we can hijack the service with a malicious one, luckily and a big thanks to jonasLyk for providing a technique to allow arbitrary directory creation from an arbitrary file deletion you can see the article <a href="https://secret.club/2020/04/23/directory-deletion-shell.html" rel="noopener nofollow ugc">here</a><p></p>
<p>The technique is simple if we deleted the entire <code>C:\ProgramData\Microsoft\Windows\WER</code> directory, the windows error reporting tool will recreate it for us and then  create <code>C:\ProgramData\Microsoft\Windows\WER\Temp</code> allowing authenticated Users to have write&amp;delete access on both WER and Temp directories<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b1eab480c73fbbb0d2dfbdc0b868f668a5ab7b0d.png" alt="image" data-base62-sha1="pnVmFo4izoV2oIpRpoV6gxK5bWZ" width="601" height="202"><br>
which will allow user to abuse the Temp folder creation by creating a reparse point from <code>C:\ProgramData\Microsoft\Windows\WER</code> to <code>\RPC CONTROL\</code> and then creating a symlink from <code>\RPC CONTROL\Temp</code> -&gt; <code>C:\Program Files\Windows Media Player</code> so as soon we rerun the scheduled task <code>\Microsoft\Windows\Windows Error Reporting\QueueReporting</code> the <code>C:\Program Files\Windows Media Player</code> folder will be created with new rights allowing authenticated user to write on it so we can write a payload and then start the service the only problem we will have is the gained privileges<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6e6801236bca76a66922fd6e486f99012a7eb45f.png" alt="image" data-base62-sha1="fKHlIm6DgJb37oM6hPHHXYNqOaH" width="448" height="471"></p>
<p>As you can see here we aren’t running as <code>NT AUTHORITY\SYSTEM</code> instead the service is ran as <code>NT AUTHORITY\Network Service</code> this service account doesn’t have full control over the system which is an issue we can easily address, Thanks again to it4mn for his awesome blog about elevating from network service to system you can find it <a href="https://itm4n.github.io/printspoofer-abusing-impersonate-privileges" rel="noopener nofollow ugc">here</a><br>
You can find the PoC <a href="https://github.com/klinix5/WinDefend_ZeroDay" rel="noopener nofollow ugc">here</a> it’s a chained one so it’s supposed to spawn a system shell when it succeed</p>
<p><strong>NOTES</strong></p>
<ul>
<li>exploiting the issue will take up to 35min according to clement we need to fill <code>mpcmdrun.log</code> with 16.5mb data in order to trigger the issue.</li>
<li>the Poc will work only on windows 10 and I didn’t tested on windows server.<br>
and lastly Shootout To <a class="mention" href="https://0x00sec.org/u/jeff">@jeff</a>
</li>
</ul>
          <p><a href="https://0x00sec.org/t/windows-defender-av-zero-day-vulnerability/22258/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/windows-defender-av-zero-day-vulnerability/22258/1</link>
        <pubDate>Wed, 15 Jul 2020 15:55:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-22258-1</guid>
        <source url="https://0x00sec.org/t/windows-defender-av-zero-day-vulnerability/22258.rss">Windows Defender AV Zero Day Vulnerability</source>
      </item>
  </channel>
</rss>
