<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Reverse engineering - cheat sheet</title>
    <link>https://0x00sec.org/t/reverse-engineering-cheat-sheet/29167</link>
    <description>In this article, I’ll post some Assembly to understand this article, you must know what asm is  :slight_smile:  here a cheat sheet if you got stuck.
```asm
MOV : copy

XCHG: Exchange

PUSH: Push onto stack

POP : Pop from stack

ADD : Add

SUB : Subtract

DIV : Divide

IDIV: Signed integer divide

MUL: Multiply

IMUL: Signed integer multiply

INC :  Increment

DEC : Decrement

SAL : Shift left

SAR : Shift right

ROL : Rotate left

ROR : Rotate right

NOT : Invert each bit

AND : Logical and

OR :   Logical or

XOR : Logical exclusive or

SHL : Shift logical left

SHR : Shift logical right

NOP : Not operation

INT : Interrupt

CALL: Call subroutine

JMP : Jump

JE :   Jump if equal

JZ :  Jump if zero

JCXZ:  Jump if not CX zero

JNE :  Jump if not equal

JNZ :  Jump if not zero

JECXZ:  Jump if ecx zero

RET :  Returne from subroutine

JA :  Jump if above

JAE :  Jump if above or equal

JB :   Jump if below

JBE : Jump if below or equal

JNA : Jump if not above

JNAE: Jump if not above or equal

JNB : Jump if not Below

JNBE: Jump if not below or equal

JC :      Jump if carry

JNC :  Jump if not carry

JG :    Jump if greater

JGE : Jump if greater or equal

JL :    Jump if less

JLE : Jump if less or equal

JNG : Jump if not greater

JNGE: Jump if not greater or equal

JNL :   Jump if not less

JNLE: Jump if not less or equal

JO :    Jump if overflow

JNO : Jump if not overflow

JS :    Jump if sgine

JNS : Jump if not sign

```

### Reference

[x86 Assembly Guide](https://www.cs.virginia.edu/~evans/cs216/guides/x86.html)

[The Art of Assembly Language](https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AoATOC.html)</description>
    
    <lastBuildDate>Thu, 28 Apr 2022 20:33:56 +0000</lastBuildDate>
    <category>Reverse Engineering</category>
    <atom:link href="https://0x00sec.org/t/reverse-engineering-cheat-sheet/29167.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Reverse engineering - cheat sheet</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-cheat-sheet/29167/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-cheat-sheet/29167/2</link>
        <pubDate>Sat, 27 Aug 2022 21:39:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-29167-2</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-cheat-sheet/29167.rss">Reverse engineering - cheat sheet</source>
      </item>
      <item>
        <title>Reverse engineering - cheat sheet</title>
        <dc:creator><![CDATA[0xf00]]></dc:creator>
        <description><![CDATA[
            <p>In this article, I’ll post some Assembly to understand this article, you must know what asm is  <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:">  here a cheat sheet if you got stuck.</p>
<pre><code class="lang-auto">MOV : copy

XCHG: Exchange

PUSH: Push onto stack

POP : Pop from stack

ADD : Add

SUB : Subtract

DIV : Divide

IDIV: Signed integer divide

MUL: Multiply

IMUL: Signed integer multiply

INC :  Increment

DEC : Decrement

SAL : Shift left

SAR : Shift right

ROL : Rotate left

ROR : Rotate right

NOT : Invert each bit

AND : Logical and

OR :   Logical or

XOR : Logical exclusive or

SHL : Shift logical left

SHR : Shift logical right

NOP : Not operation

INT : Interrupt

CALL: Call subroutine

JMP : Jump

JE :   Jump if equal

JZ :  Jump if zero

JCXZ:  Jump if not CX zero

JNE :  Jump if not equal

JNZ :  Jump if not zero

JECXZ:  Jump if ecx zero

RET :  Returne from subroutine

JA :  Jump if above

JAE :  Jump if above or equal

JB :   Jump if below

JBE : Jump if below or equal

JNA : Jump if not above

JNAE: Jump if not above or equal

JNB : Jump if not Below

JNBE: Jump if not below or equal

JC :      Jump if carry

JNC :  Jump if not carry

JG :    Jump if greater

JGE : Jump if greater or equal

JL :    Jump if less

JLE : Jump if less or equal

JNG : Jump if not greater

JNGE: Jump if not greater or equal

JNL :   Jump if not less

JNLE: Jump if not less or equal

JO :    Jump if overflow

JNO : Jump if not overflow

JS :    Jump if sgine

JNS : Jump if not sign

</code></pre>
<h3>
<a name="reference-1" class="anchor" href="https://0x00sec.org#reference-1"></a>Reference</h3>
<p><a href="https://www.cs.virginia.edu/~evans/cs216/guides/x86.html" rel="noopener nofollow ugc">x86 Assembly Guide</a></p>
<p><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AoATOC.html" rel="noopener nofollow ugc">The Art of Assembly Language</a></p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-cheat-sheet/29167/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-cheat-sheet/29167/1</link>
        <pubDate>Thu, 28 Apr 2022 05:38:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-29167-1</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-cheat-sheet/29167.rss">Reverse engineering - cheat sheet</source>
      </item>
  </channel>
</rss>
