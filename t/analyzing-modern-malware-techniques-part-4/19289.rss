<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Analyzing Modern Malware Techniques - Part 4</title>
    <link>https://0x00sec.org/t/analyzing-modern-malware-techniques-part-4/19289</link>
    <description>## Analyzing Modern Malware Techniques - Part 4

### I’m afraid of no packer(Part 1 of 2)

![|168x144](upload://znRyJaLJucGf973ikjJ0ifkMhtX.png)

---

### Preface:

If you’re going to analyze malware you are going to run into packers, code injections, obfuscated code and what not. If one doesn’t possess the correct knowledge or the correct tools to deal with such problems he will not get far with his analysis. In fact, when I first started practicing malware analysis somewhere back in 2015 I stopped because I couldn&#39;t understand how to unpack packed code and I quit trying, So I tried again around 2017.. and I quit again. This in time(in 2019) I didn’t quit but only because I had the proper tools to deal with the problem. Packed code is usually a dynamic problem and by that I mean that most of the time when you’ll encounter a packed malware it’s not going to be the same packed code but if you’ll have the tools to deal with the problem I guess you could defeat any packer. Still I’m to remain humble and admit that I still don’t have enough experience to deal with all types of packed code but I’m hoping that today, my dear reader, together we can bring more experience into our reverse engineering arsenal to learn together how to defeat packed code. I would like to put my efforts in this post to find anti analysis techniques that bypass my Scylla-Hide plugin and to learn how to de obfuscate binaries to ease analysis. Let’s begin!

---

**Required knowledge:**

* Basic understanding in code injections
* Basic understanding in dealing with anti analysis
* A solid grasp of C and WINAPI
* A solid grasp of x86 Assembly
* Experience with IDAPRO
* Experience with x64dbg

**Required Tools:**

* IDA Pro
* x64dbg
* Resource Hacker
* PEBear
* Process Explorer
* Process Monitor
* VMWare

**Sample used:**

[3d2777b748e805c0463c0c6d0fef8280ad197bea1dd0a25e30ed71199989a6b9](https://www.hybrid-analysis.com/sample/3d2777b748e805c0463c0c6d0fef8280ad197bea1dd0a25e30ed71199989a6b9?environmentId=100)

**Goal setting:**

1. Find and bypass anti analysis techniques.
2. Unpack main payload so we could analyze and run it.
3. Extract basic host based IOC and network based IOC.

&gt; **Some side notes**:
&gt; I highly encourage you to download the sample and follow my execution paths. As I begin to dive into shellcode analysis here it will be highly difficult to follow me in the post itself as I would begin to traverse offsets and I would not be making a picture of every location I access.

---

## Basic Analysis:

I was encouraged by a few users in 0x00sec.org to check out this sample, It was stated that this sample was packed by [SmokeLoader](https://malpedia.caad.fkie.fraunhofer.de/details/win.smokeloader) and it performs some pretty cool anti-analysis tricks, so off I went.

## Basic Static Analysis:

**Anti Analysis APIs:**

![|602x196](upload://gXpcY0DLK12rzxbMQWUJIcoWdg4.png)

![|602x123](upload://nQ2JTtK3gLNnekyPCzrgggX9BsH.png)

![|602x63](upload://rqJzpjqujsQkalq68cHvXAPrY3a.png)

**Dynamic API Resolving:**

![|602x193](upload://zTv6AMxewzVLYxhJFC5ewvO4Xo.png)

**Uncommon section in PE file:**

![|602x64](upload://eGO4GMsRZQrCvjK1pMRHdFMF0TF.png)

And that’s it. That is very undetailed for hybrid-analysis. No connections being made, No files dropped, no code injection detection&#39;s no nothing.

Let’s look at the sample on disk.

So I start off by viewing the Imports and the list seems pretty full and we have some strings which are well..:

![|602x271](upload://f2nimEija5AnkbtqBS7u7xWieav.png)

Not very informative, the rest of the strings look like auto-generated by the compiler so it’s not much use to us.

![|602x496](upload://zVhI4kA1ZGB2CIrIugC2tdhDigv.png)

TLS calls are never a good thing, TLS is [Thread Local Storage](https://en.wikipedia.org/wiki/Thread-local_storage), it’s code that is usually stored in a different section and runs before the entry point or it might be allocated and created using TLS API calls, but there is no TLS section in this binary. Just a strangely named section called **.mysec** which doesn’t contain any code:

![|602x97](upload://yBONJ9oMUDpOTgE8I4jb2x2wfxu.png)

but it contains a lot of storage, infact I viewed its full size and its 4095 bytes long. we’ll keep that in mind.

In addition, there is a strange artifact in the samples resource section:

![|602x255](upload://y8vb9lfGL3ZfN12yHHclhvbHxiR.png)

It looks to long(35769 bytes long) to be a valid resource unless its a video format, we’ll keep this in mind as well.

**Basic Dynamic Analysis:**

So let’s run this on our Dynamic Analysis machine, I’ll set process monitor to watch the application and we’ll take a look at it in process explorer.

![|602x237](upload://mAE4Vj2OWUlJyWDzPuDNUw53pRD.png)

![|602x277](upload://3wMe7gqwDz1wrrHv2MOKYX6Dgtr.gif)

![|602x331](upload://zvnmIFRb3oTAta72GtxttqHlG8C.png)

That’s not true actually, I’m not surprised at all. but we do have something interesting here - it appears that the sample spawned a new sub process:

![|602x27](upload://aVXiKs6XzNpvr7HjjK7Xsngby4r.png)

which is a legitimate Windows Application, that might come in handy! so let’s move on to the advanced analysis!

---

## Advanced Analysis - Finding Obfuscation and Anti Analysis Tricks:

Our goal here is to find obfuscation techniques and anti analysis techniques, I’m going to find ways to circumvent them, instead of skipping these like I usually do we’ll park at each technique we find and see how we can deal with it.

Before we continue, I want to mention that [SmokeLoader ](https://malpedia.caad.fkie.fraunhofer.de/details/win.smokeloader)is simply a loader aiding the main payload in covert launching. According to Hybrid Analysis that was linked before and [Maltiverse](https://maltiverse.com/sample/3d2777b748e805c0463c0c6d0fef8280ad197bea1dd0a25e30ed71199989a6b9), the final payload is ransomware(GandCrab according to Maltiverse).

Let’s start by looking at **WinMain** in IDA:

looking at **loc_4011C5** we can see a lot of local variables being initialized:

![|261x554](upload://3r2S9NTLJxRHn5B5e2pGCMibCJe.png)

and since I’ve already analyzed this malware a bit - I’m going to assume these are [encrypted stack strings](https://www.fireeye.com/blog/threat-research/2016/06/automatically-extracting-obfuscated-strings.html) but we’ll see if this is true later on. Next up we got mambo jumbo code that is built to look confusing but legitimate. But wait! oh boy what’s this at location **loc_4017F9**:

![|309x342](upload://u4N0cz8854XfHyh3Tu2V4GCtWes.png)

A call to a dynamically calculated value and what appears to be an attempt to set a value in the Process Environment Block? What is at **0x2c** being accessed from the **FS** register?

![|602x24](upload://98z1fUJgLbc1HAJH5Bs7ZeueAuJ.png)

Huh.. It’s attempting to access a value in the Thread Local Storage array(TLS), we’ll check that out too since we don&#39;t know exactly what value it’s attempting to access since **EDX** is dynamically calculated.

After this the code block calls **printf** and terminates, I’m not sure this invocation actually does something.

![|346x286](upload://2HPecSz8hA5LhQ8z2DtrjGdqEpn.png)

**So let’s summarize what we gathered so far:**

1. A shady looking resource
2. A lot of local variables being set up that look like encrypted stack strings
3. A call to a dynamically calculated pointer
4. Dynamic access to the TLS array

Let’s start x64dbg and put a breakpoint on the assumed stack strings, and **loc_4017F9**. In addition just for safety let’s place a breakpoint on **VirtualAlloc** and **CreateProcessW**.

We break on the assumed stack strings at location **0x4011DE**, now I’m going to access the dump pointed by these variables after I run the entire variable assignment block at **loc_4011C5**:

![|592x59](upload://nJHSmnwK32nkjlbk43x5WwrpWwI.png)

![|357x22](upload://mzTI7MhOxOYV8c7GcVOgjd4X3wN.png)

![|405x23](upload://m6YXqZkje8B4WBrKJf1X3dIjS0f.png)

This is data, but I’m not sure all of it is data, we’ll see how this plays out later.

Next we hit on **CreateProcessW** which attempts to create **splwow64.exe** which is the printer driver we saw the malware launching before with command like parameters:

C:\Windows\splwow64.exe 8192

But it seems to be created because of a call to the API **DeviceCapabilitiesA** which is not much of interest to us.

![|602x149](upload://fTFZQXa7G0rn04l3Flkl3OEuWe4.png)

---

## Trick number 0 - Embedding shellcode in the resource section

Next we hit **VirtualAlloc** and upon exit it seems to be moving the allocated returned memory to 0x4260AC! that’s the address of the value that is going to be called later:

![|253x25](upload://481MqdVFwbwZtrGa5zL7LLeAjWE.png)

Let’s set a hardware on access breakpoint on the returned from **VirtualAlloc** value:
![|602x323](upload://phG2RaFkdVQ6Kkld71g57zZB5o.png)

It gets accessed a few times and after 2 times of hitting run I land at **loc_4017F9**:
![|602x215](upload://bdoUPzL5KeKxDDbA3mgAiDEx8bs.png)

I decided to look on the dump of the allocated area returned from **VirtualAlloc** and it reminded me of something I&#39;ve seen before:
![|594x16](upload://qX4ItOMBt7YBReA3ulY11IoCz0J.png)

Wait, let’s check the resource section of this sample that we looked at before:
![|522x18](upload://hQlWCDgLezS6fy0DqjRwGjx6LTd.png)

They match! hmm:
![|244x93](upload://jOFU8xxdT6ZbHMxQjlU1rDYOzH2.png)

Before the call to that dynamic variable at **dword_4260B4** we see that another DWORD is being used located at **dword_4260B4**(passed to **EAX**). if we look at **dword_4260AC** in disassembler view it doesn’t look like valid code:
![|602x264](upload://hvDcfdy9A2wDEm0siZCRw2SQnMi.png) 

So this little invocation at **0x40180E** to **sub_401110** gives me a hutch that it might lead to a decryption of that entire resource.

**dword_4260B4** holds value of **0x8BB9** and if we view the resource length that was mapped into **dword_4260AC** we can clearly see they have the same size!

![|242x25](upload://vqOsqg4K9tRKFVO10Ft9wZexePA.png)

I decided to rename the variables and jump pass the call **sub_401110**(func_ResourceDecryptionRoutine) :

![|354x265](upload://14cURCFGg5tlH360qVLMUVBgh5w.png)

To see what will happen to the resource section that was mapped into memory I decided to place hardware breakpoints on **dword_4260AC** to check for memory access, after my hardware breakpoints got triggered the allocated resource view in disassembly turned into this:

![|602x196](upload://tX25oSBsujGXF2mongvlbT2nuzY.png)

Awesome!

So let’s enter the rabbit hole and see where it leads us, but before we do that - let’s dump this into memory to see what’s going exactly:

![|602x241](upload://1FACIK9dxLTGSR1DT76mgZrKAMZ.png)

IDA view of dumped shellcode:

![|602x316](upload://6YgKRf85phjkqHHW3XaK2o46i81.png)

I’ve analyzed the dump a bit, and found that the function called at offset **0x33** is where the main execution happens but unfortunately it looks like this:

![|125x422](upload://4rzDb5qLKaoX7GD5NfTWG6POcGl.png)

Let’s scroll around the IDB to see if we can find some interesting anomalies:

Our first encounter is at code block **loc_4C:**

![|285x425](upload://wRDp2FfIjw9Lwv6cbmvpxkHADUI.png)

---

## Trick number 1 - Stack Strings

This again looks like stack strings, and they all contain a call right after the push. If we’ll attempt to parse these strings manually and turn them into ASCII strings we can find something really interesting:

![|210x340](upload://wKH8MOlorpBLmjqb6ctXR04qsbQ.png)

First it appears to load **kernel32.dll** and **call [ebp-28h]**, Then we see a push to **VirtualAlloc** and a call to **[ebp-60h]**. Each time a new function string is pushed, **[ebp-60h]** is called. I have reason to suspect that **[ebp-28h]** is  the address of **LoadLibraryA** and **[ebp-60h]** is the address of **GetProcAddress**, we’ll map this assumption into IDA:

![|169x514](upload://3qvR4a4soMAaMfCFy3uwm2qy7NQ.png)

This mapping actually aids us to recover more artifacts from just looking at the the dumped memory statically:

![|174x323](upload://429Bm2H2KqbYP8lKwWoze0KPI9R.png)

Let’s debug this memory dump and see if we’re correct:

![|602x31](upload://8N3AM0lzUnlDgCYg13bjaOdJA3y.png)

![|560x25](upload://wZ3GJnmeKQXAjplJkaCoQnwvM0d.png)
![|602x31](upload://1r1oVHpWKVnzGp9XPQceko7Vbq6.png)
![|598x13](upload://kCGsIb3EYmSsGOEZnuYTw7EgO2I.png)
Our assumptions are indeed correct!

---

## Trick Number 2 - Handling Dynamic API calls in IDA:

![|267x158](upload://dFuz1sDOltv7qOJcSOCoeZc0vEh.png)

So we have this issue, The base address of **TerminateProcess** is going to placed in **[ebp-0ACH]** as we can see on the last line(I’m assuming you guys know that in the **stdcall** convention, the return value is returned in **EAX** and that you know what **GetProcAddress** does). We can&#39;t go and manually map each and one of these by clicking K on each local variable like some potato, we must edit the function so that IDA will know that any time the **EBP** register is being access using offsets its actually accessing local variables so let’s tell IDA it’s an **EBP** based function:

![|217x303](upload://sfUvLZgf74hWakvDPfCv5wT7ftY.png)

Let’s click edit function and mark the function as **EBP** based:

![|338x242](upload://SkXGW1Wh5KzZSLQ6jvEwsXOTj9.png)

Now we can rename all the local variables and see the changes get applied all across the IDB! So let’s fix the dynamic API resolving local variables and keep searching for anomalies. I didn’t find anything worthwhile so I decided to place a breakpoint on **VirtualAlloc** and see what happens and indeed we broke on offset **0x1B8**:

![|379x221](upload://ggFPOuNVy46KvFtSCUnoSqERIbe.png)

I’ve access the dump of the newly allocated memory which is passed into **var_10**.

Let’s set up a hardware breakpoint on the first DWORD of the allocated memory and see if it gets accessed:

![|589x14](upload://yPqWVgoZBtdJSh5GdE4Rgk6IPt5.png)

---

## Trick number 3 - Dumping PE files from memory:

It does, and with a promising **MZ** signature that might indicate that a new file is being mapped, now we have to be careful here because I only set a breakpoint on the first **DWORD** of **0x1EB0000** - if we execute another time we will lose control over the malware, When I did that by accident the malware began to start an infinite amount of threads to circumvent our analysis and crash the vm!

We are currently executing at offset **0x9B2** inside **sub_978** and if we look in IDA at how complicated this function is we’ll have to collect our jaw from the floor:

![|349x448](upload://rVJsf6O0f5tto07XaqguRrkFtVn.png)

Let’s assume the **MZ** signature is no coincidence and a PE file is being mapped into memory, maybe if we find where this loop end and break there, we might successfully map the file entirely and then we can dump it!

**sub_978** ends at **loc_BBA**:

![|181x354](upload://udxgniGSNLNsR0GFbLbhOhTJqT8.png)

so let&#39;s set up a breakpoint there and see what happens:
![|592x169](upload://rJRTJmWTBJqqJHIVZIYEmJc0A2F.png)

We were correct!

Before we continue execution let’s dump this PE using Scylla and see how IDA will parse it:

![|602x317](upload://wxgkiZ2hSUkJOdQdKlbbmswwVj8.png)

I have seen this before, but only in books. This anti disassembly at its finest. It attempts to trick IDA’s disassembler by creating these faulty jump instructions that will just into the middle of other parsed instructions - IDA doesn’t know how to deal with this so it will begin parsing instructions incorrectly. We will deal with this later as we are not done with the first binary.

---

## Trick number 4 - Self Loading, [[heavy waves of nostalgia intensifies]](https://danusminimus.github.io/Analyzing-Modern-Malware-Techniques-Part-1/)

Let’s go back to x64dbg, after we leave the mapping function we are supposed to land at offset **0x1E0**. Our next anomaly will be met at location **0x1F8** where a **VirtualProtect** call is being made:

![|602x12](upload://3x1BC0AxLoiCupEk7l5nQusF6dx.png)

![|294x55](upload://7j1mq2WbxcAApU29YtkqzQ4dku7.png)

On the base address of the main image? what?

![|602x11](upload://xRySAUDyFByadw8JI68VxumaB8Z.png)

If we execute the call, the **.text** section which is responsible for storing the code of the PE file has its memory protection changed. It can now be Read from, Executed and WRITTEN TO, that is not supposed to happen! let’s see what happens next:

![|269x483](upload://59OeL1Q0ZVij3sjRI9V9tvnKUhC.png)

We enter a **sub_BDD** and if we view the functions behavior in the debugger, we can see that [rep stosb](http://faydoc.tripod.com/cpu/stosb.htm) instruction will begin to copy the zeroes stored in **AL** to replace the value of addresses pointed by **EDI**. **EDI** is pointing to the code section of the main sample! It’s rewriting its own code section wow!

![|602x369](upload://18BEtWb3uDGYEMtOmLlBhdUCAv4.png)It’s gone!

I’m going to assume that the malware will copy the newly mapped PE into the code section of the current executing binary. let’s see if our assumption is correct.

When we exit the function **sub_BDD** we land at offset **0x220**:

![|602x163](upload://3HpP6kNi2f2Wt77sTx2ircyvpm4.png)

If we keep stepping over instructions we begin to see the string **“.text”**, which gives me a hutch that we’re are traversing through the PE Header format of the current executing binary and come to think of it, if we look at offset **0x22c** we see:

![|214x23](upload://afWpgndXgEnOGb3O0MfnIPJk9s7.png)

And I know that **3Ch** is the **e_lfanew** field in the PE File header format, hmm.. Lets trying to map this in IDA and see if this assumption makes any sense:
![|422x373](upload://x9FBWkfIRpgwNGOZRlS1A6akHZK.png)

It&#39;s actually traversing through the newly mapped PE file!

I mapped it and now will explain how this entire process is done:

    mov eax, [ebp+lpvoidVirtualMemory]
    mov [ebp+lpVoidNewMappedPE], eax
    mov eax, [ebp+lpVoidNewMappedPE]
    mov eax, [eax+_IMAGE_DOS_HEADER.e_lfanew] ; Get the value of e_lfanew
    mov ecx, [ebp+lpvoidVirtualMemory] ; Get Image base of the newly mapped PE
    lea eax, [ecx+eax+4] ; Access IMAGE_NT_HEADERS by adding e_lfawnew to the image base of the newly mapped PE
    mov [ebp+_IMAGE_NT_HEADERS], eax ; Save the address of _IMAGE_NT_HEADERS of the newly mapped PE

---

    mov eax, [ebp+_IMAGE_NT_HEADERS]
    movzx eax, [eax+IMAGE_FILE_HEADER.SizeOfOptionalHeader] ; Get the size of _IMAGE_OPTIONAL_HEADERS from the newly mapped PE
    mov ecx, [ebp+lpVoidNewMappedPE]
    mov ecx, [ecx+_IMAGE_DOS_HEADER.e_lfanew]
    lea eax, [ecx+eax+18h] ; Skip to the first section of the newly mapped PE
---
    push [eax+_IMAGE_SECTION_HEADER.PointerToRawData] ; Push the address of the first section of the new mapped PE
    push [ebp+lpVoidNewMappedPE] ; Push the Image base address of the newly mapped PE
    push [ebp+lpvoidBaseAddressOfCurrentPE] ; Push the base address of the current PE
    call sub_BF6

Now let’s make another assumption - after the call to **sub_BF6** at offset **0x21B** the code section of the current PE will be replaced with the code section of the new mapped PE.

And that is incorrect! Fortunately I put a hardware breakpoint on the the code section of the current PE before I continued execution and the copying actually occurred at offset **0x326** instead of **0x21B** BUT with a call to **sub_BF6** so I was kinda right :), so let’s put a breakpoint at the return instruction out of this function and see what happened to the code section:

![|587x152](upload://4WeI9uNpz2b9Wm1coOQpMVhQsvI.png)

![|594x162](upload://4HzBkIdrxoW3reJpXqEJJOtQAwf.png)

Very cool, but this code looks really strange because if we view it in disassembly it looks nothing like what we dumped to IDA before:

![|602x388](upload://AtlHQAqfqKa3MCAGn1vTOxTzfje.png)

Let’s keep going to see if it might change. Our next anomaly is at offset **0x358**:

![|548x14](upload://2YvmFAvYzVRcorh0nxqWud40MTq.png)

![|213x69](upload://8ZEwdQDKz7inGumRb1kmVtlFdmv.png)

The newly mapped PE gets free’d from memory, alright this is promising let’s see what happens afterwards.

The last anomaly that occurs is at the bottom of the function we encountered when we started analyzing this shellcode(**sub_3C**):

![|355x293](upload://51cZzFyKtxhw2GS3zRIKik5W4Oq.png)

A call to [**atexit**](https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/atexit?view=vs-2019):

&gt; “Processes the specified function at exit.”
&gt; 
&gt; int atexit(
&gt; 
&gt; void (__cdecl *func )( void )
&gt; 
&gt; );

This function will execute a callback function that will trigger when the process will exit.
So what was the last value pushed into the stack?
![|150x16](upload://8H5WYHuHh4y4Iy9xLFj1iqjBytS.png)
It’s an address, lets follow it:

![|597x52](upload://s4Uq3yfGCkKITs3udHQKymuayjq.png)

It’s going to terminate itself upon function exit, alright but is that it? well, not exactly.. at location **loc_811**:

![|342x190](upload://deVw9wOEzNsuYam8YZXshNQeNea.png)

We jump to a different shellcode located inside the code section of our PE:
![|298x23](upload://hINuIqlYygXD1Gz3w22uH82qUm.png)

Let’s look at the newly mapped PE that we dumped in IDA at this location:
![|602x147](upload://dVPXa2WvWPzflvdy03JSGhuo7Oi.png)
We compare it to the address stored in EAX:
![|602x113](upload://ld1RswTb55O5uVp3IYQkwPJ6ear.png)

Ah, this explains the reason we saw garbage code when we looked at it when it was first mapped to the code section, its because the address of entry point of this code section is actually at offset **0x2B87**!

---

Alright, let’s stop for a second and take a breather.

## Summary:

In this small blog we covered 5 neat techniques:

* Resource embedded code
* Stack strings
* Dynamic API Resolving
* Loading PE files dynamically
* Self loading code

Again, sadly - I’ll have to break this post into two parts since it already become to long but I hope this helped and aided your analysis toolkit. On the next part we’ll be analyzing the dumped PE file and circumventing it’s anti reverse engineering tricks.

Till next time!

---

## Sources:

https://www.hybrid-analysis.com/sample/3d2777b748e805c0463c0c6d0fef8280ad197bea1dd0a25e30ed71199989a6b9?environmentId=100

https://maltiverse.com/dashboards/newioc

https://docs.microsoft.com/en-us/

https://www.youtube.com/channel/UC--DwaiMV-jtO-6EvmKOnqg

https://malpedia.caad.fkie.fraunhofer.de/details/win.smokeloader</description>
    
    <lastBuildDate>Tue, 18 Feb 2020 12:26:30 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-4/19289.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Analyzing Modern Malware Techniques - Part 4</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-4/19289/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/analyzing-modern-malware-techniques-part-4/19289/2</link>
        <pubDate>Thu, 18 Jun 2020 14:31:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19289-2</guid>
        <source url="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-4/19289.rss">Analyzing Modern Malware Techniques - Part 4</source>
      </item>
      <item>
        <title>Analyzing Modern Malware Techniques - Part 4</title>
        <dc:creator><![CDATA[Danus]]></dc:creator>
        <description><![CDATA[
            <h2>Analyzing Modern Malware Techniques - Part 4</h2>
<h3>I’m afraid of no packer(Part 1 of 2)</h3>
<p><img src="/uploads/default/original/2X/f/f7feab28b8c58f0f563080d9420eba6a8b6d5be5.png" alt="" data-base62-sha1="znRyJaLJucGf973ikjJ0ifkMhtX" width="168" height="144"></p>
<hr>
<h3>Preface:</h3>
<p>If you’re going to analyze malware you are going to run into packers, code injections, obfuscated code and what not. If one doesn’t possess the correct knowledge or the correct tools to deal with such problems he will not get far with his analysis. In fact, when I first started practicing malware analysis somewhere back in 2015 I stopped because I couldn’t understand how to unpack packed code and I quit trying, So I tried again around 2017… and I quit again. This in time(in 2019) I didn’t quit but only because I had the proper tools to deal with the problem. Packed code is usually a dynamic problem and by that I mean that most of the time when you’ll encounter a packed malware it’s not going to be the same packed code but if you’ll have the tools to deal with the problem I guess you could defeat any packer. Still I’m to remain humble and admit that I still don’t have enough experience to deal with all types of packed code but I’m hoping that today, my dear reader, together we can bring more experience into our reverse engineering arsenal to learn together how to defeat packed code. I would like to put my efforts in this post to find anti analysis techniques that bypass my Scylla-Hide plugin and to learn how to de obfuscate binaries to ease analysis. Let’s begin!</p>
<hr>
<p><strong>Required knowledge:</strong></p>
<ul>
<li>Basic understanding in code injections</li>
<li>Basic understanding in dealing with anti analysis</li>
<li>A solid grasp of C and WINAPI</li>
<li>A solid grasp of x86 Assembly</li>
<li>Experience with IDAPRO</li>
<li>Experience with x64dbg</li>
</ul>
<p><strong>Required Tools:</strong></p>
<ul>
<li>IDA Pro</li>
<li>x64dbg</li>
<li>Resource Hacker</li>
<li>PEBear</li>
<li>Process Explorer</li>
<li>Process Monitor</li>
<li>VMWare</li>
</ul>
<p><strong>Sample used:</strong></p>
<p><a href="https://www.hybrid-analysis.com/sample/3d2777b748e805c0463c0c6d0fef8280ad197bea1dd0a25e30ed71199989a6b9?environmentId=100" rel="noopener nofollow ugc">3d2777b748e805c0463c0c6d0fef8280ad197bea1dd0a25e30ed71199989a6b9</a></p>
<p><strong>Goal setting:</strong></p>
<ol>
<li>Find and bypass anti analysis techniques.</li>
<li>Unpack main payload so we could analyze and run it.</li>
<li>Extract basic host based IOC and network based IOC.</li>
</ol>
<blockquote>
<p><strong>Some side notes</strong>:<br>
I highly encourage you to download the sample and follow my execution paths. As I begin to dive into shellcode analysis here it will be highly difficult to follow me in the post itself as I would begin to traverse offsets and I would not be making a picture of every location I access.</p>
</blockquote>
<hr>
<h2>Basic Analysis:</h2>
<p>I was encouraged by a few users in <a href="http://0x00sec.org">0x00sec.org</a> to check out this sample, It was stated that this sample was packed by <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.smokeloader" rel="noopener nofollow ugc">SmokeLoader</a> and it performs some pretty cool anti-analysis tricks, so off I went.</p>
<h2>Basic Static Analysis:</h2>
<p><strong>Anti Analysis APIs:</strong></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/7/76d9e8ad1cb9d81739f923097e0e11fd1b22abc8.png" data-download-href="/uploads/short-url/gXpcY0DLK12rzxbMQWUJIcoWdg4.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/7/76d9e8ad1cb9d81739f923097e0e11fd1b22abc8_2_602x196.png" alt="" data-base62-sha1="gXpcY0DLK12rzxbMQWUJIcoWdg4" width="602" height="196" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/7/76d9e8ad1cb9d81739f923097e0e11fd1b22abc8_2_602x196.png, https://0x00sec.s3.amazonaws.com/optimized/2X/7/76d9e8ad1cb9d81739f923097e0e11fd1b22abc8_2_903x294.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/7/76d9e8ad1cb9d81739f923097e0e11fd1b22abc8_2_1204x392.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/7/76d9e8ad1cb9d81739f923097e0e11fd1b22abc8_2_10x10.png"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/a/a7141244273f370cfbc3d22e011cc10bf6f707ef.png" data-download-href="/uploads/short-url/nQ2JTtK3gLNnekyPCzrgggX9BsH.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a7141244273f370cfbc3d22e011cc10bf6f707ef_2_602x123.png" alt="" data-base62-sha1="nQ2JTtK3gLNnekyPCzrgggX9BsH" width="602" height="123" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a7141244273f370cfbc3d22e011cc10bf6f707ef_2_602x123.png, https://0x00sec.s3.amazonaws.com/optimized/2X/a/a7141244273f370cfbc3d22e011cc10bf6f707ef_2_903x184.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/a/a7141244273f370cfbc3d22e011cc10bf6f707ef_2_1204x246.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a7141244273f370cfbc3d22e011cc10bf6f707ef_2_10x10.png"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/c/c0405ce3e351b7790ff0104f7947eeae8a5e6ecc.png" data-download-href="/uploads/short-url/rqJzpjqujsQkalq68cHvXAPrY3a.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c0405ce3e351b7790ff0104f7947eeae8a5e6ecc_2_602x63.png" alt="" data-base62-sha1="rqJzpjqujsQkalq68cHvXAPrY3a" width="602" height="63" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c0405ce3e351b7790ff0104f7947eeae8a5e6ecc_2_602x63.png, https://0x00sec.s3.amazonaws.com/optimized/2X/c/c0405ce3e351b7790ff0104f7947eeae8a5e6ecc_2_903x94.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/c/c0405ce3e351b7790ff0104f7947eeae8a5e6ecc_2_1204x126.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c0405ce3e351b7790ff0104f7947eeae8a5e6ecc_2_10x10.png"></a></div><p></p>
<p><strong>Dynamic API Resolving:</strong></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/0/040ebed14c9059aa45fef0efc390d6a0555ac5d2.png" data-download-href="/uploads/short-url/zTv6AMxewzVLYxhJFC5ewvO4Xo.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/0/040ebed14c9059aa45fef0efc390d6a0555ac5d2_2_602x193.png" alt="" data-base62-sha1="zTv6AMxewzVLYxhJFC5ewvO4Xo" width="602" height="193" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/0/040ebed14c9059aa45fef0efc390d6a0555ac5d2_2_602x193.png, https://0x00sec.s3.amazonaws.com/optimized/2X/0/040ebed14c9059aa45fef0efc390d6a0555ac5d2_2_903x289.png 1.5x, /uploads/default/original/2X/0/040ebed14c9059aa45fef0efc390d6a0555ac5d2.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/0/040ebed14c9059aa45fef0efc390d6a0555ac5d2_2_10x10.png"></a></div><p></p>
<p><strong>Uncommon section in PE file:</strong></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/6/66f53764551bce8a7f17d2a7f7849d0f926c97d3.png" data-download-href="/uploads/short-url/eGO4GMsRZQrCvjK1pMRHdFMF0TF.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/66f53764551bce8a7f17d2a7f7849d0f926c97d3_2_602x64.png" alt="" data-base62-sha1="eGO4GMsRZQrCvjK1pMRHdFMF0TF" width="602" height="64" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/6/66f53764551bce8a7f17d2a7f7849d0f926c97d3_2_602x64.png, https://0x00sec.s3.amazonaws.com/optimized/2X/6/66f53764551bce8a7f17d2a7f7849d0f926c97d3_2_903x96.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/6/66f53764551bce8a7f17d2a7f7849d0f926c97d3_2_1204x128.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/66f53764551bce8a7f17d2a7f7849d0f926c97d3_2_10x10.png"></a></div><p></p>
<p>And that’s it. That is very undetailed for hybrid-analysis. No connections being made, No files dropped, no code injection detection’s no nothing.</p>
<p>Let’s look at the sample on disk.</p>
<p>So I start off by viewing the Imports and the list seems pretty full and we have some strings which are well…:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/6/69655c0af5d33b260a7f86ac53343c1bd9ac9f73.png" data-download-href="/uploads/short-url/f2nimEija5AnkbtqBS7u7xWieav.png?dl=1" title=""><img src="/uploads/default/original/2X/6/69655c0af5d33b260a7f86ac53343c1bd9ac9f73.png" alt="" data-base62-sha1="f2nimEija5AnkbtqBS7u7xWieav" width="602" height="271" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/69655c0af5d33b260a7f86ac53343c1bd9ac9f73_2_10x10.png"></a></div><p></p>
<p>Not very informative, the rest of the strings look like auto-generated by the compiler so it’s not much use to us.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/f/fbc5d67fdf587eaddefbdb459ae19c5135b725bf.png" data-download-href="/uploads/short-url/zVhI4kA1ZGB2CIrIugC2tdhDigv.png?dl=1" title=""><img src="/uploads/default/original/2X/f/fbc5d67fdf587eaddefbdb459ae19c5135b725bf.png" alt="" data-base62-sha1="zVhI4kA1ZGB2CIrIugC2tdhDigv" width="602" height="496" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/f/fbc5d67fdf587eaddefbdb459ae19c5135b725bf_2_10x10.png"></a></div><p></p>
<p>TLS calls are never a good thing, TLS is <a href="https://en.wikipedia.org/wiki/Thread-local_storage" rel="noopener nofollow ugc">Thread Local Storage</a>, it’s code that is usually stored in a different section and runs before the entry point or it might be allocated and created using TLS API calls, but there is no TLS section in this binary. Just a strangely named section called <strong>.mysec</strong> which doesn’t contain any code:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/f/f29057e65c4d456b837a782d8ca3c9f79f1cee58.png" data-download-href="/uploads/short-url/yBONJ9oMUDpOTgE8I4jb2x2wfxu.png?dl=1" title=""><img src="/uploads/default/original/2X/f/f29057e65c4d456b837a782d8ca3c9f79f1cee58.png" alt="" data-base62-sha1="yBONJ9oMUDpOTgE8I4jb2x2wfxu" width="602" height="97" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f29057e65c4d456b837a782d8ca3c9f79f1cee58_2_10x10.png"></a></div><p></p>
<p>but it contains a lot of storage, infact I viewed its full size and its 4095 bytes long. we’ll keep that in mind.</p>
<p>In addition, there is a strange artifact in the samples resource section:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/e/ef3ff96efeaa69dd79bfca40931ec56b0607b04d.png" data-download-href="/uploads/short-url/y8vb9lfGL3ZfN12yHHclhvbHxiR.png?dl=1" title=""><img src="/uploads/default/original/2X/e/ef3ff96efeaa69dd79bfca40931ec56b0607b04d.png" alt="" data-base62-sha1="y8vb9lfGL3ZfN12yHHclhvbHxiR" width="602" height="255" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/e/ef3ff96efeaa69dd79bfca40931ec56b0607b04d_2_10x10.png"></a></div><p></p>
<p>It looks to long(35769 bytes long) to be a valid resource unless its a video format, we’ll keep this in mind as well.</p>
<p><strong>Basic Dynamic Analysis:</strong></p>
<p>So let’s run this on our Dynamic Analysis machine, I’ll set process monitor to watch the application and we’ll take a look at it in process explorer.</p>
<p><img src="/uploads/default/original/2X/9/9e54500c1706fbbe1410e978d0a94b9b74777619.png" alt="" data-base62-sha1="mAE4Vj2OWUlJyWDzPuDNUw53pRD" width="602" height="237"></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/1/18bb0eaaddf8f1c1ad510bf5527fc60c288afa29.gif" data-download-href="/uploads/short-url/3wMe7gqwDz1wrrHv2MOKYX6Dgtr.gif?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/1/18bb0eaaddf8f1c1ad510bf5527fc60c288afa29_2_602x277.gif" alt="" data-base62-sha1="3wMe7gqwDz1wrrHv2MOKYX6Dgtr" width="602" height="277" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/1/18bb0eaaddf8f1c1ad510bf5527fc60c288afa29_2_602x277.gif, https://0x00sec.s3.amazonaws.com/optimized/2X/1/18bb0eaaddf8f1c1ad510bf5527fc60c288afa29_2_903x415.gif 1.5x, /uploads/default/original/2X/1/18bb0eaaddf8f1c1ad510bf5527fc60c288afa29.gif 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/18bb0eaaddf8f1c1ad510bf5527fc60c288afa29_2_10x10.png"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/f/f8d815054732f1bcabd9bffde8b3a5e5958a6e46.png" data-download-href="/uploads/short-url/zvnmIFRb3oTAta72GtxttqHlG8C.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f8d815054732f1bcabd9bffde8b3a5e5958a6e46_2_602x331.png" alt="" data-base62-sha1="zvnmIFRb3oTAta72GtxttqHlG8C" width="602" height="331" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f8d815054732f1bcabd9bffde8b3a5e5958a6e46_2_602x331.png, /uploads/default/original/2X/f/f8d815054732f1bcabd9bffde8b3a5e5958a6e46.png 1.5x, /uploads/default/original/2X/f/f8d815054732f1bcabd9bffde8b3a5e5958a6e46.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f8d815054732f1bcabd9bffde8b3a5e5958a6e46_2_10x10.png"></a></div><p></p>
<p>That’s not true actually, I’m not surprised at all. but we do have something interesting here - it appears that the sample spawned a new sub process:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/4/4ca2e6c28e3f496d4ba485f313c323c02894b2e3.png" data-download-href="/uploads/short-url/aVXiKs6XzNpvr7HjjK7Xsngby4r.png?dl=1" title=""><img src="/uploads/default/original/2X/4/4ca2e6c28e3f496d4ba485f313c323c02894b2e3.png" alt="" data-base62-sha1="aVXiKs6XzNpvr7HjjK7Xsngby4r" width="602" height="27" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/4/4ca2e6c28e3f496d4ba485f313c323c02894b2e3_2_10x10.png"></a></div><p></p>
<p>which is a legitimate Windows Application, that might come in handy! so let’s move on to the advanced analysis!</p>
<hr>
<h2>Advanced Analysis - Finding Obfuscation and Anti Analysis Tricks:</h2>
<p>Our goal here is to find obfuscation techniques and anti analysis techniques, I’m going to find ways to circumvent them, instead of skipping these like I usually do we’ll park at each technique we find and see how we can deal with it.</p>
<p>Before we continue, I want to mention that <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.smokeloader" rel="noopener nofollow ugc">SmokeLoader </a>is simply a loader aiding the main payload in covert launching. According to Hybrid Analysis that was linked before and <a href="https://maltiverse.com/sample/3d2777b748e805c0463c0c6d0fef8280ad197bea1dd0a25e30ed71199989a6b9" rel="noopener nofollow ugc">Maltiverse</a>, the final payload is ransomware(GandCrab according to Maltiverse).</p>
<p>Let’s start by looking at <strong>WinMain</strong> in IDA:</p>
<p>looking at <strong>loc_4011C5</strong> we can see a lot of local variables being initialized:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/1/1815326a7341e4c207ca849f62e2ab7f12c33ad4.png" data-download-href="/uploads/short-url/3r2S9NTLJxRHn5B5e2pGCMibCJe.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/1/1815326a7341e4c207ca849f62e2ab7f12c33ad4_2_235x499.png" alt="" data-base62-sha1="3r2S9NTLJxRHn5B5e2pGCMibCJe" width="235" height="499" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/1/1815326a7341e4c207ca849f62e2ab7f12c33ad4_2_235x499.png, /uploads/default/original/2X/1/1815326a7341e4c207ca849f62e2ab7f12c33ad4.png 1.5x, /uploads/default/original/2X/1/1815326a7341e4c207ca849f62e2ab7f12c33ad4.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/1815326a7341e4c207ca849f62e2ab7f12c33ad4_2_10x10.png"></a></div><p></p>
<p>and since I’ve already analyzed this malware a bit - I’m going to assume these are <a href="https://www.fireeye.com/blog/threat-research/2016/06/automatically-extracting-obfuscated-strings.html" rel="noopener nofollow ugc">encrypted stack strings</a> but we’ll see if this is true later on. Next up we got mambo jumbo code that is built to look confusing but legitimate. But wait! oh boy what’s this at location <strong>loc_4017F9</strong>:</p>
<p><img src="/uploads/default/original/2X/d/d2cbd82660f60643c1fc5739c08691fe17c72420.png" alt="" data-base62-sha1="u4N0cz8854XfHyh3Tu2V4GCtWes" width="309" height="342"></p>
<p>A call to a dynamically calculated value and what appears to be an attempt to set a value in the Process Environment Block? What is at <strong>0x2c</strong> being accessed from the <strong>FS</strong> register?</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/4/400b6ae9d4fb7abc035a92e1c8bb400ade093f71.png" data-download-href="/uploads/short-url/98z1fUJgLbc1HAJH5Bs7ZeueAuJ.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/4/400b6ae9d4fb7abc035a92e1c8bb400ade093f71_2_602x24.png" alt="" data-base62-sha1="98z1fUJgLbc1HAJH5Bs7ZeueAuJ" width="602" height="24" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/4/400b6ae9d4fb7abc035a92e1c8bb400ade093f71_2_602x24.png, /uploads/default/original/2X/4/400b6ae9d4fb7abc035a92e1c8bb400ade093f71.png 1.5x, /uploads/default/original/2X/4/400b6ae9d4fb7abc035a92e1c8bb400ade093f71.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/4/400b6ae9d4fb7abc035a92e1c8bb400ade093f71_2_10x10.png"></a></div><p></p>
<p>Huh… It’s attempting to access a value in the Thread Local Storage array(TLS), we’ll check that out too since we don’t know exactly what value it’s attempting to access since <strong>EDX</strong> is dynamically calculated.</p>
<p>After this the code block calls <strong>printf</strong> and terminates, I’m not sure this invocation actually does something.</p>
<p><img src="/uploads/default/original/2X/1/12f89afdd2268b01bdb6888cf08682c877c4bdc5.png" alt="" data-base62-sha1="2HPecSz8hA5LhQ8z2DtrjGdqEpn" width="346" height="286"></p>
<p><strong>So let’s summarize what we gathered so far:</strong></p>
<ol>
<li>A shady looking resource</li>
<li>A lot of local variables being set up that look like encrypted stack strings</li>
<li>A call to a dynamically calculated pointer</li>
<li>Dynamic access to the TLS array</li>
</ol>
<p>Let’s start x64dbg and put a breakpoint on the assumed stack strings, and <strong>loc_4017F9</strong>. In addition just for safety let’s place a breakpoint on <strong>VirtualAlloc</strong> and <strong>CreateProcessW</strong>.</p>
<p>We break on the assumed stack strings at location <strong>0x4011DE</strong>, now I’m going to access the dump pointed by these variables after I run the entire variable assignment block at <strong>loc_4011C5</strong>:</p>
<p><img src="/uploads/default/original/2X/a/a65cb423a92ec2188cf59347167012fb4a44f5bc.png" alt="" data-base62-sha1="nJHSmnwK32nkjlbk43x5WwrpWwI" width="592" height="59"></p>
<p><img src="/uploads/default/original/2X/9/9e3eabb3711a4396bf9a25bdd8fcb41eef146385.png" alt="" data-base62-sha1="mzTI7MhOxOYV8c7GcVOgjd4X3wN" width="357" height="22"></p>
<p><img src="/uploads/default/original/2X/9/9af9e8c73de7396f4257b455c5a2c940d89482af.png" alt="" data-base62-sha1="m6YXqZkje8B4WBrKJf1X3dIjS0f" width="405" height="23"></p>
<p>This is data, but I’m not sure all of it is data, we’ll see how this plays out later.</p>
<p>Next we hit on <strong>CreateProcessW</strong> which attempts to create <strong>splwow64.exe</strong> which is the printer driver we saw the malware launching before with command like parameters:</p>
<p>C:\Windows\splwow64.exe 8192</p>
<p>But it seems to be created because of a call to the API <strong>DeviceCapabilitiesA</strong> which is not much of interest to us.</p>
<p><img src="/uploads/default/original/2X/6/6f6bd156ee054ee4497918431c716284eb60c3e0.png" alt="" data-base62-sha1="fTFZQXa7G0rn04l3Flkl3OEuWe4" width="602" height="149"></p>
<hr>
<h2>Trick number 0 - Embedding shellcode in the resource section</h2>
<p>Next we hit <strong>VirtualAlloc</strong> and upon exit it seems to be moving the allocated returned memory to 0x4260AC! that’s the address of the value that is going to be called later:</p>
<p><img src="/uploads/default/original/2X/1/1cf10891f6090ffe31c2dba154f5af8c110102a0.png" alt="" data-base62-sha1="481MqdVFwbwZtrGa5zL7LLeAjWE" width="253" height="25"></p>
<p>Let’s set a hardware on access breakpoint on the returned from <strong>VirtualAlloc</strong> value:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/0/02dbb55e299052975f4a1582e9bc08df43f83f8a.png" data-download-href="/uploads/short-url/phG2RaFkdVQ6Kkld71g57zZB5o.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/0/02dbb55e299052975f4a1582e9bc08df43f83f8a_2_602x323.png" alt="" data-base62-sha1="phG2RaFkdVQ6Kkld71g57zZB5o" width="602" height="323" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/0/02dbb55e299052975f4a1582e9bc08df43f83f8a_2_602x323.png, /uploads/default/original/2X/0/02dbb55e299052975f4a1582e9bc08df43f83f8a.png 1.5x, /uploads/default/original/2X/0/02dbb55e299052975f4a1582e9bc08df43f83f8a.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/0/02dbb55e299052975f4a1582e9bc08df43f83f8a_2_10x10.png"></a></div><p></p>
<p>It gets accessed a few times and after 2 times of hitting run I land at <strong>loc_4017F9</strong>:<br>
<img src="/uploads/default/original/2X/4/4e9bbdbe3f5cdbb3e89429531903b36601fdf8fe.png" alt="" data-base62-sha1="bdoUPzL5KeKxDDbA3mgAiDEx8bs" width="602" height="215"></p>
<p>I decided to look on the dump of the allocated area returned from <strong>VirtualAlloc</strong> and it reminded me of something I’ve seen before:<br>
<img src="/uploads/default/original/2X/b/bce6158a02a605b95b7887c5b8343331b7881c49.png" alt="" data-base62-sha1="qX4ItOMBt7YBReA3ulY11IoCz0J" width="594" height="16"></p>
<p>Wait, let’s check the resource section of this sample that we looked at before:<br>
<img src="/uploads/default/original/2X/7/7d0ffdd5ebb0ce0e26658beb6dc7ff9777dc2e1b.png" alt="" data-base62-sha1="hQlWCDgLezS6fy0DqjRwGjx6LTd" width="522" height="18"></p>
<p>They match! hmm:<br>
<img src="/uploads/default/original/2X/8/8ae3c774c50bb714fb1bd93237bc7cc44b37c788.png" alt="" data-base62-sha1="jOFU8xxdT6ZbHMxQjlU1rDYOzH2" width="244" height="93"></p>
<p>Before the call to that dynamic variable at <strong>dword_4260B4</strong> we see that another DWORD is being used located at <strong>dword_4260B4</strong>(passed to <strong>EAX</strong>). if we look at <strong>dword_4260AC</strong> in disassembler view it doesn’t look like valid code:<br>
<img src="/uploads/default/original/2X/7/7ab856fa75bc79732f06a7f9d131dba1607f2c0e.png" alt="" data-base62-sha1="hvDcfdy9A2wDEm0siZCRw2SQnMi" width="602" height="264"></p>
<p>So this little invocation at <strong>0x40180E</strong> to <strong>sub_401110</strong> gives me a hutch that it might lead to a decryption of that entire resource.</p>
<p><strong>dword_4260B4</strong> holds value of <strong>0x8BB9</strong> and if we view the resource length that was mapped into <strong>dword_4260AC</strong> we can clearly see they have the same size!</p>
<p><img src="/uploads/default/original/2X/d/dc4b570247d71f3db5812197fe7d445d3591646e.png" alt="" data-base62-sha1="vqOsqg4K9tRKFVO10Ft9wZexePA" width="242" height="25"></p>
<p>I decided to rename the variables and jump pass the call <strong>sub_401110</strong>(func_ResourceDecryptionRoutine) :</p>
<p><img src="/uploads/default/original/2X/0/077bf4c7f651c9524d66d67ac2d4f828276a124a.png" alt="" data-base62-sha1="14cURCFGg5tlH360qVLMUVBgh5w" width="354" height="265"></p>
<p>To see what will happen to the resource section that was mapped into memory I decided to place hardware breakpoints on <strong>dword_4260AC</strong> to check for memory access, after my hardware breakpoints got triggered the allocated resource view in disassembly turned into this:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/d/d1eb60dbb181cc4926b224be482676c9c5cf37f6.png" data-download-href="/uploads/short-url/tX25oSBsujGXF2mongvlbT2nuzY.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/d/d1eb60dbb181cc4926b224be482676c9c5cf37f6_2_602x196.png" alt="" data-base62-sha1="tX25oSBsujGXF2mongvlbT2nuzY" width="602" height="196" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/d/d1eb60dbb181cc4926b224be482676c9c5cf37f6_2_602x196.png, https://0x00sec.s3.amazonaws.com/optimized/2X/d/d1eb60dbb181cc4926b224be482676c9c5cf37f6_2_903x294.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/d/d1eb60dbb181cc4926b224be482676c9c5cf37f6_2_1204x392.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/d/d1eb60dbb181cc4926b224be482676c9c5cf37f6_2_10x10.png"></a></div><p></p>
<p>Awesome!</p>
<p>So let’s enter the rabbit hole and see where it leads us, but before we do that - let’s dump this into memory to see what’s going exactly:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/0/0bb5bcfcd5ad4ee2238b848a7f8f665cb195bc0d.png" data-download-href="/uploads/short-url/1FACIK9dxLTGSR1DT76mgZrKAMZ.png?dl=1" title=""><img src="/uploads/default/original/2X/0/0bb5bcfcd5ad4ee2238b848a7f8f665cb195bc0d.png" alt="" data-base62-sha1="1FACIK9dxLTGSR1DT76mgZrKAMZ" width="602" height="241" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0bb5bcfcd5ad4ee2238b848a7f8f665cb195bc0d_2_10x10.png"></a></div><p></p>
<p>IDA view of dumped shellcode:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/3/30dd2972e188d24f0cadb0ef0efc74fc56bea8c9.png" data-download-href="/uploads/short-url/6YgKRf85phjkqHHW3XaK2o46i81.png?dl=1" title=""><img src="/uploads/default/original/2X/3/30dd2972e188d24f0cadb0ef0efc74fc56bea8c9.png" alt="" data-base62-sha1="6YgKRf85phjkqHHW3XaK2o46i81" width="602" height="316" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/3/30dd2972e188d24f0cadb0ef0efc74fc56bea8c9_2_10x10.png"></a></div><p></p>
<p>I’ve analyzed the dump a bit, and found that the function called at offset <strong>0x33</strong> is where the main execution happens but unfortunately it looks like this:</p>
<p><img src="/uploads/default/original/2X/1/1f26a928ae9905671e7ffab64165f3dcba1a47d1.png" alt="" data-base62-sha1="4rzDb5qLKaoX7GD5NfTWG6POcGl" width="125" height="422"></p>
<p>Let’s scroll around the IDB to see if we can find some interesting anomalies:</p>
<p>Our first encounter is at code block <strong>loc_4C:</strong></p>
<p><img src="/uploads/default/original/2X/e/e655b02175933a629245e759246839bea078f528.png" alt="" data-base62-sha1="wRDp2FfIjw9Lwv6cbmvpxkHADUI" width="285" height="425"></p>
<hr>
<h2>Trick number 1 - Stack Strings</h2>
<p>This again looks like stack strings, and they all contain a call right after the push. If we’ll attempt to parse these strings manually and turn them into ASCII strings we can find something really interesting:</p>
<p><img src="/uploads/default/original/2X/e/e58cdd55f0115b52b686b7731e94cc980ca3e97e.png" alt="" data-base62-sha1="wKH8MOlorpBLmjqb6ctXR04qsbQ" width="210" height="340"></p>
<p>First it appears to load <strong>kernel32.dll</strong> and <strong>call [ebp-28h]</strong>, Then we see a push to <strong>VirtualAlloc</strong> and a call to <strong>[ebp-60h]</strong>. Each time a new function string is pushed, <strong>[ebp-60h]</strong> is called. I have reason to suspect that <strong>[ebp-28h]</strong> is  the address of <strong>LoadLibraryA</strong> and <strong>[ebp-60h]</strong> is the address of <strong>GetProcAddress</strong>, we’ll map this assumption into IDA:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/1/1805c93ce462b29fffa458172a92292a6fd4e0fe.png" data-download-href="/uploads/short-url/3qvR4a4soMAaMfCFy3uwm2qy7NQ.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/1/1805c93ce462b29fffa458172a92292a6fd4e0fe_2_169x500.png" alt="" data-base62-sha1="3qvR4a4soMAaMfCFy3uwm2qy7NQ" width="169" height="500" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/1805c93ce462b29fffa458172a92292a6fd4e0fe_2_10x10.png"></a></div><p></p>
<p>This mapping actually aids us to recover more artifacts from just looking at the the dumped memory statically:</p>
<p><img src="/uploads/default/original/2X/1/1c470decbca9ddc0e24c18b511f5974c14d9875b.png" alt="" data-base62-sha1="429Bm2H2KqbYP8lKwWoze0KPI9R" width="174" height="323"></p>
<p>Let’s debug this memory dump and see if we’re correct:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/3/3d9d0b876de231710c8d57eb81a8bc0d925def94.png" data-download-href="/uploads/short-url/8N3AM0lzUnlDgCYg13bjaOdJA3y.png?dl=1" title=""><img src="/uploads/default/original/2X/3/3d9d0b876de231710c8d57eb81a8bc0d925def94.png" alt="" data-base62-sha1="8N3AM0lzUnlDgCYg13bjaOdJA3y" width="602" height="31" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/3/3d9d0b876de231710c8d57eb81a8bc0d925def94_2_10x10.png"></a></div><p></p>
<p><img src="/uploads/default/original/2X/e/e72c864d3ec527f79299315e8dc6fc0a2f4082f5.png" alt="" data-base62-sha1="wZ3GJnmeKQXAjplJkaCoQnwvM0d" width="560" height="25"><br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/0/0a1029876fe146b9c37fd52334826744f3c78026.png" data-download-href="/uploads/short-url/1r1oVHpWKVnzGp9XPQceko7Vbq6.png?dl=1" title=""><img src="/uploads/default/original/2X/0/0a1029876fe146b9c37fd52334826744f3c78026.png" alt="" data-base62-sha1="1r1oVHpWKVnzGp9XPQceko7Vbq6" width="602" height="31" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0a1029876fe146b9c37fd52334826744f3c78026_2_10x10.png"></a></div><br>
<img src="/uploads/default/original/2X/9/908af432e44ac4c5b553396f49ab1cdaed2e1d10.png" alt="" data-base62-sha1="kCGsIb3EYmSsGOEZnuYTw7EgO2I" width="598" height="13"><br>
Our assumptions are indeed correct!<p></p>
<hr>
<h2>Trick Number 2 - Handling Dynamic API calls in IDA:</h2>
<p><img src="/uploads/default/original/2X/5/5fccff5ec78dc79cb2fdfefc598f47a4232a59dd.png" alt="" data-base62-sha1="dFuz1sDOltv7qOJcSOCoeZc0vEh" width="267" height="158"></p>
<p>So we have this issue, The base address of <strong>TerminateProcess</strong> is going to placed in <strong>[ebp-0ACH]</strong> as we can see on the last line(I’m assuming you guys know that in the <strong>stdcall</strong> convention, the return value is returned in <strong>EAX</strong> and that you know what <strong>GetProcAddress</strong> does). We can’t go and manually map each and one of these by clicking K on each local variable like some potato, we must edit the function so that IDA will know that any time the <strong>EBP</strong> register is being access using offsets its actually accessing local variables so let’s tell IDA it’s an <strong>EBP</strong> based function:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/c/c609528e77e4bc4500839cd8c5e2d303ca828276.png" data-download-href="/uploads/short-url/sfUvLZgf74hWakvDPfCv5wT7ftY.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c609528e77e4bc4500839cd8c5e2d303ca828276_2_217x303.png" alt="" data-base62-sha1="sfUvLZgf74hWakvDPfCv5wT7ftY" width="217" height="303" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c609528e77e4bc4500839cd8c5e2d303ca828276_2_217x303.png, https://0x00sec.s3.amazonaws.com/optimized/2X/c/c609528e77e4bc4500839cd8c5e2d303ca828276_2_325x454.png 1.5x, /uploads/default/original/2X/c/c609528e77e4bc4500839cd8c5e2d303ca828276.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c609528e77e4bc4500839cd8c5e2d303ca828276_2_10x10.png"></a></div><p></p>
<p>Let’s click edit function and mark the function as <strong>EBP</strong> based:</p>
<p><img src="/uploads/default/original/2X/0/062473b384e8ca402e17b87d71c63739928b801f.png" alt="" data-base62-sha1="SkXGW1Wh5KzZSLQ6jvEwsXOTj9" width="338" height="242"></p>
<p>Now we can rename all the local variables and see the changes get applied all across the IDB! So let’s fix the dynamic API resolving local variables and keep searching for anomalies. I didn’t find anything worthwhile so I decided to place a breakpoint on <strong>VirtualAlloc</strong> and see what happens and indeed we broke on offset <strong>0x1B8</strong>:</p>
<p><img src="/uploads/default/original/2X/7/720552a43b53a7f5eb4f42a5f63b1581ae497c80.png" alt="" data-base62-sha1="ggFPOuNVy46KvFtSCUnoSqERIbe" width="379" height="221"></p>
<p>I’ve access the dump of the newly allocated memory which is passed into <strong>var_10</strong>.</p>
<p>Let’s set up a hardware breakpoint on the first DWORD of the allocated memory and see if it gets accessed:</p>
<p><img src="/uploads/default/original/2X/f/f41a58c2c4f2bf1179ab06d7ec4c11def40d46d7.png" alt="" data-base62-sha1="yPqWVgoZBtdJSh5GdE4Rgk6IPt5" width="589" height="14"></p>
<hr>
<h2>Trick number 3 - Dumping PE files from memory:</h2>
<p>It does, and with a promising <strong>MZ</strong> signature that might indicate that a new file is being mapped, now we have to be careful here because I only set a breakpoint on the first <strong>DWORD</strong> of <strong>0x1EB0000</strong> - if we execute another time we will lose control over the malware, When I did that by accident the malware began to start an infinite amount of threads to circumvent our analysis and crash the vm!</p>
<p>We are currently executing at offset <strong>0x9B2</strong> inside <strong>sub_978</strong> and if we look in IDA at how complicated this function is we’ll have to collect our jaw from the floor:</p>
<p><img src="/uploads/default/original/2X/c/c3c16559bde805e0354a6e61e7280808a4b01f31.png" alt="" data-base62-sha1="rVJsf6O0f5tto07XaqguRrkFtVn" width="349" height="448"></p>
<p>Let’s assume the <strong>MZ</strong> signature is no coincidence and a PE file is being mapped into memory, maybe if we find where this loop end and break there, we might successfully map the file entirely and then we can dump it!</p>
<p><strong>sub_978</strong> ends at <strong>loc_BBA</strong>:</p>
<p><img src="/uploads/default/original/2X/d/d3c8f1583914a8e9ef620fde02bcb92892169baa.png" alt="" data-base62-sha1="udxgniGSNLNsR0GFbLbhOhTJqT8" width="181" height="354"></p>
<p>so let’s set up a breakpoint there and see what happens:<br>
<img src="/uploads/default/original/2X/c/c26a13cbef0b6c4f699ec008e853bf5dbe393dd5.png" alt="" data-base62-sha1="rJRTJmWTBJqqJHIVZIYEmJc0A2F" width="592" height="169"></p>
<p>We were correct!</p>
<p>Before we continue execution let’s dump this PE using Scylla and see how IDA will parse it:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/e/e40826c10505487b95d60847d3fce2be0c56ab06.png" data-download-href="/uploads/short-url/wxgkiZ2hSUkJOdQdKlbbmswwVj8.png?dl=1" title=""><img src="/uploads/default/original/2X/e/e40826c10505487b95d60847d3fce2be0c56ab06.png" alt="" data-base62-sha1="wxgkiZ2hSUkJOdQdKlbbmswwVj8" width="602" height="317" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/e/e40826c10505487b95d60847d3fce2be0c56ab06_2_10x10.png"></a></div><p></p>
<p>I have seen this before, but only in books. This anti disassembly at its finest. It attempts to trick IDA’s disassembler by creating these faulty jump instructions that will just into the middle of other parsed instructions - IDA doesn’t know how to deal with this so it will begin parsing instructions incorrectly. We will deal with this later as we are not done with the first binary.</p>
<hr>
<h2>Trick number 4 - Self Loading, <a href="https://danusminimus.github.io/Analyzing-Modern-Malware-Techniques-Part-1/" rel="noopener nofollow ugc">[heavy waves of nostalgia intensifies]</a>
</h2>
<p>Let’s go back to x64dbg, after we leave the mapping function we are supposed to land at offset <strong>0x1E0</strong>. Our next anomaly will be met at location <strong>0x1F8</strong> where a <strong>VirtualProtect</strong> call is being made:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/1/18c23c41872bf7c37faeb4fad119e6504831b597.png" data-download-href="/uploads/short-url/3x1BC0AxLoiCupEk7l5nQusF6dx.png?dl=1" title=""><img src="/uploads/default/original/2X/1/18c23c41872bf7c37faeb4fad119e6504831b597.png" alt="" data-base62-sha1="3x1BC0AxLoiCupEk7l5nQusF6dx" width="602" height="12" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/18c23c41872bf7c37faeb4fad119e6504831b597_2_10x10.png"></a></div><p></p>
<p><img src="/uploads/default/original/2X/3/3335ae4a14f2af1929e63d35333175822a6e51b3.png" alt="" data-base62-sha1="7j1mq2WbxcAApU29YtkqzQ4dku7" width="294" height="55"></p>
<p>On the base address of the main image? what?</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/e/ed55c02f4e43539ddfaae6bf1a7276ae7a5960d1.png" data-download-href="/uploads/short-url/xRySAUDyFByadw8JI68VxumaB8Z.png?dl=1" title=""><img src="/uploads/default/original/2X/e/ed55c02f4e43539ddfaae6bf1a7276ae7a5960d1.png" alt="" data-base62-sha1="xRySAUDyFByadw8JI68VxumaB8Z" width="602" height="11" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/e/ed55c02f4e43539ddfaae6bf1a7276ae7a5960d1_2_10x10.png"></a></div><p></p>
<p>If we execute the call, the <strong>.text</strong> section which is responsible for storing the code of the PE file has its memory protection changed. It can now be Read from, Executed and WRITTEN TO, that is not supposed to happen! let’s see what happens next:</p>
<p><img src="/uploads/default/original/2X/2/2426c34ca352804fbb045d9d98716ebca631a904.png" alt="" data-base62-sha1="59OeL1Q0ZVij3sjRI9V9tvnKUhC" width="269" height="483"></p>
<p>We enter a <strong>sub_BDD</strong> and if we view the functions behavior in the debugger, we can see that <a href="http://faydoc.tripod.com/cpu/stosb.htm" rel="noopener nofollow ugc">rep stosb</a> instruction will begin to copy the zeroes stored in <strong>AL</strong> to replace the value of addresses pointed by <strong>EDI</strong>. <strong>EDI</strong> is pointing to the code section of the main sample! It’s rewriting its own code section wow!</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/0/07fb4132517bec065810456202168f04534f9b86.png" data-download-href="/uploads/short-url/18BEtWb3uDGYEMtOmLlBhdUCAv4.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/0/07fb4132517bec065810456202168f04534f9b86_2_602x369.png" alt="" data-base62-sha1="18BEtWb3uDGYEMtOmLlBhdUCAv4" width="602" height="369" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/0/07fb4132517bec065810456202168f04534f9b86_2_602x369.png, https://0x00sec.s3.amazonaws.com/optimized/2X/0/07fb4132517bec065810456202168f04534f9b86_2_903x553.png 1.5x, /uploads/default/original/2X/0/07fb4132517bec065810456202168f04534f9b86.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/0/07fb4132517bec065810456202168f04534f9b86_2_10x10.png"></a></div>It’s gone!<p></p>
<p>I’m going to assume that the malware will copy the newly mapped PE into the code section of the current executing binary. let’s see if our assumption is correct.</p>
<p>When we exit the function <strong>sub_BDD</strong> we land at offset <strong>0x220</strong>:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/1/19eeebf72a2df8a1f89d1e812b0520c0532fb324.png" data-download-href="/uploads/short-url/3HpP6kNi2f2Wt77sTx2ircyvpm4.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/1/19eeebf72a2df8a1f89d1e812b0520c0532fb324_2_602x163.png" alt="" data-base62-sha1="3HpP6kNi2f2Wt77sTx2ircyvpm4" width="602" height="163" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/1/19eeebf72a2df8a1f89d1e812b0520c0532fb324_2_602x163.png, https://0x00sec.s3.amazonaws.com/optimized/2X/1/19eeebf72a2df8a1f89d1e812b0520c0532fb324_2_903x244.png 1.5x, /uploads/default/original/2X/1/19eeebf72a2df8a1f89d1e812b0520c0532fb324.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/19eeebf72a2df8a1f89d1e812b0520c0532fb324_2_10x10.png"></a></div><p></p>
<p>If we keep stepping over instructions we begin to see the string <strong>“.text”</strong>, which gives me a hutch that we’re are traversing through the PE Header format of the current executing binary and come to think of it, if we look at offset <strong>0x22c</strong> we see:</p>
<p><img src="/uploads/default/original/2X/4/47e3135611c91e707fd701fca3e8a496efb49843.png" alt="" data-base62-sha1="afWpgndXgEnOGb3O0MfnIPJk9s7" width="214" height="23"></p>
<p>And I know that <strong>3Ch</strong> is the <strong>e_lfanew</strong> field in the PE File header format, hmm… Lets trying to map this in IDA and see if this assumption makes any sense:<br>
<img src="/uploads/default/original/2X/e/e85f9b99e6e3a1498e2aea502a1d9aae050a8860.png" alt="" data-base62-sha1="x9FBWkfIRpgwNGOZRlS1A6akHZK" width="422" height="373"></p>
<p>It’s actually traversing through the newly mapped PE file!</p>
<p>I mapped it and now will explain how this entire process is done:</p>
<pre><code>mov eax, [ebp+lpvoidVirtualMemory]
mov [ebp+lpVoidNewMappedPE], eax
mov eax, [ebp+lpVoidNewMappedPE]
mov eax, [eax+_IMAGE_DOS_HEADER.e_lfanew] ; Get the value of e_lfanew
mov ecx, [ebp+lpvoidVirtualMemory] ; Get Image base of the newly mapped PE
lea eax, [ecx+eax+4] ; Access IMAGE_NT_HEADERS by adding e_lfawnew to the image base of the newly mapped PE
mov [ebp+_IMAGE_NT_HEADERS], eax ; Save the address of _IMAGE_NT_HEADERS of the newly mapped PE
</code></pre>
<hr>
<pre><code>mov eax, [ebp+_IMAGE_NT_HEADERS]
movzx eax, [eax+IMAGE_FILE_HEADER.SizeOfOptionalHeader] ; Get the size of _IMAGE_OPTIONAL_HEADERS from the newly mapped PE
mov ecx, [ebp+lpVoidNewMappedPE]
mov ecx, [ecx+_IMAGE_DOS_HEADER.e_lfanew]
lea eax, [ecx+eax+18h] ; Skip to the first section of the newly mapped PE
</code></pre>
<hr>
<pre><code>push [eax+_IMAGE_SECTION_HEADER.PointerToRawData] ; Push the address of the first section of the new mapped PE
push [ebp+lpVoidNewMappedPE] ; Push the Image base address of the newly mapped PE
push [ebp+lpvoidBaseAddressOfCurrentPE] ; Push the base address of the current PE
call sub_BF6
</code></pre>
<p>Now let’s make another assumption - after the call to <strong>sub_BF6</strong> at offset <strong>0x21B</strong> the code section of the current PE will be replaced with the code section of the new mapped PE.</p>
<p>And that is incorrect! Fortunately I put a hardware breakpoint on the the code section of the current PE before I continued execution and the copying actually occurred at offset <strong>0x326</strong> instead of <strong>0x21B</strong> BUT with a call to <strong>sub_BF6</strong> so I was kinda right :), so let’s put a breakpoint at the return instruction out of this function and see what happened to the code section:</p>
<p><img src="/uploads/default/original/2X/2/229dfbc8a4c22fcf56f684504bfe1ccd5751bbee.png" alt="" data-base62-sha1="4WeI9uNpz2b9Wm1coOQpMVhQsvI" width="587" height="152"></p>
<p><img src="/uploads/default/original/2X/2/20f5a8d6bb7656696aefac516e4dc5dfc11ad70f.png" alt="" data-base62-sha1="4HzBkIdrxoW3reJpXqEJJOtQAwf" width="594" height="162"></p>
<p>Very cool, but this code looks really strange because if we view it in disassembly it looks nothing like what we dumped to IDA before:</p>
<p><img src="/uploads/default/original/2X/f/ff9f9ae538a8f56ca472ab94882091bb04b0931c.png" alt="" data-base62-sha1="AtlHQAqfqKa3MCAGn1vTOxTzfje" width="602" height="388"></p>
<p>Let’s keep going to see if it might change. Our next anomaly is at offset <strong>0x358</strong>:</p>
<p><img src="/uploads/default/original/2X/1/14db48ff08b85b45923a5a61edea9a6230688f4c.png" alt="" data-base62-sha1="2YvmFAvYzVRcorh0nxqWud40MTq" width="548" height="14"></p>
<p><img src="/uploads/default/original/2X/3/3f098a356b4173f5c13ebd591dc77d7181d1654f.png" alt="" data-base62-sha1="8ZEwdQDKz7inGumRb1kmVtlFdmv" width="213" height="69"></p>
<p>The newly mapped PE gets free’d from memory, alright this is promising let’s see what happens afterwards.</p>
<p>The last anomaly that occurs is at the bottom of the function we encountered when we started analyzing this shellcode(<strong>sub_3C</strong>):</p>
<p><img src="/uploads/default/original/2X/2/232ddf658b0beaa5703f07cfb6ebf2182871ddc6.png" alt="" data-base62-sha1="51cZzFyKtxhw2GS3zRIKik5W4Oq" width="355" height="293"></p>
<p>A call to <a href="https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/atexit?view=vs-2019" rel="noopener nofollow ugc"><strong>atexit</strong></a>:</p>
<blockquote>
<p>“Processes the specified function at exit.”</p>
<p>int atexit(</p>
<p>void (__cdecl *func )( void )</p>
<p>);</p>
</blockquote>
<p>This function will execute a callback function that will trigger when the process will exit.<br>
So what was the last value pushed into the stack?<br>
<img src="/uploads/default/original/2X/3/3cf084155b0ee8bb1a5b5e2b78fc3e7890899a8c.png" alt="" data-base62-sha1="8H5WYHuHh4y4Iy9xLFj1iqjBytS" width="150" height="16"><br>
It’s an address, lets follow it:</p>
<p><img src="/uploads/default/original/2X/c/c4caf550a94577efd8229edd73a160efe7952b8c.png" alt="" data-base62-sha1="s4Uq3yfGCkKITs3udHQKymuayjq" width="597" height="52"></p>
<p>It’s going to terminate itself upon function exit, alright but is that it? well, not exactly… at location <strong>loc_811</strong>:</p>
<p><img src="/uploads/default/original/2X/5/5ccc3e885e606f05442a6ab96e18ad5e8089d522.png" alt="" data-base62-sha1="deVw9wOEzNsuYam8YZXshNQeNea" width="342" height="190"></p>
<p>We jump to a different shellcode located inside the code section of our PE:<br>
<img src="/uploads/default/original/2X/0/0200dc4260b788582a2a416157d1622b6d97ad9e.png" alt="" data-base62-sha1="hINuIqlYygXD1Gz3w22uH82qUm" width="298" height="23"></p>
<p>Let’s look at the newly mapped PE that we dumped in IDA at this location:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/6/61a5fe5ae5d70195e85e77e45ab83bd0975456ca.png" data-download-href="/uploads/short-url/dVPXa2WvWPzflvdy03JSGhuo7Oi.png?dl=1" title=""><img src="/uploads/default/original/2X/6/61a5fe5ae5d70195e85e77e45ab83bd0975456ca.png" alt="" data-base62-sha1="dVPXa2WvWPzflvdy03JSGhuo7Oi" width="602" height="147" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/61a5fe5ae5d70195e85e77e45ab83bd0975456ca_2_10x10.png"></a></div><br>
We compare it to the address stored in EAX:<br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/9/94a6b866c5bad0a2d276f352fbd6f28abe9038ff.png" data-download-href="/uploads/short-url/ld1RswTb55O5uVp3IYQkwPJ6ear.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/9/94a6b866c5bad0a2d276f352fbd6f28abe9038ff_2_602x113.png" alt="" data-base62-sha1="ld1RswTb55O5uVp3IYQkwPJ6ear" width="602" height="113" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/9/94a6b866c5bad0a2d276f352fbd6f28abe9038ff_2_602x113.png, https://0x00sec.s3.amazonaws.com/optimized/2X/9/94a6b866c5bad0a2d276f352fbd6f28abe9038ff_2_903x169.png 1.5x, /uploads/default/original/2X/9/94a6b866c5bad0a2d276f352fbd6f28abe9038ff.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/9/94a6b866c5bad0a2d276f352fbd6f28abe9038ff_2_10x10.png"></a></div><p></p>
<p>Ah, this explains the reason we saw garbage code when we looked at it when it was first mapped to the code section, its because the address of entry point of this code section is actually at offset <strong>0x2B87</strong>!</p>
<hr>
<p>Alright, let’s stop for a second and take a breather.</p>
<h2>Summary:</h2>
<p>In this small blog we covered 5 neat techniques:</p>
<ul>
<li>Resource embedded code</li>
<li>Stack strings</li>
<li>Dynamic API Resolving</li>
<li>Loading PE files dynamically</li>
<li>Self loading code</li>
</ul>
<p>Again, sadly - I’ll have to break this post into two parts since it already become to long but I hope this helped and aided your analysis toolkit. On the next part we’ll be analyzing the dumped PE file and circumventing it’s anti reverse engineering tricks.</p>
<p>Till next time!</p>
<hr>
<h2>Sources:</h2>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://www.hybrid-analysis.com/favicon.ico" class="site-icon" width="64" height="64">
      <a href="https://www.hybrid-analysis.com/sample/3d2777b748e805c0463c0c6d0fef8280ad197bea1dd0a25e30ed71199989a6b9?environmentId=100" target="_blank" rel="noopener nofollow ugc">hybrid-analysis.com</a>
  </header>
  <article class="onebox-body">
    <img src="" class="thumbnail" width="" height="">

<h3><a href="https://www.hybrid-analysis.com/sample/3d2777b748e805c0463c0c6d0fef8280ad197bea1dd0a25e30ed71199989a6b9?environmentId=100" target="_blank" rel="noopener nofollow ugc">Free Automated Malware Analysis Service - powered by Falcon Sandbox - Viewing...</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://maltiverse.com/dashboards/newioc/favicon.ico" class="site-icon" width="" height="">
      <a href="https://maltiverse.com/dashboards/newioc" target="_blank" rel="noopener nofollow ugc">maltiverse.com</a>
  </header>
  <article class="onebox-body">
    <img src="" class="thumbnail" width="" height="">

<h3><a href="https://maltiverse.com/dashboards/newioc" target="_blank" rel="noopener nofollow ugc">Maltiverse</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox allowlistedgeneric">
  <header class="source">
      <a href="https://docs.microsoft.com/en-us/" target="_blank" rel="noopener nofollow ugc">docs.microsoft.com</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/0/046bc4e1c9cc27618d0390eaf9e35705a1a77356.png" class="thumbnail" width="" height="">

<h3><a href="https://docs.microsoft.com/en-us/" target="_blank" rel="noopener nofollow ugc">Technical documentation, API, and code examples</a></h3>

<p>Get the latest Microsoft documentation for end users, developers and IT professionals: API reference, code examples, technical documentation, and more.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://www.youtube.com/s/desktop/c46c1860/img/favicon.ico" class="site-icon" width="16" height="16">
      <a href="https://www.youtube.com/channel/UC--DwaiMV-jtO-6EvmKOnqg" target="_blank" rel="noopener nofollow ugc">YouTube</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/optimized/2X/3/3e72ffb8779104edc794adceec40d5a1bcc1da72_2_500x500.jpeg" class="thumbnail onebox-avatar" width="500" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/3/3e72ffb8779104edc794adceec40d5a1bcc1da72_2_500x500.jpeg, https://0x00sec.s3.amazonaws.com/optimized/2X/3/3e72ffb8779104edc794adceec40d5a1bcc1da72_2_750x750.jpeg 1.5x, /uploads/default/original/2X/3/3e72ffb8779104edc794adceec40d5a1bcc1da72.jpeg 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/3/3e72ffb8779104edc794adceec40d5a1bcc1da72_2_10x10.png">

<h3><a href="https://www.youtube.com/channel/UC--DwaiMV-jtO-6EvmKOnqg" target="_blank" rel="noopener nofollow ugc">OALabs</a></h3>

<p>Malware analysis tools, techniques, and tutorials!</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/3X/3/3/33e94c148a89c675fb8241f5cc23e04d91c8593b.png" class="site-icon" width="36" height="36">
      <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.smokeloader" target="_blank" rel="noopener nofollow ugc">malpedia.caad.fkie.fraunhofer.de</a>
  </header>
  <article class="onebox-body">
    <img src="" class="thumbnail" width="" height="">

<h3><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.smokeloader" target="_blank" rel="noopener nofollow ugc">SmokeLoader (Malware Family)</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-4/19289/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/analyzing-modern-malware-techniques-part-4/19289/1</link>
        <pubDate>Mon, 17 Feb 2020 22:31:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19289-1</guid>
        <source url="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-4/19289.rss">Analyzing Modern Malware Techniques - Part 4</source>
      </item>
  </channel>
</rss>
