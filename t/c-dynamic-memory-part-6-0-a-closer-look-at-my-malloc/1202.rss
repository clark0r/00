<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</title>
    <link>https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202</link>
    <description>It&#39;s been a while since the last edition (I feel like I say this every time). What you&#39;re looking at is the sixth installment of my [C] Dynamic Memory Series.

I&#39;ll start this paper by enumerating some prerequisites:

1. Proficiency in C
2. [Understanding of the Stack vs Heap](https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960)
3. [Understanding of `sbrk` and `brk`](https://0x00sec.org/t/c-dynamic-memory-part-4-0-get-deep-er-in-the-heap/1063).
4. Familiarity with this article&#39;s predecessors (all of them).

As always, the above is merely a suggestion.

One last thing: _What follows is more a writeup of my findings and experience than a tutorial._

---
# Adapting the headers

Before I introduce the actual code, it is paramount that we take a look at the headers.

```c
/*
    my-malloc.h
*/
#include &lt;stddef.h&gt;

#ifndef MY_MALLOC_HDR
#define MY_MALLOC_HDR

typedef enum _free_t {
    NOT_FREE, FREE
} _free_t;

typedef struct _chunk {
    size_t  _chunk_sz;

    struct _chunk *next,
                  *prev,
                  *next_free,
                  *prev_free;


    _free_t _free;

} _chunk;

typedef struct _mem_session {
    _chunk *_first_chunk,
           *_last_chunk,
           *_first_free_chunk,
           *_last_free_chunk;

    size_t _chunks_allocated;

} _mem_session;

/* ... */

#endif
```
I&#39;m using an `enum` (Google if necessary) to denote whether or not a chunk is free or not.

The main thing that has changed in this code is the way free chunks are handled in memory. In addition to having a linked list for __all__ of the chunks, there will also be a linked list exclusively for __free__ chunks. Both of the above `struct` declarations have been updated in accordance with this new concept.

---
# The logic of `my_malloc()`

Function prototype:

```c
void* my_malloc(size_t bytes);
```

My implementation takes a single parameter, `bytes`, denoting the number of bytes the user has requested. __This number `bytes` is rounded up to the nearest multiple of `4`, which is the standard size of an `int`.__ At the top of the routine, `bytes` is modified to be a multiple of four.

The inaugural call to `my_malloc` does one extra step before proceeding to allocate memory for the user. It calls a special function called `_create_session()` that sets up a `_mem_session`. This `_mem_session`, which we will refer to as &quot;session&quot; from now on, has valuable, useful metadata about the heap. Included in the session data are the linked list pointers (__all__ and __free-only__) as well as a `size_t` that keeps track of the number of chunks in the session. This session consumes `40` bytes of memory (four pointers and a `size_t` use that much on my machine). Not bad, eh?

Once the session is created (and it is _only_ created during the first call to `my_malloc()`, the function tries to find some memory for the user. The first step in doing so is scanning the freed chunks linked list for any available chunks large enough to hold at least `bytes` bytes of memory.

If a free chunk is found, `my_malloc()` will prepare to return this memory to the user. First, however, my code will attempt to cut the chunk into two pieces following this logic: __if there is enough space such that `_chunk_sz` is greater than the sum of `bytes`, the size of a chunk, and another `4`, split the chunk in two.__

There is always the possibility that no free chunk large enough to store `bytes` memory is found. If such is the case, `my_malloc` uses `sbrk()` to expand the program break by the sum of the size of a chunk and `bytes`.

Whether an existing chunk was reused or a new one was made, the end result is the same. `my_malloc()`  returns a pointer offset. The user data begins at a `sizeof(_chunk)` offset from the pointer to the beginning of the chunk. This is what is returned.

___Note:___ _If something does fail during the `my_malloc()` call, `(void*)NULL` is returned._

---
# Coding out `my_malloc()`

```c
void *my_malloc(size_t bytes) {

    if (!_session &amp;&amp; _create_session() &lt; 0) {
        return NULL;
    }

    /* Round up to nearest multiple of 4. */
    size_t cnt = (((bytes-1)&gt;&gt;2)&lt;&lt;2) + 4;

    _chunk *c = _find_free_chunk( cnt );

    if ( !c ) {

        /*  we will extend the program break if we can&#39;t
            find a viable chunk at this time. */

        void *ptr;
        if ( (ptr = sbrk(sizeof(_chunk) + cnt)) == (void*)(-1) ) {
            fprintf(stderr, &quot;Couldn&#39;t allocate memory!!\n&quot;);
            return NULL;
        }

        c = (_chunk*)ptr;
        c-&gt;_chunk_sz = cnt;
        c-&gt;_free = NOT_FREE;

        c-&gt;prev = _session-&gt;_last_chunk;
        c-&gt;next = NULL;

        c-&gt;prev_free = NULL;
        c-&gt;next_free = NULL;

        if ( !_session-&gt;_first_chunk )
            _session-&gt;_first_chunk = c;

        /*
            The current last chunk should have its
            `next` attr point to c before we make the
            last chunk in the session point to c.
        */
        if ( _session-&gt;_last_chunk )
            _session-&gt;_last_chunk-&gt;next = c;

        _session-&gt;_last_chunk = c;

        _session-&gt;_chunks_allocated++;

    } else {

        c-&gt;_free = NOT_FREE;

        /* patch free chunks */
        if (c-&gt;next_free &amp;&amp; c-&gt;prev_free) {
            /* runs if c is in the middle of the freed chunks list */
            c-&gt;next_free-&gt;prev_free = c-&gt;prev_free;
            c-&gt;prev_free-&gt;next_free = c-&gt;next_free;

        } else if (c-&gt;next_free) {
            /* runs if c is the first of the freed chunks list */
            c-&gt;next_free-&gt;prev_free = NULL;

        } else if (c-&gt;prev_free) {
            /* runs if c is the last of the freed chunks list */
            c-&gt;prev_free-&gt;next_free = NULL;
        }

        if (_session-&gt;_first_free_chunk == c)
            _session-&gt;_first_free_chunk = c-&gt;next_free;

        if (_session-&gt;_last_free_chunk == c)
            _session-&gt;_last_free_chunk = c-&gt;prev_free;

        /* end patching of free chunks */

    /* -------------------------------------------- */

        /* Can we shrink the chunk?
           If so, let&#39;s create a chunk to handle the rest
           of the memory, so that we don&#39;t take more than
           we truly need. */
        if (c-&gt;_chunk_sz &gt;= cnt + (sizeof(int) + sizeof(_chunk) )) {

            _chunk *d = (_chunk*)((char*)c + sizeof(_chunk) + c-&gt;_chunk_sz);

            size_t extra = c-&gt;_chunk_sz - cnt - sizeof(_chunk);
            c-&gt;_chunk_sz = cnt;

            d-&gt;_chunk_sz = extra;
            d-&gt;_free = FREE;

            if ( !_session-&gt;_first_free_chunk )
                _session-&gt;_first_free_chunk = d;

            if ( _session-&gt;_last_free_chunk )
                _session-&gt;_last_free_chunk-&gt;next_free = d;

            d-&gt;prev_free = _session-&gt;_last_free_chunk;
            _session-&gt;_last_free_chunk = d;
            d-&gt;next_free = NULL;

            d-&gt;next = c-&gt;next;
            c-&gt;next = d;
            d-&gt;prev = c;

            _session-&gt;_chunks_allocated++;
        }
    }

    /* return `c` offset by the size of a chunk,
       resulting in a pointer pointing to the
       beginning of user data space*/
    return (sizeof(_chunk) + (char*)c);
}
```

There are a few things to take note of:
1. `_find_free_chunk( cnt )` is a subroutine I wrote out that... finds free chunks. It, as you would think, finds a suitable free chunk if there is one, or returns `NULL`.

What takes place in the `if ( !c )` block is the extending of the program break for a new chunk. It initializes the chunk&#39;s metadata appropriately and links the chunk into the session&#39;s linked lists.

The `else` block runs when we _do_ find a free chunk. The found chunk is flagged as `NOT_FREE`. The chunk is removed from the __free-only__ linked list. Then, if possible, the chunk is split up into two smaller chunks to save excess memory for usage elsewhere. The splitting involves some metadata initialization (like setting the size of chunk `d` and adjusting the size of chunk `c`). In addition, some linked list logic is done to ensure that the session knows about the new chunk.

As mentioned above, the last thing to happen is the `return`ing of the pointer to the user data.

---
# Conclusion

After reading this article, read it again. Ensure that you understand the code. Post a question if you must.

Then, I invite you to think of the upsides and downsides of this implementation. For example: how can we ensure that the user doesn&#39;t write into the next chunk? do we really need the doubly-linked list stuff to manage the chunks properly? is there another way? should we manage the chunks by size for quicker access? should we pay more attention to allocation speed, rather than space-efficiency? what happens when we run out of memory?

The solutions to some of the problems listed above may already be clear to you. If so, post a suggestion! I have a few ideas in mind, as well, but I&#39;m eager to hear your thoughts.</description>
    
    <lastBuildDate>Fri, 24 Nov 2017 19:12:44 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/13</link>
        <pubDate>Sun, 21 Jan 2018 00:30:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1202-13</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202.rss">[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>I don’t think any of the knowledge in my series will help you with accessing the heap of other running processes on any platform.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/12</link>
        <pubDate>Fri, 24 Nov 2017 19:12:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1202-12</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202.rss">[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</title>
        <dc:creator><![CDATA[mcus]]></dc:creator>
        <description><![CDATA[
            <p>Just doing a little tweak on iPhone and for curiosity.</p>
<p>Thank you for reply.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/10</link>
        <pubDate>Fri, 24 Nov 2017 15:16:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1202-10</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202.rss">[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>There are many reversing tools that let you find certain values in memory. Is that what you meant? If this is the case though, why deal with malloc chunks at all?</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/8</link>
        <pubDate>Fri, 24 Nov 2017 13:40:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1202-8</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202.rss">[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</title>
        <dc:creator><![CDATA[mcus]]></dc:creator>
        <description><![CDATA[
            <p>I was asking this question because I have simple project where I need to get the all chunks of memory on the heap and iterate through them.<br>
In this project I have implemented my malloc etc.</p>
<p>So lets say some allocated memory and on that space he write some cookie let say “0xdeadface” and that can be done a lot of times, so someone else somewhere in the program maybe overwrite that cookie. So I want to get all chunks and see where we have “0xdeadface” and I want to this on the heap.</p>
<p>So I had idea to get the range of the heap but I want to do this on iPhone.</p>
<p>Is there a way to do this? Is there a way to get the memory location that have already something?</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/7</link>
        <pubDate>Fri, 24 Nov 2017 08:49:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1202-7</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202.rss">[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/mcus">@mcus</a>,</p>
<p>This series is about implementing a <code>malloc</code> and <code>free</code>… We need the data structures so that we can organize and manipulate the memory of the free store.</p>
<p>Let’s say that we don’t use chunks, or any sort of other data structure arrangement, and we just use the <code>brk</code> or <code>sbrk</code> system calls. The reuse of previously-allocated memory would be near impossible to “safely” implement. It’d be up to the end programmer (the user of our <code>malloc</code> function family) to know what memory to overwrite. That makes life extremely hard.</p>
<hr>
<p>The goal of the series was to build a <code>malloc</code> from the ground up. Maybe you’re confusing chunks with paging or segmentation?</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/5</link>
        <pubDate>Thu, 23 Nov 2017 17:41:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1202-5</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202.rss">[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</title>
        <dc:creator><![CDATA[mcus]]></dc:creator>
        <description><![CDATA[
            <p>Great parts even after a year.</p>
<p>I have a question.<br>
Do we need to make our on chunks structures and etc. for the heap ?<br>
I mean aren’t there some function that get us the lists of chunks or something like this.</p>
<p>P.S. Sorry of my lack of knowledge, I am new to this.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/4</link>
        <pubDate>Thu, 23 Nov 2017 15:10:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1202-4</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202.rss">[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Yup. Free is next up.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/3</link>
        <pubDate>Tue, 29 Nov 2016 19:51:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1202-3</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202.rss">[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>Sweet stuff.</p>
<p>I was revising a lil’ about heaps so I read through your series once again but this time I used google as well. I discovered the so called <em>fastbins</em> and <em>binlists</em> which seemed interesting to me. Apparently, free()'s algo acts differently according to the size of the malloc’d chunk. There are both doubly and singly linked lists implemented. Looks like the the whole exploit scene comes into play thanks to free()'s implementation (in particular, thanks to *next_free, *prev_free in your _chunk struct definition). Out of curiosity, since there is a bromance between malloc() and free(), will you be covering any of free()'s magic in the future?</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/2</link>
        <pubDate>Tue, 29 Nov 2016 16:13:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1202-2</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202.rss">[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>It’s been a while since the last edition (I feel like I say this every time). What you’re looking at is the sixth installment of my [C] Dynamic Memory Series.</p>
<p>I’ll start this paper by enumerating some prerequisites:</p>
<ol>
<li>Proficiency in C</li>
<li><a href="https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960">Understanding of the Stack vs Heap</a></li>
<li>
<a href="https://0x00sec.org/t/c-dynamic-memory-part-4-0-get-deep-er-in-the-heap/1063">Understanding of <code>sbrk</code> and <code>brk</code></a>.</li>
<li>Familiarity with this article’s predecessors (all of them).</li>
</ol>
<p>As always, the above is merely a suggestion.</p>
<p>One last thing: <em>What follows is more a writeup of my findings and experience than a tutorial.</em></p>
<hr>
<h1>Adapting the headers</h1>
<p>Before I introduce the actual code, it is paramount that we take a look at the headers.</p>
<pre><code class="lang-auto">/*
    my-malloc.h
*/
#include &lt;stddef.h&gt;

#ifndef MY_MALLOC_HDR
#define MY_MALLOC_HDR

typedef enum _free_t {
    NOT_FREE, FREE
} _free_t;

typedef struct _chunk {
    size_t  _chunk_sz;

    struct _chunk *next,
                  *prev,
                  *next_free,
                  *prev_free;


    _free_t _free;

} _chunk;

typedef struct _mem_session {
    _chunk *_first_chunk,
           *_last_chunk,
           *_first_free_chunk,
           *_last_free_chunk;

    size_t _chunks_allocated;

} _mem_session;

/* ... */

#endif
</code></pre>
<p>I’m using an <code>enum</code> (Google if necessary) to denote whether or not a chunk is free or not.</p>
<p>The main thing that has changed in this code is the way free chunks are handled in memory. In addition to having a linked list for <strong>all</strong> of the chunks, there will also be a linked list exclusively for <strong>free</strong> chunks. Both of the above <code>struct</code> declarations have been updated in accordance with this new concept.</p>
<hr>
<h1>The logic of <code>my_malloc()</code>
</h1>
<p>Function prototype:</p>
<pre><code class="lang-auto">void* my_malloc(size_t bytes);
</code></pre>
<p>My implementation takes a single parameter, <code>bytes</code>, denoting the number of bytes the user has requested. <strong>This number <code>bytes</code> is rounded up to the nearest multiple of <code>4</code>, which is the standard size of an <code>int</code>.</strong> At the top of the routine, <code>bytes</code> is modified to be a multiple of four.</p>
<p>The inaugural call to <code>my_malloc</code> does one extra step before proceeding to allocate memory for the user. It calls a special function called <code>_create_session()</code> that sets up a <code>_mem_session</code>. This <code>_mem_session</code>, which we will refer to as “session” from now on, has valuable, useful metadata about the heap. Included in the session data are the linked list pointers (<strong>all</strong> and <strong>free-only</strong>) as well as a <code>size_t</code> that keeps track of the number of chunks in the session. This session consumes <code>40</code> bytes of memory (four pointers and a <code>size_t</code> use that much on my machine). Not bad, eh?</p>
<p>Once the session is created (and it is <em>only</em> created during the first call to <code>my_malloc()</code>, the function tries to find some memory for the user. The first step in doing so is scanning the freed chunks linked list for any available chunks large enough to hold at least <code>bytes</code> bytes of memory.</p>
<p>If a free chunk is found, <code>my_malloc()</code> will prepare to return this memory to the user. First, however, my code will attempt to cut the chunk into two pieces following this logic: <strong>if there is enough space such that <code>_chunk_sz</code> is greater than the sum of <code>bytes</code>, the size of a chunk, and another <code>4</code>, split the chunk in two.</strong></p>
<p>There is always the possibility that no free chunk large enough to store <code>bytes</code> memory is found. If such is the case, <code>my_malloc</code> uses <code>sbrk()</code> to expand the program break by the sum of the size of a chunk and <code>bytes</code>.</p>
<p>Whether an existing chunk was reused or a new one was made, the end result is the same. <code>my_malloc()</code>  returns a pointer offset. The user data begins at a <code>sizeof(_chunk)</code> offset from the pointer to the beginning of the chunk. This is what is returned.</p>
<p><em><strong>Note:</strong></em> <em>If something does fail during the <code>my_malloc()</code> call, <code>(void*)NULL</code> is returned.</em></p>
<hr>
<h1>Coding out <code>my_malloc()</code>
</h1>
<pre><code class="lang-auto">void *my_malloc(size_t bytes) {

    if (!_session &amp;&amp; _create_session() &lt; 0) {
        return NULL;
    }

    /* Round up to nearest multiple of 4. */
    size_t cnt = (((bytes-1)&gt;&gt;2)&lt;&lt;2) + 4;

    _chunk *c = _find_free_chunk( cnt );

    if ( !c ) {

        /*  we will extend the program break if we can't
            find a viable chunk at this time. */

        void *ptr;
        if ( (ptr = sbrk(sizeof(_chunk) + cnt)) == (void*)(-1) ) {
            fprintf(stderr, "Couldn't allocate memory!!\n");
            return NULL;
        }

        c = (_chunk*)ptr;
        c-&gt;_chunk_sz = cnt;
        c-&gt;_free = NOT_FREE;

        c-&gt;prev = _session-&gt;_last_chunk;
        c-&gt;next = NULL;

        c-&gt;prev_free = NULL;
        c-&gt;next_free = NULL;

        if ( !_session-&gt;_first_chunk )
            _session-&gt;_first_chunk = c;

        /*
            The current last chunk should have its
            `next` attr point to c before we make the
            last chunk in the session point to c.
        */
        if ( _session-&gt;_last_chunk )
            _session-&gt;_last_chunk-&gt;next = c;

        _session-&gt;_last_chunk = c;

        _session-&gt;_chunks_allocated++;

    } else {

        c-&gt;_free = NOT_FREE;

        /* patch free chunks */
        if (c-&gt;next_free &amp;&amp; c-&gt;prev_free) {
            /* runs if c is in the middle of the freed chunks list */
            c-&gt;next_free-&gt;prev_free = c-&gt;prev_free;
            c-&gt;prev_free-&gt;next_free = c-&gt;next_free;

        } else if (c-&gt;next_free) {
            /* runs if c is the first of the freed chunks list */
            c-&gt;next_free-&gt;prev_free = NULL;

        } else if (c-&gt;prev_free) {
            /* runs if c is the last of the freed chunks list */
            c-&gt;prev_free-&gt;next_free = NULL;
        }

        if (_session-&gt;_first_free_chunk == c)
            _session-&gt;_first_free_chunk = c-&gt;next_free;

        if (_session-&gt;_last_free_chunk == c)
            _session-&gt;_last_free_chunk = c-&gt;prev_free;

        /* end patching of free chunks */

    /* -------------------------------------------- */

        /* Can we shrink the chunk?
           If so, let's create a chunk to handle the rest
           of the memory, so that we don't take more than
           we truly need. */
        if (c-&gt;_chunk_sz &gt;= cnt + (sizeof(int) + sizeof(_chunk) )) {

            _chunk *d = (_chunk*)((char*)c + sizeof(_chunk) + c-&gt;_chunk_sz);

            size_t extra = c-&gt;_chunk_sz - cnt - sizeof(_chunk);
            c-&gt;_chunk_sz = cnt;

            d-&gt;_chunk_sz = extra;
            d-&gt;_free = FREE;

            if ( !_session-&gt;_first_free_chunk )
                _session-&gt;_first_free_chunk = d;

            if ( _session-&gt;_last_free_chunk )
                _session-&gt;_last_free_chunk-&gt;next_free = d;

            d-&gt;prev_free = _session-&gt;_last_free_chunk;
            _session-&gt;_last_free_chunk = d;
            d-&gt;next_free = NULL;

            d-&gt;next = c-&gt;next;
            c-&gt;next = d;
            d-&gt;prev = c;

            _session-&gt;_chunks_allocated++;
        }
    }

    /* return `c` offset by the size of a chunk,
       resulting in a pointer pointing to the
       beginning of user data space*/
    return (sizeof(_chunk) + (char*)c);
}
</code></pre>
<p>There are a few things to take note of:</p>
<ol>
<li>
<code>_find_free_chunk( cnt )</code> is a subroutine I wrote out that… finds free chunks. It, as you would think, finds a suitable free chunk if there is one, or returns <code>NULL</code>.</li>
</ol>
<p>What takes place in the <code>if ( !c )</code> block is the extending of the program break for a new chunk. It initializes the chunk’s metadata appropriately and links the chunk into the session’s linked lists.</p>
<p>The <code>else</code> block runs when we <em>do</em> find a free chunk. The found chunk is flagged as <code>NOT_FREE</code>. The chunk is removed from the <strong>free-only</strong> linked list. Then, if possible, the chunk is split up into two smaller chunks to save excess memory for usage elsewhere. The splitting involves some metadata initialization (like setting the size of chunk <code>d</code> and adjusting the size of chunk <code>c</code>). In addition, some linked list logic is done to ensure that the session knows about the new chunk.</p>
<p>As mentioned above, the last thing to happen is the <code>return</code>ing of the pointer to the user data.</p>
<hr>
<h1>Conclusion</h1>
<p>After reading this article, read it again. Ensure that you understand the code. Post a question if you must.</p>
<p>Then, I invite you to think of the upsides and downsides of this implementation. For example: how can we ensure that the user doesn’t write into the next chunk? do we really need the doubly-linked list stuff to manage the chunks properly? is there another way? should we manage the chunks by size for quicker access? should we pay more attention to allocation speed, rather than space-efficiency? what happens when we run out of memory?</p>
<p>The solutions to some of the problems listed above may already be clear to you. If so, post a suggestion! I have a few ideas in mind, as well, but I’m eager to hear your thoughts.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202/1</link>
        <pubDate>Thu, 13 Oct 2016 23:59:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1202-1</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202.rss">[C] Dynamic Memory (Part 6.0): A Closer Look at [My]Malloc</source>
      </item>
  </channel>
</rss>
