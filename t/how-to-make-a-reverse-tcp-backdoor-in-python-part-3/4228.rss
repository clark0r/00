<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How To Make A Reverse TCP Backdoor In Python - Part 3</title>
    <link>https://0x00sec.org/t/how-to-make-a-reverse-tcp-backdoor-in-python-part-3/4228</link>
    <description>I would probably be breaking protocol for writing this way and I ask that the admins and users of the platform turn a blind eye to the unstructured tutorial ( not actually one, this is actually a story ) they are about to read.

As most of you realized that I had halted the tutorial of the reverse tcp program and the ransomware series ( Null Byte ). 

With the ransomware series, I noticed that users were equipping programs with the very tutorial codes that I was posting and I kind of felt bad and guilty because in as much as I placed a disclaimer and note to detach myself from any federal prosecution, I knew there will always be the other guy  on the other side of the world who would turn a blind eye and use the knowledge for malicious profit. This isn&#39;t any theoretical garbage I came up with because I actually witnessed upcoming tutorial codes and ideas ( which I might have given out to enthusiasts ) being equipped with unix programs for malicious profit. I believe that if you are capable of violating and committing crime then you should be skilled enough to write your own programs. I know someone will probably say that without the work and time of others, we wouldn&#39;t probably be where we are now in this technological world and that it stands out, everything we have is as a result of others. I in fact believe and agree with you on that idea but not when it comes to a self replicating program that can mimic Mirai and also cause mass destruction. I have therefore stopped the tutorials for the ransomware which I know isn&#39;t going to cause a slow down in any computer crime because the world is growing faster and faster each day and that more sophisticated creations are been brought into reality. The bottom line is my codes won&#39;t be the cause of another world outage.

With the reverse tcp: :tired_face: oh boy, hmm I had already written the program in advance and structured it into a framework where I implemented a lot of features like the remote importing, downloading, gaining root with escalation attacks, webcam, screenshot, spying, credentials stealing, etc. I therefore wanted to take users through the development process which was the idea behind the series. :cold_sweat: In the quest to make it fully supported across most linux distributions, I had to port it to various distributions to account for the different system designs and here the unfortunate happened : **I messed up** :rage: I unfortunately wiped the last virtual machine ( having the latest development of the program ) which was something I often did to save space ( limited hardware here please ) and to give way for the installation of other distributions. This brought me back to square -1 ( if it exists ) and honestly having your 6-8 months leisure project being thrown away like that is quite frustrating. Enough of the talking.

Users have been requesting the continuation of the series which I don&#39;t even know how to continue since the project isn&#39;t standalone anymore but now a framework. I was hoping someone today or anytime reading can take up the series which is the reason for the post. I&#39;m giving out the last backed up file so that an interested party can take it up and help the community. I might help ( not guaranteed, life is getting busy ) once in a while.

I will only demonstrate some need to know general information about the project just to get interested parties started. Forgive me if I use images again and not commenting in my source code. Please read to the end for your benefit

ZeroSpy: https://github.com/sergeantexploiter/zero

## Starting the Shell ( Attacker )

Hitting `python zero.py` in the directory starts the program.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/0/07048b4bc0621c4c9517fd3505c02c542fdbcce1.png&quot; width=&quot;690&quot; height=&quot;295&quot;&gt;

**NOTE:** There was a scary banner before the prompt which I removed to save space for typing ( Was introduced in the destroyed VM version ). Hitting `help` prints the help screen. The script first checks for  **runnables**. These are custom alias files that get loaded when the framework starts, maybe like start mutiple listeners on different ports instead typing them manually. Runnable files use same command codes just like the way you would type them in the terminal. The folder for runnables is located in the `configurations` folder.  An example of a runnable is **start_services** which just starts multiple listeners. Runnables use a hash tag for comments.

Feel free to ticker with the commands, the one I&#39;m demonstrating is the start_server command which accepts two parameters: the host and port ( as you already know ). Use **localhost** instead if you want to enter empty double/single strings for the host. It just helps the program display better.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/4/47b00a5891f2455c5295d73f36100e95615ed412.png&quot; width=&quot;690&quot; height=&quot;382&quot;&gt;

We can accept multiple clients on one listener without disrupting the other connections on the same listening port

## Connecting to the Shell ( Client/Victim )

The client script uses the `connect.py` file. The syntax is: ` python connect.py &lt;host&gt; &lt;port&gt;`. The client uses an auto-connect function which reconnects should the connection fail.

## Back to the Shell ( Attacker )

When a client is connected, we get something like this on our terminal.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/3/31beaee86bb8cb971d150d27f1e1e42518c279a2.png&quot; width=&quot;690&quot; height=&quot;126&quot;&gt;

This does not drop us directly into the shell but instead pushes it into the background in order to allow us continue what we&#39;re doing without interruption ( Defaults idea ).

We can however list all connections with `sessions`

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/d/d7fbecb3f9c3d8eeb46016e90e3ef6851551e9e4.png&quot; width=&quot;690&quot; height=&quot;111&quot;&gt;

We can interact with the connected shell with the `interact` command followed by the session id.

When connected to a client, there are a whole new set of commands available ( which was where the development was taking place until dooms day without backup ).

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/c/c549bef2871a7b6323a9004f22e70d395aded8a6.png&quot; width=&quot;645&quot; height=&quot;500&quot;&gt;

The development commands were host-scanner ( needed threads ), check_vm ( needed more cross platform results ), webcam_list webcam_snap ( destroyed in VM wipeout ), retrieve-directory ( embedded in script but not shown screen - clones the given directory - made some progress but also wiped in VM destruction ), screenshot ( needed more libraries for older and bare distributions like lubuntu ). Encryption command ( restructured to use an inbuilt secure key for first data communication with attacker, DH-key exchange and AES-SHA256 for data transmission - wiped out ).

One would notice the shell ( session ) signature information after executing the sysinfo command.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/2/2e47c3348c190836efb0109721a263bdacf1ee25.png&quot; width=&quot;690&quot; height=&quot;233&quot;&gt;

The signature was first calculated and stored with all the hashing algorithms before the script was deployed. I don&#39;t know if I implemented the checking feature at the attacker in the old version but the whole idea was to check the shell signature before accepting the connection. This was to help defend against tampering should the script be discovered, the script uses its own source code as its signature. The connection is supposed to drop if the signature doesn&#39;t match. The feature can however be defeated if encryption for data transmission is not secure ( user can first get the signature and then send the same signature with a tampered script )

The client/victim script also has a self destruct feature ( `sh()` in script - commented out ) that was executed upon  connecting for the first time. The feature used `shred` and should it not exist used an inbuilt shredding function ( which needs reviews as I believe is not secure ).

One more implemented but lost feature was the scalability. I had a seperate program that allowed the attacker to choose his own modules and compile them into the client script without having to use the entire client script. The client in turn after a successful connect, sent all available commands to the attacker

I know, call me lazy but after a client is disconnected, it fails to be removed at the attacker&#39;s side even after a successful message printed. This can be fixed by removing the `id` from the `connection array` and `session array` variables in the `zero.py`.

**CONCLUSION**

I&#39;ll be lurking around for some few nanoseconds before I disappear. Should anyone need clarifications or question, I&#39;ll be willing to help.

I&#39;m posting the files because others might need it and probably because I personally saw potential in the script. If I cannot continue doesn&#39;t mean that someone else can&#39;t sacrifice two nights to get my idea and continue from where I stopped. I see potential in this community. I&#39;ve a pot belly now so I&#39;m kinda lazy now adays. Until we meet again.

## :innocent: Sergeant</description>
    
    <lastBuildDate>Thu, 09 Nov 2017 16:34:49 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/how-to-make-a-reverse-tcp-backdoor-in-python-part-3/4228.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How To Make A Reverse TCP Backdoor In Python - Part 3</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/how-to-make-a-reverse-tcp-backdoor-in-python-part-3/4228/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-make-a-reverse-tcp-backdoor-in-python-part-3/4228/5</link>
        <pubDate>Sun, 21 Jan 2018 00:30:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-4228-5</guid>
        <source url="https://0x00sec.org/t/how-to-make-a-reverse-tcp-backdoor-in-python-part-3/4228.rss">How To Make A Reverse TCP Backdoor In Python - Part 3</source>
      </item>
      <item>
        <title>How To Make A Reverse TCP Backdoor In Python - Part 3</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-VIP" data-username="pry0cc" data-post="3" data-topic="4228">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/pry0cc/40/6_2.png" class="avatar"> pry0cc:</div>
<blockquote>
<p>could ransomware be used for good? Or is that just called an encryption device.</p>
</blockquote>
</aside>
<p>Calling it ransomware implies its malice.</p>
          <p><a href="https://0x00sec.org/t/how-to-make-a-reverse-tcp-backdoor-in-python-part-3/4228/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-make-a-reverse-tcp-backdoor-in-python-part-3/4228/4</link>
        <pubDate>Thu, 09 Nov 2017 16:34:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-4228-4</guid>
        <source url="https://0x00sec.org/t/how-to-make-a-reverse-tcp-backdoor-in-python-part-3/4228.rss">How To Make A Reverse TCP Backdoor In Python - Part 3</source>
      </item>
      <item>
        <title>How To Make A Reverse TCP Backdoor In Python - Part 3</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Really nice article man! Ethics is indeed a difficult subject. In my mind, making ransomware is like building a fully automatic weapon, it can be used for fun and games, but then is often used for mass killing of innocent people.</p>
<p>The ethics are difficult. You do also have to take into account people who are greyhat, could ransomware be used for good? Or is that just called an encryption device. Who knows. What does everybody else think on this matter?</p>
          <p><a href="https://0x00sec.org/t/how-to-make-a-reverse-tcp-backdoor-in-python-part-3/4228/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-make-a-reverse-tcp-backdoor-in-python-part-3/4228/3</link>
        <pubDate>Thu, 09 Nov 2017 10:16:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-4228-3</guid>
        <source url="https://0x00sec.org/t/how-to-make-a-reverse-tcp-backdoor-in-python-part-3/4228.rss">How To Make A Reverse TCP Backdoor In Python - Part 3</source>
      </item>
      <item>
        <title>How To Make A Reverse TCP Backdoor In Python - Part 3</title>
        <dc:creator><![CDATA[sergeantsploit]]></dc:creator>
        <description><![CDATA[
            <p>I would probably be breaking protocol for writing this way and I ask that the admins and users of the platform turn a blind eye to the unstructured tutorial ( not actually one, this is actually a story ) they are about to read.</p>
<p>As most of you realized that I had halted the tutorial of the reverse tcp program and the ransomware series ( Null Byte ).</p>
<p>With the ransomware series, I noticed that users were equipping programs with the very tutorial codes that I was posting and I kind of felt bad and guilty because in as much as I placed a disclaimer and note to detach myself from any federal prosecution, I knew there will always be the other guy  on the other side of the world who would turn a blind eye and use the knowledge for malicious profit. This isn’t any theoretical garbage I came up with because I actually witnessed upcoming tutorial codes and ideas ( which I might have given out to enthusiasts ) being equipped with unix programs for malicious profit. I believe that if you are capable of violating and committing crime then you should be skilled enough to write your own programs. I know someone will probably say that without the work and time of others, we wouldn’t probably be where we are now in this technological world and that it stands out, everything we have is as a result of others. I in fact believe and agree with you on that idea but not when it comes to a self replicating program that can mimic Mirai and also cause mass destruction. I have therefore stopped the tutorials for the ransomware which I know isn’t going to cause a slow down in any computer crime because the world is growing faster and faster each day and that more sophisticated creations are been brought into reality. The bottom line is my codes won’t be the cause of another world outage.</p>
<p>With the reverse tcp: <img src="https://0x00sec.org/images/emoji/twitter/tired_face.png?v=9" title=":tired_face:" class="emoji" alt=":tired_face:"> oh boy, hmm I had already written the program in advance and structured it into a framework where I implemented a lot of features like the remote importing, downloading, gaining root with escalation attacks, webcam, screenshot, spying, credentials stealing, etc. I therefore wanted to take users through the development process which was the idea behind the series. <img src="https://0x00sec.org/images/emoji/twitter/cold_sweat.png?v=9" title=":cold_sweat:" class="emoji" alt=":cold_sweat:"> In the quest to make it fully supported across most linux distributions, I had to port it to various distributions to account for the different system designs and here the unfortunate happened : <strong>I messed up</strong> <img src="https://0x00sec.org/images/emoji/twitter/rage.png?v=9" title=":rage:" class="emoji" alt=":rage:"> I unfortunately wiped the last virtual machine ( having the latest development of the program ) which was something I often did to save space ( limited hardware here please ) and to give way for the installation of other distributions. This brought me back to square -1 ( if it exists ) and honestly having your 6-8 months leisure project being thrown away like that is quite frustrating. Enough of the talking.</p>
<p>Users have been requesting the continuation of the series which I don’t even know how to continue since the project isn’t standalone anymore but now a framework. I was hoping someone today or anytime reading can take up the series which is the reason for the post. I’m giving out the last backed up file so that an interested party can take it up and help the community. I might help ( not guaranteed, life is getting busy ) once in a while.</p>
<p>I will only demonstrate some need to know general information about the project just to get interested parties started. Forgive me if I use images again and not commenting in my source code. Please read to the end for your benefit</p>
<p>ZeroSpy: <a href="https://github.com/sergeantexploiter/zero" rel="noopener nofollow ugc">https://github.com/sergeantexploiter/zero</a></p>
<h2>Starting the Shell ( Attacker )</h2>
<p>Hitting <code>python zero.py</code> in the directory starts the program.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/0/07048b4bc0621c4c9517fd3505c02c542fdbcce1.png" width="690" height="295"></p>
<p><strong>NOTE:</strong> There was a scary banner before the prompt which I removed to save space for typing ( Was introduced in the destroyed VM version ). Hitting <code>help</code> prints the help screen. The script first checks for  <strong>runnables</strong>. These are custom alias files that get loaded when the framework starts, maybe like start mutiple listeners on different ports instead typing them manually. Runnable files use same command codes just like the way you would type them in the terminal. The folder for runnables is located in the <code>configurations</code> folder.  An example of a runnable is <strong>start_services</strong> which just starts multiple listeners. Runnables use a hash tag for comments.</p>
<p>Feel free to ticker with the commands, the one I’m demonstrating is the start_server command which accepts two parameters: the host and port ( as you already know ). Use <strong>localhost</strong> instead if you want to enter empty double/single strings for the host. It just helps the program display better.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/4/47b00a5891f2455c5295d73f36100e95615ed412.png" width="690" height="382"></p>
<p>We can accept multiple clients on one listener without disrupting the other connections on the same listening port</p>
<h2>Connecting to the Shell ( Client/Victim )</h2>
<p>The client script uses the <code>connect.py</code> file. The syntax is: <code> python connect.py &lt;host&gt; &lt;port&gt;</code>. The client uses an auto-connect function which reconnects should the connection fail.</p>
<h2>Back to the Shell ( Attacker )</h2>
<p>When a client is connected, we get something like this on our terminal.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/3/31beaee86bb8cb971d150d27f1e1e42518c279a2.png" width="690" height="126"></p>
<p>This does not drop us directly into the shell but instead pushes it into the background in order to allow us continue what we’re doing without interruption ( Defaults idea ).</p>
<p>We can however list all connections with <code>sessions</code></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/d/d7fbecb3f9c3d8eeb46016e90e3ef6851551e9e4.png" width="690" height="111"></p>
<p>We can interact with the connected shell with the <code>interact</code> command followed by the session id.</p>
<p>When connected to a client, there are a whole new set of commands available ( which was where the development was taking place until dooms day without backup ).</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/c/c549bef2871a7b6323a9004f22e70d395aded8a6.png" width="645" height="500"></p>
<p>The development commands were host-scanner ( needed threads ), check_vm ( needed more cross platform results ), webcam_list webcam_snap ( destroyed in VM wipeout ), retrieve-directory ( embedded in script but not shown screen - clones the given directory - made some progress but also wiped in VM destruction ), screenshot ( needed more libraries for older and bare distributions like lubuntu ). Encryption command ( restructured to use an inbuilt secure key for first data communication with attacker, DH-key exchange and AES-SHA256 for data transmission - wiped out ).</p>
<p>One would notice the shell ( session ) signature information after executing the sysinfo command.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/2/2e47c3348c190836efb0109721a263bdacf1ee25.png" width="690" height="233"></p>
<p>The signature was first calculated and stored with all the hashing algorithms before the script was deployed. I don’t know if I implemented the checking feature at the attacker in the old version but the whole idea was to check the shell signature before accepting the connection. This was to help defend against tampering should the script be discovered, the script uses its own source code as its signature. The connection is supposed to drop if the signature doesn’t match. The feature can however be defeated if encryption for data transmission is not secure ( user can first get the signature and then send the same signature with a tampered script )</p>
<p>The client/victim script also has a self destruct feature ( <code>sh()</code> in script - commented out ) that was executed upon  connecting for the first time. The feature used <code>shred</code> and should it not exist used an inbuilt shredding function ( which needs reviews as I believe is not secure ).</p>
<p>One more implemented but lost feature was the scalability. I had a seperate program that allowed the attacker to choose his own modules and compile them into the client script without having to use the entire client script. The client in turn after a successful connect, sent all available commands to the attacker</p>
<p>I know, call me lazy but after a client is disconnected, it fails to be removed at the attacker’s side even after a successful message printed. This can be fixed by removing the <code>id</code> from the <code>connection array</code> and <code>session array</code> variables in the <code>zero.py</code>.</p>
<p><strong>CONCLUSION</strong></p>
<p>I’ll be lurking around for some few nanoseconds before I disappear. Should anyone need clarifications or question, I’ll be willing to help.</p>
<p>I’m posting the files because others might need it and probably because I personally saw potential in the script. If I cannot continue doesn’t mean that someone else can’t sacrifice two nights to get my idea and continue from where I stopped. I see potential in this community. I’ve a pot belly now so I’m kinda lazy now adays. Until we meet again.</p>
<h2>
<img src="https://0x00sec.org/images/emoji/twitter/innocent.png?v=9" title=":innocent:" class="emoji" alt=":innocent:"> Sergeant</h2>
          <p><a href="https://0x00sec.org/t/how-to-make-a-reverse-tcp-backdoor-in-python-part-3/4228/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-make-a-reverse-tcp-backdoor-in-python-part-3/4228/1</link>
        <pubDate>Tue, 07 Nov 2017 15:54:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-4228-1</guid>
        <source url="https://0x00sec.org/t/how-to-make-a-reverse-tcp-backdoor-in-python-part-3/4228.rss">How To Make A Reverse TCP Backdoor In Python - Part 3</source>
      </item>
  </channel>
</rss>
