<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Binary Armory Wiki</title>
    <link>https://0x00sec.org/t/binary-armory-wiki/25679</link>
    <description>A compilation of resources to classical AntiRE techniques I&#39;ve collected over time. Note that some resources may seem to be redundant but are added for the sake of completeness. Feel free to add any if you wish.

# Packers/Obfuscators/VMs

[Build your first LLVM Obfuscator](https://medium.com/@polarply/build-your-first-llvm-obfuscator-80d16583392b)
[Extending LLVM for Code Obfuscation 1](https://www.praetorian.com/blog/extending-llvm-for-code-obfuscation-part-1/)
[Extending LLVM for Code Obfuscation 2](https://www.praetorian.com/blog/extending-llvm-for-code-obfuscation-part-2/)
[Using LLVM to Obfuscate Your Code During Compilation](https://www.apriorit.com/dev-blog/687-reverse-engineering-llvm-obfuscation)
[Turning Regular Code Into Atrocities With LLVM ](https://blog.quarkslab.com/turning-regular-code-into-atrocities-with-llvm.html)
[[WIN]Simple Packer in C](http://www.rohitab.com/discuss/index.php?app=core&amp;module=attach&amp;section=attach&amp;attach_id=4507)
[[WIN]Writing a PE packer series](https://bidouillesecurity.com/tutorial-writing-a-pe-packer-intro/)
[Using UPX as a security packer](https://dl.packetstormsecurity.net/papers/general/Using_UPX_as_a_security_packer.pdf)
[[WIN]How to Write Your Own Packer](https://www.stonedcoder.org/~kd/lib/61-267-1-PB.pdf)
[[NIX]Making our own executable packer](https://fasterthanli.me/series/making-our-own-executable-packer)
[[WIN]Creating Your Very Own x64 PE Packer](https://www.codeproject.com/Articles/5317556/Creating-Your-Very-Own-x64-PE-Packer-Protector-fro)
[[NIX]Making ELF Packer For Fun Part 1](http://aassfxxx.infos.st/making-elf-packer-for-fun-and-chocapicz.html)
[[NIX]Making ELF Packer For Fun Part 2](http://aassfxxx.infos.st/making-elf-packer-for-fun-and-chocapicz-part-2.html)
[[NIX]Lin64.M4rx: How to write a virtual machine in order to hide your viruses and break your brain forever](https://tmpout.sh/2/7.html)
[[NIX]MARX OF THE BEST](https://tmpout.sh/2/9.html)
[[NIX]A simple Linux Crypter](https://0x00sec.org/t/a-simple-linux-crypter/537)
[[NIX]PolyCrypt. Experiments on Self-Modifying Programs](https://0x00sec.org/t/polycrypt-experiments-on-self-modifying-programs/857)
[[NIX]Programming for Wanabes XIII. Crypters part I](https://0x00sec.org/t/programming-for-wanabes-xiii-crypters-part-i/27598)
[[NIX]Programming for Wannabes XIV. Crypters Part II](https://0x00sec.org/t/programming-for-wannabes-xiv-crypters-part-ii/27696)
[[NIX]Progamming for Wannabes XV. Crypters Part III](https://0x00sec.org/t/progamming-for-wannabes-xv-crypters-part-iii/27934)
[[NIX]IBI Crypter. A JIT Crypter PoC](https://0x00sec.org/t/ibi-crypter-a-jit-crypter-poc/1373)
[[WIN]Crypters - Instruments of the Underground](https://0x00sec.org/t/crypters-instruments-of-the-underground/386)

# Anti-Disassembly

[Anti-Disassembly techniques used by malware (a primer) 1](https://www.malwinator.com/2015/11/22/anti-disassembly-used-in-malware-a-primer/)
[Anti-Disassembly techniques used by malware (a primer) 2](https://www.malwinator.com/2015/11/27/anti-disassembly-techniques-used-by-malware-a-primer-part-2/)
[Anti-Disassembly Techniques and Mitigation](https://grazfather.github.io/posts/2016-09-18-anti-disassembly/)
[Assembly “wrapping”: a technique for anti-disassembly](https://www.exploit-db.com/docs/48717)
[The Return of Disassembly Desynchronization](https://yellowbyte.github.io/blog/2018/the_return_of_disassembly_desynchronization/)
[Polymorphic False-Disassembly Technique](https://tmpout.sh/1/6.html)

# Anti-Debug

[[WIN]Anti-Debug Tricks Wiki](https://anti-debug.checkpoint.com/)
[[WIN]The Ultimate Anti Debugging Reference](https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf)
[[WIN]Anti-Debugging Techniques and Mitigation](https://www.cs.utah.edu/~aburtsev/malw-sem/slides/02-anti-debugging.pdf)
[[WIN]Anti Debugging Protection Techniques with Examples](https://www.apriorit.com/dev-blog/367-anti-reverse-engineering-protection-techniques-to-use-before-releasing-software)
[[WIN]Windows Anti-Debug Reference](https://community.broadcom.com/symantecenterprise/communities/community-home/librarydocuments/viewdocument?DocumentKey=230d68b2-c80f-4436-9c09-ff84d049da33&amp;CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68&amp;tab=librarydocuments)
[[NIX]Beginner&#39;s Guide to Basic Linux Anti Anti Debugging Technique](https://www.stonedcoder.org/~kd/lib/14-61-1-PB.pdf)
[[NIX]Anti-Debug Techniques on Linux](https://reverseengineering.stackexchange.com/questions/43/anti-debug-techniques-on-unix-platforms)
[Advanced Techniques For Anti-Debugging](https://libstore.ugent.be/fulltxt/RUG01/002/367/296/RUG01-002367296_2017_0001_AC.pdf)
[[WIN]Process on a diet: anti-debug using job objects](https://secret.club/2021/01/20/diet-process.html)
[[WIN]New year, new anti-debug: Don&#39;t Thread On Me](https://secret.club/2021/01/04/thread-stuff.html)
[Five Anti-Analysis Tricks That Sometimes Fool Analysts](https://blog.malwarebytes.com/threat-analysis/2014/09/five-anti-debugging-tricks-that-sometimes-fool-analysts/)
[[WIN]Preventing memory inspection on Windows](https://secret.club/2021/05/23/big-memory.html)
[[NIX]A short note on entrypoint obscuring in ELF binaries](https://tmpout.sh/2/2.html)
[[WIN] Catching Debuggers with Section Hashing](https://malwareandstuff.com/catching-debuggers-with-section-hashing)

# VM/Sandbox Detection

[[WIN]Playing with GuLoader Anti-VM techniques](https://www.blueliv.com/cyber-security-and-cyber-threat-intelligence-blog-blueliv/research/playing-with-guloader-anti-vm-techniques-malware/)
[Malware Anti-VM Techniques](https://www.cynet.com/evasion-techniques/malware-anti-vm-techniques/)
[Malware Evasion Techniques 2](https://www.deepinstinct.com/2019/10/29/malware-evasion-techniques-part-2-anti-vm-blog/)
[Malware Evasion Techniques 3](https://www.deepinstinct.com/2019/11/24/malware-evasion-techniques-part-3-anti-sandboxing/)
[[WIN]Evolution of Malware Sandbox Evasion Tactics – A Retrospective Study](https://www.mcafee.com/blogs/other-blogs/mcafee-labs/evolution-of-malware-sandbox-evasion-tactics-a-retrospective-study/)
[How does malware know the difference between the virtual world and the real world?](https://blog.talosintelligence.com/2009/10/how-does-malware-know-difference.html)
[[NIX]Easy Ways to Determine Virtualization Technology](https://www.baeldung.com/linux/determine-virtualization-tech)
[How anti-cheats detect system emulation](https://secret.club/2020/04/13/how-anti-cheats-detect-system-emulation.html)
[[WIN]Virtual Machines Detection Enhanced](https://www.heise.de/security/downloads/07/1/1/8/3/5/5/9/vmde.pdf)

# Source Code

[GitHub - LordNoteworthy/al-khaser: Public malware techniques used in the wild: Virtual Machine, Emulation, Debuggers, Sandbox detection.](https://github.com/LordNoteworthy/al-khaser)
[GitHub - waleedassar/antidebug: Collection Of Anti-Debugging Tricks](https://github.com/waleedassar/antidebug) 
[GitHub - ThomasThelen/Anti-Debugging: A collection of c++ programs that demonstrate common ways to detect the presence of an attached debugger.](https://github.com/ThomasThelen/Anti-Debugging)
[GitHub - a0rtega/pafish: Pafish is a testing tool that uses different techniques to detect virtual machines and malware analysis environments in the same way that malware families do](https://github.com/a0rtega/pafish)
[GitHub - scout-win/antivm.cpp](https://github.com/hackedteam/scout-win/blob/master/core-scout-win32/antivm.cpp)
[GitHub - therealdreg/anticuckoo: A tool to detect and crash Cuckoo Sandbox](https://github.com/therealdreg/anticuckoo)
[GitHub - ricardojrdez/anti-analysis-tricks: Bunch of techniques potentially used by malware to detect analysis environments](https://github.com/ricardojrdez/anti-analysis-tricks)
[GitHub - hfiref0x/VMDE: Source from VMDE paper, adapted to 2015](https://github.com/hfiref0x/VMDE)
[GitHub - kgretzky/obfusion: Obfusion - C++ X86 Code Obfuscation Library](https://github.com/kgretzky/obfusion)
[GitHub - kirschju/debugmenot: Collection of simple anti-debugging tricks for Linux](https://github.com/kirschju/debugmenot)
[GitHub - ex0dus-0x/menagerie: Cross-platform malware development library for anti-analysis techniques](https://github.com/ex0dus-0x/menagerie)
[Bitbucket - simplified-antire](https://bitbucket.org/fkie_cd_dare/simplifire.antire/src/master/)
[GitHub - vxunderground/Proof-of-Concept-Collection: Collection of open source Malware Techniques distributed online](https://github.com/vxunderground/Proof-of-Concept-Collection)
[GitHub - vxunderground/MalwareSourceCode: Collection of malware source code for a variety of platforms in an array of different programming languages.](https://github.com/vxunderground/MalwareSourceCode)
[GitHub - alichtman/malware-techniques: A collection of techniques commonly used in malware to accomplish core tasks.](https://github.com/alichtman/malware-techniques)
[GitHub - CheckPointSW/InviZzzible: InviZzzible is a tool for assessment of your virtual environments in an easy and reliable way.](https://github.com/CheckPointSW/InviZzzible)
[GitHub - eaglx/VMPROTECT: Obfuscation method using virtual machine.](https://github.com/eaglx/VMPROTECT)
[GitHub - Battelle/movfuscator: The single instruction C compiler](https://github.com/Battelle/movfuscator)

# Misc

[[WIN]Analysis, Anti-Analysis, Anti-Anti-Analysis: An Overview of the Evasive Malware Scenario](https://www.lasca.ic.unicamp.br/paulo/papers/2017-SBSeg-marcus.botacin-anti.anti.analysis.evasive.malware.pdf)
[Obfuscation Techniques](https://grazfather.github.io/posts/2016-10-12-obfuscation-techniques/)
[[OSX]Mac OS X Binary Protection](https://tgwbd.org/darwin/binaryprotection.html)
[[WIN] Anti Reverse Engineering](https://permalink.lanl.gov/object/tr?what=info:lanl-repo/lareport/LA-UR-18-25476)
[[WIN]Evasion Techniques Wiki](https://evasions.checkpoint.com/)
[[WIN]Malware Evasion 1](https://www.deepinstinct.com/2019/09/15/malware-evasion-techniques-part-1-process-injection-and-manipulation/)
[Evasive Techniques: An Introduction](https://litigationconferences.com/wp-content/uploads/2017/05/Introduction-to-Evasive-Techniques-v1.0.pdf)
[[WIN]Anti–Reverse Engineering Techniques Employed by Malware](https://www.ijitee.org/wp-content/uploads/papers/v8i6s3/F10670486S319.pdf)
[Hiding Process Memory Via Anti-Forensic Techniques](https://www.sciencedirect.com/science/article/pii/S2666281720302614)
[[NIX]Hiding Call To Ptrace](https://yellowbyte.github.io/blog/2018/hiding-call-to-ptrace/)
[[WIN]Anti-Reverse Engineering Guide](https://forum.tuts4you.com/files/file/1218-anti-reverse-engineering-guide/)
[[NIX]Programming Linux Anti-Reversing Techniques](https://leanpub.com/anti-reverse-engineering-linux)
[Malicious cryptography techniques for unreversable (malicious or not) binaries](https://arxiv.org/pdf/1009.4000.pdf)
[Malware Armoring: The case against incident related binary analysis](https://www.ma.rhul.ac.uk/static/techrep/2012/MA-2012-10.pdf)
[[WIN]Hiding execution of unsigned code in system threads](https://secret.club/2021/01/12/callout.html)
[[WIN]Lets Create An EDR… And Bypass It! Part 1](https://ethicalchaos.dev/2020/05/27/lets-create-an-edr-and-bypass-it-part-1/)
[[WIN]Lets Create An EDR… And Bypass It! Part 2](https://ethicalchaos.dev/2020/06/14/lets-create-an-edr-and-bypass-it-part-2/)
[[WIN]AV Bypass](https://book.hacktricks.xyz/windows/av-bypass)
[[WIN]Defending Your Malware](https://blog.dylan.codes/defending-your-malware/)
[[NIX]Exploring a New Detection Evasion Technique on Linux](https://codemuch.tech/2021/02/25/exploring-linux-evasion/)
[[WIN]Anatomy of a simple and popular packer](https://fumik0.com/2021/04/24/anatomy-of-a-simple-and-popular-packer/)
[[WIN]Funtastic Packers And Where To Find Them](https://elis531989.medium.com/funtastic-packers-and-where-to-find-them-41429a7ef9a7)
[[NIX]Lin64.Eng3ls: Some anti-RE techniques in a Linux virus](https://tmpout.sh/1/7.html)
[[NIX]GONE IN 360 SECONDS Linux/Retaliation](https://tmpout.sh/1/14.html)
[UPX Anti-Unpacking Techniques in IoT Malware - CUJO AI](https://cujo.com/upx-anti-unpacking-techniques-in-iot-malware/)
[Fully Undetectable Malware](https://www.exploit-db.com/docs/42250)
[Control Flow Obfuscation](https://www.exploit-db.com/docs/30710)
[Bypassing Anti-Analysis of Commercial Protector Methods Using DBI Tools](https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9312198)
[Microblogging: From an obfuscated function to a synthesized LLVM IR](https://github.com/JonathanSalwan/Triton/issues/1078)
[[WIN]Anti-forensic and File-less Malware](https://0x00sec.org/t/anti-forensic-and-file-less-malware/10008)</description>
    
    <lastBuildDate>Fri, 22 Jul 2022 15:57:38 +0000</lastBuildDate>
    <category>Wiki</category>
    <atom:link href="https://0x00sec.org/t/binary-armory-wiki/25679.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Binary Armory Wiki</title>
        <dc:creator><![CDATA[dasha]]></dc:creator>
        <description><![CDATA[
            <p>I had to make an account just to say thank you for this. I’m just getting into this particular area of programming and this is excellent.</p>
          <p><a href="https://0x00sec.org/t/binary-armory-wiki/25679/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-armory-wiki/25679/13</link>
        <pubDate>Fri, 22 Jul 2022 15:57:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25679-13</guid>
        <source url="https://0x00sec.org/t/binary-armory-wiki/25679.rss">Binary Armory Wiki</source>
      </item>
      <item>
        <title>Binary Armory Wiki</title>
        <dc:creator><![CDATA[venox]]></dc:creator>
        <description><![CDATA[
            <p>You are a national treasure, many thanx !!</p>
          <p><a href="https://0x00sec.org/t/binary-armory-wiki/25679/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-armory-wiki/25679/11</link>
        <pubDate>Mon, 11 Apr 2022 14:03:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25679-11</guid>
        <source url="https://0x00sec.org/t/binary-armory-wiki/25679.rss">Binary Armory Wiki</source>
      </item>
      <item>
        <title>Binary Armory Wiki</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Fantastic compilation! Nice post!</p>
          <p><a href="https://0x00sec.org/t/binary-armory-wiki/25679/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-armory-wiki/25679/10</link>
        <pubDate>Wed, 09 Feb 2022 01:36:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25679-10</guid>
        <source url="https://0x00sec.org/t/binary-armory-wiki/25679.rss">Binary Armory Wiki</source>
      </item>
      <item>
        <title>Binary Armory Wiki</title>
        <dc:creator><![CDATA[vict0ni]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/binary-armory-wiki/25679/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-armory-wiki/25679/9</link>
        <pubDate>Sat, 22 Jan 2022 09:43:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25679-9</guid>
        <source url="https://0x00sec.org/t/binary-armory-wiki/25679.rss">Binary Armory Wiki</source>
      </item>
      <item>
        <title>Binary Armory Wiki</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/binary-armory-wiki/25679/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-armory-wiki/25679/8</link>
        <pubDate>Sun, 15 Aug 2021 16:04:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25679-8</guid>
        <source url="https://0x00sec.org/t/binary-armory-wiki/25679.rss">Binary Armory Wiki</source>
      </item>
      <item>
        <title>Binary Armory Wiki</title>
        <dc:creator><![CDATA[dcybergeek]]></dc:creator>
        <description><![CDATA[
            <p>This is a nice and useful compilation , thank you for it OP!</p>
          <p><a href="https://0x00sec.org/t/binary-armory-wiki/25679/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-armory-wiki/25679/7</link>
        <pubDate>Sat, 07 Aug 2021 08:33:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25679-7</guid>
        <source url="https://0x00sec.org/t/binary-armory-wiki/25679.rss">Binary Armory Wiki</source>
      </item>
      <item>
        <title>Binary Armory Wiki</title>
        <dc:creator><![CDATA[vict0ni]]></dc:creator>
        <description><![CDATA[
            <p>Hey <a class="mention" href="https://0x00sec.org/u/moazaki">@Moazaki</a>! Glad you found us here <img src="https://0x00sec.org/images/emoji/twitter/grinning_face_with_smiling_eyes.png?v=9" title=":grinning_face_with_smiling_eyes:" class="emoji" alt=":grinning_face_with_smiling_eyes:"> You can join us all in our <a href="https://discord.gg/c6BHVfn">Discord server</a>. I’m sure everyone will be happy to help you out. Also, check out our <a href="https://0x00sec.org/t/new-faq-and-regarding-trivial-short-forum-posts/26236">FAQ</a>. You might find interesting link and directions there <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/binary-armory-wiki/25679/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-armory-wiki/25679/6</link>
        <pubDate>Thu, 29 Jul 2021 11:22:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25679-6</guid>
        <source url="https://0x00sec.org/t/binary-armory-wiki/25679.rss">Binary Armory Wiki</source>
      </item>
      <item>
        <title>Binary Armory Wiki</title>
        <dc:creator><![CDATA[Moazaki]]></dc:creator>
        <description><![CDATA[
            <p>This is an amazing index, ty! I’m a beginner when it comes to this so I’d appreciate if I could talk to you about some low level stuff and advice for beginners, would you be interested? How can I contact you? I tried messaging you on the forum but it doesn’t allow it</p>
          <p><a href="https://0x00sec.org/t/binary-armory-wiki/25679/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-armory-wiki/25679/5</link>
        <pubDate>Wed, 28 Jul 2021 20:57:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25679-5</guid>
        <source url="https://0x00sec.org/t/binary-armory-wiki/25679.rss">Binary Armory Wiki</source>
      </item>
      <item>
        <title>Binary Armory Wiki</title>
        <dc:creator><![CDATA[crimsonRain]]></dc:creator>
        <description><![CDATA[
            <p>No, I don’t mind. In fact, contributions are welcome, so feel free.</p>
          <p><a href="https://0x00sec.org/t/binary-armory-wiki/25679/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-armory-wiki/25679/4</link>
        <pubDate>Sun, 18 Apr 2021 08:48:42 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25679-4</guid>
        <source url="https://0x00sec.org/t/binary-armory-wiki/25679.rss">Binary Armory Wiki</source>
      </item>
      <item>
        <title>Binary Armory Wiki</title>
        <dc:creator><![CDATA[c0z]]></dc:creator>
        <description><![CDATA[
            <p>I’m organizing some notes and will try to contribute here when I can. <a class="mention" href="https://0x00sec.org/u/crimsonrain">@crimsonRain</a> Do you mind if I send you my bookmarks that I have organized and you can sift through them?</p>
          <p><a href="https://0x00sec.org/t/binary-armory-wiki/25679/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-armory-wiki/25679/3</link>
        <pubDate>Sun, 18 Apr 2021 06:24:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25679-3</guid>
        <source url="https://0x00sec.org/t/binary-armory-wiki/25679.rss">Binary Armory Wiki</source>
      </item>
      <item>
        <title>Binary Armory Wiki</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            <p>This is a nice compilation , thank you</p>
          <p><a href="https://0x00sec.org/t/binary-armory-wiki/25679/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-armory-wiki/25679/2</link>
        <pubDate>Fri, 16 Apr 2021 05:02:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25679-2</guid>
        <source url="https://0x00sec.org/t/binary-armory-wiki/25679.rss">Binary Armory Wiki</source>
      </item>
      <item>
        <title>Binary Armory Wiki</title>
        <dc:creator><![CDATA[crimsonRain]]></dc:creator>
        <description><![CDATA[
            <p>A compilation of resources to classical AntiRE techniques I’ve collected over time. Note that some resources may seem to be redundant but are added for the sake of completeness. Feel free to add any if you wish.</p>
<h1>
<a name="packersobfuscatorsvms-1" class="anchor" href="https://0x00sec.org#packersobfuscatorsvms-1"></a>Packers/Obfuscators/VMs</h1>
<p><a href="https://medium.com/@polarply/build-your-first-llvm-obfuscator-80d16583392b" rel="noopener nofollow ugc">Build your first LLVM Obfuscator</a><br>
<a href="https://www.praetorian.com/blog/extending-llvm-for-code-obfuscation-part-1/" rel="noopener nofollow ugc">Extending LLVM for Code Obfuscation 1</a><br>
<a href="https://www.praetorian.com/blog/extending-llvm-for-code-obfuscation-part-2/" rel="noopener nofollow ugc">Extending LLVM for Code Obfuscation 2</a><br>
<a href="https://www.apriorit.com/dev-blog/687-reverse-engineering-llvm-obfuscation" rel="noopener nofollow ugc">Using LLVM to Obfuscate Your Code During Compilation</a><br>
<a href="https://blog.quarkslab.com/turning-regular-code-into-atrocities-with-llvm.html" rel="noopener nofollow ugc">Turning Regular Code Into Atrocities With LLVM </a><br>
<a href="http://www.rohitab.com/discuss/index.php?app=core&amp;module=attach&amp;section=attach&amp;attach_id=4507" rel="noopener nofollow ugc">[WIN]Simple Packer in C</a><br>
<a href="https://bidouillesecurity.com/tutorial-writing-a-pe-packer-intro/" rel="noopener nofollow ugc">[WIN]Writing a PE packer series</a><br>
<a href="https://dl.packetstormsecurity.net/papers/general/Using_UPX_as_a_security_packer.pdf" rel="noopener nofollow ugc">Using UPX as a security packer</a><br>
<a href="https://www.stonedcoder.org/~kd/lib/61-267-1-PB.pdf" rel="noopener nofollow ugc">[WIN]How to Write Your Own Packer</a><br>
<a href="https://fasterthanli.me/series/making-our-own-executable-packer" rel="noopener nofollow ugc">[NIX]Making our own executable packer</a><br>
<a href="https://www.codeproject.com/Articles/5317556/Creating-Your-Very-Own-x64-PE-Packer-Protector-fro" rel="noopener nofollow ugc">[WIN]Creating Your Very Own x64 PE Packer</a><br>
<a href="http://aassfxxx.infos.st/making-elf-packer-for-fun-and-chocapicz.html" rel="noopener nofollow ugc">[NIX]Making ELF Packer For Fun Part 1</a><br>
<a href="http://aassfxxx.infos.st/making-elf-packer-for-fun-and-chocapicz-part-2.html" rel="noopener nofollow ugc">[NIX]Making ELF Packer For Fun Part 2</a><br>
<a href="https://tmpout.sh/2/7.html" rel="noopener nofollow ugc">[NIX]Lin64.M4rx: How to write a virtual machine in order to hide your viruses and break your brain forever</a><br>
<a href="https://tmpout.sh/2/9.html" rel="noopener nofollow ugc">[NIX]MARX OF THE BEST</a><br>
<a href="https://0x00sec.org/t/a-simple-linux-crypter/537">[NIX]A simple Linux Crypter</a><br>
<a href="https://0x00sec.org/t/polycrypt-experiments-on-self-modifying-programs/857">[NIX]PolyCrypt. Experiments on Self-Modifying Programs</a><br>
<a href="https://0x00sec.org/t/programming-for-wanabes-xiii-crypters-part-i/27598">[NIX]Programming for Wanabes XIII. Crypters part I</a><br>
<a href="https://0x00sec.org/t/programming-for-wannabes-xiv-crypters-part-ii/27696">[NIX]Programming for Wannabes XIV. Crypters Part II</a><br>
<a href="https://0x00sec.org/t/progamming-for-wannabes-xv-crypters-part-iii/27934">[NIX]Progamming for Wannabes XV. Crypters Part III</a><br>
<a href="https://0x00sec.org/t/ibi-crypter-a-jit-crypter-poc/1373">[NIX]IBI Crypter. A JIT Crypter PoC</a><br>
<a href="https://0x00sec.org/t/crypters-instruments-of-the-underground/386">[WIN]Crypters - Instruments of the Underground</a></p>
<h1>
<a name="anti-disassembly-2" class="anchor" href="https://0x00sec.org#anti-disassembly-2"></a>Anti-Disassembly</h1>
<p><a href="https://www.malwinator.com/2015/11/22/anti-disassembly-used-in-malware-a-primer/" rel="noopener nofollow ugc">Anti-Disassembly techniques used by malware (a primer) 1</a><br>
<a href="https://www.malwinator.com/2015/11/27/anti-disassembly-techniques-used-by-malware-a-primer-part-2/" rel="noopener nofollow ugc">Anti-Disassembly techniques used by malware (a primer) 2</a><br>
<a href="https://grazfather.github.io/posts/2016-09-18-anti-disassembly/" rel="noopener nofollow ugc">Anti-Disassembly Techniques and Mitigation</a><br>
<a href="https://www.exploit-db.com/docs/48717" rel="noopener nofollow ugc">Assembly “wrapping”: a technique for anti-disassembly</a><br>
<a href="https://yellowbyte.github.io/blog/2018/the_return_of_disassembly_desynchronization/" rel="noopener nofollow ugc">The Return of Disassembly Desynchronization</a><br>
<a href="https://tmpout.sh/1/6.html" rel="noopener nofollow ugc">Polymorphic False-Disassembly Technique</a></p>
<h1>
<a name="anti-debug-3" class="anchor" href="https://0x00sec.org#anti-debug-3"></a>Anti-Debug</h1>
<p><a href="https://anti-debug.checkpoint.com/" rel="noopener nofollow ugc">[WIN]Anti-Debug Tricks Wiki</a><br>
<a href="https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf" rel="noopener nofollow ugc">[WIN]The Ultimate Anti Debugging Reference</a><br>
<a href="https://www.cs.utah.edu/~aburtsev/malw-sem/slides/02-anti-debugging.pdf" rel="noopener nofollow ugc">[WIN]Anti-Debugging Techniques and Mitigation</a><br>
<a href="https://www.apriorit.com/dev-blog/367-anti-reverse-engineering-protection-techniques-to-use-before-releasing-software" rel="noopener nofollow ugc">[WIN]Anti Debugging Protection Techniques with Examples</a><br>
<a href="https://community.broadcom.com/symantecenterprise/communities/community-home/librarydocuments/viewdocument?DocumentKey=230d68b2-c80f-4436-9c09-ff84d049da33&amp;CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68&amp;tab=librarydocuments" rel="noopener nofollow ugc">[WIN]Windows Anti-Debug Reference</a><br>
<a href="https://www.stonedcoder.org/~kd/lib/14-61-1-PB.pdf" rel="noopener nofollow ugc">[NIX]Beginner’s Guide to Basic Linux Anti Anti Debugging Technique</a><br>
<a href="https://reverseengineering.stackexchange.com/questions/43/anti-debug-techniques-on-unix-platforms" rel="noopener nofollow ugc">[NIX]Anti-Debug Techniques on Linux</a><br>
<a href="https://libstore.ugent.be/fulltxt/RUG01/002/367/296/RUG01-002367296_2017_0001_AC.pdf" rel="noopener nofollow ugc">Advanced Techniques For Anti-Debugging</a><br>
<a href="https://secret.club/2021/01/20/diet-process.html" rel="noopener nofollow ugc">[WIN]Process on a diet: anti-debug using job objects</a><br>
<a href="https://secret.club/2021/01/04/thread-stuff.html" rel="noopener nofollow ugc">[WIN]New year, new anti-debug: Don’t Thread On Me</a><br>
<a href="https://blog.malwarebytes.com/threat-analysis/2014/09/five-anti-debugging-tricks-that-sometimes-fool-analysts/" rel="noopener nofollow ugc">Five Anti-Analysis Tricks That Sometimes Fool Analysts</a><br>
<a href="https://secret.club/2021/05/23/big-memory.html" rel="noopener nofollow ugc">[WIN]Preventing memory inspection on Windows</a><br>
<a href="https://tmpout.sh/2/2.html" rel="noopener nofollow ugc">[NIX]A short note on entrypoint obscuring in ELF binaries</a><br>
<a href="https://malwareandstuff.com/catching-debuggers-with-section-hashing" rel="noopener nofollow ugc">[WIN] Catching Debuggers with Section Hashing</a></p>
<h1>
<a name="vmsandbox-detection-4" class="anchor" href="https://0x00sec.org#vmsandbox-detection-4"></a>VM/Sandbox Detection</h1>
<p><a href="https://www.blueliv.com/cyber-security-and-cyber-threat-intelligence-blog-blueliv/research/playing-with-guloader-anti-vm-techniques-malware/" rel="noopener nofollow ugc">[WIN]Playing with GuLoader Anti-VM techniques</a><br>
<a href="https://www.cynet.com/evasion-techniques/malware-anti-vm-techniques/" rel="noopener nofollow ugc">Malware Anti-VM Techniques</a><br>
<a href="https://www.deepinstinct.com/2019/10/29/malware-evasion-techniques-part-2-anti-vm-blog/" rel="noopener nofollow ugc">Malware Evasion Techniques 2</a><br>
<a href="https://www.deepinstinct.com/2019/11/24/malware-evasion-techniques-part-3-anti-sandboxing/" rel="noopener nofollow ugc">Malware Evasion Techniques 3</a><br>
<a href="https://www.mcafee.com/blogs/other-blogs/mcafee-labs/evolution-of-malware-sandbox-evasion-tactics-a-retrospective-study/" rel="noopener nofollow ugc">[WIN]Evolution of Malware Sandbox Evasion Tactics – A Retrospective Study</a><br>
<a href="https://blog.talosintelligence.com/2009/10/how-does-malware-know-difference.html" rel="noopener nofollow ugc">How does malware know the difference between the virtual world and the real world?</a><br>
<a href="https://www.baeldung.com/linux/determine-virtualization-tech" rel="noopener nofollow ugc">[NIX]Easy Ways to Determine Virtualization Technology</a><br>
<a href="https://secret.club/2020/04/13/how-anti-cheats-detect-system-emulation.html" rel="noopener nofollow ugc">How anti-cheats detect system emulation</a><br>
<a href="https://www.heise.de/security/downloads/07/1/1/8/3/5/5/9/vmde.pdf" rel="noopener nofollow ugc">[WIN]Virtual Machines Detection Enhanced</a></p>
<h1>
<a name="source-code-5" class="anchor" href="https://0x00sec.org#source-code-5"></a>Source Code</h1>
<p><a href="https://github.com/LordNoteworthy/al-khaser" rel="noopener nofollow ugc">GitHub - LordNoteworthy/al-khaser: Public malware techniques used in the wild: Virtual Machine, Emulation, Debuggers, Sandbox detection.</a><br>
<a href="https://github.com/waleedassar/antidebug" rel="noopener nofollow ugc">GitHub - waleedassar/antidebug: Collection Of Anti-Debugging Tricks</a><br>
<a href="https://github.com/ThomasThelen/Anti-Debugging" rel="noopener nofollow ugc">GitHub - ThomasThelen/Anti-Debugging: A collection of c++ programs that demonstrate common ways to detect the presence of an attached debugger.</a><br>
<a href="https://github.com/a0rtega/pafish" rel="noopener nofollow ugc">GitHub - a0rtega/pafish: Pafish is a testing tool that uses different techniques to detect virtual machines and malware analysis environments in the same way that malware families do</a><br>
<a href="https://github.com/hackedteam/scout-win/blob/master/core-scout-win32/antivm.cpp" rel="noopener nofollow ugc">GitHub - scout-win/antivm.cpp</a><br>
<a href="https://github.com/therealdreg/anticuckoo" rel="noopener nofollow ugc">GitHub - therealdreg/anticuckoo: A tool to detect and crash Cuckoo Sandbox</a><br>
<a href="https://github.com/ricardojrdez/anti-analysis-tricks" rel="noopener nofollow ugc">GitHub - ricardojrdez/anti-analysis-tricks: Bunch of techniques potentially used by malware to detect analysis environments</a><br>
<a href="https://github.com/hfiref0x/VMDE" rel="noopener nofollow ugc">GitHub - hfiref0x/VMDE: Source from VMDE paper, adapted to 2015</a><br>
<a href="https://github.com/kgretzky/obfusion" rel="noopener nofollow ugc">GitHub - kgretzky/obfusion: Obfusion - C++ X86 Code Obfuscation Library</a><br>
<a href="https://github.com/kirschju/debugmenot" rel="noopener nofollow ugc">GitHub - kirschju/debugmenot: Collection of simple anti-debugging tricks for Linux</a><br>
<a href="https://github.com/ex0dus-0x/menagerie" rel="noopener nofollow ugc">GitHub - ex0dus-0x/menagerie: Cross-platform malware development library for anti-analysis techniques</a><br>
<a href="https://bitbucket.org/fkie_cd_dare/simplifire.antire/src/master/" rel="noopener nofollow ugc">Bitbucket - simplified-antire</a><br>
<a href="https://github.com/vxunderground/Proof-of-Concept-Collection" rel="noopener nofollow ugc">GitHub - vxunderground/Proof-of-Concept-Collection: Collection of open source Malware Techniques distributed online</a><br>
<a href="https://github.com/vxunderground/MalwareSourceCode" rel="noopener nofollow ugc">GitHub - vxunderground/MalwareSourceCode: Collection of malware source code for a variety of platforms in an array of different programming languages.</a><br>
<a href="https://github.com/alichtman/malware-techniques" rel="noopener nofollow ugc">GitHub - alichtman/malware-techniques: A collection of techniques commonly used in malware to accomplish core tasks.</a><br>
<a href="https://github.com/CheckPointSW/InviZzzible" rel="noopener nofollow ugc">GitHub - CheckPointSW/InviZzzible: InviZzzible is a tool for assessment of your virtual environments in an easy and reliable way.</a><br>
<a href="https://github.com/eaglx/VMPROTECT" rel="noopener nofollow ugc">GitHub - eaglx/VMPROTECT: Obfuscation method using virtual machine.</a><br>
<a href="https://github.com/Battelle/movfuscator" rel="noopener nofollow ugc">GitHub - Battelle/movfuscator: The single instruction C compiler</a></p>
<h1>
<a name="misc-6" class="anchor" href="https://0x00sec.org#misc-6"></a>Misc</h1>
<p><a href="https://www.lasca.ic.unicamp.br/paulo/papers/2017-SBSeg-marcus.botacin-anti.anti.analysis.evasive.malware.pdf" rel="noopener nofollow ugc">[WIN]Analysis, Anti-Analysis, Anti-Anti-Analysis: An Overview of the Evasive Malware Scenario</a><br>
<a href="https://grazfather.github.io/posts/2016-10-12-obfuscation-techniques/" rel="noopener nofollow ugc">Obfuscation Techniques</a><br>
<a href="https://tgwbd.org/darwin/binaryprotection.html" rel="noopener nofollow ugc">[OSX]Mac OS X Binary Protection</a><br>
<a href="https://permalink.lanl.gov/object/tr?what=info:lanl-repo/lareport/LA-UR-18-25476" rel="noopener nofollow ugc">[WIN] Anti Reverse Engineering</a><br>
<a href="https://evasions.checkpoint.com/" rel="noopener nofollow ugc">[WIN]Evasion Techniques Wiki</a><br>
<a href="https://www.deepinstinct.com/2019/09/15/malware-evasion-techniques-part-1-process-injection-and-manipulation/" rel="noopener nofollow ugc">[WIN]Malware Evasion 1</a><br>
<a href="https://litigationconferences.com/wp-content/uploads/2017/05/Introduction-to-Evasive-Techniques-v1.0.pdf" rel="noopener nofollow ugc">Evasive Techniques: An Introduction</a><br>
<a href="https://www.ijitee.org/wp-content/uploads/papers/v8i6s3/F10670486S319.pdf" rel="noopener nofollow ugc">[WIN]Anti–Reverse Engineering Techniques Employed by Malware</a><br>
<a href="https://www.sciencedirect.com/science/article/pii/S2666281720302614" rel="noopener nofollow ugc">Hiding Process Memory Via Anti-Forensic Techniques</a><br>
<a href="https://yellowbyte.github.io/blog/2018/hiding-call-to-ptrace/" rel="noopener nofollow ugc">[NIX]Hiding Call To Ptrace</a><br>
<a href="https://forum.tuts4you.com/files/file/1218-anti-reverse-engineering-guide/" rel="noopener nofollow ugc">[WIN]Anti-Reverse Engineering Guide</a><br>
<a href="https://leanpub.com/anti-reverse-engineering-linux" rel="noopener nofollow ugc">[NIX]Programming Linux Anti-Reversing Techniques</a><br>
<a href="https://arxiv.org/pdf/1009.4000.pdf" rel="noopener nofollow ugc">Malicious cryptography techniques for unreversable (malicious or not) binaries</a><br>
<a href="https://www.ma.rhul.ac.uk/static/techrep/2012/MA-2012-10.pdf" rel="noopener nofollow ugc">Malware Armoring: The case against incident related binary analysis</a><br>
<a href="https://secret.club/2021/01/12/callout.html" rel="noopener nofollow ugc">[WIN]Hiding execution of unsigned code in system threads</a><br>
<a href="https://ethicalchaos.dev/2020/05/27/lets-create-an-edr-and-bypass-it-part-1/" rel="noopener nofollow ugc">[WIN]Lets Create An EDR… And Bypass It! Part 1</a><br>
<a href="https://ethicalchaos.dev/2020/06/14/lets-create-an-edr-and-bypass-it-part-2/" rel="noopener nofollow ugc">[WIN]Lets Create An EDR… And Bypass It! Part 2</a><br>
<a href="https://book.hacktricks.xyz/windows/av-bypass" rel="noopener nofollow ugc">[WIN]AV Bypass</a><br>
<a href="https://blog.dylan.codes/defending-your-malware/" rel="noopener nofollow ugc">[WIN]Defending Your Malware</a><br>
<a href="https://codemuch.tech/2021/02/25/exploring-linux-evasion/" rel="noopener nofollow ugc">[NIX]Exploring a New Detection Evasion Technique on Linux</a><br>
<a href="https://fumik0.com/2021/04/24/anatomy-of-a-simple-and-popular-packer/" rel="noopener nofollow ugc">[WIN]Anatomy of a simple and popular packer</a><br>
<a href="https://elis531989.medium.com/funtastic-packers-and-where-to-find-them-41429a7ef9a7" rel="noopener nofollow ugc">[WIN]Funtastic Packers And Where To Find Them</a><br>
<a href="https://tmpout.sh/1/7.html" rel="noopener nofollow ugc">[NIX]Lin64.Eng3ls: Some anti-RE techniques in a Linux virus</a><br>
<a href="https://tmpout.sh/1/14.html" rel="noopener nofollow ugc">[NIX]GONE IN 360 SECONDS Linux/Retaliation</a><br>
<a href="https://cujo.com/upx-anti-unpacking-techniques-in-iot-malware/" rel="noopener nofollow ugc">UPX Anti-Unpacking Techniques in IoT Malware - CUJO AI</a><br>
<a href="https://www.exploit-db.com/docs/42250" rel="noopener nofollow ugc">Fully Undetectable Malware</a><br>
<a href="https://www.exploit-db.com/docs/30710" rel="noopener nofollow ugc">Control Flow Obfuscation</a><br>
<a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9312198" rel="noopener nofollow ugc">Bypassing Anti-Analysis of Commercial Protector Methods Using DBI Tools</a><br>
<a href="https://github.com/JonathanSalwan/Triton/issues/1078" rel="noopener nofollow ugc">Microblogging: From an obfuscated function to a synthesized LLVM IR</a><br>
<a href="https://0x00sec.org/t/anti-forensic-and-file-less-malware/10008">[WIN]Anti-forensic and File-less Malware</a></p>
          <p><a href="https://0x00sec.org/t/binary-armory-wiki/25679/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-armory-wiki/25679/1</link>
        <pubDate>Fri, 16 Apr 2021 00:03:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25679-1</guid>
        <source url="https://0x00sec.org/t/binary-armory-wiki/25679.rss">Binary Armory Wiki</source>
      </item>
  </channel>
</rss>
