<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>My CrackMe solving</title>
    <link>https://0x00sec.org/t/my-crackme-solving/16033</link>
    <description>since no one replied my challenge https://0x00sec.org/t/crack-me-10/15920, i do it myself

[details=&quot;What compiler&quot;]


i use Exeinfo (SCRE plugin)
![image|482x448,75%](upload://l4yeGOhuXNeM92taKEWx5rpycuK.png) ![%D0%90%D0%BD%D0%BD%D0%BE%D1%82%D0%B0%D1%86%D0%B8%D1%8F%202019-09-04%20193719|487x293,75%](upload://qebs1d4T0I99v6nMCjC7KFgbGSk.jpeg) 

2 clue is a large number of strings go format

![image|430x500,75%](upload://bz9uYkDjE8tj4Q9AbNmj4FkVrtJ.png) 

program written on Go.

[/details]
# Reversing with IDA
Load sample to ida, after few minutes you see this ![%D0%90%D0%BD%D0%BD%D0%BE%D1%82%D0%B0%D1%86%D0%B8%D1%8F%202019-09-04%20184512|690x377](upload://h5tE9cEQkgTw0UmJVRy4d9jM1St.jpeg) 
What i going to do first is load [this](https://github.com/sibears/IDAGolangHelper) python script
![image|277x458,75%](upload://hYwFcgkGqCbz1RHoT68McG1aHEo.png) ![image|273x448,75%](upload://sxvHVIZ3qVj9KYDq8ZtzcTZiXNE.png) 
this better
![image|690x377](upload://qErgpXABnB72LoQz5wlkFIaf4lF.jpeg) 

![image|690x37,100%](upload://tQsvj98OuMgQIYXPT0fcJsc8uXw.png)
`23` line in decompiled code looks interesting, google it
![image|466x500](upload://uuqjWXXvRMK8Mh0278THdKAtt7R.png) 
`Wails a framework for building desktop applications using Go &amp; Web Technologies`
let&#39;s look at an [example](https://wails.app/quick_start.html#high-level-overview)
![image|401x500](upload://eihAE8mIKM7oSvuT2WFrm2RLonA.png) 
find Run function 
![image|383x55](upload://rPZCfKeNBJxQFSB9j7iN0BFJaLt.png) 
and xrefs at her
![image|690x241,100%](upload://zsmbN6TOmGWViuyiDG29dfjBd89.png) 
`off_972CE0` address for higher-order functions
![image|455x15](upload://sCGJNrJp0uou0VxN66lWAxZub7H.png) 
this is classic string compare function in Go
![image|344x500](upload://xUReCe2Nqk8GX7rAdh0M653NCrm.png) 
after decompile 
![image|690x274](upload://xPma22YFpiLtYbijqYX6KRm4pxu.png) 
here `v2` is the length of the string, and hexadecimal values are the chunks of the string
![image|690x316](upload://hGmlCSfSYpSfmVJLGJqlfdCioD0.png)  
finally get the key
![image|690x90](upload://rEnIVzN9XlIDQHlW12kEuqU3oSg.png) 

![image|690x378](upload://yGjTWXttCAlb22GLLsG92CFOYdD.jpeg)</description>
    
    <lastBuildDate>Thu, 05 Sep 2019 14:08:07 +0000</lastBuildDate>
    <category>Challenges</category>
    <atom:link href="https://0x00sec.org/t/my-crackme-solving/16033.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>My CrackMe solving</title>
        <dc:creator><![CDATA[hlop]]></dc:creator>
        <description><![CDATA[
            <p>since no one replied my challenge <a href="https://0x00sec.org/t/crack-me-10/15920" class="inline-onebox">Crack Me [?/10]</a>, i do it myself</p>

What compiler <a href="https://0x00sec.org/t/my-crackme-solving/16033/1">(click for more details)</a>
<h1>Reversing with IDA</h1>
<p>Load sample to ida, after few minutes you see this <img src="https://0x00sec.s3.amazonaws.com/original/2X/7/77c37c9ffe01824fdb700a4237826d0698106c05.jpeg" alt="%D0%90%D0%BD%D0%BD%D0%BE%D1%82%D0%B0%D1%86%D0%B8%D1%8F%202019-09-04%20184512" data-base62-sha1="h5tE9cEQkgTw0UmJVRy4d9jM1St" width="690" height="377"><br>
What i going to do first is load <a href="https://github.com/sibears/IDAGolangHelper" rel="noopener nofollow ugc">this</a> python script<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7dfc803ab69484194f15ef90754dcc2c8668baf4.png" alt="image" data-base62-sha1="hYwFcgkGqCbz1RHoT68McG1aHEo" width="207" height="343"> <img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c806a27269e72ffa785cb737ecdf4ba0315efcd2.png" alt="image" data-base62-sha1="sxvHVIZ3qVj9KYDq8ZtzcTZiXNE" width="204" height="336"><br>
this better<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/b/bacac7d1d17e01d630800988b4305c95ea32ca37.jpeg" alt="image" data-base62-sha1="qErgpXABnB72LoQz5wlkFIaf4lF" width="690" height="377"></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d12d24099ccd2d5659fc25f80c66acf3814a0e22.png" alt="image" data-base62-sha1="tQsvj98OuMgQIYXPT0fcJsc8uXw" width="690" height="37"><br>
<code>23</code> line in decompiled code looks interesting, google it<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d5b1a74323b0a7226b23edd1cf04c762a84500b3.png" alt="image" data-base62-sha1="uuqjWXXvRMK8Mh0278THdKAtt7R" width="466" height="500"><br>
<code>Wails a framework for building desktop applications using Go &amp; Web Technologies</code><br>
letâ€™s look at an <a href="https://wails.app/quick_start.html#high-level-overview" rel="noopener nofollow ugc">example</a><br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/6/642f890d6ab4feedd95212e815014d2b304909ae.png" alt="image" data-base62-sha1="eihAE8mIKM7oSvuT2WFrm2RLonA" width="401" height="500"><br>
find Run function<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c31b4f39303119bddde85842f899e18b683650af.png" alt="image" data-base62-sha1="rPZCfKeNBJxQFSB9j7iN0BFJaLt" width="383" height="55"><br>
and xrefs at her<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/f/f880b7dd8f45e926fa259ba4b009eed1c5cf7f15.png" alt="image" data-base62-sha1="zsmbN6TOmGWViuyiDG29dfjBd89" width="690" height="241"><br>
<code>off_972CE0</code> address for higher-order functions<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c89c7969d824197a3b6275ebe6be4126397f80c9.png" alt="image" data-base62-sha1="sCGJNrJp0uou0VxN66lWAxZub7H" width="455" height="15"><br>
this is classic string compare function in Go<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/e/edb521ffcd12b1ee9546056172f27f3225dcc9c0.png" alt="image" data-base62-sha1="xUReCe2Nqk8GX7rAdh0M653NCrm" width="344" height="500"><br>
after decompile<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/e/ed15f00dc17b9a43ccd1803338fa6e7d3c4955a0.png" alt="image" data-base62-sha1="xPma22YFpiLtYbijqYX6KRm4pxu" width="690" height="274"><br>
here <code>v2</code> is the length of the string, and hexadecimal values are the chunks of the string<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7beecc0061f9f7f65fb606f21da1a7372286f542.png" alt="image" data-base62-sha1="hGmlCSfSYpSfmVJLGJqlfdCioD0" width="690" height="316"><br>
finally get the key<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c1cb4d5a0f78b65b6472d830d653956e3833ae2c.png" alt="image" data-base62-sha1="rEnIVzN9XlIDQHlW12kEuqU3oSg" width="690" height="90"></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/f3129ccd5c3e2f557cd96c1a799ffdb10632ac7d.jpeg" alt="image" data-base62-sha1="yGjTWXttCAlb22GLLsG92CFOYdD" width="690" height="378"></p>
          <p><a href="https://0x00sec.org/t/my-crackme-solving/16033/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-crackme-solving/16033/1</link>
        <pubDate>Wed, 04 Sep 2019 20:30:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-16033-1</guid>
        <source url="https://0x00sec.org/t/my-crackme-solving/16033.rss">My CrackMe solving</source>
      </item>
  </channel>
</rss>
