<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</title>
    <link>https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001</link>
    <description>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Hey Everyone, i was recently  browsing a anti-censorship &lt;a href=&quot;&amp;quot;https://github.com/danoctavian/awesome-anti-censorship&amp;quot;&quot;&gt;awesome list&lt;/a&gt; and i came across few tools with some really cool tricks to bypass SNI based filtering mechanisms, i think these tools deserves more attention and are really worth sharing so here we are.&lt;/p&gt;
&lt;h2 id=&quot;understanding-sni&quot;&gt;Understanding SNI&lt;/h2&gt;
&lt;p&gt;Before we dive into how these tools actually works lets understand what SNI is, SNI stands for Server Name Indication its a part of the TLS protocol (a header to be exact) which lets the webserver decide which TLS certificate has to be offered to a client when it is hosting multiple websites.
            Lets fire up wireshark and take a quick look at this SNI header, we will
use the filter &lt;code&gt;ssl.handshake.extension.type == &amp;quot;server_name&amp;quot;&lt;/code&gt; to make our lives easier and try connecting to 0x00sec.org, now wireshark should hide everything except the Client Hello packets which are sent during the TLS handshake, lets take a look...&lt;/p&gt;

![TLS-Client-Hello|601x500](upload://5hVquanLlgcZyNm74sHHP7BKoVj.png)


&lt;p&gt;expanding the server_name TLS extension reveals us the SNI header, now some of you must be wondering - isn&amp;#39;t TLS supposed encrypt everything ?, actually no lets see why. Say we have a webserver hosting a few sites (on the same ip) via plain HTTP, when a user requests a site the webserver just looks at the HTTP Host header field in the clients HTTP request serves up the appropriate site, everything works fine.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;========================
GET /index.html HTTP/&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;    _
&lt;span class=&quot;hljs-symbol&quot;&gt;Host:&lt;/span&gt; ctf&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;x00sec&lt;span class=&quot;hljs-meta&quot;&gt;.org&lt;/span&gt;        \              ======================
                              \             WEBSERVER (&lt;span class=&quot;hljs-number&quot;&gt;133.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.133&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.7&lt;/span&gt;)
                                ---------&amp;gt;    --server.conf--
========================      / &amp;lt;---------      ctf&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;x00sec&lt;span class=&quot;hljs-meta&quot;&gt;.org&lt;/span&gt; -&amp;gt;  /var/www/html/ctf
GET /index.html HTTP/&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;    _/                  &lt;span class=&quot;hljs-number&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;hljs-meta&quot;&gt;.org&lt;/span&gt;     -&amp;gt;  /var/www/html/forum
&lt;span class=&quot;hljs-symbol&quot;&gt;Host:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;hljs-meta&quot;&gt;.org&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now lets add TLS to the mix, to establish a TLS connection we first need the TLS certificates which are unique to each site&lt;sup&gt;1&lt;/sup&gt;, and to get the appropriate TLS certs we need to tell the server which site we are trying to connect to, this is where SNI comes in, it &amp;quot;indicates&amp;quot; what &amp;quot;server name&amp;quot; we are trying to connect to so that the server can give us the appropriate certificates, well now why is the SNI field unencrypted ?, thats simply because we havent established a secure connection yet and SNI is required to establish that secure connection in the first place! ( its somewhat like the chicken and egg problem). During the time in which SNI was introduced(around 2003), TLS simply did not want to deal with the overhead of coming up with a way to hide the SNI field and decided to let it be (in other words it was acceptable, a hostname was not really that confidential), the same TLS standard continue to be widely followed/used today.&lt;/p&gt;
&lt;h2 id=&quot;the-impact-of-unencrypted-snis&quot;&gt;The Impact Of Unencrypted SNIs&lt;/h2&gt;
&lt;p&gt;Blocking sites/services has been a favourite past time of many ISPs and governments around the world, in the early days everything was plaintext and intercepting proxies did the job, as networks grew in size and ssl started gaining popularity it became unrealistic to inspect traffic with proxies, everybody switched over to filtering DNS requests although this worked quite well for some time, with the advent of technologies like DoH(DNS over Https) and DoT(DNS over TLS) DNS filtering too became a thing of the past, when all hope seemed lost firewall vendors turned to that one part of TLS that remained unencrypted... SNI!!.&lt;/p&gt;
&lt;h2 id=&quot;how-sni-inspection-works&quot;&gt;How SNI Inspection Works&lt;/h2&gt;
&lt;p&gt;Lets say we want to connect to 0x00sec.org from our pc, the TCP connection would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                           [+------+------+]
OUR-PC [&lt;span class=&quot;hljs-number&quot;&gt;123.123&lt;/span&gt;&lt;span class=&quot;hljs-meta&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-meta&quot;&gt;.3&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;62123&lt;/span&gt; ] =============[F-I-R-E-W-A-L-L]============&amp;gt; [&lt;span class=&quot;hljs-number&quot;&gt;443&lt;/span&gt;  : &lt;span class=&quot;hljs-number&quot;&gt;133.7&lt;/span&gt;&lt;span class=&quot;hljs-meta&quot;&gt;.133&lt;/span&gt;&lt;span class=&quot;hljs-meta&quot;&gt;.7&lt;/span&gt;] 0x00sec.org
          Our &lt;span class=&quot;hljs-built_in&quot;&gt;Ip&lt;/span&gt;      Random               [+------+------+]              HTTPS    Servers &lt;span class=&quot;hljs-built_in&quot;&gt;Ip&lt;/span&gt;
                    Source Port                                       Standard Port
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The blocking process is fairly straight forward, every time a TLS client hello is sent, the firewall just extracts the SNI field(the hostname) from the packet and compares it against a blocklist, when a match is found the hello packet can simply be dropped preventing the client from establishing the TLS connection. Dropping TLS client hello&amp;#39;s as i mentioned before is only practical in smaller networks with limited traffic (i.e in cases of colleges, corporate networks), in case of ISPs inspecting and dropping packets on the gateway would be very costly and impractical due the heavy load ISPs generally are under, thus ISPs usually mirror the traffic&lt;sup&gt;2&lt;/sup&gt; into a inspection device, the inspecting device matches the extracted SNI field against a blocklist as well, but to block the traffic it forges a TCP reset packet with the ip and port of the server (in our case 133.7.133.7 and 443 ) and sends it to client (i.e 123.123.1.3 on port 62123), fooling the client into thinking that the server has terminated the TCP connection thus effectively preventing the client from further communicating with the server, this method might not be 100% accurate since the reset packet can get lost during transmission, but that is within a acceptable margin, this method is what makes censorship possible at the level of ISPs.&lt;/p&gt;
&lt;h2 id=&quot;bypassing-sni-inspection-a-review-of-techniques-used-for-circumvention&quot;&gt;Bypassing SNI Inspection - A Review of Techniques Used For Circumvention&lt;/h2&gt;
&lt;p&gt;Before we begin lets consider a simple representation of a TLS client hello packet for the sake of conversation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  +---------------------------+-----------------------------+
  | &lt;span class=&quot;hljs-type&quot;&gt;SRC&lt;/span&gt; IP: &lt;span class=&quot;hljs-number&quot;&gt;123.123&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.3&lt;/span&gt;       |     &lt;span class=&quot;hljs-type&quot;&gt;DST&lt;/span&gt; ISP: &lt;span class=&quot;hljs-number&quot;&gt;133.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.133&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.7&lt;/span&gt;    |     &lt;span class=&quot;hljs-type&quot;&gt;// IP&lt;/span&gt;
  +---------------------------+-----------------------------+
  | &lt;span class=&quot;hljs-type&quot;&gt;SRC&lt;/span&gt; PORT: &lt;span class=&quot;hljs-number&quot;&gt;45637&lt;/span&gt;           |     &lt;span class=&quot;hljs-type&quot;&gt;DST&lt;/span&gt; PORT: &lt;span class=&quot;hljs-number&quot;&gt;443&lt;/span&gt;           |     &lt;span class=&quot;hljs-type&quot;&gt;// TCP&lt;/span&gt;
  +---------------------------+-----------------------------+
  | &lt;span class=&quot;hljs-type&quot;&gt;TLS&lt;/span&gt; Ver |&lt;span class=&quot;hljs-type&quot;&gt;..TLS&lt;/span&gt;.Stuff....  | &lt;span class=&quot;hljs-type&quot;&gt;SNI&lt;/span&gt;:Server-Name: &lt;span class=&quot;hljs-number&quot;&gt;0x00&lt;/span&gt;sec.org|     &lt;span class=&quot;hljs-type&quot;&gt;// TLS&lt;/span&gt;  Client Hello  
  +---------------------------+-----------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;b&gt;1) Split the Client hello at SNI field :&lt;/b&gt; As i have mentioned before the filtering process is interested in the Server Name indicated by the SNI, this process expects the entire TLS Client Hello to be present in a single packet&lt;sup&gt;3&lt;/sup&gt;, to evade this filtering process we segment the TLS data in half such that SNI server name is not completely in one portion, we then transmit those portions as separate TCP segments. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SEGMENT &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: 
  +---------------------------+-----------------------------+
  | SRC IP: &lt;span class=&quot;hljs-number&quot;&gt;123.123&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.3&lt;/span&gt;       |     DST ISP: &lt;span class=&quot;hljs-number&quot;&gt;133.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.133&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.7&lt;/span&gt;    |     &lt;span class=&quot;hljs-comment&quot;&gt;// IP&lt;/span&gt;
  +---------------------------+-----------------------------+
  | SRC PORT: &lt;span class=&quot;hljs-number&quot;&gt;45637&lt;/span&gt;           |     DST PORT: &lt;span class=&quot;hljs-number&quot;&gt;443&lt;/span&gt;           |     &lt;span class=&quot;hljs-comment&quot;&gt;// TCP&lt;/span&gt;
  +---------------------------+-----------------------------+
  | TLS Ver |..TLS.Stuff....  |   SNI:Server-Name: &lt;span class=&quot;hljs-number&quot;&gt;0x00&lt;/span&gt;     |     &lt;span class=&quot;hljs-comment&quot;&gt;// Partial TLS Client Hello  &lt;/span&gt;
  +---------------------------+-----------------------------+
&lt;/code&gt;

&lt;code&gt;
  SEGMENT &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: 
  +---------------------------+-----------------------------+
  | SRC IP: &lt;span class=&quot;hljs-number&quot;&gt;123.123&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.3&lt;/span&gt;       |     DST ISP: &lt;span class=&quot;hljs-number&quot;&gt;133.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.133&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.7&lt;/span&gt;    |     &lt;span class=&quot;hljs-comment&quot;&gt;// IP&lt;/span&gt;
  +---------------------------+-----------------------------+
  | SRC PORT: &lt;span class=&quot;hljs-number&quot;&gt;45637&lt;/span&gt;           |     DST PORT: &lt;span class=&quot;hljs-number&quot;&gt;443&lt;/span&gt;           |     &lt;span class=&quot;hljs-comment&quot;&gt;// TCP&lt;/span&gt;
  +---------------------------+-----------------------------+
  | sec.org................................................ |     &lt;span class=&quot;hljs-comment&quot;&gt;// Partial TLS Client Hello  &lt;/span&gt;
  +---------------------------+-----------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  when the first TCP segment is seen by the filter, it would immediate recognize it as TLS Client hello since the first portion has the appropriate TLS application header, but when it extracts the SNI servername it only gets the partial hostname (ex: 0x00 instead of 0x00sec.org), since the partial hostname doesnt match against any of the blocklists the packet is let through, as far as the second segment is concerned it has no meaningfull application header and hence is not processed by the filter and let through.&lt;/p&gt;
&lt;p&gt; &lt;b&gt; 2) Split and send the client hello in random order :&lt;/b&gt; This is variation of the first method except we send the segments in reverse or random order&lt;sup&gt;4&lt;/sup&gt;, this is done in order to bypass certain filters which can reassemble segments but expects the segments to be sent in the right order.&lt;/p&gt;
&lt;p&gt;  &lt;b&gt;3) Use TCP window size to fragment the server hello :&lt;/b&gt; Most filtering processes only analyze outbound packets (i.e packets originating from clients, TLS client hello in our case), but there are a few which analyze inbound packets as well, in such a case if the server hello is analyzed, it would contain a &amp;quot;certificate common name&amp;quot; (which again is nothing but hostname for which the TLS certificate was issued), which might match against the blocklist. In this situation we need to achive something similar to the first technique but from the servers end, we thus advertise a small TCP Window size which would force the server to split the server hello across multiple TCP segments hence achieving evasion.&lt;/p&gt;
&lt;p&gt;  &lt;b&gt;4) Send Fake client hello with an allowed SNI, but with a TTL not long enough to reach server :&lt;/b&gt; In some scenarios, once a TLS client hello has been analyzed by the filter and allowed to pass, that particular TCP stream is ignored, any further inbound or outbound packets from that stream will not be analyzed, this is done inorder to reduce the amount of processing that a filter has to perform since a TLS client hello is sent only once per TLS session. We now can send a TLS client hello with a fake SNI-Server Name of a random allowed site (say wikipedia.org) but with a TTL(time to live) value just enough to reach the filter but not the actual server, thus effectively preventing our TCP stream from being further analyzed, now we can send the actual TLS client hello and go on with our business.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        ____________                      ____\ /____                      __^____^__
      &lt;span class=&quot;hljs-variable&quot;&gt;&amp;lt;[Your Machine]&amp;gt;&lt;/span&gt;                   |&lt;span class=&quot;hljs-string&quot;&gt;Your Router&lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt;                    [&lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt;Firewall&lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt;]          
  +-----------------------+        +-----------------------+        +-----------------------+
  &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; DST: 133.7.133.7      &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt;        &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; DST: 133.7.133.7      &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt;        &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; DST: 133.7.133.7      &lt;/span&gt;|
  |&lt;span class=&quot;hljs-string&quot;&gt; SNI: wiki.org &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; TTL: 3&lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt;  ====&amp;gt; &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; SNI: wiki.org &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; TTL: 2&lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt;  ====&amp;gt; &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; SNI: wiki.org &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; TTL: 1&lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; ===&amp;gt;&lt;/span&gt;|
  +-----------------------+        +-----------------------+        +-----------------------+    ||
                                                                                                 ||
  |&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;=============================================================================================&amp;lt;&lt;/span&gt;|
  ||&lt;span class=&quot;hljs-string&quot;&gt;   
  &lt;/span&gt;||&lt;span class=&quot;hljs-string&quot;&gt;    [[Some interm Router]]               [[ The Webserver - 0x00sec.org @ 133.7.133.7]]
  &lt;/span&gt;||&lt;span class=&quot;hljs-string&quot;&gt;  +-----------------------+             
  &lt;/span&gt;||&lt;span class=&quot;hljs-string&quot;&gt;  &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; DST: 133.7.133.7      &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt;   \/                  &amp;lt; packet doesnt arrive &amp;gt;
  &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt;==&amp;gt;&lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; SNI: wiki.org &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; TTL: 0&lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt;   /\
      +-----------------------+

          TTL Becomes Zero Packet 
                is dropped
&lt;/code&gt;&lt;/pre&gt; &lt;b&gt; 5) Corrupting the checksum :&lt;/b&gt; This is variation of the 4th technique, but here instead of using TTL to prevent the fake TLS client hello from reaching the server, we allow the client hello to reach the server, but we corrupt its checksum value, filters usually dont validate the checksum of packets to avoid overhead, but the client and server are fully compliant TCP implementations and will drop any packets with bad checksums, we can then send the real client hello and go on with our business. (This method has few caveats check note 5)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        ____________                      __^____^__                      
      &lt;span class=&quot;hljs-variable&quot;&gt;&amp;lt;[Your Machine]&amp;gt;&lt;/span&gt;                   [|&lt;span class=&quot;hljs-string&quot;&gt;Firewall&lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt;]              [[ Webserver - 0x00sec.org]] 
  +-----------------------+        +-----------------------+        +-----------------------+
  &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; DST: 133.7.133.7      &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt;        &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; DST: 133.7.133.7      &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt;        &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; DST: 133.7.133.7      &lt;/span&gt;|
  |&lt;span class=&quot;hljs-string&quot;&gt; SNI: wiki.us&lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; BADCHKSM&lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt;  ====&amp;gt; &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; SNI: wiki.us&lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; BADCHKSM&lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt;  ====&amp;gt; &lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; SNI: wiki.us&lt;/span&gt;|&lt;span class=&quot;hljs-string&quot;&gt; BADCHKSM&lt;/span&gt;|
  +-----------------------+        +-----------------------+        +-----------------------+

                                   . wiki.us is not blocked          \/   Packet has bad         
                                     allow packet to pass            /\   checksum drop it

                                   . Further packets from the
                                     TCP stream is no longer
                                     processed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These are the most common techniques used by circumvention tools, but there are many others, one of tools Geneva
goes the extra mile by developing tailored bypass mechanisms depending on the censor, Geneva is really cool project and you can read more about it &lt;a href=&quot;https://geneva.cs.umd.edu/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;attempts-to-solve-the-unencrypted-sni-problem&quot;&gt;Attempts To Solve The Unencrypted SNI Problem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ESNI/ECH (Encrypted SNI/ Encrypted Client Hello): There are RFC drafts discussing these possibilities but there are also legitmate concerns regarding their implementation, ESNI/ECH would completely blind firewall and other filtering devices in educational institutions, SNI also serves as a possible IOC for SEIMs, but it is possible to block ESNI/ECH and force the client to fall back to regular methods, The Great Firewall has been observed doing this &lt;a href=&quot;https://geneva.cs.umd.edu/posts/china-censors-esni/esni/&quot;&gt;since mid 2020&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;alternative-use-cases-of-these-tools&quot;&gt;Alternative Use Cases Of These Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In pentest, red teaming scenarios : &lt;ul&gt;
&lt;li&gt;Can enable access to blocked services (ex: telegram), which can be used for exfiltration&lt;/li&gt;
&lt;li&gt;Provide better opsec for your beacon/agent by hiding the C2 hostnames from the firewall&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;scenarios-in-which-these-tools-likely-will-not-help&quot;&gt;Scenarios In Which These Tools Likely Will Not Help&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The fragmentation attack performed by these tools will not work against proxies which perform SNI filtering (ex: Squid), since proxies generally reassemble TCP fragments before inspection.&lt;/li&gt;
&lt;li&gt;In cases of ip filtering (ex: blackholeing 133.7.133.7)&lt;/li&gt;
&lt;li&gt;In cases where UDP is being filtered out (DPITunnel only works for TCP traffic)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;There are exception to certificates being unique to a site, in case of subdomains, a single wild card certificate (ex: certificate for *.0x00sec.org) can be utilized by all the subdomains of a site.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Port Mirroring or a similar feature is usually available in switches and other routing devices where a (physical) port can be configured for monitoring purposes, a copy of all packets flowing through the device is sent to this port, a machine can be connected to this monitoring port with its network interface in promiscous mode, all passing traffic can now be inspected by listening on this interface without any processing overhead on the gateway.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Most filtering implementation expect the entire client hello to be part of a single TCP packet, because that generally is the case, though it is possible to segment the client hello across multiple TCP packets, in such a scenario the filtering process would be required to reassemble the tcp segments before analyzing them, this is computationally costly and thus not implemented in mainstream filtering products, one exception in this case is &amp;quot;The Great Firewall&amp;quot; which is said to have reassembly capability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Out of order delivery is feature of TCP, the reciever buffers segments recieved in random order untill all segments of a sequence arrive, it then reassembles and delivers them to the application layer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Many home routers may drop packets with bad checksum, the kernel paramter net.netfilter.nf_conntrack_checksum
can be set to 0 to prevent this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;tools-&quot;&gt;Tools :&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Kkevsterrr/geneva/&quot;&gt;https://github.com/Kkevsterrr/geneva/&lt;/a&gt; (Linux) (recommended) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/zhenyolka/DPITunnel-cli&quot;&gt;https://github.com/zhenyolka/DPITunnel-cli&lt;/a&gt; (Linux) (recommended, personal choice)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/bol-van/zapret&quot;&gt;https://github.com/bol-van/zapret&lt;/a&gt; (Linux,BSD) (recommended)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ValdikSS/GoodbyeDPI&quot;&gt;https://github.com/ValdikSS/GoodbyeDPI&lt;/a&gt; (Linux)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/SadeghHayeri/GreenTunnel&quot;&gt;https://github.com/SadeghHayeri/GreenTunnel&lt;/a&gt; (windows)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/macronut/ghostcp&quot;&gt;https://github.com/macronut/ghostcp&lt;/a&gt; (windows)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/zhenyolka/DPITunnel-android&quot;&gt;https://github.com/zhenyolka/DPITunnel-android&lt;/a&gt; (android)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;references-&quot;&gt;References :&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/bol-van/zapret/blob/master/docs/readme.eng.md&quot;&gt;https://github.com/bol-van/zapret/blob/master/docs/readme.eng.md&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf&quot;&gt;https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://hal.inria.fr/hal-01202712/document&quot;&gt;https://hal.inria.fr/hal-01202712/document&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://blog.torproject.org/learning-more-about-gfws-active-probing-system&quot;&gt;https://blog.torproject.org/learning-more-about-gfws-active-probing-system&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://habr.com/ru/post/335436/&quot;&gt;https://habr.com/ru/post/335436/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;further-reading-&quot;&gt;Further Reading :&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://geneva.cs.umd.edu/posts/india-sni-filtering/&quot;&gt;https://geneva.cs.umd.edu/posts/india-sni-filtering/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://geneva.cs.umd.edu/posts/iran-whitelister/&quot;&gt;https://geneva.cs.umd.edu/posts/iran-whitelister/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://geneva.cs.umd.edu/posts/china-censors-esni/esni/&quot;&gt;https://geneva.cs.umd.edu/posts/china-censors-esni/esni/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://citizenlab.ca/2018/04/planet-netsweeper/&quot;&gt;https://citizenlab.ca/2018/04/planet-netsweeper/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=zcC5K7QTdvM&quot;&gt;How the Great Firewall Discovers Hidden Circumvention Servers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://geneva.cs.umd.edu/posts/&quot;&gt;https://geneva.cs.umd.edu/posts/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/body&gt;&lt;/html&gt;</description>
    
    <lastBuildDate>Wed, 20 Sep 2023 16:47:29 +0000</lastBuildDate>
    <category>Networking</category>
    <atom:link href="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            <p>Another neat trick many of you can use is to pass the <code>--enable-quic --quic-version=h3-29</code>  flag while starting chromium/brave/chrome to force enable http3/QUIC, you can verify that it works by visiting: <a href="https://http3.is">https://http3.is</a>. (ofcourse the said webserver would have to support QUIC), since no SNI’s are involved most  ISP implementations can be bypassed.</p>
          <p><a href="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/9</link>
        <pubDate>Wed, 20 Sep 2023 16:47:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31001-9</guid>
        <source url="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001.rss">Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</source>
      </item>
      <item>
        <title>Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/8</link>
        <pubDate>Wed, 20 Sep 2023 16:39:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31001-8</guid>
        <source url="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001.rss">Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</source>
      </item>
      <item>
        <title>Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/7</link>
        <pubDate>Sun, 01 Jan 2023 22:43:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31001-7</guid>
        <source url="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001.rss">Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</source>
      </item>
      <item>
        <title>Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</title>
        <dc:creator><![CDATA[c0z]]></dc:creator>
        <description><![CDATA[
            <p>Sent you a DM… (character limit)</p>
          <p><a href="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/6</link>
        <pubDate>Fri, 16 Sep 2022 03:18:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31001-6</guid>
        <source url="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001.rss">Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</source>
      </item>
      <item>
        <title>Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            <p>Thank you!, what product do you use by the way ?</p>
          <p><a href="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/5</link>
        <pubDate>Thu, 15 Sep 2022 08:01:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31001-5</guid>
        <source url="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001.rss">Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</source>
      </item>
      <item>
        <title>Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</title>
        <dc:creator><![CDATA[c0z]]></dc:creator>
        <description><![CDATA[
            <p>I can. But I don’t believe we have a license that encompasses DPI, I’ll still test it though.</p>
          <p><a href="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/4</link>
        <pubDate>Thu, 15 Sep 2022 00:19:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31001-4</guid>
        <source url="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001.rss">Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</source>
      </item>
      <item>
        <title>Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            <p>Im making a matrix of what firewall products can actually be bypassed, could you test DPITunnel against any commercial firewall accessible to you ?</p>
<p>I was able to test it against sophos and can confirm that it works.</p>
          <p><a href="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/3</link>
        <pubDate>Tue, 06 Sep 2022 08:44:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31001-3</guid>
        <source url="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001.rss">Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</source>
      </item>
      <item>
        <title>Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</title>
        <dc:creator><![CDATA[c0z]]></dc:creator>
        <description><![CDATA[
            <p>Very interesting analysis and post about SNI and DPI from an enterprise routers view with offensive operations in mind. I didn’t know about SNI and it’s use in DPI, as that’s still not a super deeply explored field for me.</p>
<p>Thanks for the content!</p>
          <p><a href="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/2</link>
        <pubDate>Tue, 06 Sep 2022 06:19:12 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31001-2</guid>
        <source url="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001.rss">Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</source>
      </item>
      <item>
        <title>Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            <p>Hey Everyone, i was recently  browsing a anti-censorship <a href="https://0x00sec.org">awesome list</a> and i came across few tools with some really cool tricks to bypass SNI based filtering mechanisms, i think these tools deserves more attention and are really worth sharing so here we are.</p>
<h2>Understanding SNI</h2>
<p>Before we dive into how these tools actually works lets understand what SNI is, SNI stands for Server Name Indication its a part of the TLS protocol (a header to be exact) which lets the webserver decide which TLS certificate has to be offered to a client when it is hosting multiple websites.
            Lets fire up wireshark and take a quick look at this SNI header, we will
use the filter <code>ssl.handshake.extension.type == "server_name"</code> to make our lives easier and try connecting to 0x00sec.org, now wireshark should hide everything except the Client Hello packets which are sent during the TLS handshake, lets take a look...</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/2/5/25119fede2c5afa2e49fd1bdfa528553b982e681.png" data-download-href="/uploads/short-url/5hVquanLlgcZyNm74sHHP7BKoVj.png?dl=1" title="TLS-Client-Hello" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/2/5/25119fede2c5afa2e49fd1bdfa528553b982e681_2_601x500.png" alt="TLS-Client-Hello" data-base62-sha1="5hVquanLlgcZyNm74sHHP7BKoVj" width="601" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/2/5/25119fede2c5afa2e49fd1bdfa528553b982e681_2_601x500.png, https://0x00sec.s3.amazonaws.com/original/3X/2/5/25119fede2c5afa2e49fd1bdfa528553b982e681.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/2/5/25119fede2c5afa2e49fd1bdfa528553b982e681.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/2/5/25119fede2c5afa2e49fd1bdfa528553b982e681_2_10x10.png"></a></div><p></p>
<p>expanding the server_name TLS extension reveals us the SNI header, now some of you must be wondering - isn't TLS supposed encrypt everything ?, actually no lets see why. Say we have a webserver hosting a few sites (on the same ip) via plain HTTP, when a user requests a site the webserver just looks at the HTTP Host header field in the clients HTTP request serves up the appropriate site, everything works fine.</p>
<pre><code>========================
GET /index.html HTTP/<span>1.1</span>    _
<span>Host:</span> ctf<span>.0</span>x00sec<span>.org</span>        \              ======================
                              \             WEBSERVER (<span>133.7</span><span>.133</span><span>.7</span>)
                                ---------&gt;    --server.conf--
========================      / &lt;---------      ctf<span>.0</span>x00sec<span>.org</span> -&gt;  /var/www/html/ctf
GET /index.html HTTP/<span>1.1</span>    _/                  <span>0x00</span><span>sec</span><span>.org</span>     -&gt;  /var/www/html/forum
<span>Host:</span> <span>0x00</span><span>sec</span><span>.org</span>
</code></pre><p>Now lets add TLS to the mix, to establish a TLS connection we first need the TLS certificates which are unique to each site<sup>1</sup>, and to get the appropriate TLS certs we need to tell the server which site we are trying to connect to, this is where SNI comes in, it "indicates" what "server name" we are trying to connect to so that the server can give us the appropriate certificates, well now why is the SNI field unencrypted ?, thats simply because we havent established a secure connection yet and SNI is required to establish that secure connection in the first place! ( its somewhat like the chicken and egg problem). During the time in which SNI was introduced(around 2003), TLS simply did not want to deal with the overhead of coming up with a way to hide the SNI field and decided to let it be (in other words it was acceptable, a hostname was not really that confidential), the same TLS standard continue to be widely followed/used today.</p>
<h2>The Impact Of Unencrypted SNIs</h2>
<p>Blocking sites/services has been a favourite past time of many ISPs and governments around the world, in the early days everything was plaintext and intercepting proxies did the job, as networks grew in size and ssl started gaining popularity it became unrealistic to inspect traffic with proxies, everybody switched over to filtering DNS requests although this worked quite well for some time, with the advent of technologies like DoH(DNS over Https) and DoT(DNS over TLS) DNS filtering too became a thing of the past, when all hope seemed lost firewall vendors turned to that one part of TLS that remained unencrypted... SNI!!.</p>
<h2>How SNI Inspection Works</h2>
<p>Lets say we want to connect to 0x00sec.org from our pc, the TCP connection would look like this:</p>
<pre><code>                                           [+------+------+]
OUR-PC [<span>123.123</span><span>.1</span><span>.3</span> : <span>62123</span> ] =============[F-I-R-E-W-A-L-L]============&gt; [<span>443</span>  : <span>133.7</span><span>.133</span><span>.7</span>] 0x00sec.org
          Our <span>Ip</span>      Random               [+------+------+]              HTTPS    Servers <span>Ip</span>
                    Source Port                                       Standard Port
</code></pre><p>The blocking process is fairly straight forward, every time a TLS client hello is sent, the firewall just extracts the SNI field(the hostname) from the packet and compares it against a blocklist, when a match is found the hello packet can simply be dropped preventing the client from establishing the TLS connection. Dropping TLS client hello's as i mentioned before is only practical in smaller networks with limited traffic (i.e in cases of colleges, corporate networks), in case of ISPs inspecting and dropping packets on the gateway would be very costly and impractical due the heavy load ISPs generally are under, thus ISPs usually mirror the traffic<sup>2</sup> into a inspection device, the inspecting device matches the extracted SNI field against a blocklist as well, but to block the traffic it forges a TCP reset packet with the ip and port of the server (in our case 133.7.133.7 and 443 ) and sends it to client (i.e 123.123.1.3 on port 62123), fooling the client into thinking that the server has terminated the TCP connection thus effectively preventing the client from further communicating with the server, this method might not be 100% accurate since the reset packet can get lost during transmission, but that is within a acceptable margin, this method is what makes censorship possible at the level of ISPs.</p>
<h2>Bypassing SNI Inspection - A Review of Techniques Used For Circumvention</h2>
<p>Before we begin lets consider a simple representation of a TLS client hello packet for the sake of conversation.</p>
<pre><code>  +---------------------------+-----------------------------+
  | <span>SRC</span> IP: <span>123.123</span><span>.1</span><span>.3</span>       |     <span>DST</span> ISP: <span>133.7</span><span>.133</span><span>.7</span>    |     <span>// IP</span>
  +---------------------------+-----------------------------+
  | <span>SRC</span> PORT: <span>45637</span>           |     <span>DST</span> PORT: <span>443</span>           |     <span>// TCP</span>
  +---------------------------+-----------------------------+
  | <span>TLS</span> Ver |<span>..TLS</span>.Stuff....  | <span>SNI</span>:Server-Name: <span>0x00</span>sec.org|     <span>// TLS</span>  Client Hello  
  +---------------------------+-----------------------------+
</code></pre><p>  <b>1) Split the Client hello at SNI field :</b> As i have mentioned before the filtering process is interested in the Server Name indicated by the SNI, this process expects the entire TLS Client Hello to be present in a single packet<sup>3</sup>, to evade this filtering process we segment the TLS data in half such that SNI server name is not completely in one portion, we then transmit those portions as separate TCP segments. </p>
<pre><code>  SEGMENT <span>1</span>: 
  +---------------------------+-----------------------------+
  | SRC IP: <span>123.123</span><span>.1</span><span>.3</span>       |     DST ISP: <span>133.7</span><span>.133</span><span>.7</span>    |     <span>// IP</span>
  +---------------------------+-----------------------------+
  | SRC PORT: <span>45637</span>           |     DST PORT: <span>443</span>           |     <span>// TCP</span>
  +---------------------------+-----------------------------+
  | TLS Ver |..TLS.Stuff....  |   SNI:Server-Name: <span>0x00</span>     |     <span>// Partial TLS Client Hello  </span>
  +---------------------------+-----------------------------+
</code>
<code>
  SEGMENT <span>2</span>: 
  +---------------------------+-----------------------------+
  | SRC IP: <span>123.123</span><span>.1</span><span>.3</span>       |     DST ISP: <span>133.7</span><span>.133</span><span>.7</span>    |     <span>// IP</span>
  +---------------------------+-----------------------------+
  | SRC PORT: <span>45637</span>           |     DST PORT: <span>443</span>           |     <span>// TCP</span>
  +---------------------------+-----------------------------+
  | sec.org................................................ |     <span>// Partial TLS Client Hello  </span>
  +---------------------------+-----------------------------+
</code></pre><p>  when the first TCP segment is seen by the filter, it would immediate recognize it as TLS Client hello since the first portion has the appropriate TLS application header, but when it extracts the SNI servername it only gets the partial hostname (ex: 0x00 instead of 0x00sec.org), since the partial hostname doesnt match against any of the blocklists the packet is let through, as far as the second segment is concerned it has no meaningfull application header and hence is not processed by the filter and let through.</p>
<p> <b> 2) Split and send the client hello in random order :</b> This is variation of the first method except we send the segments in reverse or random order<sup>4</sup>, this is done in order to bypass certain filters which can reassemble segments but expects the segments to be sent in the right order.</p>
<p>  <b>3) Use TCP window size to fragment the server hello :</b> Most filtering processes only analyze outbound packets (i.e packets originating from clients, TLS client hello in our case), but there are a few which analyze inbound packets as well, in such a case if the server hello is analyzed, it would contain a "certificate common name" (which again is nothing but hostname for which the TLS certificate was issued), which might match against the blocklist. In this situation we need to achive something similar to the first technique but from the servers end, we thus advertise a small TCP Window size which would force the server to split the server hello across multiple TCP segments hence achieving evasion.</p>
<p>  <b>4) Send Fake client hello with an allowed SNI, but with a TTL not long enough to reach server :</b> In some scenarios, once a TLS client hello has been analyzed by the filter and allowed to pass, that particular TCP stream is ignored, any further inbound or outbound packets from that stream will not be analyzed, this is done inorder to reduce the amount of processing that a filter has to perform since a TLS client hello is sent only once per TLS session. We now can send a TLS client hello with a fake SNI-Server Name of a random allowed site (say wikipedia.org) but with a TTL(time to live) value just enough to reach the filter but not the actual server, thus effectively preventing our TCP stream from being further analyzed, now we can send the actual TLS client hello and go on with our business.</p>
<pre><code>        ____________                      ____\ /____                      __^____^__
      <span>&lt;[Your Machine]&gt;</span>                   |<span>Your Router</span>|<span>                    [</span>|<span>Firewall</span>|<span>]          
  +-----------------------+        +-----------------------+        +-----------------------+
  </span>|<span> DST: 133.7.133.7      </span>|<span>        </span>|<span> DST: 133.7.133.7      </span>|<span>        </span>|<span> DST: 133.7.133.7      </span>|
  |<span> SNI: wiki.org </span>|<span> TTL: 3</span>|<span>  ====&gt; </span>|<span> SNI: wiki.org </span>|<span> TTL: 2</span>|<span>  ====&gt; </span>|<span> SNI: wiki.org </span>|<span> TTL: 1</span>|<span> ===&gt;</span>|
  +-----------------------+        +-----------------------+        +-----------------------+    ||
                                                                                                 ||
  |<span>&lt;=============================================================================================&lt;</span>|
  ||<span>   
  </span>||<span>    [[Some interm Router]]               [[ The Webserver - 0x00sec.org @ 133.7.133.7]]
  </span>||<span>  +-----------------------+             
  </span>||<span>  </span>|<span> DST: 133.7.133.7      </span>|<span>   \/                  &lt; packet doesnt arrive &gt;
  </span>|<span>==&gt;</span>|<span> SNI: wiki.org </span>|<span> TTL: 0</span>|<span>   /\
      +-----------------------+
<pre><code>      TTL Becomes Zero Packet 
            is dropped
</code></pre>
</span></code><p><code></code></p></pre> <b> 5) Corrupting the checksum :</b> This is variation of the 4th technique, but here instead of using TTL to prevent the fake TLS client hello from reaching the server, we allow the client hello to reach the server, but we corrupt its checksum value, filters usually dont validate the checksum of packets to avoid overhead, but the client and server are fully compliant TCP implementations and will drop any packets with bad checksums, we can then send the real client hello and go on with our business. (This method has few caveats check note 5)<p></p><p></p>
<pre><code>        ____________                      __^____^__                      
      <span>&lt;[Your Machine]&gt;</span>                   [|<span>Firewall</span>|<span>]              [[ Webserver - 0x00sec.org]] 
  +-----------------------+        +-----------------------+        +-----------------------+
  </span>|<span> DST: 133.7.133.7      </span>|<span>        </span>|<span> DST: 133.7.133.7      </span>|<span>        </span>|<span> DST: 133.7.133.7      </span>|
  |<span> SNI: wiki.us</span>|<span> BADCHKSM</span>|<span>  ====&gt; </span>|<span> SNI: wiki.us</span>|<span> BADCHKSM</span>|<span>  ====&gt; </span>|<span> SNI: wiki.us</span>|<span> BADCHKSM</span>|
  +-----------------------+        +-----------------------+        +-----------------------+

                                   . wiki.us is not blocked          \/   Packet has bad         
                                     allow packet to pass            /\   checksum drop it

                                   . Further packets from the
                                     TCP stream is no longer
                                     processed
</code></pre><p>These are the most common techniques used by circumvention tools, but there are many others, one of tools Geneva
</p><p>goes the extra mile by developing tailored bypass mechanisms depending on the censor, Geneva is really cool project and you can read more about it <a href="https://geneva.cs.umd.edu/" rel="noopener nofollow ugc">here</a></p><p></p>
<h2>Attempts To Solve The Unencrypted SNI Problem</h2>
<ul>
<li>ESNI/ECH (Encrypted SNI/ Encrypted Client Hello): There are RFC drafts discussing these possibilities but there are also legitmate concerns regarding their implementation, ESNI/ECH would completely blind firewall and other filtering devices in educational institutions, SNI also serves as a possible IOC for SEIMs, but it is possible to block ESNI/ECH and force the client to fall back to regular methods, The Great Firewall has been observed doing this <a href="https://geneva.cs.umd.edu/posts/china-censors-esni/esni/" rel="noopener nofollow ugc">since mid 2020</a> </li>
</ul>
<h2>Alternative Use Cases Of These Tools</h2>
<ul>
<li>In pentest, red teaming scenarios : <ul>
<li>Can enable access to blocked services (ex: telegram), which can be used for exfiltration</li>
<li>Provide better opsec for your beacon/agent by hiding the C2 hostnames from the firewall</li>
</ul>
</li>
</ul>
<h2>Scenarios In Which These Tools Likely Will Not Help</h2>
<ul>
<li>The fragmentation attack performed by these tools will not work against proxies which perform SNI filtering (ex: Squid), since proxies generally reassemble TCP fragments before inspection.</li>
<li>In cases of ip filtering (ex: blackholeing 133.7.133.7)</li>
<li>In cases where UDP is being filtered out (DPITunnel only works for TCP traffic)</li>
</ul>
<h2>Notes</h2>
<ol>
<li>
<p>There are exception to certificates being unique to a site, in case of subdomains, a single wild card certificate (ex: certificate for *.0x00sec.org) can be utilized by all the subdomains of a site.</p>
</li>
<li>
<p>Port Mirroring or a similar feature is usually available in switches and other routing devices where a (physical) port can be configured for monitoring purposes, a copy of all packets flowing through the device is sent to this port, a machine can be connected to this monitoring port with its network interface in promiscous mode, all passing traffic can now be inspected by listening on this interface without any processing overhead on the gateway.</p>
</li>
<li>
<p>Most filtering implementation expect the entire client hello to be part of a single TCP packet, because that generally is the case, though it is possible to segment the client hello across multiple TCP packets, in such a scenario the filtering process would be required to reassemble the tcp segments before analyzing them, this is computationally costly and thus not implemented in mainstream filtering products, one exception in this case is "The Great Firewall" which is said to have reassembly capability.</p>
</li>
<li>
<p>Out of order delivery is feature of TCP, the reciever buffers segments recieved in random order untill all segments of a sequence arrive, it then reassembles and delivers them to the application layer.</p>
</li>
<li>
<p>Many home routers may drop packets with bad checksum, the kernel paramter net.netfilter.nf_conntrack_checksum
can be set to 0 to prevent this.</p>
</li>
</ol>
<h2>Tools :</h2>
<ol>
<li>
<p><a href="https://github.com/Kkevsterrr/geneva/" rel="noopener nofollow ugc">https://github.com/Kkevsterrr/geneva/</a> (Linux) (recommended) </p>
</li>
<li>
<p><a href="https://github.com/zhenyolka/DPITunnel-cli" rel="noopener nofollow ugc">https://github.com/zhenyolka/DPITunnel-cli</a> (Linux) (recommended, personal choice)</p>
</li>
<li>
<p><a href="https://github.com/bol-van/zapret" rel="noopener nofollow ugc">https://github.com/bol-van/zapret</a> (Linux,BSD) (recommended)</p>
</li>
<li>
<p><a href="https://github.com/ValdikSS/GoodbyeDPI" rel="noopener nofollow ugc">https://github.com/ValdikSS/GoodbyeDPI</a> (Linux)</p>
</li>
<li>
<p><a href="https://github.com/SadeghHayeri/GreenTunnel" rel="noopener nofollow ugc">https://github.com/SadeghHayeri/GreenTunnel</a> (windows)</p>
</li>
<li>
<p><a href="https://github.com/macronut/ghostcp" rel="noopener nofollow ugc">https://github.com/macronut/ghostcp</a> (windows)</p>
</li>
<li>
<p><a href="https://github.com/zhenyolka/DPITunnel-android" rel="noopener nofollow ugc">https://github.com/zhenyolka/DPITunnel-android</a> (android)</p>
</li>
</ol>
<h2>References :</h2>
<ol>
<li>
<p><a href="https://github.com/bol-van/zapret/blob/master/docs/readme.eng.md" rel="noopener nofollow ugc">https://github.com/bol-van/zapret/blob/master/docs/readme.eng.md</a></p>
</li>
<li>
<p><a href="https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf" rel="noopener nofollow ugc">https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf</a> </p>
</li>
<li>
<p><a href="https://hal.inria.fr/hal-01202712/document" rel="noopener nofollow ugc">https://hal.inria.fr/hal-01202712/document</a></p>
</li>
<li>
<p><a href="https://blog.torproject.org/learning-more-about-gfws-active-probing-system" rel="noopener nofollow ugc">https://blog.torproject.org/learning-more-about-gfws-active-probing-system</a></p>
</li>
<li>
<p><a href="https://habr.com/ru/post/335436/" rel="noopener nofollow ugc">https://habr.com/ru/post/335436/</a></p>
</li>
</ol>
<h2>Further Reading :</h2>
<ol>
<li>
<p><a href="https://geneva.cs.umd.edu/posts/india-sni-filtering/" rel="noopener nofollow ugc">https://geneva.cs.umd.edu/posts/india-sni-filtering/</a></p>
</li>
<li>
<p><a href="https://geneva.cs.umd.edu/posts/iran-whitelister/" rel="noopener nofollow ugc">https://geneva.cs.umd.edu/posts/iran-whitelister/</a></p>
</li>
<li>
<p><a href="https://geneva.cs.umd.edu/posts/china-censors-esni/esni/" rel="noopener nofollow ugc">https://geneva.cs.umd.edu/posts/china-censors-esni/esni/</a></p>
</li>
<li>
<p><a href="https://citizenlab.ca/2018/04/planet-netsweeper/" rel="noopener nofollow ugc">https://citizenlab.ca/2018/04/planet-netsweeper/</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=zcC5K7QTdvM" rel="noopener nofollow ugc">How the Great Firewall Discovers Hidden Circumvention Servers</a></p>
</li>
<li>
<p><a href="https://geneva.cs.umd.edu/posts/" rel="noopener nofollow ugc">https://geneva.cs.umd.edu/posts/</a></p>
</li>
</ol>
          <p><a href="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001/1</link>
        <pubDate>Fri, 02 Sep 2022 06:42:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31001-1</guid>
        <source url="https://0x00sec.org/t/bypassing-sni-filtering-feat-dpitunnel-zapret-and-geneva/31001.rss">Bypassing SNI filtering : Feat DPITunnel, Zapret and Geneva</source>
      </item>
  </channel>
</rss>
