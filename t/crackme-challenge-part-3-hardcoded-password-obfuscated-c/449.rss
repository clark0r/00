<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>CrackMe Challenge [Part 3] - Hardcoded Password ~ Obfuscated (C#)</title>
    <link>https://0x00sec.org/t/crackme-challenge-part-3-hardcoded-password-obfuscated-c/449</link>
    <description>Hey Mates,
we have again some time, so we accept another challenge! Why? Because we **can**! Ok, enough motivation speech for now; let&#39;s come to the introduction.
This time I just reused the program I made last time (Yep, I&#39;m a lazy guy :sunglasses:) but with a slightly difference: Obfuscation. I talked from time to time in my last article about it and now I&#39;ll tell you what it is.

## WTF? What&#39;s this Random Code???
First I&#39;ll give you the obfuscated program with the exercise to try decompiling it. Get it here: https://mega.nz/#!b5RinRoL!E4BfTfcUu-fUWW36D-wn4KLR7Rrt75vDl5vp452pEXc. Maybe you already see a difference in the file size. The program is **much** bigger than last time, although I promise that I only changed the password :wink:. After decompiling you should explore the file a bit. Maybe you&#39;ll find something that looks in the form like the main function on yourself. If not, just read further on. It&#39;s not that important.
You should be greeted with code like this after you&#39;ve found the main function:
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/6caeaf3ec03581da1b5401c3dd66dfb1b6ae9ce1.PNG&quot; width=&quot;402&quot; height=&quot;500&quot;&gt;
Yeah, that&#39;s main! But WTF is that code?
After I had found the right obfuscator (Shouldn&#39;t be too good or too bad and of course free; this is the reason why this article wasn&#39;t published yesterday, because it took me more time than I thought :slight_smile:), I selected some obfuscation options, e.g. string encryption, a very popular obfuscation technique. So what you see here is the product of an encryption technique. It wouldn&#39;t be such a fun to RE that, so some ingenious guy came right from the heaven to help us :innocent:.

## De4Dot
De4Dot is an unobfuscator which supports manny different obfuscators (Sadly not the newest version of .NET Refactor; I had to take v 4.5), which helps you **a lot** with reversing C# applications! Get it here: http://de4dot.com/
After download extract the binary and just drop your obfuscated file on the de4dot.exe (Maybe de4dot-x64.exe). You can also use your obfuscated file as argument when running the .exe via terminal. **At this point I remeber that I only tried that on Win7! If you get any errors on linux or other Wins ask in the comments and I&#39;ll try to help you!** Now you should see that it creates a new file called &quot;yourObfuscatedFile-cleaned.exe&quot;. Run it and you&#39;ll see it works as good as before.

## Reversing the Unobfuscated Executable
It&#39;s as easy as some of you may think. Now you just have to open the cleaned file in dotPeek. Make sure you&#39;ve closed the obfuscated file in dotPeek before, because it made some issues when I tried it without closing. After exploring the file a bit you see that it&#39;s not the same as last time. More classes with default names are added. Now you see that we&#39;re not done with just unobfuscating the file, because it remains with weird changes. Maybe it will confuse you a bit, but it&#39;s not that hard. Just try the different classes and you&#39;ll see that class1 should be the one we search for. Ok, we come to the interesting point: Are the strings unencrypted? The answer is yes! Apart from the variable, classes and method names we got our source back! Again it&#39;s not that hard to find the password now, so I let you alone with this &quot;challenge&quot;.

## Conclusion
Puh, that was the last part of introduction to C# reversing. When we come to other languages (I plan to make a series on C++ and Java/Android too) I will introduce some fundamentals in the first posts too, but for the next C# parts I think we can start with the real challenges. As always I hope you had fun while learned something new. Next time I&#39;ll give you a harder challenge than a hardcoded password ;).

|-TheDoctor-|</description>
    
    <lastBuildDate>Mon, 23 May 2016 11:21:50 +0000</lastBuildDate>
    <category>Challenges</category>
    <atom:link href="https://0x00sec.org/t/crackme-challenge-part-3-hardcoded-password-obfuscated-c/449.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>CrackMe Challenge [Part 3] - Hardcoded Password ~ Obfuscated (C#)</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Thank you for the response!</p>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-3-hardcoded-password-obfuscated-c/449/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-3-hardcoded-password-obfuscated-c/449/4</link>
        <pubDate>Mon, 23 May 2016 11:21:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-449-4</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-3-hardcoded-password-obfuscated-c/449.rss">CrackMe Challenge [Part 3] - Hardcoded Password ~ Obfuscated (C#)</source>
      </item>
      <item>
        <title>CrackMe Challenge [Part 3] - Hardcoded Password ~ Obfuscated (C#)</title>
        <dc:creator><![CDATA[JaCube]]></dc:creator>
        <description><![CDATA[
            <p>Thanks, <a class="mention" href="https://0x00sec.org/u/thedoctor">@TheDoctor</a> !</p>
<p>Obfuscated version not worked for me on linux with mono 4.2.3. But after unobfuscating with de4dot on windows program begin work on linux too.</p>
<p>P.S. And MonoDevelop can decompile obfuscated version <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-3-hardcoded-password-obfuscated-c/449/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-3-hardcoded-password-obfuscated-c/449/3</link>
        <pubDate>Sun, 22 May 2016 19:18:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-449-3</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-3-hardcoded-password-obfuscated-c/449.rss">CrackMe Challenge [Part 3] - Hardcoded Password ~ Obfuscated (C#)</source>
      </item>
      <item>
        <title>CrackMe Challenge [Part 3] - Hardcoded Password ~ Obfuscated (C#)</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Nice <a class="mention" href="https://0x00sec.org/u/thedoctor">@TheDoctor</a>!</p>
<p>I see the difference!</p>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-3-hardcoded-password-obfuscated-c/449/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-3-hardcoded-password-obfuscated-c/449/2</link>
        <pubDate>Sun, 22 May 2016 08:44:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-449-2</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-3-hardcoded-password-obfuscated-c/449.rss">CrackMe Challenge [Part 3] - Hardcoded Password ~ Obfuscated (C#)</source>
      </item>
      <item>
        <title>CrackMe Challenge [Part 3] - Hardcoded Password ~ Obfuscated (C#)</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Hey Mates,<br>
we have again some time, so we accept another challenge! Why? Because we <strong>can</strong>! Ok, enough motivation speech for now; let’s come to the introduction.<br>
This time I just reused the program I made last time (Yep, I’m a lazy guy <img src="https://0x00sec.org/images/emoji/twitter/sunglasses.png?v=9" title=":sunglasses:" class="emoji" alt=":sunglasses:">) but with a slightly difference: Obfuscation. I talked from time to time in my last article about it and now I’ll tell you what it is.</p>
<h2>WTF? What’s this Random Code???</h2>
<p>First I’ll give you the obfuscated program with the exercise to try decompiling it. Get it here: <a href="https://mega.nz/#!b5RinRoL!E4BfTfcUu-fUWW36D-wn4KLR7Rrt75vDl5vp452pEXc" rel="noopener nofollow ugc">https://mega.nz/#!b5RinRoL!E4BfTfcUu-fUWW36D-wn4KLR7Rrt75vDl5vp452pEXc</a>. Maybe you already see a difference in the file size. The program is <strong>much</strong> bigger than last time, although I promise that I only changed the password <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">. After decompiling you should explore the file a bit. Maybe you’ll find something that looks in the form like the main function on yourself. If not, just read further on. It’s not that important.<br>
You should be greeted with code like this after you’ve found the main function:<br>
<img src="//0x00sec.s3.amazonaws.com/original/1X/6caeaf3ec03581da1b5401c3dd66dfb1b6ae9ce1.PNG" width="402" height="500"><br>
Yeah, that’s main! But WTF is that code?<br>
After I had found the right obfuscator (Shouldn’t be too good or too bad and of course free; this is the reason why this article wasn’t published yesterday, because it took me more time than I thought <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">), I selected some obfuscation options, e.g. string encryption, a very popular obfuscation technique. So what you see here is the product of an encryption technique. It wouldn’t be such a fun to RE that, so some ingenious guy came right from the heaven to help us <img src="https://0x00sec.org/images/emoji/twitter/innocent.png?v=9" title=":innocent:" class="emoji" alt=":innocent:">.</p>
<h2>De4Dot</h2>
<p>De4Dot is an unobfuscator which supports manny different obfuscators (Sadly not the newest version of .NET Refactor; I had to take v 4.5), which helps you <strong>a lot</strong> with reversing C# applications! Get it here: <a href="http://de4dot.com/" rel="noopener nofollow ugc">http://de4dot.com/</a><br>
After download extract the binary and just drop your obfuscated file on the de4dot.exe (Maybe de4dot-x64.exe). You can also use your obfuscated file as argument when running the .exe via terminal. <strong>At this point I remeber that I only tried that on Win7! If you get any errors on linux or other Wins ask in the comments and I’ll try to help you!</strong> Now you should see that it creates a new file called “yourObfuscatedFile-cleaned.exe”. Run it and you’ll see it works as good as before.</p>
<h2>Reversing the Unobfuscated Executable</h2>
<p>It’s as easy as some of you may think. Now you just have to open the cleaned file in dotPeek. Make sure you’ve closed the obfuscated file in dotPeek before, because it made some issues when I tried it without closing. After exploring the file a bit you see that it’s not the same as last time. More classes with default names are added. Now you see that we’re not done with just unobfuscating the file, because it remains with weird changes. Maybe it will confuse you a bit, but it’s not that hard. Just try the different classes and you’ll see that class1 should be the one we search for. Ok, we come to the interesting point: Are the strings unencrypted? The answer is yes! Apart from the variable, classes and method names we got our source back! Again it’s not that hard to find the password now, so I let you alone with this “challenge”.</p>
<h2>Conclusion</h2>
<p>Puh, that was the last part of introduction to C# reversing. When we come to other languages (I plan to make a series on C++ and Java/Android too) I will introduce some fundamentals in the first posts too, but for the next C# parts I think we can start with the real challenges. As always I hope you had fun while learned something new. Next time I’ll give you a harder challenge than a hardcoded password ;).</p>
<p>|-TheDoctor-|</p>
          <p><a href="https://0x00sec.org/t/crackme-challenge-part-3-hardcoded-password-obfuscated-c/449/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-challenge-part-3-hardcoded-password-obfuscated-c/449/1</link>
        <pubDate>Sun, 22 May 2016 06:56:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-449-1</guid>
        <source url="https://0x00sec.org/t/crackme-challenge-part-3-hardcoded-password-obfuscated-c/449.rss">CrackMe Challenge [Part 3] - Hardcoded Password ~ Obfuscated (C#)</source>
      </item>
  </channel>
</rss>
