<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How is C Structure Layout in Memory</title>
    <link>https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405</link>
    <description>I understand that array is a data structure that store collection of data of the same type in a contigous memory  and I also understand that structure is a user define data type that group element of the same or different kind into a single entity, but my question is how is structure handle in memory(structure layout in memory)</description>
    
    <lastBuildDate>Sat, 26 Jun 2021 17:11:38 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How is C Structure Layout in Memory</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405/7</link>
        <pubDate>Sun, 24 Oct 2021 11:00:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26405-7</guid>
        <source url="https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405.rss">How is C Structure Layout in Memory</source>
      </item>
      <item>
        <title>How is C Structure Layout in Memory</title>
        <dc:creator><![CDATA[n33ds0n]]></dc:creator>
        <description><![CDATA[
            <p>Thank you <a class="mention" href="https://0x00sec.org/u/c0z">@c0z</a> for the the addition, really love you guys explation <img src="https://0x00sec.org/images/emoji/twitter/heart.png?v=9" title=":heart:" class="emoji" alt=":heart:"></p>
          <p><a href="https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405/6</link>
        <pubDate>Sat, 26 Jun 2021 17:11:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26405-6</guid>
        <source url="https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405.rss">How is C Structure Layout in Memory</source>
      </item>
      <item>
        <title>How is C Structure Layout in Memory</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            <p>this is exactly what this thread needed , thankyou</p>
          <p><a href="https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405/5</link>
        <pubDate>Sat, 26 Jun 2021 07:54:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26405-5</guid>
        <source url="https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405.rss">How is C Structure Layout in Memory</source>
      </item>
      <item>
        <title>How is C Structure Layout in Memory</title>
        <dc:creator><![CDATA[c0z]]></dc:creator>
        <description><![CDATA[
            <p>A continuation on what <a class="mention" href="https://0x00sec.org/u/jeff">@jeff</a> was saying.</p>
<p>Now before we go into this, it’s worth mentioning the resources already on <code>0x00sec</code> about <a href="https://0x00sec.org/t/programming-for-wannabes-part-i/1143/10">memory alignment</a>. Now memory alignment is the padding of bytes to allow instructions and memory locations to be a multiple of the data-bus width of the CPU’s data-bus for consumption. From <a href="https://en.wikipedia.org/wiki/Data_structure_alignment" rel="noopener nofollow ugc">wikipedia</a>,</p>
<blockquote>
<p><em>Data alignment</em> is the aligning of elements according to their natural alignment. To ensure natural alignment, it may be necessary to insert some <em>padding</em> between structure elements or after the last element of a structure. For example, on a 32-bit machine, a data structure containing a 16-bit value followed by a 32-bit value could have 16 bits of <em>padding</em> between the 16-bit value and the 32-bit value to align the 32-bit value on a 32-bit boundary. Alternatively, one can <em>pack</em> the structure, omitting the padding, which may lead to slower access, but uses three quarters as much memory.</p>
</blockquote>
<p>On a 64 bit kernel but with an application compiled as 32 bit, we see the usual sizes:</p>
<pre><code class="lang-auto">#include &lt;stdio.h&gt;

struct __struct_a {
    float x;
    float y;
    char* p;
    int size;
};

int main(void) {
    struct __struct_a a;
    printf("int: %d\nfloat: %d\nchar*: %d\nstruct_a: %d\n",sizeof(int),sizeof(float),
            sizeof(char*),sizeof(a));
    return 0;
}
</code></pre>
<p>This outputs:</p>
<pre><code class="lang-bash">$ ./sizes                            
int: 4
float: 4
char*: 4
struct_a: 16
</code></pre>
<p>We can see that if we add together the byte sizes of the data types in our struct they equal what’ it’s composed of. Float (4), float (4), char* (4), and __struct_a (4) which equals 16 bytes. Now let’s look at a modification:</p>
<pre><code class="lang-auto">struct __struct_a {
    float x;
    float y;
    char* p;
    int size;
    char a;
};
</code></pre>
<p>This is the output:</p>
<pre><code class="lang-bash">int: 4
float: 4
char*: 4
struct_a: 20
char: 1
</code></pre>
<p>Wait what? Adding a 1 byte data type at the end of the data structure makes the compiler pad the data structure by three bytes. Why is this? Well it’s so that because this is a 32 bit binary we need a 4 byte boundary alignment. Let’s see what will happen if we move around the 1 byte char to see if the size of our struct decreases.</p>
<pre><code class="lang-auto">struct __struct_a {
    float x;
    float y;
    char a;
    int size;
    char* p;
};
</code></pre>
<p>The output:</p>
<pre><code class="lang-bash">int: 4
float: 4
char*: 4
char: 1
struct_a: 20
</code></pre>
<p>Well that’s kind of expected, but what about saving space? How can we be efficient? Well we can use the <code>__attribute__((packed))</code> to tell the compiler that we want the data not naturally aligned. Let’s check it out.</p>
<pre><code class="lang-auto">struct __attribute__((packed)) __struct_a {
    float x;
    float y;
    char a;
    int size;
    char* p;
};
</code></pre>
<p>The output:</p>
<pre><code class="lang-bash">int: 4
float: 4
char*: 4
char: 1
struct_a: 17
</code></pre>
<p>Hmm, okay so now the struct is the expected 17 bytes but why do we want packed structs, are they good or bad? Well it’s bad in terms of performance and recovering from potential errors. The reason why are those 17 bytes now throw off the CPU is that the CPU is <em>expecting</em> 4 byte aligned data. When the CPU gets a non-aligned piece of memory it may have to fetch another memory address to get the rest of the data structure from memory since it <em>might</em> be in a different page or just might have fetched 16 bytes, and now needs to fetch the next 4 bytes to get that one <code>char</code>. This is mentioned <a href="https://stackoverflow.com/a/35110359" rel="noopener nofollow ugc">here</a></p>
<p>This is a look at the packed version of the structure of the program.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/f/5/f59bd47849e4e91355063fd7ebc4f0e6999f90b8.png" data-download-href="/uploads/short-url/z2KQlUFOlnfbQb88ov3ebzdhZBC.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/f/5/f59bd47849e4e91355063fd7ebc4f0e6999f90b8.png" alt="image" data-base62-sha1="z2KQlUFOlnfbQb88ov3ebzdhZBC" width="494" height="500" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/f/5/f59bd47849e4e91355063fd7ebc4f0e6999f90b8_2_10x10.png"></a></div><p></p>
<p>Now with the unpacked version of the structure:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/8/7/87b6e3483bfb57cc17d80734242bcf4675fb7ff2.png" data-download-href="/uploads/short-url/jmAidB2BSeLamnfhpEEVVvTEnqW.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/8/7/87b6e3483bfb57cc17d80734242bcf4675fb7ff2.png" alt="image" data-base62-sha1="jmAidB2BSeLamnfhpEEVVvTEnqW" width="475" height="499" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/8/7/87b6e3483bfb57cc17d80734242bcf4675fb7ff2_2_10x10.png"></a></div><p></p>
<p>We see the 20 bytes (0x14) of space that gets pushed onto the stack versus the 11 (0x11), but besides that there’s virtually no difference in both programs. So then that means it ultimately comes down to performance and performance is why the GNU’s compiler directive <code>__attribute__((packed))</code> exists, for specific use cases like drivers.</p>
          <p><a href="https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405/4</link>
        <pubDate>Sat, 26 Jun 2021 06:55:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26405-4</guid>
        <source url="https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405.rss">How is C Structure Layout in Memory</source>
      </item>
      <item>
        <title>How is C Structure Layout in Memory</title>
        <dc:creator><![CDATA[n33ds0n]]></dc:creator>
        <description><![CDATA[
            <p>Thanks <a class="mention" href="https://0x00sec.org/u/jeff">@jeff</a> I really appreciate, I have been wandering how, thank you so much♥️</p>
          <p><a href="https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405/3</link>
        <pubDate>Thu, 24 Jun 2021 23:20:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26405-3</guid>
        <source url="https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405.rss">How is C Structure Layout in Memory</source>
      </item>
      <item>
        <title>How is C Structure Layout in Memory</title>
        <dc:creator><![CDATA[jeff]]></dc:creator>
        <description><![CDATA[
            <p>Just like they appear in your source code, with a possible <a href="http://www.catb.org/esr/structure-packing/#_padding" rel="noopener nofollow ugc">padding/alignement</a></p>
<p>that is if your code looks like this</p>
<pre><code class="lang-auto">struct test{
    int a;
    char b;
    long c;
    char d;
}
</code></pre>
<p>assuming the struct will be stored at address <code>X</code> in memory, and this code is on a 32 bit machine (meaning <code>sizeof(int)</code> = <code>sizeof(long)</code> = 4, and <code>sizeof(char)</code> = 1 , at least in my machine)</p>
<p><code>a</code> will be stored at address <code>X</code> and has the size of 4 bytes ,  <code>b</code> will be at address <code>X + 4</code> in 1 byte, with a padding of 3 bytes (<code>sizeof(int) - sizeof(char)</code>) , <code>c</code> will be stored at address <code>X + 8</code> and <code>d</code> will be stored at address <code>X + 12</code>, the whole struct will have a padding of 3 bytes such as <code>sizeof(struct test) = 16</code></p>
<p>there could be some cases where <code>char</code> variables are stored at any byte of the word they’re located at, in which cases the offset and the padding would slightly differ, but this topic is already discussed to death in the link above, cheers</p>
          <p><a href="https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405/2</link>
        <pubDate>Thu, 24 Jun 2021 21:13:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26405-2</guid>
        <source url="https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405.rss">How is C Structure Layout in Memory</source>
      </item>
      <item>
        <title>How is C Structure Layout in Memory</title>
        <dc:creator><![CDATA[n33ds0n]]></dc:creator>
        <description><![CDATA[
            <p>I understand that array is a data structure that store collection of data of the same type in a contigous memory  and I also understand that structure is a user define data type that group element of the same or different kind into a single entity, but my question is how is structure handle in memory(structure layout in memory)</p>
          <p><a href="https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405/1</link>
        <pubDate>Thu, 24 Jun 2021 19:00:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26405-1</guid>
        <source url="https://0x00sec.org/t/how-is-c-structure-layout-in-memory/26405.rss">How is C Structure Layout in Memory</source>
      </item>
  </channel>
</rss>
