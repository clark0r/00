<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Blue Teams Lab: Log Analysis — Compromised WordPress</title>
    <link>https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286</link>
    <description># Introduction

This is an interesting challenge that contains an attack on a WordPress site using multiple IP addresses and techniques to breach the site. Our goal is to identify the attacker and their methods by analyzing the Apache access.log file. There are 6 question in the challenge and we will use Linux CLI to solve this.

# Analysis

If an attacker is attacking a web application, he/she might try to login to the admin panel. If they don’t have the required credentials, they may try to brute force the account. This approach is noisy and reports a lot of login failure events in the access.log file. So first lets count the authentication failures for each IP.

```
cat access.log | grep &quot;403&quot; | cut -d &quot; &quot; -f 1 | sort | uniq -c | sort -nr
```
![image|163x291](upload://uHIoGqG8SicCP9XvsY14hxPfNl1.png)

So the IPs to investigate are 110.29.54.120, 168.22.54.119, 197.23.128.35 and 119.241.22.121

When we investigate the first IP in the list: 110.29.54.120 we see a large number of login failures.

```
cat access.log | grep &quot;110.29.54.120&quot;
```

![image|690x340](upload://ehWltc8526x0XIvwwlMmqz2DCbC.jpeg)


Anyhow the above picture contains the answer to the first question in the challenge.

Interestingly before all those failures, this IP successfully made a couple of logins to the admin panel. However after all those login failures, this IP tried to enumerate the contact form 7 plugin, but had no luck.

![image|690x46](upload://cJTHCtvFchq1SN6PhRIFFBgHU38.png)

Now if we investigate the second IP: 168.22.54.119 and match the wp-login attempts using the following command, we see something that looks like an SQL injection payload.

```
cat access.log | grep &quot;168.22.54.119&quot; | grep &quot;/wp-login.php?itsec-hb-token=adminlogin&quot;
```
![image|690x87](upload://6vYI31INCZXErCbVdS8gfiYyBhZ.jpeg)

The payload is url encoded and if we decode it, it translates as follows:

```
2151+AND+1=1+UNION+ALL+SELECT+1,NULL,&#39;&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;&#39;,table_name+FROM+information_schema.tables+WHERE+2&gt;1--/**/;+EXEC+xp_cmdshell(&#39;cat+../../../etc/passwd&#39;)#
```

Please note there are few more SQLi payloads other than the one shown here. So we can suspect this attacker might have used something like sqlmap. To verify this we can isolate the user agent and analyze.

```
cat access.log | grep &quot;168.22.54.119&quot; | cut -d &quot; &quot; -f12-
```

And as we suspected, we can see sqlmap user agent in the logs:

![image|690x126](upload://aCTDDq4OpasacnQ00JgsqEPH6Y8.jpeg)

If you examine the SQL injection payload, it tries to get a command shell using xp_cmdshell. However, the command xp_cmdshell is a MS SQL Server command so the attacker might be assuming that the wordpress site is using MS SQL Server for linux. Please check the links below.

https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------

https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-overview?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------

Additionally this IP had access to the admin page for a brief period of time. However it seems after trying some other SQL injection payloads, the IP got logged out of the account.

Another interesting thing with this IP is, it tried to enumerate two plugins, Contact Form 7 and Simple File List.

```
cat access.log | grep &quot;168.22.54.119&quot; | egrep &quot;contact|simple&quot;
```

![image|690x27](upload://eXwsqLDDrT3gnpvpeTvDR0FyisG.png)

These two plugins are vulnerable to Arbitrary File Upload. This means an attacker can upload any file to the server, for example a webshell. If you simply search Contact Form 7 arbitrary file upload on duckduckgo, you will find the corresponding CVE (Link below) and that answers the 3rd question.

https://blog.wpsec.com/contact-form-7-vulnerability/

The other plugin that is vulnerable is Simple File List. If you search again for a Simple File List exploit, you can find the following link that explains the exploit and the affected version, which answers the 4th question.

https://wpscan.com/vulnerability/365da9c5-a8d0-45f6-863c-1b1926ffd574/

Now lets go ahead and analyze the next IP on the list, 197.23.128.35.

It seems this IP also had some success with admin login before getting a lockout.

![image|690x55](upload://sqjjqb9kxsmrmbDUNSQf0KRlawx.png)

After the lockout, it seems this IP tried various attacks, but without a success.

![image|690x345](upload://vRXFLgIpnl7ut8DvZZOqPuYYKzm.jpeg)

So now, to the final IP address: 119.241.22.121. Now, a lot of things has happened with this IP as well.

First of all, just like the IP 168.22.54.119, this IP also tried to exploit the two plugins: Contact Form 7 and Simple File List.

![image|690x70](upload://oS5IeQs2OnSOdOELQcFwba8Pyz5.png)

Then it goes on and try a bunch of enumerations to find login portals and control panels:

![image|690x232](upload://xOP5v1mPI4TrY43G6ckcmOajguu.jpeg)

![image|690x333](upload://eHRWfk21NkXptS58Zv3jDTUhy9U.jpeg)

Then it gains some access to the admin account before getting logged out of it.

Since this is an interesting IP address, lets check the user agents used by this IP. We issue the command like before but with this IP address.

![image|690x310](upload://1KYyoIA5PqdHrvtxZ2bKa56illq.jpeg)

Here we see something interesting, the attacker used WPScan to enumerate or exploit the WordPress site. So now we know the two tools used by the attacker: sqlmap and wpscan. This answers the 2nd question.

Finally, the attacker has figured out that it is better to use a webshell to access the server. Hence he/she exploited the Simple File List plugin and uploaded the fr34k.png file.

![image|690x63](upload://dljH0lqMsYpmlXzN8Dqcp8UaRsN.png)

Now we have a lead. The attacker found a way to exploit the application. So lets see if there are any other files with the same name “fr34k”

```
cat access.log | grep &quot;fr34k&quot;
```

![image|690x255](upload://uQmZV60sgJ3aoine3JrTdjus4Bb.jpeg)

Yeah so we have a bunch. What stands out is fr34k.php and this is probably a webshell which the answer to the 5th question. Interestingly the webshell upload was done by using a different IP address: 103.69.55.212 which had only one 403 Forbidden case.

Finally if we match the IP: 103.69.55.212 and the word “fr34k.php” we get all the logs corresponding to the webshell.

```
cat access.log | grep &quot;103.69.55.212&quot; | grep &quot;fr34k.php&quot;
```

![image|690x234](upload://g1WaFUCuEr815yBj2kzzToCOSLM.jpeg)

Here, at the end we see when the attacker tried to access the webshell he/she got a 404 error and this answers the 6th question.

# Conclusion

This is a very interesting challenge that teaches you how to use Linux CLI to analyze the web server logs. To prevent such an attacks, one can use Web Application Firewalls (WAFs). There is a plenty of WordPress WAFs available and you can also use application agnostic WAFs like CloudFlare or CrowdStrike to mitigate such attacks.

Originally published on Medium: https://medium.com/@higgsborn/blue-teams-lab-log-analysis-compromised-wordpress-15d9d7b883ce</description>
    
    <lastBuildDate>Tue, 19 Dec 2023 15:26:06 +0000</lastBuildDate>
    <category>Blue-Team</category>
    <atom:link href="https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Blue Teams Lab: Log Analysis — Compromised WordPress</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286/5</link>
        <pubDate>Wed, 10 Apr 2024 06:55:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-38286-5</guid>
        <source url="https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286.rss">Blue Teams Lab: Log Analysis — Compromised WordPress</source>
      </item>
      <item>
        <title>Blue Teams Lab: Log Analysis — Compromised WordPress</title>
        <dc:creator><![CDATA[Tas-sos]]></dc:creator>
        <description><![CDATA[
            <p>Great well explained and with all the relevant resource! Awesome post! Thank you! <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286/4</link>
        <pubDate>Tue, 19 Dec 2023 15:26:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-38286-4</guid>
        <source url="https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286.rss">Blue Teams Lab: Log Analysis — Compromised WordPress</source>
      </item>
      <item>
        <title>Blue Teams Lab: Log Analysis — Compromised WordPress</title>
        <dc:creator><![CDATA[alarick]]></dc:creator>
        <description><![CDATA[
            <p>Hey, you can find the challenges here: <a href="https://blueteamlabs.online/" rel="noopener nofollow ugc">https://blueteamlabs.online/</a> I only focus on free once.</p>
          <p><a href="https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286/3</link>
        <pubDate>Sun, 10 Dec 2023 15:47:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-38286-3</guid>
        <source url="https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286.rss">Blue Teams Lab: Log Analysis — Compromised WordPress</source>
      </item>
      <item>
        <title>Blue Teams Lab: Log Analysis — Compromised WordPress</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            <p>You said this was a challenge ?, what CTF is this from / what is the source ?, where can people find more stuff like this ?.</p>
          <p><a href="https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286/2</link>
        <pubDate>Sun, 10 Dec 2023 15:21:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-38286-2</guid>
        <source url="https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286.rss">Blue Teams Lab: Log Analysis — Compromised WordPress</source>
      </item>
      <item>
        <title>Blue Teams Lab: Log Analysis — Compromised WordPress</title>
        <dc:creator><![CDATA[alarick]]></dc:creator>
        <description><![CDATA[
            <h1><a name="introduction-1" class="anchor" href="https://0x00sec.org#introduction-1"></a>Introduction</h1>
<p>This is an interesting challenge that contains an attack on a WordPress site using multiple IP addresses and techniques to breach the site. Our goal is to identify the attacker and their methods by analyzing the Apache access.log file. There are 6 question in the challenge and we will use Linux CLI to solve this.</p>
<h1><a name="analysis-2" class="anchor" href="https://0x00sec.org#analysis-2"></a>Analysis</h1>
<p>If an attacker is attacking a web application, he/she might try to login to the admin panel. If they don’t have the required credentials, they may try to brute force the account. This approach is noisy and reports a lot of login failure events in the access.log file. So first lets count the authentication failures for each IP.</p>
<pre><code class="lang-auto">cat access.log | grep "403" | cut -d " " -f 1 | sort | uniq -c | sort -nr
</code></pre>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/d/7/d73249c7fc5d8d23765feed0d71a87d83bcdcfb3.png" alt="image" data-base62-sha1="uHIoGqG8SicCP9XvsY14hxPfNl1" width="163" height="291"></p>
<p>So the IPs to investigate are 110.29.54.120, 168.22.54.119, 197.23.128.35 and 119.241.22.121</p>
<p>When we investigate the first IP in the list: 110.29.54.120 we see a large number of login failures.</p>
<pre><code class="lang-auto">cat access.log | grep "110.29.54.120"
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/4/64259e930d241eb789dabccaf773b426300c6a70.jpeg" data-download-href="/uploads/short-url/ehWltc8526x0XIvwwlMmqz2DCbC.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/6/4/64259e930d241eb789dabccaf773b426300c6a70.jpeg" alt="image" data-base62-sha1="ehWltc8526x0XIvwwlMmqz2DCbC" width="690" height="340" data-dominant-color="27282A"></a></div><p></p>
<p>Anyhow the above picture contains the answer to the first question in the challenge.</p>
<p>Interestingly before all those failures, this IP successfully made a couple of logins to the admin panel. However after all those login failures, this IP tried to enumerate the contact form 7 plugin, but had no luck.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/9/594a4f63b77abd6090cdb5500030294a0a392d6a.png" data-download-href="/uploads/short-url/cJTHCtvFchq1SN6PhRIFFBgHU38.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/9/594a4f63b77abd6090cdb5500030294a0a392d6a_2_690x46.png" alt="image" data-base62-sha1="cJTHCtvFchq1SN6PhRIFFBgHU38" width="690" height="46" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/9/594a4f63b77abd6090cdb5500030294a0a392d6a_2_690x46.png, https://0x00sec.s3.amazonaws.com/original/3X/5/9/594a4f63b77abd6090cdb5500030294a0a392d6a.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/5/9/594a4f63b77abd6090cdb5500030294a0a392d6a.png 2x" data-dominant-color="2E2F31"></a></div><p></p>
<p>Now if we investigate the second IP: 168.22.54.119 and match the wp-login attempts using the following command, we see something that looks like an SQL injection payload.</p>
<pre><code class="lang-auto">cat access.log | grep "168.22.54.119" | grep "/wp-login.php?itsec-hb-token=adminlogin"
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/2/d/2daa779a84f24ff40bb21e508be6b6ae0c53c21f.jpeg" data-download-href="/uploads/short-url/6vYI31INCZXErCbVdS8gfiYyBhZ.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/2/d/2daa779a84f24ff40bb21e508be6b6ae0c53c21f.jpeg" alt="image" data-base62-sha1="6vYI31INCZXErCbVdS8gfiYyBhZ" width="690" height="87" data-dominant-color="2F292A"></a></div><p></p>
<p>The payload is url encoded and if we decode it, it translates as follows:</p>
<pre><code class="lang-auto">2151+AND+1=1+UNION+ALL+SELECT+1,NULL,'&lt;script&gt;alert("XSS")&lt;/script&gt;',table_name+FROM+information_schema.tables+WHERE+2&gt;1--/**/;+EXEC+xp_cmdshell('cat+../../../etc/passwd')#
</code></pre>
<p>Please note there are few more SQLi payloads other than the one shown here. So we can suspect this attacker might have used something like sqlmap. To verify this we can isolate the user agent and analyze.</p>
<pre><code class="lang-auto">cat access.log | grep "168.22.54.119" | cut -d " " -f12-
</code></pre>
<p>And as we suspected, we can see sqlmap user agent in the logs:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/a/4a7b5d38fcb138926c78263960e05a39c8f37d00.jpeg" data-download-href="/uploads/short-url/aCTDDq4OpasacnQ00JgsqEPH6Y8.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/4/a/4a7b5d38fcb138926c78263960e05a39c8f37d00.jpeg" alt="image" data-base62-sha1="aCTDDq4OpasacnQ00JgsqEPH6Y8" width="690" height="126" data-dominant-color="2E2C2E"></a></div><p></p>
<p>If you examine the SQL injection payload, it tries to get a command shell using xp_cmdshell. However, the command xp_cmdshell is a MS SQL Server command so the attacker might be assuming that the wordpress site is using MS SQL Server for linux. Please check the links below.</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------">
  <header class="source">

      <a href="https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------" target="_blank" rel="noopener nofollow ugc">learn.microsoft.com</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/362;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_690x362.png" class="thumbnail" data-dominant-color="D1DDE2" width="690" height="362" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_690x362.png, https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_1035x543.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170.png 2x"></div>

<h3><a href="https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------" target="_blank" rel="noopener nofollow ugc">xp_cmdshell (Transact-SQL) - SQL Server</a></h3>

  <p>Spawns a Windows command shell and passes in a string for execution. Any output is returned as rows of text.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<aside class="onebox allowlistedgeneric" data-onebox-src="https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-overview?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------">
  <header class="source">

      <a href="https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-overview?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------" target="_blank" rel="noopener nofollow ugc">learn.microsoft.com</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/362;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_690x362.png" class="thumbnail" data-dominant-color="D1DDE2" width="690" height="362" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_690x362.png, https://0x00sec.s3.amazonaws.com/optimized/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170_2_1035x543.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/d/f/df50ff207e6a6ce3b4d58cdf0195308a0fb1e170.png 2x"></div>

<h3><a href="https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-overview?view=sql-server-ver16&amp;source=post_page-----15d9d7b883ce--------------------------------" target="_blank" rel="noopener nofollow ugc">Overview of SQL Server on Linux - SQL Server</a></h3>

  <p>This article describes how SQL Server runs on Linux and provides information on how to learn more.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>Additionally this IP had access to the admin page for a brief period of time. However it seems after trying some other SQL injection payloads, the IP got logged out of the account.</p>
<p>Another interesting thing with this IP is, it tried to enumerate two plugins, Contact Form 7 and Simple File List.</p>
<pre><code class="lang-auto">cat access.log | grep "168.22.54.119" | egrep "contact|simple"
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/8/68d8f1d0f06ea2986db87643245cf06ff29f7f7a.png" data-download-href="/uploads/short-url/eXwsqLDDrT3gnpvpeTvDR0FyisG.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68d8f1d0f06ea2986db87643245cf06ff29f7f7a_2_690x27.png" alt="image" data-base62-sha1="eXwsqLDDrT3gnpvpeTvDR0FyisG" width="690" height="27" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68d8f1d0f06ea2986db87643245cf06ff29f7f7a_2_690x27.png, https://0x00sec.s3.amazonaws.com/original/3X/6/8/68d8f1d0f06ea2986db87643245cf06ff29f7f7a.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/6/8/68d8f1d0f06ea2986db87643245cf06ff29f7f7a.png 2x" data-dominant-color="2F3032"></a></div><p></p>
<p>These two plugins are vulnerable to Arbitrary File Upload. This means an attacker can upload any file to the server, for example a webshell. If you simply search Contact Form 7 arbitrary file upload on duckduckgo, you will find the corresponding CVE (Link below) and that answers the 3rd question.</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://blog.wpsec.com/contact-form-7-vulnerability/">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/3X/6/4/648f7c48715cbf52c622873db322cb885b75dbf6.png" class="site-icon" data-dominant-color="0C86C4" width="32" height="32">

      <a href="https://blog.wpsec.com/contact-form-7-vulnerability/" target="_blank" rel="noopener nofollow ugc" title="02:34PM - 21 December 2020">WPSec – 21 Dec 20</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/285;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/0/b/0bb3cc7e4529df93dd9e0097581c43fbe02c49f2_2_690x285.png" class="thumbnail" data-dominant-color="798679" width="690" height="285" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/0/b/0bb3cc7e4529df93dd9e0097581c43fbe02c49f2_2_690x285.png, https://0x00sec.s3.amazonaws.com/optimized/3X/0/b/0bb3cc7e4529df93dd9e0097581c43fbe02c49f2_2_1035x427.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/0/b/0bb3cc7e4529df93dd9e0097581c43fbe02c49f2.png 2x"></div>

<h3><a href="https://blog.wpsec.com/contact-form-7-vulnerability/" target="_blank" rel="noopener nofollow ugc">CVE-2020-35489: Unrestricted File Upload Vulnerability found in Contact Form...</a></h3>

  <p>A high-severity&nbsp;Unrestricted File Upload&nbsp;vulnerability, tracked as CVE-2020–35489, was discovered in a popular WordPress plugin called&nbsp;Contact Form 7, currently installed on&nbsp;5 Million+ websites&nbsp;making them vulnerable to...</p>

  <p>
    <span class="label1">Est. reading time: 4 minutes</span>
  </p>

  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>The other plugin that is vulnerable is Simple File List. If you search again for a Simple File List exploit, you can find the following link that explains the exploit and the affected version, which answers the 4th question.</p>
<p><a href="https://wpscan.com/vulnerability/365da9c5-a8d0-45f6-863c-1b1926ffd574/" class="onebox" target="_blank" rel="noopener nofollow ugc">https://wpscan.com/vulnerability/365da9c5-a8d0-45f6-863c-1b1926ffd574/</a></p>
<p>Now lets go ahead and analyze the next IP on the list, 197.23.128.35.</p>
<p>It seems this IP also had some success with admin login before getting a lockout.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/c/7/c73647f3cbfdba9436aaab499c36789d21df4e71.png" data-download-href="/uploads/short-url/sqjjqb9kxsmrmbDUNSQf0KRlawx.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/7/c73647f3cbfdba9436aaab499c36789d21df4e71_2_690x55.png" alt="image" data-base62-sha1="sqjjqb9kxsmrmbDUNSQf0KRlawx" width="690" height="55" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/7/c73647f3cbfdba9436aaab499c36789d21df4e71_2_690x55.png, https://0x00sec.s3.amazonaws.com/original/3X/c/7/c73647f3cbfdba9436aaab499c36789d21df4e71.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/c/7/c73647f3cbfdba9436aaab499c36789d21df4e71.png 2x" data-dominant-color="2A2C2D"></a></div><p></p>
<p>After the lockout, it seems this IP tried various attacks, but without a success.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/d/f/df5cf98f265525d509b4cbf3d75106462a59d928.jpeg" data-download-href="/uploads/short-url/vRXFLgIpnl7ut8DvZZOqPuYYKzm.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/d/f/df5cf98f265525d509b4cbf3d75106462a59d928.jpeg" alt="image" data-base62-sha1="vRXFLgIpnl7ut8DvZZOqPuYYKzm" width="690" height="345" data-dominant-color="28292B"></a></div><p></p>
<p>So now, to the final IP address: 119.241.22.121. Now, a lot of things has happened with this IP as well.</p>
<p>First of all, just like the IP 168.22.54.119, this IP also tried to exploit the two plugins: Contact Form 7 and Simple File List.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/a/e/ae51827a4f2bf3a636770d155abe0021b707d16f.png" data-download-href="/uploads/short-url/oS5IeQs2OnSOdOELQcFwba8Pyz5.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/a/e/ae51827a4f2bf3a636770d155abe0021b707d16f_2_690x70.png" alt="image" data-base62-sha1="oS5IeQs2OnSOdOELQcFwba8Pyz5" width="690" height="70" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/a/e/ae51827a4f2bf3a636770d155abe0021b707d16f_2_690x70.png, https://0x00sec.s3.amazonaws.com/original/3X/a/e/ae51827a4f2bf3a636770d155abe0021b707d16f.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/a/e/ae51827a4f2bf3a636770d155abe0021b707d16f.png 2x" data-dominant-color="27292A"></a></div><p></p>
<p>Then it goes on and try a bunch of enumerations to find login portals and control panels:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/e/d/ed06803e318daa5f9d4a8c60fad658bee1a7b5ea.jpeg" data-download-href="/uploads/short-url/xOP5v1mPI4TrY43G6ckcmOajguu.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/e/d/ed06803e318daa5f9d4a8c60fad658bee1a7b5ea.jpeg" alt="image" data-base62-sha1="xOP5v1mPI4TrY43G6ckcmOajguu" width="690" height="232" data-dominant-color="28292A"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/7/6713f5457c41e0ee637e98bc923cc579b71ce546.jpeg" data-download-href="/uploads/short-url/eHRWfk21NkXptS58Zv3jDTUhy9U.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/6/7/6713f5457c41e0ee637e98bc923cc579b71ce546.jpeg" alt="image" data-base62-sha1="eHRWfk21NkXptS58Zv3jDTUhy9U" width="690" height="333" data-dominant-color="29282A"></a></div><p></p>
<p>Then it gains some access to the admin account before getting logged out of it.</p>
<p>Since this is an interesting IP address, lets check the user agents used by this IP. We issue the command like before but with this IP address.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/0/c/0c51995bc44cf389f7534b3823387cf50be2b834.jpeg" data-download-href="/uploads/short-url/1KYyoIA5PqdHrvtxZ2bKa56illq.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/0/c/0c51995bc44cf389f7534b3823387cf50be2b834_2_690x310.jpeg" alt="image" data-base62-sha1="1KYyoIA5PqdHrvtxZ2bKa56illq" width="690" height="310" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/0/c/0c51995bc44cf389f7534b3823387cf50be2b834_2_690x310.jpeg, https://0x00sec.s3.amazonaws.com/original/3X/0/c/0c51995bc44cf389f7534b3823387cf50be2b834.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/0/c/0c51995bc44cf389f7534b3823387cf50be2b834.jpeg 2x" data-dominant-color="29292B"></a></div><p></p>
<p>Here we see something interesting, the attacker used WPScan to enumerate or exploit the WordPress site. So now we know the two tools used by the attacker: sqlmap and wpscan. This answers the 2nd question.</p>
<p>Finally, the attacker has figured out that it is better to use a webshell to access the server. Hence he/she exploited the Simple File List plugin and uploaded the fr34k.png file.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/d/5d852859d40f5f6f65531f7da7988a43694b273d.png" data-download-href="/uploads/short-url/dljH0lqMsYpmlXzN8Dqcp8UaRsN.png?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d852859d40f5f6f65531f7da7988a43694b273d_2_690x63.png" alt="image" data-base62-sha1="dljH0lqMsYpmlXzN8Dqcp8UaRsN" width="690" height="63" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/d/5d852859d40f5f6f65531f7da7988a43694b273d_2_690x63.png, https://0x00sec.s3.amazonaws.com/original/3X/5/d/5d852859d40f5f6f65531f7da7988a43694b273d.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/5/d/5d852859d40f5f6f65531f7da7988a43694b273d.png 2x" data-dominant-color="2E2A2C"></a></div><p></p>
<p>Now we have a lead. The attacker found a way to exploit the application. So lets see if there are any other files with the same name “fr34k”</p>
<pre><code class="lang-auto">cat access.log | grep "fr34k"
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/d/8/d82cbea5928f5641636a15c11f31fb151a44f871.jpeg" data-download-href="/uploads/short-url/uQmZV60sgJ3aoine3JrTdjus4Bb.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/d/8/d82cbea5928f5641636a15c11f31fb151a44f871_2_690x255.jpeg" alt="image" data-base62-sha1="uQmZV60sgJ3aoine3JrTdjus4Bb" width="690" height="255" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/d/8/d82cbea5928f5641636a15c11f31fb151a44f871_2_690x255.jpeg, https://0x00sec.s3.amazonaws.com/original/3X/d/8/d82cbea5928f5641636a15c11f31fb151a44f871.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/d/8/d82cbea5928f5641636a15c11f31fb151a44f871.jpeg 2x" data-dominant-color="2C2D2F"></a></div><p></p>
<p>Yeah so we have a bunch. What stands out is fr34k.php and this is probably a webshell which the answer to the 5th question. Interestingly the webshell upload was done by using a different IP address: 103.69.55.212 which had only one 403 Forbidden case.</p>
<p>Finally if we match the IP: 103.69.55.212 and the word “fr34k.php” we get all the logs corresponding to the webshell.</p>
<pre><code class="lang-auto">cat access.log | grep "103.69.55.212" | grep "fr34k.php"
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/7/0/705adf9b7c6f130eecc256627b90c75ad02bf17a.jpeg" data-download-href="/uploads/short-url/g1WaFUCuEr815yBj2kzzToCOSLM.jpeg?dl=1" title="image" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/3X/7/0/705adf9b7c6f130eecc256627b90c75ad02bf17a.jpeg" alt="image" data-base62-sha1="g1WaFUCuEr815yBj2kzzToCOSLM" width="690" height="234" data-dominant-color="2E2D2F"></a></div><p></p>
<p>Here, at the end we see when the attacker tried to access the webshell he/she got a 404 error and this answers the 6th question.</p>
<h1><a name="conclusion-3" class="anchor" href="https://0x00sec.org#conclusion-3"></a>Conclusion</h1>
<p>This is a very interesting challenge that teaches you how to use Linux CLI to analyze the web server logs. To prevent such an attacks, one can use Web Application Firewalls (WAFs). There is a plenty of WordPress WAFs available and you can also use application agnostic WAFs like CloudFlare or CrowdStrike to mitigate such attacks.</p>
<p>Originally published on Medium: <a href="https://medium.com/@higgsborn/blue-teams-lab-log-analysis-compromised-wordpress-15d9d7b883ce" class="inline-onebox" rel="noopener nofollow ugc">Blue Teams Lab: Log Analysis — Compromised WordPress | by Higgsborn | Dec, 2023 | Medium</a></p>
          <p><a href="https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286/1</link>
        <pubDate>Sun, 10 Dec 2023 14:54:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-38286-1</guid>
        <source url="https://0x00sec.org/t/blue-teams-lab-log-analysis-compromised-wordpress/38286.rss">Blue Teams Lab: Log Analysis — Compromised WordPress</source>
      </item>
  </channel>
</rss>
