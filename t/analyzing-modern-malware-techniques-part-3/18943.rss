<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Analyzing Modern Malware Techniques - Part 3</title>
    <link>https://0x00sec.org/t/analyzing-modern-malware-techniques-part-3/18943</link>
    <description># Analyzing Modern Malware Techniques - Part 3

## A case of Powershell, Excel 4 Macros and VB6(part 2 of 2)

### Preface:

------
When I was watching [The Cycle Of Cyber Threat Intelligence](https://www.youtube.com/watch?v=J7e74QLVxCk&amp;t=2823s) the other day I learned about the concept called “Biases” and how it interferes with researchers and cause them time delays and make big mistakes in general when it comes to research. In this part of the research I was no stranger to my own biases, I like to get my hands dirty, dig deep into binaries and understand EVERYTHING that goes under the hood. It’s simply my nature and my curiosity that can get the better of me. As I was researching this sample, I insisted for the first few days to analyze everything by myself, instead of using great tools that were in my disposal. I ended up spending A LOT of time attempting to unpack the loader instead of using other tools in my arsenal that aided me further analyze the malware itself including the heavily obfuscated loader, thus proving that I do as everyone else have my own biases and sometimes its better off to simply stop, reassess your goals and re attempt to understand the big picture. So here we go - Part 3 hope you enjoy this one :)
***

**Background knowledge required:**

1. Knowledge in C and Assembly
2. Knowledge in WINAPI
3. Knowledge in IDA and x64dbg
4. Novice experience with analyzing obfuscated and packed code
5. Knowledge in PE Injection techniques([Process Hollowing](https://github.com/m0n0ph1/Process-Hollowing) especially for this one)

**Tools used**

1. Any.Run
2. IDA
3. PEBear and PEID
4. Resource Hacker
5. Process Monitor
6. Process Explorer
7. x64dbg

**Goals:**

1. Unpack malware
2. Understand covert launching
3. Disable anti debugging and anti vm techniques(if there are any)
4. Identify basic host based signatures
5. Identify basic network based signatures

***
**Basic Static and Dynamic Analysis:**

&gt; **Some side notes:**
&gt; 
&gt; This malware performs process injection, the memory addresses you&#39;ll see in my debugging pictures will be different because I had to re-execute the malware several times and because of the dynamic nature of memory allocation, you’ll sometimes see different addresses being shown.

Using [Hybrid Analysis](https://www.hybrid-analysis.com/sample/e6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3/5e25c5f7a2b4a8790d7d1bbf) I’ve collected some dry information about the activity of the [sample](https://www.hybrid-analysis.com/sample/e6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3/5e25c5f7a2b4a8790d7d1bbf):

**Anti debugging:**

![|602x79](upload://tiYlkAVyVeJQYMxWcsZpo9GoBM1.png)

![|602x68](upload://ffYn9cGN4FUJdgXyioHfbWJQVl6.png)

**Process Injection:**

![|602x172](upload://fdiWLdZNxQWa29viUOLKdzjg4Oa.png)

**Dropped artifacts:**

![|602x80](upload://ipM7Ef20pzbtBKnw9RcvcyKTA4p.png)

![|602x77](upload://phVG5pfjEDYOkRIhhp11RYaCpdS.png)

Then I decided to load IDA and x64dbg to analyze the malware, which caused a significant delay in my analysis, I decided to stop and reassess the situation. The binary was so heavily obfuscated that It was getting real hard to impossible to analyze it without the usage of external tools. I decided to use API Monitor to collect a list of APIs the malware calls that could perhaps aid my debugging but the anti debugging techniques this malware deploys can crash, stop and confuse any debugger I threw at it including API monitor. The malware would simply not execute under any debugger attached. As a final resort I decided I’ll use process explorer and process monitor to understand what is going on exactly upon execution. Luckily for me - the malware did execute under a VM.

**Process Monitor &amp; Process Explorer:**

It could be observed, under execution that first the sample would launch and begin to eat up CPU usage that indicates its unpacking, Then it would launch a sub process called RegAsm.exe, which is a known Microsoft application for registering .NET assembly. Malware frequently uses this binary to inject code into, and indeed as mentioned before hybrid analysis detected that memory is being injected into this binary.

![|602x29](upload://p7sjDjTKf71JtK6gej4cMgA2heY.png)

![|602x80](upload://l2GlEZPyZ4V8oLB9lhTcXM3GoJC.png)


The malware launches RegAsm.exe and it seems to launch with the sample path in the command parameters.

![|602x67](upload://esUxkudhWpg7wxmitQAJ6AOuv3H.png) 

Then it can be observed that as soon as RegAsm.exe is launched, a conhost.exe(cmd.exe) is launched with strange parameters:![|602x17](upload://7rV4VIj41pzfXHNaJEV03rtqddF.png)
After waiting for a while we can observe TCP network connections being made to remote addresses:

![|602x55](upload://xPBcGZbgmAi2ONGyaQXaYDa0bzh.png)

![|602x97](upload://k9OoZBbvrZ1oxsEhKHuRUpYjGT6.png)

![|602x153](upload://kZAzo3S7IOm5zDsa8xVegxFKw4c.png)

![|602x323](upload://1TRefgm9GsPk8VxKex82pSgeRG1.png)

In addition we know that the malware drops a file into disk called **“OOlqs”** into the **%appdata%/aljwSjH/** directory, this file is created with hidden attributes. after executing the malware I examined the file and it seems to be a copy of **RegAsm** specifically the version the malware is launching as the victim sub process **(v2.0.50727).**

![|602x73](upload://1Jbx53MCHgoBPjufzgGupj40fPK.png)

![|602x133](upload://s2o75FDLUqSTxmBFvKXiDuLsrnb.png)

They contain the exact SHA-256 checksum which leads me to believe that the malware will launch its own dropped RegAsm.exe variant incase the specific version of RegAsm.exe is not found on the computer.

In addition RegAsm.exe is attempting to query sensitive data files:

![|602x353](upload://8tAIOXi5fHBBOygGy7psrfVJBM9.png)

![|602x12](upload://8Hf4Bdh7x3RhZiDXhl0kpaV4LRF.png)

For the above example it is attempting to open Chrome and FireFox data files which strikes me as very suspicious. Later on I noticed the following:

![|602x323](upload://lgf04TjzeIWQ8RBd6W0B1XMmKve.png)

These are sensitive data files for various browser and other applications(Yandex, Chrome, Comodo, Firefox), this binary without a doubt is performing very suspicious activity.
***
**Advanced Static and Dynamic Analysis:**

We’ll have to find a way to dump the payload from memory. As I mentioned before, attaching to RegAsm.exe will cause it to crash, so this option is a no go. What we must do Is attach to the sample which I named **infected.exe** (just in case the malware deploys any tricks looking for SHA-256 checksum named processes or processes running containing the strings “sample”, “malware” etc).

Looking at this malware strings or imports in IDA yields nothing, no imports and no strings. We go straight into debugging.

In addition, to ease our analysis - lets install [SycllaHide ](https://github.com/x64dbg/ScyllaHide/releases)which will stop some of the anti debugging techniques this sample employs(thanks [@0x00dtm](https://twitter.com/0x00dtm) for the advice). Lets turn on all the options for anti-anti debugging as this will aid us greatly in analyzing this sample.

![|602x549](upload://cGHYUI7n4C4RILbBsOCQZueaC34.png)

In my previous article we loaded up the sample in IDA to find out its a VB6 file. I fixed it up with an IDC script but it didn’t help much, So this time I simply decided to execute it in x64dbg and make an educated guess that if we set a breakpoint on **VirtualAlloc** might lead us somewhere:

![|602x67](upload://9Oie2vJdrrlAzlqRAr8SZIFLMjo.png)
![|586x51](upload://mQd9Wp6cEQy0prWxVJczhgmVxDl.png)
The breakpoint was hit about 7 times, but each time it was hit outside our main module, on the 8th try I viewed the call stack and it seems to been executed from the main module this time:

![|602x272](upload://eKzOlfUBCt6s99W4JrHlzkztOez.png)
![|602x67](upload://napUaOVqO0DY0LQpgju5yj5dPVp.png)
Interesting, I decided to view the contents of the newly allocated address:
![|602x87](upload://69UAYm7G0ZMfanJyhcwmo2btCdc.png)
Obviously it&#39;s empty, how ever I wanted to check if it would fill up. To check we must add a hardware breakpoint on the address **0x00250000** and make the debugger break if this memory region gets accessed. so let&#39;s do just that:

![|602x327](upload://iKMCEeTe0QpmBkQd0EnBEU9F5bc.png)
And ..
![|593x163](upload://m3Zi7R9GiBgEyfVD76nEB2RDtyZ.png)
but alas, this is no PE file header, and we try to continue looking for more breaks on **VirtualAlloc**, and continue executing the application it will crash. But then, perhaps this code is a shellcode, that might get executed? Hmm, lets try to find this allocated section again by re executing the sample.

So again I found the allocated area this time it hit on **0x00240000**. I decided to analyze the memory as code by viewing it in disassembly:

![|602x441](upload://s70yFNxE0V6AE6FCu7MIuP59zl9.png)

![|602x108](upload://tDHsEk4Fy6Alp0yn1lWc0OW86EG.png)

And it looks like valid code, So I decided to place a breakpoint on it.

but it did not execute.. hmm, Probably because I set it as a memory breakpoint and this binary is riddled with anti debugging traps, I decide to put a hardware on execution breakpoint on the allocated area and what do you know:

![|602x220](upload://q2b2mPb7FFNTMIH8y7H74alJgjQ.png)
We break on the allocated shellcode!
The call stack indicates it was called from **0x0041B17F**

![|602x24](upload://AnH9DEewmi40zcdCsJixShOrx4l.png)
First thing I did was dump the shellcode using the **Syclla** and moved the memory dump into my Static Analysis machine, this code is not executable but we can analyze it on IDA. Since each execution this shellcode will be allocated in different areas it will be a bit harder to analyze it but the last 4 bytes of the code addresses have the same offset all the time so it&#39;s still possible.

Usually, when I hit this kind of code that I have no idea what it does so I decided to traverse around it to see if I find anything interesting. the first artifact I find is located at offset **0x52AF** from the begging of the allocated code, a call to **LoadLibraryA** is performed at address offset **0x52B8** and then a Call to **GetProcAddress** is performed inside sub_offset52E4 at offset **0x52FD**:

**IDA View:**

![|536x60](upload://xi2jjtnVFlbDHSu8DmkXf9pQEMJ.png)

![|478x53](upload://aprifuW4F6S5T79ufYnIPaDxejt.png)

**x64dbg View:**

![|602x115](upload://6DoeVNtwTPXsLN0tdQH5nyDbmEB.png)

![|602x223](upload://ryCG5eBQk8sJGirtIe3fjigTiT9.gif)

We can see that various API’s are being resolved and this is not uncommon for this type of heavily obfuscated malware, it is deploying what is called Dynamic API resolving which means all APIs will be resolved dynamically making the analysis much harder. As we Recall, I assumed that this malware will perform Process Hollowing on RegAsm.exe and the dry analysis we performed using Hybrid-Analysis actually gave us more prove that this in fact MIGHT be correct. Since we found the API resolving method for this malware, we can set up a breakpoint on **func_LoadLibraryCall**(at offset **0x52AF**) for this function and see if any API’s that are related to process hollowing or code injection will be met. I have reason to suspect this is might actually work because if we check the references for **func_LoadLibraryCall** we can see its being called a lot during execution.

![|602x441](upload://dillKICkCz0DtM5Mt0dKOYdLz3L.png)

So let’s be on the lookout for:

    VirtualAllocEx
    GetFileSize
    CreateProcess
    NtGetContextThread
    NtReadVirtualMemory
    NtWriteVirtualMemory
    NtResumeThread
    NtUnmapViewOfSection
    NtProtectVirtualMemory

A list of APIs I’ve encountered in the API resolving routine:

    TerminateProcess
    EnumWindows
    NtProtectVirtualMemory
    DbgBreakPoint
    DbgUiRemoteBreakin
    NtSetInformationThread
    NtAllocateVirtualMemory
    NtGetContextThread
    NtSetContextThread
    NtWriteVirtualMemory
    NtCreateSection
    NtMapViewOfSection
    NtOpenFile
    NtClose
    NtResumeThread
    CreateProcessInternalW
    GetLongPathNameW
    Sleep
    CreateThread
    WaitForSingleObject
    TerminateThread
    AddVectoredExceptionHandler
    CreateFileW
    WriteFile
    CloseHandle
    GetFileSize
    ReadFile
    ShellExecuteW
    SHCreateDirectoryExW
    RegCreateKeyExA
    RegSetValueExA

As expected I’ve extracted APIs that might indicated process hollowing.

I’ve noticed two interesting things about this sample regarding the API resolving, One is that each run these strings are loaded from the exact sample location **0x44XX** - **0x4XXX**, this means that we dump this memory section again and look at the strings in their decrypted form! also I think the author made a mistake because if we’ll view the strings through IDA we can see that he didn’t encrypt all of them:

![|399x42](upload://15ZLm2YxLv2Y0ZbUD2SOHXk60Ph.png)

Anyway, on with the analysis, we can actually notice that during this API resolving the malware already spawned **RegAsm.exe** as a **child process** and we finishing looping around the API resolving function the malware terminates itself and we can see **RegAsm.exe** begins to execute independently.

We must restart the program but this time we need to choose the correct APIs to break on, If we break on these APIs using memory breakpoints the malware will detect this and force the debugger to stop execution on a debugger trap so we must perform this using hardware breakpoints.

We can only set 4 at a time, So let&#39;s choose the following APIs:

1. CreateProcessInternalW
2. ZwWriteVirtualMemory
3. NtResumeThread
4. ShellExecuteW

After the APIs are resolved we break at CreateProcessInternalW:

![|602x81](upload://5Bgudzvgeg7ZKWvBCCVXKRa2gZQ.png)

We can view the parameters being passed to the function, and unfortunately this API is not documented AT ALL. but we can kinda make sense from whats going by looking at [CreateProcessA](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa) which calls ***CreateProcessInternalW***.

    BOOL CreateProcessA(
    LPCSTR lpApplicationName = RegAsm.exe
    LPSTR lpCommandLine = Our sample
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags = CREATE_SUSPENDED(0x00000004)
    LPVOID lpEnvironment,
    LPCSTR lpCurrentDirectory,
    LPSTARTUPINFOA lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
    );

This is our first indication of process injection. First the malware spawns RegAsm as a suspended process which can be viewed in process explorer:

![|501x55](upload://9sT43pbIoZVZLqRFRJe3pk4B6KJ.png)

Let&#39;s continue.

Then we break on **ZwWriteVirtualMemory**:

![|468x67](upload://188Lovftr8Owy8hYXHiNu0L0We6.png)

The [undocumented Internals](https://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FMemory%20Management%2FVirtual%20Memory%2FNtWriteVirtualMemory.html) website states that:

&gt; “**NtWriteVirtualMemory** is similar to WINAPI [WriteProcessMemory](https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory). See Ms SDK for detailed description of parameters.”

&gt; Side note, In userland calls to Nt prefix and Zw prefix dont matter they are both the same, I assume malware utilizes these calls to avoid AV detection since these APIs might not be monitored.

So let&#39;s look at that:

    BOOL WriteProcessMemory(
    HANDLE hProcess,
    LPVOID lpBaseAddress,
    LPCVOID lpBuffer,
    SIZE_T nSize,
    SIZE_T *lpNumberOfBytesWritten
    );

hProcess holds the handle to the process we want to write, **0x100** corresponds to the **RegAsm.exe** Process, this can be seen in the Process Explorer:

![|602x17](upload://xzT4PiFPMOaIROXfnIlrp2DMUO6.png)

we’re writing **0x5DC** bytes starting from address **0x005F7D00**. I looked it up in the dump it doesn&#39;t seem to contain much of interest to us. so I&#39;ll continue with execution.

We break on **ZwWriteVirtualMemory** again!:

![|186x66](upload://niyb5dpcS0XZjr6RyfABSZfNMkr.png)

This goes on 2 mores times until I hit something interesting:

![|168x69](upload://gh6EAk6FKwcZC914QvVoN0r4CsV.png)

huh.. it seems to inject the shellcode we are debugging right now straight into **RegaAsm.exe**, we can check this by viewing **0x4B0000** in disassembly view in x64dbg:

![|602x303](upload://aPTCQmVt1cps08FitAxYXG5pMrZ.png)

Next API that is **NtResumeThread** that will probably cause the newly created thread in **RegAsm.exe** to execute and we don&#39;t want to execute that because the malware will continue execution! Now what&#39;s really cool here, is that we can attach to **RegAsm.exe** and put a breakpoint on the shellcode and resume the new thread and break on the malware again!

Now I’ve attached to RegAsm.exe ![|578x148](upload://xfDPnspBKIHmgjCUGo8ScPpZDYR.png)

If we got in the Threads tab in x64dbg We see a suspicious thread with **EIP 0xD0000**(Will be different on your machine) but the and it seems to be marked as the main thread, this is highly suspicious behavior. let&#39;s go into that thread and place a breakpoint at its start address and simply resume it.
![|602x143](upload://72MlxR43wLecRjIrOhlweh2axNv.png)
And we hit it our breakpoint!

![|602x44](upload://3ZuyW8Um5ghVKQM1rFgDNZdfOib.png)
In the case of this malware, it was not a classic process hollowing attack but an interesting case of code Injection, because in classic case of process hollowing, the attacker must unmap the original PE out of the process and thus hollow the process and then remap his own PE into the process. In this case it seems that the malware maps just its code into the memory of the other process and sets the main thread to execute on this newly allocated code. This method is easier to execute but more detectable, as it would seem that new shellcode is being run from a suspicious area in the code that does not match the original entry point of the image located in the Optional Header field. In addition the malware author did not bother masking the injection and we can see that the executing code is going to be executing in memory which is in **READ, WRITE and EXECUTE** privileges:

![|194x14](upload://b8tyS0JrdTPBq4ru58LHjiYJHPc.png)

This is highly suspicious.

Next Let’s put a breakpoint on our API resolve routine at offset 0x52B8 and see what new API’s are going to be called in this new executing code.

    TerminateProcess
    EnumWindows
    NtProtectVirtualMemory
    DbgBreakPoint
    DbgUiRemoteBreakin
    NtSetInformationThread
    NtAllocateVirtualMemory
    NtGetContextThread
    NtSetContextThread
    NtWriteVirtualMemory
    NtCreateSection
    NtMapViewOfSection
    NtOpenFile
    NtClose
    NtResumeThread
    CreateProcessInternalW
    GetLongPathNameW
    Sleep
    CreateThread
    WaitForSingleObject
    TerminateThread
    AddVectoredExceptionHandler
    CreateFileW
    WriteFile
    CloseHandle
    GetFileSize
    ReadFile
    ShellExecuteW
    SHCreateDirectoryExW
    RegCreateKeyExA
    RegSetValueExA
    InternetOpenA
    InternetSetOptionA
    InternetOpenUrlA
    InternetReadFile
    InternetCloseHandleA

One can notice that this time, the code resolved 5 more APIs! these are the internet APIs.

Now after we resolved the APIs and probably decrypted the payload we can do two things, One is collect all the API’s we find of value that can contribute to our understanding of this malware and dump the decrypted form of the malware as we can we can extract some strings out of it which can be done at your own machine because as we saw the strings are always located at offset **0xXXXX44XX** and can viewed in the IDA string view here is an example:


![|602x400](upload://uWKic6qUBRWS4o8yd1aw7ycjBU8.png))

![602x79](upload://l0LnJkoxtfuMcppfQN8ga1NkUPe.png)

These decrypted strings can aid greatly in understanding this malware more in depth. The strings marked in red indicate that the malware might be downloading more artifacts off the internet and might be attempting to hide itself in traffic using legitimate looking network strings.

Wow, Alright! we gathered a lot of information, and we might get lost if we don&#39;t summarize our findings and understand what is our current status so let&#39;s stop for a second and reassess.
***
**Where should I continue from here?**

We’ve covered a lot here and this article is getting really long. There is so much to go from here -

* We’ve managed to unpack the malware first stage loader and the payload
* We have a list of APIs that can aid us explore the loader and the payload
* We understood the malwares stealth injection technique
* We managed to load the payload into memory and gain control over it
* We got a lot of artifacts and IOC’s that can aid us greatly in deeply analyzing this piece of malware.

This was no easy task, we had to defeat a packer and really tough obfuscation techniques. When I began writing this post only [12 AV engines](https://www.virustotal.com/gui/file/e6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3/detection) managed to detect this file as malicious so let’s give us a tap on the back.

See you guys next time!

***
**Sources:**

Sample used(SHA - 256) - 6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3/5e25c5f7a2b4a8790d7d1bbf

https://github.com/m0n0ph1/Process-Hollowing

https://www.youtube.com/watch?v=WlE8abc8V-4

https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf

https://www.amazon.com/Practical-Malware-Analysis-Hands-Dissecting/dp/1593272901

https://www.hybrid-analysis.com/sample/e6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3/5e25c5f7a2b4a8790d7d1bbf

https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf</description>
    
    <lastBuildDate>Thu, 06 Feb 2020 14:59:34 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-3/18943.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Analyzing Modern Malware Techniques - Part 3</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-3/18943/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/analyzing-modern-malware-techniques-part-3/18943/5</link>
        <pubDate>Thu, 04 Jun 2020 14:47:27 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18943-5</guid>
        <source url="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-3/18943.rss">Analyzing Modern Malware Techniques - Part 3</source>
      </item>
      <item>
        <title>Analyzing Modern Malware Techniques - Part 3</title>
        <dc:creator><![CDATA[bugcheck]]></dc:creator>
        <description><![CDATA[
            <p>Thank you for the post</p>
          <p><a href="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-3/18943/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/analyzing-modern-malware-techniques-part-3/18943/4</link>
        <pubDate>Thu, 06 Feb 2020 14:59:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18943-4</guid>
        <source url="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-3/18943.rss">Analyzing Modern Malware Techniques - Part 3</source>
      </item>
      <item>
        <title>Analyzing Modern Malware Techniques - Part 3</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Hell yeah dude!</p>
<p>Out the gate producing some kickass content for 0x00sec, good job!</p>
          <p><a href="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-3/18943/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/analyzing-modern-malware-techniques-part-3/18943/2</link>
        <pubDate>Tue, 04 Feb 2020 16:29:08 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18943-2</guid>
        <source url="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-3/18943.rss">Analyzing Modern Malware Techniques - Part 3</source>
      </item>
      <item>
        <title>Analyzing Modern Malware Techniques - Part 3</title>
        <dc:creator><![CDATA[Danus]]></dc:creator>
        <description><![CDATA[
            <h1><a name="analyzing-modern-malware-techniques-part-3-1" class="anchor" href="https://0x00sec.org#analyzing-modern-malware-techniques-part-3-1"></a>Analyzing Modern Malware Techniques - Part 3</h1>
<h2><a name="a-case-of-powershell-excel-4-macros-and-vb6part-2-of-2-2" class="anchor" href="https://0x00sec.org#a-case-of-powershell-excel-4-macros-and-vb6part-2-of-2-2"></a>A case of Powershell, Excel 4 Macros and VB6(part 2 of 2)</h2>
<h3><a name="preface-3" class="anchor" href="https://0x00sec.org#preface-3"></a>Preface:</h3>
<hr>
<p>When I was watching <a href="https://www.youtube.com/watch?v=J7e74QLVxCk&amp;t=2823s" rel="noopener nofollow ugc">The Cycle Of Cyber Threat Intelligence</a> the other day I learned about the concept called “Biases” and how it interferes with researchers and cause them time delays and make big mistakes in general when it comes to research. In this part of the research I was no stranger to my own biases, I like to get my hands dirty, dig deep into binaries and understand EVERYTHING that goes under the hood. It’s simply my nature and my curiosity that can get the better of me. As I was researching this sample, I insisted for the first few days to analyze everything by myself, instead of using great tools that were in my disposal. I ended up spending A LOT of time attempting to unpack the loader instead of using other tools in my arsenal that aided me further analyze the malware itself including the heavily obfuscated loader, thus proving that I do as everyone else have my own biases and sometimes its better off to simply stop, reassess your goals and re attempt to understand the big picture. So here we go - Part 3 hope you enjoy this one <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<hr>
<p><strong>Background knowledge required:</strong></p>
<ol>
<li>Knowledge in C and Assembly</li>
<li>Knowledge in WINAPI</li>
<li>Knowledge in IDA and x64dbg</li>
<li>Novice experience with analyzing obfuscated and packed code</li>
<li>Knowledge in PE Injection techniques(<a href="https://github.com/m0n0ph1/Process-Hollowing" rel="noopener nofollow ugc">Process Hollowing</a> especially for this one)</li>
</ol>
<p><strong>Tools used</strong></p>
<ol>
<li>Any.Run</li>
<li>IDA</li>
<li>PEBear and PEID</li>
<li>Resource Hacker</li>
<li>Process Monitor</li>
<li>Process Explorer</li>
<li>x64dbg</li>
</ol>
<p><strong>Goals:</strong></p>
<ol>
<li>Unpack malware</li>
<li>Understand covert launching</li>
<li>Disable anti debugging and anti vm techniques(if there are any)</li>
<li>Identify basic host based signatures</li>
<li>Identify basic network based signatures</li>
</ol>
<hr>
<p><strong>Basic Static and Dynamic Analysis:</strong></p>
<blockquote>
<p><strong>Some side notes:</strong></p>
<p>This malware performs process injection, the memory addresses you’ll see in my debugging pictures will be different because I had to re-execute the malware several times and because of the dynamic nature of memory allocation, you’ll sometimes see different addresses being shown.</p>
</blockquote>
<p>Using <a href="https://www.hybrid-analysis.com/sample/e6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3/5e25c5f7a2b4a8790d7d1bbf" rel="noopener nofollow ugc">Hybrid Analysis</a> I’ve collected some dry information about the activity of the <a href="https://www.hybrid-analysis.com/sample/e6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3/5e25c5f7a2b4a8790d7d1bbf" rel="noopener nofollow ugc">sample</a>:</p>
<p><strong>Anti debugging:</strong></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/c/cd64198629c9e229d08d9e9f5ab903a45edfc275.png" data-download-href="/uploads/short-url/tiYlkAVyVeJQYMxWcsZpo9GoBM1.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/c/cd64198629c9e229d08d9e9f5ab903a45edfc275_2_602x79.png" alt="" data-base62-sha1="tiYlkAVyVeJQYMxWcsZpo9GoBM1" width="602" height="79" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/c/cd64198629c9e229d08d9e9f5ab903a45edfc275_2_602x79.png, https://0x00sec.s3.amazonaws.com/optimized/2X/c/cd64198629c9e229d08d9e9f5ab903a45edfc275_2_903x118.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/c/cd64198629c9e229d08d9e9f5ab903a45edfc275_2_1204x158.png 2x" data-dominant-color="FAFAFA"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/6/6aeedce9d183ef78b8f40e988ee641b5f1833130.png" data-download-href="/uploads/short-url/ffYn9cGN4FUJdgXyioHfbWJQVl6.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6aeedce9d183ef78b8f40e988ee641b5f1833130_2_602x68.png" alt="" data-base62-sha1="ffYn9cGN4FUJdgXyioHfbWJQVl6" width="602" height="68" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6aeedce9d183ef78b8f40e988ee641b5f1833130_2_602x68.png, https://0x00sec.s3.amazonaws.com/optimized/2X/6/6aeedce9d183ef78b8f40e988ee641b5f1833130_2_903x102.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/6/6aeedce9d183ef78b8f40e988ee641b5f1833130_2_1204x136.png 2x" data-dominant-color="FBFBFB"></a></div><p></p>
<p><strong>Process Injection:</strong></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/6/6aa1a6af05721e592def37317eeb45eae6189fc6.png" data-download-href="/uploads/short-url/fdiWLdZNxQWa29viUOLKdzjg4Oa.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6aa1a6af05721e592def37317eeb45eae6189fc6_2_602x172.png" alt="" data-base62-sha1="fdiWLdZNxQWa29viUOLKdzjg4Oa" width="602" height="172" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/6/6aa1a6af05721e592def37317eeb45eae6189fc6_2_602x172.png, https://0x00sec.s3.amazonaws.com/optimized/2X/6/6aa1a6af05721e592def37317eeb45eae6189fc6_2_903x258.png 1.5x, /uploads/default/original/2X/6/6aa1a6af05721e592def37317eeb45eae6189fc6.png 2x" data-dominant-color="EEEEEE"></a></div><p></p>
<p><strong>Dropped artifacts:</strong></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/8/81110cd3c3a13671b6c045c39ed018a238ac1109.png" data-download-href="/uploads/short-url/ipM7Ef20pzbtBKnw9RcvcyKTA4p.png?dl=1" title=""><img src="/uploads/default/original/2X/8/81110cd3c3a13671b6c045c39ed018a238ac1109.png" alt="" data-base62-sha1="ipM7Ef20pzbtBKnw9RcvcyKTA4p" width="602" height="80" role="presentation" data-dominant-color="F5F5F5"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/b/b13d38b7368bded18e881b0867297e5014297c70.png" data-download-href="/uploads/short-url/phVG5pfjEDYOkRIhhp11RYaCpdS.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/b/b13d38b7368bded18e881b0867297e5014297c70_2_602x77.png" alt="" data-base62-sha1="phVG5pfjEDYOkRIhhp11RYaCpdS" width="602" height="77" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/b/b13d38b7368bded18e881b0867297e5014297c70_2_602x77.png, https://0x00sec.s3.amazonaws.com/optimized/2X/b/b13d38b7368bded18e881b0867297e5014297c70_2_903x115.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/b/b13d38b7368bded18e881b0867297e5014297c70_2_1204x154.png 2x" data-dominant-color="FAFAFA"></a></div><p></p>
<p>Then I decided to load IDA and x64dbg to analyze the malware, which caused a significant delay in my analysis, I decided to stop and reassess the situation. The binary was so heavily obfuscated that It was getting real hard to impossible to analyze it without the usage of external tools. I decided to use API Monitor to collect a list of APIs the malware calls that could perhaps aid my debugging but the anti debugging techniques this malware deploys can crash, stop and confuse any debugger I threw at it including API monitor. The malware would simply not execute under any debugger attached. As a final resort I decided I’ll use process explorer and process monitor to understand what is going on exactly upon execution. Luckily for me - the malware did execute under a VM.</p>
<p><strong>Process Monitor &amp; Process Explorer:</strong></p>
<p>It could be observed, under execution that first the sample would launch and begin to eat up CPU usage that indicates its unpacking, Then it would launch a sub process called RegAsm.exe, which is a known Microsoft application for registering .NET assembly. Malware frequently uses this binary to inject code into, and indeed as mentioned before hybrid analysis detected that memory is being injected into this binary.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/b/b00e224b92b830c5a600652d30e87966be956514.png" data-download-href="/uploads/short-url/p7sjDjTKf71JtK6gej4cMgA2heY.png?dl=1" title=""><img src="/uploads/default/original/2X/b/b00e224b92b830c5a600652d30e87966be956514.png" alt="" data-base62-sha1="p7sjDjTKf71JtK6gej4cMgA2heY" width="602" height="29" role="presentation" data-dominant-color="E2E2E2"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/9/937b4bddd1920684b495efd168b88887d70a5c0c.png" data-download-href="/uploads/short-url/l2GlEZPyZ4V8oLB9lhTcXM3GoJC.png?dl=1" title=""><img src="/uploads/default/original/2X/9/937b4bddd1920684b495efd168b88887d70a5c0c.png" alt="" data-base62-sha1="l2GlEZPyZ4V8oLB9lhTcXM3GoJC" width="602" height="80" role="presentation" data-dominant-color="B8C1DC"></a></div><p></p>
<p>The malware launches RegAsm.exe and it seems to launch with the sample path in the command parameters.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/6/656318ae1dc62840c6229d7571fe920311eb0511.png" data-download-href="/uploads/short-url/esUxkudhWpg7wxmitQAJ6AOuv3H.png?dl=1" title=""><img src="/uploads/default/original/2X/6/656318ae1dc62840c6229d7571fe920311eb0511.png" alt="" data-base62-sha1="esUxkudhWpg7wxmitQAJ6AOuv3H" width="602" height="67" role="presentation" data-dominant-color="F6F6F7"></a></div><p></p>
<p>Then it can be observed that as soon as RegAsm.exe is launched, a conhost.exe(cmd.exe) is launched with strange parameters:</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/3/3437317b1a4d3420939ddf221ba5506e0f4db3e3.png" data-download-href="/uploads/short-url/7rV4VIj41pzfXHNaJEV03rtqddF.png?dl=1" title=""><img src="/uploads/default/original/2X/3/3437317b1a4d3420939ddf221ba5506e0f4db3e3.png" alt="" data-base62-sha1="7rV4VIj41pzfXHNaJEV03rtqddF" width="602" height="17" role="presentation" data-dominant-color="E2E1E2"></a></div><br>
After waiting for a while we can observe TCP network connections being made to remote addresses:<p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/e/ed1cf57cd8c3fa9485fa3c7304441ea572337a77.png" data-download-href="/uploads/short-url/xPBcGZbgmAi2ONGyaQXaYDa0bzh.png?dl=1" title=""><img src="/uploads/default/original/2X/e/ed1cf57cd8c3fa9485fa3c7304441ea572337a77.png" alt="" data-base62-sha1="xPBcGZbgmAi2ONGyaQXaYDa0bzh" width="602" height="55" role="presentation" data-dominant-color="CCE1F6"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/8/8d4773109d96bae4b2e2dd886a9b85e17c854c88.png" data-download-href="/uploads/short-url/k9OoZBbvrZ1oxsEhKHuRUpYjGT6.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/8/8d4773109d96bae4b2e2dd886a9b85e17c854c88_2_602x97.png" alt="" data-base62-sha1="k9OoZBbvrZ1oxsEhKHuRUpYjGT6" width="602" height="97" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/8/8d4773109d96bae4b2e2dd886a9b85e17c854c88_2_602x97.png, https://0x00sec.s3.amazonaws.com/optimized/2X/8/8d4773109d96bae4b2e2dd886a9b85e17c854c88_2_903x145.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/8/8d4773109d96bae4b2e2dd886a9b85e17c854c88_2_1204x194.png 2x" data-dominant-color="FAFAFA"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/9/9321c8caaaa1ea5829b96f8305ebf86a53aa3884.png" data-download-href="/uploads/short-url/kZAzo3S7IOm5zDsa8xVegxFKw4c.png?dl=1" title=""><img src="/uploads/default/original/2X/9/9321c8caaaa1ea5829b96f8305ebf86a53aa3884.png" alt="" data-base62-sha1="kZAzo3S7IOm5zDsa8xVegxFKw4c" width="602" height="153" role="presentation" data-dominant-color="DFE0E1"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/0/0d529fee1dd1894590033f0529721d4ecd41b511.png" data-download-href="/uploads/short-url/1TRefgm9GsPk8VxKex82pSgeRG1.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0d529fee1dd1894590033f0529721d4ecd41b511_2_602x323.png" alt="" data-base62-sha1="1TRefgm9GsPk8VxKex82pSgeRG1" width="602" height="323" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0d529fee1dd1894590033f0529721d4ecd41b511_2_602x323.png, https://0x00sec.s3.amazonaws.com/optimized/2X/0/0d529fee1dd1894590033f0529721d4ecd41b511_2_903x484.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/0/0d529fee1dd1894590033f0529721d4ecd41b511_2_1204x646.png 2x" data-dominant-color="E6E5E5"></a></div><p></p>
<p>In addition we know that the malware drops a file into disk called <strong>“OOlqs”</strong> into the <strong>%appdata%/aljwSjH/</strong> directory, this file is created with hidden attributes. after executing the malware I examined the file and it seems to be a copy of <strong>RegAsm</strong> specifically the version the malware is launching as the victim sub process <strong>(v2.0.50727).</strong></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/0/0c1dc7bf9fb58eb679a5c728d5aa33fdd6768ce4.png" data-download-href="/uploads/short-url/1Jbx53MCHgoBPjufzgGupj40fPK.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0c1dc7bf9fb58eb679a5c728d5aa33fdd6768ce4_2_602x73.png" alt="" data-base62-sha1="1Jbx53MCHgoBPjufzgGupj40fPK" width="602" height="73" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0c1dc7bf9fb58eb679a5c728d5aa33fdd6768ce4_2_602x73.png, https://0x00sec.s3.amazonaws.com/optimized/2X/0/0c1dc7bf9fb58eb679a5c728d5aa33fdd6768ce4_2_903x109.png 1.5x, /uploads/default/original/2X/0/0c1dc7bf9fb58eb679a5c728d5aa33fdd6768ce4.png 2x" data-dominant-color="E0E2E6"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/c/c48200c574cc45d2048a124de225308ed9884119.png" data-download-href="/uploads/short-url/s2o75FDLUqSTxmBFvKXiDuLsrnb.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c48200c574cc45d2048a124de225308ed9884119_2_602x133.png" alt="" data-base62-sha1="s2o75FDLUqSTxmBFvKXiDuLsrnb" width="602" height="133" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/c/c48200c574cc45d2048a124de225308ed9884119_2_602x133.png, https://0x00sec.s3.amazonaws.com/optimized/2X/c/c48200c574cc45d2048a124de225308ed9884119_2_903x199.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/c/c48200c574cc45d2048a124de225308ed9884119_2_1204x266.png 2x" data-dominant-color="F2F2F2"></a></div><p></p>
<p>They contain the exact SHA-256 checksum which leads me to believe that the malware will launch its own dropped RegAsm.exe variant incase the specific version of RegAsm.exe is not found on the computer.</p>
<p>In addition RegAsm.exe is attempting to query sensitive data files:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/3/3b69be11e5e1d6bbeb0ffba89938c3f3168fae45.png" data-download-href="/uploads/short-url/8tAIOXi5fHBBOygGy7psrfVJBM9.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/3/3b69be11e5e1d6bbeb0ffba89938c3f3168fae45_2_602x353.png" alt="" data-base62-sha1="8tAIOXi5fHBBOygGy7psrfVJBM9" width="602" height="353" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/3/3b69be11e5e1d6bbeb0ffba89938c3f3168fae45_2_602x353.png, /uploads/default/original/2X/3/3b69be11e5e1d6bbeb0ffba89938c3f3168fae45.png 1.5x, /uploads/default/original/2X/3/3b69be11e5e1d6bbeb0ffba89938c3f3168fae45.png 2x" data-dominant-color="DBDDDF"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/3/3cf4c627bc8c26556df953736044568306aa5b2b.png" data-download-href="/uploads/short-url/8Hf4Bdh7x3RhZiDXhl0kpaV4LRF.png?dl=1" title=""><img src="/uploads/default/original/2X/3/3cf4c627bc8c26556df953736044568306aa5b2b.png" alt="" data-base62-sha1="8Hf4Bdh7x3RhZiDXhl0kpaV4LRF" width="602" height="12" role="presentation" data-dominant-color="E9E9E9"></a></div><p></p>
<p>For the above example it is attempting to open Chrome and FireFox data files which strikes me as very suspicious. Later on I noticed the following:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/9/9503aaf36d562ee0f7827a36d27584c64a182cf8.png" data-download-href="/uploads/short-url/lgf04TjzeIWQ8RBd6W0B1XMmKve.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/9/9503aaf36d562ee0f7827a36d27584c64a182cf8_2_602x323.png" alt="" data-base62-sha1="lgf04TjzeIWQ8RBd6W0B1XMmKve" width="602" height="323" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/9/9503aaf36d562ee0f7827a36d27584c64a182cf8_2_602x323.png, https://0x00sec.s3.amazonaws.com/optimized/2X/9/9503aaf36d562ee0f7827a36d27584c64a182cf8_2_903x484.png 1.5x, /uploads/default/original/2X/9/9503aaf36d562ee0f7827a36d27584c64a182cf8.png 2x" data-dominant-color="E3E2E2"></a></div><p></p>
<p>These are sensitive data files for various browser and other applications(Yandex, Chrome, Comodo, Firefox), this binary without a doubt is performing very suspicious activity.</p>
<hr>
<p><strong>Advanced Static and Dynamic Analysis:</strong></p>
<p>We’ll have to find a way to dump the payload from memory. As I mentioned before, attaching to RegAsm.exe will cause it to crash, so this option is a no go. What we must do Is attach to the sample which I named <strong>infected.exe</strong> (just in case the malware deploys any tricks looking for SHA-256 checksum named processes or processes running containing the strings “sample”, “malware” etc).</p>
<p>Looking at this malware strings or imports in IDA yields nothing, no imports and no strings. We go straight into debugging.</p>
<p>In addition, to ease our analysis - lets install <a href="https://github.com/x64dbg/ScyllaHide/releases" rel="noopener nofollow ugc">SycllaHide </a>which will stop some of the anti debugging techniques this sample employs(thanks <a href="https://twitter.com/0x00dtm" rel="noopener nofollow ugc">@0x00dtm</a> for the advice). Lets turn on all the options for anti-anti debugging as this will aid us greatly in analyzing this sample.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/5/58ee06444c363ffb152bf18976c9de0047319d66.png" data-download-href="/uploads/short-url/cGHYUI7n4C4RILbBsOCQZueaC34.png?dl=1" title=""><img src="/uploads/default/original/2X/5/58ee06444c363ffb152bf18976c9de0047319d66.png" alt="" data-base62-sha1="cGHYUI7n4C4RILbBsOCQZueaC34" width="548" height="500" role="presentation" data-dominant-color="E1E2E4"></a></div><p></p>
<p>In my previous article we loaded up the sample in IDA to find out its a VB6 file. I fixed it up with an IDC script but it didn’t help much, So this time I simply decided to execute it in x64dbg and make an educated guess that if we set a breakpoint on <strong>VirtualAlloc</strong> might lead us somewhere:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/4/44c2fcc2ed9ec9d9af26425010cee8770047c44a.png" data-download-href="/uploads/short-url/9Oie2vJdrrlAzlqRAr8SZIFLMjo.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/4/44c2fcc2ed9ec9d9af26425010cee8770047c44a_2_602x67.png" alt="" data-base62-sha1="9Oie2vJdrrlAzlqRAr8SZIFLMjo" width="602" height="67" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/4/44c2fcc2ed9ec9d9af26425010cee8770047c44a_2_602x67.png, https://0x00sec.s3.amazonaws.com/optimized/2X/4/44c2fcc2ed9ec9d9af26425010cee8770047c44a_2_903x100.png 1.5x, /uploads/default/original/2X/4/44c2fcc2ed9ec9d9af26425010cee8770047c44a.png 2x" data-dominant-color="EDE7DE"></a></div><br>
<img src="/uploads/default/original/2X/a/a016c2ccc904cbe53db24ca5afcf5ac623033263.png" alt="" data-base62-sha1="mQd9Wp6cEQy0prWxVJczhgmVxDl" width="586" height="51" role="presentation"><br>
The breakpoint was hit about 7 times, but each time it was hit outside our main module, on the 8th try I viewed the call stack and it seems to been executed from the main module this time:<p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/6/67624fe05a1e8f6513faa955884440dca91f0757.png" data-download-href="/uploads/short-url/eKzOlfUBCt6s99W4JrHlzkztOez.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/67624fe05a1e8f6513faa955884440dca91f0757_2_602x272.png" alt="" data-base62-sha1="eKzOlfUBCt6s99W4JrHlzkztOez" width="602" height="272" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/6/67624fe05a1e8f6513faa955884440dca91f0757_2_602x272.png, https://0x00sec.s3.amazonaws.com/optimized/2X/6/67624fe05a1e8f6513faa955884440dca91f0757_2_903x408.png 1.5x, /uploads/default/original/2X/6/67624fe05a1e8f6513faa955884440dca91f0757.png 2x" data-dominant-color="E2D9D2"></a></div><br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/a/a25f79ca0e2a9ad6a316fcbfc54138bde46d8a3b.png" data-download-href="/uploads/short-url/napUaOVqO0DY0LQpgju5yj5dPVp.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a25f79ca0e2a9ad6a316fcbfc54138bde46d8a3b_2_602x67.png" alt="" data-base62-sha1="napUaOVqO0DY0LQpgju5yj5dPVp" width="602" height="67" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a25f79ca0e2a9ad6a316fcbfc54138bde46d8a3b_2_602x67.png, https://0x00sec.s3.amazonaws.com/optimized/2X/a/a25f79ca0e2a9ad6a316fcbfc54138bde46d8a3b_2_903x100.png 1.5x, /uploads/default/original/2X/a/a25f79ca0e2a9ad6a316fcbfc54138bde46d8a3b.png 2x" data-dominant-color="EFE8DC"></a></div><br>
Interesting, I decided to view the contents of the newly allocated address:<br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/2/2b2be79234bf6b7428d7190b4970903481434b52.png" data-download-href="/uploads/short-url/69UAYm7G0ZMfanJyhcwmo2btCdc.png?dl=1" title=""><img src="/uploads/default/original/2X/2/2b2be79234bf6b7428d7190b4970903481434b52.png" alt="" data-base62-sha1="69UAYm7G0ZMfanJyhcwmo2btCdc" width="602" height="87" role="presentation" data-dominant-color="ECEDDF"></a></div><br>
Obviously it’s empty, how ever I wanted to check if it would fill up. To check we must add a hardware breakpoint on the address <strong>0x00250000</strong> and make the debugger break if this memory region gets accessed. so let’s do just that:<p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/8/8370fcd1182dc44ba03b0ad89f10c8c5f88eff92.png" data-download-href="/uploads/short-url/iKMCEeTe0QpmBkQd0EnBEU9F5bc.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/8/8370fcd1182dc44ba03b0ad89f10c8c5f88eff92_2_602x327.png" alt="" data-base62-sha1="iKMCEeTe0QpmBkQd0EnBEU9F5bc" width="602" height="327" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/8/8370fcd1182dc44ba03b0ad89f10c8c5f88eff92_2_602x327.png, /uploads/default/original/2X/8/8370fcd1182dc44ba03b0ad89f10c8c5f88eff92.png 1.5x, /uploads/default/original/2X/8/8370fcd1182dc44ba03b0ad89f10c8c5f88eff92.png 2x" data-dominant-color="ECE9E0"></a></div><br>
And …<br>
<img src="/uploads/default/original/2X/9/9aa3400c67e05757de5b1eb79ff470d48570b705.png" alt="" data-base62-sha1="m3Zi7R9GiBgEyfVD76nEB2RDtyZ" width="593" height="163" role="presentation"><br>
but alas, this is no PE file header, and we try to continue looking for more breaks on <strong>VirtualAlloc</strong>, and continue executing the application it will crash. But then, perhaps this code is a shellcode, that might get executed? Hmm, lets try to find this allocated section again by re executing the sample.<p></p>
<p>So again I found the allocated area this time it hit on <strong>0x00240000</strong>. I decided to analyze the memory as code by viewing it in disassembly:</p>
<p><img src="/uploads/default/original/2X/c/c507b33fb290951ad76ac4e0ec707294e70fa6d3.png" alt="" data-base62-sha1="s70yFNxE0V6AE6FCu7MIuP59zl9" width="602" height="441" role="presentation"></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/c/cfbbec97b5e365490a3f01cbcd01b9bd780c4712.png" data-download-href="/uploads/short-url/tDHsEk4Fy6Alp0yn1lWc0OW86EG.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/c/cfbbec97b5e365490a3f01cbcd01b9bd780c4712_2_602x108.png" alt="" data-base62-sha1="tDHsEk4Fy6Alp0yn1lWc0OW86EG" width="602" height="108" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/c/cfbbec97b5e365490a3f01cbcd01b9bd780c4712_2_602x108.png, https://0x00sec.s3.amazonaws.com/optimized/2X/c/cfbbec97b5e365490a3f01cbcd01b9bd780c4712_2_903x162.png 1.5x, /uploads/default/original/2X/c/cfbbec97b5e365490a3f01cbcd01b9bd780c4712.png 2x" data-dominant-color="F1ECE3"></a></div><p></p>
<p>And it looks like valid code, So I decided to place a breakpoint on it.</p>
<p>but it did not execute… hmm, Probably because I set it as a memory breakpoint and this binary is riddled with anti debugging traps, I decide to put a hardware on execution breakpoint on the allocated area and what do you know:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/b/b6778d438061d4fcd77ed7a9e978d1e203ee5d36.png" data-download-href="/uploads/short-url/q2b2mPb7FFNTMIH8y7H74alJgjQ.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/b/b6778d438061d4fcd77ed7a9e978d1e203ee5d36_2_602x220.png" alt="" data-base62-sha1="q2b2mPb7FFNTMIH8y7H74alJgjQ" width="602" height="220" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/b/b6778d438061d4fcd77ed7a9e978d1e203ee5d36_2_602x220.png, https://0x00sec.s3.amazonaws.com/optimized/2X/b/b6778d438061d4fcd77ed7a9e978d1e203ee5d36_2_903x330.png 1.5x, /uploads/default/original/2X/b/b6778d438061d4fcd77ed7a9e978d1e203ee5d36.png 2x" data-dominant-color="F3EDE5"></a></div><br>
We break on the allocated shellcode!<br>
The call stack indicates it was called from <strong>0x0041B17F</strong><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/f/fefbfc78c4f0181cf2ac84bc2e3a33e039ae7ab9.png" data-download-href="/uploads/short-url/AnH9DEewmi40zcdCsJixShOrx4l.png?dl=1" title=""><img src="/uploads/default/original/2X/f/fefbfc78c4f0181cf2ac84bc2e3a33e039ae7ab9.png" alt="" data-base62-sha1="AnH9DEewmi40zcdCsJixShOrx4l" width="602" height="24" role="presentation" data-dominant-color="E1E0DA"></a></div><br>
First thing I did was dump the shellcode using the <strong>Syclla</strong> and moved the memory dump into my Static Analysis machine, this code is not executable but we can analyze it on IDA. Since each execution this shellcode will be allocated in different areas it will be a bit harder to analyze it but the last 4 bytes of the code addresses have the same offset all the time so it’s still possible.<p></p>
<p>Usually, when I hit this kind of code that I have no idea what it does so I decided to traverse around it to see if I find anything interesting. the first artifact I find is located at offset <strong>0x52AF</strong> from the begging of the allocated code, a call to <strong>LoadLibraryA</strong> is performed at address offset <strong>0x52B8</strong> and then a Call to <strong>GetProcAddress</strong> is performed inside sub_offset52E4 at offset <strong>0x52FD</strong>:</p>
<p><strong>IDA View:</strong></p>
<p><img src="/uploads/default/original/2X/e/e951b58677692e555e79f4dad5b094fd0f8bf57d.png" alt="" data-base62-sha1="xi2jjtnVFlbDHSu8DmkXf9pQEMJ" width="536" height="60" role="presentation"></p>
<p><img src="/uploads/default/original/2X/4/48f5efbd4633ceb7d0f37b0ceb6703c4aeaa6bd7.png" alt="" data-base62-sha1="aprifuW4F6S5T79ufYnIPaDxejt" width="478" height="53" role="presentation"></p>
<p><strong>x64dbg View:</strong></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/2/2e80f3920d1fad6145fb477fbdefe97d02a3d545.png" data-download-href="/uploads/short-url/6DoeVNtwTPXsLN0tdQH5nyDbmEB.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/2/2e80f3920d1fad6145fb477fbdefe97d02a3d545_2_602x115.png" alt="" data-base62-sha1="6DoeVNtwTPXsLN0tdQH5nyDbmEB" width="602" height="115" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/2/2e80f3920d1fad6145fb477fbdefe97d02a3d545_2_602x115.png, https://0x00sec.s3.amazonaws.com/optimized/2X/2/2e80f3920d1fad6145fb477fbdefe97d02a3d545_2_903x172.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/2/2e80f3920d1fad6145fb477fbdefe97d02a3d545_2_1204x230.png 2x" data-dominant-color="F0EBE5"></a></div><p></p>
<p><img src="/uploads/default/original/2X/c/c124a6f6d5ea0dc5b570f22f683cfd4e9a90a1eb.gif" alt="" data-base62-sha1="ryCG5eBQk8sJGirtIe3fjigTiT9" width="602" height="223" role="presentation" class="animated"></p>
<p>We can see that various API’s are being resolved and this is not uncommon for this type of heavily obfuscated malware, it is deploying what is called Dynamic API resolving which means all APIs will be resolved dynamically making the analysis much harder. As we Recall, I assumed that this malware will perform Process Hollowing on RegAsm.exe and the dry analysis we performed using Hybrid-Analysis actually gave us more prove that this in fact MIGHT be correct. Since we found the API resolving method for this malware, we can set up a breakpoint on <strong>func_LoadLibraryCall</strong>(at offset <strong>0x52AF</strong>) for this function and see if any API’s that are related to process hollowing or code injection will be met. I have reason to suspect this is might actually work because if we check the references for <strong>func_LoadLibraryCall</strong> we can see its being called a lot during execution.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/5/5d2f1dc2eb7af446f4c2f9e3cbe7e77445fe81cd.png" data-download-href="/uploads/short-url/dillKICkCz0DtM5Mt0dKOYdLz3L.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5d2f1dc2eb7af446f4c2f9e3cbe7e77445fe81cd_2_602x441.png" alt="" data-base62-sha1="dillKICkCz0DtM5Mt0dKOYdLz3L" width="602" height="441" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5d2f1dc2eb7af446f4c2f9e3cbe7e77445fe81cd_2_602x441.png, /uploads/default/original/2X/5/5d2f1dc2eb7af446f4c2f9e3cbe7e77445fe81cd.png 1.5x, /uploads/default/original/2X/5/5d2f1dc2eb7af446f4c2f9e3cbe7e77445fe81cd.png 2x" data-dominant-color="414345"></a></div><p></p>
<p>So let’s be on the lookout for:</p>
<pre><code>VirtualAllocEx
GetFileSize
CreateProcess
NtGetContextThread
NtReadVirtualMemory
NtWriteVirtualMemory
NtResumeThread
NtUnmapViewOfSection
NtProtectVirtualMemory
</code></pre>
<p>A list of APIs I’ve encountered in the API resolving routine:</p>
<pre><code>TerminateProcess
EnumWindows
NtProtectVirtualMemory
DbgBreakPoint
DbgUiRemoteBreakin
NtSetInformationThread
NtAllocateVirtualMemory
NtGetContextThread
NtSetContextThread
NtWriteVirtualMemory
NtCreateSection
NtMapViewOfSection
NtOpenFile
NtClose
NtResumeThread
CreateProcessInternalW
GetLongPathNameW
Sleep
CreateThread
WaitForSingleObject
TerminateThread
AddVectoredExceptionHandler
CreateFileW
WriteFile
CloseHandle
GetFileSize
ReadFile
ShellExecuteW
SHCreateDirectoryExW
RegCreateKeyExA
RegSetValueExA
</code></pre>
<p>As expected I’ve extracted APIs that might indicated process hollowing.</p>
<p>I’ve noticed two interesting things about this sample regarding the API resolving, One is that each run these strings are loaded from the exact sample location <strong>0x44XX</strong> - <strong>0x4XXX</strong>, this means that we dump this memory section again and look at the strings in their decrypted form! also I think the author made a mistake because if we’ll view the strings through IDA we can see that he didn’t encrypt all of them:</p>
<p><img src="/uploads/default/original/2X/0/07afb186bfc9399747a6a2e49c665ff9d50133db.png" alt="" data-base62-sha1="15ZLm2YxLv2Y0ZbUD2SOHXk60Ph" width="399" height="42" role="presentation"></p>
<p>Anyway, on with the analysis, we can actually notice that during this API resolving the malware already spawned <strong>RegAsm.exe</strong> as a <strong>child process</strong> and we finishing looping around the API resolving function the malware terminates itself and we can see <strong>RegAsm.exe</strong> begins to execute independently.</p>
<p>We must restart the program but this time we need to choose the correct APIs to break on, If we break on these APIs using memory breakpoints the malware will detect this and force the debugger to stop execution on a debugger trap so we must perform this using hardware breakpoints.</p>
<p>We can only set 4 at a time, So let’s choose the following APIs:</p>
<ol>
<li>CreateProcessInternalW</li>
<li>ZwWriteVirtualMemory</li>
<li>NtResumeThread</li>
<li>ShellExecuteW</li>
</ol>
<p>After the APIs are resolved we break at CreateProcessInternalW:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/2/27414831977c44ef53987b1e60179c51abb2be2a.png" data-download-href="/uploads/short-url/5Bgudzvgeg7ZKWvBCCVXKRa2gZQ.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/2/27414831977c44ef53987b1e60179c51abb2be2a_2_602x81.png" alt="" data-base62-sha1="5Bgudzvgeg7ZKWvBCCVXKRa2gZQ" width="602" height="81" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/2/27414831977c44ef53987b1e60179c51abb2be2a_2_602x81.png, /uploads/default/original/2X/2/27414831977c44ef53987b1e60179c51abb2be2a.png 1.5x, /uploads/default/original/2X/2/27414831977c44ef53987b1e60179c51abb2be2a.png 2x" data-dominant-color="F2EBE4"></a></div><p></p>
<p>We can view the parameters being passed to the function, and unfortunately this API is not documented AT ALL. but we can kinda make sense from whats going by looking at <a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa" rel="noopener nofollow ugc">CreateProcessA</a> which calls <em><strong>CreateProcessInternalW</strong></em>.</p>
<pre><code>BOOL CreateProcessA(
LPCSTR lpApplicationName = RegAsm.exe
LPSTR lpCommandLine = Our sample
LPSECURITY_ATTRIBUTES lpProcessAttributes,
LPSECURITY_ATTRIBUTES lpThreadAttributes,
BOOL bInheritHandles,
DWORD dwCreationFlags = CREATE_SUSPENDED(0x00000004)
LPVOID lpEnvironment,
LPCSTR lpCurrentDirectory,
LPSTARTUPINFOA lpStartupInfo,
LPPROCESS_INFORMATION lpProcessInformation
);
</code></pre>
<p>This is our first indication of process injection. First the malware spawns RegAsm as a suspended process which can be viewed in process explorer:</p>
<p><img src="/uploads/default/original/2X/4/42578a17be20b7af7ed126c95d0e0220944cd5c1.png" alt="" data-base62-sha1="9sT43pbIoZVZLqRFRJe3pk4B6KJ" width="501" height="55" role="presentation"></p>
<p>Let’s continue.</p>
<p>Then we break on <strong>ZwWriteVirtualMemory</strong>:</p>
<p><img src="/uploads/default/original/2X/0/07edc5642b3a38382d53b0759a1a355d8e714c42.png" alt="" data-base62-sha1="188Lovftr8Owy8hYXHiNu0L0We6" width="468" height="67" role="presentation"></p>
<p>The <a href="https://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FMemory%20Management%2FVirtual%20Memory%2FNtWriteVirtualMemory.html" rel="noopener nofollow ugc">undocumented Internals</a> website states that:</p>
<blockquote>
<p>“<strong>NtWriteVirtualMemory</strong> is similar to WINAPI <a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory" rel="noopener nofollow ugc">WriteProcessMemory</a>. See Ms SDK for detailed description of parameters.”</p>
</blockquote>
<blockquote>
<p>Side note, In userland calls to Nt prefix and Zw prefix dont matter they are both the same, I assume malware utilizes these calls to avoid AV detection since these APIs might not be monitored.</p>
</blockquote>
<p>So let’s look at that:</p>
<pre><code>BOOL WriteProcessMemory(
HANDLE hProcess,
LPVOID lpBaseAddress,
LPCVOID lpBuffer,
SIZE_T nSize,
SIZE_T *lpNumberOfBytesWritten
);
</code></pre>
<p>hProcess holds the handle to the process we want to write, <strong>0x100</strong> corresponds to the <strong>RegAsm.exe</strong> Process, this can be seen in the Process Explorer:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/e/eb5649dc98d07bde7301f406543b8eef6e53bf72.png" data-download-href="/uploads/short-url/xzT4PiFPMOaIROXfnIlrp2DMUO6.png?dl=1" title=""><img src="/uploads/default/original/2X/e/eb5649dc98d07bde7301f406543b8eef6e53bf72.png" alt="" data-base62-sha1="xzT4PiFPMOaIROXfnIlrp2DMUO6" width="602" height="17" role="presentation" data-dominant-color="6DB5FD"></a></div><p></p>
<p>we’re writing <strong>0x5DC</strong> bytes starting from address <strong>0x005F7D00</strong>. I looked it up in the dump it doesn’t seem to contain much of interest to us. so I’ll continue with execution.</p>
<p>We break on <strong>ZwWriteVirtualMemory</strong> again!:</p>
<p><img src="/uploads/default/original/2X/a/a34ad7e46b0e38e72a9d926f991cfd84db88bd7b.png" alt="" data-base62-sha1="niyb5dpcS0XZjr6RyfABSZfNMkr" width="186" height="66" role="presentation"></p>
<p>This goes on 2 mores times until I hit something interesting:</p>
<p><img src="/uploads/default/original/2X/7/7211d7277b85ed234a80f27f57a9f68e5d202269.png" alt="" data-base62-sha1="gh6EAk6FKwcZC914QvVoN0r4CsV" width="168" height="69" role="presentation"></p>
<p>huh… it seems to inject the shellcode we are debugging right now straight into <strong>RegaAsm.exe</strong>, we can check this by viewing <strong>0x4B0000</strong> in disassembly view in x64dbg:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/4/4bf38e5390f3d74480c2cfa99559c8d467efca8f.png" data-download-href="/uploads/short-url/aPTCQmVt1cps08FitAxYXG5pMrZ.png?dl=1" title=""><img src="/uploads/default/original/2X/4/4bf38e5390f3d74480c2cfa99559c8d467efca8f.png" alt="" data-base62-sha1="aPTCQmVt1cps08FitAxYXG5pMrZ" width="602" height="303" role="presentation" data-dominant-color="F4EEE5"></a></div><p></p>
<p>Next API that is <strong>NtResumeThread</strong> that will probably cause the newly created thread in <strong>RegAsm.exe</strong> to execute and we don’t want to execute that because the malware will continue execution! Now what’s really cool here, is that we can attach to <strong>RegAsm.exe</strong> and put a breakpoint on the shellcode and resume the new thread and break on the malware again!</p>
<p>Now I’ve attached to RegAsm.exe <img src="/uploads/default/original/2X/e/e90c67bcb8b8b79085c70558dd7bf32d0e31e4a1.png" alt="" data-base62-sha1="xfDPnspBKIHmgjCUGo8ScPpZDYR" width="578" height="148" role="presentation"></p>
<p>If we got in the Threads tab in x64dbg We see a suspicious thread with <strong>EIP 0xD0000</strong>(Will be different on your machine) but the and it seems to be marked as the main thread, this is highly suspicious behavior. let’s go into that thread and place a breakpoint at its start address and simply resume it.<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/3/315fa91013cae81355c3e68d372fa58c742eb1b1.png" data-download-href="/uploads/short-url/72MlxR43wLecRjIrOhlweh2axNv.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/3/315fa91013cae81355c3e68d372fa58c742eb1b1_2_602x143.png" alt="" data-base62-sha1="72MlxR43wLecRjIrOhlweh2axNv" width="602" height="143" role="presentation" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/3/315fa91013cae81355c3e68d372fa58c742eb1b1_2_602x143.png, https://0x00sec.s3.amazonaws.com/optimized/2X/3/315fa91013cae81355c3e68d372fa58c742eb1b1_2_903x214.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/3/315fa91013cae81355c3e68d372fa58c742eb1b1_2_1204x286.png 2x" data-dominant-color="F8F2EB"></a></div><br>
And we hit it our breakpoint!<p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/1/1bfa05e371af3f31b220c9627bd48e1791420fa7.png" data-download-href="/uploads/short-url/3ZuyW8Um5ghVKQM1rFgDNZdfOib.png?dl=1" title=""><img src="/uploads/default/original/2X/1/1bfa05e371af3f31b220c9627bd48e1791420fa7.png" alt="" data-base62-sha1="3ZuyW8Um5ghVKQM1rFgDNZdfOib" width="602" height="44" role="presentation" data-dominant-color="EAE5DD"></a></div><br>
In the case of this malware, it was not a classic process hollowing attack but an interesting case of code Injection, because in classic case of process hollowing, the attacker must unmap the original PE out of the process and thus hollow the process and then remap his own PE into the process. In this case it seems that the malware maps just its code into the memory of the other process and sets the main thread to execute on this newly allocated code. This method is easier to execute but more detectable, as it would seem that new shellcode is being run from a suspicious area in the code that does not match the original entry point of the image located in the Optional Header field. In addition the malware author did not bother masking the injection and we can see that the executing code is going to be executing in memory which is in <strong>READ, WRITE and EXECUTE</strong> privileges:<p></p>
<p><img src="/uploads/default/original/2X/4/4e0d37d849cdf6dd00bed9b95004355695f5636a.png" alt="" data-base62-sha1="b8tyS0JrdTPBq4ru58LHjiYJHPc" width="194" height="14" role="presentation"></p>
<p>This is highly suspicious.</p>
<p>Next Let’s put a breakpoint on our API resolve routine at offset 0x52B8 and see what new API’s are going to be called in this new executing code.</p>
<pre><code>TerminateProcess
EnumWindows
NtProtectVirtualMemory
DbgBreakPoint
DbgUiRemoteBreakin
NtSetInformationThread
NtAllocateVirtualMemory
NtGetContextThread
NtSetContextThread
NtWriteVirtualMemory
NtCreateSection
NtMapViewOfSection
NtOpenFile
NtClose
NtResumeThread
CreateProcessInternalW
GetLongPathNameW
Sleep
CreateThread
WaitForSingleObject
TerminateThread
AddVectoredExceptionHandler
CreateFileW
WriteFile
CloseHandle
GetFileSize
ReadFile
ShellExecuteW
SHCreateDirectoryExW
RegCreateKeyExA
RegSetValueExA
InternetOpenA
InternetSetOptionA
InternetOpenUrlA
InternetReadFile
InternetCloseHandleA
</code></pre>
<p>One can notice that this time, the code resolved 5 more APIs! these are the internet APIs.</p>
<p>Now after we resolved the APIs and probably decrypted the payload we can do two things, One is collect all the API’s we find of value that can contribute to our understanding of this malware and dump the decrypted form of the malware as we can we can extract some strings out of it which can be done at your own machine because as we saw the strings are always located at offset <strong>0xXXXX44XX</strong> and can viewed in the IDA string view here is an example:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/d/d8e53f484d2bb05d045299c12623e3bbe10b23d4.png" data-download-href="/uploads/short-url/uWKic6qUBRWS4o8yd1aw7ycjBU8.png?dl=1" title=""><img src="/uploads/default/original/2X/d/d8e53f484d2bb05d045299c12623e3bbe10b23d4.png" alt="" data-base62-sha1="uWKic6qUBRWS4o8yd1aw7ycjBU8" width="602" height="400" role="presentation" data-dominant-color="3A3839"></a></div>)<p></p>
<p><img src="/uploads/default/original/2X/9/9343c4e306baee08cad1fb8aba13faa63162e818.png" alt="602x79" data-base62-sha1="l0LnJkoxtfuMcppfQN8ga1NkUPe" width="625" height="81"></p>
<p>These decrypted strings can aid greatly in understanding this malware more in depth. The strings marked in red indicate that the malware might be downloading more artifacts off the internet and might be attempting to hide itself in traffic using legitimate looking network strings.</p>
<p>Wow, Alright! we gathered a lot of information, and we might get lost if we don’t summarize our findings and understand what is our current status so let’s stop for a second and reassess.</p>
<hr>
<p><strong>Where should I continue from here?</strong></p>
<p>We’ve covered a lot here and this article is getting really long. There is so much to go from here -</p>
<ul>
<li>We’ve managed to unpack the malware first stage loader and the payload</li>
<li>We have a list of APIs that can aid us explore the loader and the payload</li>
<li>We understood the malwares stealth injection technique</li>
<li>We managed to load the payload into memory and gain control over it</li>
<li>We got a lot of artifacts and IOC’s that can aid us greatly in deeply analyzing this piece of malware.</li>
</ul>
<p>This was no easy task, we had to defeat a packer and really tough obfuscation techniques. When I began writing this post only <a href="https://www.virustotal.com/gui/file/e6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3/detection" rel="noopener nofollow ugc">12 AV engines</a> managed to detect this file as malicious so let’s give us a tap on the back.</p>
<p>See you guys next time!</p>
<hr>
<p><strong>Sources:</strong></p>
<p>Sample used(SHA - 256) - 6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3/5e25c5f7a2b4a8790d7d1bbf</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://github.com/m0n0ph1/Process-Hollowing">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">

      <a href="https://github.com/m0n0ph1/Process-Hollowing" target="_blank" rel="noopener nofollow ugc">GitHub</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/345;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/9/494f075feac28015c00406df586de1ca08c051eb_2_690x345.png" class="thumbnail" data-dominant-color="E9E5E7" width="690" height="345" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/9/494f075feac28015c00406df586de1ca08c051eb_2_690x345.png, https://0x00sec.s3.amazonaws.com/optimized/3X/4/9/494f075feac28015c00406df586de1ca08c051eb_2_1035x517.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/4/9/494f075feac28015c00406df586de1ca08c051eb.png 2x"></div>

<h3><a href="https://github.com/m0n0ph1/Process-Hollowing" target="_blank" rel="noopener nofollow ugc">GitHub - m0n0ph1/Process-Hollowing: Great explanation of Process Hollowing (a...</a></h3>

  <p>Great explanation of Process Hollowing (a Technique often used in Malware) - GitHub - m0n0ph1/Process-Hollowing: Great explanation of Process Hollowing (a Technique often used in Malware)</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p><a href="https://www.youtube.com/watch?v=WlE8abc8V-4">How To Defeat Anti-VM and Anti-Debug Packers With IDA Pro</a></p>

<aside class="onebox pdf" data-onebox-src="https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf">
  <header class="source">

      <a href="https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf" target="_blank" rel="noopener nofollow ugc">anti-reversing.com</a>
  </header>

  <article class="onebox-body">
    <a href="https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf" target="_blank" rel="noopener nofollow ugc"><span class="pdf-onebox-logo"></span></a>

<h3><a href="https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf" target="_blank" rel="noopener nofollow ugc">The_Ultimate_Anti-Reversing_Reference.pdf</a></h3>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p><a href="https://www.amazon.com/Practical-Malware-Analysis-Hands-Dissecting/dp/1593272901?tag=0x00sec03-20" class="onebox" target="_blank" rel="noopener nofollow ugc">https://www.amazon.com/Practical-Malware-Analysis-Hands-Dissecting/dp/1593272901</a></p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://www.hybrid-analysis.com/sample/e6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3/5e25c5f7a2b4a8790d7d1bbf">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/3X/e/d/ed211f0d49ef333d1fb04dee801f307225c90716.png" class="site-icon" data-dominant-color="ADA5B0" width="64" height="64">

      <a href="https://www.hybrid-analysis.com/sample/e6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3/5e25c5f7a2b4a8790d7d1bbf" target="_blank" rel="noopener nofollow ugc">hybrid-analysis.com</a>
  </header>

  <article class="onebox-body">
    

<h3><a href="https://www.hybrid-analysis.com/sample/e6ffb945247085ceb6b2478c643dc337a35d5c0c17d2e4709c3a5842c9bcb3e3/5e25c5f7a2b4a8790d7d1bbf" target="_blank" rel="noopener nofollow ugc">Free Automated Malware Analysis Service - powered by Falcon Sandbox - Viewing...</a></h3>

  <p>Submit malware for free analysis with Falcon Sandbox and Hybrid Analysis technology. Hybrid Analysis develops and licenses analysis tools to fight malware.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<aside class="onebox pdf" data-onebox-src="https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf">
  <header class="source">

      <a href="https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf" target="_blank" rel="noopener nofollow ugc">anti-reversing.com</a>
  </header>

  <article class="onebox-body">
    <a href="https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf" target="_blank" rel="noopener nofollow ugc"><span class="pdf-onebox-logo"></span></a>

<h3><a href="https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf" target="_blank" rel="noopener nofollow ugc">The_Ultimate_Anti-Reversing_Reference.pdf</a></h3>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-3/18943/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/analyzing-modern-malware-techniques-part-3/18943/1</link>
        <pubDate>Mon, 03 Feb 2020 22:47:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18943-1</guid>
        <source url="https://0x00sec.org/t/analyzing-modern-malware-techniques-part-3/18943.rss">Analyzing Modern Malware Techniques - Part 3</source>
      </item>
  </channel>
</rss>
