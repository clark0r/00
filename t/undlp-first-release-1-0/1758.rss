<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[unDLP] First release {1.0}</title>
    <link>https://0x00sec.org/t/undlp-first-release-1-0/1758</link>
    <description>Hi fellas, 

The time is came to publish the first release of [unDLP](https://github.com/Nitr4x/unDLP). This journey was scattered of obstacles coming from the old and venerated Perl gods ! But that’s not all, hold on, the famous TLS protocol  made me sweated more than once … bloody block size limitation … :P

Well, before I get into the main topic, here is a small reminder about the reasons that pushed me to develop unDLP.

&gt; As you probably already know, industrial spying cost millions of dollars to companies every year through data exfiltration, data stealing, etc. In order to protect themselves against this bane, companies invested into DLP technologies, allowing to protect sensitive information from hackers and malicious employees. A few existing solutions allow bypassing such security measures. However, none of them are flawless, discrete, or efficient enough to guarantee success. That is why unDLP was born.

To resume in a few words, unDLP aim to discreetly exfiltrate information via multiple covert channel. At the moment, only one has been implemented, HTTPS.

unDLP follow a standard client / server architecture, providing various types of features. Let’s take a look at them.

### Exfiltration methods

At the present time, only the HTTPS exfiltration method has been implemented. This engine is straightforward, the client will successively send POST requests, containing the data to exfiltrate, to the server. On the other side, the server will bufferize the incoming information till the transfer is done then it will save them on the file system. 

By the same token, the protocol created for the file transfer allows the server to handle multiple files at the same time, ensuring that no collision occurs during the sending.

### Multi-upload

The client provides the possibility to specify multiple files to send. However, due to the fact that the multi-threading is discouraged with Perl and that forking doesn’t seem to work properly, the files are dequeued when the previous job is done. I will try to find a solution in order to affords a true multi-upload system but at least, for now, we don’t have to restart the client for each file … It’s better than nothing :P

### Transfer speed

The transfer speed is adjustable in order to avoid detection. Indeed, it could be suspect to see 1 POST request by second targeted the same domain name during 1 or 2 minutes !

### Block size

For the same purpose, unDLP provides the possibility to change the size of the data blocks transferred. However, in view of the TLS limitation, it is not possible to increase this parameter above a given ceiling.

### Encryption

Even if data encryption is not necessary when using HTTPS, this functionality has been implemented in prevision of the upcoming exfiltration methods.

At first, I implemented an asymmetric encryption but I quickly switched, due to performance issues, to a symmetric scheme. For the same purpose, I choose to use the AES with CTR mode. It is not the safest way to perform encryption nevertheless, it is enough to counter MITM monitoring. 

Note: I discourage to use encryption when using the HTTPS exfiltration method due to TLS block size limitation that force to reduce the chunks of data, which terribly affect the transfer speed and could take ages to handle a large file.

## Usage

### Client

```
usage: unDLP.pl -f [FILE, ...] -d DESTINATION -m [HTTPS] [--e PASSWORD] [--size SIZE] [--delay DELAY] [--help|h]

     -f: File to transfer.
     -d: Destination.
     -m: Exfiltration method.
     --e: Set the encryption password.
     --size: Set the transfer size.
     --delay: Set the transfer speed (in second).
     --help|h: Display the helper.

```

### Server

```
usage: server.pl [--e PASSWORD] [--help|h]

     --e: Set the decryption password.
     --help|h: Display the helper.
```

Note: It is important to note that even if the server is started with a decryption password, it is still possible to handle raw data.

## Demo

https://0x0.st/yLG.mp4

## Todo

* Improve the multi-upload system
* DNS exfiltration
* RTCP exfiltration
* [and other type of exfiltration]

## Contribution

Pull requests for new features, bug fixes, and suggestions are welcome !

P.S: keep in mind to respect the Perl::Critic::Freenode policies.



I hope that you enjoyed this article.

Best,
 Nitrax</description>
    
    <lastBuildDate>Sun, 02 Apr 2017 09:16:58 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/undlp-first-release-1-0/1758.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[unDLP] First release {1.0}</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>This is really cool, I’m loving the fancy CLI progress bar <img src="https://0x00sec.org/images/emoji/twitter/joy.png?v=9" title=":joy:" class="emoji" alt=":joy:"></p>
<p>Jokes aside, I think this is a really dope concept, (and reality).</p>
<p>What I love about these small yet very effective projects is that detecting these in the field is very difficult since it’s a new tool, new concept and there isn’t much call to defend against things like this because it’s so new.</p>
          <p><a href="https://0x00sec.org/t/undlp-first-release-1-0/1758/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/undlp-first-release-1-0/1758/11</link>
        <pubDate>Sun, 02 Apr 2017 09:16:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1758-11</guid>
        <source url="https://0x00sec.org/t/undlp-first-release-1-0/1758.rss">[unDLP] First release {1.0}</source>
      </item>
      <item>
        <title>[unDLP] First release {1.0}</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/operatorequals">@operatorequals</a> congrats for the great blog. I found them some weeks ago and really enjoyed reading them.</p>
<p>Good you passed by our community!</p>
          <p><a href="https://0x00sec.org/t/undlp-first-release-1-0/1758/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/undlp-first-release-1-0/1758/10</link>
        <pubDate>Fri, 31 Mar 2017 16:58:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1758-10</guid>
        <source url="https://0x00sec.org/t/undlp-first-release-1-0/1758.rss">[unDLP] First release {1.0}</source>
      </item>
      <item>
        <title>[unDLP] First release {1.0}</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for your input. I’m currently testing unDLP against several types of firewall, IDS, etc. I must admit that it works pretty nice <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> I will keep you all updated when those tests will be done !</p>
          <p><a href="https://0x00sec.org/t/undlp-first-release-1-0/1758/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/undlp-first-release-1-0/1758/9</link>
        <pubDate>Thu, 30 Mar 2017 12:13:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1758-9</guid>
        <source url="https://0x00sec.org/t/undlp-first-release-1-0/1758.rss">[unDLP] First release {1.0}</source>
      </item>
      <item>
        <title>[unDLP] First release {1.0}</title>
        <dc:creator><![CDATA[operatorequals]]></dc:creator>
        <description><![CDATA[
            <p>Hey, DLP is a bitch. Smash it!<br>
Keep in mind though that corporal environments have HTTPS proxies that decode SSL and serve as MiTM, passing all traffic from HTTP proxing (and log several request parameters, even POST sometimes).</p>
<p>Logs like those can serve as evidence that you did something (not clearly leakage, but) <strong>bogus</strong>. Sometime this evidence is enough if leaked documents are found torrenting around.<br>
You 'd better get some Domain Name in the <em>Host Header</em> (to fool the proxy that this is a website visit), and use stego in the 7 layer fields that do not get logged frequently in most configurations (POST parameter password fields, OPTIONS, HEAD, Etags, etc… ), or make data layer look innocent.</p>
          <p><a href="https://0x00sec.org/t/undlp-first-release-1-0/1758/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/undlp-first-release-1-0/1758/8</link>
        <pubDate>Thu, 30 Mar 2017 10:36:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1758-8</guid>
        <source url="https://0x00sec.org/t/undlp-first-release-1-0/1758.rss">[unDLP] First release {1.0}</source>
      </item>
      <item>
        <title>[unDLP] First release {1.0}</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Hey, you’re writing <strong>fantastic</strong> articles! I can higly recommmend everyone to check <a href="https://securosophy.com/" rel="nofollow noopener">your blog</a> out <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">.</p>
<p>Keep it up; I’m checking everyday for new posts!</p>
          <p><a href="https://0x00sec.org/t/undlp-first-release-1-0/1758/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/undlp-first-release-1-0/1758/7</link>
        <pubDate>Thu, 30 Mar 2017 09:41:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1758-7</guid>
        <source url="https://0x00sec.org/t/undlp-first-release-1-0/1758.rss">[unDLP] First release {1.0}</source>
      </item>
      <item>
        <title>[unDLP] First release {1.0}</title>
        <dc:creator><![CDATA[operatorequals]]></dc:creator>
        <description><![CDATA[
            <p>Hello there!<br>
I am the author of those posts.<br>
<strong>Thanks a lot for mentioning them!</strong></p>
<p>unDLP looks quite promising! Added to the things I follow.</p>
          <p><a href="https://0x00sec.org/t/undlp-first-release-1-0/1758/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/undlp-first-release-1-0/1758/6</link>
        <pubDate>Wed, 29 Mar 2017 08:28:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1758-6</guid>
        <source url="https://0x00sec.org/t/undlp-first-release-1-0/1758.rss">[unDLP] First release {1.0}</source>
      </item>
      <item>
        <title>[unDLP] First release {1.0}</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <p>Nop ! I will check this out. Anyway, I already planned to add this covert channel ASAP <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          <p><a href="https://0x00sec.org/t/undlp-first-release-1-0/1758/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/undlp-first-release-1-0/1758/5</link>
        <pubDate>Fri, 10 Mar 2017 15:27:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1758-5</guid>
        <source url="https://0x00sec.org/t/undlp-first-release-1-0/1758.rss">[unDLP] First release {1.0}</source>
      </item>
      <item>
        <title>[unDLP] First release {1.0}</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Have you seen this series on a covert channel in TCP? It’s not that super fast but extremely interesting, though…</p>
<p><a href="https://securosophy.com/2016/09/14/teaching-an-old-dog-not-that-new-tricks-stego-in-tcpip-made-easy-part-1/" rel="nofollow noopener">Part I</a>, <a href="https://securosophy.com/2016/09/19/pozzo-lucky-stego-in-tcpip-part-2/" rel="nofollow noopener">II</a> and <a href="https://securosophy.com/2016/09/28/pozzo-lucky-busted-the-tales-of-a-mathematician-soc-analyst/" rel="nofollow noopener">III</a></p>
          <p><a href="https://0x00sec.org/t/undlp-first-release-1-0/1758/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/undlp-first-release-1-0/1758/4</link>
        <pubDate>Fri, 10 Mar 2017 14:21:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1758-4</guid>
        <source url="https://0x00sec.org/t/undlp-first-release-1-0/1758.rss">[unDLP] First release {1.0}</source>
      </item>
      <item>
        <title>[unDLP] First release {1.0}</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <p>Nice to heard that ! Btw, if you guys have some idea about unDLP regarding the possible exfiltration methods, etc, don’t hesitate to let me know !</p>
          <p><a href="https://0x00sec.org/t/undlp-first-release-1-0/1758/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/undlp-first-release-1-0/1758/3</link>
        <pubDate>Fri, 10 Mar 2017 08:31:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1758-3</guid>
        <source url="https://0x00sec.org/t/undlp-first-release-1-0/1758.rss">[unDLP] First release {1.0}</source>
      </item>
      <item>
        <title>[unDLP] First release {1.0}</title>
        <dc:creator><![CDATA[VVid0w]]></dc:creator>
        <description><![CDATA[
            <p>AWESOME! I’m glad that it’s in working order. I can already see a <em>ton</em> of uses this could have. Now it’s just time to wait for the updates. :3</p>
          <p><a href="https://0x00sec.org/t/undlp-first-release-1-0/1758/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/undlp-first-release-1-0/1758/2</link>
        <pubDate>Thu, 09 Mar 2017 23:16:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1758-2</guid>
        <source url="https://0x00sec.org/t/undlp-first-release-1-0/1758.rss">[unDLP] First release {1.0}</source>
      </item>
      <item>
        <title>[unDLP] First release {1.0}</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <p>Hi fellas,</p>
<p>The time is came to publish the first release of <a href="https://github.com/Nitr4x/unDLP" rel="nofollow noopener">unDLP</a>. This journey was scattered of obstacles coming from the old and venerated Perl gods ! But that’s not all, hold on, the famous TLS protocol  made me sweated more than once … bloody block size limitation … <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>Well, before I get into the main topic, here is a small reminder about the reasons that pushed me to develop unDLP.</p>
<blockquote>
<p>As you probably already know, industrial spying cost millions of dollars to companies every year through data exfiltration, data stealing, etc. In order to protect themselves against this bane, companies invested into DLP technologies, allowing to protect sensitive information from hackers and malicious employees. A few existing solutions allow bypassing such security measures. However, none of them are flawless, discrete, or efficient enough to guarantee success. That is why unDLP was born.</p>
</blockquote>
<p>To resume in a few words, unDLP aim to discreetly exfiltrate information via multiple covert channel. At the moment, only one has been implemented, HTTPS.</p>
<p>unDLP follow a standard client / server architecture, providing various types of features. Let’s take a look at them.</p>
<h3>Exfiltration methods</h3>
<p>At the present time, only the HTTPS exfiltration method has been implemented. This engine is straightforward, the client will successively send POST requests, containing the data to exfiltrate, to the server. On the other side, the server will bufferize the incoming information till the transfer is done then it will save them on the file system.</p>
<p>By the same token, the protocol created for the file transfer allows the server to handle multiple files at the same time, ensuring that no collision occurs during the sending.</p>
<h3>Multi-upload</h3>
<p>The client provides the possibility to specify multiple files to send. However, due to the fact that the multi-threading is discouraged with Perl and that forking doesn’t seem to work properly, the files are dequeued when the previous job is done. I will try to find a solution in order to affords a true multi-upload system but at least, for now, we don’t have to restart the client for each file … It’s better than nothing <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<h3>Transfer speed</h3>
<p>The transfer speed is adjustable in order to avoid detection. Indeed, it could be suspect to see 1 POST request by second targeted the same domain name during 1 or 2 minutes !</p>
<h3>Block size</h3>
<p>For the same purpose, unDLP provides the possibility to change the size of the data blocks transferred. However, in view of the TLS limitation, it is not possible to increase this parameter above a given ceiling.</p>
<h3>Encryption</h3>
<p>Even if data encryption is not necessary when using HTTPS, this functionality has been implemented in prevision of the upcoming exfiltration methods.</p>
<p>At first, I implemented an asymmetric encryption but I quickly switched, due to performance issues, to a symmetric scheme. For the same purpose, I choose to use the AES with CTR mode. It is not the safest way to perform encryption nevertheless, it is enough to counter MITM monitoring.</p>
<p>Note: I discourage to use encryption when using the HTTPS exfiltration method due to TLS block size limitation that force to reduce the chunks of data, which terribly affect the transfer speed and could take ages to handle a large file.</p>
<h2>Usage</h2>
<h3>Client</h3>
<pre><code class="lang-auto">usage: unDLP.pl -f [FILE, ...] -d DESTINATION -m [HTTPS] [--e PASSWORD] [--size SIZE] [--delay DELAY] [--help|h]

     -f: File to transfer.
     -d: Destination.
     -m: Exfiltration method.
     --e: Set the encryption password.
     --size: Set the transfer size.
     --delay: Set the transfer speed (in second).
     --help|h: Display the helper.

</code></pre>
<h3>Server</h3>
<pre><code class="lang-auto">usage: server.pl [--e PASSWORD] [--help|h]

     --e: Set the decryption password.
     --help|h: Display the helper.
</code></pre>
<p>Note: It is important to note that even if the server is started with a decryption password, it is still possible to handle raw data.</p>
<h2>Demo</h2>
<p><a href="https://0x0.st/yLG.mp4" class="onebox" target="_blank" rel="nofollow noopener">https://0x0.st/yLG.mp4</a></p>
<h2>Todo</h2>
<ul>
<li>Improve the multi-upload system</li>
<li>DNS exfiltration</li>
<li>RTCP exfiltration</li>
<li>[and other type of exfiltration]</li>
</ul>
<h2>Contribution</h2>
<p>Pull requests for new features, bug fixes, and suggestions are welcome !</p>
<p>P.S: keep in mind to respect the Perl::Critic::Freenode policies.</p>
<p>I hope that you enjoyed this article.</p>
<p>Best,<br>
Nitrax</p>
          <p><a href="https://0x00sec.org/t/undlp-first-release-1-0/1758/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/undlp-first-release-1-0/1758/1</link>
        <pubDate>Thu, 09 Mar 2017 11:39:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1758-1</guid>
        <source url="https://0x00sec.org/t/undlp-first-release-1-0/1758.rss">[unDLP] First release {1.0}</source>
      </item>
  </channel>
</rss>
