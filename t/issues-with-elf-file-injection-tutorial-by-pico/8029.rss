<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Issues with elf file injection tutorial by pico</title>
    <link>https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029</link>
    <description>So i&#39;ve been reading through and understanding pico&#39;s elf file injector tutorial. Everything so far i&#39;m understanding, however when it comes to the patching of the entry points etc in the:

elfi_mem_subst() function within the tutorial code.

From my understanding once the .text section of the payload has been written to the code cave after the .text section within the target file, we then have to use the elfi_mem_subst function to patch the return address to be the original entry point of the file right? So the original program can execute once our payload has been executed? (correct me if i&#39;m misunderstanding)

Here is the code for the function:
        indent preformatted text by 4 spaces 
       
    int
    elfi_mem_subst (void *m, int len, long pat, long val)
    {
      unsigned char *p = (unsigned char*)m;
      long v;
      int i, r;

    for (i = 0; i &lt; len; i++)
    {
      v = *((long*)(p+i));
      r = v ^pat;

      if (r ==0) 
	{
	  printf (&quot;+ Pattern %lx found at offset %d -&gt; %lx\n&quot;, pat, i, val);
	  *((long*)(p+i)) = val;
	  return 0;
	}
    }
     return -1;
    }

So from my understanding we are looping n times the size of the payload and we keep adding each increment of i to the pointer which starts at the start of the end of .text section of the target file until we get to the end of the payload text within the gap  to reach where the return address should be , to change the return address to patch it and point to the entry point of the target program. (correct me if i&#39;m inccorect)

However I&#39;m unsure of what this command is supposed to be doing, and why?

&gt; r = v ^pat;

and once this function is called we then patch the entry point of the file to point to this payload and then once called the payload the return address of the function will take us to the start executing the original target file&#39;s code?


However once i run the code, it succesffuly infects the file, however the original code results in a unauthorised access of memory error:

&gt; segmentation fault

I&#39;m just wondering why this is the case? because we patched the original entry point and the return address to point back to the original code for normal execution after our payload right? So is the return address pointing to the wrong location?

If anyone who is experienced with this could you kindly help me understand this part and what is going on with the patching and why i&#39;m getting a segmentation fault and some pointers on how to resolve this?

thanks in advance,
Bramble.</description>
    
    <lastBuildDate>Sun, 19 Aug 2018 15:22:47 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Issues with elf file injection tutorial by pico</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed 3 days after the last reply. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029/7</link>
        <pubDate>Wed, 22 Aug 2018 15:22:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-8029-7</guid>
        <source url="https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029.rss">Issues with elf file injection tutorial by pico</source>
      </item>
      <item>
        <title>Issues with elf file injection tutorial by pico</title>
        <dc:creator><![CDATA[bramble]]></dc:creator>
        <description><![CDATA[
            <p>Thank you much guys, and thanks for sharing your code! I’ll disect and learn from it now <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029/6</link>
        <pubDate>Sun, 19 Aug 2018 15:22:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-8029-6</guid>
        <source url="https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029.rss">Issues with elf file injection tutorial by pico</source>
      </item>
      <item>
        <title>Issues with elf file injection tutorial by pico</title>
        <dc:creator><![CDATA[slevin]]></dc:creator>
        <description><![CDATA[
            <p>Sorry for the late reply. Glad you got it working!</p>
<p>I got a version working with PIE (Position-Independent Executables), where the you don’t set the entry point statically, but by offset. It’s a while a go, but you’re welcome to check it <a href="https://github.com/mfaerevaag/elfinjector" rel="nofollow noopener">the code</a>.</p>
          <p><a href="https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029/5</link>
        <pubDate>Thu, 16 Aug 2018 19:30:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-8029-5</guid>
        <source url="https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029.rss">Issues with elf file injection tutorial by pico</source>
      </item>
      <item>
        <title>Issues with elf file injection tutorial by pico</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Hi <a class="mention" href="https://0x00sec.org/u/bramble">@bramble</a>,</p>
<p>Thanks for reading my tutorial hope you enjoyed it and find it <em>somehow</em> useful.</p>
<aside class="quote no-group quote-modified" data-username="bramble" data-post="1" data-topic="8029">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/letter_avatar_proxy/v4/letter/b/dfb087/40.png" class="avatar"> bramble:</div>
<blockquote>
<p>However I’m unsure of what this command is supposed to be doing, and why?</p>
<blockquote>
<p>r = v ^pat;</p>
</blockquote>
</blockquote>
</aside>
<p>This is just a XOR that will be 0 whenever both values <code>v</code> and <code>pat</code> are equal. It is just a way to check if you have found the pattern you are looking for.</p>
<aside class="quote no-group" data-username="bramble" data-post="1" data-topic="8029">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/letter_avatar_proxy/v4/letter/b/dfb087/40.png" class="avatar"> bramble:</div>
<blockquote>
<p>because we patched the original entry point and the return address to point back to the original code for normal execution after our payload right? So is the return address pointing to the wrong location?</p>
</blockquote>
</aside>
<p>That is probably the case. The best way to find out is just to debug your patched program and see what is going on. Actually that’s the best way to fully understand this kind of stuff.</p>
<p>Go run the debugger, find the problem and fix it! <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<aside class="quote no-group" data-username="bramble" data-post="3" data-topic="8029">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/letter_avatar_proxy/v4/letter/b/dfb087/40.png" class="avatar"> bramble:</div>
<blockquote>
<p>apparently it only works when the elf is static</p>
</blockquote>
</aside>
<p>I’d used dynamic binaries while writing the tutorial, so, I believe the real reason behind this behaviour is something else… Verify your binaries are not PIE, for instance.</p>
<p>Take a look to this other thread</p>
<aside class="quote quote-modified" data-post="1" data-topic="6713">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/0x00sec.org/ph33r/40/4797_2.png" class="avatar">
    <a href="https://0x00sec.org/t/segfaults-with-polycrypt-tutorial/6713">Segfaults With Polycrypt Tutorial</a> <a class="badge-wrapper  bullet" href="https://0x00sec.org/c/support/52"><span class="badge-category-bg" style="background-color: #BF1E2E;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="Asking questions or not knowing something is not a bad thing on 0x00sec, in fact its something very critical to learning. However, asking in the correct way is very important. Posts like &quot;Plz help me hax my sk00l pls&quot; are considered spammy, and will be aggresively deleted. Please realise that nobody here owes you anything, it is up to you to gain respect and ask correctly. You do not deserve help, however people here are happy to help.">Questions</span></a>
  </div>
  <blockquote>
    Had a question about this tutorial: 


I’ve tried double-checking the code several times. Even tried pulling it off this github to ensure I wasn’t missing anything: 
<a href="https://raw.githubusercontent.com/0x00pf/0x00sec_code/master/crypter/polycrypt.c" class="onebox" target="_blank" rel="noopener nofollow ugc">https://raw.githubusercontent.com/0x00pf/0x00sec_code/master/crypter/polycrypt.c</a> 
Every time I try to run it I get the following though: 
$ ./polycrypt 
mprotect:: Cannot allocate memory 
Segmentation fault 
At first I thought this may be some security feature on my device that was preventing that. However, I was able to execute the…
  </blockquote>
</aside>

<p>Hope this helps</p>
          <p><a href="https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029/4</link>
        <pubDate>Thu, 16 Aug 2018 06:54:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-8029-4</guid>
        <source url="https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029.rss">Issues with elf file injection tutorial by pico</source>
      </item>
      <item>
        <title>Issues with elf file injection tutorial by pico</title>
        <dc:creator><![CDATA[bramble]]></dc:creator>
        <description><![CDATA[
            <p>I’ve managed to get the example code in the tutorial working, apparently it only works when the elf is static , not dynamically linked. Though i am curious as to why? hmmm.</p>
          <p><a href="https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029/3</link>
        <pubDate>Wed, 15 Aug 2018 15:58:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-8029-3</guid>
        <source url="https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029.rss">Issues with elf file injection tutorial by pico</source>
      </item>
      <item>
        <title>Issues with elf file injection tutorial by pico</title>
        <dc:creator><![CDATA[bramble]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/slevin">@slevin</a>  in the comments you seemed to off ran into the same issues? i attempted with ur payload with the same results. Or am i missing something?(in terms of theory)</p>
<p>I would greatly appreciate it if you, or <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a>  could help me out? No worries if you guys can’t and thanks for the time. ^.^</p>
          <p><a href="https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029/2</link>
        <pubDate>Tue, 14 Aug 2018 17:09:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-8029-2</guid>
        <source url="https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029.rss">Issues with elf file injection tutorial by pico</source>
      </item>
      <item>
        <title>Issues with elf file injection tutorial by pico</title>
        <dc:creator><![CDATA[bramble]]></dc:creator>
        <description><![CDATA[
            <p>So i’ve been reading through and understanding pico’s elf file injector tutorial. Everything so far i’m understanding, however when it comes to the patching of the entry points etc in the:</p>
<p>elfi_mem_subst() function within the tutorial code.</p>
<p>From my understanding once the .text section of the payload has been written to the code cave after the .text section within the target file, we then have to use the elfi_mem_subst function to patch the return address to be the original entry point of the file right? So the original program can execute once our payload has been executed? (correct me if i’m misunderstanding)</p>
<p>Here is the code for the function:<br>
indent preformatted text by 4 spaces</p>
<pre><code>int
elfi_mem_subst (void *m, int len, long pat, long val)
{
  unsigned char *p = (unsigned char*)m;
  long v;
  int i, r;

for (i = 0; i &lt; len; i++)
{
  v = *((long*)(p+i));
  r = v ^pat;

  if (r ==0) 
{
  printf ("+ Pattern %lx found at offset %d -&gt; %lx\n", pat, i, val);
  *((long*)(p+i)) = val;
  return 0;
}
}
 return -1;
}
</code></pre>
<p>So from my understanding we are looping n times the size of the payload and we keep adding each increment of i to the pointer which starts at the start of the end of .text section of the target file until we get to the end of the payload text within the gap  to reach where the return address should be , to change the return address to patch it and point to the entry point of the target program. (correct me if i’m inccorect)</p>
<p>However I’m unsure of what this command is supposed to be doing, and why?</p>
<blockquote>
<p>r = v ^pat;</p>
</blockquote>
<p>and once this function is called we then patch the entry point of the file to point to this payload and then once called the payload the return address of the function will take us to the start executing the original target file’s code?</p>
<p>However once i run the code, it succesffuly infects the file, however the original code results in a unauthorised access of memory error:</p>
<blockquote>
<p>segmentation fault</p>
</blockquote>
<p>I’m just wondering why this is the case? because we patched the original entry point and the return address to point back to the original code for normal execution after our payload right? So is the return address pointing to the wrong location?</p>
<p>If anyone who is experienced with this could you kindly help me understand this part and what is going on with the patching and why i’m getting a segmentation fault and some pointers on how to resolve this?</p>
<p>thanks in advance,<br>
Bramble.</p>
          <p><a href="https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029/1</link>
        <pubDate>Tue, 14 Aug 2018 13:04:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-8029-1</guid>
        <source url="https://0x00sec.org/t/issues-with-elf-file-injection-tutorial-by-pico/8029.rss">Issues with elf file injection tutorial by pico</source>
      </item>
  </channel>
</rss>
