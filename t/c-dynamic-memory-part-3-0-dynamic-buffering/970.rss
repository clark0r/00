<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C] Dynamic Memory (Part 3.0): Dynamic Buffering</title>
    <link>https://0x00sec.org/t/c-dynamic-memory-part-3-0-dynamic-buffering/970</link>
    <description>The last two ([1](https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960) and [2](https://0x00sec.org/t/c-dynamic-memory-part-2-0-arrays-on-the-heap/965)) articles covered the main differences between stack/heap as well as using arrays on the heap.

Now, I&#39;m going to walk you guys through resizing these heap-allocated arrays. See, you might not always know -- at compile time -- how much memory you will need. Thus, we can write code that gives us just the right amount of memory. And if, for some reason, we end up needing more, we can grab some more memory. If, also, our program doesn&#39;t need as much, we can give some back.

---

Okay, this time let&#39;s write an actual program... All the necessary source can be found [here](http://pastebin.com/1ziFhKjm).

We will start off by including the relevant headers:

```c
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt; /* this is where the memory functions are */
```

_At this point, it would be wise to take a look at `man realloc` or `man malloc` and read the descriptions for `malloc`, `realloc`, and `free`._

From the `man` page:

    The realloc() function changes the size  of  the  memory  block
    pointed  to  by  ptr  to  size  bytes.   The  contents  will be
    unchanged in the range from the start of the region up  to  the
    minimum  of  the  old and new sizes.  If the new size is larger
    than the old size, the added memory will  not  be  initialized.
    If  ptr  is  NULL, then the call is equivalent to malloc(size),
    for all values of size; if size is equal to zero,  and  ptr  is
    not NULL, then the call is equivalent to free(ptr).  Unless ptr
    is NULL, it must have been returned by an earlier call to  mal‐
    loc(),  calloc()  or  realloc().   If  the  area pointed to was
    moved, a free(ptr) is done.

Our main function begins like so:

```c
int main(void) {
 
    char* s = NULL; /* start off with just a pointer */
    size_t s_len = 0; /* A pointer to nothing has a strlen of 0. */

    // ...
}
```

We initialize a `char * s` to `NULL`. ___Note:___ _You should always initialize your pointers to something. It can lead to undefined behaviour if you do not._

Also, I&#39;ve included the `s_len` variable to track how large our string `s` becomes.

```c
int main(void) {
 
    // ...
 
/*
    Start taking input, dynamically.   
*/
    printf(&quot;Input a string...\n&quot;);
 
    do {
 
        s = realloc( s , ++s_len * sizeof(char) );
 
    } while ( ( s[ s_len - 1 ] = getchar() ) != &#39;\n&#39; );
 
    s[--s_len] = 0x00; /* remember to delimit the string! */
/*
    End dynamic input procedure.
*/

    // ...
}
```

While the above code may seem _arcane_, it&#39;s actually quite simple.

1. Prompt the user for input.
2. Expand `s` by an extra byte. Remember that `s` is simple an array of characters.
3. Store a character in the last element of `s`. Go to step 2 if the character isn&#39;t an `[ENTER]`.
4. `0x00` (`null`) out the last element in the array to delimit the string.

These steps are all is needed to continuously expand a string to hold more input, more data.

```c
int main(void) {
 
    // ...
 
    printf(&quot;\n\n%s\n&quot;, s);
    printf(&quot;s_len = %i\n&quot;, (int)s_len);
 
    /* Print out the ASCII codes. */
    for (size_t i = 0; i &lt; s_len; i++)
        printf(&quot;%i &quot;, (int)s[i]);
    printf(&quot;\n&quot;);
 
    /* can&#39;t forget to free! */
    free(s);
 
}
```

The next thing we do is print out `s` in a few ways.

And last, but certainly not least, we must `free` `s`.

---

# Conclusion

That&#39;s all there is to using `realloc`. Next, I&#39;ll cover `calloc` and present some cool array code.

Bai.
@oaktree</description>
    
    <lastBuildDate>Thu, 25 Aug 2016 12:58:55 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/c-dynamic-memory-part-3-0-dynamic-buffering/970.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C] Dynamic Memory (Part 3.0): Dynamic Buffering</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-3-0-dynamic-buffering/970/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-3-0-dynamic-buffering/970/4</link>
        <pubDate>Sun, 21 Jan 2018 00:30:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-970-4</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-3-0-dynamic-buffering/970.rss">[C] Dynamic Memory (Part 3.0): Dynamic Buffering</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 3.0): Dynamic Buffering</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Yes, I should check for <code>NULL</code>. Note that this was demo code, so error checking was omitted to avoid any sort of confusion.</p>
<p>You surely would do as you have displayed.</p>
<p>Thanks <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a>!</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-3-0-dynamic-buffering/970/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-3-0-dynamic-buffering/970/3</link>
        <pubDate>Thu, 25 Aug 2016 12:58:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-970-3</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-3-0-dynamic-buffering/970.rss">[C] Dynamic Memory (Part 3.0): Dynamic Buffering</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 3.0): Dynamic Buffering</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Nice post <a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a>!</p>
<p>Just a heads up from the <code>realloc</code> manpage</p>
<blockquote>
<p>The realloc() function returns a pointer to the newly allocated memory, which is suitably aligned for any kind of variable and may be <strong><code>different from ptr</code></strong>, or NULL if the request fails.</p>
</blockquote>
<p><code>realloc</code> calls usually look like this (it all depends what your program does indeed)</p>
<pre><code class="lang-auto">   if ((aux = reallloc (s, len)) == NULL)  ERROR ("Out of memory")
   s = aux;
</code></pre>
<p><em><code>ERROR ()</code> prints the message and exits/returns</em></p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-3-0-dynamic-buffering/970/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-3-0-dynamic-buffering/970/2</link>
        <pubDate>Thu, 25 Aug 2016 05:30:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-970-2</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-3-0-dynamic-buffering/970.rss">[C] Dynamic Memory (Part 3.0): Dynamic Buffering</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 3.0): Dynamic Buffering</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>The last two (<a href="https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960">1</a> and <a href="https://0x00sec.org/t/c-dynamic-memory-part-2-0-arrays-on-the-heap/965">2</a>) articles covered the main differences between stack/heap as well as using arrays on the heap.</p>
<p>Now, I’m going to walk you guys through resizing these heap-allocated arrays. See, you might not always know – at compile time – how much memory you will need. Thus, we can write code that gives us just the right amount of memory. And if, for some reason, we end up needing more, we can grab some more memory. If, also, our program doesn’t need as much, we can give some back.</p>
<hr>
<p>Okay, this time let’s write an actual program… All the necessary source can be found <a href="http://pastebin.com/1ziFhKjm" rel="nofollow noopener">here</a>.</p>
<p>We will start off by including the relevant headers:</p>
<pre><code class="lang-auto">#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt; /* this is where the memory functions are */
</code></pre>
<p><em>At this point, it would be wise to take a look at <code>man realloc</code> or <code>man malloc</code> and read the descriptions for <code>malloc</code>, <code>realloc</code>, and <code>free</code>.</em></p>
<p>From the <code>man</code> page:</p>
<pre><code>The realloc() function changes the size  of  the  memory  block
pointed  to  by  ptr  to  size  bytes.   The  contents  will be
unchanged in the range from the start of the region up  to  the
minimum  of  the  old and new sizes.  If the new size is larger
than the old size, the added memory will  not  be  initialized.
If  ptr  is  NULL, then the call is equivalent to malloc(size),
for all values of size; if size is equal to zero,  and  ptr  is
not NULL, then the call is equivalent to free(ptr).  Unless ptr
is NULL, it must have been returned by an earlier call to  mal‐
loc(),  calloc()  or  realloc().   If  the  area pointed to was
moved, a free(ptr) is done.
</code></pre>
<p>Our main function begins like so:</p>
<pre><code class="lang-auto">int main(void) {
 
    char* s = NULL; /* start off with just a pointer */
    size_t s_len = 0; /* A pointer to nothing has a strlen of 0. */

    // ...
}
</code></pre>
<p>We initialize a <code>char * s</code> to <code>NULL</code>. <em><strong>Note:</strong></em> <em>You should always initialize your pointers to something. It can lead to undefined behaviour if you do not.</em></p>
<p>Also, I’ve included the <code>s_len</code> variable to track how large our string <code>s</code> becomes.</p>
<pre><code class="lang-auto">int main(void) {
 
    // ...
 
/*
    Start taking input, dynamically.   
*/
    printf("Input a string...\n");
 
    do {
 
        s = realloc( s , ++s_len * sizeof(char) );
 
    } while ( ( s[ s_len - 1 ] = getchar() ) != '\n' );
 
    s[--s_len] = 0x00; /* remember to delimit the string! */
/*
    End dynamic input procedure.
*/

    // ...
}
</code></pre>
<p>While the above code may seem <em>arcane</em>, it’s actually quite simple.</p>
<ol>
<li>Prompt the user for input.</li>
<li>Expand <code>s</code> by an extra byte. Remember that <code>s</code> is simple an array of characters.</li>
<li>Store a character in the last element of <code>s</code>. Go to step 2 if the character isn’t an <code>[ENTER]</code>.</li>
<li>
<code>0x00</code> (<code>null</code>) out the last element in the array to delimit the string.</li>
</ol>
<p>These steps are all is needed to continuously expand a string to hold more input, more data.</p>
<pre><code class="lang-auto">int main(void) {
 
    // ...
 
    printf("\n\n%s\n", s);
    printf("s_len = %i\n", (int)s_len);
 
    /* Print out the ASCII codes. */
    for (size_t i = 0; i &lt; s_len; i++)
        printf("%i ", (int)s[i]);
    printf("\n");
 
    /* can't forget to free! */
    free(s);
 
}
</code></pre>
<p>The next thing we do is print out <code>s</code> in a few ways.</p>
<p>And last, but certainly not least, we must <code>free</code> <code>s</code>.</p>
<hr>
<h1>Conclusion</h1>
<p>That’s all there is to using <code>realloc</code>. Next, I’ll cover <code>calloc</code> and present some cool array code.</p>
<p>Bai.<br>
<a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a></p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-3-0-dynamic-buffering/970/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-3-0-dynamic-buffering/970/1</link>
        <pubDate>Thu, 25 Aug 2016 00:47:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-970-1</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-3-0-dynamic-buffering/970.rss">[C] Dynamic Memory (Part 3.0): Dynamic Buffering</source>
      </item>
  </channel>
</rss>
