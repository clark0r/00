<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Binary and Hexadecimal Basics</title>
    <link>https://0x00sec.org/t/binary-and-hexadecimal-basics/807</link>
    <description>Hello once again 0x00&#39;ers,

Today I will write up a short guide on binary and hexadecimal.

Binary is a number system based on powers of _2_. The only &quot;numbers&quot; are _1_ and _0_(on and off for electrical currents).
We normally use decimal on a day to day basis which is powers of 10 (10, 100, 1000,...)

## Binary
Binary goes from right to left and starts at zero. I know something that helped me learn/memorize this with programming so i&#39;m going to share it with you. You normally use ordinal numbers because you are talking about order(First, Second, Third, etc) Think of ORDinal like ORDer. You can&#39;t have Second without First, Third without Second, and so on. Now think of cardinal numbers. It starts at Zero not One(or First :stuck_out_tongue:) With cardinal numbers you can pick out numbers like a card(CARDinal, CARD). This applies more to lists in programming but  I still think it&#39;s good to think of it that way.

 **Example**
&gt; `128, 64, 32, 16, 8, 4, 2, 1`
&gt; `0     0     0      0             0      0      0      0`
&gt; `2^7||2^6||2^5||2^4||       2^3||2^2||2^1||2^0`

&gt;if you wanted to write _1_ in binary It would be 0001. You would not need to write the other zeros to the left like 
0000 0001.

&gt; To convert it to decimal you would multiply the number(_1_ or _0_) by _2_ to the power of(^) the place it&#39;s in. **_Remember to go right to left_**. I wrote the decimal numbers above, _0_ in binary in the middle, and the places at the bottom.
&gt;`so starting from the rightmost place we have a 1. 1 * 2^0 is one(remember, when a number is raised to the power of zero it&#39;s always one.) Since we have only zeros left we are done!`

Lets do some more so you get the hang of it. Lets do _12_ in binary.
`1 1 0 0`
(notice you don&#39;t have to write the full thing out for numbers less than _15_/1111 in binary)

Now to convert 1100 to decimal we use the same trick. We start at the rightmost number and it&#39;s a zero. So we go one place left. Still a zero. Another place left and it&#39;s a _1_. We do _1 * 2^2_ and get _4_. then we go left a place and there is a _1_ so we do the same thing. _1 * 2^3_. we get _8_. _8_ plus _4_ is _12_ So we did it.

One more this time lets go past _15_. `0001 0001`
_1 * 2^0 + 1 * 2^4_ is _17_. so 0001 0001 is _17_ in binary.

##Hexadecimal

Hex is similar to binary but it is based off of powers of _16_, so instead of  _x * 2^y_ it&#39;s _x * 16^y_.
Hex is very easy to convert to binary and vice versa. all you need to do is memorize binary up to _15_(for basic hex numbers).

Hexadecimal starts at _0_(shocker!) and ends at _15_ (thus powers of _16_) however once you get to _9_ hex goes by letters until you get to F(_15_). I will add tables at the very end for you guys. Hexadecimal is commonly prefixed with 0x.

**Examples and how to convert to decimal**
`0x05`
We start from the right and there is a _5_ so we do _5 * 16^0_ and that is _5_. so 0x05 is _5_ in decimal

&gt;`0xb3`
Starting from the right there is a _3_.
 _3 * 16^0_ is 3 but wait! there&#39;s more ( ͡° ͜ʖ ͡°). There is a b(but Clust3r, that&#39;s not a number?!?!). Remember when I said once you get to 9 it switches to letters. Well there you go. So b is 11 (..., 9, A, B, ...). So we do _11 * 16^1_ and get _176_. Add the two together and you get 179. So 0xb3 is 179(don&#39;t worry about the &#39;0x&#39;).

Converting Binary to hex is simple. Just find each binary value and write it. If binary number is greater than 15(ex: 1010 1010) then you split the byte into 4 bits and treat them seperate.

`0010 1100`
0010 is 2(1 * 2^1)
1100 is 12(1 * 2^2)  + (1 * 2^3)
so it&#39;s 0x2c


So hopefully you know the basics of hexadecimal, binary, and how to convert them to decimal. Here is that chart I promised(I will only write it to 15/ 0000 1111 because numbers 15+ follow the same patterns). If you like this I might make a more intermediate guide on datatypes and such... and as always..stay frosty :snowman2:

`BINARY =, then HEX`
&gt;0000 = 0 || 0x00
&gt;0001 = 1 || 0x01
&gt;0010 = 2 || 0x02
&gt;0011 = 3 || 0x03
&gt;0100 = 4 || 0x04
&gt;0101 = 5 || 0x05
&gt;0110 = 6 || 0x06
&gt;0111 = 7 || 0x07
&gt;1000 = 8 || 0x08
&gt;1001 = 9 || 0x09
&gt;1010 = 10 || 0x0a
&gt;1011 = 11 || 0x0b
&gt;1100 = 12 || 0x0c
&gt;1101 = 13 || 0x0d
&gt;1110 = 14 || 0x0e
&gt;1111 = 15 || 0x0f</description>
    
    <lastBuildDate>Thu, 18 Aug 2016 00:11:55 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/binary-and-hexadecimal-basics/807.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Binary and Hexadecimal Basics</title>
        <dc:creator><![CDATA[xNotaCopx]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for this. Always was curious about Hex but not a rabbit ho;e that I’ve ever gone now. Now I know. And knowledge is power.</p>
          <p><a href="https://0x00sec.org/t/binary-and-hexadecimal-basics/807/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-and-hexadecimal-basics/807/4</link>
        <pubDate>Thu, 18 Aug 2016 00:11:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-807-4</guid>
        <source url="https://0x00sec.org/t/binary-and-hexadecimal-basics/807.rss">Binary and Hexadecimal Basics</source>
      </item>
      <item>
        <title>Binary and Hexadecimal Basics</title>
        <dc:creator><![CDATA[Fust3rCluck]]></dc:creator>
        <description><![CDATA[
            <p>Thank you, I’m glad it helped. <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/binary-and-hexadecimal-basics/807/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-and-hexadecimal-basics/807/3</link>
        <pubDate>Wed, 17 Aug 2016 23:20:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-807-3</guid>
        <source url="https://0x00sec.org/t/binary-and-hexadecimal-basics/807.rss">Binary and Hexadecimal Basics</source>
      </item>
      <item>
        <title>Binary and Hexadecimal Basics</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>I’m honestly amazed I didn’t notice this! Great tutorial! Well written and cleared a lot up as well <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:"></p>
          <p><a href="https://0x00sec.org/t/binary-and-hexadecimal-basics/807/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-and-hexadecimal-basics/807/2</link>
        <pubDate>Fri, 12 Aug 2016 18:31:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-807-2</guid>
        <source url="https://0x00sec.org/t/binary-and-hexadecimal-basics/807.rss">Binary and Hexadecimal Basics</source>
      </item>
      <item>
        <title>Binary and Hexadecimal Basics</title>
        <dc:creator><![CDATA[Fust3rCluck]]></dc:creator>
        <description><![CDATA[
            <p>Hello once again 0x00’ers,</p>
<p>Today I will write up a short guide on binary and hexadecimal.</p>
<p>Binary is a number system based on powers of <em>2</em>. The only “numbers” are <em>1</em> and <em>0</em>(on and off for electrical currents).<br>
We normally use decimal on a day to day basis which is powers of 10 (10, 100, 1000,…)</p>
<h2>Binary</h2>
<p>Binary goes from right to left and starts at zero. I know something that helped me learn/memorize this with programming so i’m going to share it with you. You normally use ordinal numbers because you are talking about order(First, Second, Third, etc) Think of ORDinal like ORDer. You can’t have Second without First, Third without Second, and so on. Now think of cardinal numbers. It starts at Zero not One(or First <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:">) With cardinal numbers you can pick out numbers like a card(CARDinal, CARD). This applies more to lists in programming but  I still think it’s good to think of it that way.</p>
<p><strong>Example</strong></p>
<blockquote>
<p><code>128, 64, 32, 16, 8, 4, 2, 1</code><br>
<code>0     0     0      0             0      0      0      0</code><br>
<code>2^7||2^6||2^5||2^4||       2^3||2^2||2^1||2^0</code></p>
</blockquote>
<blockquote>
<p>if you wanted to write <em>1</em> in binary It would be 0001. You would not need to write the other zeros to the left like<br>
0000 0001.</p>
</blockquote>
<blockquote>
<p>To convert it to decimal you would multiply the number(<em>1</em> or <em>0</em>) by <em>2</em> to the power of(^) the place it’s in. <strong><em>Remember to go right to left</em></strong>. I wrote the decimal numbers above, <em>0</em> in binary in the middle, and the places at the bottom.<br>
<code>so starting from the rightmost place we have a 1. 1 * 2^0 is one(remember, when a number is raised to the power of zero it's always one.) Since we have only zeros left we are done!</code></p>
</blockquote>
<p>Lets do some more so you get the hang of it. Lets do <em>12</em> in binary.<br>
<code>1 1 0 0</code><br>
(notice you don’t have to write the full thing out for numbers less than <em>15</em>/1111 in binary)</p>
<p>Now to convert 1100 to decimal we use the same trick. We start at the rightmost number and it’s a zero. So we go one place left. Still a zero. Another place left and it’s a <em>1</em>. We do <em>1 * 2^2</em> and get <em>4</em>. then we go left a place and there is a <em>1</em> so we do the same thing. <em>1 * 2^3</em>. we get <em>8</em>. <em>8</em> plus <em>4</em> is <em>12</em> So we did it.</p>
<p>One more this time lets go past <em>15</em>. <code>0001 0001</code><br>
<em>1 * 2^0 + 1 * 2^4</em> is <em>17</em>. so 0001 0001 is <em>17</em> in binary.</p>
<p>#<span class="hashtag">#Hexadecimal</span></p>
<p>Hex is similar to binary but it is based off of powers of <em>16</em>, so instead of  <em>x * 2^y</em> it’s <em>x * 16^y</em>.<br>
Hex is very easy to convert to binary and vice versa. all you need to do is memorize binary up to <em>15</em>(for basic hex numbers).</p>
<p>Hexadecimal starts at <em>0</em>(shocker!) and ends at <em>15</em> (thus powers of <em>16</em>) however once you get to <em>9</em> hex goes by letters until you get to F(<em>15</em>). I will add tables at the very end for you guys. Hexadecimal is commonly prefixed with 0x.</p>
<p><strong>Examples and how to convert to decimal</strong><br>
<code>0x05</code><br>
We start from the right and there is a <em>5</em> so we do <em>5 * 16^0</em> and that is <em>5</em>. so 0x05 is <em>5</em> in decimal</p>
<blockquote>
<p><code>0xb3</code><br>
Starting from the right there is a <em>3</em>.<br>
<em>3 * 16^0</em> is 3 but wait! there’s more ( ͡° ͜ʖ ͡°). There is a b(but Clust3r, that’s not a number!!!). Remember when I said once you get to 9 it switches to letters. Well there you go. So b is 11 (…, 9, A, B, …). So we do <em>11 * 16^1</em> and get <em>176</em>. Add the two together and you get 179. So 0xb3 is 179(don’t worry about the ‘0x’).</p>
</blockquote>
<p>Converting Binary to hex is simple. Just find each binary value and write it. If binary number is greater than 15(ex: 1010 1010) then you split the byte into 4 bits and treat them seperate.</p>
<p><code>0010 1100</code><br>
0010 is 2(1 * 2^1)<br>
1100 is 12(1 * 2^2)  + (1 * 2^3)<br>
so it’s 0x2c</p>
<p>So hopefully you know the basics of hexadecimal, binary, and how to convert them to decimal. Here is that chart I promised(I will only write it to 15/ 0000 1111 because numbers 15+ follow the same patterns). If you like this I might make a more intermediate guide on datatypes and such… and as always…stay frosty <img src="https://0x00sec.org/images/emoji/twitter/snowman2.png?v=9" title=":snowman2:" class="emoji" alt=":snowman2:"></p>
<p><code>BINARY =, then HEX</code></p>
<blockquote>
<p>0000 = 0 || 0x00<br>
0001 = 1 || 0x01<br>
0010 = 2 || 0x02<br>
0011 = 3 || 0x03<br>
0100 = 4 || 0x04<br>
0101 = 5 || 0x05<br>
0110 = 6 || 0x06<br>
0111 = 7 || 0x07<br>
1000 = 8 || 0x08<br>
1001 = 9 || 0x09<br>
1010 = 10 || 0x0a<br>
1011 = 11 || 0x0b<br>
1100 = 12 || 0x0c<br>
1101 = 13 || 0x0d<br>
1110 = 14 || 0x0e<br>
1111 = 15 || 0x0f</p>
</blockquote>
          <p><a href="https://0x00sec.org/t/binary-and-hexadecimal-basics/807/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/binary-and-hexadecimal-basics/807/1</link>
        <pubDate>Sun, 24 Jul 2016 18:51:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-807-1</guid>
        <source url="https://0x00sec.org/t/binary-and-hexadecimal-basics/807.rss">Binary and Hexadecimal Basics</source>
      </item>
  </channel>
</rss>
