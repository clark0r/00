<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[CrackMe] Remove Me</title>
    <link>https://0x00sec.org/t/crackme-remove-me/2189</link>
    <description>Suh doods, got another challenge which will probably be my last one for a while due to my lack of knowledge of the Linux system. I may make some Windows challenges if anyone wishes.

If anyone would like the source code to this, please tell me!

----------

## Difficulty

Depends on your current knowledge. Personally, I&#39;d say it is somewhere between easy and intermediate.

[poll type=regular]
* Covfefe
* Easy
* Between easy and intermediate
* Intermediate
* Hard
* Ultra Hard
* Impossible
* What is Reverse Engineering?
[/poll]


----------

## Goal

The aim of this challenge is to modify the binary such that you remove the `Remove me!` message from displaying. _Any_ method is acceptable however, the real goal is to apply the simplest (most elegant) and **fewest** patches as possible (in terms of bytes). Please comment your method and the number of modified bytes. 

### Correct Output

```makefile
$ ./crackme
Hello!
$ _
```

----------

## Rules of Engagement

None.


----------

## Hints

Hint #1: [spoiler]Don&#39;t make any assumptions about the code.[/spoiler]
Hint #2: [spoiler]Understand all the phases of the deobfuscation.[/spoiler]
Hint #3: [spoiler]Perhaps there&#39;s a way to apply a patch which persists through all the of deobfuscation?[/spoiler]


----------

## Binary

Use the following command to recover the binary:
```makefile
cat crackme | base64 -d | gunzip &gt; a.out &amp;&amp; chmod +x a.out
```

### Normal mode (Not Stripped)

```makefile
H4sICOZgNlkAA2tyYWNrbWUAjZM9bNNAFMefU7eEwgBMSCwpEoIp4qNDhyIi4VQMWcqAYAo2vtiO
HTvx2TmQkEiaLohWSjtF0J0FBBJCShMJBlJ1QiyMZe9aqYiBhvAujss16sBJ93/v9/z8fHd+9yyb
W5AkCeKRgAngNF2Xk7NoexNRfBZSGL8CU6PnD/msyUk+5zHA5wmMnYGj409qK5PrVTentj710Lv2
/vtk2A1X5SXlQG4oGUVRtpczS8oAIRtDH4G/hnCxoXxb3F5eaCizh4HnPQyg3c+gjbKvjmfPHc1u
KIO4uILpB9lDGGa8PdftdtsV3MruTVzz7v3BYNBZwRPYrKF0+X7bMsrXWqfFo82xaJfvtC1FPj+R
2g3ldv03P8Nw/wu8azXXX7R+NFs7v/p7/X7/Y2ttbR39n+jfJSWvSlIlMjMNp7HAHeI4HvpJOH7w
6txGfwFAr8ecAEnIk2FvcEp4zv/sedSywJdQA4Gvoz4V+BZqTeAc6orAD1CbAhdQWwJTYb2Aq6uh
VgReRV2s/+OXqPcEfgNRH8KwryR4jXbjkBPwYYw7Ywy2rz6ySyRNgfhWaDJiakyjUPEsUnKpQ0LL
A/SZ5RZtSmwfyh4zCrph6qbmACkzYlkWMYnpArMtZjmuWnBMA9NsnZleyPwgAGaFWrVKdScomxBa
vuow1zewEBA7YKzsWUXmGuAwnxiOXaKqVgC/7NGirVG1ahDI5zVK8zRQ/QDyRFcDFY2rA6Tpk1Kg
amgDP7Jm7AXkcQDpYe7/jwvDU43u6fDu8r4Rmia+uzOjPH71ef/oCHNCHXlkz45y4vEK4bLAkmAT
QnwDAxmck6NvyiN7cqzeDr70+Zh6fwHton6mtAQAAA==
```

Good luck!</description>
    
    <lastBuildDate>Wed, 02 Jan 2019 11:01:21 +0000</lastBuildDate>
    <category>Challenges</category>
    <atom:link href="https://0x00sec.org/t/crackme-remove-me/2189.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[CrackMe] Remove Me</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/crackme-remove-me/2189/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-remove-me/2189/12</link>
        <pubDate>Wed, 02 Jan 2019 11:02:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2189-12</guid>
        <source url="https://0x00sec.org/t/crackme-remove-me/2189.rss">[CrackMe] Remove Me</source>
      </item>
      <item>
        <title>[CrackMe] Remove Me</title>
        <dc:creator><![CDATA[PurpleWizard]]></dc:creator>
        <description><![CDATA[
            <p>Bigger challenge, crack iPiSoft’s mocap software</p>
          <p><a href="https://0x00sec.org/t/crackme-remove-me/2189/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-remove-me/2189/11</link>
        <pubDate>Wed, 02 Jan 2019 11:01:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2189-11</guid>
        <source url="https://0x00sec.org/t/crackme-remove-me/2189.rss">[CrackMe] Remove Me</source>
      </item>
      <item>
        <title>[CrackMe] Remove Me</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>It seems your profile is hidden, please PM me so I can send you the source.</p>
          <p><a href="https://0x00sec.org/t/crackme-remove-me/2189/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-remove-me/2189/10</link>
        <pubDate>Wed, 02 Jan 2019 08:55:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2189-10</guid>
        <source url="https://0x00sec.org/t/crackme-remove-me/2189.rss">[CrackMe] Remove Me</source>
      </item>
      <item>
        <title>[CrackMe] Remove Me</title>
        <dc:creator><![CDATA[siclo]]></dc:creator>
        <description><![CDATA[
            <p>Hi <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a>, I am really curious to see the source code if possible <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
I am  new here and start reading all RE stuff and this one is really interesting for me to do !<br>
Thanks</p>
          <p><a href="https://0x00sec.org/t/crackme-remove-me/2189/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-remove-me/2189/9</link>
        <pubDate>Wed, 02 Jan 2019 08:46:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2189-9</guid>
        <source url="https://0x00sec.org/t/crackme-remove-me/2189.rss">[CrackMe] Remove Me</source>
      </item>
      <item>
        <title>[CrackMe] Remove Me</title>
        <dc:creator><![CDATA[lacike]]></dc:creator>
        <description><![CDATA[
            <p>Hello,<br>
thanks <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> for this crackme, it was nice relax during Sunday afternoon for me.<br>
My original solution was the same as <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a> presented in first post, so I try find another single-byte patch.</p>
<div class="spoiler"><a href="https://0x00sec.org/t/crackme-remove-me/2189/8">spoiler</a></div>
<p>Edited: it seems that preformatted inline text doesn’t work inside of spoiler. I am sorry, this is my first post.</p>
          <p><a href="https://0x00sec.org/t/crackme-remove-me/2189/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-remove-me/2189/8</link>
        <pubDate>Sun, 16 Jul 2017 15:12:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2189-8</guid>
        <source url="https://0x00sec.org/t/crackme-remove-me/2189.rss">[CrackMe] Remove Me</source>
      </item>
      <item>
        <title>[CrackMe] Remove Me</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Another solution</p>
<p>[spoiler]Setting the length of a <strong>write</strong> to 0 works in this case, but let’s extrapolate this challenge to a real world case. Imagine that instead of printing a message in the console, the program is actually invoking some protection code that prevents us to reverse the program. In that case, what we really want to do is to skip the execution of that function, or deactivate the protection. As our “function” is just a write to <strong>stdout</strong>, let’s solve the challenge skipping the code instead.</p>
<p>This solution is a lot longer but it is way more interesting.</p>
<p>First thing I have to say is that this challenge is very cool. It first deobfuscate the real code that is XOR encoded at the beginning of the <strong>.text</strong> segment. Then it runs that code that, instead of showing the messages in the console, “writes” new code to write the messages in the console. After that, it deobfuscate the data segment (actually the equivalent to <strong>.rodata</strong>) with a different key and finally, it runs the generated code, the one printing the message we have to remove. As I said this is really cool stuff. Kudos to <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a>!</p>
<p>So, let’s get started.</p>
<p>Using <strong>gdb</strong> and setting a couple of break points (I will not give you all the details so you can still have some fun <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> you can easily deobfuscate the original code and then run it to get the final code (sure, a little bit of dynamic analysis will not hurt). The original deobfuscated code looks like this:</p>
<pre><code>Dump of assembler code for function ektwwpoijwng:
   0x08048071 &lt;+0&gt;:	90			nop
   0x08048072 &lt;+1&gt;:	41			inc    %ecx
   0x08048073 &lt;+2&gt;:	31 ff			xor    %edi,%edi
   0x08048075 &lt;+4&gt;:	31 c9			xor    %ecx,%ecx
   0x08048077 &lt;+6&gt;:	40			inc    %eax
   0x08048078 &lt;+7&gt;:	c6 00 b8		movb   $0xb8,(%eax)
   0x0804807b &lt;+10&gt;:	40			inc    %eax
   0x0804807c &lt;+11&gt;:	c7 00 04 00 00 00	movl   $0x4,(%eax)
   0x08048082 &lt;+17&gt;:	83 c0 04		add    $0x4,%eax
   0x08048085 &lt;+20&gt;:	c6 00 bb		movb   $0xbb,(%eax)
   0x08048088 &lt;+23&gt;:	40		        inc    %eax
   0x08048089 &lt;+24&gt;:	c7 00 01 00 00 00	movl   $0x1,(%eax)
   0x0804808f &lt;+30&gt;:	83 c0 04		add    $0x4,%eax
   0x08048092 &lt;+33&gt;:	c6 00 b9	        movb   $0xb9,(%eax)
   0x08048095 &lt;+36&gt;:	40		        inc    %eax
   0x08048096 &lt;+37&gt;:	c7 00 64 81 04 08	movl   $0x8048164,(%eax)
   0x0804809c &lt;+43&gt;:	83 c0 04		add    $0x4,%eax
   0x0804809f &lt;+46&gt;:	66 c7 00 8b 15	        movw   $0x158b,(%eax)
   0x080480a4 &lt;+51&gt;:	83 c0 02	        add    $0x2,%eax
   0x080480a7 &lt;+54&gt;:	c7 00 70 81 04 08	movl   $0x8048170,(%eax)
   (...)
</code></pre>
<p>And, once it is executed, the final code is unveiled:</p>
<pre><code>Dump of assembler code for function ektwwpoijwng:
   0x08048071 &lt;+0&gt;:	90			nop
   0x08048072 &lt;+1&gt;:	b8 04 00 00 00		mov    $0x4,%eax
   0x08048077 &lt;+6&gt;:	bb 01 00 00 00		mov    $0x1,%ebx
   0x0804807c &lt;+11&gt;:	b9 64 81 04 08		mov    $0x8048164,%ecx
   0x08048081 &lt;+16&gt;:	8b 15 70 81 04 08	mov    0x8048170,%edx
   0x08048087 &lt;+22&gt;:	cd 80	       		int    $0x80
   0x08048089 &lt;+24&gt;:	b0 04			mov    $0x4,%al
   0x0804808b &lt;+26&gt;:	b9 74 81 04 08		mov    $0x8048174,%ecx
   0x08048090 &lt;+31&gt;:	8b 15 7c 81 04 08	mov    0x804817c,%edx
   0x08048096 &lt;+37&gt;:	cd 80	       		int    $0x80
   0x08048098 &lt;+39&gt;:	bb 00 00 00 00		mov    $0x0,%ebx
   0x0804809d &lt;+44&gt;:	b8 01 00 00 00		mov    $0x1,%eax
   0x080480a2 &lt;+49&gt;:	cd 80	    		int    $0x80
</code></pre>
<p>Now we have to work backwards. First decide what to patch in the final code, then patch the generator code to produce what we want, and finally obfuscate our patch to be able to apply it to the original file.</p>
<p>We have many options for the first step. I’m not sure whether the one I have chose is the best but it just works. You guys can try to beat this <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>If we look at the code we can see that we need <strong>EBX</strong> set to 1 also for the second <strong>write</strong> call (the second <em>int $0x80</em>), I decide to hook into the <strong>mov $0x8048164,%ecx</strong> so I let the original code to set <strong>EBX</strong> for me. If we change  this instruction (the mov into <strong>ecx</strong>) into a <strong>jmp</strong> to <strong>0x08048089</strong> then we are done.  So we will have to inject a relative jump (2 bytes) at address <strong>0x0804807c</strong> to skip the first <strong>write</strong> and continue with the second, located at <strong>0x08048089</strong>. This leads us to the following offset for our relative jump: <strong>0x08048089 - (0x0804807c + 2) -1 = 0x0a</strong></p>
<p>So, we want <strong>jmp +0x0a</strong> at <strong>0x0804807</strong>… that translates to opcodes <strong>eb 0a</strong>.</p>
<p>Fine. Now it’s time to look into the generator function. The commands that generates the instruction we want to patch are these:</p>
<pre><code>   0x08048092 &lt;+33&gt;:	c6 00 b9	        movb   $0xb9,(%eax)
   0x08048095 &lt;+36&gt;:	40		        inc    %eax
   0x08048096 &lt;+37&gt;:	c7 00 64 81 04 08	movl   $0x8048164,(%eax)
</code></pre>
<p>You can see how the program first pokes <strong>B9</strong> and then, after increasing the write pointer, the address to load on <strong>ECX</strong>. These three instructions effectively produce:</p>
<pre><code>  0x0804807c &lt;+11&gt;:	b9 64 81 04 08		mov    $0x8048164,%ecx
</code></pre>
<p>So, what we are going to do is to remove the inc and use the immediate addressing parameter to store our jump instruction. I want to have just one patch command because I prefer to have sequential bytes to patch even if I have to write some byte that is already there.</p>
<p>So, my patching sequence for the generator function will be:</p>
<pre><code>90 c7 00 eb 0a
</code></pre>
<p>(remember the 90 <strong>NOP</strong> removes the <strong>INC</strong> so we start writing at the beginning of the generated instruction).</p>
<p>You see that I’m writing again <strong>C7</strong> and <strong>00</strong>. This 2 values are already there and we do not need to write them again but, as I said, this way I can just run 1 patch command. (Note that it is pretty easy to patch this with two non-consecutive writes just 2 bytes… it may even be a 1byte patch solution IDK <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Now, the last part is to obfuscate those bytes so we can patch the original file and then, when the de-obfuscate code is executed it will put our bytes in the right place in the generator function who will produce the code we wanted.</p>
<p>We already know that the key for the deobfuscator is 0x44 (I haven’t said this before, but I’m pretty sure you can figure this out yourself), so xoring our patch with the key (0x44) we get the final patch:</p>
<pre><code>44 44 44 44 44
XOR
90 c7 00 eb 0a
--------------
d4 83 44 af 4e
</code></pre>
<p>The last piece of information we need is the offset in the file to write our patch. I’m pretty sure that, if you are reading this you already know how to calculate this… but, just in case.</p>
<p>First, let’s get the information for our <strong>.text</strong> section from the binary</p>
<pre><code>$  readelf -S removeme.orig  | grep ".text"
  [ 1] .text             PROGBITS        08048060 000060 000103 00 WAX  0   0 16
</code></pre>
<p>So, the <strong>.text</strong> segment is located at offset <strong>60</strong> in the file and it is mapped at <strong>0x08048060</strong> in memory. So, the file offset we are interest on is:</p>
<pre><code>0x0804807c - 0x08048060 + 60 = 7c = 149
</code></pre>
<p>If you do not recall where does 0x0804807c comes from, just scroll up a bit and read again. As you can see, the offset in the file is <strong>60</strong> and the section address is <strong>0x08048060</strong>, then we can just use the lower part of the address to know the file offset for any address. This is usually the case <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Now we can just patch the file with this data!</p>
<pre><code>$ echo -ne "\xd4\x83\x44\xaf\x4e" | dd of=removeme.patch2 bs=1 seek=149 count=5 conv=notrunc
</code></pre>
<p>… and we are done.[/spoiler]</p>
          <p><a href="https://0x00sec.org/t/crackme-remove-me/2189/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-remove-me/2189/7</link>
        <pubDate>Mon, 10 Jul 2017 16:06:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2189-7</guid>
        <source url="https://0x00sec.org/t/crackme-remove-me/2189.rss">[CrackMe] Remove Me</source>
      </item>
      <item>
        <title>[CrackMe] Remove Me</title>
        <dc:creator><![CDATA[ATGC]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> it certainly did! Thanks for creating this - I’d love to see the source if you’re willing to share?</p>
          <p><a href="https://0x00sec.org/t/crackme-remove-me/2189/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-remove-me/2189/6</link>
        <pubDate>Sun, 09 Jul 2017 13:46:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2189-6</guid>
        <source url="https://0x00sec.org/t/crackme-remove-me/2189.rss">[CrackMe] Remove Me</source>
      </item>
      <item>
        <title>[CrackMe] Remove Me</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Well done, excellent analysis! I hope this challenge has taught you some things. <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          <p><a href="https://0x00sec.org/t/crackme-remove-me/2189/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-remove-me/2189/5</link>
        <pubDate>Sun, 09 Jul 2017 04:12:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2189-5</guid>
        <source url="https://0x00sec.org/t/crackme-remove-me/2189.rss">[CrackMe] Remove Me</source>
      </item>
      <item>
        <title>[CrackMe] Remove Me</title>
        <dc:creator><![CDATA[ATGC]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a> totally nailed this but here’s a blow-by-blow account of my analysis along with an alternative (less elegant) solution.</p>
<p>Running <code>./a.out</code> prints:</p>
<pre><code class="lang-auto">Remove me!
Hello!</code></pre>
<p>and then exits.</p>
<div class="spoiler"><a href="https://0x00sec.org/t/crackme-remove-me/2189/4">spoiler</a></div>
          <p><a href="https://0x00sec.org/t/crackme-remove-me/2189/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-remove-me/2189/4</link>
        <pubDate>Sat, 08 Jul 2017 20:02:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2189-4</guid>
        <source url="https://0x00sec.org/t/crackme-remove-me/2189.rss">[CrackMe] Remove Me</source>
      </item>
      <item>
        <title>[CrackMe] Remove Me</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Wow, great job, very elegant! <img src="https://0x00sec.org/images/emoji/twitter/ok_hand.png?v=9" title=":ok_hand:" class="emoji" alt=":ok_hand:"> Bonus points to you for a single byte patch! <img src="https://0x00sec.org/images/emoji/twitter/+1.png?v=9" title=":+1:" class="emoji" alt=":+1:"></p>
          <p><a href="https://0x00sec.org/t/crackme-remove-me/2189/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-remove-me/2189/3</link>
        <pubDate>Tue, 06 Jun 2017 18:14:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2189-3</guid>
        <source url="https://0x00sec.org/t/crackme-remove-me/2189.rss">[CrackMe] Remove Me</source>
      </item>
      <item>
        <title>[CrackMe] Remove Me</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>This challenge is great mate! I’ll love to see the code<br>
Congrats</p>
<p>I believe this is not what you were looking for, but according to rules, should be fine as It removes the message.</p>
<p>[spoiler]I just modified 1 byte… the size of the string to be removed. Setting it to 0 the write system call will just do nothing…</p>
<pre><code class="lang-auto">echo -ne "\xfd" | dd of=a.out bs=1 seek=368 count=1 conv=notrunc
</code></pre>
<p>[/spoiler]</p>
          <p><a href="https://0x00sec.org/t/crackme-remove-me/2189/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-remove-me/2189/2</link>
        <pubDate>Tue, 06 Jun 2017 17:04:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2189-2</guid>
        <source url="https://0x00sec.org/t/crackme-remove-me/2189.rss">[CrackMe] Remove Me</source>
      </item>
      <item>
        <title>[CrackMe] Remove Me</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Suh doods, got another challenge which will probably be my last one for a while due to my lack of knowledge of the Linux system. I may make some Windows challenges if anyone wishes.</p>
<p>If anyone would like the source code to this, please tell me!</p>
<hr>
<h2>Difficulty</h2>
<p>Depends on your current knowledge. Personally, I’d say it is somewhere between easy and intermediate.</p>
<p><a href="https://0x00sec.org/t/crackme-remove-me/2189/1">Click to view the poll.</a></p>
<hr>
<h2>Goal</h2>
<p>The aim of this challenge is to modify the binary such that you remove the <code>Remove me!</code> message from displaying. <em>Any</em> method is acceptable however, the real goal is to apply the simplest (most elegant) and <strong>fewest</strong> patches as possible (in terms of bytes). Please comment your method and the number of modified bytes.</p>
<h3>Correct Output</h3>
<pre><code class="lang-makefile">$ ./crackme
Hello!
$ _
</code></pre>
<hr>
<h2>Rules of Engagement</h2>
<p>None.</p>
<hr>
<h2>Hints</h2>
<p>Hint <span class="hashtag">#1:</span> <span class="spoiler"><a href="https://0x00sec.org/t/crackme-remove-me/2189/1">spoiler</a></span><br>
Hint <span class="hashtag">#2:</span> <span class="spoiler"><a href="https://0x00sec.org/t/crackme-remove-me/2189/1">spoiler</a></span><br>
Hint <span class="hashtag">#3:</span> <span class="spoiler"><a href="https://0x00sec.org/t/crackme-remove-me/2189/1">spoiler</a></span></p>
<hr>
<h2>Binary</h2>
<p>Use the following command to recover the binary:</p>
<pre><code class="lang-makefile">cat crackme | base64 -d | gunzip &gt; a.out &amp;&amp; chmod +x a.out
</code></pre>
<h3>Normal mode (Not Stripped)</h3>
<pre><code class="lang-makefile">H4sICOZgNlkAA2tyYWNrbWUAjZM9bNNAFMefU7eEwgBMSCwpEoIp4qNDhyIi4VQMWcqAYAo2vtiO
HTvx2TmQkEiaLohWSjtF0J0FBBJCShMJBlJ1QiyMZe9aqYiBhvAujss16sBJ93/v9/z8fHd+9yyb
W5AkCeKRgAngNF2Xk7NoexNRfBZSGL8CU6PnD/msyUk+5zHA5wmMnYGj409qK5PrVTentj710Lv2
/vtk2A1X5SXlQG4oGUVRtpczS8oAIRtDH4G/hnCxoXxb3F5eaCizh4HnPQyg3c+gjbKvjmfPHc1u
KIO4uILpB9lDGGa8PdftdtsV3MruTVzz7v3BYNBZwRPYrKF0+X7bMsrXWqfFo82xaJfvtC1FPj+R
2g3ldv03P8Nw/wu8azXXX7R+NFs7v/p7/X7/Y2ttbR39n+jfJSWvSlIlMjMNp7HAHeI4HvpJOH7w
6txGfwFAr8ecAEnIk2FvcEp4zv/sedSywJdQA4Gvoz4V+BZqTeAc6orAD1CbAhdQWwJTYb2Aq6uh
VgReRV2s/+OXqPcEfgNRH8KwryR4jXbjkBPwYYw7Ywy2rz6ySyRNgfhWaDJiakyjUPEsUnKpQ0LL
A/SZ5RZtSmwfyh4zCrph6qbmACkzYlkWMYnpArMtZjmuWnBMA9NsnZleyPwgAGaFWrVKdScomxBa
vuow1zewEBA7YKzsWUXmGuAwnxiOXaKqVgC/7NGirVG1ahDI5zVK8zRQ/QDyRFcDFY2rA6Tpk1Kg
amgDP7Jm7AXkcQDpYe7/jwvDU43u6fDu8r4Rmia+uzOjPH71ef/oCHNCHXlkz45y4vEK4bLAkmAT
QnwDAxmck6NvyiN7cqzeDr70+Zh6fwHton6mtAQAAA==
</code></pre>
<p>Good luck!</p>
          <p><a href="https://0x00sec.org/t/crackme-remove-me/2189/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crackme-remove-me/2189/1</link>
        <pubDate>Tue, 06 Jun 2017 07:21:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2189-1</guid>
        <source url="https://0x00sec.org/t/crackme-remove-me/2189.rss">[CrackMe] Remove Me</source>
      </item>
  </channel>
</rss>
