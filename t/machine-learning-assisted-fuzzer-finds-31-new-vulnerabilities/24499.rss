<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Machine learning-assisted Fuzzer finds 31 new vulnerabilities</title>
    <link>https://0x00sec.org/t/machine-learning-assisted-fuzzer-finds-31-new-vulnerabilities/24499</link>
    <description>Hey all. This post will briefly describe how a machine learning enabled-fuzzer, NEUZZ, outperformed 10 non-ML-assisted fuzzers on 10 real programs to find 31 unknown vulnerabilities. NEUZZ was created by researchers from Columbia University, She et al in 2019. NEUZZ is open source software available on [GitHub](https://github.com/Dongdongshe/neuzz).

The increased performance and opportunities provided by machine learning is why I created a [machine learning course for hackers](https://security.kiwi) called Security Kiwi which launched today. The course starts off beginner-friendly with the fundamentals and we quickly work our way into practical exercises, neural networks and other fun stuff. 

Eventually, learners build larger machine learning projects: automated email malware collection, facial recognition for OSINT, threat prediction, ‘cyber weather’ prediction, and more. I want to encourage the use of ML and experimentation with ML in a non-academic/commercial environment, so much of the course content is free. Videos, downloads, Q&amp;A, discussion, etc available to patreon supporters. New content is added twice a month, and weekly in January. 

Anyway, onto the good part, ML-assisted fuzzing.

*N.B.* If there’s another security-related machine learning article (from behind a journal paywall, for example) you’re interested in and want me to discuss in detail (rather than this very brief overview), reply below or hit me up on [twitter](https://twitter.com/krisbolton) (via DM). I&#39;m also on the 0x00Sec discord (Kris). I added a quick list of academic databases to the bottom of the page.

## How NEUZZ Works

NEUZZ was created using TensorFlow &amp; Keras, two open source machine learning libraries security kiwi will cover shortly. Most fuzzers use evolutionary algorithms behind the scenes which aim to increase the coverage of the inputs they test, in a bid to find as many vulnerabilities as possible. The authors of NEUZZ note the main limitation of evolutionary algorithms is their inability to model the structure of the optimization problem (increasing coverage is an optimization problem). Gradient descent, the mathematical concept underlying many neural network implementations doesn’t suffer from this limitation (don’t worry we won’t be diving into any math). The researchers set out to create a prototype and test the hypothesis that neural networks can be used to improve fuzzer performance. 

As we can’t cover the foundations of machine learning in a paragraph or two, we will be over-simplifying and glossing over some of the internal workings discussed in the research article. NEUZZ takes initial seed inputs and generates new inputs iteratively, using the technique we mentioned earlier, gradient descent. 

## What is Gradient Descent?

Gradient descent is a process used to find the lowest error rate by updating model parameters and following the direction of the slope until it reaches a valley; the valley represents a low error rate and thus high accuracy. Slopes? Valleys? Complex math is often made more digestible by visualizing the problem. This type of thinking can be strange to begin with, stay with me as I explain.

![](upload://uOOJTawYoQCjyDPZ6Vuv1qUszJy.jpeg)

Figure 1 shows gradient descent, the algorithm follows the slope of the curve until it finds the low point. Each point on the graph is after a change to internal model parameters, slowly the algorithm learns to increase accuracy (and reduce error/loss). However, you can plot in more dimensions, and this can dramatically shift your understanding of how machine learning actually works.

![](upload://5ofBlvhbxoq2BNnVxbB40D0L3gl.jpeg)

Figure 2 shows a 3D representation of the problem space the algorithm has to optimize. The blue dot is the representation of parameters and their change through time (the black line) as the algorithm is exposed to new data and the loss is optimized (reduced as much as possible). Projected below the 3D representation in figure 2 is another type of representation you may come across; topographic, the same as you may be familiar with from a geographic map showing the height of the terrain. Figure 2 shows the same concept as Figure 1, one is 2D and the other 3D.

An analogy may illuminate these figures further. Gradient descent can be seen as a blind-folded mountaineer attempting to find their way down a mountain only by feeling the gradient of the terrain. The security kiwi page on optimization algorithms, and gradient descent in particular, will be added on February 4th.

## Back to NEUZZ

Using the process of gradient descent NEUZZ identifies the input bytes with the highest gradient values, these indicate a higher level of importance to the neural network and have a higher chance of causing a major change to the program&#39;s behaviour. The neural network (a three-layered network) models the target program&#39;s behaviour. The neural network is incrementally refined using observed behaviours during fuzzing (i.e. new training data is generated and learned from). When major changes in behaviour are detected, traces are recorded for manual analysis.

*The security kiwi page discussing neural networks will be added on January 21st, and the whole Training Models chapter will be added shortly after.*

## NEUZZ Results

TDLR; 31 vulnerabilities not discovered by 10 other fuzzers including two CVEs (CVE-2018-19931 and CVE-2018-19932).

She et al, break down their evaluation into answering research questions they created at the start to guide their work. 

1. Can NEUZZ find more bugs than existing fuzzers?

NEUZZ finds the following bugs in 6 programs; out-of-memory, memory leak, assertion crash, integer overflow and heap overflow. While other fuzzers tested find up to 3 or 2 of these bug types. See the image below for detail.

![Screenshot 2021-01-07 at 19.20.02|666x500, 75%](upload://3IL4FTiBxLHZGhZm93LObh9MymS.png) 

2. Can NEUZZ achieve higher coverage than existing fuzzers?

She et al ran each fuzzer against 10 different programs for 24 hours and recorded the edge coverage of each. This describes how much of the program was tested to find vulnerabilities. The image below shows this comparison after 24 hours.

![Screenshot 2021-01-07 at 19.20.15|690x292, 75%](upload://4MhfiAP5ziP0MyL9BbTDalfVlMk.png) 

The following image shows edge coverage over time. Consider NEUZZ’s speed and coverage rate versus the other fuzzers tested. The reason for its vastly superior speed and coverage is what we discussed before. The use of gradient descent and complementary neural network techniques to solve the limitation of solving it as an optimization problem.

Thanks for reading. I hope this was interesting. 

As I mentioned, if you have any machine learning research papers you would like me to cover in detail, or project ideas for security kiwi please get in touch ([email](https://security.kiwi/contact), [twitter](https://twitter.com/krisbolton), discord) or reply below. Don&#39;t expect a quick turn-around, a proper write-up and research takes time. Additionally, if you have any questions I’m happy to answer them.

Academic databases:

* [IEEE Xplore](https://ieeexplore.ieee.org/Xplore/home.jsp)
* [ACM Digital Library](https://dl.acm.org/)
* [Science Direct](https://www.sciencedirect.com/)
* [Arxiv](https://arxiv.org/)

## References

Dongdong She, Kexin Pei, Dave Epstein, Junfeng Yang, Baishakhi Ray, and Suman Jana. *NEUZZ: Efficient Fuzzing with Neural Program Smoothing.* https://arxiv.org/abs/1807.05620</description>
    
    <lastBuildDate>Thu, 07 Jan 2021 22:57:00 +0000</lastBuildDate>
    <category>Artificial Intelligence</category>
    <atom:link href="https://0x00sec.org/t/machine-learning-assisted-fuzzer-finds-31-new-vulnerabilities/24499.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Machine learning-assisted Fuzzer finds 31 new vulnerabilities</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/machine-learning-assisted-fuzzer-finds-31-new-vulnerabilities/24499/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/machine-learning-assisted-fuzzer-finds-31-new-vulnerabilities/24499/4</link>
        <pubDate>Sat, 06 Feb 2021 19:37:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24499-4</guid>
        <source url="https://0x00sec.org/t/machine-learning-assisted-fuzzer-finds-31-new-vulnerabilities/24499.rss">Machine learning-assisted Fuzzer finds 31 new vulnerabilities</source>
      </item>
      <item>
        <title>Machine learning-assisted Fuzzer finds 31 new vulnerabilities</title>
        <dc:creator><![CDATA[kris]]></dc:creator>
        <description><![CDATA[
            <p>That’s a massive list, what a great resource. I’ll see if I have any quality papers to add</p>
          <p><a href="https://0x00sec.org/t/machine-learning-assisted-fuzzer-finds-31-new-vulnerabilities/24499/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/machine-learning-assisted-fuzzer-finds-31-new-vulnerabilities/24499/3</link>
        <pubDate>Thu, 07 Jan 2021 22:57:00 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24499-3</guid>
        <source url="https://0x00sec.org/t/machine-learning-assisted-fuzzer-finds-31-new-vulnerabilities/24499.rss">Machine learning-assisted Fuzzer finds 31 new vulnerabilities</source>
      </item>
      <item>
        <title>Machine learning-assisted Fuzzer finds 31 new vulnerabilities</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <p>Good stuff! That article is somewhat reviving the news category here… at least to a degree.<br>
I like the idea of paper reviews/summaries! Reading a 1-2 page summary may give you enough information for determining whether or not the topic peaks your interest.</p>
<p>I think I skimmed over that NEUZZ paper a while back but I’m not a big fan of reading ML papers so this was a nice refresher <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>That said, for anyone else interested in fuzzing and vulnerability research I’m <a href="https://github.com/0xricksanchez/paper_collection">compiling a list of academic papers on my GitHub as well</a></p>
          <p><a href="https://0x00sec.org/t/machine-learning-assisted-fuzzer-finds-31-new-vulnerabilities/24499/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/machine-learning-assisted-fuzzer-finds-31-new-vulnerabilities/24499/2</link>
        <pubDate>Thu, 07 Jan 2021 22:49:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24499-2</guid>
        <source url="https://0x00sec.org/t/machine-learning-assisted-fuzzer-finds-31-new-vulnerabilities/24499.rss">Machine learning-assisted Fuzzer finds 31 new vulnerabilities</source>
      </item>
      <item>
        <title>Machine learning-assisted Fuzzer finds 31 new vulnerabilities</title>
        <dc:creator><![CDATA[kris]]></dc:creator>
        <description><![CDATA[
            <p>Hey all. This post will briefly describe how a machine learning enabled-fuzzer, NEUZZ, outperformed 10 non-ML-assisted fuzzers on 10 real programs to find 31 unknown vulnerabilities. NEUZZ was created by researchers from Columbia University, She et al in 2019. NEUZZ is open source software available on <a href="https://github.com/Dongdongshe/neuzz" rel="noopener nofollow ugc">GitHub</a>.</p>
<p>The increased performance and opportunities provided by machine learning is why I created a <a href="https://security.kiwi" rel="noopener nofollow ugc">machine learning course for hackers</a> called Security Kiwi which launched today. The course starts off beginner-friendly with the fundamentals and we quickly work our way into practical exercises, neural networks and other fun stuff.</p>
<p>Eventually, learners build larger machine learning projects: automated email malware collection, facial recognition for OSINT, threat prediction, ‘cyber weather’ prediction, and more. I want to encourage the use of ML and experimentation with ML in a non-academic/commercial environment, so much of the course content is free. Videos, downloads, Q&amp;A, discussion, etc available to patreon supporters. New content is added twice a month, and weekly in January.</p>
<p>Anyway, onto the good part, ML-assisted fuzzing.</p>
<p><em>N.B.</em> If there’s another security-related machine learning article (from behind a journal paywall, for example) you’re interested in and want me to discuss in detail (rather than this very brief overview), reply below or hit me up on <a href="https://twitter.com/krisbolton" rel="noopener nofollow ugc">twitter</a> (via DM). I’m also on the 0x00Sec discord (Kris). I added a quick list of academic databases to the bottom of the page.</p>
<h2>How NEUZZ Works</h2>
<p>NEUZZ was created using TensorFlow &amp; Keras, two open source machine learning libraries security kiwi will cover shortly. Most fuzzers use evolutionary algorithms behind the scenes which aim to increase the coverage of the inputs they test, in a bid to find as many vulnerabilities as possible. The authors of NEUZZ note the main limitation of evolutionary algorithms is their inability to model the structure of the optimization problem (increasing coverage is an optimization problem). Gradient descent, the mathematical concept underlying many neural network implementations doesn’t suffer from this limitation (don’t worry we won’t be diving into any math). The researchers set out to create a prototype and test the hypothesis that neural networks can be used to improve fuzzer performance.</p>
<p>As we can’t cover the foundations of machine learning in a paragraph or two, we will be over-simplifying and glossing over some of the internal workings discussed in the research article. NEUZZ takes initial seed inputs and generates new inputs iteratively, using the technique we mentioned earlier, gradient descent.</p>
<h2>What is Gradient Descent?</h2>
<p>Gradient descent is a process used to find the lowest error rate by updating model parameters and following the direction of the slope until it reaches a valley; the valley represents a low error rate and thus high accuracy. Slopes? Valleys? Complex math is often made more digestible by visualizing the problem. This type of thinking can be strange to begin with, stay with me as I explain.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/d/7/d7ffd0fc9e59af6b20cb469b598f257fd670f0b4.jpeg" alt="" data-base62-sha1="uOOJTawYoQCjyDPZ6Vuv1qUszJy" width="383" height="437"></p>
<p>Figure 1 shows gradient descent, the algorithm follows the slope of the curve until it finds the low point. Each point on the graph is after a change to internal model parameters, slowly the algorithm learns to increase accuracy (and reduce error/loss). However, you can plot in more dimensions, and this can dramatically shift your understanding of how machine learning actually works.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/2/5/25c8abd0aa444d5cd46dd2554ed8f437952afca9.jpeg" alt="" data-base62-sha1="5ofBlvhbxoq2BNnVxbB40D0L3gl" width="458" height="373"></p>
<p>Figure 2 shows a 3D representation of the problem space the algorithm has to optimize. The blue dot is the representation of parameters and their change through time (the black line) as the algorithm is exposed to new data and the loss is optimized (reduced as much as possible). Projected below the 3D representation in figure 2 is another type of representation you may come across; topographic, the same as you may be familiar with from a geographic map showing the height of the terrain. Figure 2 shows the same concept as Figure 1, one is 2D and the other 3D.</p>
<p>An analogy may illuminate these figures further. Gradient descent can be seen as a blind-folded mountaineer attempting to find their way down a mountain only by feeling the gradient of the terrain. The security kiwi page on optimization algorithms, and gradient descent in particular, will be added on February 4th.</p>
<h2>Back to NEUZZ</h2>
<p>Using the process of gradient descent NEUZZ identifies the input bytes with the highest gradient values, these indicate a higher level of importance to the neural network and have a higher chance of causing a major change to the program’s behaviour. The neural network (a three-layered network) models the target program’s behaviour. The neural network is incrementally refined using observed behaviours during fuzzing (i.e. new training data is generated and learned from). When major changes in behaviour are detected, traces are recorded for manual analysis.</p>
<p><em>The security kiwi page discussing neural networks will be added on January 21st, and the whole Training Models chapter will be added shortly after.</em></p>
<h2>NEUZZ Results</h2>
<p>TDLR; 31 vulnerabilities not discovered by 10 other fuzzers including two CVEs (CVE-2018-19931 and CVE-2018-19932).</p>
<p>She et al, break down their evaluation into answering research questions they created at the start to guide their work.</p>
<ol>
<li>Can NEUZZ find more bugs than existing fuzzers?</li>
</ol>
<p>NEUZZ finds the following bugs in 6 programs; out-of-memory, memory leak, assertion crash, integer overflow and heap overflow. While other fuzzers tested find up to 3 or 2 of these bug types. See the image below for detail.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/1/a/1a15c7692f22ffe6945564f995a2781c9bade3c2.png" data-download-href="/uploads/short-url/3IL4FTiBxLHZGhZm93LObh9MymS.png?dl=1" title="Screenshot 2021-01-07 at 19.20.02" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/1/a/1a15c7692f22ffe6945564f995a2781c9bade3c2_2_499x375.png" alt="Screenshot 2021-01-07 at 19.20.02" data-base62-sha1="3IL4FTiBxLHZGhZm93LObh9MymS" width="499" height="375" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/1/a/1a15c7692f22ffe6945564f995a2781c9bade3c2_2_499x375.png, https://0x00sec.s3.amazonaws.com/optimized/3X/1/a/1a15c7692f22ffe6945564f995a2781c9bade3c2_2_748x562.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/1/a/1a15c7692f22ffe6945564f995a2781c9bade3c2.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/1/a/1a15c7692f22ffe6945564f995a2781c9bade3c2_2_10x10.png"></a></div><p></p>
<ol start="2">
<li>Can NEUZZ achieve higher coverage than existing fuzzers?</li>
</ol>
<p>She et al ran each fuzzer against 10 different programs for 24 hours and recorded the edge coverage of each. This describes how much of the program was tested to find vulnerabilities. The image below shows this comparison after 24 hours.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/2/1/217dc89dea39033889ae1b37669cb3c057583690.png" data-download-href="/uploads/short-url/4MhfiAP5ziP0MyL9BbTDalfVlMk.png?dl=1" title="Screenshot 2021-01-07 at 19.20.15" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/2/1/217dc89dea39033889ae1b37669cb3c057583690_2_517x219.png" alt="Screenshot 2021-01-07 at 19.20.15" data-base62-sha1="4MhfiAP5ziP0MyL9BbTDalfVlMk" width="517" height="219" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/2/1/217dc89dea39033889ae1b37669cb3c057583690_2_517x219.png, https://0x00sec.s3.amazonaws.com/optimized/3X/2/1/217dc89dea39033889ae1b37669cb3c057583690_2_775x328.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/2/1/217dc89dea39033889ae1b37669cb3c057583690_2_1034x438.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/2/1/217dc89dea39033889ae1b37669cb3c057583690_2_10x10.png"></a></div><p></p>
<p>The following image shows edge coverage over time. Consider NEUZZ’s speed and coverage rate versus the other fuzzers tested. The reason for its vastly superior speed and coverage is what we discussed before. The use of gradient descent and complementary neural network techniques to solve the limitation of solving it as an optimization problem.</p>
<p>Thanks for reading. I hope this was interesting.</p>
<p>As I mentioned, if you have any machine learning research papers you would like me to cover in detail, or project ideas for security kiwi please get in touch (<a href="https://security.kiwi/contact" rel="noopener nofollow ugc">email</a>, <a href="https://twitter.com/krisbolton" rel="noopener nofollow ugc">twitter</a>, discord) or reply below. Don’t expect a quick turn-around, a proper write-up and research takes time. Additionally, if you have any questions I’m happy to answer them.</p>
<p>Academic databases:</p>
<ul>
<li><a href="https://ieeexplore.ieee.org/Xplore/home.jsp" rel="noopener nofollow ugc">IEEE Xplore</a></li>
<li><a href="https://dl.acm.org/" rel="noopener nofollow ugc">ACM Digital Library</a></li>
<li><a href="https://www.sciencedirect.com/" rel="noopener nofollow ugc">Science Direct</a></li>
<li><a href="https://arxiv.org/" rel="noopener nofollow ugc">Arxiv</a></li>
</ul>
<h2>References</h2>
<p>Dongdong She, Kexin Pei, Dave Epstein, Junfeng Yang, Baishakhi Ray, and Suman Jana. <em>NEUZZ: Efficient Fuzzing with Neural Program Smoothing.</em> <a href="https://arxiv.org/abs/1807.05620" rel="noopener nofollow ugc">https://arxiv.org/abs/1807.05620</a></p>
          <p><a href="https://0x00sec.org/t/machine-learning-assisted-fuzzer-finds-31-new-vulnerabilities/24499/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/machine-learning-assisted-fuzzer-finds-31-new-vulnerabilities/24499/1</link>
        <pubDate>Thu, 07 Jan 2021 19:37:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24499-1</guid>
        <source url="https://0x00sec.org/t/machine-learning-assisted-fuzzer-finds-31-new-vulnerabilities/24499.rss">Machine learning-assisted Fuzzer finds 31 new vulnerabilities</source>
      </item>
  </channel>
</rss>
