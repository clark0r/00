<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Writeup: 0x00sec CTF - Exercise #1</title>
    <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412</link>
    <description>![header-ctf-0x00sec|690x269](upload://wOiVhJMMswDlMlkqZB8w6ZTLfjQ.png) 

# Writeup CTF 0x00sec Web -  Exercise #1

I was excited as I read that there will be bi-monthly CTF exercises on [0x00sec](https://0x00sec.org/t/introducing-bi-monthly-0x00sec-ctf-exercises/19044) as I wanted to do some CTFs for a long time now.

## Challenge

The challenge or exercise was in the *web* category. Which means that we have to take a look at web-based attacks like SQL Injections, Cross-Site Scripting and others. It is always good to have the [OWASP Top 10](https://owasp.org/www-project-top-ten/) in mind.

The challenges description was:

&gt; Get the flag! There are multiple ways to achieve your goal :)

And an URL was provided.

### Initial Recon

If we open up the URL in a browser, we see a simple login page, where you can enter a username and a password.

![exercise-1|690x382](upload://3A0IERLP7vo5aDxyy78HQPFduzL.png) 

If you see a login field in a CTF, SQL injections may be the first thing that comes to your mind. But it is always good to do some basic recon first.

Because it is just a simple page with a login field and no links to subpages, we are quite limited with the visual recon. But what we can do, is to view the page source.
This is something that you should always do because you can find quite interesting information in the page source like:

- Javascript and external javascript files
- Hidden inputs
- Leftover comments

In this case, we have luck and there is an interesting comment in there:

```html
  &lt;!-- TODO: --&gt;
  &lt;!-- * Remove the git directory after publishing --&gt;
```

That sounds indeed good. Public accessible `.git/` directories are a not that uncommon low-hanging-fruit in bug bounties.

## Git

First, you should learn what `git` is and what it is used for. From the [offical page](https://git-scm.com/):

&gt; Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.

Git is a commonly used version control system for software projects of all kind. It keeps track of your source files and changes that are made to them. If you never used git, you should start by playing around with it, learn some basic commands like `git add`, `git commit` and understand how it works.

Public accessible git repositories are very sweet because they very likely contain sensitive information because people often commit security-related keys, passwords and other stuff to it. So our goal is to get this information.

If you now played a bit with git or already familiar with it, you know that git creates a hidden `.git` folder in your project, where you run `git init`. In this folder, git keeps track of all the changes and commits you make.

So let&#39;s try to access the `.git/` folder from the browser, to see if it&#39;s really there.
But, we get a Forbidden message if we try to access it.

![forbidden|588x264](upload://lcZ5HLxGM50kTa15efdE5A1qT91.png) 

But this is only for the directory listing. If we try to access a specific file, like `config` we have access.

![git-config|508x274](upload://fHQSbv3EzFWh8W91ro0bl3wi5UA.png) 


### Grab the repository

Now there are several ways to get the repository. One easy way is to use `wget` and recursively download the repository.

```bash
wget -r --no-parent --connect-timeout=5 http://public-git.com/.git/
```

However, in our case, this will not work, due to the Access Forbidden error code on the `.git/` index. If you want to learn more about public git folders and how to download them checkout this [article](https://en.internetwache.org/dont-publicly-expose-git-or-how-we-downloaded-your-websites-sourcecode-an-analysis-of-alexas-1m-28-07-2015/).

Another way is to use tools like [GitTools](https://github.com/internetwache/GitTools).
With `bash ./gitdumper.sh https://exercise-1.0x00sec.dev/.git/ output`
I downloaded the git repository.

![git-dumper|690x473](upload://ry5oIZLDbBDHctyODqE79WGSb8G.png) 

Now we can use the terminal git or any gui git client to check out the commits and the source.

With `git status` we see that there are two staged files to be deleted `start.sh` and `index.php`.

The first one is a start script for docker and the latter one the PHP source code of the page.

## The login

Let&#39;s now take a deeper look into the login action in the PHP source code (index.php).

The login action looks like this:

```php
    if (isset($_POST[&quot;username&quot;]) &amp;&amp; isset($_POST[&quot;password&quot;])) {
        if ($_POST[&quot;username&quot;] == &quot;admin&quot; &amp;&amp; hash(&#39;sha256&#39;, $_POST[&quot;password&quot;]) == &quot;e83176eaefcc1ae8c4a23dbc73ebcf122f26cfb9ba5c7cf4763e96c1c38a6c6c&quot;) {
            echo &#39;&lt;h4&gt; &#39;.xor_this(base64_decode(&quot;Cl9SEwgSQRVFUA1dAl1dVFkaQF0CWAQUTQ==&quot;), $_POST[&quot;password&quot;]).&#39; &lt;/h4&gt;&#39;;
        } else {
            echo &#39;&lt;h4 class=&quot;error&quot;&gt; Incorrect Password :) &lt;/h4&gt;&#39;;
        }
    }
```

So if our username is `admin` and our password matched the sha256 hash, a base64 string will be passed into `xor_this(string, key)`.

As `sha246` is not secure we can easily crack it. Or even better, try to look it up. Maybe someone already cracked it.

So I pasted the hash into [CrackStation.net](https://crackstation.net/) and the hash was already cracked and I got the password.

After the login, the flag was printed out.

## Conclusion

This CTF exercise was quite fun and also quite a real-world scenario. Because public git directories are real and sadly more common then you might think.</description>
    
    <lastBuildDate>Mon, 30 Mar 2020 19:41:32 +0000</lastBuildDate>
    <category>CTF</category>
    <atom:link href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Writeup: 0x00sec CTF - Exercise #1</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412/4</link>
        <pubDate>Tue, 23 Jun 2020 03:05:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19412-4</guid>
        <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412.rss">Writeup: 0x00sec CTF - Exercise #1</source>
      </item>
      <item>
        <title>Writeup: 0x00sec CTF - Exercise #1</title>
        <dc:creator><![CDATA[ueembio_agent]]></dc:creator>
        <description><![CDATA[
            <p>I am new in this domain. And thatâ€™s very helpful. Thnx mate</p>
          <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412/3</link>
        <pubDate>Mon, 30 Mar 2020 19:41:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19412-3</guid>
        <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412.rss">Writeup: 0x00sec CTF - Exercise #1</source>
      </item>
      <item>
        <title>Writeup: 0x00sec CTF - Exercise #1</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Absolutely awesome writeup mate!</p>
<p>Thank you so much for releasing the writeup so quick <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> Really well written!</p>
          <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412/2</link>
        <pubDate>Sat, 22 Feb 2020 14:53:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19412-2</guid>
        <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412.rss">Writeup: 0x00sec CTF - Exercise #1</source>
      </item>
      <item>
        <title>Writeup: 0x00sec CTF - Exercise #1</title>
        <dc:creator><![CDATA[H45uK1mchi]]></dc:creator>
        <description><![CDATA[
            <p><span alt="header-ctf-0x00sec" data-base62-sha1="wOiVhJMMswDlMlkqZB8w6ZTLfjQ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<h1>Writeup CTF 0x00sec Web -  Exercise <span class="hashtag">#1</span>
</h1>
<p>I was excited as I read that there will be bi-monthly CTF exercises on <a href="https://0x00sec.org/t/introducing-bi-monthly-0x00sec-ctf-exercises/19044">0x00sec</a> as I wanted to do some CTFs for a long time now.</p>
<h2>Challenge</h2>
<p>The challenge or exercise was in the <em>web</em> category. Which means that we have to take a look at web-based attacks like SQL Injections, Cross-Site Scripting and others. It is always good to have the <a href="https://owasp.org/www-project-top-ten/" rel="nofollow noopener">OWASP Top 10</a> in mind.</p>
<p>The challenges description was:</p>
<blockquote>
<p>Get the flag! There are multiple ways to achieve your goal <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
</blockquote>
<p>And an URL was provided.</p>
<h3>Initial Recon</h3>
<p>If we open up the URL in a browser, we see a simple login page, where you can enter a username and a password.</p>
<p><span alt="exercise-1" data-base62-sha1="3A0IERLP7vo5aDxyy78HQPFduzL" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>If you see a login field in a CTF, SQL injections may be the first thing that comes to your mind. But it is always good to do some basic recon first.</p>
<p>Because it is just a simple page with a login field and no links to subpages, we are quite limited with the visual recon. But what we can do, is to view the page source.<br>
This is something that you should always do because you can find quite interesting information in the page source like:</p>
<ul>
<li>Javascript and external javascript files</li>
<li>Hidden inputs</li>
<li>Leftover comments</li>
</ul>
<p>In this case, we have luck and there is an interesting comment in there:</p>
<pre><code class="lang-auto">  &lt;!-- TODO: --&gt;
  &lt;!-- * Remove the git directory after publishing --&gt;
</code></pre>
<p>That sounds indeed good. Public accessible <code>.git/</code> directories are a not that uncommon low-hanging-fruit in bug bounties.</p>
<h2>Git</h2>
<p>First, you should learn what <code>git</code> is and what it is used for. From the <a href="https://git-scm.com/" rel="nofollow noopener">offical page</a>:</p>
<blockquote>
<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p>
</blockquote>
<p>Git is a commonly used version control system for software projects of all kind. It keeps track of your source files and changes that are made to them. If you never used git, you should start by playing around with it, learn some basic commands like <code>git add</code>, <code>git commit</code> and understand how it works.</p>
<p>Public accessible git repositories are very sweet because they very likely contain sensitive information because people often commit security-related keys, passwords and other stuff to it. So our goal is to get this information.</p>
<p>If you now played a bit with git or already familiar with it, you know that git creates a hidden <code>.git</code> folder in your project, where you run <code>git init</code>. In this folder, git keeps track of all the changes and commits you make.</p>
<p>So letâ€™s try to access the <code>.git/</code> folder from the browser, to see if itâ€™s really there.<br>
But, we get a Forbidden message if we try to access it.</p>
<p><span alt="forbidden" data-base62-sha1="lcZ5HLxGM50kTa15efdE5A1qT91" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>But this is only for the directory listing. If we try to access a specific file, like <code>config</code> we have access.</p>
<p><span alt="git-config" data-base62-sha1="fHQSbv3EzFWh8W91ro0bl3wi5UA" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<h3>Grab the repository</h3>
<p>Now there are several ways to get the repository. One easy way is to use <code>wget</code> and recursively download the repository.</p>
<pre><code class="lang-bash">wget -r --no-parent --connect-timeout=5 http://public-git.com/.git/
</code></pre>
<p>However, in our case, this will not work, due to the Access Forbidden error code on the <code>.git/</code> index. If you want to learn more about public git folders and how to download them checkout this <a href="https://en.internetwache.org/dont-publicly-expose-git-or-how-we-downloaded-your-websites-sourcecode-an-analysis-of-alexas-1m-28-07-2015/" rel="nofollow noopener">article</a>.</p>
<p>Another way is to use tools like <a href="https://github.com/internetwache/GitTools" rel="nofollow noopener">GitTools</a>.<br>
With <code>bash ./gitdumper.sh https://exercise-1.0x00sec.dev/.git/ output</code><br>
I downloaded the git repository.</p>
<p><span alt="git-dumper" data-base62-sha1="ry5oIZLDbBDHctyODqE79WGSb8G" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Now we can use the terminal git or any gui git client to check out the commits and the source.</p>
<p>With <code>git status</code> we see that there are two staged files to be deleted <code>start.sh</code> and <code>index.php</code>.</p>
<p>The first one is a start script for docker and the latter one the PHP source code of the page.</p>
<h2>The login</h2>
<p>Letâ€™s now take a deeper look into the login action in the PHP source code (index.php).</p>
<p>The login action looks like this:</p>
<pre><code class="lang-php">    if (isset($_POST["username"]) &amp;&amp; isset($_POST["password"])) {
        if ($_POST["username"] == "admin" &amp;&amp; hash('sha256', $_POST["password"]) == "e83176eaefcc1ae8c4a23dbc73ebcf122f26cfb9ba5c7cf4763e96c1c38a6c6c") {
            echo '&lt;h4&gt; '.xor_this(base64_decode("Cl9SEwgSQRVFUA1dAl1dVFkaQF0CWAQUTQ=="), $_POST["password"]).' &lt;/h4&gt;';
        } else {
            echo '&lt;h4 class="error"&gt; Incorrect Password :) &lt;/h4&gt;';
        }
    }
</code></pre>
<p>So if our username is <code>admin</code> and our password matched the sha256 hash, a base64 string will be passed into <code>xor_this(string, key)</code>.</p>
<p>As <code>sha246</code> is not secure we can easily crack it. Or even better, try to look it up. Maybe someone already cracked it.</p>
<p>So I pasted the hash into <a href="https://crackstation.net/" rel="nofollow noopener">CrackStation.net</a> and the hash was already cracked and I got the password.</p>
<p>After the login, the flag was printed out.</p>
<h2>Conclusion</h2>
<p>This CTF exercise was quite fun and also quite a real-world scenario. Because public git directories are real and sadly more common then you might think.</p>
          <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412/1</link>
        <pubDate>Sat, 22 Feb 2020 11:05:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19412-1</guid>
        <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-1/19412.rss">Writeup: 0x00sec CTF - Exercise #1</source>
      </item>
  </channel>
</rss>
