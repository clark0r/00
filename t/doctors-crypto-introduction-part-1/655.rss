<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Doctor&#39;s Crypto - Introduction [Part 1]</title>
    <link>https://0x00sec.org/t/doctors-crypto-introduction-part-1/655</link>
    <description>Hey mates,

long long time ago I made my last post, but now I&#39;m back with a simple series about a little self-made Crypto (Nah, it&#39;s more a key generation), which uses a (At least I think it is :grin:) new idea for key crafting. Either you&#39;re now thinking &quot;Oh, cool! Let&#39;s see what his idea is&quot; or you&#39;re thinking &quot;Self-made Crypto?!? Dude, WTF&#39;s wrong with you?&quot;, I hope anyway you&#39;re liking this article, even if it&#39;s just entertaining ;).

---
## Am I an Idiot?
That&#39;s a great question! Nope, I think I&#39;m not (*Okay, maybe... But that&#39;s not the point here* ;)). Of course I don&#39;t want to create an EES (Extreme Encryption Standard), but just want to try out my idea, which I had already about half a year ago.

This series can be seen as a little hobby project, which I want to share with you, and not as a serious attempt to create a good Crypto. So with this in our mind, let&#39;s start!

---
## Introduction to my Idea
Maybe some of you know one problem of synchronous ciphers: You want to have long keys for a good encryption, but the key has to be sent to the decrypter, so it shouldn&#39;t be too long. To solve this problem I stumbled upon a way of generating never ending keys out of a normal number.

Yes, it isn&#39;t magic. It isn&#39;t even pretty clever. I just thought of using a number to get it&#39;s square root, because this is as long as you can calculate it. The first thing we have to check of course, if we want to know whether this way looks promising, is to have a look at the frequencies of the numbers 0-9 in different square roots.

With this in mind I wrote a simple program in C# to test for different frequencies in numbers. The big problem was that the double type in C# for representing decimals can only have about 17 digits after the floating point; but my original idea was to use up to 10000 digits for the key!

Ok, so I decided to just test these 17 digits for their frequencies first and then maybe think of an idea to expand it.

---
## My Program
This tool is a simple Windows Forms Application, which takes a starting number and then calculates the square root of it. After it has done this it increases the number and calculates the next square root. The frequencies of the digits are shown with the number and percentage of their occurence.

You can get the project [here](https://mega.nz/#!G8xXTDbQ!Uixb5i1P8aivotBUFViNTyL1xH-MM-Y3r8rIvjnxnLk). *Little Note: I&#39;m very sorry for the poor programming style. I can&#39;t concentrate when it&#39;s that hot ;)*

If you&#39;re only interested in the executable you can get it [here](https://mega.nz/#!mswlFJoS!KWFRboqYJmt2fhO_1zZF7fE4-lyVbpK8tNdnGKjErb8)

If you run it you should see something like this:
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/9c5cc4fc6617096e1aad6837894938b23c09372e.PNG&quot; width=&quot;286&quot; height=&quot;265&quot;&gt;
You can start with a different number, but you&#39;ll get the pretty same results. At this point I add an important fact: My program ignores any digits in front of the floating point! This is important to make sure that not everytime a 1 is added to the frequency just because the program is currently at the 1 billions. I tried that before and it changed the frequencies a lot!

Anyway, I was very surprised, when I saw this results! It&#39;s very promising that every digit, except the Zero, has the pretty same frequency as every other digit. Another interesting thing is that this behaviour begins pretty fast.
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/6d69aa0dcf3ce5f984ebb4039b9807fc585cb85e.PNG&quot; width=&quot;285&quot; height=&quot;257&quot;&gt;
Above you can see what happens if we stop the procedure at the very beginning. The frequencies aren&#39;t that different!

---
## Future Improvements
Here you come into play! I thought it could be interesting, if you guys start to share your thoughts on this project and how it could get better.

### My thoughts:
**How can we get longer keys (Currently only 17 digits can be used)**
I would just use these 17 digits of the number and then increase it by one, to use the next square root and so on, till you got the key length you need. Here comes a little problem:

**The frequencies aren&#39;t perfectly spread**
When you just need a small key, that&#39;s right. This key generation can&#39;t be used for small texts, but I think when you need more than 1.000.000 digits it&#39;s good enough.

**Improve probability spreading**
This part is interesting. I thought of maybe putting always two digits into a group to mask the frequencies better, e.g. if you have this: 067453 you put it into this: 06 74 53. This should help a bit. (Not tested yet, though!)

**What encryption can be used along this key generation?**
Yep, here ends my knowledge :grin:. Maybe some of you have an idea which encryption technique would get along with a key like this one?

**And it has to get practiced**
As you see I didn&#39;t test much about the frequencies in different states. I think it depends heavily on the encryption technique whether this key generation could be valuable or not. As I said before, I don&#39;t have the knowledge/experience to select a good technique, so here it&#39;s up to you ;).

---
## Conclusion
This key generation could be usefull for generating large keys out of just a simple number or word (Words can be converted into numbers). The big big advantage would be that you would have an infinite amount of numbers, so you got as much keys as you want! These can be used to generate OTPs (One time pads; yes, this aren&#39;t real OTPs, but they&#39;re  pretty close ;)), which are the optimal way of encrypting.

I hope maybe some of you got interested in this project as well and are keen on making cryptography great again! (Sorry, forgive me that bad joke :grin:)

|-TheDoctor-|</description>
    
    <lastBuildDate>Mon, 27 Jun 2016 08:11:10 +0000</lastBuildDate>
    <category>Cryptology</category>
    <atom:link href="https://0x00sec.org/t/doctors-crypto-introduction-part-1/655.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Doctor&#39;s Crypto - Introduction [Part 1]</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/doctors-crypto-introduction-part-1/655/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doctors-crypto-introduction-part-1/655/7</link>
        <pubDate>Sun, 21 Jan 2018 00:41:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-655-7</guid>
        <source url="https://0x00sec.org/t/doctors-crypto-introduction-part-1/655.rss">Doctor&#39;s Crypto - Introduction [Part 1]</source>
      </item>
      <item>
        <title>Doctor&#39;s Crypto - Introduction [Part 1]</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Reading the comments there appears to be some doubts about the method, although I am a fan of the idea of using square roots to generate numbers. Reminds me how people use checksums/hashes from passwords to generate more sophisticated passwords.</p>
<p>I say you should keep trying on this, people may disagree in some areas, but you should still pursue your ideas.</p>
<p>Good luck and nice work <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/doctors-crypto-introduction-part-1/655/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doctors-crypto-introduction-part-1/655/6</link>
        <pubDate>Mon, 27 Jun 2016 08:11:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-655-6</guid>
        <source url="https://0x00sec.org/t/doctors-crypto-introduction-part-1/655.rss">Doctor&#39;s Crypto - Introduction [Part 1]</source>
      </item>
      <item>
        <title>Doctor&#39;s Crypto - Introduction [Part 1]</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Nice answer <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a>! Here are my thoughts on your’s <img src="https://0x00sec.org/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:">.</p>
<ol>
<li>
<p>Yes, I searched a bit if there’s a good way of using some algorithm to calculate the square root digit by digit. The <code>sqrt</code> function has many downsides, but I didn’t find a good way of doing it yourself. Another point was, that I was sure the frequencies wouldn’t be that widely spread and that my idea will already be killed at the very beginning, so I wanted to try it out roughly first.</p>
</li>
<li>
<p>Yep, I wanted to use the <code>decimal</code> type in C# first, which would have been worth these 30 digits, but <code>sqrt</code> doesn’t come along with it ;). The main problem stays the way of calculating the square root. Maybe some math kings here know a good way?</p>
</li>
<li>
<p>I already thought about binary digits, but I didn’t knew a good way of converting the decimals to binaries without losing the random effect. With binary digits it would be easier to find a suitable encryption method.</p>
</li>
<li>
<p>Again you’re right. As I said above it was just a rough test for showing whether this technique could be valuable or not. If this test had already failed, the whole idea would be rubbish <img src="https://0x00sec.org/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:"></p>
</li>
</ol>
          <p><a href="https://0x00sec.org/t/doctors-crypto-introduction-part-1/655/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doctors-crypto-introduction-part-1/655/5</link>
        <pubDate>Sat, 25 Jun 2016 09:44:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-655-5</guid>
        <source url="https://0x00sec.org/t/doctors-crypto-introduction-part-1/655.rss">Doctor&#39;s Crypto - Introduction [Part 1]</source>
      </item>
      <item>
        <title>Doctor&#39;s Crypto - Introduction [Part 1]</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Hi <a class="mention" href="https://0x00sec.org/u/thedoctor">@TheDoctor</a>,</p>
<p>Not being a cryptography expert myself, these are my first thoughts:</p>
<ul>
<li>The <code>sqrt</code> operation is quite costly. Normally you have to use an iterative/approximation process to calculate it. To my understanding, the key is not generated and then used, but calculated on-the fly as more digits are needed, so, at first glance it will have an impact on performance, and may be difficult to use it, for instance, on comms.</li>
<li>As your seed gets bigger you are probably losing precision on the fractional part of your <a href="https://en.wikipedia.org/wiki/Floating_point" rel="nofollow noopener">significant</a> . That means that you probably need to write special code to do the calculations. You will have to anyway because the native floating point formats supported by the machine (right now) cannot go over those 30-34 digits (check the table in the wiki page)</li>
<li>Instead of using decimal digits, I would use the binary bits. Using decimal digits you are constraint to an alphabet of 10 symbols per byte against the 255 possible. As I said, I’m not an expert on cryptography  but intuitively seems that a brute force attack against a piece of the message may be feasible and not require much effort. Not sure if you understand what I mean… Not sure either if it is possible.</li>
<li>I think that an histogram is not enough to prove you are producing a random uniform sequence. Probably you need a more strong statistical method ( <a href="https://en.wikipedia.org/wiki/Diehard_tests" rel="nofollow noopener">https://en.wikipedia.org/wiki/Diehard_tests</a> )</li>
</ul>
<p>Hope this helps</p>
          <p><a href="https://0x00sec.org/t/doctors-crypto-introduction-part-1/655/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doctors-crypto-introduction-part-1/655/4</link>
        <pubDate>Sat, 25 Jun 2016 09:02:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-655-4</guid>
        <source url="https://0x00sec.org/t/doctors-crypto-introduction-part-1/655.rss">Doctor&#39;s Crypto - Introduction [Part 1]</source>
      </item>
      <item>
        <title>Doctor&#39;s Crypto - Introduction [Part 1]</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>I’m very sorry, if I couldn’t explain it good enough in english <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">. It’s not my native language (<em>I think this is pretty obvious, when you read my texts <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></em>), so especially speaking about maths in english is very hard. Here’s another try to explain my idea:</p>
<p>The plan looks like this: You want to send a secret message to a friend. Roughly said, the longer your key is, the better the protection (In case of even encryptions). But if you just take a key as long as your whole plain text, you don’t solve this problem, because this key has to be sent to your friend too.</p>
<p>My solution for this is to take one simple key, e.g. 123456 (Yes, pretty secure ;)). This key can be used to generate an OTP (See description above; it’s not a real OTP), with the technique given in the post. You take the first 16-17 digits from the square root of this number and then increase it to get the next square root, e.g. 123457, and so on.</p>
<p>These square roots get every time put together to a long string containing all digits. This is the key, which you can make as long as you want; and you just need ONE number to generate this! Another advantage is that we got an infinite amount of numbers, which could be used as key, so brute-forcing it takes <em>theoretically</em> an infinte amount of time.</p>
<p>The post above was to explain the theory and to show that the frequencies of the digits in different square roots are pretty equal, except Zero.</p>
<p>I hope you got at least my idea now <img src="https://0x00sec.org/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:"></p>
          <p><a href="https://0x00sec.org/t/doctors-crypto-introduction-part-1/655/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doctors-crypto-introduction-part-1/655/3</link>
        <pubDate>Sat, 25 Jun 2016 05:55:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-655-3</guid>
        <source url="https://0x00sec.org/t/doctors-crypto-introduction-part-1/655.rss">Doctor&#39;s Crypto - Introduction [Part 1]</source>
      </item>
      <item>
        <title>Doctor&#39;s Crypto - Introduction [Part 1]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>I don’t get it. Last I checked, there has to be a less ambiguous mathematical relationship between the keys used. What’s the point of analyzing digit frequency if you keep mutating the number? What are you even looking for?</p>
<p>And, floats aren’t accurate in a machine, so what’re you doing to accommodate for that?</p>
          <p><a href="https://0x00sec.org/t/doctors-crypto-introduction-part-1/655/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doctors-crypto-introduction-part-1/655/2</link>
        <pubDate>Fri, 24 Jun 2016 18:13:12 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-655-2</guid>
        <source url="https://0x00sec.org/t/doctors-crypto-introduction-part-1/655.rss">Doctor&#39;s Crypto - Introduction [Part 1]</source>
      </item>
      <item>
        <title>Doctor&#39;s Crypto - Introduction [Part 1]</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Hey mates,</p>
<p>long long time ago I made my last post, but now I’m back with a simple series about a little self-made Crypto (Nah, it’s more a key generation), which uses a (At least I think it is <img src="/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:">) new idea for key crafting. Either you’re now thinking “Oh, cool! Let’s see what his idea is” or you’re thinking “Self-made Crypto?!? Dude, WTF’s wrong with you?”, I hope anyway you’re liking this article, even if it’s just entertaining ;).</p>
<hr>
<h2>Am I an Idiot?</h2>
<p>That’s a great question! Nope, I think I’m not (<em>Okay, maybe… But that’s not the point here</em> ;)). Of course I don’t want to create an EES (Extreme Encryption Standard), but just want to try out my idea, which I had already about half a year ago.</p>
<p>This series can be seen as a little hobby project, which I want to share with you, and not as a serious attempt to create a good Crypto. So with this in our mind, let’s start!</p>
<hr>
<h2>Introduction to my Idea</h2>
<p>Maybe some of you know one problem of synchronous ciphers: You want to have long keys for a good encryption, but the key has to be sent to the decrypter, so it shouldn’t be too long. To solve this problem I stumbled upon a way of generating never ending keys out of a normal number.</p>
<p>Yes, it isn’t magic. It isn’t even pretty clever. I just thought of using a number to get it’s square root, because this is as long as you can calculate it. The first thing we have to check of course, if we want to know whether this way looks promising, is to have a look at the frequencies of the numbers 0-9 in different square roots.</p>
<p>With this in mind I wrote a simple program in C# to test for different frequencies in numbers. The big problem was that the double type in C# for representing decimals can only have about 17 digits after the floating point; but my original idea was to use up to 10000 digits for the key!</p>
<p>Ok, so I decided to just test these 17 digits for their frequencies first and then maybe think of an idea to expand it.</p>
<hr>
<h2>My Program</h2>
<p>This tool is a simple Windows Forms Application, which takes a starting number and then calculates the square root of it. After it has done this it increases the number and calculates the next square root. The frequencies of the digits are shown with the number and percentage of their occurence.</p>
<p>You can get the project <a href="https://mega.nz/#!G8xXTDbQ!Uixb5i1P8aivotBUFViNTyL1xH-MM-Y3r8rIvjnxnLk" rel="noopener nofollow ugc">here</a>. <em>Little Note: I’m very sorry for the poor programming style. I can’t concentrate when it’s that hot <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></em></p>
<p>If you’re only interested in the executable you can get it <a href="https://mega.nz/#!mswlFJoS!KWFRboqYJmt2fhO_1zZF7fE4-lyVbpK8tNdnGKjErb8" rel="noopener nofollow ugc">here</a></p>
<p>If you run it you should see something like this:<br>
<img src="//0x00sec.s3.amazonaws.com/original/1X/9c5cc4fc6617096e1aad6837894938b23c09372e.PNG" width="286" height="265"><br>
You can start with a different number, but you’ll get the pretty same results. At this point I add an important fact: My program ignores any digits in front of the floating point! This is important to make sure that not everytime a 1 is added to the frequency just because the program is currently at the 1 billions. I tried that before and it changed the frequencies a lot!</p>
<p>Anyway, I was very surprised, when I saw this results! It’s very promising that every digit, except the Zero, has the pretty same frequency as every other digit. Another interesting thing is that this behaviour begins pretty fast.<br>
<img src="//0x00sec.s3.amazonaws.com/original/1X/6d69aa0dcf3ce5f984ebb4039b9807fc585cb85e.PNG" width="285" height="257"><br>
Above you can see what happens if we stop the procedure at the very beginning. The frequencies aren’t that different!</p>
<hr>
<h2>Future Improvements</h2>
<p>Here you come into play! I thought it could be interesting, if you guys start to share your thoughts on this project and how it could get better.</p>
<h3>My thoughts:</h3>
<p><strong>How can we get longer keys (Currently only 17 digits can be used)</strong><br>
I would just use these 17 digits of the number and then increase it by one, to use the next square root and so on, till you got the key length you need. Here comes a little problem:</p>
<p><strong>The frequencies aren’t perfectly spread</strong><br>
When you just need a small key, that’s right. This key generation can’t be used for small texts, but I think when you need more than 1.000.000 digits it’s good enough.</p>
<p><strong>Improve probability spreading</strong><br>
This part is interesting. I thought of maybe putting always two digits into a group to mask the frequencies better, e.g. if you have this: 067453 you put it into this: 06 74 53. This should help a bit. (Not tested yet, though!)</p>
<p><strong>What encryption can be used along this key generation?</strong><br>
Yep, here ends my knowledge <img src="/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:">. Maybe some of you have an idea which encryption technique would get along with a key like this one?</p>
<p><strong>And it has to get practiced</strong><br>
As you see I didn’t test much about the frequencies in different states. I think it depends heavily on the encryption technique whether this key generation could be valuable or not. As I said before, I don’t have the knowledge/experience to select a good technique, so here it’s up to you ;).</p>
<hr>
<h2>Conclusion</h2>
<p>This key generation could be usefull for generating large keys out of just a simple number or word (Words can be converted into numbers). The big big advantage would be that you would have an infinite amount of numbers, so you got as much keys as you want! These can be used to generate OTPs (One time pads; yes, this aren’t real OTPs, but they’re  pretty close ;)), which are the optimal way of encrypting.</p>
<p>I hope maybe some of you got interested in this project as well and are keen on making cryptography great again! (Sorry, forgive me that bad joke <img src="/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:">)</p>
<p>|-TheDoctor-|</p>
          <p><a href="https://0x00sec.org/t/doctors-crypto-introduction-part-1/655/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doctors-crypto-introduction-part-1/655/1</link>
        <pubDate>Fri, 24 Jun 2016 18:00:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-655-1</guid>
        <source url="https://0x00sec.org/t/doctors-crypto-introduction-part-1/655.rss">Doctor&#39;s Crypto - Introduction [Part 1]</source>
      </item>
  </channel>
</rss>
