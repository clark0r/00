<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Graph Algorithms (Part 2.0): The Bellman-Ford Algorithm [Concept]</title>
    <link>https://0x00sec.org/t/graph-algorithms-part-2-0-the-bellman-ford-algorithm-concept/557</link>
    <description>Hello 0x00sec people! It&#39;s @oaktree once again coming at you with another tutorial. This time, it&#39;s about the [Bellman-Ford Algorithm](https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm).

This algorithm is very similar to Dijkstra&#39;s Algorithm from [last time](https://0x00sec.org/t/graph-algorithms-part-1-1-dijkstras-shortest-path-code-v1/482/1), yet it diverges in that it is designed to handle _negative edge weights_, which are &quot;negative distances,&quot; in a way.

The use of the algorithm is two-fold: determine the shortest path between a starting node and all other nodes in a graph; and, determine if there are any _negative cycles_. A __negative cycle__ is when traversing the same path again makes the distance smaller. This would continue and approach negative infinity if we kept traversing the same _negative cycle_.

---
# Applications 
I&#39;m paraphrasing [Wikipedia](https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm) here. This algorithm is used in the [Routing Information Protocol](https://en.wikipedia.org/wiki/Routing_Information_Protocol) (*cough* @airth). This allows each node in a network to know how far every other node is. Each node calculates the distance between it and all other reachable nodes, and then sends that information to _all_ the other nodes, so that all the nodes can update their information if/when a shorter path is discovered. 

---
#Procedure

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/4d78788f9adcdf7bd93d67c27660b7b6d122e1b3.png&quot; width=&quot;387&quot; height=&quot;385&quot;&gt;
_Image from [this guy&#39;s](https://www.youtube.com/watch?v=obWXjtg0L64) wonderful Youtube video on the subject. You should all go watch that video and give him a like._

Alright: Here&#39;s an example of a graph with negative edge weights. Our algorithm is going to go through and find the shortest distance to each node from a starting node. For this example, our starting node will be `S`. Once it does, it&#39;ll go over it one more time. Any distances that get smaller will do so because of a negatively-weighted edge. When this happens, we have detected a _negative cycle_.

---
# Time Complexity
To ensure that we have found the shortest path, we&#39;ll iterate through the graph `|V| - 1` times, where `V` is the number of vertices. Then, we&#39;ll iterate through one last time to find the _negative cycles_.

All in all, the __time complexity__ boils down to `O(|V|*|E|)`, where `E` is the number of edges.

---
# Pseudocode

    bellman(start, graph, distances):
        for_each vertex in graph:
            distances[vertex] = infinity
        
        distances[start] = 0

        previous = Array of graph.vertex_count elements

        // find the minimum distances
        (graph.vertex_count - 1) times:
            for_each node in graph:
                for_each neighbor of node:
                    if distances[neighbor] &gt;  distances[node] + edge(node,neighbor):
                        distances[neighbor] = distances[node] + edge(node,neighbor)
                        previous[neighbor] = node
                    

        // go through one last time to check for negative cycles
        for_each node in graph:
            for_each neighbor of node:
                if distances[neighbor] &gt;  distances[node] + edge(node,neighbor):
                     print &quot;negative cycle found between &quot; + node + &quot; and &quot; + neighbor + &quot;\n&quot;

As you can see, the first thing we do is set each distance to `infinity`. Then, we make sure that `distances[start] = 0` because the distance between a node and itself should ideally be `0`.

I also made an array called `previous` just to keep track of the path -- not that it matters all that much for finding distances, though.

The next thing to do is iterate through the graph `|V| - 1` times. We go through each node&#39;s neighbors and see if we can find a better distance. If we do, we also update the `previous` element corresponding to the `neighbor`.

After all of those `|V| - 1` times (it _can_ be optimized, but I wouldn&#39;t want to cause confusion), we loop through once more to see if there are any negative cycles. `|V| - 1` times is enough iterations to determine the shortest distance, so if it&#39;s shorter now it _must_ be due to a negative edge weight, a _negative cycle_.

---
# Conclusion
That&#39;s about all the algorithm does. In _Part 2.1_ (I really like to stick with my conventions), we&#39;ll write out some C++ code to perform the algorithm.

Graph ya&#39; later,
@oaktree 

P.S. If you have Sublime Text 2/3, get the DarkKorokai color scheme.</description>
    
    <lastBuildDate>Sun, 05 Jun 2016 20:30:31 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/graph-algorithms-part-2-0-the-bellman-ford-algorithm-concept/557.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Graph Algorithms (Part 2.0): The Bellman-Ford Algorithm [Concept]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/graph-algorithms-part-2-0-the-bellman-ford-algorithm-concept/557/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/graph-algorithms-part-2-0-the-bellman-ford-algorithm-concept/557/4</link>
        <pubDate>Sun, 21 Jan 2018 00:37:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-557-4</guid>
        <source url="https://0x00sec.org/t/graph-algorithms-part-2-0-the-bellman-ford-algorithm-concept/557.rss">Graph Algorithms (Part 2.0): The Bellman-Ford Algorithm [Concept]</source>
      </item>
      <item>
        <title>Graph Algorithms (Part 2.0): The Bellman-Ford Algorithm [Concept]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>You’re right. It is not the most efficient, because it takes a while for the results of the algorithm on one node to reach all the other ones. This can cause some messages to loop in the meantime.</p>
          <p><a href="https://0x00sec.org/t/graph-algorithms-part-2-0-the-bellman-ford-algorithm-concept/557/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/graph-algorithms-part-2-0-the-bellman-ford-algorithm-concept/557/3</link>
        <pubDate>Sun, 05 Jun 2016 20:30:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-557-3</guid>
        <source url="https://0x00sec.org/t/graph-algorithms-part-2-0-the-bellman-ford-algorithm-concept/557.rss">Graph Algorithms (Part 2.0): The Bellman-Ford Algorithm [Concept]</source>
      </item>
      <item>
        <title>Graph Algorithms (Part 2.0): The Bellman-Ford Algorithm [Concept]</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>Good old RIP, the root of every routing protocol. Since RIP is rarely used in a company’s network, I assume Bellman-Ford isn’t the most efficient algo to get the job done and that’s why RIP’s  implementation has been fading away I guess. Good stuff oakey!</p>
          <p><a href="https://0x00sec.org/t/graph-algorithms-part-2-0-the-bellman-ford-algorithm-concept/557/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/graph-algorithms-part-2-0-the-bellman-ford-algorithm-concept/557/2</link>
        <pubDate>Sun, 05 Jun 2016 19:46:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-557-2</guid>
        <source url="https://0x00sec.org/t/graph-algorithms-part-2-0-the-bellman-ford-algorithm-concept/557.rss">Graph Algorithms (Part 2.0): The Bellman-Ford Algorithm [Concept]</source>
      </item>
      <item>
        <title>Graph Algorithms (Part 2.0): The Bellman-Ford Algorithm [Concept]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Hello 0x00sec people! It’s <a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a> once again coming at you with another tutorial. This time, it’s about the <a href="https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm" rel="noopener nofollow ugc">Bellman-Ford Algorithm</a>.</p>
<p>This algorithm is very similar to Dijkstra’s Algorithm from <a href="https://0x00sec.org/t/graph-algorithms-part-1-1-dijkstras-shortest-path-code-v1/482/1">last time</a>, yet it diverges in that it is designed to handle <em>negative edge weights</em>, which are “negative distances,” in a way.</p>
<p>The use of the algorithm is two-fold: determine the shortest path between a starting node and all other nodes in a graph; and, determine if there are any <em>negative cycles</em>. A <strong>negative cycle</strong> is when traversing the same path again makes the distance smaller. This would continue and approach negative infinity if we kept traversing the same <em>negative cycle</em>.</p>
<hr>
<h1>Applications</h1>
<p>I’m paraphrasing <a href="https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm" rel="noopener nofollow ugc">Wikipedia</a> here. This algorithm is used in the <a href="https://en.wikipedia.org/wiki/Routing_Information_Protocol" rel="noopener nofollow ugc">Routing Information Protocol</a> (<em>cough</em> <span class="mention">@airth</span>). This allows each node in a network to know how far every other node is. Each node calculates the distance between it and all other reachable nodes, and then sends that information to <em>all</em> the other nodes, so that all the nodes can update their information if/when a shorter path is discovered.</p>
<hr>
<p><span class="hashtag">#Procedure</span></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/4d78788f9adcdf7bd93d67c27660b7b6d122e1b3.png" width="387" height="385"></p>
<p><em>Image from <a href="https://www.youtube.com/watch?v=obWXjtg0L64" rel="noopener nofollow ugc">this guy’s</a> wonderful Youtube video on the subject. You should all go watch that video and give him a like.</em></p>
<p>Alright: Here’s an example of a graph with negative edge weights. Our algorithm is going to go through and find the shortest distance to each node from a starting node. For this example, our starting node will be <code>S</code>. Once it does, it’ll go over it one more time. Any distances that get smaller will do so because of a negatively-weighted edge. When this happens, we have detected a <em>negative cycle</em>.</p>
<hr>
<h1>Time Complexity</h1>
<p>To ensure that we have found the shortest path, we’ll iterate through the graph <code>|V| - 1</code> times, where <code>V</code> is the number of vertices. Then, we’ll iterate through one last time to find the <em>negative cycles</em>.</p>
<p>All in all, the <strong>time complexity</strong> boils down to <code>O(|V|*|E|)</code>, where <code>E</code> is the number of edges.</p>
<hr>
<h1>Pseudocode</h1>
<pre><code>bellman(start, graph, distances):
    for_each vertex in graph:
        distances[vertex] = infinity
    
    distances[start] = 0

    previous = Array of graph.vertex_count elements

    // find the minimum distances
    (graph.vertex_count - 1) times:
        for_each node in graph:
            for_each neighbor of node:
                if distances[neighbor] &gt;  distances[node] + edge(node,neighbor):
                    distances[neighbor] = distances[node] + edge(node,neighbor)
                    previous[neighbor] = node
                

    // go through one last time to check for negative cycles
    for_each node in graph:
        for_each neighbor of node:
            if distances[neighbor] &gt;  distances[node] + edge(node,neighbor):
                 print "negative cycle found between " + node + " and " + neighbor + "\n"
</code></pre>
<p>As you can see, the first thing we do is set each distance to <code>infinity</code>. Then, we make sure that <code>distances[start] = 0</code> because the distance between a node and itself should ideally be <code>0</code>.</p>
<p>I also made an array called <code>previous</code> just to keep track of the path – not that it matters all that much for finding distances, though.</p>
<p>The next thing to do is iterate through the graph <code>|V| - 1</code> times. We go through each node’s neighbors and see if we can find a better distance. If we do, we also update the <code>previous</code> element corresponding to the <code>neighbor</code>.</p>
<p>After all of those <code>|V| - 1</code> times (it <em>can</em> be optimized, but I wouldn’t want to cause confusion), we loop through once more to see if there are any negative cycles. <code>|V| - 1</code> times is enough iterations to determine the shortest distance, so if it’s shorter now it <em>must</em> be due to a negative edge weight, a <em>negative cycle</em>.</p>
<hr>
<h1>Conclusion</h1>
<p>That’s about all the algorithm does. In <em>Part 2.1</em> (I really like to stick with my conventions), we’ll write out some C++ code to perform the algorithm.</p>
<p>Graph ya’ later,<br>
<a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a></p>
<p>P.S. If you have Sublime Text 2/3, get the DarkKorokai color scheme.</p>
          <p><a href="https://0x00sec.org/t/graph-algorithms-part-2-0-the-bellman-ford-algorithm-concept/557/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/graph-algorithms-part-2-0-the-bellman-ford-algorithm-concept/557/1</link>
        <pubDate>Sun, 05 Jun 2016 19:27:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-557-1</guid>
        <source url="https://0x00sec.org/t/graph-algorithms-part-2-0-the-bellman-ford-algorithm-concept/557.rss">Graph Algorithms (Part 2.0): The Bellman-Ford Algorithm [Concept]</source>
      </item>
  </channel>
</rss>
