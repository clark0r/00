<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C++] Dynamic Loading of Shared Objects at Runtime</title>
    <link>https://0x00sec.org/t/c-dynamic-loading-of-shared-objects-at-runtime/1498</link>
    <description># Dynamic Loading of Shared Objects at Runtime
I&#39;ve been doing a lot of tutorials about dynamic stuff. It&#39;s because we trees rustle whenever the wind blows.

Anyway, this post comes as an addition to @_py&#39;s [Linux Internals - The Art Of Symbol Resolution](https://0x00sec.org/t/linux-internals-the-art-of-symbol-resolution/1488).

This whole thing started when I decided that the bot in our channel (#0x00sec at irc.0x00sec.org), **pinetree**, needed to be able to dynamically load and unload event-driven modules at runtime.

Building a complex piece of software is very difficult. The typical, rudimentary way to do it is that every time you add a feature (or module) you recompile the entire program. This is just a waste of time. Instead, you can support __dynamic__ modules that get loaded at runtime. This way, if I need to make a new command for __pinetree__ or if I need to revise an existing one, I can simply unload the command from the running instance of __pinetree__, edit the code for the command, recompile just that code, and then reload it into the bot.

Like most things in C++, you need a few C functions to implement this behaviour.

The functions we&#39;ll be using today are:

* `void *dlopen(const char *filename, int flags);`
* `int dlclose(void *handle);`
* and, `void *dlsym(void *handle, const char *symbol);`

All of these are defined in `dlfcn.h`, which comes standard. These functions are only available on Linux. If the viewers want to see this done on Windoze, then pestering @dtm might be a good idea!

---
## Details on the dlfcn API.

The `dlopen` function takes two parameters:

`const char *filename` is the path to the shared object file to load.

___Note:___ _A shared object file (usually denoted with the extension __*.so__) is a compiled binary with no main function. Instead, it is to be loaded by one or more other programs. The most common shared object file is... `libc`. That&#39;s right! Your C program (unless static) calls upon a shared object file to get all of its standard library functionality. In C++, `libc++` is the corresponding standard library._

`int flags` is not too important for now because most of the defaults are fine for us. I will explicitly use only one flag: `RTLD_NOW` which performs symbol resolution for __all__ symbols within the shared object file right when it is first loaded. You may recall @_py&#39;s article on lazy symbol resolution, [Linux Internals - Dynamic Linking Wizardry](https://0x00sec.org/t/linux-internals-dynamic-linking-wizardry/1082). The flag that resolves symbols lazily, or as-needed, is `RTLD_LAZY` which is a default flag that would be used if `RTLD_NOW` were not specified. I use `RTLD_NOW` because I want the program to crash immediately if a symbol is unresolvable (it helps for debugging).

The return value of `dlopen` is handle (a `void*`) to the newly-loaded shared library. If the file couldn&#39;t be loaded or couldn&#39;t be found, `dlopen` returns `NULL` (`nullptr` in C++).

---
`dlclose` takes one parameter, a `void *handle` to the shared library. This is the same `void*` that was returned from `dlopen`.

Any non-zero value indicates that `dlclose` failed; a return of `0` means that `dlclose` executed successfully. ___Note:___ _It&#39;s very important to be aware of return values since many functions return the same values (e.g., 0, 1, -1) yet the values carry very difference meanings._

---
`dlsym` is the program that accesses symbols from the shared library. It returns any/all requested symbols simply as `void*`&#39;s. Some casting must be done, then, to get your desired results.

The first parameter `void *handle` is just the handle you get from `dlopen`.

`const char *symbol` is the string representation of the symbol you want. ___Note:___ _A symbol can be a function, struct, variable, or anything, really._

If the symbol is found, you get a pointer to it (that, again, you may have to cast); otherwise, the function returns `NULL` or `nullptr`.

---
## Symbols in C++

Symbols in C++ can only be described as a giant pain. Name mangling makes it difficult to resolve symbols at runtime because there is no standard convention for how symbols are mangled (i.e., it is compiler-specific).

For example, a typical C function like `do_something` has the symbol `do_something` when compiled with a C compiler. With a C++ compiler, that function could look like `AFDa_do_somethingFAK_x`.

I think it&#39;s important to briefly mention the purpose of name mangling, however: name mangling allows for function overriding (did someone say &quot;class inheritance?&quot;) and other really convenient things about C++ that wouldn&#39;t work in C.

Of course, if you want your C++ compiler to not name-mangle a certain function or variable, you can use `extern &quot;C&quot;` to direct the compiler to compile the code as C. Here is an example:

```c
// do_something.cpp
extern C int do_something(void) {
	return 0;
}

int main() {
	return do_something();
}
```

If we compile the program with `g++` and then run `nm` (a program that shows us the symbols within the binary), we can see that `do_something()` has this symbol:

    00000000004004d6 T do_something

Let&#39;s use `g++` again but we will remove the `extern &quot;C&quot;` part:

    00000000004004d6 T _Z12do_somethingv

See the difference?

---
## The Problem with `extern &quot;C&quot;`    

`extern &quot;C&quot;` will not work with things that are specific to C++ and have no corresponding C behaviour. For example, you can&#39;t `extern &quot;C&quot;` a `class` because there are no classes in C!

The solution to this is to use helper functions to instantiate classes like so:

```c
extern &quot;C&quot; SomeObject* factory(void) {
	return new SomeObject;
}
```

A helper function that instantiates a class this way is often called a **factory**.

---
## The Second Problem

So you have some class declared in some file and a factory to instantiate it. You want to compile that code as a shared library so that some main program can utilize the functionality.

The solution is [Polymorphism](https://en.wikipedia.org/wiki/Polymorphism_(computer_science)), a programming concept that allows to to define some base functionality that all subclasses can implement differently. Because this topic is so large, I won&#39;t go into it here.

We will define a base class with some basic functionality. In this tutorial, we will have a base class `Widget` that is purely abstract, meaning that descending classes __must__ implement __all__ of `Widget`&#39;s virtual functions to even compile.

```c
// widget.hpp
#ifndef __WIDGET_H
#define __WIDGET_H

// ignore this line for now...
extern int unique_signal; // for use in proving symbol stuff.

#include &lt;string&gt;

// pure virtual class!
class Widget {

public:
	virtual std::string message(void) = 0; // pure virtual func

};

#endif
```

All descending classes will inherit from `Widget` and implement `std::string message(void)`. When we load the dynamic libraries, we will treat all of the instances as `Widget*`&#39;s (this is the polymorphism at work).

---
## The Main Program

```c
// main.cpp
#include &lt;dlfcn.h&gt;

#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

#include &quot;./widget.hpp&quot;

typedef void* dynamic_lib_handle;

static dynamic_lib_handle load_lib(const std::string&amp; path);
static Widget* instantiate(const dynamic_lib_handle handle);
static void close_lib(dynamic_lib_handle handle);

struct dynamic_lib {
	dynamic_lib_handle  handle;
	std::string			path;

	dynamic_lib(std::string p) : path(p), handle(nullptr) {}

	~dynamic_lib() {
		if (handle != nullptr)
			close_lib(handle);
	}
};

int unique_signal = 42;

int main(int argc, char **argv) {
	if (argc &lt; 2)
		return 1;

	std::vector&lt;dynamic_lib&gt; libs;

	try {
		std::cout &lt;&lt; &quot;Opening: &quot; &lt;&lt; argv[1] &lt;&lt; std::endl;
		std::ifstream fs(argv[1]);
		std::string tmp;

		// read from the file.
		while(std::getline(fs, tmp))
			libs.push_back(dynamic_lib(tmp));
	} catch (std::exception&amp; e) {
		std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
		return 2;
	}

	// load up all the libs
	for (auto&amp; l : libs) {
		l.handle = load_lib(l.path);
	}

	std::vector&lt;Widget*&gt; widgets;
	// instantiate!
	for (auto&amp; l : libs)
		widgets.push_back( instantiate(l.handle) );

	// call each widget&#39;s message() func.
	for (Widget* w : widgets) {
		if (w == nullptr) continue;

		std::cout &lt;&lt; w-&gt;message() &lt;&lt; std::endl;
		delete w;
	}
}

static dynamic_lib_handle load_lib(const std::string&amp; path) {
	std::cout &lt;&lt; &quot;Trying to open: &quot; &lt;&lt; path &lt;&lt; std::endl;
	return dlopen(path.data() , RTLD_NOW); // get a handle to the lib, may be nullptr.
			// RTLD_NOW ensures that all the symbols are resolved immediately. This means that
			// if a symbol cannot be found, the program will crash now instead of later.
}

// ...

static void close_lib(dynamic_lib_handle handle) {
	dlclose(handle);
}

```

I hope the above code is fairly straight forward to you guys. Feel free to comment questions about it, though. Study it carefully first.

The really important part of code is the `static Widget* instantiate(const dynamic_lib_handle handle)` function. This function does the symbol resolution of the factory function, does the appropriate casting, and then returns an instance of the widget subclass defined in the shared library pointed to by the `handle`:

```c
static Widget* instantiate(const dynamic_lib_handle handle) {

	if (handle == nullptr) return nullptr;

	void *maker = dlsym(handle , &quot;factory&quot;);

	if (maker == nullptr) return nullptr;

	typedef Widget* (*fptr)();
	fptr func = reinterpret_cast&lt;fptr&gt;(reinterpret_cast&lt;void*&gt;(maker));

	return func();
}
```

The casting part was a pain to do because C++ is very picking about casting a `void*` to a function pointer. I will post the StackOverflow link that helped me if I find it again.

---
## Adding Some Widgets

Now, let&#39;s add some widgets:

```c
// test-widget1.cpp
#include &lt;string&gt;
#include &quot;./widget.hpp&quot;

class TestWidget1 : public Widget {
public:
	std::string message(void) {
		return &quot;Hello. I&#39;m Test Widget1\nOh and the unique_signal is: &quot; + std::to_string(unique_signal);
	}
};

extern &quot;C&quot; Widget* factory(void) {
	return static_cast&lt;Widget*&gt;(new TestWidget1);
}
```

```c
// test-widget2.cpp
#include &lt;string&gt;
#include &quot;./widget.hpp&quot;

class TestWidget2 : public Widget  {
public:
	std::string message(void) {
		return &quot;Hello. I&#39;m Test Widget2&quot;;
	}
};

extern &quot;C&quot; Widget* factory(void) {
	return static_cast&lt;Widget*&gt;(new TestWidget2);
}
```

The main difference between the two widgets above is that TestWidget1 uses `unique_signal` in its `message` function. This symbol is __declared__ as `extern` in _widget.hpp_ and is defined in `main.cpp`. TestWidget1 will crash the program if it cannot access the value of `unique_signal`. This means that the widgets need access to symbols in the main program. By tinkering with soem compiler flags (specifically `-rdynamic`) we can make this happen.

---
## Compiling

Let&#39;s compile the widgets first (after all, order doesn&#39;t matter and that&#39;s sort of the point of this whole thing...).

    $ g++ --std=c++17 -fPIC -rdynamic -shared -o ./test-widget1.so ./test-widget1.cpp
	$ g++ --std=c++17 -fPIC -rdynamic -shared -o ./test-widget2.so ./test-widget2.cpp

`-shared` tells the compiler that we intentionally didn&#39;t put a `main()` in the source for these binaries. `-rdynamic` and `-fPIC` have to do with symbol access.

Compiling the main program isn&#39;t too different:

    $ g++ --std=c++17 -rdynamic -o main.out main.cpp -ldl

`-rdynamic` is what lets the shared libraries access the symbols in our main program. `-ldl` links our main program with the `dlfcn` code. Experienced C/C++ people know that `libc` and/or `libc++` are automatically linked by the compiler as if `llibc(++)` was passed to `gcc` or `g++`. However, `-ldl` must be specified.

---
## Running

The main program expects one argument, a path to a file listing out which libraries to load. I have called this file `libs.txt` and it looks like this:

	./test-widget1.so
	./test-widget2.so

	$ ./main.out ./libs.txt
	Opening: ./libs.txt
	Trying to open: ./test-widget1.so
	Trying to open: ./test-widget2.so
	Hello. I&#39;m Test Widget1
	Oh and the unique_signal is: 42
	Hello. I&#39;m Test Widget2

Looks like it all worked!

---
## Conclusion

All of the source code used here is up on the 0x00sec GitLab [here](https://gitlab.s-3.tech/oaktree/dynamic-runtime-libraries).

I hope that this was straightforward and informative.</description>
    
    <lastBuildDate>Sun, 30 Jul 2017 20:24:27 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/c-dynamic-loading-of-shared-objects-at-runtime/1498.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C++] Dynamic Loading of Shared Objects at Runtime</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-loading-of-shared-objects-at-runtime/1498/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-loading-of-shared-objects-at-runtime/1498/2</link>
        <pubDate>Sun, 21 Jan 2018 00:30:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1498-2</guid>
        <source url="https://0x00sec.org/t/c-dynamic-loading-of-shared-objects-at-runtime/1498.rss">[C++] Dynamic Loading of Shared Objects at Runtime</source>
      </item>
      <item>
        <title>[C++] Dynamic Loading of Shared Objects at Runtime</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <h1>Dynamic Loading of Shared Objects at Runtime</h1>
<p>I’ve been doing a lot of tutorials about dynamic stuff. It’s because we trees rustle whenever the wind blows.</p>
<p>Anyway, this post comes as an addition to <a class="mention" href="https://0x00sec.org/u/_py">@_py</a>’s <a href="https://0x00sec.org/t/linux-internals-the-art-of-symbol-resolution/1488">Linux Internals - The Art Of Symbol Resolution</a>.</p>
<p>This whole thing started when I decided that the bot in our channel (<a class="hashtag" href="https://0x00sec.org/tag/0x00sec">#<span>0x00sec</span></a> at <a href="http://irc.0x00sec.org">irc.0x00sec.org</a>), <strong>pinetree</strong>, needed to be able to dynamically load and unload event-driven modules at runtime.</p>
<p>Building a complex piece of software is very difficult. The typical, rudimentary way to do it is that every time you add a feature (or module) you recompile the entire program. This is just a waste of time. Instead, you can support <strong>dynamic</strong> modules that get loaded at runtime. This way, if I need to make a new command for <strong>pinetree</strong> or if I need to revise an existing one, I can simply unload the command from the running instance of <strong>pinetree</strong>, edit the code for the command, recompile just that code, and then reload it into the bot.</p>
<p>Like most things in C++, you need a few C functions to implement this behaviour.</p>
<p>The functions we’ll be using today are:</p>
<ul>
<li><code>void *dlopen(const char *filename, int flags);</code></li>
<li><code>int dlclose(void *handle);</code></li>
<li>and, <code>void *dlsym(void *handle, const char *symbol);</code>
</li>
</ul>
<p>All of these are defined in <code>dlfcn.h</code>, which comes standard. These functions are only available on Linux. If the viewers want to see this done on Windoze, then pestering <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> might be a good idea!</p>
<hr>
<h2>Details on the dlfcn API.</h2>
<p>The <code>dlopen</code> function takes two parameters:</p>
<p><code>const char *filename</code> is the path to the shared object file to load.</p>
<p><em><strong>Note:</strong></em> <em>A shared object file (usually denoted with the extension <strong>*.so</strong>) is a compiled binary with no main function. Instead, it is to be loaded by one or more other programs. The most common shared object file is… <code>libc</code>. That’s right! Your C program (unless static) calls upon a shared object file to get all of its standard library functionality. In C++, <code>libc++</code> is the corresponding standard library.</em></p>
<p><code>int flags</code> is not too important for now because most of the defaults are fine for us. I will explicitly use only one flag: <code>RTLD_NOW</code> which performs symbol resolution for <strong>all</strong> symbols within the shared object file right when it is first loaded. You may recall <a class="mention" href="https://0x00sec.org/u/_py">@_py</a>’s article on lazy symbol resolution, <a href="https://0x00sec.org/t/linux-internals-dynamic-linking-wizardry/1082">Linux Internals - Dynamic Linking Wizardry</a>. The flag that resolves symbols lazily, or as-needed, is <code>RTLD_LAZY</code> which is a default flag that would be used if <code>RTLD_NOW</code> were not specified. I use <code>RTLD_NOW</code> because I want the program to crash immediately if a symbol is unresolvable (it helps for debugging).</p>
<p>The return value of <code>dlopen</code> is handle (a <code>void*</code>) to the newly-loaded shared library. If the file couldn’t be loaded or couldn’t be found, <code>dlopen</code> returns <code>NULL</code> (<code>nullptr</code> in C++).</p>
<hr>
<p><code>dlclose</code> takes one parameter, a <code>void *handle</code> to the shared library. This is the same <code>void*</code> that was returned from <code>dlopen</code>.</p>
<p>Any non-zero value indicates that <code>dlclose</code> failed; a return of <code>0</code> means that <code>dlclose</code> executed successfully. <em><strong>Note:</strong></em> <em>It’s very important to be aware of return values since many functions return the same values (e.g., 0, 1, -1) yet the values carry very difference meanings.</em></p>
<hr>
<p><code>dlsym</code> is the program that accesses symbols from the shared library. It returns any/all requested symbols simply as <code>void*</code>'s. Some casting must be done, then, to get your desired results.</p>
<p>The first parameter <code>void *handle</code> is just the handle you get from <code>dlopen</code>.</p>
<p><code>const char *symbol</code> is the string representation of the symbol you want. <em><strong>Note:</strong></em> <em>A symbol can be a function, struct, variable, or anything, really.</em></p>
<p>If the symbol is found, you get a pointer to it (that, again, you may have to cast); otherwise, the function returns <code>NULL</code> or <code>nullptr</code>.</p>
<hr>
<h2>Symbols in C++</h2>
<p>Symbols in C++ can only be described as a giant pain. Name mangling makes it difficult to resolve symbols at runtime because there is no standard convention for how symbols are mangled (i.e., it is compiler-specific).</p>
<p>For example, a typical C function like <code>do_something</code> has the symbol <code>do_something</code> when compiled with a C compiler. With a C++ compiler, that function could look like <code>AFDa_do_somethingFAK_x</code>.</p>
<p>I think it’s important to briefly mention the purpose of name mangling, however: name mangling allows for function overriding (did someone say “class inheritance?”) and other really convenient things about C++ that wouldn’t work in C.</p>
<p>Of course, if you want your C++ compiler to not name-mangle a certain function or variable, you can use <code>extern "C"</code> to direct the compiler to compile the code as C. Here is an example:</p>
<pre><code class="lang-auto">// do_something.cpp
extern C int do_something(void) {
	return 0;
}

int main() {
	return do_something();
}
</code></pre>
<p>If we compile the program with <code>g++</code> and then run <code>nm</code> (a program that shows us the symbols within the binary), we can see that <code>do_something()</code> has this symbol:</p>
<pre><code>00000000004004d6 T do_something
</code></pre>
<p>Let’s use <code>g++</code> again but we will remove the <code>extern "C"</code> part:</p>
<pre><code>00000000004004d6 T _Z12do_somethingv
</code></pre>
<p>See the difference?</p>
<hr>
<h2>The Problem with <code>extern "C"</code>
</h2>
<p><code>extern "C"</code> will not work with things that are specific to C++ and have no corresponding C behaviour. For example, you can’t <code>extern "C"</code> a <code>class</code> because there are no classes in C!</p>
<p>The solution to this is to use helper functions to instantiate classes like so:</p>
<pre><code class="lang-auto">extern "C" SomeObject* factory(void) {
	return new SomeObject;
}
</code></pre>
<p>A helper function that instantiates a class this way is often called a <strong>factory</strong>.</p>
<hr>
<h2>The Second Problem</h2>
<p>So you have some class declared in some file and a factory to instantiate it. You want to compile that code as a shared library so that some main program can utilize the functionality.</p>
<p>The solution is <a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)" rel="nofollow noopener">Polymorphism</a>, a programming concept that allows to to define some base functionality that all subclasses can implement differently. Because this topic is so large, I won’t go into it here.</p>
<p>We will define a base class with some basic functionality. In this tutorial, we will have a base class <code>Widget</code> that is purely abstract, meaning that descending classes <strong>must</strong> implement <strong>all</strong> of <code>Widget</code>'s virtual functions to even compile.</p>
<pre><code class="lang-auto">// widget.hpp
#ifndef __WIDGET_H
#define __WIDGET_H

// ignore this line for now...
extern int unique_signal; // for use in proving symbol stuff.

#include &lt;string&gt;

// pure virtual class!
class Widget {

public:
	virtual std::string message(void) = 0; // pure virtual func

};

#endif
</code></pre>
<p>All descending classes will inherit from <code>Widget</code> and implement <code>std::string message(void)</code>. When we load the dynamic libraries, we will treat all of the instances as <code>Widget*</code>'s (this is the polymorphism at work).</p>
<hr>
<h2>The Main Program</h2>
<pre><code class="lang-auto">// main.cpp
#include &lt;dlfcn.h&gt;

#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

#include "./widget.hpp"

typedef void* dynamic_lib_handle;

static dynamic_lib_handle load_lib(const std::string&amp; path);
static Widget* instantiate(const dynamic_lib_handle handle);
static void close_lib(dynamic_lib_handle handle);

struct dynamic_lib {
	dynamic_lib_handle  handle;
	std::string			path;

	dynamic_lib(std::string p) : path(p), handle(nullptr) {}

	~dynamic_lib() {
		if (handle != nullptr)
			close_lib(handle);
	}
};

int unique_signal = 42;

int main(int argc, char **argv) {
	if (argc &lt; 2)
		return 1;

	std::vector&lt;dynamic_lib&gt; libs;

	try {
		std::cout &lt;&lt; "Opening: " &lt;&lt; argv[1] &lt;&lt; std::endl;
		std::ifstream fs(argv[1]);
		std::string tmp;

		// read from the file.
		while(std::getline(fs, tmp))
			libs.push_back(dynamic_lib(tmp));
	} catch (std::exception&amp; e) {
		std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
		return 2;
	}

	// load up all the libs
	for (auto&amp; l : libs) {
		l.handle = load_lib(l.path);
	}

	std::vector&lt;Widget*&gt; widgets;
	// instantiate!
	for (auto&amp; l : libs)
		widgets.push_back( instantiate(l.handle) );

	// call each widget's message() func.
	for (Widget* w : widgets) {
		if (w == nullptr) continue;

		std::cout &lt;&lt; w-&gt;message() &lt;&lt; std::endl;
		delete w;
	}
}

static dynamic_lib_handle load_lib(const std::string&amp; path) {
	std::cout &lt;&lt; "Trying to open: " &lt;&lt; path &lt;&lt; std::endl;
	return dlopen(path.data() , RTLD_NOW); // get a handle to the lib, may be nullptr.
			// RTLD_NOW ensures that all the symbols are resolved immediately. This means that
			// if a symbol cannot be found, the program will crash now instead of later.
}

// ...

static void close_lib(dynamic_lib_handle handle) {
	dlclose(handle);
}

</code></pre>
<p>I hope the above code is fairly straight forward to you guys. Feel free to comment questions about it, though. Study it carefully first.</p>
<p>The really important part of code is the <code>static Widget* instantiate(const dynamic_lib_handle handle)</code> function. This function does the symbol resolution of the factory function, does the appropriate casting, and then returns an instance of the widget subclass defined in the shared library pointed to by the <code>handle</code>:</p>
<pre><code class="lang-auto">static Widget* instantiate(const dynamic_lib_handle handle) {

	if (handle == nullptr) return nullptr;

	void *maker = dlsym(handle , "factory");

	if (maker == nullptr) return nullptr;

	typedef Widget* (*fptr)();
	fptr func = reinterpret_cast&lt;fptr&gt;(reinterpret_cast&lt;void*&gt;(maker));

	return func();
}
</code></pre>
<p>The casting part was a pain to do because C++ is very picking about casting a <code>void*</code> to a function pointer. I will post the StackOverflow link that helped me if I find it again.</p>
<hr>
<h2>Adding Some Widgets</h2>
<p>Now, let’s add some widgets:</p>
<pre><code class="lang-auto">// test-widget1.cpp
#include &lt;string&gt;
#include "./widget.hpp"

class TestWidget1 : public Widget {
public:
	std::string message(void) {
		return "Hello. I'm Test Widget1\nOh and the unique_signal is: " + std::to_string(unique_signal);
	}
};

extern "C" Widget* factory(void) {
	return static_cast&lt;Widget*&gt;(new TestWidget1);
}
</code></pre>
<pre><code class="lang-auto">// test-widget2.cpp
#include &lt;string&gt;
#include "./widget.hpp"

class TestWidget2 : public Widget  {
public:
	std::string message(void) {
		return "Hello. I'm Test Widget2";
	}
};

extern "C" Widget* factory(void) {
	return static_cast&lt;Widget*&gt;(new TestWidget2);
}
</code></pre>
<p>The main difference between the two widgets above is that TestWidget1 uses <code>unique_signal</code> in its <code>message</code> function. This symbol is <strong>declared</strong> as <code>extern</code> in <em>widget.hpp</em> and is defined in <code>main.cpp</code>. TestWidget1 will crash the program if it cannot access the value of <code>unique_signal</code>. This means that the widgets need access to symbols in the main program. By tinkering with soem compiler flags (specifically <code>-rdynamic</code>) we can make this happen.</p>
<hr>
<h2>Compiling</h2>
<p>Let’s compile the widgets first (after all, order doesn’t matter and that’s sort of the point of this whole thing…).</p>
<pre><code>$ g++ --std=c++17 -fPIC -rdynamic -shared -o ./test-widget1.so ./test-widget1.cpp
$ g++ --std=c++17 -fPIC -rdynamic -shared -o ./test-widget2.so ./test-widget2.cpp
</code></pre>
<p><code>-shared</code> tells the compiler that we intentionally didn’t put a <code>main()</code> in the source for these binaries. <code>-rdynamic</code> and <code>-fPIC</code> have to do with symbol access.</p>
<p>Compiling the main program isn’t too different:</p>
<pre><code>$ g++ --std=c++17 -rdynamic -o main.out main.cpp -ldl
</code></pre>
<p><code>-rdynamic</code> is what lets the shared libraries access the symbols in our main program. <code>-ldl</code> links our main program with the <code>dlfcn</code> code. Experienced C/C++ people know that <code>libc</code> and/or <code>libc++</code> are automatically linked by the compiler as if <code>llibc(++)</code> was passed to <code>gcc</code> or <code>g++</code>. However, <code>-ldl</code> must be specified.</p>
<hr>
<h2>Running</h2>
<p>The main program expects one argument, a path to a file listing out which libraries to load. I have called this file <code>libs.txt</code> and it looks like this:</p>
<pre><code>./test-widget1.so
./test-widget2.so

$ ./main.out ./libs.txt
Opening: ./libs.txt
Trying to open: ./test-widget1.so
Trying to open: ./test-widget2.so
Hello. I'm Test Widget1
Oh and the unique_signal is: 42
Hello. I'm Test Widget2
</code></pre>
<p>Looks like it all worked!</p>
<hr>
<h2>Conclusion</h2>
<p>All of the source code used here is up on the 0x00sec GitLab <a href="https://gitlab.s-3.tech/oaktree/dynamic-runtime-libraries" rel="nofollow noopener">here</a>.</p>
<p>I hope that this was straightforward and informative.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-loading-of-shared-objects-at-runtime/1498/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-loading-of-shared-objects-at-runtime/1498/1</link>
        <pubDate>Sun, 29 Jan 2017 21:20:27 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1498-1</guid>
        <source url="https://0x00sec.org/t/c-dynamic-loading-of-shared-objects-at-runtime/1498.rss">[C++] Dynamic Loading of Shared Objects at Runtime</source>
      </item>
  </channel>
</rss>
