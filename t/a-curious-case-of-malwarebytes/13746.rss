<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>A Curious Case of Malwarebytes</title>
    <link>https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746</link>
    <description># Introduction

Recently, I installed Malwarebytes on my machine. I played around with it for a little and I noticed that something was off with the scanning of files on disk. Naturally, it tempted me into digging further to identify the root cause but I had also unexpectedly discovered something else that was incredibly strange. So, a couple of issues and hours of investigation later, I would like to present to you what I&#39;ve uncovered in this journey.

----

# What File Scanning?

For those unaware, the EICAR test file is a file developed to test anti-malware solutions by intentionally triggering a detection based on the following ASCII string: `X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*`. For more information about this, please see here: https://www.eicar.org/.

As I completed the installation of Malwarebytes, I wanted to test it with the classic EICAR file. So I dropped it into disk and waited for a detection notification... and nothing...? Malwarebytes did not bat an eyelid. I escalated it further and explicitly requested a scan on the file... and nothing! 

![image|690x441,100%](upload://hEjl2DlKzrMLfjTeALTsUtW2ilD.png) 

After Googling the issue, here is the summary in the [FAQ](https://forums.malwarebytes.com/topic/191650-malwarebytes-3-frequently-asked-questions/?do=findComment&amp;comment=1077438) of why Malwarebytes does not detect EICAR files:
 [quote=Malwarebytes]
So in summary, MB3 already incorporates world-class, next-generation anti-malware technologies. Our combination of signature-less and rules-based layered approach is far more effective than using AV signatures. Malwarebytes is able to prevent 0-minute threats and attacks without updates, even script-based, file-less, and other advanced attacks . We won’t detect EICAR because EICAR is not representative of either today’s threat environment or security needs. 
[/quote]

Weird flex, but okay. 

After this unique incident, I decided to try and see if it would detect _anything_ that was dropped to disk so I decided to find something that _should_ guarantee a detection: Quasar RAT. I downloaded it and unzipped it, waiting in anticipation for the detection notification... and nothing! Again! 

![image|690x471,100%](upload://u2qOferTtMhUmcSkdW4olFGhZTe.png) 

I performed a manual scan on the _Quasar.exe_ file to check if Malwarebytes was actually functional at all and, lo and behold, it picked it up!

![image|690x357](upload://sRolTFPien2X7c47RO0nA7XXKfK.png) 

----

# Investigating the Issue

Of course, I was not impressed by what I have seen. I wanted to investigate what was causing this problem to resolve it. Having messed with a little bit of kernel driver development before, I knew where to look.

## Minifilter Callback Operations

Windows has a special type of drivers called _Minifilters_ which are used for file system operations. To register as a minifilter, the driver must use the [`FltRegisterFilter`](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/fltkernel/nf-fltkernel-fltregisterfilter) registration function. One of the parameters specify the registration context which is a struct that holds the relevant information to be provided to the kernel.

```c
typedef struct _FLT_REGISTRATION {
  USHORT                                      Size;
  USHORT                                      Version;
  FLT_REGISTRATION_FLAGS                      Flags;
  const FLT_CONTEXT_REGISTRATION              *ContextRegistration;
  const FLT_OPERATION_REGISTRATION            *OperationRegistration;    // &lt;--
  PFLT_FILTER_UNLOAD_CALLBACK                 FilterUnloadCallback;
  PFLT_INSTANCE_SETUP_CALLBACK                InstanceSetupCallback;
  PFLT_INSTANCE_QUERY_TEARDOWN_CALLBACK       InstanceQueryTeardownCallback;
  PFLT_INSTANCE_TEARDOWN_CALLBACK             InstanceTeardownStartCallback;
  PFLT_INSTANCE_TEARDOWN_CALLBACK             InstanceTeardownCompleteCallback;
  PFLT_GENERATE_FILE_NAME                     GenerateFileNameCallback;
  PFLT_NORMALIZE_NAME_COMPONENT               NormalizeNameComponentCallback;
  PFLT_NORMALIZE_CONTEXT_CLEANUP              NormalizeContextCleanupCallback;
  PFLT_TRANSACTION_NOTIFICATION_CALLBACK      TransactionNotificationCallback;
  PFLT_NORMALIZE_NAME_COMPONENT_EX            NormalizeNameComponentExCallback;
  PFLT_SECTION_CONFLICT_NOTIFICATION_CALLBACK SectionNotificationCallback;
} FLT_REGISTRATION, *PFLT_REGISTRATION;
```

Within this struct, there is one member that is interesting: `OperationRegistration`.

```c
typedef struct _FLT_OPERATION_REGISTRATION {
  UCHAR                            MajorFunction;
  FLT_OPERATION_REGISTRATION_FLAGS Flags;
  PFLT_PRE_OPERATION_CALLBACK      PreOperation;
  PFLT_POST_OPERATION_CALLBACK     PostOperation;
  PVOID                            Reserved1;
} FLT_OPERATION_REGISTRATION, *PFLT_OPERATION_REGISTRATION;
```

This struct describes the type of operation that will be registered as a callback (`MajorFunction`) and the two functions that will handle the callback (`PreOperation` and `PostOperation`). The `PreOperation` handles the callback _before_ the operation is performed and the `PostOperation` handles the callback _after_ the operation is performed. This struct is used in an array that may specify multiple types of operations.

## The Tip of the Iceberg

Using this knowledge, I discovered the registration structure used for `FltRegisterFilter`:

![image|673x185](upload://ekf5fZ7cye7KJ9h3fwi1RQuNk3z.png) 

If we match the offsets of the above struct definition, we can deduce that the two green `unk_XXX` values are the `ContextRegistration` and `OperationRegistration` respectively. We are interested in the second one:

![image|690x326](upload://1RqQaK5GQHn5jb3jjrE188BoUfW.png) 

The figure above shows the `OperationRegistration` struct with the operations `IRP_MJ_CREATE` (file handle opens) and `IRP_MJ_ACQUIRE_FOR_SECTION_SYNCHRONIZATION`. What&#39;s strange here is that there is no registered callback registration for [`IRP_MJ_WRITE`](https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/irp-mj-write) (file writes) nor [`IRP_MJ_CLEANUP`](https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/irp-mj-cleanup) (file handle closes). This could track malicious byte patterns being written to a file as well as being able to scan a file after it has been opened and potentially modified. Perhaps this was the issue for failing to have scanned Quasar?

Anyway, the `IRP_MJ_CREATE` specifies both `PreOperation` and `PostOperation`. The `PostOperation` is only used for clean up so we are not interested in that. Let&#39;s have a look at the `PreOperation`. The function is actually quite small and didn&#39;t contain any relevant information about file scanning but I noticed the following deferred routine:

![image|246x159](upload://2v3ZDah6DH4dMa7xd2uAX6Qaaze.png) 

## Taken By Surprise

If we jump into `sub_140005AA0`, we can see this:

![image|458x500](upload://aCN8TGXU6zF3zdhhcuQ2WfIAXtB.png) 

In the green boxes, there are calls to [`RtlCompareUnicodeString`](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/nf-wdm-rtlcompareunicodestring), with the first argument as the file extension and the second argument as **hardcoded** strings! Here are the three strings:

![image|690x384](upload://88RlMLhUDWDrmrd47ZQaOKHours.png) 

Looking back at the flow chart, `RtlCompareUnicodeString` is defined to return zero if the two provided strings are the same. We can follow the green branches that satisfy this return value and see that execution flows all the way to the end of the function. The red box on the right contains the function that scans the file. If we wanted to bypass the file scanning function, all we need to do is to rename the file extension to `Manifest`, `Config`, or `etl` (case-insensitive)!

&lt;img src=&#39;//0x00sec.s3.dualstack.us-east-1.amazonaws.com/original/2X/3/3e7d98e93b5c3e676e745faf81ddb5ccdb42178e.jpeg&#39;&gt;

It is actually possible to run executable files despite lacking the `exe` extension name. I believe that the `PATHTEXT` environment variable plays a role in the [`CreateProcess`](https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createprocessa) function. The (my) `PATHTEXT` variable is defined as:

```
.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
```

From my educated guess, if the executing file has an unassociated file extension, it will iterate through these file types in order (left to right) and verify by analysing the file&#39;s header. In the case of an `exe`, it will reach the `.EXE` value, be recognised as an executable by the `MZ` header signature, and then attempted to be executed as such. Correct me if I&#39;m wrong.

----

# Demonstration

In the following GIF, I will show that malicious files dropped to disk do not get detected. Then, by changing the file name extensions to `etl` and `manifest`, Malwarebytes will not also not see them.

&lt;img src=&#39;//0x00sec.s3.dualstack.us-east-1.amazonaws.com/original/2X/e/ecede886df532e145002d92b1caa3669b661472b.gif&#39;&gt;

## Dropper PoC

I&#39;ve also developed a PoC dropper designed to automate this process.

&lt;img src=&#39;//0x00sec.s3.dualstack.us-east-1.amazonaws.com/original/2X/3/3ac2bf566f2c9e8db49e09f8f78b127f1ff6af1b.gif&#39;&gt;

----

# Conclusion

This journey started out quite strange and became even stranger. I have no idea why the implementation is missing some file system operation callbacks. It may explain why Malwarebytes is not scanning files when they are written to disk. I have even less of an idea as to why it was decided that these file extensions were whitelisted from scanning. Perhaps it was an optimisation of some sort? Maybe it was assumed that they weren&#39;t executable? Let me know what you think.

As always, you can find the PoC here on my GitHub: https://github.com/NtRaiseHardError/Antimalware-Research/tree/master/Malwarebytes.

_-- dtm_</description>
    
    <lastBuildDate>Sun, 09 Jun 2019 02:28:33 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>A Curious Case of Malwarebytes</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/17">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/17</link>
        <pubDate>Mon, 17 Jun 2019 11:56:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13746-17</guid>
        <source url="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746.rss">A Curious Case of Malwarebytes</source>
      </item>
      <item>
        <title>A Curious Case of Malwarebytes</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="larkwiot" data-post="15" data-topic="13746">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/larkwiot/40/3237_2.png" class="avatar"> larkwiot:</div>
<blockquote>
<p>And actually, Malwarebytes <em>not</em> detecting Eicar would indicate it doesn’t use signature based scanning.</p>
</blockquote>
</aside>
<p>I think you need to recheck your logic. It is entirely possible that Malwarebytes uses signature-based scanning but does not include the signatures for EICAR and hence, will not detect it. As far as I’m concerned, signature-based scanning is the fastest and efficient methods for detecting known malware and simply not including an engine capable of performing this would be an insult to optimisation.</p>
<p>What you are claiming is simply outrageous and I fail to see any relevant evidence to support it. I also don’t see any sources that explicitly state that Malwarebytes does <strong>not</strong> use signatures. I am aware that they have a “signature-less” detection method but just to make sure you don’t trip on another incorrect logical conclusion, it does <strong>not</strong> mean Malwarebytes doesn’t use signatures. From the same thread questioning this “signature-less” method, a staff member replies:</p>
<aside class="quote no-group">
<blockquote>
<p>It uses a combination of both signature based and signature-less detection for increased protection.</p>
</blockquote>
</aside>
<p><a href="https://forums.malwarebytes.com/topic/201891-signature-less-detection/?do=findComment&amp;comment=1141708" class="onebox" target="_blank" rel="noopener">https://forums.malwarebytes.com/topic/201891-signature-less-detection/?do=findComment&amp;comment=1141708</a></p>
          <p><a href="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/16">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/16</link>
        <pubDate>Sun, 09 Jun 2019 02:28:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13746-16</guid>
        <source url="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746.rss">A Curious Case of Malwarebytes</source>
      </item>
      <item>
        <title>A Curious Case of Malwarebytes</title>
        <dc:creator><![CDATA[larkwiot]]></dc:creator>
        <description><![CDATA[
            <p>This is normal antivirus behavior. It’s signature based scanning. And actually, Malwarebytes <em>not</em> detecting Eicar would indicate it doesn’t use signature based scanning.</p>
          <p><a href="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/15</link>
        <pubDate>Sat, 08 Jun 2019 22:43:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13746-15</guid>
        <source url="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746.rss">A Curious Case of Malwarebytes</source>
      </item>
      <item>
        <title>A Curious Case of Malwarebytes</title>
        <dc:creator><![CDATA[cuckkoo]]></dc:creator>
        <description><![CDATA[
            <p>Malwarebytes is always tripping on stuff like this and from what i’ve experienced i think they created a database of known malwares and they look for the same exact code in the files they scan and that is very sad because no one is going to write exact same code again apart from script-kiddies.</p>
<p>I once scanned my two copies of same malware with slight changes and guess what one was detected and one wasn’t.</p>
          <p><a href="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/14</link>
        <pubDate>Thu, 06 Jun 2019 10:31:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13746-14</guid>
        <source url="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746.rss">A Curious Case of Malwarebytes</source>
      </item>
      <item>
        <title>A Curious Case of Malwarebytes</title>
        <dc:creator><![CDATA[TKBomber]]></dc:creator>
        <description><![CDATA[
            <p>Someone dropped the ball hard…</p>
          <p><a href="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/11</link>
        <pubDate>Wed, 22 May 2019 03:35:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13746-11</guid>
        <source url="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746.rss">A Curious Case of Malwarebytes</source>
      </item>
      <item>
        <title>A Curious Case of Malwarebytes</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="jennlong" data-post="8" data-topic="13746" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/jennlong/40/7045_2.png" class="avatar"> jennlong:</div>
<blockquote>
<p>What an amazing analysis of Malwarebytes. So much was over my head but your comprehension and tenacity is truly inspiring. We are all a little bit smarter thanks to you.</p>
</blockquote>
</aside>
<p><a class="mention" href="https://0x00sec.org/u/jennlong">@jennlong</a> Thank you for your kind words! Much appreciated.</p>
<aside class="quote no-group quote-modified" data-username="dmknght" data-post="9" data-topic="13746">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/letter_avatar_proxy/v4/letter/d/73ab20/40.png" class="avatar"> dmknght:</div>
<blockquote>
<blockquote>
<p>the second argument as <strong>hardcoded</strong> strings</p>
</blockquote>
<p>That is a big <code>Wow</code> in 2019. Does Malwarebytes have any anti-debugging technique?</p>
</blockquote>
</aside>
<p><a class="mention" href="https://0x00sec.org/u/dmknght">@dmknght</a> I’m not sure. This was done with a majority of static analysis and then blackbox dynamic testing to confirm.</p>
          <p><a href="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/10</link>
        <pubDate>Tue, 21 May 2019 12:14:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13746-10</guid>
        <source url="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746.rss">A Curious Case of Malwarebytes</source>
      </item>
      <item>
        <title>A Curious Case of Malwarebytes</title>
        <dc:creator><![CDATA[dmknght]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-VIP" data-username="dtm" data-post="1" data-topic="13746">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/dtm/40/6409_2.png" class="avatar"> dtm:</div>
<blockquote>
<p>the second argument as <strong>hardcoded</strong> strings</p>
</blockquote>
</aside>
<p>That is a big <code>Wow</code> in 2019. Does Malwarebytes have any anti-debugging technique?</p>
          <p><a href="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/9</link>
        <pubDate>Tue, 21 May 2019 02:18:15 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13746-9</guid>
        <source url="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746.rss">A Curious Case of Malwarebytes</source>
      </item>
      <item>
        <title>A Curious Case of Malwarebytes</title>
        <dc:creator><![CDATA[jennlong]]></dc:creator>
        <description><![CDATA[
            <p>What an amazing analysis of Malwarebytes. So much was over my head but your comprehension and tenacity is truly inspiring. We are all a little bit smarter thanks to you.</p>
          <p><a href="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/8</link>
        <pubDate>Tue, 21 May 2019 00:05:12 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13746-8</guid>
        <source url="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746.rss">A Curious Case of Malwarebytes</source>
      </item>
      <item>
        <title>A Curious Case of Malwarebytes</title>
        <dc:creator><![CDATA[Alice]]></dc:creator>
        <description><![CDATA[
            <p>It was an example, but yeah. I figured out that it was still an exe so nothing would change.</p>
          <p><a href="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/7</link>
        <pubDate>Sun, 19 May 2019 12:22:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13746-7</guid>
        <source url="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746.rss">A Curious Case of Malwarebytes</source>
      </item>
      <item>
        <title>A Curious Case of Malwarebytes</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="BL4CKH47H4CK3R" data-post="5" data-topic="13746">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/bl4ckh47h4ck3r/40/11306_2.png" class="avatar"> BL4CKH47H4CK3R:</div>
<blockquote>
<p>Did you bypass their product key authentication system (premium forever) ?</p>
</blockquote>
</aside>
<p>No, I used a trial version.</p>
          <p><a href="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/6</link>
        <pubDate>Sun, 19 May 2019 03:29:42 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13746-6</guid>
        <source url="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746.rss">A Curious Case of Malwarebytes</source>
      </item>
      <item>
        <title>A Curious Case of Malwarebytes</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Alice" data-post="2" data-topic="13746">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/alice/40/7706_2.png" class="avatar"> Alice:</div>
<blockquote>
<p>Anyways, I wonder if the extension could be changed like this:</p>
<p><code>malware.etl.exe</code></p>
</blockquote>
</aside>
<p>The file extension is still <code>exe</code> which doesn’t change anything.</p>
          <p><a href="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/3</link>
        <pubDate>Sat, 18 May 2019 22:28:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13746-3</guid>
        <source url="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746.rss">A Curious Case of Malwarebytes</source>
      </item>
      <item>
        <title>A Curious Case of Malwarebytes</title>
        <dc:creator><![CDATA[Alice]]></dc:creator>
        <description><![CDATA[
            <p>Correct and disagree with me if I am wrong, but pretty much malwarebytes fucked up when it comes to the name of files and the like? I don’t know the terminology nor do I understand why when written to disk it won’t be detected, but I believe there is a name for this type of fuck up? Anyways, I wonder if the extension could be changed like this:</p>
<p><code>malware.etl.exe</code></p>
<p>Maybe?</p>
          <p><a href="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/2</link>
        <pubDate>Sat, 18 May 2019 18:32:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13746-2</guid>
        <source url="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746.rss">A Curious Case of Malwarebytes</source>
      </item>
      <item>
        <title>A Curious Case of Malwarebytes</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <h1>Introduction</h1>
<p>Recently, I installed Malwarebytes on my machine. I played around with it for a little and I noticed that something was off with the scanning of files on disk. Naturally, it tempted me into digging further to identify the root cause but I had also unexpectedly discovered something else that was incredibly strange. So, a couple of issues and hours of investigation later, I would like to present to you what I’ve uncovered in this journey.</p>
<hr>
<h1>What File Scanning?</h1>
<p>For those unaware, the EICAR test file is a file developed to test anti-malware solutions by intentionally triggering a detection based on the following ASCII string: <code>X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*</code>. For more information about this, please see here: <a href="https://www.eicar.org/">https://www.eicar.org/</a>.</p>
<p>As I completed the installation of Malwarebytes, I wanted to test it with the classic EICAR file. So I dropped it into disk and waited for a detection notification… and nothing…? Malwarebytes did not bat an eyelid. I escalated it further and explicitly requested a scan on the file… and nothing!</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7bb384025ba9c14a05962710c81501dee2909675.png" alt="image" data-base62-sha1="hEjl2DlKzrMLfjTeALTsUtW2ilD" width="690" height="441"></p>
<p>After Googling the issue, here is the summary in the <a href="https://forums.malwarebytes.com/topic/191650-malwarebytes-3-frequently-asked-questions/?do=findComment&amp;comment=1077438">FAQ</a> of why Malwarebytes does not detect EICAR files:</p>
<aside class="quote no-group" data-username="Malwarebytes">
<div class="title">
<div class="quote-controls"></div>
 Malwarebytes:</div>
<blockquote>
<p>So in summary, MB3 already incorporates world-class, next-generation anti-malware technologies. Our combination of signature-less and rules-based layered approach is far more effective than using AV signatures. Malwarebytes is able to prevent 0-minute threats and attacks without updates, even script-based, file-less, and other advanced attacks . We won’t detect EICAR because EICAR is not representative of either today’s threat environment or security needs.</p>
</blockquote>
</aside>
<p>Weird flex, but okay.</p>
<p>After this unique incident, I decided to try and see if it would detect <em>anything</em> that was dropped to disk so I decided to find something that <em>should</em> guarantee a detection: Quasar RAT. I downloaded it and unzipped it, waiting in anticipation for the detection notification… and nothing! Again!</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d2879bfc26897e1674ab9fa5081b6b68a1d7e28c.png" alt="image" data-base62-sha1="u2qOferTtMhUmcSkdW4olFGhZTe" width="690" height="471"></p>
<p>I performed a manual scan on the <em>Quasar.exe</em> file to check if Malwarebytes was actually functional at all and, lo and behold, it picked it up!</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/ca45f79e545963d1e5eed0447d2acbffe4ca8200.png" alt="image" data-base62-sha1="sRolTFPien2X7c47RO0nA7XXKfK" width="690" height="357"></p>
<hr>
<h1>Investigating the Issue</h1>
<p>Of course, I was not impressed by what I have seen. I wanted to investigate what was causing this problem to resolve it. Having messed with a little bit of kernel driver development before, I knew where to look.</p>
<h2>Minifilter Callback Operations</h2>
<p>Windows has a special type of drivers called <em>Minifilters</em> which are used for file system operations. To register as a minifilter, the driver must use the <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/fltkernel/nf-fltkernel-fltregisterfilter"><code>FltRegisterFilter</code></a> registration function. One of the parameters specify the registration context which is a struct that holds the relevant information to be provided to the kernel.</p>
<pre><code class="lang-auto">typedef struct _FLT_REGISTRATION {
  USHORT                                      Size;
  USHORT                                      Version;
  FLT_REGISTRATION_FLAGS                      Flags;
  const FLT_CONTEXT_REGISTRATION              *ContextRegistration;
  const FLT_OPERATION_REGISTRATION            *OperationRegistration;    // &lt;--
  PFLT_FILTER_UNLOAD_CALLBACK                 FilterUnloadCallback;
  PFLT_INSTANCE_SETUP_CALLBACK                InstanceSetupCallback;
  PFLT_INSTANCE_QUERY_TEARDOWN_CALLBACK       InstanceQueryTeardownCallback;
  PFLT_INSTANCE_TEARDOWN_CALLBACK             InstanceTeardownStartCallback;
  PFLT_INSTANCE_TEARDOWN_CALLBACK             InstanceTeardownCompleteCallback;
  PFLT_GENERATE_FILE_NAME                     GenerateFileNameCallback;
  PFLT_NORMALIZE_NAME_COMPONENT               NormalizeNameComponentCallback;
  PFLT_NORMALIZE_CONTEXT_CLEANUP              NormalizeContextCleanupCallback;
  PFLT_TRANSACTION_NOTIFICATION_CALLBACK      TransactionNotificationCallback;
  PFLT_NORMALIZE_NAME_COMPONENT_EX            NormalizeNameComponentExCallback;
  PFLT_SECTION_CONFLICT_NOTIFICATION_CALLBACK SectionNotificationCallback;
} FLT_REGISTRATION, *PFLT_REGISTRATION;
</code></pre>
<p>Within this struct, there is one member that is interesting: <code>OperationRegistration</code>.</p>
<pre><code class="lang-auto">typedef struct _FLT_OPERATION_REGISTRATION {
  UCHAR                            MajorFunction;
  FLT_OPERATION_REGISTRATION_FLAGS Flags;
  PFLT_PRE_OPERATION_CALLBACK      PreOperation;
  PFLT_POST_OPERATION_CALLBACK     PostOperation;
  PVOID                            Reserved1;
} FLT_OPERATION_REGISTRATION, *PFLT_OPERATION_REGISTRATION;
</code></pre>
<p>This struct describes the type of operation that will be registered as a callback (<code>MajorFunction</code>) and the two functions that will handle the callback (<code>PreOperation</code> and <code>PostOperation</code>). The <code>PreOperation</code> handles the callback <em>before</em> the operation is performed and the <code>PostOperation</code> handles the callback <em>after</em> the operation is performed. This struct is used in an array that may specify multiple types of operations.</p>
<h2>The Tip of the Iceberg</h2>
<p>Using this knowledge, I discovered the registration structure used for <code>FltRegisterFilter</code>:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/64683dfd0205b372f68adc27e0fc1d1414062cc5.png" alt="image" data-base62-sha1="ekf5fZ7cye7KJ9h3fwi1RQuNk3z" width="673" height="185"></p>
<p>If we match the offsets of the above struct definition, we can deduce that the two green <code>unk_XXX</code> values are the <code>ContextRegistration</code> and <code>OperationRegistration</code> respectively. We are interested in the second one:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0d0c6e777b152fbe6d110b718cf0bffcc432f4cc.png" alt="image" data-base62-sha1="1RqQaK5GQHn5jb3jjrE188BoUfW" width="690" height="326"></p>
<p>The figure above shows the <code>OperationRegistration</code> struct with the operations <code>IRP_MJ_CREATE</code> (file handle opens) and <code>IRP_MJ_ACQUIRE_FOR_SECTION_SYNCHRONIZATION</code>. What’s strange here is that there is no registered callback registration for <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/irp-mj-write"><code>IRP_MJ_WRITE</code></a> (file writes) nor <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/irp-mj-cleanup"><code>IRP_MJ_CLEANUP</code></a> (file handle closes). This could track malicious byte patterns being written to a file as well as being able to scan a file after it has been opened and potentially modified. Perhaps this was the issue for failing to have scanned Quasar?</p>
<p>Anyway, the <code>IRP_MJ_CREATE</code> specifies both <code>PreOperation</code> and <code>PostOperation</code>. The <code>PostOperation</code> is only used for clean up so we are not interested in that. Let’s have a look at the <code>PreOperation</code>. The function is actually quite small and didn’t contain any relevant information about file scanning but I noticed the following deferred routine:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/11874c942e775e6656d27dea5c5d1313b643f9a0.png" alt="image" data-base62-sha1="2v3ZDah6DH4dMa7xd2uAX6Qaaze" width="246" height="159"></p>
<h2>Taken By Surprise</h2>
<p>If we jump into <code>sub_140005AA0</code>, we can see this:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4a78550fe31762fb13086f2e20865c7df9911257.png" alt="image" data-base62-sha1="aCN8TGXU6zF3zdhhcuQ2WfIAXtB" width="458" height="500"></p>
<p>In the green boxes, there are calls to <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/nf-wdm-rtlcompareunicodestring"><code>RtlCompareUnicodeString</code></a>, with the first argument as the file extension and the second argument as <strong>hardcoded</strong> strings! Here are the three strings:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3911ccb605dec5be99360553d58d9de767b13ace.png" alt="image" data-base62-sha1="88RlMLhUDWDrmrd47ZQaOKHours" width="690" height="384"></p>
<p>Looking back at the flow chart, <code>RtlCompareUnicodeString</code> is defined to return zero if the two provided strings are the same. We can follow the green branches that satisfy this return value and see that execution flows all the way to the end of the function. The red box on the right contains the function that scans the file. If we wanted to bypass the file scanning function, all we need to do is to rename the file extension to <code>Manifest</code>, <code>Config</code>, or <code>etl</code> (case-insensitive)!</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3e7d98e93b5c3e676e745faf81ddb5ccdb42178e.jpeg" width="" height=""></p>
<p>It is actually possible to run executable files despite lacking the <code>exe</code> extension name. I believe that the <code>PATHTEXT</code> environment variable plays a role in the <a href="https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createprocessa"><code>CreateProcess</code></a> function. The (my) <code>PATHTEXT</code> variable is defined as:</p>
<pre><code class="lang-auto">.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
</code></pre>
<p>From my educated guess, if the executing file has an unassociated file extension, it will iterate through these file types in order (left to right) and verify by analysing the file’s header. In the case of an <code>exe</code>, it will reach the <code>.EXE</code> value, be recognised as an executable by the <code>MZ</code> header signature, and then attempted to be executed as such. Correct me if I’m wrong.</p>
<hr>
<h1>Demonstration</h1>
<p>In the following GIF, I will show that malicious files dropped to disk do not get detected. Then, by changing the file name extensions to <code>etl</code> and <code>manifest</code>, Malwarebytes will not also not see them.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/ecede886df532e145002d92b1caa3669b661472b.gif" width="" height=""></p>
<h2>Dropper PoC</h2>
<p>I’ve also developed a PoC dropper designed to automate this process.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3ac2bf566f2c9e8db49e09f8f78b127f1ff6af1b.gif" width="" height=""></p>
<hr>
<h1>Conclusion</h1>
<p>This journey started out quite strange and became even stranger. I have no idea why the implementation is missing some file system operation callbacks. It may explain why Malwarebytes is not scanning files when they are written to disk. I have even less of an idea as to why it was decided that these file extensions were whitelisted from scanning. Perhaps it was an optimisation of some sort? Maybe it was assumed that they weren’t executable? Let me know what you think.</p>
<p>As always, you can find the PoC here on my GitHub: <a href="https://github.com/NtRaiseHardError/Antimalware-Research/tree/master/Malwarebytes">https://github.com/NtRaiseHardError/Antimalware-Research/tree/master/Malwarebytes</a>.</p>
<p><em>– dtm</em></p>
          <p><a href="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746/1</link>
        <pubDate>Sat, 18 May 2019 11:56:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13746-1</guid>
        <source url="https://0x00sec.org/t/a-curious-case-of-malwarebytes/13746.rss">A Curious Case of Malwarebytes</source>
      </item>
  </channel>
</rss>
