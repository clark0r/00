<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Sorting (Part 7.0): Merge Sort</title>
    <link>https://0x00sec.org/t/sorting-part-7-0-merge-sort/205</link>
    <description>Hello everyone! This is part 7.0 of my Sorting series.

So, anyway, here we are at 7.0 -- and I&#39;m wondering about how long I can drag this whole thing out...

## Merge Sort: The Algorithm Under the Hood
[Merge Sort](https://en.wikipedia.org/wiki/Merge_sort) is another [divide and conquer](https://en.wikipedia.org/wiki/Divide_and_conquer_algorithms) algorithm, much like [Quick Sort](https://0x00sec.org/t/sorting-part-6-0-quick-sort-sorta-efficient/202/1).

One big difference from Quick Sort is that Merge Sort doesn&#39;t pick any special pivot. Rather, Merge Sort splits the array-to-sort `arr` right down the middle. Then, it uses recursion to Merge Sort the `left = arr[0..k]` and `right = arr[k+1..n-1]`.

It &#39;ll continue splitting each piece of the array-to-sort `arr` into smaller and smaller pieces, until the pieces are of size two or less.

That&#39;s the wonder of _divide and conquer_: take a daunting problem and split it into a lot of smaller, more manageable tasks.

So, we get to very small arrays that essentially follow this pattern: `arr[a..b]`, where `0 &lt;= a &lt;= n - 2`, `1 &lt;= b &lt;= n - 1`, and `b - a &lt;= 1`, meaning that the array piece `arr[a..b]` has a length of two or less.

Okay, so now we have a bunch of arrays that are two-or-less elements in length. _Two or less elements_ can mean one of three things:

1. There are no elements in the array, so we return it move on to the next piece.
2. The array has one element, so we return that and move on.
3. The array has two elements. Here, we swap the elements if they&#39;re out of order, and then return it.

~[merge sort diagram](http://img.wonderhowto.com/img/57/25/63594753873245/0/sorting-part-7-0-merge-sort.w654.jpg)

Once we have sorted the two or lesses, we need to **MERGE** each pair of _two or lesses_ into arrays of size four (or less).

Take a look at the picture above again. Do you understand what I mean by merging? Did you bring your head right up to the screen to examine the second line _closely_? Regardless of your answer, look at it again and imagine merging the -two_-size arrays into the _four_-size arrays above them.

If the first element in the left array is smaller than the first of the right array, put the left&#39;s first element in the first spot of the four array, now look at the second element of the left array, but keep looking at the right. Put the smaller one in. Now you&#39;re looking at the last element of each two array. Put the smaller one in, that&#39;s `5` on the left side of the diagram. Now you have no more values to merge in that left two array, so tack on the rest of that right two array if it still has values to be merged.

You keep merging the pieces until you have the entire array. [Take a look at this video for a visual]https://youtu.be/ZRPoEKHXTJg).

Note that it does the left side first before doing anything for the right side. This is because of how recursion is used. All of the `mergesort(left)`s will be executed before it ever gets to a `mergesort(right)` on the same level.

## Time Complexity
Merge Sort has an `O(n * log n )` worst-and best-case time complexity.

## Ruby Implementation
```ruby
class Array
    def mergesort
 
        return self if length &lt;= 1
       
        if length == 2 # we swap if the length is two and the &quot;two array&quot; is unsorted still
            if (self[0] &gt; self[1])
                self[0],self[1] = self[1],self[0]
            end
 
            return self
        end
 
        left = self[0...self.length/2].mergesort
        right = self[self.length/2...self.length].mergesort
 
        arr = []
 
        while(!left.empty? &amp;&amp; !right.empty?)
            if left.first &lt; right.first
                arr &lt;&lt; left.first
                left.shift #i remove the first element from left after it gets merged
                # it&#39;s so i can keep comparing using left/right.first
            else
                arr &lt;&lt; right.first
                right.shift # remove first element from right after merging it
            end
        end
 
        if !left.empty?
            arr += left # if the left array is not yet fully merged, tack on the remaining values
        elsif !right.empty?
            arr += right # if the right array is not yet fully merged, tack on remaining values
        end
 
        return arr
    end
end
```
The first few lines of `mergesort()` are exit conditions, since we use recursion in `mergesort()`.

In this implementation, I extended Ruby&#39;s `Array` class to have a `mergesort()` method. That&#39;s why I call it with dot-notation.

If the array we are `mergesort`ing has more than two elements, we call `mergesort` on its left and right halves right away. No merging takes place until the array-to-sort `self` gets cut down into little two or less pieces.

I make an empty array `arr` to hold the result. Then, I say _while left and right both have elements, merge_. The merging takes place in that `while` loop. I do it by comparing the smallest element of `left` to that of `right`. The smaller element of the two gets &quot;merged&quot; by appending it to `arr`. Then, we delete that element from `left` or `right` (where it came from) by calling `Array#shift`.

After either `left` or `right` is emptied out, we append the non-empty array. ***Note:*** _only one array will have remaining elements at this point, and it&#39;ll be guaranteed that the result is sorted._

We then return the new array, `arr`.

## C++ Version
```c++
void mergesort(vector&lt;char&gt;&amp; vec) {
    int n = vec.size();
 
    // recursion terminator
    if (n &lt;= 1) return;
    else if (n == 2) {
        if (vec[0] &gt; vec[1]) {
 
            char tmp = vec[0];
            vec[0] = vec[1];
            vec[1] = tmp;
           
        }
 
        return;
    }
 
    vector&lt;char&gt; left(vec.begin(), vec.begin() + n / 2);
    vector&lt;char&gt; right(vec.begin() + n / 2, vec.end());
    vec.erase(vec.begin(), vec.end()); // because we have copied the values to the partitions (left and right)
 
    mergesort(left); mergesort(right);
 
    int itr = 0;
   
    while(!left.empty() &amp;&amp; !right.empty() &amp;&amp; itr &lt; n) {
        if (left[0] &lt; right[0]) {
 
            vec.push_back(left.front());
 
            left.erase(left.begin());
        } else {
 
            vec.push_back(right.front());
           
            right.erase(right.begin());
        }
 
        itr++;
    }
   
    if (!left.empty()) {
        vec.insert(vec.end(), left.begin(), left.end());
    } else if (!right.empty()) {
        vec.insert(vec.end(), right.begin(), right.end());
    }
 
}
```
We do fundamentally the same thing, except that I didn&#39;t extend `vector` as I extended `Array` in the Ruby version. It&#39;s just a regular old function. Use the annotations I have provided above; otherwise, I&#39;ve done all I can to explain Merge Sort.

## Conclusion
That&#39;s it for this article. The implementations above are great on time, but a little heavier on memory than I&#39;d like, so Merge Sort may make a return to NB in the future, a little wiser, a little more optimized.

Again, stay tuned for the optimization(s) of Quick Sort to come.

Comment below if you have a special sorting algorithm you&#39;d like included in my series.

Stay sorted,
oaktree</description>
    
    <lastBuildDate>Fri, 06 May 2016 00:34:46 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/sorting-part-7-0-merge-sort/205.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Sorting (Part 7.0): Merge Sort</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/sorting-part-7-0-merge-sort/205/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-7-0-merge-sort/205/3</link>
        <pubDate>Sun, 21 Jan 2018 00:37:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-205-3</guid>
        <source url="https://0x00sec.org/t/sorting-part-7-0-merge-sort/205.rss">Sorting (Part 7.0): Merge Sort</source>
      </item>
      <item>
        <title>Sorting (Part 7.0): Merge Sort</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Nice tutorial mate! It’d be hard to make this many by my own. Kudos to you!</p>
          <p><a href="https://0x00sec.org/t/sorting-part-7-0-merge-sort/205/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-7-0-merge-sort/205/2</link>
        <pubDate>Fri, 06 May 2016 00:34:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-205-2</guid>
        <source url="https://0x00sec.org/t/sorting-part-7-0-merge-sort/205.rss">Sorting (Part 7.0): Merge Sort</source>
      </item>
      <item>
        <title>Sorting (Part 7.0): Merge Sort</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Hello everyone! This is part 7.0 of my Sorting series.</p>
<p>So, anyway, here we are at 7.0 – and I’m wondering about how long I can drag this whole thing out…</p>
<h2>Merge Sort: The Algorithm Under the Hood</h2>
<p><a href="https://en.wikipedia.org/wiki/Merge_sort" rel="nofollow noopener">Merge Sort</a> is another <a href="https://en.wikipedia.org/wiki/Divide_and_conquer_algorithms" rel="nofollow noopener">divide and conquer</a> algorithm, much like <a href="https://0x00sec.org/t/sorting-part-6-0-quick-sort-sorta-efficient/202/1">Quick Sort</a>.</p>
<p>One big difference from Quick Sort is that Merge Sort doesn’t pick any special pivot. Rather, Merge Sort splits the array-to-sort <code>arr</code> right down the middle. Then, it uses recursion to Merge Sort the <code>left = arr[0..k]</code> and <code>right = arr[k+1..n-1]</code>.</p>
<p>It 'll continue splitting each piece of the array-to-sort <code>arr</code> into smaller and smaller pieces, until the pieces are of size two or less.</p>
<p>That’s the wonder of <em>divide and conquer</em>: take a daunting problem and split it into a lot of smaller, more manageable tasks.</p>
<p>So, we get to very small arrays that essentially follow this pattern: <code>arr[a..b]</code>, where <code>0 &lt;= a &lt;= n - 2</code>, <code>1 &lt;= b &lt;= n - 1</code>, and <code>b - a &lt;= 1</code>, meaning that the array piece <code>arr[a..b]</code> has a length of two or less.</p>
<p>Okay, so now we have a bunch of arrays that are two-or-less elements in length. <em>Two or less elements</em> can mean one of three things:</p>
<ol>
<li>There are no elements in the array, so we return it move on to the next piece.</li>
<li>The array has one element, so we return that and move on.</li>
<li>The array has two elements. Here, we swap the elements if they’re out of order, and then return it.</li>
</ol>
<p>~<a href="http://img.wonderhowto.com/img/57/25/63594753873245/0/sorting-part-7-0-merge-sort.w654.jpg" rel="nofollow noopener">merge sort diagram</a></p>
<p>Once we have sorted the two or lesses, we need to <strong>MERGE</strong> each pair of <em>two or lesses</em> into arrays of size four (or less).</p>
<p>Take a look at the picture above again. Do you understand what I mean by merging? Did you bring your head right up to the screen to examine the second line <em>closely</em>? Regardless of your answer, look at it again and imagine merging the -two_-size arrays into the <em>four</em>-size arrays above them.</p>
<p>If the first element in the left array is smaller than the first of the right array, put the left’s first element in the first spot of the four array, now look at the second element of the left array, but keep looking at the right. Put the smaller one in. Now you’re looking at the last element of each two array. Put the smaller one in, that’s <code>5</code> on the left side of the diagram. Now you have no more values to merge in that left two array, so tack on the rest of that right two array if it still has values to be merged.</p>
<p>You keep merging the pieces until you have the entire array. [Take a look at this video for a visual]<a href="https://youtu.be/ZRPoEKHXTJg" rel="nofollow noopener">https://youtu.be/ZRPoEKHXTJg</a>).</p>
<p>Note that it does the left side first before doing anything for the right side. This is because of how recursion is used. All of the <code>mergesort(left)</code>s will be executed before it ever gets to a <code>mergesort(right)</code> on the same level.</p>
<h2>Time Complexity</h2>
<p>Merge Sort has an <code>O(n * log n )</code> worst-and best-case time complexity.</p>
<h2>Ruby Implementation</h2>
<pre><code class="lang-ruby">class Array
    def mergesort
 
        return self if length &lt;= 1
       
        if length == 2 # we swap if the length is two and the "two array" is unsorted still
            if (self[0] &gt; self[1])
                self[0],self[1] = self[1],self[0]
            end
 
            return self
        end
 
        left = self[0...self.length/2].mergesort
        right = self[self.length/2...self.length].mergesort
 
        arr = []
 
        while(!left.empty? &amp;&amp; !right.empty?)
            if left.first &lt; right.first
                arr &lt;&lt; left.first
                left.shift #i remove the first element from left after it gets merged
                # it's so i can keep comparing using left/right.first
            else
                arr &lt;&lt; right.first
                right.shift # remove first element from right after merging it
            end
        end
 
        if !left.empty?
            arr += left # if the left array is not yet fully merged, tack on the remaining values
        elsif !right.empty?
            arr += right # if the right array is not yet fully merged, tack on remaining values
        end
 
        return arr
    end
end
</code></pre>
<p>The first few lines of <code>mergesort()</code> are exit conditions, since we use recursion in <code>mergesort()</code>.</p>
<p>In this implementation, I extended Ruby’s <code>Array</code> class to have a <code>mergesort()</code> method. That’s why I call it with dot-notation.</p>
<p>If the array we are <code>mergesort</code>ing has more than two elements, we call <code>mergesort</code> on its left and right halves right away. No merging takes place until the array-to-sort <code>self</code> gets cut down into little two or less pieces.</p>
<p>I make an empty array <code>arr</code> to hold the result. Then, I say <em>while left and right both have elements, merge</em>. The merging takes place in that <code>while</code> loop. I do it by comparing the smallest element of <code>left</code> to that of <code>right</code>. The smaller element of the two gets “merged” by appending it to <code>arr</code>. Then, we delete that element from <code>left</code> or <code>right</code> (where it came from) by calling <code>Array#shift</code>.</p>
<p>After either <code>left</code> or <code>right</code> is emptied out, we append the non-empty array. <em><strong>Note:</strong></em> <em>only one array will have remaining elements at this point, and it’ll be guaranteed that the result is sorted.</em></p>
<p>We then return the new array, <code>arr</code>.</p>
<h2>C++ Version</h2>
<pre><code class="lang-auto">void mergesort(vector&lt;char&gt;&amp; vec) {
    int n = vec.size();
 
    // recursion terminator
    if (n &lt;= 1) return;
    else if (n == 2) {
        if (vec[0] &gt; vec[1]) {
 
            char tmp = vec[0];
            vec[0] = vec[1];
            vec[1] = tmp;
           
        }
 
        return;
    }
 
    vector&lt;char&gt; left(vec.begin(), vec.begin() + n / 2);
    vector&lt;char&gt; right(vec.begin() + n / 2, vec.end());
    vec.erase(vec.begin(), vec.end()); // because we have copied the values to the partitions (left and right)
 
    mergesort(left); mergesort(right);
 
    int itr = 0;
   
    while(!left.empty() &amp;&amp; !right.empty() &amp;&amp; itr &lt; n) {
        if (left[0] &lt; right[0]) {
 
            vec.push_back(left.front());
 
            left.erase(left.begin());
        } else {
 
            vec.push_back(right.front());
           
            right.erase(right.begin());
        }
 
        itr++;
    }
   
    if (!left.empty()) {
        vec.insert(vec.end(), left.begin(), left.end());
    } else if (!right.empty()) {
        vec.insert(vec.end(), right.begin(), right.end());
    }
 
}
</code></pre>
<p>We do fundamentally the same thing, except that I didn’t extend <code>vector</code> as I extended <code>Array</code> in the Ruby version. It’s just a regular old function. Use the annotations I have provided above; otherwise, I’ve done all I can to explain Merge Sort.</p>
<h2>Conclusion</h2>
<p>That’s it for this article. The implementations above are great on time, but a little heavier on memory than I’d like, so Merge Sort may make a return to NB in the future, a little wiser, a little more optimized.</p>
<p>Again, stay tuned for the optimization(s) of Quick Sort to come.</p>
<p>Comment below if you have a special sorting algorithm you’d like included in my series.</p>
<p>Stay sorted,<br>
oaktree</p>
          <p><a href="https://0x00sec.org/t/sorting-part-7-0-merge-sort/205/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-7-0-merge-sort/205/1</link>
        <pubDate>Fri, 06 May 2016 00:03:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-205-1</guid>
        <source url="https://0x00sec.org/t/sorting-part-7-0-merge-sort/205.rss">Sorting (Part 7.0): Merge Sort</source>
      </item>
  </channel>
</rss>
