<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Crypto Algs (Part 1.1): Cracking Caesar</title>
    <link>https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736</link>
    <description>Yesterday I dropped [an article](https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733) about the Caesar Cipher encryption &quot;scheme&quot;. Now, it&#39;s time to break it.

This one will be easy. Think about it. Our key can only be between 0 and 25. Sounds like a brute-forcable problem.

---
# Method 1: Brute Force

First, here are the encryption and decryption functions we&#39;ll be using.

__encrypt.cpp__
```c
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

namespace Caesar {

    std::string encrypt(const std::string&amp; str, const int&amp; key) {
        
        std::string s = str;

        for (auto&amp; c : s) {
            if (c &gt;= &#39;a&#39; &amp;&amp; c &lt;= &#39;z&#39;) {

                c = ((c - &#39;a&#39; + key) % 26) + &#39;a&#39;;

            } else if (c &gt;= &#39;A&#39; &amp;&amp; c &lt;= &#39;Z&#39;) {

                c = ((c - &#39;A&#39; + key) % 26) + &#39;A&#39;;

            }
        }

        return s;
    }

    std::string decrypt(const std::string&amp; str, const int&amp; key) {
        return encrypt(str, 26 - key);
    }
};
```

Straight forward, right? If not, read my [last article](https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733) again.

Now let&#39;s get down to decrypting with brute force. We&#39;re just going to use a simple `for` loop:

__brute.cpp__
```c
#include &quot;./encrypt.cpp&quot;

int main() {
    std::string s; std::getline(std::cin, s);
    std::cout &lt;&lt; std::endl;
    
    for (int i = 1; i &lt; 26; i++) {
        std::cout &lt;&lt; &quot;[ &quot; &lt;&lt; i &lt;&lt; &quot; ] &quot;; 
        std::cout &lt;&lt; Caesar::decrypt(s, i) &lt;&lt; std::endl;
    }
    return 0;
}
```
Let&#39;s say I encrypt a message.

    $ ./caesar-cipher
    Hello World
    5
    Mjqqt Btwqi

Now let&#39;s metaphorically swallow the key and then try to _unlock_ our message via brute force.

    $ ./brute
    Mjqqt Btwqi

    [ 1 ] Lipps Asvph
    [ 2 ] Khoor Zruog
    [ 3 ] Jgnnq Yqtnf
    [ 4 ] Ifmmp Xpsme
    [ 5 ] Hello World
    [ 6 ] Gdkkn Vnqkc
    [ 7 ] Fcjjm Umpjb
    [ 8 ] Ebiil Tloia
    [ 9 ] Dahhk Sknhz
    [ 10 ] Czggj Rjmgy
    [ 11 ] Byffi Qilfx
    [ 12 ] Axeeh Phkew
    [ 13 ] Zwddg Ogjdv
    [ 14 ] Yvccf Nficu
    [ 15 ] Xubbe Mehbt
    [ 16 ] Wtaad Ldgas
    [ 17 ] Vszzc Kcfzr
    [ 18 ] Uryyb Jbeyq
    [ 19 ] Tqxxa Iadxp
    [ 20 ] Spwwz Hzcwo
    [ 21 ] Rovvy Gybvn
    [ 22 ] Qnuux Fxaum
    [ 23 ] Pmttw Ewztl
    [ 24 ] Olssv Dvysk
    [ 25 ] Nkrru Cuxrj

A quick look-through reveals our message, &quot;Hello World,&quot; with a key of `5`.

Now, that&#39;s not all that efficient. Plus, we must burden our eyes with looking through each of the 25 results.

Let&#39;s make the computer do the work instead.

---
# Method 2: Frequency Analysis

```c
#include &quot;./encrypt.cpp&quot;

#define REG_MAX 4 // the index of &#39;e&#39; in alpha (&#39;a&#39; = 0)

int main() {
    std::string s; std::getline(std::cin, s);

    std::vector&lt;unsigned int&gt; freq(26, 0);

    /*
        Collect frequencies
    */
    for (auto&amp; c : s) {
        if (c &gt;= &#39;a&#39; &amp;&amp; c &lt;= &#39;z&#39;) {
            freq[c - &#39;a&#39;]++;
        } else if (c &gt;= &#39;A&#39; &amp;&amp; c &lt;= &#39;Z&#39;) {
            freq[c - &#39;A&#39;]++;
        }
    }

    // find most frequent letter
    unsigned int max_idx = 0;
    for (int i = 1; i &lt; 26; i++) {
        if (freq[i] &gt; freq[max_idx]) {
            max_idx = i;
        }
    }

    int key = max_idx - REG_MAX;
    while (key &lt; 0) {
        key += 26;
    }

    std::cout &lt;&lt; Caesar::decrypt(s, key) &lt;&lt; std::endl;
}
```

We count the occurrences of each letter and store it in `freq`. Taking advantage of the fact that &#39;e&#39; is the most common letter in English, finding the most frequent letter and calculating its distance from &#39;e&#39; reveals the key.

This will sometimes fail on smaller sample sets. For example, &quot;Hello&quot; only has &#39;e&#39; once, but &#39;l&#39; appears _twice_. I&#39;ll be using a larger input to ensure that we have enough data to make a good key assumption.

Here&#39;s the ciphertext we&#39;ll be using:

Wg obm ct wh fsoz? W asob, zccy oh hvwg. Zccy oh wh! O kcfzr piwzh cb tobhogm. Gmbhvshwq sachwcbg wb hvs tcfa ct dwzzg. Dgmqvczcuwqoz koftofs wb hvs tcfa ct orjsfhwgwbu. Awbr-ozhsfwbu qvsawqozg wb hvs tcfa ct... tccr! Pfowbkogvwbu gsawbofg wb hvs tcfa ct asrwo. Qcbhfczzsr wgczohsr pippzsg wb hvs tcfa ct gcqwoz bshkcfyg. Fsoz? Mci kobh hc hozy opcih fsozwhm? Ks vojsb&#39;h zwjsr wb obmhvwbu fsachszm qzcgs hc wh gwbqs hvs hifb ct hvs qsbhifm. Ks hifbsr wh ctt, hccy cih hvs pohhsfwsg, gboqysr cb o pou ct UACg kvwzs ks hcggsr hvs fsabobhg wb hvs sjsf-sldobrwbu Riadghsf ct hvs viaob qcbrwhwcb. Ks zwjs wb pfobrsr vcigsg hforsaofysr pm qcfdcfohwcbg piwzh cb pwdczof biapsfg xiadwbu id obr rckb cb rwuwhoz rwgdzomg, vmdbchwnwbu ig wbhc hvs pwuusgh gziapsf aobywbr vog sjsf gssb. Mci vojs hc rwu dfshhm rssd, ywrrc, pstcfs mci qob twbr obmhvwbu fsoz. Ks zwjs wb o ywburca ct pizzgvwh. O ywburca mci&#39;js zwjsr wb tcf tof hcc zcbu. Gc rcb&#39;h hszz as opcih bch pswbu fsoz. W&#39;a bc zsgg fsoz hvob hvs tiqywbu psst dohhm wb mcif Pwu Aoq.

I&#39;ve given you all the tools you need. You can decrypt it yourself. Bonus brownie points if you get the key, too!

Later...
@oaktree 

[spoiler]So, do you recognize the message? How about where it&#39;s from?[/spoiler]</description>
    
    <lastBuildDate>Sun, 17 Jul 2016 14:21:33 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Crypto Algs (Part 1.1): Cracking Caesar</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/10</link>
        <pubDate>Sun, 21 Jan 2018 00:37:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-736-10</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736.rss">Crypto Algs (Part 1.1): Cracking Caesar</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.1): Cracking Caesar</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>I had setup a Caesar cracking tool some time ago too and I used a combination of both techniques: First I used frequency analysis to order the 26 keys. Then I printed out the first 80 digits (Only the first 80, because it should be enough to see if it’s rubbish or not) of every decrypted text in the previously calculated order. With this method you are able to identify the right key as easy as possible for the user.</p>
<p>Of course this takes more time than normal brute-force, but I think the losses are low enough - when we speak about Caeser cipher -, that it can be seen as useful <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">.</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/9</link>
        <pubDate>Sun, 17 Jul 2016 14:21:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-736-9</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736.rss">Crypto Algs (Part 1.1): Cracking Caesar</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.1): Cracking Caesar</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a>:<br>
Of course. There exist infinite samples. Of those, some <code>n</code> samples wouldn’t conform to the statistics. That is why I picked out a rather large sample for this article. If you attempt a frequency analysis of a ciphered “hello”, you will fail to break the cipher, because there are two <code>l</code>s and only one <code>e</code>.</p>
<p>Yes, you <em>could</em> also scan the brute-force results for common words like “the” or “and.” While I did not show that here, it can certainly be done.</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/8</link>
        <pubDate>Sun, 17 Jul 2016 13:00:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-736-8</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736.rss">Crypto Algs (Part 1.1): Cracking Caesar</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.1): Cracking Caesar</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Or you could just have the program detect most words regardless of language, except putting something like that together for a cipher such as the Caesar cipher would just take up time, as the cipher itself is simple enough to crack with the aforementioned program <a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a> set up.</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/7</link>
        <pubDate>Sat, 16 Jul 2016 05:03:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-736-7</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736.rss">Crypto Algs (Part 1.1): Cracking Caesar</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.1): Cracking Caesar</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Well I assume if you had some sort of dictionary set up you could set a program like that. Only thing is that the plain text might actually be in another language. Meaning that if it isn’t it would just seem like gibberish to the program and it would move on. So you could actually have what would be a valid deciphered text, except since it is in another lang it just looks like cipher text and it moves on. Many people actually use different languages in their encryptions, to make it just a bit harder to figure out. I suppose however you would be right in it being more convenient.</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/6</link>
        <pubDate>Sat, 16 Jul 2016 05:01:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-736-6</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736.rss">Crypto Algs (Part 1.1): Cracking Caesar</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.1): Cracking Caesar</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Though the time complexity you have shown may be true, the frequency analysis is <em>entirely</em> based on the assumption of statistical values, i.e. the frequency of the occurrence of a letter where <code>e</code> is the highest, <code>t</code> being second, et cetera. Consider this: What would happen if you attempted to break a ciphered text which has been manipulated to not conform to the statistic? Would a frequency analysis be considered <em>reliable</em>? Theory and practice are two sides of the same coin, they are not equivalent.</p>
<p>Speaking of statistics, is it not possible to have a program to detect common words to potentially find the correct deciphered text? This would easily remove the need for a person to manually look through each and every possible result.</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/5</link>
        <pubDate>Sat, 16 Jul 2016 04:18:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-736-5</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736.rss">Crypto Algs (Part 1.1): Cracking Caesar</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.1): Cracking Caesar</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Well, <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a>: We can evaluate the time complexities of each method:</p>
<h1>Brute Force</h1>
<pre><code class="lang-auto">for (int i = 1; i &lt; 26; i++) {
    std::cout &lt;&lt; "[ " &lt;&lt; i &lt;&lt; " ] "; 
    std::cout &lt;&lt; Caesar::decrypt(s, i) &lt;&lt; std::endl;
}
//...
</code></pre>
<p><code>25</code> times, we decrypt a string of <code>n</code> characters, giving us a time complexity of <code>25n</code>, which simplifies to <code>O( n )</code>.</p>
<hr>
<h1>Frequency Analysis</h1>
<pre><code class="lang-auto">/*
Collect frequencies
*/
for (auto&amp; c : s) {
    if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') {
        freq[c - 'a']++;
    } else if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') {
       freq[c - 'A']++;
    }
}
</code></pre>
<p>We iterate through each character here, which takes <code>n</code> time.</p>
<pre><code class="lang-auto">unsigned int max_idx = 0;
for (int i = 1; i &lt; 26; i++) {
    if (freq[i] &gt; freq[max_idx]) {
        max_idx = i;
    }
}
</code></pre>
<p>Here, we iterate through the <code>freq</code> array, which is <em>always</em> 26 elements. Starting from element <code>1</code> to <code>25</code> gives us a constant time, <code>O ( 1 )</code>.</p>
<pre><code class="lang-auto">std::cout &lt;&lt; Caesar::decrypt(s, key) &lt;&lt; std::endl;
</code></pre>
<p>Next, we decrypt, which takes <code>n</code> time.</p>
<p>The total time for frequency analysis thus comes to <code>n + n + 25</code>, which is simplified through the limit process to <code>n</code>. Thus, frequency analysis of the Caesar Cipher takes <code>O( n )</code> time.</p>
<hr>
<h1>Conclusion</h1>
<p>Looking back, we see that the derived time complexities are identical; they both run in linear time, <code>O( n )</code>. Thus, either method may be used. However, frequency analysis is cheaper, because it is more deterministic. A brute force approach requires the end user to sift through all of the results. Why do that?</p>
<p>Further, the un-simplified time complexities favor frequency analysis, because its raw complexity is <code>2n + 25</code>, compared to brute force’s <code>25n</code> complexity.</p>
<p>So, actually, frequency analysis is better. Note that brute force is certainly more <em>reliable</em> for smaller inputs, since determining the key with small inputs based on character frequency is not always “for sure.”</p>
<p>Another time, I may have agreed with you, <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a>, but what I’ve shown above proves otherwise.</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/4</link>
        <pubDate>Fri, 15 Jul 2016 14:44:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-736-4</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736.rss">Crypto Algs (Part 1.1): Cracking Caesar</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.1): Cracking Caesar</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Using brute force is probably a lot more efficient than using frequency analysis in this situation. Usually, the effectiveness of a method is measured by the time it would take to break ciphered messages, not the overall average performance of the method on other ciphering algorithms. Taking into consideration that you only need to shift the characters 25 times, it conserves so much more time than having to perform a frequency analysis and then manually deciphering the ciphered text one character at a time. In fact, it would be considered pretty much overkill.</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/3</link>
        <pubDate>Fri, 15 Jul 2016 03:58:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-736-3</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736.rss">Crypto Algs (Part 1.1): Cracking Caesar</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.1): Cracking Caesar</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Great job again oak! Really look forward to when you do something like this with an encryption like AES and so on!</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/2</link>
        <pubDate>Thu, 14 Jul 2016 16:52:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-736-2</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736.rss">Crypto Algs (Part 1.1): Cracking Caesar</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.1): Cracking Caesar</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Yesterday I dropped <a href="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733">an article</a> about the Caesar Cipher encryption “scheme”. Now, it’s time to break it.</p>
<p>This one will be easy. Think about it. Our key can only be between 0 and 25. Sounds like a brute-forcable problem.</p>
<hr>
<h1>Method 1: Brute Force</h1>
<p>First, here are the encryption and decryption functions we’ll be using.</p>
<p><strong>encrypt.cpp</strong></p>
<pre><code class="lang-auto">#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

namespace Caesar {

    std::string encrypt(const std::string&amp; str, const int&amp; key) {
        
        std::string s = str;

        for (auto&amp; c : s) {
            if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') {

                c = ((c - 'a' + key) % 26) + 'a';

            } else if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') {

                c = ((c - 'A' + key) % 26) + 'A';

            }
        }

        return s;
    }

    std::string decrypt(const std::string&amp; str, const int&amp; key) {
        return encrypt(str, 26 - key);
    }
};
</code></pre>
<p>Straight forward, right? If not, read my <a href="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733">last article</a> again.</p>
<p>Now let’s get down to decrypting with brute force. We’re just going to use a simple <code>for</code> loop:</p>
<p><strong>brute.cpp</strong></p>
<pre><code class="lang-auto">#include "./encrypt.cpp"

int main() {
    std::string s; std::getline(std::cin, s);
    std::cout &lt;&lt; std::endl;
    
    for (int i = 1; i &lt; 26; i++) {
        std::cout &lt;&lt; "[ " &lt;&lt; i &lt;&lt; " ] "; 
        std::cout &lt;&lt; Caesar::decrypt(s, i) &lt;&lt; std::endl;
    }
    return 0;
}
</code></pre>
<p>Let’s say I encrypt a message.</p>
<pre><code>$ ./caesar-cipher
Hello World
5
Mjqqt Btwqi
</code></pre>
<p>Now let’s metaphorically swallow the key and then try to <em>unlock</em> our message via brute force.</p>
<pre><code>$ ./brute
Mjqqt Btwqi

[ 1 ] Lipps Asvph
[ 2 ] Khoor Zruog
[ 3 ] Jgnnq Yqtnf
[ 4 ] Ifmmp Xpsme
[ 5 ] Hello World
[ 6 ] Gdkkn Vnqkc
[ 7 ] Fcjjm Umpjb
[ 8 ] Ebiil Tloia
[ 9 ] Dahhk Sknhz
[ 10 ] Czggj Rjmgy
[ 11 ] Byffi Qilfx
[ 12 ] Axeeh Phkew
[ 13 ] Zwddg Ogjdv
[ 14 ] Yvccf Nficu
[ 15 ] Xubbe Mehbt
[ 16 ] Wtaad Ldgas
[ 17 ] Vszzc Kcfzr
[ 18 ] Uryyb Jbeyq
[ 19 ] Tqxxa Iadxp
[ 20 ] Spwwz Hzcwo
[ 21 ] Rovvy Gybvn
[ 22 ] Qnuux Fxaum
[ 23 ] Pmttw Ewztl
[ 24 ] Olssv Dvysk
[ 25 ] Nkrru Cuxrj
</code></pre>
<p>A quick look-through reveals our message, “Hello World,” with a key of <code>5</code>.</p>
<p>Now, that’s not all that efficient. Plus, we must burden our eyes with looking through each of the 25 results.</p>
<p>Let’s make the computer do the work instead.</p>
<hr>
<h1>Method 2: Frequency Analysis</h1>
<pre><code class="lang-auto">#include "./encrypt.cpp"

#define REG_MAX 4 // the index of 'e' in alpha ('a' = 0)

int main() {
    std::string s; std::getline(std::cin, s);

    std::vector&lt;unsigned int&gt; freq(26, 0);

    /*
        Collect frequencies
    */
    for (auto&amp; c : s) {
        if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') {
            freq[c - 'a']++;
        } else if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') {
            freq[c - 'A']++;
        }
    }

    // find most frequent letter
    unsigned int max_idx = 0;
    for (int i = 1; i &lt; 26; i++) {
        if (freq[i] &gt; freq[max_idx]) {
            max_idx = i;
        }
    }

    int key = max_idx - REG_MAX;
    while (key &lt; 0) {
        key += 26;
    }

    std::cout &lt;&lt; Caesar::decrypt(s, key) &lt;&lt; std::endl;
}
</code></pre>
<p>We count the occurrences of each letter and store it in <code>freq</code>. Taking advantage of the fact that ‘e’ is the most common letter in English, finding the most frequent letter and calculating its distance from ‘e’ reveals the key.</p>
<p>This will sometimes fail on smaller sample sets. For example, “Hello” only has ‘e’ once, but ‘l’ appears <em>twice</em>. I’ll be using a larger input to ensure that we have enough data to make a good key assumption.</p>
<p>Here’s the ciphertext we’ll be using:</p>
<p>Wg obm ct wh fsoz? W asob, zccy oh hvwg. Zccy oh wh! O kcfzr piwzh cb tobhogm. Gmbhvshwq sachwcbg wb hvs tcfa ct dwzzg. Dgmqvczcuwqoz koftofs wb hvs tcfa ct orjsfhwgwbu. Awbr-ozhsfwbu qvsawqozg wb hvs tcfa ct… tccr! Pfowbkogvwbu gsawbofg wb hvs tcfa ct asrwo. Qcbhfczzsr wgczohsr pippzsg wb hvs tcfa ct gcqwoz bshkcfyg. Fsoz? Mci kobh hc hozy opcih fsozwhm? Ks vojsb’h zwjsr wb obmhvwbu fsachszm qzcgs hc wh gwbqs hvs hifb ct hvs qsbhifm. Ks hifbsr wh ctt, hccy cih hvs pohhsfwsg, gboqysr cb o pou ct UACg kvwzs ks hcggsr hvs fsabobhg wb hvs sjsf-sldobrwbu Riadghsf ct hvs viaob qcbrwhwcb. Ks zwjs wb pfobrsr vcigsg hforsaofysr pm qcfdcfohwcbg piwzh cb pwdczof biapsfg xiadwbu id obr rckb cb rwuwhoz rwgdzomg, vmdbchwnwbu ig wbhc hvs pwuusgh gziapsf aobywbr vog sjsf gssb. Mci vojs hc rwu dfshhm rssd, ywrrc, pstcfs mci qob twbr obmhvwbu fsoz. Ks zwjs wb o ywburca ct pizzgvwh. O ywburca mci’js zwjsr wb tcf tof hcc zcbu. Gc rcb’h hszz as opcih bch pswbu fsoz. W’a bc zsgg fsoz hvob hvs tiqywbu psst dohhm wb mcif Pwu Aoq.</p>
<p>I’ve given you all the tools you need. You can decrypt it yourself. Bonus brownie points if you get the key, too!</p>
<p>Later…<br>
<a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a></p>
<div class="spoiler"><a href="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/1">spoiler</a></div>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/1</link>
        <pubDate>Thu, 14 Jul 2016 16:08:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-736-1</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736.rss">Crypto Algs (Part 1.1): Cracking Caesar</source>
      </item>
  </channel>
</rss>
