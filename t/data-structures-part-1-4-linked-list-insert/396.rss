<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Data Structures (Part 1.4): Linked List [insert()]</title>
    <link>https://0x00sec.org/t/data-structures-part-1-4-linked-list-insert/396</link>
    <description>Okay, 0x00sec people! Now for `insert(...)`. I expect this to be the last technical part of the Linked List subseries before a fairly significant code dump.

# Algorithm Description
Our insertion function takes two parameters: `T val` and `const size_t&amp; idx`.

* `T val` is a value of type `T` (remember, I like `template`s) to be inserted.
* `const size_t&amp; idx` is the index at which a new `node` is to be placed.

The function will return `val` upon a successful run; otherwise, it will `throw` an exception (to be explained later).

So, `insert(...)` will traverse the list until it reaches the index `idx` desired, _or_ until the end of the `List` is reached. If we never arrive at `idx`, the exception (again, to be discussed later) gets `throw`n.

__Time Complexity:__ `O(n)`.

----
# Source Code
```java
template &lt;class T&gt;
T List&lt;T&gt;::insert(T val, const size_t&amp; idx) {
        if (idx == 0 &amp;&amp; root == nullptr) {
		this-&gt;append(val);
		return val;
	}
	node&lt;T&gt;* h = root;
	size_t cnt = 0;

	while(cnt &lt; idx - 1 &amp;&amp; h != nullptr) {
		h = h-&gt;next;
		cnt++;
	}

	if (cnt == idx - 1) {
		if (h != nullptr) {

			node&lt;T&gt;* new_node = new node&lt;T&gt;(val);

			new_node-&gt;next = h-&gt;next;
			
			h-&gt;next = new_node;

			len++; // update length

			return val;
		} 
	}

	// WATCH THIS LINE
	throw std::out_of_range(&quot;ERROR: called insert() past the acceptable range of the current linked list&quot;);
}
```
Oh dear! That&#39;s hella code. Let&#39;s get to it...

First, we want to check if `root` is `nullptr`. If it is, and if we&#39;re trying to insert at `idx = 0`, we call a function `append()`, which I have yet to reveal, that tacks on to the end. In this case, our `insert(...)`ing is done, so we return right then and there.

The next two lines of the function should remind you of the `delete(...)` function from [last time](https://0x00sec.org/t/data-structures-part-1-3-linked-list-delete/368) (wait, you didn&#39;t read that?).

In the `while` loop we traverse the list (again, much like we did so in `delete(...)`) until we reach `idx - 1` or the end of the list. ___Note:___ _I chose `idx - 1` so that `h` is the `node` before. Thus, the new `node` becomes `h-&gt;next`._

The `while` loop ended. Now we must check a few things:

1. Are we at `idx - 1`; meaning, are we where we want to be (in the list)?
2. Did we hit the end of the list already?

First, I make sure that first condition is true. Inside that `if`, though, I put a second `if`, reading `if (h != nullptr)`. This is because, if `h` (which is `some_list[ idx - 1 ]`) is a `nullptr`, that means that we&#39;ve come just short of the index `idx` where we want to put a new `node`. ___Note:___ _We can&#39;t just tack on a new `node` at `idx - 1` if `h` is a `nullptr` because then we wouldn&#39;t be inserting at `idx`, now would we?_

Okay, but what if we pass __both__ conditions? Now we&#39;re inside the nested `if`s.

1. Construct a new `node&lt;T&gt;*` and set `val` as its `data`.
2. Set `new_node-&gt;next` to `h-&gt;next`. In math-y English, this means &quot;make `some_list[ idx ]` point to `some_list[ idx + 1]`&quot;. If `h-&gt;next` is a `nullptr`, that won&#39;t affect us, because any `node`&#39;s default `next` defaults to `nullptr`, anyway!
3. Make `h-&gt;next = new_node`; ensure that `some_list[ idx - 1 ]` points to `some_list[ idx ]`. We are trying to __not__ lose any `node`s (because that&#39;d be a memory leak, and good programmers don&#39;t leak their memories).
4. Increment the length `len` of the list to account for this shiny new `node` we&#39;ve just `insert(...)`ed!
5. `return val`, thereby ending our presence in the function before reaching that default `throw`.

## Brief Explanation of the Default Exception
```java
throw std::out_of_range(&quot;ERROR: there is no node at that index to delete!&quot;);
```
What does this mean? So, if we don&#39;t reach the spot in the list where we wanted to `insert(...)` a new `node`, what do we do? Do we panic? Sort of. But it&#39;s 2016! Let&#39;s be civil about how we panic by using `exception`s. This way, the caller of the function can accommodate for trying to `insert(...)` past the bounds, or `out_of_range`, of the list.

----
# Conclusion
That&#39;s `insert(...)` for ya! I now challenge you to implement an `insert`ion function that takes a linked list rather than one value to insert! Would you want to copy over all the values? What would you do?

That&#39;s it for today,
oaktree

_A microphone can be heard hitting the ground._</description>
    
    <lastBuildDate>Wed, 18 May 2016 23:39:39 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/data-structures-part-1-4-linked-list-insert/396.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Data Structures (Part 1.4): Linked List [insert()]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-4-linked-list-insert/396/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-4-linked-list-insert/396/2</link>
        <pubDate>Sun, 21 Jan 2018 00:37:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-396-2</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-4-linked-list-insert/396.rss">Data Structures (Part 1.4): Linked List [insert()]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.4): Linked List [insert()]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Okay, 0x00sec people! Now for <code>insert(...)</code>. I expect this to be the last technical part of the Linked List subseries before a fairly significant code dump.</p>
<h1>Algorithm Description</h1>
<p>Our insertion function takes two parameters: <code>T val</code> and <code>const size_t&amp; idx</code>.</p>
<ul>
<li>
<code>T val</code> is a value of type <code>T</code> (remember, I like <code>template</code>s) to be inserted.</li>
<li>
<code>const size_t&amp; idx</code> is the index at which a new <code>node</code> is to be placed.</li>
</ul>
<p>The function will return <code>val</code> upon a successful run; otherwise, it will <code>throw</code> an exception (to be explained later).</p>
<p>So, <code>insert(...)</code> will traverse the list until it reaches the index <code>idx</code> desired, <em>or</em> until the end of the <code>List</code> is reached. If we never arrive at <code>idx</code>, the exception (again, to be discussed later) gets <code>throw</code>n.</p>
<p><strong>Time Complexity:</strong> <code>O(n)</code>.</p>
<hr>
<h1>Source Code</h1>
<pre><code class="lang-java">template &lt;class T&gt;
T List&lt;T&gt;::insert(T val, const size_t&amp; idx) {
        if (idx == 0 &amp;&amp; root == nullptr) {
		this-&gt;append(val);
		return val;
	}
	node&lt;T&gt;* h = root;
	size_t cnt = 0;

	while(cnt &lt; idx - 1 &amp;&amp; h != nullptr) {
		h = h-&gt;next;
		cnt++;
	}

	if (cnt == idx - 1) {
		if (h != nullptr) {

			node&lt;T&gt;* new_node = new node&lt;T&gt;(val);

			new_node-&gt;next = h-&gt;next;
			
			h-&gt;next = new_node;

			len++; // update length

			return val;
		} 
	}

	// WATCH THIS LINE
	throw std::out_of_range("ERROR: called insert() past the acceptable range of the current linked list");
}
</code></pre>
<p>Oh dear! That’s hella code. Let’s get to it…</p>
<p>First, we want to check if <code>root</code> is <code>nullptr</code>. If it is, and if we’re trying to insert at <code>idx = 0</code>, we call a function <code>append()</code>, which I have yet to reveal, that tacks on to the end. In this case, our <code>insert(...)</code>ing is done, so we return right then and there.</p>
<p>The next two lines of the function should remind you of the <code>delete(...)</code> function from <a href="https://0x00sec.org/t/data-structures-part-1-3-linked-list-delete/368">last time</a> (wait, you didn’t read that?).</p>
<p>In the <code>while</code> loop we traverse the list (again, much like we did so in <code>delete(...)</code>) until we reach <code>idx - 1</code> or the end of the list. <em><strong>Note:</strong></em> <em>I chose <code>idx - 1</code> so that <code>h</code> is the <code>node</code> before. Thus, the new <code>node</code> becomes <code>h-&gt;next</code>.</em></p>
<p>The <code>while</code> loop ended. Now we must check a few things:</p>
<ol>
<li>Are we at <code>idx - 1</code>; meaning, are we where we want to be (in the list)?</li>
<li>Did we hit the end of the list already?</li>
</ol>
<p>First, I make sure that first condition is true. Inside that <code>if</code>, though, I put a second <code>if</code>, reading <code>if (h != nullptr)</code>. This is because, if <code>h</code> (which is <code>some_list[ idx - 1 ]</code>) is a <code>nullptr</code>, that means that we’ve come just short of the index <code>idx</code> where we want to put a new <code>node</code>. <em><strong>Note:</strong></em> <em>We can’t just tack on a new <code>node</code> at <code>idx - 1</code> if <code>h</code> is a <code>nullptr</code> because then we wouldn’t be inserting at <code>idx</code>, now would we?</em></p>
<p>Okay, but what if we pass <strong>both</strong> conditions? Now we’re inside the nested <code>if</code>s.</p>
<ol>
<li>Construct a new <code>node&lt;T&gt;*</code> and set <code>val</code> as its <code>data</code>.</li>
<li>Set <code>new_node-&gt;next</code> to <code>h-&gt;next</code>. In math-y English, this means "make <code>some_list[ idx ]</code> point to <code>some_list[ idx + 1]</code>". If <code>h-&gt;next</code> is a <code>nullptr</code>, that won’t affect us, because any <code>node</code>'s default <code>next</code> defaults to <code>nullptr</code>, anyway!</li>
<li>Make <code>h-&gt;next = new_node</code>; ensure that <code>some_list[ idx - 1 ]</code> points to <code>some_list[ idx ]</code>. We are trying to <strong>not</strong> lose any <code>node</code>s (because that’d be a memory leak, and good programmers don’t leak their memories).</li>
<li>Increment the length <code>len</code> of the list to account for this shiny new <code>node</code> we’ve just <code>insert(...)</code>ed!</li>
<li>
<code>return val</code>, thereby ending our presence in the function before reaching that default <code>throw</code>.</li>
</ol>
<h2>Brief Explanation of the Default Exception</h2>
<pre><code class="lang-java">throw std::out_of_range("ERROR: there is no node at that index to delete!");
</code></pre>
<p>What does this mean? So, if we don’t reach the spot in the list where we wanted to <code>insert(...)</code> a new <code>node</code>, what do we do? Do we panic? Sort of. But it’s 2016! Let’s be civil about how we panic by using <code>exception</code>s. This way, the caller of the function can accommodate for trying to <code>insert(...)</code> past the bounds, or <code>out_of_range</code>, of the list.</p>
<hr>
<h1>Conclusion</h1>
<p>That’s <code>insert(...)</code> for ya! I now challenge you to implement an <code>insert</code>ion function that takes a linked list rather than one value to insert! Would you want to copy over all the values? What would you do?</p>
<p>That’s it for today,<br>
oaktree</p>
<p><em>A microphone can be heard hitting the ground.</em></p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-4-linked-list-insert/396/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-4-linked-list-insert/396/1</link>
        <pubDate>Wed, 18 May 2016 23:39:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-396-1</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-4-linked-list-insert/396.rss">Data Structures (Part 1.4): Linked List [insert()]</source>
      </item>
  </channel>
</rss>
