<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to bypass emulator detection in android apps</title>
    <link>https://0x00sec.org/t/how-to-bypass-emulator-detection-in-android-apps/6585</link>
    <description>**Introduction**
While testing some android apps on an emulator it shows that the app is not compatible with CPU or getting some error while installing the app on your emulator
i will show you how to bypass that easily

**Notice**
This may not working with some apps and you will have to use another technic .. this is just the common way.. be smart 

**Getting Ready**
Ok now you should decompile your android app to the source code using (jadx or jd-gui) and smali byte code using (apktool)

**Start**
First you need to check the the pre-decompiled source code and check for functions that contains strings like &quot;generic | emulator | google_sdk&quot; and functions like &quot;isEmulator | emulatorDetection..etc&quot; .. use your searching skills and read the code well
![Screenshot%20from%202018-05-07%2020-11-08|690x126](upload://u1Pi3rMNEUOXCG3lYIBdLlRjssp.png)
As you can see there is a method called &quot;checkIfDeviceIsEmulator&quot; that checks for &quot;finger print | model | brand&quot; and strings like &quot;genymotion | emulator&quot; 

If you notice .. this function return true statement if it detects the emulator and return false if not emulator :face_with_raised_eyebrow:
Ok i think you get it now

**The Fun Part**
Now we should change these value from true to false to bypass this detection.. but we can&#39;t edit the source code.. Actually you can&#39;t recompile and use this source code again.. but you can do this in the smali code :upside_down_face:
_ok lets do this.._
Go to the same file name in smali code and search for the same strings you found in the source code till you get the line num
![2|690x342](upload://mZ9nl3hF0GIqkf6YADbxYqfFYHv.png)
As you can see the strings we saw in the source code before
scroll down until you get this instruction **(&quot;const/4 v0, 0x1&quot;)**
which mean that return true statement to the method (explained it in easy way) .. and hex value 0x1 in smali byte code means true so we will change it from 0x1 to 0x0
![Screenshot%20from%202018-05-07%2020-46-04|690x242](upload://gSravfoypAufsFSAEwfEGwQLPjp.png)
Now we are done and you can recompile the smali byte code and use test the app on your emulator
https://www.youtube.com/watch?v=y27pS6LVXc8
you can take a look on this video to make more simple for you

&gt; Make sure that you can done it in many other way .. i think this is the most simple way

.
_Feel free to ask me anything_
Github:https://github.com/DevoOverkill9/
Thanks, 0v3rk!113r</description>
    
    <lastBuildDate>Sun, 13 May 2018 04:05:02 +0000</lastBuildDate>
    <category>Reverse Engineering</category>
    <atom:link href="https://0x00sec.org/t/how-to-bypass-emulator-detection-in-android-apps/6585.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to bypass emulator detection in android apps</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/how-to-bypass-emulator-detection-in-android-apps/6585/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-bypass-emulator-detection-in-android-apps/6585/3</link>
        <pubDate>Wed, 06 Jun 2018 18:52:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6585-3</guid>
        <source url="https://0x00sec.org/t/how-to-bypass-emulator-detection-in-android-apps/6585.rss">How to bypass emulator detection in android apps</source>
      </item>
      <item>
        <title>How to bypass emulator detection in android apps</title>
        <dc:creator><![CDATA[juji]]></dc:creator>
        <description><![CDATA[
            <p>thank you for this. very concise.</p>
          <p><a href="https://0x00sec.org/t/how-to-bypass-emulator-detection-in-android-apps/6585/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-bypass-emulator-detection-in-android-apps/6585/2</link>
        <pubDate>Sun, 13 May 2018 04:05:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6585-2</guid>
        <source url="https://0x00sec.org/t/how-to-bypass-emulator-detection-in-android-apps/6585.rss">How to bypass emulator detection in android apps</source>
      </item>
      <item>
        <title>How to bypass emulator detection in android apps</title>
        <dc:creator><![CDATA[DevoOverkill9]]></dc:creator>
        <description><![CDATA[
            <p><strong>Introduction</strong><br>
While testing some android apps on an emulator it shows that the app is not compatible with CPU or getting some error while installing the app on your emulator<br>
i will show you how to bypass that easily</p>
<p><strong>Notice</strong><br>
This may not working with some apps and you will have to use another technic … this is just the common way… be smart</p>
<p><strong>Getting Ready</strong><br>
Ok now you should decompile your android app to the source code using (jadx or jd-gui) and smali byte code using (apktool)</p>
<p><strong>Start</strong><br>
First you need to check the the pre-decompiled source code and check for functions that contains strings like “generic | emulator | google_sdk” and functions like “isEmulator | emulatorDetection…etc” … use your searching skills and read the code well<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="//0x00sec.s3.amazonaws.com/original/2X/d/d27618ec897f6d24c32dc3b61ddd5d2cb8232aa9.png" data-download-href="/uploads/short-url/u1Pi3rMNEUOXCG3lYIBdLlRjssp.png?dl=1" title="Screenshot%20from%202018-05-07%2020-11-08" rel="noopener nofollow ugc"><img src="//0x00sec.s3.amazonaws.com/original/2X/d/d27618ec897f6d24c32dc3b61ddd5d2cb8232aa9.png" alt="Screenshot%20from%202018-05-07%2020-11-08" data-base62-sha1="u1Pi3rMNEUOXCG3lYIBdLlRjssp" width="690" height="126"></a></div><br>
As you can see there is a method called “checkIfDeviceIsEmulator” that checks for “finger print | model | brand” and strings like “genymotion | emulator”<p></p>
<p>If you notice … this function return true statement if it detects the emulator and return false if not emulator <img src="https://0x00sec.org/images/emoji/twitter/face_with_raised_eyebrow.png?v=12" title=":face_with_raised_eyebrow:" class="emoji" alt=":face_with_raised_eyebrow:" loading="lazy" width="20" height="20"><br>
Ok i think you get it now</p>
<p><strong>The Fun Part</strong><br>
Now we should change these value from true to false to bypass this detection… but we can’t edit the source code… Actually you can’t recompile and use this source code again… but you can do this in the smali code <img src="https://0x00sec.org/images/emoji/twitter/upside_down_face.png?v=12" title=":upside_down_face:" class="emoji" alt=":upside_down_face:" loading="lazy" width="20" height="20"><br>
<em>ok lets do this…</em><br>
Go to the same file name in smali code and search for the same strings you found in the source code till you get the line num<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="//0x00sec.s3.amazonaws.com/original/2X/a/a119707db752254f64ed46bc30dc83e813d99261.png" data-download-href="/uploads/short-url/mZ9nl3hF0GIqkf6YADbxYqfFYHv.png?dl=1" title="2" rel="noopener nofollow ugc"><img src="//0x00sec.s3.amazonaws.com/original/2X/a/a119707db752254f64ed46bc30dc83e813d99261.png" alt="2" data-base62-sha1="mZ9nl3hF0GIqkf6YADbxYqfFYHv" width="690" height="342"></a></div><br>
As you can see the strings we saw in the source code before<br>
scroll down until you get this instruction <strong>(“const/4 v0, 0x1”)</strong><br>
which mean that return true statement to the method (explained it in easy way) … and hex value 0x1 in smali byte code means true so we will change it from 0x1 to 0x0<br>
<div class="lightbox-wrapper"><a class="lightbox" href="//0x00sec.s3.amazonaws.com/original/2X/7/764a21e41bcdde0b8c54d4fc0ad4e64838f472c7.png" data-download-href="/uploads/short-url/gSravfoypAufsFSAEwfEGwQLPjp.png?dl=1" title="Screenshot%20from%202018-05-07%2020-46-04" rel="noopener nofollow ugc"><img src="//0x00sec.s3.amazonaws.com/original/2X/7/764a21e41bcdde0b8c54d4fc0ad4e64838f472c7.png" alt="Screenshot%20from%202018-05-07%2020-46-04" data-base62-sha1="gSravfoypAufsFSAEwfEGwQLPjp" width="690" height="242"></a></div><br>
Now we are done and you can recompile the smali byte code and use test the app on your emulator<p></p><p><a href="https://www.youtube.com/watch?v=y27pS6LVXc8"> - YouTube</a></p>
<p>
you can take a look on this video to make more simple for you</p>
<blockquote>
<p>Make sure that you can done it in many other way … i think this is the most simple way</p>
</blockquote>
<p>.<br>
<em>Feel free to ask me anything</em><br>
Github:<a href="https://github.com/DevoOverkill9/" class="inline-onebox" rel="noopener nofollow ugc">DevoOverkill9 (Dev) · GitHub</a><br>
Thanks, 0v3rk!113r</p>
          <p><a href="https://0x00sec.org/t/how-to-bypass-emulator-detection-in-android-apps/6585/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-bypass-emulator-detection-in-android-apps/6585/1</link>
        <pubDate>Mon, 07 May 2018 18:52:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6585-1</guid>
        <source url="https://0x00sec.org/t/how-to-bypass-emulator-detection-in-android-apps/6585.rss">How to bypass emulator detection in android apps</source>
      </item>
  </channel>
</rss>
