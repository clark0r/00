<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Geolocate IP addresses using FreeGeoIP</title>
    <link>https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864</link>
    <description>Welcome back command-line ninjas, I wanted to take a small break from Trix&#39; with Linux and decided to write myself a tool. I noticed nothing was really out that would give you a comprehensive overview of an IP, which is awesome for Recon, and being totally 1337 :sunglasses:

This tool is written in ruby and utilises freegeoip.net, Google maps,  and wttr.in. You can download the whole script [here](https://gist.github.com/pry0cc/6646eb3b345c4cf7490f3d152e4b1ac5) so that you don&#39;t have to mess around with copy and pasting :stuck_out_tongue:  

Keep in mind you will need Mechanize installed, to install this ruby gem, just run `gem install mechanize` and you should be good to go!

Heres the script:
```ruby
#!/usr/bin/env ruby

require &#39;json&#39;
require &#39;mechanize&#39;
require &#39;rubygems&#39;
require &#39;open-uri&#39;

puts &quot;Looking up #{ARGV[0]}&quot;

agent = Mechanize.new
data = agent.get(&quot;http://freegeoip.net/json/#{ARGV[0]}&quot;).body

json = JSON.parse(data)
agent.user_agent = &quot;curl/7.50.0&quot;
weather = agent.get(&quot;http://wttr.in/#{json[&quot;city&quot;]}&quot;).body.split(&quot;\n&quot;)
puts &quot;Country Code: &quot; + json[&quot;country_code&quot;]
puts &quot;Country: &quot; + json[&quot;country_name&quot;]
puts &quot;Region Code: &quot; + json[&quot;region_code&quot;]
puts &quot;Region Name: &quot; + json[&quot;region_name&quot;]
puts &quot;City: &quot; + json[&quot;city&quot;]
puts &quot;Zip Code: &quot; + json[&quot;zip_code&quot;]
puts &quot;Time Zone: &quot; + json[&quot;time_zone&quot;]
puts &quot;Metro Code: &quot; + json[&quot;metro_code&quot;].to_s
puts &quot;Google Maps: https://www.google.com/maps?z=12&amp;t=m&amp;q=loc:#{json[&quot;latitude&quot;]}+#{json[&quot;longitude&quot;]}&quot;  

puts &quot;Weather right now: &quot;
puts weather[1..6]
puts &quot;&quot;
```

Let me explain how this script works. When you run it, you supply it 1 argument, the IP address or hostname of the person/device you want to track. And it returns the estimated address, relevant Google Maps link, and current weather. 

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/3e8a9019d22b7c4f721f4bedc7dfc797296d01b7.png&quot; width=&quot;648&quot; height=&quot;394&quot;&gt;

Hope you enjoyed this! I will be using this a lot ;) Cheers!

pry0cc</description>
    
    <lastBuildDate>Wed, 03 Aug 2016 12:01:32 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Geolocate IP addresses using FreeGeoIP</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/8</link>
        <pubDate>Sun, 21 Jan 2018 00:30:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-864-8</guid>
        <source url="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864.rss">Geolocate IP addresses using FreeGeoIP</source>
      </item>
      <item>
        <title>Geolocate IP addresses using FreeGeoIP</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Awesome! You know cropping is easy.</p>
<p>Do a split on newline, and then just print array item 0-6.</p>
          <p><a href="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/7</link>
        <pubDate>Wed, 03 Aug 2016 12:01:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-864-7</guid>
        <source url="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864.rss">Geolocate IP addresses using FreeGeoIP</source>
      </item>
      <item>
        <title>Geolocate IP addresses using FreeGeoIP</title>
        <dc:creator><![CDATA[ivlb]]></dc:creator>
        <description><![CDATA[
            <p>Py3 rewrite, idea credit goes to <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a></p>
<p>The only difference is that it displays full weather info (too lazy to crop).<br>
You can download the script from <a href="http://pastebin.com/0V8AP1bn" rel="nofollow noopener">pastebin</a>.</p>
<hr>
<pre><code class="lang-bash">--------------------------------------------------
longitude: -122.0574
latitude: 37.4192
region_code: CA
country_name: United States
country_code: US
city: Mountain View
metro_code: 807
ip: 216.58.212.142
region_name: California
time_zone: America/Los_Angeles
zip_code: 94043

Weather for City: Mountain View, United States of America

    \  /       Partly Cloudy 
  _ /"".-.     16 °C          
    \_(   ).   ↘ 7 km/h       
    /(___(__)  16 km          
               0.0 mm         
                                                       ┌─────────────┐                                                       
┌──────────────────────────────┬───────────────────────┤ Wed 03. Aug ├───────────────────────┬──────────────────────────────┐
│           Morning            │             Noon      └──────┬──────┘    Evening            │            Night             │
├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
│    \  /       Partly Cloudy  │     \   /     Sunny          │     \   /     Sunny          │     \   /     Clear          │
│  _ /"".-.     15 – 17 °C     │      .-.      20 – 21 °C     │      .-.      22 – 23 °C     │      .-.      16 °C          │
│    \_(   ).   ↗ 8 – 9 km/h   │   ― (   ) ―   → 10 – 12 km/h │   ― (   ) ―   → 21 km/h      │   ― (   ) ―   ↗ 10 – 11 km/h │
│    /(___(__)  10 km          │      `-’      10 km          │      `-’      10 km          │      `-’      10 km          │
│               0.0 mm | 0%    │     /   \     0.0 mm | 0%    │     /   \     0.0 mm | 0%    │     /   \     0.0 mm | 0%    │
└──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────┘
                                                       ┌─────────────┐                                                       
┌──────────────────────────────┬───────────────────────┤ Thu 04. Aug ├───────────────────────┬──────────────────────────────┐
│           Morning            │             Noon      └──────┬──────┘    Evening            │            Night             │
├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
│    \  /       Partly Cloudy  │     \   /     Sunny          │     \   /     Sunny          │               Overcast       │
│  _ /"".-.     12 – 15 °C     │      .-.      18 – 19 °C     │      .-.      24 – 25 °C     │      .--.     19 °C          │
│    \_(   ).   ↗ 9 – 10 km/h  │   ― (   ) ―   ↗ 12 – 13 km/h │   ― (   ) ―   → 18 – 21 km/h │   .-(    ).   ↗ 11 – 13 km/h │
│    /(___(__)  10 km          │      `-’      10 km          │      `-’      10 km          │  (___.__)__)  10 km          │
│               0.0 mm | 0%    │     /   \     0.0 mm | 0%    │     /   \     0.0 mm | 0%    │               0.0 mm | 0%    │
└──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────┘
                                                       ┌─────────────┐                                                       
┌──────────────────────────────┬───────────────────────┤ Fri 05. Aug ├───────────────────────┬──────────────────────────────┐
│           Morning            │             Noon      └──────┬──────┘    Evening            │            Night             │
├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
│     \   /     Sunny          │     \   /     Sunny          │     \   /     Sunny          │     \   /     Clear          │
│      .-.      18 °C          │      .-.      18 – 19 °C     │      .-.      21 – 22 °C     │      .-.      15 – 16 °C     │
│   ― (   ) ―   ↗ 9 – 11 km/h  │   ― (   ) ―   ↗ 6 – 14 km/h  │   ― (   ) ―   → 19 km/h      │   ― (   ) ―   ↗ 8 – 12 km/h  │
│      `-’      10 km          │      `-’      10 km          │      `-’      10 km          │      `-’      10 km          │
│     /   \     0.0 mm | 0%    │     /   \     0.0 mm | 0%    │     /   \     0.0 mm | 0%    │     /   \     0.0 mm | 0%    │
└──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────┘

https://www.google.com/maps?z=12&amp;t=m&amp;q=loc:@37.4192,-122.0574
--------------------------------------------------
</code></pre>
<hr>
<pre><code class="lang-auto">#!/usr/bin/python3

import requests
import argparse
from html.parser import HTMLParser


class DirtyWttrParser(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.start = False
        self.stop = False
        self.weather = str()

    def is_doable(self):
        return self.start + self.stop

    def handle_starttag(self, tag, attrs):
        if tag == 'pre':
            self.start = True

    def handle_endtag(self, tag):
        if tag == 'pre':
            self.stop = True

    def handle_data(self, data):
        if self.is_doable() == 1:
            self.weather += data


def get_data(url, type):
    try:
        r = requests.get(url)
    except Exception as e:
        print("[-] Failed fetching data")
        print(e)
        return
    if type == 'json':
        return r.json()
    elif type == 'html':
        return r.text


def main():
    # parse script args (IP)
    argsp = argparse.ArgumentParser()
    argsp.add_argument("ip", help="IP to check", type=str)
    args = argsp.parse_args()

    # init components
    ip_to_check = args.ip
    url_geoip = 'http://freegeoip.net/json/'
    url_wttr = 'http://wttr.in/'
    url_maps = 'https://www.google.com/maps?z=12&amp;t=m&amp;q=loc:@'
    parser = DirtyWttrParser()

    # get info
    ip_info = get_data(url_geoip + ip_to_check, 'json')
    parser.feed(get_data(url_wttr + '@' + ip_to_check, 'html'))

    # display info
    print('-' * 50)

    for k, v in ip_info.items():
        print('{}: {}'.format(k, v))

    print(parser.weather)

    print('{}{},{}'.format(url_maps, ip_info['latitude'], ip_info['longitude']))

    print('-' * 50)

if __name__ == '__main__':
    main()
</code></pre>
          <p><a href="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/6</link>
        <pubDate>Wed, 03 Aug 2016 10:52:27 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-864-6</guid>
        <source url="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864.rss">Geolocate IP addresses using FreeGeoIP</source>
      </item>
      <item>
        <title>Geolocate IP addresses using FreeGeoIP</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Oh yeah? Did it run at all? I’ve tested it with ruby 2.3.0</p>
          <p><a href="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/5</link>
        <pubDate>Sun, 31 Jul 2016 07:19:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-864-5</guid>
        <source url="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864.rss">Geolocate IP addresses using FreeGeoIP</source>
      </item>
      <item>
        <title>Geolocate IP addresses using FreeGeoIP</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Seems pretty dang awesome mate! <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:"></p>
          <p><a href="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/4</link>
        <pubDate>Sun, 31 Jul 2016 04:42:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-864-4</guid>
        <source url="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864.rss">Geolocate IP addresses using FreeGeoIP</source>
      </item>
      <item>
        <title>Geolocate IP addresses using FreeGeoIP</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>When I tried to use it, it hung pretty hard.</p>
          <p><a href="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/3</link>
        <pubDate>Sun, 31 Jul 2016 01:06:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-864-3</guid>
        <source url="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864.rss">Geolocate IP addresses using FreeGeoIP</source>
      </item>
      <item>
        <title>Geolocate IP addresses using FreeGeoIP</title>
        <dc:creator><![CDATA[n3xUs]]></dc:creator>
        <description><![CDATA[
            <p>I haven’t tried it out myself, but dude… it looks AWESOME!</p>
          <p><a href="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/2</link>
        <pubDate>Sat, 30 Jul 2016 23:05:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-864-2</guid>
        <source url="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864.rss">Geolocate IP addresses using FreeGeoIP</source>
      </item>
      <item>
        <title>Geolocate IP addresses using FreeGeoIP</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Welcome back command-line ninjas, I wanted to take a small break from Trix’ with Linux and decided to write myself a tool. I noticed nothing was really out that would give you a comprehensive overview of an IP, which is awesome for Recon, and being totally 1337 <img src="/images/emoji/twitter/sunglasses.png?v=9" title=":sunglasses:" class="emoji" alt=":sunglasses:"></p>
<p>This tool is written in ruby and utilises <a href="http://freegeoip.net">freegeoip.net</a>, Google maps,  and wttr.in. You can download the whole script <a href="https://gist.github.com/pry0cc/6646eb3b345c4cf7490f3d152e4b1ac5">here</a> so that you don’t have to mess around with copy and pasting <img src="/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>Keep in mind you will need Mechanize installed, to install this ruby gem, just run <code>gem install mechanize</code> and you should be good to go!</p>
<p>Heres the script:</p>
<pre><code class="lang-ruby">#!/usr/bin/env ruby

require 'json'
require 'mechanize'
require 'rubygems'
require 'open-uri'

puts "Looking up #{ARGV[0]}"

agent = Mechanize.new
data = agent.get("http://freegeoip.net/json/#{ARGV[0]}").body

json = JSON.parse(data)
agent.user_agent = "curl/7.50.0"
weather = agent.get("http://wttr.in/#{json["city"]}").body.split("\n")
puts "Country Code: " + json["country_code"]
puts "Country: " + json["country_name"]
puts "Region Code: " + json["region_code"]
puts "Region Name: " + json["region_name"]
puts "City: " + json["city"]
puts "Zip Code: " + json["zip_code"]
puts "Time Zone: " + json["time_zone"]
puts "Metro Code: " + json["metro_code"].to_s
puts "Google Maps: https://www.google.com/maps?z=12&amp;t=m&amp;q=loc:#{json["latitude"]}+#{json["longitude"]}"  

puts "Weather right now: "
puts weather[1..6]
puts ""
</code></pre>
<p>Let me explain how this script works. When you run it, you supply it 1 argument, the IP address or hostname of the person/device you want to track. And it returns the estimated address, relevant Google Maps link, and current weather.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/3e8a9019d22b7c4f721f4bedc7dfc797296d01b7.png" width="648" height="394"></p>
<p>Hope you enjoyed this! I will be using this a lot <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"> Cheers!</p>
<p>pry0cc</p>
          <p><a href="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864/1</link>
        <pubDate>Sat, 30 Jul 2016 22:03:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-864-1</guid>
        <source url="https://0x00sec.org/t/geolocate-ip-addresses-using-freegeoip/864.rss">Geolocate IP addresses using FreeGeoIP</source>
      </item>
  </channel>
</rss>
