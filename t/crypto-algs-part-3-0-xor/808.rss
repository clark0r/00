<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Crypto Algs (Part 3.0): XOR</title>
    <link>https://0x00sec.org/t/crypto-algs-part-3-0-xor/808</link>
    <description>Hello again. I know [Fust3rCluck](https://0x00sec.org/t/xor-encryption-using-c/799) covered this, but I had something different in mind...

XOR, or Exclusive XOR, is a [Boolean Logic Gate](https://en.wikipedia.org/wiki/Logic_gate). Like most of the other logic gates, XOR takes two parameters. Thus, it is a binary logic gate.

![XOR truth table](//0x00sec.s3.amazonaws.com/original/1X/3878737716456c9c306fdee73192e7d8d4cd6d5d.png)

XOR is a computationally easy form of encryption. However, it certainly is breakable. What follows is my take on it.

---
# Proof

    Given: n XOR n = 0
      and: n XOR 0 = n
    Plaintext: p
    Ciphertext: p XOR n = c
    Decrypted: c XOR n = p

    p XOR n = c
    c XOR n = p

    (p XOR n) XOR n = p
    p XOR (n XOR n) = p
    n XOR n = 0
    p XOR (0) = p
    p = p

---
# Implementation

__encrypt.cpp__
```c
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

namespace XOR {
    std::vector&lt;unsigned char&gt;
    encrypt(const std::vector&lt;unsigned char&gt; str, const std::string&amp; key)
    {
        std::vector&lt;unsigned char&gt; res(str.begin(), str.end());

        for (int i = 0, n = str.size(), m = key.length(); i &lt; n; i++) {
            res[i] ^= key[i % m];
        }

        return res;
    }

    std::vector&lt;unsigned char&gt;
    decrypt(const std::vector&lt;unsigned char&gt;&amp; str, const std::string&amp; key)
    {
        return encrypt(str,key);
    }
};
```
The above code is pretty straightforward. I am using the `std::vector` container in place of `std::string` to avoid any awkward null-terminators, which could be present when copying an encrypted message into a new `std::string`. Essentially, a `std::vector&lt;unsigned char&gt;` is a string.

Notice that the `decrypt(...)` function simply calls the above `encrypt(...)` function. Unlike in the [Vigenere Cipher](https://0x00sec.org/t/crypto-algs-part-2-0-vigenere/780) code, there is no need to complement the key before decryption. This is because of the above proof.

```
#include &quot;./encrypt.cpp&quot;
#include &lt;iomanip&gt;

void hex_print(const std::vector&lt;unsigned char&gt;&amp; s) {
    std::cout &lt;&lt; std::hex;
    for (auto&amp; c : s) {
        std::cout &lt;&lt; int(c) &lt;&lt; &quot; &quot;;
    }
    std::cout &lt;&lt; std::hex &lt;&lt; std::endl;
}

int main() {
    std::string s,k;
    std::getline(std::cin, s);
    std::getline(std::cin, k);

    std::vector&lt;unsigned char&gt; v(s.begin(),s.end());
    v = XOR::encrypt(v,k);

    hex_print(v);

    v = XOR::decrypt(v, k);

    for(auto&amp; c : v) {
        std::cout &lt;&lt; c;
    }
    std::cout &lt;&lt; std::endl;

    return 0;   
}
```
The above code interfaces with that mini library I wrote (__encrypt.cpp__). We `hex_print(...)` the ciphertext because some of the characters could be unreadable ASCII characters. We don&#39;t have to worry about this when we decrypt the ciphertext -- as long as our encryption scheme is implemented correctly, that is...

---
# Conclusion
You may see a few similarities between the Vigenere program I wrote and the above code. The program outlined here allows for a variable-length key, rather than a one-byte key or a statically defined key. This is both convenient and more secure.

Feel free to play around with the code. It&#39;s all there.

Later...
@oaktree</description>
    
    <lastBuildDate>Mon, 25 Jul 2016 05:17:39 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/crypto-algs-part-3-0-xor/808.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Crypto Algs (Part 3.0): XOR</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-3-0-xor/808/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-3-0-xor/808/3</link>
        <pubDate>Sun, 21 Jan 2018 00:37:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-808-3</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-3-0-xor/808.rss">Crypto Algs (Part 3.0): XOR</source>
      </item>
      <item>
        <title>Crypto Algs (Part 3.0): XOR</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Loved it mate! Keep it up! Love the series as a whole!</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-3-0-xor/808/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-3-0-xor/808/2</link>
        <pubDate>Mon, 25 Jul 2016 05:17:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-808-2</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-3-0-xor/808.rss">Crypto Algs (Part 3.0): XOR</source>
      </item>
      <item>
        <title>Crypto Algs (Part 3.0): XOR</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Hello again. I know <a href="https://0x00sec.org/t/xor-encryption-using-c/799">Fust3rCluck</a> covered this, but I had something different in mind…</p>
<p>XOR, or Exclusive XOR, is a <a href="https://en.wikipedia.org/wiki/Logic_gate" rel="noopener nofollow ugc">Boolean Logic Gate</a>. Like most of the other logic gates, XOR takes two parameters. Thus, it is a binary logic gate.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/3878737716456c9c306fdee73192e7d8d4cd6d5d.png" alt="XOR truth table"></p>
<p>XOR is a computationally easy form of encryption. However, it certainly is breakable. What follows is my take on it.</p>
<hr>
<h1>Proof</h1>
<pre><code>Given: n XOR n = 0
  and: n XOR 0 = n
Plaintext: p
Ciphertext: p XOR n = c
Decrypted: c XOR n = p

p XOR n = c
c XOR n = p

(p XOR n) XOR n = p
p XOR (n XOR n) = p
n XOR n = 0
p XOR (0) = p
p = p
</code></pre>
<hr>
<h1>Implementation</h1>
<p><strong>encrypt.cpp</strong></p>
<pre><code class="lang-auto">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

namespace XOR {
    std::vector&lt;unsigned char&gt;
    encrypt(const std::vector&lt;unsigned char&gt; str, const std::string&amp; key)
    {
        std::vector&lt;unsigned char&gt; res(str.begin(), str.end());

        for (int i = 0, n = str.size(), m = key.length(); i &lt; n; i++) {
            res[i] ^= key[i % m];
        }

        return res;
    }

    std::vector&lt;unsigned char&gt;
    decrypt(const std::vector&lt;unsigned char&gt;&amp; str, const std::string&amp; key)
    {
        return encrypt(str,key);
    }
};
</code></pre>
<p>The above code is pretty straightforward. I am using the <code>std::vector</code> container in place of <code>std::string</code> to avoid any awkward null-terminators, which could be present when copying an encrypted message into a new <code>std::string</code>. Essentially, a <code>std::vector&lt;unsigned char&gt;</code> is a string.</p>
<p>Notice that the <code>decrypt(...)</code> function simply calls the above <code>encrypt(...)</code> function. Unlike in the <a href="https://0x00sec.org/t/crypto-algs-part-2-0-vigenere/780">Vigenere Cipher</a> code, there is no need to complement the key before decryption. This is because of the above proof.</p>
<pre><code class="lang-auto">#include "./encrypt.cpp"
#include &lt;iomanip&gt;

void hex_print(const std::vector&lt;unsigned char&gt;&amp; s) {
    std::cout &lt;&lt; std::hex;
    for (auto&amp; c : s) {
        std::cout &lt;&lt; int(c) &lt;&lt; " ";
    }
    std::cout &lt;&lt; std::hex &lt;&lt; std::endl;
}

int main() {
    std::string s,k;
    std::getline(std::cin, s);
    std::getline(std::cin, k);

    std::vector&lt;unsigned char&gt; v(s.begin(),s.end());
    v = XOR::encrypt(v,k);

    hex_print(v);

    v = XOR::decrypt(v, k);

    for(auto&amp; c : v) {
        std::cout &lt;&lt; c;
    }
    std::cout &lt;&lt; std::endl;

    return 0;   
}
</code></pre>
<p>The above code interfaces with that mini library I wrote (<strong>encrypt.cpp</strong>). We <code>hex_print(...)</code> the ciphertext because some of the characters could be unreadable ASCII characters. We don’t have to worry about this when we decrypt the ciphertext – as long as our encryption scheme is implemented correctly, that is…</p>
<hr>
<h1>Conclusion</h1>
<p>You may see a few similarities between the Vigenere program I wrote and the above code. The program outlined here allows for a variable-length key, rather than a one-byte key or a statically defined key. This is both convenient and more secure.</p>
<p>Feel free to play around with the code. It’s all there.</p>
<p>Later…<br>
<a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a></p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-3-0-xor/808/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-3-0-xor/808/1</link>
        <pubDate>Sun, 24 Jul 2016 19:45:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-808-1</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-3-0-xor/808.rss">Crypto Algs (Part 3.0): XOR</source>
      </item>
  </channel>
</rss>
