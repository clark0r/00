<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C] Dynamic Memory (Part 2.0): Arrays on the Heap</title>
    <link>https://0x00sec.org/t/c-dynamic-memory-part-2-0-arrays-on-the-heap/965</link>
    <description>Alright. Because I like doing these and find this topic to be &quot;okay&quot;, difficulty-wise, I&#39;m doing two articles in two days. This is _Part 2.0_, the followup to _[Part 1.0](https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960)_, which was about using `malloc` and `free` on pointers.

In this article, we&#39;ll be using the same functions (`malloc` and `free`), but with _arrays_. So, oak, what&#39;s the difference? I&#39;m glad you asked!

Let&#39;s walk through an example...

---
```c
// ...
char* s1 = &quot;bjldjfdjf&quot;;

char* s2 = malloc( sizeof(char) * ( strlen(s1) + 1) );
// note: we allocate for strlen(s1) + 1 because of the &#39;\0&#39; character present at the end of a C string.

if (!s2)
    perror(&quot;Couldn&#39;t alloc for s2&quot;);

for (int i = 0, n = strlen(s1); i &lt; n; i++)
    s2[i] = s1[i];

s2[strlen(s1)] = &#39;\0&#39;;

printf(&quot;s1: %s\ns2: %s\n&quot;, s1, s2);

free(s2);

// ...
```
Alright, so the above code is essentially pointless and does what `strdup` does (look it up if you&#39;d like, but it&#39;s irrelevant to this topic so don&#39;t let it confuse you).

Essentially, you can declare a string in C with a _string literal_, which means that the string is hardcoded into your program.

`s1` is declared and assigned a string literal. `s2`, another `char *` is `malloc`d to match the length of `s1`, and we proceed to copy the contents of `s1` into `s2`.

See, you could call `malloc` with the parameter of just `sizeof( char )` to get space for just one character. But, you can also allocate enough memory for several &quot;units&quot; of the relevant type.

As a followup example, to create an integer array of 5 elements on the heap, I can do:
```c
int *arr = malloc( sizeof(int) * 5 );
```
This essentially gives me 5 `int`s worth of space. I can access each element as you would with a static array, using the subscript operator:

```c
arr[3] = 609;
```
I can do whatever I want with the 5 elements I have allocated.

---
Now, back to that `char *` example... There&#39;s one thing about strings in C that make them stand out amongst other arrays. While you could easily store a 5-character string in a 5-char memory block, you store it in a 6-char memory block instead, reserving the last element, the 6th element, for a special character. This last element holds the value `&#39;\0&#39;`, the null byte, for which our former community was named.

The null byte&#39;s role is to delimit a string. _A delimiter is a symbol used to mark or note something._ In this case, the null byte marks the end of the string. If you didn&#39;t have a null byte in a C string, your program might think that that string never ends. Such would lead to what is referred to in the CS community as _undefined behaviour_.

---
# Conclusion

That&#39;s all for the second edition of this series. If any additional explanations are needed, please ask below.

Next time, we&#39;ll get into what happens when you want to grow or shrink the array, depending on your needs.

Arrays All Day
@oaktree</description>
    
    <lastBuildDate>Wed, 24 Aug 2016 00:59:59 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/c-dynamic-memory-part-2-0-arrays-on-the-heap/965.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C] Dynamic Memory (Part 2.0): Arrays on the Heap</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-2-0-arrays-on-the-heap/965/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-2-0-arrays-on-the-heap/965/2</link>
        <pubDate>Sun, 21 Jan 2018 00:30:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-965-2</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-2-0-arrays-on-the-heap/965.rss">[C] Dynamic Memory (Part 2.0): Arrays on the Heap</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 2.0): Arrays on the Heap</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Alright. Because I like doing these and find this topic to be “okay”, difficulty-wise, I’m doing two articles in two days. This is <em>Part 2.0</em>, the followup to <em><a href="https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960">Part 1.0</a></em>, which was about using <code>malloc</code> and <code>free</code> on pointers.</p>
<p>In this article, we’ll be using the same functions (<code>malloc</code> and <code>free</code>), but with <em>arrays</em>. So, oak, what’s the difference? I’m glad you asked!</p>
<p>Let’s walk through an example…</p>
<hr>
<pre><code class="lang-auto">// ...
char* s1 = "bjldjfdjf";

char* s2 = malloc( sizeof(char) * ( strlen(s1) + 1) );
// note: we allocate for strlen(s1) + 1 because of the '\0' character present at the end of a C string.

if (!s2)
    perror("Couldn't alloc for s2");

for (int i = 0, n = strlen(s1); i &lt; n; i++)
    s2[i] = s1[i];

s2[strlen(s1)] = '\0';

printf("s1: %s\ns2: %s\n", s1, s2);

free(s2);

// ...
</code></pre>
<p>Alright, so the above code is essentially pointless and does what <code>strdup</code> does (look it up if you’d like, but it’s irrelevant to this topic so don’t let it confuse you).</p>
<p>Essentially, you can declare a string in C with a <em>string literal</em>, which means that the string is hardcoded into your program.</p>
<p><code>s1</code> is declared and assigned a string literal. <code>s2</code>, another <code>char *</code> is <code>malloc</code>d to match the length of <code>s1</code>, and we proceed to copy the contents of <code>s1</code> into <code>s2</code>.</p>
<p>See, you could call <code>malloc</code> with the parameter of just <code>sizeof( char )</code> to get space for just one character. But, you can also allocate enough memory for several “units” of the relevant type.</p>
<p>As a followup example, to create an integer array of 5 elements on the heap, I can do:</p>
<pre><code class="lang-auto">int *arr = malloc( sizeof(int) * 5 );
</code></pre>
<p>This essentially gives me 5 <code>int</code>s worth of space. I can access each element as you would with a static array, using the subscript operator:</p>
<pre><code class="lang-auto">arr[3] = 609;
</code></pre>
<p>I can do whatever I want with the 5 elements I have allocated.</p>
<hr>
<p>Now, back to that <code>char *</code> example… There’s one thing about strings in C that make them stand out amongst other arrays. While you could easily store a 5-character string in a 5-char memory block, you store it in a 6-char memory block instead, reserving the last element, the 6th element, for a special character. This last element holds the value <code>'\0'</code>, the null byte, for which our former community was named.</p>
<p>The null byte’s role is to delimit a string. <em>A delimiter is a symbol used to mark or note something.</em> In this case, the null byte marks the end of the string. If you didn’t have a null byte in a C string, your program might think that that string never ends. Such would lead to what is referred to in the CS community as <em>undefined behaviour</em>.</p>
<hr>
<h1>Conclusion</h1>
<p>That’s all for the second edition of this series. If any additional explanations are needed, please ask below.</p>
<p>Next time, we’ll get into what happens when you want to grow or shrink the array, depending on your needs.</p>
<p>Arrays All Day<br>
<a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a></p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-2-0-arrays-on-the-heap/965/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-2-0-arrays-on-the-heap/965/1</link>
        <pubDate>Wed, 24 Aug 2016 00:59:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-965-1</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-2-0-arrays-on-the-heap/965.rss">[C] Dynamic Memory (Part 2.0): Arrays on the Heap</source>
      </item>
  </channel>
</rss>
