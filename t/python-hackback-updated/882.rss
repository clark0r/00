<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Python : HackBack [ Updated ]</title>
    <link>https://0x00sec.org/t/python-hackback-updated/882</link>
    <description>Hello World ! Today, I look the auth.log file from my VPS and I see a lot of bruteforce attempt. I decided to make a python Script called **HackBack**.

This script will get the ip who failed to log in your server and do a passive recon with the shodan api.

Here is the script : 
```python
#!/usr/bin/python3.4
import re
import urllib.request
import json
log_path = &quot;/var/log/auth.log&quot;
hosts = []
key = &quot;{YOUR_API_KEY}&quot;
#GET FAILED PASSWORD ATTEMPT
def get_host(test):
        for line in text.split(&#39;\n&#39;):
                if line.find(&quot;Failed password for invalid &quot;) != -1:
                        if get_ip(line) not in hosts:
                                hosts.append(get_ip(line))
        return hosts
#GET USERNAME
def get_username(line):
        username_word = line.split(&quot;Failed password for invalid user &quot;)
        username = (username_word[1]).split(&quot; &quot;)
        return username[0]

#LOCATE IP WITH GEOIP
def geoip(host):
        response = urllib.request.urlopen(&quot;http://freegeoip.net/json/&quot;+host)
        geoip = response.read().decode(&quot;utf-8&quot;)
        geoip = json.loads(geoip)
        print(&quot;\n[+] Tracking ip {}&quot;.format(geoip[&#39;ip&#39;]))
        print(&quot;-------------------------------&quot;)
        print(&#39;\tCountry : {}\n\ttimezone : {}\n\tlatitude : {}\n\tlongitude : {}&#39;.format(geoip[&#39;country_name&#39;],geoip[&#39;time_zone&#39;],geoip[&#39;latitude&#39;],geoip[&#39;longitude&#39;]))
def passive_recon(host,key):
        url = &quot;https://api.shodan.io/shodan/host/{}?key={}&amp;minify=true&quot;.format(host,key)
        try:
                response = urllib.request.urlopen(url)
                result = response.read().decode(&#39;utf-8&#39;)
                result = json.loads(result)
                print(&quot;[+] Passive Recon using shodan.io&quot;)
                print(&quot;-------------------------------&quot;)
                print(&quot;\tPort : {}\n\tOrganisation {}&quot;.format(result[&#39;ports&#39;],result[&#39;org&#39;]))
                for x in range(len(result[&#39;ports&#39;])):
                        print(&quot;Banner {}&quot;.format(result[&#39;data&#39;][x][&#39;data&#39;]))
        except:
                print(&quot;[+] Passive Recon using shodan.io&quot;)
                print(&quot;-------------------------------&quot;)
                print(&quot;\tCan&#39;t retrieve information&quot;)
                pass
if __name__ == &quot;__main__&quot;:
        with open(log_path, &#39;rt&#39;) as log:
                text = log.read()
get_host(text)
for host in hosts:
        geoip(host)
        passive_recon(host,key)

```

## What the script does ?

Here are all the functions explained : 

```python
def get_host(test):
        for line in text.split(&#39;\n&#39;):
                if line.find(&quot;Failed password for invalid &quot;) != -1:
                        if get_ip(line) not in hosts:
                                hosts.append(get_ip(line))
        return hosts
```

```python
def get_username(line):
        username_word = line.split(&quot;Failed password for invalid user &quot;)
        username = (username_word[1]).split(&quot; &quot;)
        return username[0]
```

These functions will get the ip and username tested from the auth.log file

To locate the ip, I use freegeoip.net to get some ip location ( but you could use shodan.io api ) , this function just parse the json output to a pretty text ouput.
```python
def geoip(host):
        response = urllib.request.urlopen(&quot;http://freegeoip.net/json/&quot;+host)
        geoip = response.read().decode(&quot;utf-8&quot;)
        geoip = json.loads(geoip)
        print(&quot;\n[+] Tracking ip {}&quot;.format(geoip[&#39;ip&#39;]))
        print(&quot;-------------------------------&quot;)
        print(&#39;\tCountry : {}\n\ttimezone : {}\n\tlatitude : {}\n\tlongitude : {}&#39;.format(geoip[&#39;country_name&#39;],geoip[&#39;time_zone&#39;],geoip[&#39;latitude&#39;],geoip[&#39;longitude&#39;]))
```

Here we&#39;re doing passive recon with shodan : 
```python
def passive_recon(host,key):
        url = &quot;https://api.shodan.io/shodan/host/{}?key={}&amp;minify=true&quot;.format(host,key)
        try:
                response = urllib.request.urlopen(url)
                result = response.read().decode(&#39;utf-8&#39;)
                result = json.loads(result)
                print(&quot;[+] Passive Recon using shodan.io&quot;)
                print(&quot;-------------------------------&quot;)
                print(&quot;\tPort : {}\n\tOrganisation {}&quot;.format(result[&#39;ports&#39;],result[&#39;org&#39;]))
                for x in range(len(result[&#39;ports&#39;])):
                        print(&quot;Banner {}&quot;.format(result[&#39;data&#39;][x][&#39;data&#39;]))
        #If we don&#39;t get a 200 response code print &#39;Can&#39;t retrive information
        except:
                print(&quot;[+] Passive Recon using shodan.io&quot;)
                print(&quot;-------------------------------&quot;)
                print(&quot;\tCan&#39;t retrieve information&quot;)
                pass
```

To get information about the hackers : 
```bash
./hackBack.py
```

Enjoy :)

# *Update*

Thank a lot for your feedback :) I have some idea now for a new version of **HackBack**, maybe a honeyPot kind of thing :) I&#39;ll post the code on github and make a new post for the update :) 

Preview 

https://imgur.com/a/e1GWS</description>
    
    <lastBuildDate>Tue, 02 Aug 2016 21:09:30 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/python-hackback-updated/882.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Python : HackBack [ Updated ]</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/python-hackback-updated/882/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-hackback-updated/882/13</link>
        <pubDate>Sun, 21 Jan 2018 00:30:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-882-13</guid>
        <source url="https://0x00sec.org/t/python-hackback-updated/882.rss">Python : HackBack [ Updated ]</source>
      </item>
      <item>
        <title>Python : HackBack [ Updated ]</title>
        <dc:creator><![CDATA[L3akM3-0day]]></dc:creator>
        <description><![CDATA[
            <p>That’s why it only do passive recon and show ip location right now.[quote=“L3akM3-0day, post:10, topic:882”]<br>
possible feature * Use proxy/vpn and/or tor to bruteforce* Search if an exploit is available on exploit-dbif not exploit is available use bruteforce technique on ssh, telnetif web server is available search for sql injection to get admin panel</p>
<p>if The exploitation is sucessful : drop a logic bomb<br>
if the exploitation is successful : add it to yout botnet<br>
[/quote]</p>
<p>Those won’t surely not be in the final version because of script kiddies ( and those are blackhat way technique ).<br>
and as you said[quote=“oaktree, post:11, topic:882”]<br>
Counter-attacks are still attacks. As such, they will be treated as any other kind of hacking attempt, meaning there can be severe consequences.<br>
[/quote]</p>
<p>The Open Source version will only have</p>
<aside class="quote no-group quote-modified" data-username="L3akM3-0day" data-post="10" data-topic="882">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/l3akm3-0day/40/29_2.png" class="avatar"> L3akM3-0day:</div>
<blockquote>
<p>Get password tried by hacker to have some good worlist<br>
Get username tried by hacker to have some good worlist<br>
Search if an exploit is available on exploit-db</p>
</blockquote>
</aside>
          <p><a href="https://0x00sec.org/t/python-hackback-updated/882/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-hackback-updated/882/12</link>
        <pubDate>Tue, 02 Aug 2016 21:09:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-882-12</guid>
        <source url="https://0x00sec.org/t/python-hackback-updated/882.rss">Python : HackBack [ Updated ]</source>
      </item>
      <item>
        <title>Python : HackBack [ Updated ]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>I think it’s time I add:</p>
<p><em><strong>Counter-attacks are still attacks. As such, they will be treated as any other kind of hacking attempt, meaning there can be severe consequences.</strong></em></p>
<p>What you’re doing should only be a <em>PoC</em>.</p>
          <p><a href="https://0x00sec.org/t/python-hackback-updated/882/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-hackback-updated/882/11</link>
        <pubDate>Tue, 02 Aug 2016 20:59:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-882-11</guid>
        <source url="https://0x00sec.org/t/python-hackback-updated/882.rss">Python : HackBack [ Updated ]</source>
      </item>
      <item>
        <title>Python : HackBack [ Updated ]</title>
        <dc:creator><![CDATA[L3akM3-0day]]></dc:creator>
        <description><![CDATA[
            <p>The script is called HackBack because I wanted hack the hacker. I planned on doing a lot of thing :</p>
<ul>
<li>Get password tried by hacker to have some good worlist</li>
<li>Get username tried by hacker to have some good worlist</li>
</ul>
<p>possible feature</p>
<ul>
<li>
<p>Use proxy/vpn and/or tor to bruteforce</p>
</li>
<li>
<p>Search if an exploit is available on exploit-db<br>
if not exploit is available use bruteforce technique on ssh, telnet<br>
if web server is available search for sql injection to get admin panel</p>
</li>
<li>
<p>if The exploitation is sucessful : drop a logic bomb</p>
</li>
<li>
<p>if the exploitation is successful : add it to yout botnet</p>
</li>
</ul>
<p>This is what the script could possibly do, but this is kind of blackhat way ^^. I’ll see what feature will really be available</p>
          <p><a href="https://0x00sec.org/t/python-hackback-updated/882/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-hackback-updated/882/10</link>
        <pubDate>Tue, 02 Aug 2016 20:31:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-882-10</guid>
        <source url="https://0x00sec.org/t/python-hackback-updated/882.rss">Python : HackBack [ Updated ]</source>
      </item>
      <item>
        <title>Python : HackBack [ Updated ]</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>Well, letting it blindly bruteforce things could be a bit dangerous (especially if its the NSA who tried to hack you <img src="https://0x00sec.org/images/emoji/twitter/joy.png?v=9" title=":joy:" class="emoji" alt=":joy:">) So I think at least a confirmation by the user would be better.</p>
          <p><a href="https://0x00sec.org/t/python-hackback-updated/882/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-hackback-updated/882/9</link>
        <pubDate>Tue, 02 Aug 2016 20:26:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-882-9</guid>
        <source url="https://0x00sec.org/t/python-hackback-updated/882.rss">Python : HackBack [ Updated ]</source>
      </item>
      <item>
        <title>Python : HackBack [ Updated ]</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Yes. Thats absolutely what I think should happen</p>
          <p><a href="https://0x00sec.org/t/python-hackback-updated/882/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-hackback-updated/882/8</link>
        <pubDate>Tue, 02 Aug 2016 20:23:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-882-8</guid>
        <source url="https://0x00sec.org/t/python-hackback-updated/882.rss">Python : HackBack [ Updated ]</source>
      </item>
      <item>
        <title>Python : HackBack [ Updated ]</title>
        <dc:creator><![CDATA[L3akM3-0day]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="oaktree" data-post="5" data-topic="882" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/oaktree/40/4077_2.png" class="avatar"> oaktree:</div>
<blockquote>
<p>You know what could make this even better? Make it a daemon that scans your logs every day and proceeds automatically.</p>
</blockquote>
</aside>
<p>This is something I’ve planned on doing.</p>
<aside class="quote group-VIP" data-username="pry0cc" data-post="6" data-topic="882">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/pry0cc/40/6_2.png" class="avatar"> pry0cc:</div>
<blockquote>
<p>It would be even better if it processed it into a nice HTML report</p>
</blockquote>
</aside>
<p>Well, I didn’t think about that but it’s a good idea :), I’ll update the script</p>
<aside class="quote group-VIP" data-username="pry0cc" data-post="6" data-topic="882">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/pry0cc/40/6_2.png" class="avatar"> pry0cc:</div>
<blockquote>
<p>sorted those servers that have SSH servers, and then automatically cue them to be bruteforced.</p>
</blockquote>
</aside>
<p>I don’t get it.<br>
Do you mean the script should bruteforce the hackers ?</p>
          <p><a href="https://0x00sec.org/t/python-hackback-updated/882/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-hackback-updated/882/7</link>
        <pubDate>Tue, 02 Aug 2016 18:09:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-882-7</guid>
        <source url="https://0x00sec.org/t/python-hackback-updated/882.rss">Python : HackBack [ Updated ]</source>
      </item>
      <item>
        <title>Python : HackBack [ Updated ]</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>OHHHH (<em>Deep gravely voice</em>)</p>
<p>It would be even better if it processed it into a nice HTML report, sorted those servers that have SSH servers, and then automatically cue them to be bruteforced. And then send you daily reports of the attackers.</p>
          <p><a href="https://0x00sec.org/t/python-hackback-updated/882/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-hackback-updated/882/6</link>
        <pubDate>Tue, 02 Aug 2016 17:16:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-882-6</guid>
        <source url="https://0x00sec.org/t/python-hackback-updated/882.rss">Python : HackBack [ Updated ]</source>
      </item>
      <item>
        <title>Python : HackBack [ Updated ]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>You know what could make this even better? Make it a daemon that scans your logs every day and proceeds automatically.</p>
          <p><a href="https://0x00sec.org/t/python-hackback-updated/882/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-hackback-updated/882/5</link>
        <pubDate>Tue, 02 Aug 2016 16:53:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-882-5</guid>
        <source url="https://0x00sec.org/t/python-hackback-updated/882.rss">Python : HackBack [ Updated ]</source>
      </item>
      <item>
        <title>Python : HackBack [ Updated ]</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>This is…Well bloody hell mate this is freakin awesome! Great job! I’m absolutely amazed! Thanks for sharing it. <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:"></p>
          <p><a href="https://0x00sec.org/t/python-hackback-updated/882/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-hackback-updated/882/4</link>
        <pubDate>Tue, 02 Aug 2016 16:12:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-882-4</guid>
        <source url="https://0x00sec.org/t/python-hackback-updated/882.rss">Python : HackBack [ Updated ]</source>
      </item>
      <item>
        <title>Python : HackBack [ Updated ]</title>
        <dc:creator><![CDATA[L3akM3-0day]]></dc:creator>
        <description><![CDATA[
            <p>This is a good idea <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/python-hackback-updated/882/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-hackback-updated/882/3</link>
        <pubDate>Tue, 02 Aug 2016 14:05:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-882-3</guid>
        <source url="https://0x00sec.org/t/python-hackback-updated/882.rss">Python : HackBack [ Updated ]</source>
      </item>
      <item>
        <title>Python : HackBack [ Updated ]</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Very very very nice <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> I once thought about this, but I never got round to it!</p>
<p><img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji only-emoji" alt=":wink:"></p>
<p>Perhaps upload on github?</p>
          <p><a href="https://0x00sec.org/t/python-hackback-updated/882/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-hackback-updated/882/2</link>
        <pubDate>Tue, 02 Aug 2016 14:03:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-882-2</guid>
        <source url="https://0x00sec.org/t/python-hackback-updated/882.rss">Python : HackBack [ Updated ]</source>
      </item>
      <item>
        <title>Python : HackBack [ Updated ]</title>
        <dc:creator><![CDATA[L3akM3-0day]]></dc:creator>
        <description><![CDATA[
            <p>Hello World ! Today, I look the auth.log file from my VPS and I see a lot of bruteforce attempt. I decided to make a python Script called <strong>HackBack</strong>.</p>
<p>This script will get the ip who failed to log in your server and do a passive recon with the shodan api.</p>
<p>Here is the script :</p>
<pre><code class="lang-python">#!/usr/bin/python3.4
import re
import urllib.request
import json
log_path = "/var/log/auth.log"
hosts = []
key = "{YOUR_API_KEY}"
#GET FAILED PASSWORD ATTEMPT
def get_host(test):
        for line in text.split('\n'):
                if line.find("Failed password for invalid ") != -1:
                        if get_ip(line) not in hosts:
                                hosts.append(get_ip(line))
        return hosts
#GET USERNAME
def get_username(line):
        username_word = line.split("Failed password for invalid user ")
        username = (username_word[1]).split(" ")
        return username[0]

#LOCATE IP WITH GEOIP
def geoip(host):
        response = urllib.request.urlopen("http://freegeoip.net/json/"+host)
        geoip = response.read().decode("utf-8")
        geoip = json.loads(geoip)
        print("\n[+] Tracking ip {}".format(geoip['ip']))
        print("-------------------------------")
        print('\tCountry : {}\n\ttimezone : {}\n\tlatitude : {}\n\tlongitude : {}'.format(geoip['country_name'],geoip['time_zone'],geoip['latitude'],geoip['longitude']))
def passive_recon(host,key):
        url = "https://api.shodan.io/shodan/host/{}?key={}&amp;minify=true".format(host,key)
        try:
                response = urllib.request.urlopen(url)
                result = response.read().decode('utf-8')
                result = json.loads(result)
                print("[+] Passive Recon using shodan.io")
                print("-------------------------------")
                print("\tPort : {}\n\tOrganisation {}".format(result['ports'],result['org']))
                for x in range(len(result['ports'])):
                        print("Banner {}".format(result['data'][x]['data']))
        except:
                print("[+] Passive Recon using shodan.io")
                print("-------------------------------")
                print("\tCan't retrieve information")
                pass
if __name__ == "__main__":
        with open(log_path, 'rt') as log:
                text = log.read()
get_host(text)
for host in hosts:
        geoip(host)
        passive_recon(host,key)

</code></pre>
<h2>What the script does ?</h2>
<p>Here are all the functions explained :</p>
<pre><code class="lang-python">def get_host(test):
        for line in text.split('\n'):
                if line.find("Failed password for invalid ") != -1:
                        if get_ip(line) not in hosts:
                                hosts.append(get_ip(line))
        return hosts
</code></pre>
<pre><code class="lang-python">def get_username(line):
        username_word = line.split("Failed password for invalid user ")
        username = (username_word[1]).split(" ")
        return username[0]
</code></pre>
<p>These functions will get the ip and username tested from the auth.log file</p>
<p>To locate the ip, I use <a href="http://freegeoip.net" rel="noopener nofollow ugc">freegeoip.net</a> to get some ip location ( but you could use <a href="http://shodan.io" rel="noopener nofollow ugc">shodan.io</a> api ) , this function just parse the json output to a pretty text ouput.</p>
<pre><code class="lang-python">def geoip(host):
        response = urllib.request.urlopen("http://freegeoip.net/json/"+host)
        geoip = response.read().decode("utf-8")
        geoip = json.loads(geoip)
        print("\n[+] Tracking ip {}".format(geoip['ip']))
        print("-------------------------------")
        print('\tCountry : {}\n\ttimezone : {}\n\tlatitude : {}\n\tlongitude : {}'.format(geoip['country_name'],geoip['time_zone'],geoip['latitude'],geoip['longitude']))
</code></pre>
<p>Here we’re doing passive recon with shodan :</p>
<pre><code class="lang-python">def passive_recon(host,key):
        url = "https://api.shodan.io/shodan/host/{}?key={}&amp;minify=true".format(host,key)
        try:
                response = urllib.request.urlopen(url)
                result = response.read().decode('utf-8')
                result = json.loads(result)
                print("[+] Passive Recon using shodan.io")
                print("-------------------------------")
                print("\tPort : {}\n\tOrganisation {}".format(result['ports'],result['org']))
                for x in range(len(result['ports'])):
                        print("Banner {}".format(result['data'][x]['data']))
        #If we don't get a 200 response code print 'Can't retrive information
        except:
                print("[+] Passive Recon using shodan.io")
                print("-------------------------------")
                print("\tCan't retrieve information")
                pass
</code></pre>
<p>To get information about the hackers :</p>
<pre><code class="lang-bash">./hackBack.py
</code></pre>
<p>Enjoy <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<h1><em>Update</em></h1>
<p>Thank a lot for your feedback <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> I have some idea now for a new version of <strong>HackBack</strong>, maybe a honeyPot kind of thing <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> I’ll post the code on github and make a new post for the update <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Preview</p>
<p>            </p><div class="onebox imgur-album">
              <a href="https://imgur.com/a/e1GWS" target="_blank" rel="noopener nofollow ugc">
                <span class="outer-box" style="width:600px">
                  <span class="inner-box">
                    <span class="album-title">[Album] imgur.com</span>
                  </span>
                </span>
                <img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8cf886c86b6b1a8c8ade8b07935777ee857c98b2.jpeg" title="imgur.com" height="315" width="600">
              </a>
            </div>

          <p><a href="https://0x00sec.org/t/python-hackback-updated/882/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-hackback-updated/882/1</link>
        <pubDate>Tue, 02 Aug 2016 12:22:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-882-1</guid>
        <source url="https://0x00sec.org/t/python-hackback-updated/882.rss">Python : HackBack [ Updated ]</source>
      </item>
  </channel>
</rss>
