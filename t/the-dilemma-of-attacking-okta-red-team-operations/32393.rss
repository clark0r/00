<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Dilemma of Attacking Okta, Red Team Operations</title>
    <link>https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393</link>
    <description># Introduction
![Intro-Login](upload://o5LbE5UQIzXXNxNvYM0irOxeYI7.png)

An ominous login page, mysterious isn&#39;t it? This page is seen by hundreds of employees/customers of companies like Discord, Microsoft, Paypal, GoDaddy, Roblox, etc. This is an Okta login page, successfully authenticating yourself with one of these will usually redirect you to a companies internal services, such as: Jira, Confluence, Metrics systems, the whole shebang! 

# Okta?
Okta is &quot;an American identity and access management company&quot; that allows companies to easily manage and control access to different parts of their infrastructure. Okta is usually used to authorize and manage access to *internal services*. As a hacker this information is very valuable; so many attack vectors include Okta access as a prerequisite, or even an end goal.

## The Authentication Dilemma

Given all thats on the table for Okta, and the companies that are involved, Okta has their work cut out for them in terms of keeping employee accounts safe.

Okta offers many authorization methods, some examples include:

- Basic `username:password` Pairing

- Common 2FA: Google Authenticator, Email, SMS, etc.

- MFA (biometrics, location information, YubiCo&#39;s YubiKey)

- 3rd Party Auth Services: [Oauth](https://developer.okta.com/docs/api/resources/oidc), [OpenID](https://developer.okta.com/docs/api/resources/oidc), [SAML](https://www.okta.com/integrate/documentation/saml/) and [FIDO](https://www.okta.com/security-blog/2019/01/understanding-fido-standards-your-go-to-guide/).

- Customized API/HTTP Auth

![Auth-Methods, 75%](upload://eYxBamUNOjOGktn9sms1o9lQTPU.jpeg)
This is perfect for companies that try their best to be as secure as possible, but for attackers this is yet another hoop that you have to jump through in order to achieve that initial access you are depending on.

# Attacking Okta Authentication
Trying to gain unauthorized access to ANY okta account may seem like trying to infiltrate Fort Knox. But like all things let&#39;s try to break this big problem down into smaller problems:

- Accessing Employee Information (usernames, corporate emails, phone numbers)

- Accessing Employee Credentials (passwords)

- Accessing Needed MFA Vessels (2FA Codes, Physical Tokens, Biometrics)


Now once again the first two aren&#39;t that hard. Some mass phishing or remote access would do the trick. The main issue is companies that use fairly secure authorization methods, a perfect example of this of YubiCo&#39;s YubiKey. 

They are the &quot;un-phishible&quot; hardware authorization solutions. **Google, Amazon, Microsoft, Twitter, and Facebook** all use YubiKey to add an extra  layer of security to both employee and end user accounts, but we will talk about them later.

# The Actually Secure Companies
Some companies only use common `username:password` login systems, maybe 2FA using Google Authenticator/SMS. Most adversaries can easily get past this using an Adversary in The Middle [(AiTM)](https://www.hypr.com/security-encyclopedia/adversary-in-the-middle) attack with a service like [Evilginx2](https://github.com/kgretzky/evilginx2). 

Actually secure companies use hardware/biometric solutions. These are by far some of the most secure authorization solutions on the market. it seems as hardware based solutions are the best of the two, due to the simple fact biometrics can be easily stolen/reproduced ([article on the topic](https://getsmarteye.com/stolen-fingerprints-data-can-sabotage-your-biometric-security/)).

Back to hardware solutions, why are they so secure? This is something that only the employee has access to this solution. There is also a &quot;single origin verification protocol&quot; that makes phishing these keys even harder.

## YubiKey :rage:

YubiKeys use a protocol known as &quot;origin binding&quot;, in lay-mans terms: when a key is registered is in binded to a certain domain, so if you try logging in on another domain, your key wont allow it. 

What happens is the browser signs the request to the security token with the website URL. The security token&#39;s response based on the secret includes this as a result. So if you try to login to `d0main.com` instead of `domain.com` and get a U2F 2nd factor auth, the browser will generate a request based on `d0main.com`. Even if the malicious site, `d0main.com`, copied/repeated the public key info for the second factor auth request from `domain.com`, the browser would hash and sign the request as coming from `d0main.com` as a result. The resulting login token would not match up with what `domain.com` expected. The login would fail. - [YCombinator thread](https://news.ycombinator.com/item?id=32417755)

This simple check pretty much stops attackers from phishing YubiKeys. Of course that statement is only true in a perfect world, there could always be a vulnerability in the keys firmware, or in the browser itself (which is the intermediary between the login page and the key itself). An article on Chrome&#39;s WebUSB is linked below:

https://www.wired.com/story/chrome-yubikey-phishing-webusb/


# An Un-patchable Vulnerability
With the concurrent growth of both employee security and the value of internal access, it is no longer uncommon to phish employees. But why take the time of your day to phish employees with a low success rate. when you can take a variate amount of time to extort/blackmail employees with a much higher success rate.

There are plenty of things certain people have to hide from their employers, but this is up to you, as a red teamer, to find. 

# Fin

What do you all think about Okta as an authentication service? Let everyone know!</description>
    
    <lastBuildDate>Fri, 30 Dec 2022 11:57:58 +0000</lastBuildDate>
    <category>Reconnaissance</category>
    <atom:link href="https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Dilemma of Attacking Okta, Red Team Operations</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393/5</link>
        <pubDate>Thu, 06 Apr 2023 16:23:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-32393-5</guid>
        <source url="https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393.rss">The Dilemma of Attacking Okta, Red Team Operations</source>
      </item>
      <item>
        <title>The Dilemma of Attacking Okta, Red Team Operations</title>
        <dc:creator><![CDATA[hoek]]></dc:creator>
        <description><![CDATA[
            <p>BTW - <a href="https://sec.okta.com/articles/2022/12/okta-code-repositories" rel="noopener nofollow ugc">https://sec.okta.com/articles/2022/12/okta-code-repositories</a> <img src="https://0x00sec.org/images/emoji/twitter/upside_down_face.png?v=12" title=":upside_down_face:" class="emoji" alt=":upside_down_face:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393/4</link>
        <pubDate>Fri, 30 Dec 2022 11:57:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-32393-4</guid>
        <source url="https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393.rss">The Dilemma of Attacking Okta, Red Team Operations</source>
      </item>
      <item>
        <title>The Dilemma of Attacking Okta, Red Team Operations</title>
        <dc:creator><![CDATA[Kedislav]]></dc:creator>
        <description><![CDATA[
            <p>A fun old story about the “favorite food” question; always try the food that is either (a) geographically close to the business you’re testing, (b) a food that is commonly consumed in the state/country, or (c) whatever you find boxes of if in a pentest you get to search the trash.</p>
<p>Besides that, very informative and useful post. Nowadays Okta is very widespread.</p>
          <p><a href="https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393/3</link>
        <pubDate>Wed, 28 Dec 2022 21:31:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-32393-3</guid>
        <source url="https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393.rss">The Dilemma of Attacking Okta, Red Team Operations</source>
      </item>
      <item>
        <title>The Dilemma of Attacking Okta, Red Team Operations</title>
        <dc:creator><![CDATA[hoek]]></dc:creator>
        <description><![CDATA[
            <p>I was testing once Okta in one company I was working for, and it is quite good protection. It also needs to be configured very well as in my test, new employees on the onboarding session was never instructed to configure it on the first day. The test was related to many vectors like Service Desk password reset, user authentication system etc. but when I finally got domain user and password from fresh employee (about 1 month old) I tried to login to some web apps protected by Okta, and I found that user never setup his 2fa. So when I was redirected from eg. Sharepoint to Okta for 2fa I was asked to set it up, and in this company it was only forced to use “security question” eg. like what is your favorite meal or other easy to guess, so I set it up, and was able to login to all systems where user was assigned to. This problem was more related to wrong onboarding procedures and some misconfigurations. Finally as a mitigation of the test, new employees on onboarding session are forced to set up Okta account and not only security question is mandatory, but also mobile phone/software or something else.</p>
<p>So even most secure solutions can be shitty if they are configured not correctly or procedures around them are bad.</p>
<p>Okta has also a lot of alerting which you can also ingest to SIEM, so if additionally SOC team is monitoring this it is even “more secure”.</p>
<p>And from user perspective it works very good and it is user friendly.</p>
<p>One tip for testing, if you see security question about favorite food, try “pizza”. In my test it mostly woks <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=12" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393/2</link>
        <pubDate>Sun, 11 Dec 2022 11:08:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-32393-2</guid>
        <source url="https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393.rss">The Dilemma of Attacking Okta, Red Team Operations</source>
      </item>
      <item>
        <title>The Dilemma of Attacking Okta, Red Team Operations</title>
        <dc:creator><![CDATA[camel]]></dc:creator>
        <description><![CDATA[
            <h1>
<a name="introduction-1" class="anchor" href="https://0x00sec.org#introduction-1"></a>Introduction</h1>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/a/8/a8dae437780636a0e50643872b79bb4266f7eabf.png" alt="Intro-Login" data-base62-sha1="o5LbE5UQIzXXNxNvYM0irOxeYI7" width="383" height="321"></p>
<p>An ominous login page, mysterious isn’t it? This page is seen by hundreds of employees/customers of companies like Discord, Microsoft, Paypal, GoDaddy, Roblox, etc. This is an Okta login page, successfully authenticating yourself with one of these will usually redirect you to a companies internal services, such as: Jira, Confluence, Metrics systems, the whole shebang!</p>
<h1>
<a name="okta-2" class="anchor" href="https://0x00sec.org#okta-2"></a>Okta?</h1>
<p>Okta is “an American identity and access management company” that allows companies to easily manage and control access to different parts of their infrastructure. Okta is usually used to authorize and manage access to <em>internal services</em>. As a hacker this information is very valuable; so many attack vectors include Okta access as a prerequisite, or even an end goal.</p>
<h2>
<a name="the-authentication-dilemma-3" class="anchor" href="https://0x00sec.org#the-authentication-dilemma-3"></a>The Authentication Dilemma</h2>
<p>Given all thats on the table for Okta, and the companies that are involved, Okta has their work cut out for them in terms of keeping employee accounts safe.</p>
<p>Okta offers many authorization methods, some examples include:</p>
<ul>
<li>
<p>Basic <code>username:password</code> Pairing</p>
</li>
<li>
<p>Common 2FA: Google Authenticator, Email, SMS, etc.</p>
</li>
<li>
<p>MFA (biometrics, location information, YubiCo’s YubiKey)</p>
</li>
<li>
<p>3rd Party Auth Services: <a href="https://developer.okta.com/docs/api/resources/oidc" rel="noopener nofollow ugc">Oauth</a>, <a href="https://developer.okta.com/docs/api/resources/oidc" rel="noopener nofollow ugc">OpenID</a>, <a href="https://www.okta.com/integrate/documentation/saml/" rel="noopener nofollow ugc">SAML</a> and <a href="https://www.okta.com/security-blog/2019/01/understanding-fido-standards-your-go-to-guide/" rel="noopener nofollow ugc">FIDO</a>.</p>
</li>
<li>
<p>Customized API/HTTP Auth</p>
</li>
</ul>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/8/68f66a57359283862fb4711052a8fa14368f4a7e.jpeg" data-download-href="/uploads/short-url/eYxBamUNOjOGktn9sms1o9lQTPU.jpeg?dl=1" title="Auth-Methods, 75%" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68f66a57359283862fb4711052a8fa14368f4a7e_2_690x164.jpeg" alt="Auth-Methods, 75%" data-base62-sha1="eYxBamUNOjOGktn9sms1o9lQTPU" width="690" height="164" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68f66a57359283862fb4711052a8fa14368f4a7e_2_690x164.jpeg, https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68f66a57359283862fb4711052a8fa14368f4a7e_2_1035x246.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68f66a57359283862fb4711052a8fa14368f4a7e_2_1380x328.jpeg 2x" data-dominant-color="F4F8F9"></a></div><br>
This is perfect for companies that try their best to be as secure as possible, but for attackers this is yet another hoop that you have to jump through in order to achieve that initial access you are depending on.<p></p>
<h1>
<a name="attacking-okta-authentication-4" class="anchor" href="https://0x00sec.org#attacking-okta-authentication-4"></a>Attacking Okta Authentication</h1>
<p>Trying to gain unauthorized access to ANY okta account may seem like trying to infiltrate Fort Knox. But like all things let’s try to break this big problem down into smaller problems:</p>
<ul>
<li>
<p>Accessing Employee Information (usernames, corporate emails, phone numbers)</p>
</li>
<li>
<p>Accessing Employee Credentials (passwords)</p>
</li>
<li>
<p>Accessing Needed MFA Vessels (2FA Codes, Physical Tokens, Biometrics)</p>
</li>
</ul>
<p>Now once again the first two aren’t that hard. Some mass phishing or remote access would do the trick. The main issue is companies that use fairly secure authorization methods, a perfect example of this of YubiCo’s YubiKey.</p>
<p>They are the “un-phishible” hardware authorization solutions. <strong>Google, Amazon, Microsoft, Twitter, and Facebook</strong> all use YubiKey to add an extra  layer of security to both employee and end user accounts, but we will talk about them later.</p>
<h1>
<a name="the-actually-secure-companies-5" class="anchor" href="https://0x00sec.org#the-actually-secure-companies-5"></a>The Actually Secure Companies</h1>
<p>Some companies only use common <code>username:password</code> login systems, maybe 2FA using Google Authenticator/SMS. Most adversaries can easily get past this using an Adversary in The Middle <a href="https://www.hypr.com/security-encyclopedia/adversary-in-the-middle" rel="noopener nofollow ugc">(AiTM)</a> attack with a service like <a href="https://github.com/kgretzky/evilginx2" rel="noopener nofollow ugc">Evilginx2</a>.</p>
<p>Actually secure companies use hardware/biometric solutions. These are by far some of the most secure authorization solutions on the market. it seems as hardware based solutions are the best of the two, due to the simple fact biometrics can be easily stolen/reproduced (<a href="https://getsmarteye.com/stolen-fingerprints-data-can-sabotage-your-biometric-security/" rel="noopener nofollow ugc">article on the topic</a>).</p>
<p>Back to hardware solutions, why are they so secure? This is something that only the employee has access to this solution. There is also a “single origin verification protocol” that makes phishing these keys even harder.</p>
<h2>
<a name="yubikey-rage-6" class="anchor" href="https://0x00sec.org#yubikey-rage-6"></a>YubiKey <img src="https://0x00sec.org/images/emoji/twitter/rage.png?v=12" title=":rage:" class="emoji" alt=":rage:" loading="lazy" width="20" height="20">
</h2>
<p>YubiKeys use a protocol known as “origin binding”, in lay-mans terms: when a key is registered is in binded to a certain domain, so if you try logging in on another domain, your key wont allow it.</p>
<p>What happens is the browser signs the request to the security token with the website URL. The security token’s response based on the secret includes this as a result. So if you try to login to <code>d0main.com</code> instead of <code>domain.com</code> and get a U2F 2nd factor auth, the browser will generate a request based on <code>d0main.com</code>. Even if the malicious site, <code>d0main.com</code>, copied/repeated the public key info for the second factor auth request from <code>domain.com</code>, the browser would hash and sign the request as coming from <code>d0main.com</code> as a result. The resulting login token would not match up with what <code>domain.com</code> expected. The login would fail. - <a href="https://news.ycombinator.com/item?id=32417755" rel="noopener nofollow ugc">YCombinator thread</a></p>
<p>This simple check pretty much stops attackers from phishing YubiKeys. Of course that statement is only true in a perfect world, there could always be a vulnerability in the keys firmware, or in the browser itself (which is the intermediary between the login page and the key itself). An article on Chrome’s WebUSB is linked below:</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://www.wired.com/story/chrome-yubikey-phishing-webusb/">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/3X/c/4/c49bc509162c703076794befafd04c2e4c3a534a.png" class="site-icon" width="16" height="16">

      <a href="https://www.wired.com/story/chrome-yubikey-phishing-webusb/" target="_blank" rel="noopener nofollow ugc" title="04:54PM - 01 March 2018">WIRED – 1 Mar 18</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/361;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/e/d/ed09db3f1b885165b23c3c55bd25ef9b8436bc4c_2_690x361.jpeg" class="thumbnail" width="690" height="361" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/e/d/ed09db3f1b885165b23c3c55bd25ef9b8436bc4c_2_690x361.jpeg, https://0x00sec.s3.amazonaws.com/optimized/3X/e/d/ed09db3f1b885165b23c3c55bd25ef9b8436bc4c_2_1035x541.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/e/d/ed09db3f1b885165b23c3c55bd25ef9b8436bc4c.jpeg 2x" data-dominant-color="05663C"></div>

<h3><a href="https://www.wired.com/story/chrome-yubikey-phishing-webusb/" target="_blank" rel="noopener nofollow ugc">Chrome Lets Hackers Phish Even 'Unphishable' Yubikey Users</a></h3>

  <p>While still the best protection against phishing attacks, some Yubikey models are vulnerable after a recent update to Google Chrome.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<h1>
<a name="an-un-patchable-vulnerability-7" class="anchor" href="https://0x00sec.org#an-un-patchable-vulnerability-7"></a>An Un-patchable Vulnerability</h1>
<p>With the concurrent growth of both employee security and the value of internal access, it is no longer uncommon to phish employees. But why take the time of your day to phish employees with a low success rate. when you can take a variate amount of time to extort/blackmail employees with a much higher success rate.</p>
<p>There are plenty of things certain people have to hide from their employers, but this is up to you, as a red teamer, to find.</p>
<h1>
<a name="fin-8" class="anchor" href="https://0x00sec.org#fin-8"></a>Fin</h1>
<p>What do you all think about Okta as an authentication service? Let everyone know!</p>
          <p><a href="https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393/1</link>
        <pubDate>Tue, 06 Dec 2022 00:23:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-32393-1</guid>
        <source url="https://0x00sec.org/t/the-dilemma-of-attacking-okta-red-team-operations/32393.rss">The Dilemma of Attacking Okta, Red Team Operations</source>
      </item>
  </channel>
</rss>
