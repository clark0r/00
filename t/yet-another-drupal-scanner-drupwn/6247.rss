<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Yet another Drupal scanner – Drupwn</title>
    <link>https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247</link>
    <description>___

**DISCLAIMER:** Article originally published on [immunIT](https://www.immunit.ch/blog/2018/04/10/yet-another-drupal-scanner-drupwn/).
___

Hi fellas,

Today, I will introduce you a new tool, developed for the sake of my penetration testing activities, named [Drupwn](https://github.com/immunIT/drupwn) which claims to provide a reliable and efficient way to perform enumerations on Drupal web applications.

You may think, why yet another tool whereas there exist plenty of alternatives on the market.
Well, the answer is straightforward, they are unreliable. Indeed, none of them is actively maintained and are sorely lacking of features. This is to fill this particular gap that Drupwn is born.

Drupwn is a python script, following a modular architecture for maintenance and enhancement purposes, which allows enumerating various kind of information that could be valuable to any security assessment against such platform.

# Architecture

Before diving into the main subject, let&#39;s take a look on its architecture.

![architecture|352x500](upload://c52UzLVGaanJ3otQrJZq7DIZFiB.JPG)

As you can see on the picture above, the engine and plugins parts are completely independent, allowing to easily add modules without having the modify the tool core engine.

Each plugin inherits from the abstract class APlugin, providing a better overall structure alongside the whole code base. Upstream the design concern, this inheritance provide a multi threading support by design, deporting this brainteaser, which is parallelization, to the core engine.

Each plugin is designed as following :

```bash
class Example(APlugin):
    &quot;&quot;&quot;This class is an example.
    &quot;&quot;&quot;

    def __init__(self, request, logger, config):
        &quot;&quot;&quot;This is the class constructor, allowing to set the number of threads as well as the logger configuration.
        &quot;&quot;&quot;
        super().__init__(config[&quot;thread&quot;])
        self.logger = logger
        self.request = request

    def run(self):
        &quot;&quot;&quot;This method is the plugin entrypoint. This is where the magic happen.
        &quot;&quot;&quot;
```

Once the plugin created and added to the plugins folder, we must refer it within the dispatcher and the parser in order to ensure its support by the reflective factory.

Quite easy right ? Thanks to this design pattern, anyone is able, within a few minutes, to add new functionalities to improve the Drupwn&#39;s behaviors!

# Functionalities

To fit to as much as possible of situations, Drupwn supports:

* Basic authentication
* Cookie manipulation
* User-Agent modification
* Logging
* Request sending speed
* Enumeration range customization

Upstream those passive functionalities, this python3 script actually provides 6 modules, described below.

## User enumeration

As its name suggests, this module is used to enumerate the registered users on the platform assessed.
In fact, depending on the Drupal version, an unauthenticated user could be able to enumerates the existing users through the **/user/{ID}** resource.

Cause, code is more explicit than words, here is a piece of pseudo code, explaining the module inner working.

```
for id between 0 and 3000
    request the resource /user/id
    if a redirection occurred
        get the username within the returned URL
    else if success
        get the username within the source code returned
    else if forbidden
        the username is not retrievable
```

## Node enumeration

When publishing an article, the CMS create a node, associated with a slug. Lambda users use the slug name to access a given article. However, it is quite tedious to enumerate all the website&#39;s pages using combinations of alphanumeric chars. Of course, spidering can be a good way to accomplish this job but, it is noisy as hell and a better solution exist.

Indeed, by iterating on the resource **/node/{ID}**, we can retrieve the associated slugs and map the whole website content. This can help to find unlinked pages which can results by sensitive information gathering.

## Default files enumeration

Well, this module just check if the default installation files are present on the web server, allowing to improve the server side hardening, reducing the attack surface.

## Theme enumeration

Theme enumeration can seem useless however, some free themes available online can be backdoored, which is an easy win situation. This enumeration simply use a wordlist and print out the name of the installed themes.

## Module enumeration

This module is very similar to the previous one nevertheless, we are commonly face to hardened installation, avoiding any kind of module enumeration.
Modules are, in 99 % of the time, the failure point of a Drupal application. This is why, finding a workaround is inescapable to ensure the assessment reliability.

Here is how this plugin works:

```
for each module in the wordlist
    check if the status code is not equal to 404
    if 200
        check the information in the module.info and extract its version as well as its default files
    else if 403
        retrieve its default files
```

## Fingerprinting

Fingerprinting a Drupal application can be quite difficult. Indeed, none of the CMS default files allows to efficiently determinate the version deployed. To remedy this situation, Drupwn uses several locations to accomplish this task.

```
while we have no result
    check bootstrap.inc
    check landing page
    check HTTP header
```

# Usage

Drupwn works out of the box thanks to its dockerization.

```bash
# Build the container
docker build -t drupwn .

# Run the docker
docker run --rm -it drupwn --help
```

If docker seems unfriendly to you. Drupwn can be used directly on any system using pip3 and python3. To do so, follow the guidelines below:

```bash
# Install dependencies
pip3 -r install requirements.txt

# Run Drupwn
python3 drupwn.py --help
```

# Examples

![help|569x500](upload://Ap1BSrWBmKNJuXawpfKU3LzPu4d.JPG)

![modules|611x405](upload://gFbFhAgVfwBVwqFRxQ8RI4EKOGd.png)

![dfiles|612x298](upload://yEbc10x7efYUw3F1Mz5DtRR4vxr.png)

# Conclusion

I believe this tool provides good capabilities of enumeration that can definitely help any pentester conduct, with efficiency and reliability, his security assessment.

As any open source project, pull requests are widely welcome! Here is a short list of wanting features that will be implemented later:

* TOR network support
* Proxy support
* Vulnerability detection

Hope you enjoyed this article,
Best,
Nitrax</description>
    
    <lastBuildDate>Thu, 28 Feb 2019 13:34:20 +0000</lastBuildDate>
    <category>Reconnaissance</category>
    <atom:link href="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Yet another Drupal scanner – Drupwn</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/13</link>
        <pubDate>Thu, 28 Feb 2019 13:34:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6247-13</guid>
        <source url="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247.rss">Yet another Drupal scanner – Drupwn</source>
      </item>
      <item>
        <title>Yet another Drupal scanner – Drupwn</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <h1>Change Log</h1>
<h2>[1.0.3] [2019-02-28]</h2>
<h3>Added</h3>
<ul>
<li>Support CVE-2019-6340</li>
</ul>
<h3>Changed</h3>
<ul>
<li>Requests wrapper to handle data and headers overwriting</li>
<li>Delete legacy CVE checker</li>
</ul>
<h2>[1.0.2] [2019-01-22]</h2>
<h3>Changed</h3>
<ul>
<li>README file update</li>
<li>Fixing name resolution and catching stack trace when fail</li>
</ul>
<h2>[1.0.1] [2018-11-21]</h2>
<h3>Changed</h3>
<ul>
<li>Fix prompt_toolkit package</li>
<li>Adding new module path, used by new Drupal version</li>
<li>Set 20 default threads for efficiency</li>
</ul>
<h2>[1.0.0] [2018-08-31]</h2>
<h3>Added</h3>
<ul>
<li>SOCKS and HTTP proxy support</li>
</ul>
<h3>Changed</h3>
<ul>
<li>Misspelling</li>
</ul>
          <p><a href="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/12</link>
        <pubDate>Thu, 28 Feb 2019 13:34:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6247-12</guid>
        <source url="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247.rss">Yet another Drupal scanner – Drupwn</source>
      </item>
      <item>
        <title>Yet another Drupal scanner – Drupwn</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/11</link>
        <pubDate>Thu, 28 Feb 2019 13:33:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6247-11</guid>
        <source url="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247.rss">Yet another Drupal scanner – Drupwn</source>
      </item>
      <item>
        <title>Yet another Drupal scanner – Drupwn</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/10</link>
        <pubDate>Thu, 10 May 2018 09:15:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6247-10</guid>
        <source url="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247.rss">Yet another Drupal scanner – Drupwn</source>
      </item>
      <item>
        <title>Yet another Drupal scanner – Drupwn</title>
        <dc:creator><![CDATA[Techno_Forg]]></dc:creator>
        <description><![CDATA[
            <p>I might look at the code after I’m done with my current project (top secret), but if it’s anything like nikto than I probably can figure out how it works… although, it’s written in python. Maybe I could try re-writing it in Perl for those that prefer Perl?</p>
<p>Just a thought.</p>
<p>–Techno Forg–</p>
          <p><a href="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/9</link>
        <pubDate>Thu, 26 Apr 2018 10:44:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6247-9</guid>
        <source url="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247.rss">Yet another Drupal scanner – Drupwn</source>
      </item>
      <item>
        <title>Yet another Drupal scanner – Drupwn</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for this clarification. Btw, the link is present in the first paragraph, second line.</p>
<p>Best,<br>
Nitrax</p>
          <p><a href="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/8</link>
        <pubDate>Tue, 24 Apr 2018 07:17:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6247-8</guid>
        <source url="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247.rss">Yet another Drupal scanner – Drupwn</source>
      </item>
      <item>
        <title>Yet another Drupal scanner – Drupwn</title>
        <dc:creator><![CDATA[fxbg]]></dc:creator>
        <description><![CDATA[
            <p>I didn’t see the link to it, but here is the git repo, <a href="https://github.com/immunIT/drupwn" rel="nofollow noopener">https://github.com/immunIT/drupwn</a></p>
<p>also, IoT seems to be taking a shine to adding drupal to their mix, <a href="https://www.scmagazineuk.com/iot-botnet-actively-exploiting-drupal-cms-bug/article/760331/" rel="nofollow noopener">https://www.scmagazineuk.com/iot-botnet-actively-exploiting-drupal-cms-bug/article/760331/</a></p>
          <p><a href="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/7</link>
        <pubDate>Tue, 24 Apr 2018 00:47:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6247-7</guid>
        <source url="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247.rss">Yet another Drupal scanner – Drupwn</source>
      </item>
      <item>
        <title>Yet another Drupal scanner – Drupwn</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <h1>Update</h1>
<hr>
<h2>[0.9.2] [2018-04-16]</h2>
<h3>Added</h3>
<ul>
<li>Exploit mode allowing to check and exploit CVEs</li>
</ul>
<h3>Changes</h3>
<ul>
<li>Deleting the vulnerability checker plugin. Now, CVEs can be checked using the exploit mode</li>
<li>Adding colors within the logger engine</li>
<li>Improving the version fingerprinting engine</li>
</ul>
          <p><a href="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/6</link>
        <pubDate>Thu, 19 Apr 2018 13:46:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6247-6</guid>
        <source url="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247.rss">Yet another Drupal scanner – Drupwn</source>
      </item>
      <item>
        <title>Yet another Drupal scanner – Drupwn</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <p>You are welcome <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"><br>
I’m up for it, you know how to reach me <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/5</link>
        <pubDate>Wed, 11 Apr 2018 06:49:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6247-5</guid>
        <source url="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247.rss">Yet another Drupal scanner – Drupwn</source>
      </item>
      <item>
        <title>Yet another Drupal scanner – Drupwn</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Dude this is awesome. I have yet to pentest a Drupal instance, but these kinds of engagements pop up all the time.</p>
<p>I’ve actually been wanting to make a scanner for Magento. I found it’s possible to discover plugins via the CSS and class names inside div elements on the page. We should work together on something soon (when I find a minute <img src="https://0x00sec.org/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:">).</p>
<p>Anyway, good work! Looks really cool. I think I might have a good use for this <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/4</link>
        <pubDate>Tue, 10 Apr 2018 21:48:00 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6247-4</guid>
        <source url="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247.rss">Yet another Drupal scanner – Drupwn</source>
      </item>
      <item>
        <title>Yet another Drupal scanner – Drupwn</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <p>Well, in theory, yes … However, this is not how Drupal or its associated hardening plugins works.</p>
<p>Moreover, web applications follow the <a href="https://tools.ietf.org/html/rfc2616" rel="nofollow noopener">HTTP RFC</a> consequently, protected contents often return a 403 status code, 404 for unexisting one and so on. It is the respect of this norm which allows us to perform enumeration attacks <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>I hope it answered your question.</p>
<p>Best,<br>
Nitrax</p>
          <p><a href="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/3</link>
        <pubDate>Tue, 10 Apr 2018 11:22:00 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6247-3</guid>
        <source url="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247.rss">Yet another Drupal scanner – Drupwn</source>
      </item>
      <item>
        <title>Yet another Drupal scanner – Drupwn</title>
        <dc:creator><![CDATA[Techno_Forg]]></dc:creator>
        <description><![CDATA[
            <p>Hm… Ok so… sorry for my lack of understanding, but… I read somewhere that even though that a webpage or whatever you’re trying to test… if it returns a status code of lets say 200, couldn’t it still be unreliable?</p>
          <p><a href="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/2</link>
        <pubDate>Tue, 10 Apr 2018 10:12:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6247-2</guid>
        <source url="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247.rss">Yet another Drupal scanner – Drupwn</source>
      </item>
      <item>
        <title>Yet another Drupal scanner – Drupwn</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <hr>
<p><strong>DISCLAIMER:</strong> Article originally published on <a href="https://www.immunit.ch/blog/2018/04/10/yet-another-drupal-scanner-drupwn/" rel="noopener nofollow ugc">immunIT</a>.</p>
<hr>
<p>Hi fellas,</p>
<p>Today, I will introduce you a new tool, developed for the sake of my penetration testing activities, named <a href="https://github.com/immunIT/drupwn" rel="noopener nofollow ugc">Drupwn</a> which claims to provide a reliable and efficient way to perform enumerations on Drupal web applications.</p>
<p>You may think, why yet another tool whereas there exist plenty of alternatives on the market.<br>
Well, the answer is straightforward, they are unreliable. Indeed, none of them is actively maintained and are sorely lacking of features. This is to fill this particular gap that Drupwn is born.</p>
<p>Drupwn is a python script, following a modular architecture for maintenance and enhancement purposes, which allows enumerating various kind of information that could be valuable to any security assessment against such platform.</p>
<h1>Architecture</h1>
<p>Before diving into the main subject, let’s take a look on its architecture.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/5/54ac237417a0c7c48537ecbc7dc2cbaf3207eedd.JPG" alt="architecture" data-base62-sha1="c52UzLVGaanJ3otQrJZq7DIZFiB" width="352" height="500"></p>
<p>As you can see on the picture above, the engine and plugins parts are completely independent, allowing to easily add modules without having the modify the tool core engine.</p>
<p>Each plugin inherits from the abstract class APlugin, providing a better overall structure alongside the whole code base. Upstream the design concern, this inheritance provide a multi threading support by design, deporting this brainteaser, which is parallelization, to the core engine.</p>
<p>Each plugin is designed as following :</p>
<pre><code class="lang-bash">class Example(APlugin):
    """This class is an example.
    """

    def __init__(self, request, logger, config):
        """This is the class constructor, allowing to set the number of threads as well as the logger configuration.
        """
        super().__init__(config["thread"])
        self.logger = logger
        self.request = request

    def run(self):
        """This method is the plugin entrypoint. This is where the magic happen.
        """
</code></pre>
<p>Once the plugin created and added to the plugins folder, we must refer it within the dispatcher and the parser in order to ensure its support by the reflective factory.</p>
<p>Quite easy right ? Thanks to this design pattern, anyone is able, within a few minutes, to add new functionalities to improve the Drupwn’s behaviors!</p>
<h1>Functionalities</h1>
<p>To fit to as much as possible of situations, Drupwn supports:</p>
<ul>
<li>Basic authentication</li>
<li>Cookie manipulation</li>
<li>User-Agent modification</li>
<li>Logging</li>
<li>Request sending speed</li>
<li>Enumeration range customization</li>
</ul>
<p>Upstream those passive functionalities, this python3 script actually provides 6 modules, described below.</p>
<h2>User enumeration</h2>
<p>As its name suggests, this module is used to enumerate the registered users on the platform assessed.<br>
In fact, depending on the Drupal version, an unauthenticated user could be able to enumerates the existing users through the <strong>/user/{ID}</strong> resource.</p>
<p>Cause, code is more explicit than words, here is a piece of pseudo code, explaining the module inner working.</p>
<pre><code class="lang-auto">for id between 0 and 3000
    request the resource /user/id
    if a redirection occurred
        get the username within the returned URL
    else if success
        get the username within the source code returned
    else if forbidden
        the username is not retrievable
</code></pre>
<h2>Node enumeration</h2>
<p>When publishing an article, the CMS create a node, associated with a slug. Lambda users use the slug name to access a given article. However, it is quite tedious to enumerate all the website’s pages using combinations of alphanumeric chars. Of course, spidering can be a good way to accomplish this job but, it is noisy as hell and a better solution exist.</p>
<p>Indeed, by iterating on the resource <strong>/node/{ID}</strong>, we can retrieve the associated slugs and map the whole website content. This can help to find unlinked pages which can results by sensitive information gathering.</p>
<h2>Default files enumeration</h2>
<p>Well, this module just check if the default installation files are present on the web server, allowing to improve the server side hardening, reducing the attack surface.</p>
<h2>Theme enumeration</h2>
<p>Theme enumeration can seem useless however, some free themes available online can be backdoored, which is an easy win situation. This enumeration simply use a wordlist and print out the name of the installed themes.</p>
<h2>Module enumeration</h2>
<p>This module is very similar to the previous one nevertheless, we are commonly face to hardened installation, avoiding any kind of module enumeration.<br>
Modules are, in 99 % of the time, the failure point of a Drupal application. This is why, finding a workaround is inescapable to ensure the assessment reliability.</p>
<p>Here is how this plugin works:</p>
<pre><code class="lang-auto">for each module in the wordlist
    check if the status code is not equal to 404
    if 200
        check the information in the module.info and extract its version as well as its default files
    else if 403
        retrieve its default files
</code></pre>
<h2>Fingerprinting</h2>
<p>Fingerprinting a Drupal application can be quite difficult. Indeed, none of the CMS default files allows to efficiently determinate the version deployed. To remedy this situation, Drupwn uses several locations to accomplish this task.</p>
<pre><code class="lang-auto">while we have no result
    check bootstrap.inc
    check landing page
    check HTTP header
</code></pre>
<h1>Usage</h1>
<p>Drupwn works out of the box thanks to its dockerization.</p>
<pre><code class="lang-bash"># Build the container
docker build -t drupwn .

# Run the docker
docker run --rm -it drupwn --help
</code></pre>
<p>If docker seems unfriendly to you. Drupwn can be used directly on any system using pip3 and python3. To do so, follow the guidelines below:</p>
<pre><code class="lang-bash"># Install dependencies
pip3 -r install requirements.txt

# Run Drupwn
python3 drupwn.py --help
</code></pre>
<h1>Examples</h1>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/f/ff2278d6affbfb3c2554332f3160dd9335cd93f5.JPG" alt="help" data-base62-sha1="Ap1BSrWBmKNJuXawpfKU3LzPu4d" width="569" height="500"></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/74cab2c98a581a4eed9eee28eae47d17fc638011.png" alt="modules" data-base62-sha1="gFbFhAgVfwBVwqFRxQ8RI4EKOGd" width="611" height="405"></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/f/f2d4abd44c923037eb7e064fd7e07fbfa02758e5.png" alt="dfiles" data-base62-sha1="yEbc10x7efYUw3F1Mz5DtRR4vxr" width="612" height="298"></p>
<h1>Conclusion</h1>
<p>I believe this tool provides good capabilities of enumeration that can definitely help any pentester conduct, with efficiency and reliability, his security assessment.</p>
<p>As any open source project, pull requests are widely welcome! Here is a short list of wanting features that will be implemented later:</p>
<ul>
<li>TOR network support</li>
<li>Proxy support</li>
<li>Vulnerability detection</li>
</ul>
<p>Hope you enjoyed this article,<br>
Best,<br>
Nitrax</p>
          <p><a href="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247/1</link>
        <pubDate>Tue, 10 Apr 2018 09:15:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6247-1</guid>
        <source url="https://0x00sec.org/t/yet-another-drupal-scanner-drupwn/6247.rss">Yet another Drupal scanner – Drupwn</source>
      </item>
  </channel>
</rss>
