<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Hackers&#39; Choice: Tiling Window Managers</title>
    <link>https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166</link>
    <description>#Tiling Window Managers
Hey, I am worz/ovtru3. Most of you know me, I have been on the IRC for about two months now. I had promised @pry0cc to do an article on tiling window managers, because few days ago, I was experimenting with almost all the major ones. At last, I settled with i3wm, because it had everything I wanted. i3 has also got a very comprehensive documentation. Also, xmonad and herbstluftwm will be my best options if I were to switch in the coming years.

___
_Note: The bar should be kept independent of the window manager. I could use xmobar in i3 and dzen2 in hebstluftwm. Don&#39;t choose a wm just because the bar you see with it in a screenshot is badass. Also, we&#39;ll not cover the installation part here. The meaning of some specific terms like v-split, dynamic tiling etc are illustrated at the end in the Notes section._

___

##What is a Tiling Window Manager?

Wikipedia says:
&gt; In computing, a tiling window manager is a window manager with an organization of the screen into mutually non-overlapping frames, as opposed to the more popular approach of coordinate-based stacking of overlapping objects (windows) that tries to fully emulate the desktop metaphor.

Actually, most popular window managers are what are called “compositing window managers,” which is what you are using by default in Microsoft Windows, OSX, and Linux(Gnome and KDE). They use the desktop metaphor, where each program is treated like a re-sizable piece of paper. You can move them around freely, change their size, and cause them to overlap one another.

In contrast, a tiling window manager is more like a well-organized drawer than a desk. The entire surface is divided into non-overlapping buckets where windows are displayed. If you’ve used pretty much any IDE, like Eclipse or Visual Studio, or a terminal multiplexer, like screen or tmux, you’re already familiar with this approach.

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/2/2aa516394d6edfeeb4b0a92bc0be7d5bfc9eae00.png&#39;&gt;

This is what we&#39;re talking about. 
___

##Why should I use a Tiling WM?

###They&#39;re Efficient

Unlike most popular compositing window managers, tiling window managers really make an attempt at managing your windows for you. Instead of having you constantly reorganize the individual windows on your screen, you specify at a high level how you want windows to be placed and the window manager does it for you. New windows are intelligently placed based on the high-level directives you’ve already given. 

Tiling WMs also provide you really efficient keyboard shortcuts. Because there’s an unambiguous arrangement, you can quickly do things like switch focus to the window immediately to the left, right, top, or bottom, as opposed to most compositing window managers where the best keyboard option is Alt-Tabbing through a linear list of all your windows.

Tiling WMs work for you, not against you. You put in the least amount of effort and get your work done in a lot less time.

###They scale

It’s possible to sanely deal with huge numbers of windows and workflows in a tiling wm. You’re able to group and manipulate windows together in more sophisticated ways than you can in traditional window managers that limit operations to all instances of a single application or everything on a virtual desktop.

###They&#39;re insanely customizable

Most tiling window managers are written by developers for developers. They tend to provide rich, well-documented APIs that expose hooks for everything you could want. You could hack them, play around, and even edit the code to your choice. And when you get the color schemes right, it looks fucking awesome.

###They&#39;re badass
Yeah, once you have your wm setup, everyone would ask for your scrots and dots. You&#39;ll be famous, and you&#39;ll feel l33t whenever you startx on your tty.
___

##Comparing some popular Tiling WMs

Here are the 6 most popular tiling window managers.

###bspwm

bspwm stands for Binary Space Partitioning Window Manager. It supports tiling, stacking, and tabbing layouts, which it handles dynamically. It represents windows as the leaves of a full binary tree. It is written in C and is under active development.

Some details for advanced users:

System tray support: None
On-the-fly reload: Yes
Composting: External
Layouts: v-Split, h-Split
Pixel Usage: Variable Borders
Control: via bspc
Library: XCB

###Awesome

Awesome has a unique take on the concept of a tiling window manager. It is probably the most user-friendly on the list. Much like i3, it claims to have well-documented code to make it very easy to dig right into for modifications. It adheres to FreeDesktop standards (Desktop notifications system, system tray, etc.) and has great keybindings which make navigating with it effortless. It is a dynamic wm and supports floating.


Some details for advanced users:

System tray support: Built-in
On-the-fly reload: Yes
Composting: External
Layouts: max, nh-stack (and invert), nv-stack (and invert), free
Pixel Usage: Variable Borders, optional h-tab titles
Control: dbus(if enabled)
Library: XCB
Configured with Lua.
Built-in Bar
###dwm

DWM is, well, also a dynamic window manager. Tiling isn’t the only way you can manage your windows. It’s also possible to lay the windows out in a floating or monocle style. All modifications to DWM can be done within its source code. Easy keyboard shortcuts allow for a great navigation experience while managing windows.

Some details for advanced users:

System tray support: Optional Patch
On-the-fly reload: Optional
Composting: External
Layouts: v-stack, max
Pixel Usage: 1-pix borders
Library: Xlib
Configured with C(recompile)
Built-in Bar

###Xmonad

Xmonad is a tiling window manager written in Haskell. Like most (if not all) window managers, it comes with no frills or window decorations. It works out-of-the-box and is very user friendly. On top of all that, Xmonad sports a fairly big extension library (which can add on even more functionality). The required libraries and ghc are big in size(about 800 mbs disk space). More customizable than any other window manager, only if you know Haskell. 

Some details for advanced users:

System tray support: None
On-the-fly reload: Yes
Composting: Yes
Layouts: nv-stack, nh-stack, max
Pixel Usage: variable borders, no titles
Control: via xmonad-hooks
Library: Xlib
Configured with Haskell
Xmobar can be used

###herbstluftwm

Herbstluftwm is a manual tiling window manager for X11 written in C. The layout is based on splitting frames into subframes. Herbstluft is being rewritten in C++, termed as the &#39;winter breeze&#39;. The window manager currently lacks some features but the developers have promised to include requests in the C++ rewrite. Windows can&#39;t be floated, but there is a workaround using a bash script.

Some details for advanced users:

System tray support: None
On-the-fly reload: Yes
Composting: External
Layouts: rows, columns
Pixel Usage: 1-pix borders
Control: via herbstclient
Library: Xlib, Glib

###i3wm

This is my choice. i3 is a dynamic tiling window manager. It has clean and fully documented code that makes it real simple to modify and tinker with. With extremely easy to remember keybindings, using i3 is extremely enjoyable, even without the need for a mouse.

Some details for advanced users:

System tray support: i3-bar
On-the-fly reload: Yes
Composting: External
Layouts: tree, v-split, h-split, stacked, tabbed, max, can be nested infinitely
Pixel Usage: none, 1-pix or 2-pix, optional titlebars, can hide edge borders
Control: via ipc, or i3-msg(uses ipc)
Library: XCB
Built-in bar(i3-bar). Conky output can also be piped to it. Other options include i3blocks and dzen2.

___

###Notes:

Management style
Dynamic management emphasizes automatic management of window layouts for speed and simplicity. Manual management emphasizes manual adjustment of layout and sizing with potentially more precise control, at the cost of more time spent moving and sizing windows.

Layouts
A number of common layout types appear in several tiling WMs, although the terminology varies somewhat.

max: one window shown fullscreen (with or without a status bar, title and borders). Aka: monocle (dwm).
h-stack: master area in top half, other windows stack up horizontally in the bottom half. The master area may be resizable. May be inverted top-bottom. Aka: bottom stack (dwm).
v-stack: master area in left half, other windows stack up vertically in the right half. The master area may be resizable. May be inverted left-right. Aka: tile (dwm).
nh-stack: h-stack allowing &gt;=1 windows in master area. Aka: nbstack (dwm)
nv-stack: v-stack allowing &gt;=1 windows in master area. Aka: ntile (dwm)
h-split: a keybinding splits the current window horizontally creating space for another.
v-split: a keybinding splits the current window vertically creating space for another.

___

####References
I used these links for help.
[https://wiki.archlinux.org/index.php/Comparison_of_tiling_window_managers](https://wiki.archlinux.org/index.php/Comparison_of_tiling_window_managers)
[https://www.maketecheasier.com/tiling-window-managers-linux/](https://www.maketecheasier.com/tiling-window-managers-linux/)
___

That&#39;s it. You can pm me for any help regarding i3wm. Also, @unh0lys0da,@oaktree,@g3ntleman,@Joe_Schmoe, and @pry0cc use i3 as well. If you choose any other wm, you could hit up their official channel to discuss your problems. All these window managers have their official channels on freenode, namely #herbstluftwm, #bspwm, #xmonad, and #i3. dwm though has its own channel on the suckless IRC. If you want some good dotfiles, visit [dotshare](http://dotshare.it). These were the famous ones though. There are other window managers as well. Use the first link in the references for a complete table comparing all tiling wms.</description>
    
    <lastBuildDate>Fri, 22 Dec 2017 00:36:30 +0000</lastBuildDate>
    <category>Linux</category>
    <atom:link href="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Hackers&#39; Choice: Tiling Window Managers</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/11</link>
        <pubDate>Fri, 22 Dec 2017 00:57:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1166-11</guid>
        <source url="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166.rss">Hackers&#39; Choice: Tiling Window Managers</source>
      </item>
      <item>
        <title>Hackers&#39; Choice: Tiling Window Managers</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/10</link>
        <pubDate>Fri, 22 Dec 2017 00:36:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1166-10</guid>
        <source url="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166.rss">Hackers&#39; Choice: Tiling Window Managers</source>
      </item>
      <item>
        <title>Hackers&#39; Choice: Tiling Window Managers</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/8</link>
        <pubDate>Thu, 21 Sep 2017 12:51:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1166-8</guid>
        <source url="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166.rss">Hackers&#39; Choice: Tiling Window Managers</source>
      </item>
      <item>
        <title>Hackers&#39; Choice: Tiling Window Managers</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Yo I’ll post up my config soon enough. My setup is killer. <img src="https://0x00sec.org/images/emoji/twitter/joy.png?v=9" title=":joy:" class="emoji" alt=":joy:"></p>
          <p><a href="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/6</link>
        <pubDate>Fri, 07 Oct 2016 09:35:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1166-6</guid>
        <source url="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166.rss">Hackers&#39; Choice: Tiling Window Managers</source>
      </item>
      <item>
        <title>Hackers&#39; Choice: Tiling Window Managers</title>
        <dc:creator><![CDATA[kowalski]]></dc:creator>
        <description><![CDATA[
            <p><span class="hashtag">#COLORS</span></p>
<pre><code>#class                  border   backgr.  text  indicator
client.focused          #2D2D2D #424242 #cad0c4 #cad0c4
client.focused_inactive #2D2D2D #151515 #2D2D2D
client.unfocused        #222222 #151515 #605e56
client.urgent           #a5a5a5 #a5a5a5 #1E1E1E
client.background       #161616
</code></pre>
<p>Remember though that these colors won’t apply to your bar, there is a color class in the bar class of the config which you need to edit. <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
The font I use is <em>ohsnap</em> for the bar and the window titles. <em>Terminus</em> is also an option.</p>
<p>If you want to customize your terminal, go to <a href="http://terminal.sexy" rel="nofollow noopener">terminal.sexy</a> to get some good colors.</p>
<p>I’ve modded my bar to use this, a darker bar looks more impressive to me.</p>
<pre><code>      colors {
                background #151515
                statusline #777777
                # class            border  backgrd text
                focused_workspace  #2D2D2D #2D2D2D #ffffff
                active_workspace   #2D2D2D #2D2D2D #cad0c4
                urgent_workspace   #2d2d2d #2d2d2d #cad0c4
                inactive_workspace #1E1E1E #1E1E1E #605e56
        }
</code></pre>
<p>This was the older color scheme.</p>
<pre><code>#colors
  colors {
  background #101010
  statusline #605c5a
  focused_workspace #101010 #101010 #b72f62
  active_workspace #5f5f5f #101010 #101010
  inactive_workspace #101010 #101010 #5f5f5f
urgent_workspace #2e3436 #9a878f
}
</code></pre>
<p>My inspiration is <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a>. Thanks for making me choose i3.</p>
          <p><a href="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/5</link>
        <pubDate>Tue, 04 Oct 2016 14:30:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1166-5</guid>
        <source url="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166.rss">Hackers&#39; Choice: Tiling Window Managers</source>
      </item>
      <item>
        <title>Hackers&#39; Choice: Tiling Window Managers</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Hey can you drop your <code>~/.i3/config</code> or at least your color scheme? I like your color scheme.</p>
          <p><a href="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/4</link>
        <pubDate>Tue, 04 Oct 2016 14:17:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1166-4</guid>
        <source url="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166.rss">Hackers&#39; Choice: Tiling Window Managers</source>
      </item>
      <item>
        <title>Hackers&#39; Choice: Tiling Window Managers</title>
        <dc:creator><![CDATA[kowalski]]></dc:creator>
        <description><![CDATA[
            <p>Lets have a scrot party. This is why tiling wms rock!</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/9/9b258fda3d83873e09a8caec6ba917cf08b78aa9.png" width="" height=""></p>
<p>My i3 setup.</p>
          <p><a href="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/3</link>
        <pubDate>Tue, 04 Oct 2016 14:10:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1166-3</guid>
        <source url="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166.rss">Hackers&#39; Choice: Tiling Window Managers</source>
      </item>
      <item>
        <title>Hackers&#39; Choice: Tiling Window Managers</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>I love i3. Never going back.</p>
          <p><a href="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/2</link>
        <pubDate>Tue, 04 Oct 2016 14:06:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1166-2</guid>
        <source url="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166.rss">Hackers&#39; Choice: Tiling Window Managers</source>
      </item>
      <item>
        <title>Hackers&#39; Choice: Tiling Window Managers</title>
        <dc:creator><![CDATA[kowalski]]></dc:creator>
        <description><![CDATA[
            <p><span class="hashtag">#Tiling</span> Window Managers<br>
Hey, I am worz/ovtru3. Most of you know me, I have been on the IRC for about two months now. I had promised <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> to do an article on tiling window managers, because few days ago, I was experimenting with almost all the major ones. At last, I settled with i3wm, because it had everything I wanted. i3 has also got a very comprehensive documentation. Also, xmonad and herbstluftwm will be my best options if I were to switch in the coming years.</p>
<hr>
<p><em>Note: The bar should be kept independent of the window manager. I could use xmobar in i3 and dzen2 in hebstluftwm. Don’t choose a wm just because the bar you see with it in a screenshot is badass. Also, we’ll not cover the installation part here. The meaning of some specific terms like v-split, dynamic tiling etc are illustrated at the end in the Notes section.</em></p>
<hr>
<p>#<span class="hashtag">#What</span> is a Tiling Window Manager?</p>
<p>Wikipedia says:</p>
<blockquote>
<p>In computing, a tiling window manager is a window manager with an organization of the screen into mutually non-overlapping frames, as opposed to the more popular approach of coordinate-based stacking of overlapping objects (windows) that tries to fully emulate the desktop metaphor.</p>
</blockquote>
<p>Actually, most popular window managers are what are called “compositing window managers,” which is what you are using by default in Microsoft Windows, OSX, and Linux(Gnome and KDE). They use the desktop metaphor, where each program is treated like a re-sizable piece of paper. You can move them around freely, change their size, and cause them to overlap one another.</p>
<p>In contrast, a tiling window manager is more like a well-organized drawer than a desk. The entire surface is divided into non-overlapping buckets where windows are displayed. If you’ve used pretty much any IDE, like Eclipse or Visual Studio, or a terminal multiplexer, like screen or tmux, you’re already familiar with this approach.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/2/2aa516394d6edfeeb4b0a92bc0be7d5bfc9eae00.png" width="" height=""></p>
<p>This is what we’re talking about.</p>
<hr>
<p>#<span class="hashtag">#Why</span> should I use a Tiling WM?</p>
<p>##<span class="hashtag">#They</span>’re Efficient</p>
<p>Unlike most popular compositing window managers, tiling window managers really make an attempt at managing your windows for you. Instead of having you constantly reorganize the individual windows on your screen, you specify at a high level how you want windows to be placed and the window manager does it for you. New windows are intelligently placed based on the high-level directives you’ve already given.</p>
<p>Tiling WMs also provide you really efficient keyboard shortcuts. Because there’s an unambiguous arrangement, you can quickly do things like switch focus to the window immediately to the left, right, top, or bottom, as opposed to most compositing window managers where the best keyboard option is Alt-Tabbing through a linear list of all your windows.</p>
<p>Tiling WMs work for you, not against you. You put in the least amount of effort and get your work done in a lot less time.</p>
<p>##<span class="hashtag">#They</span> scale</p>
<p>It’s possible to sanely deal with huge numbers of windows and workflows in a tiling wm. You’re able to group and manipulate windows together in more sophisticated ways than you can in traditional window managers that limit operations to all instances of a single application or everything on a virtual desktop.</p>
<p>##<span class="hashtag">#They</span>’re insanely customizable</p>
<p>Most tiling window managers are written by developers for developers. They tend to provide rich, well-documented APIs that expose hooks for everything you could want. You could hack them, play around, and even edit the code to your choice. And when you get the color schemes right, it looks fucking awesome.</p>
<p>##<span class="hashtag">#They</span>’re badass<br>
Yeah, once you have your wm setup, everyone would ask for your scrots and dots. You’ll be famous, and you’ll feel l33t whenever you startx on your tty.</p>
<hr>
<p>#<span class="hashtag">#Comparing</span> some popular Tiling WMs</p>
<p>Here are the 6 most popular tiling window managers.</p>
<p>##<span class="hashtag">#bspwm</span></p>
<p>bspwm stands for Binary Space Partitioning Window Manager. It supports tiling, stacking, and tabbing layouts, which it handles dynamically. It represents windows as the leaves of a full binary tree. It is written in C and is under active development.</p>
<p>Some details for advanced users:</p>
<p>System tray support: None<br>
On-the-fly reload: Yes<br>
Composting: External<br>
Layouts: v-Split, h-Split<br>
Pixel Usage: Variable Borders<br>
Control: via bspc<br>
Library: XCB</p>
<p>##<span class="hashtag">#Awesome</span></p>
<p>Awesome has a unique take on the concept of a tiling window manager. It is probably the most user-friendly on the list. Much like i3, it claims to have well-documented code to make it very easy to dig right into for modifications. It adheres to FreeDesktop standards (Desktop notifications system, system tray, etc.) and has great keybindings which make navigating with it effortless. It is a dynamic wm and supports floating.</p>
<p>Some details for advanced users:</p>
<p>System tray support: Built-in<br>
On-the-fly reload: Yes<br>
Composting: External<br>
Layouts: max, nh-stack (and invert), nv-stack (and invert), free<br>
Pixel Usage: Variable Borders, optional h-tab titles<br>
Control: dbus(if enabled)<br>
Library: XCB<br>
Configured with Lua.<br>
Built-in Bar<br>
##<span class="hashtag">#dwm</span></p>
<p>DWM is, well, also a dynamic window manager. Tiling isn’t the only way you can manage your windows. It’s also possible to lay the windows out in a floating or monocle style. All modifications to DWM can be done within its source code. Easy keyboard shortcuts allow for a great navigation experience while managing windows.</p>
<p>Some details for advanced users:</p>
<p>System tray support: Optional Patch<br>
On-the-fly reload: Optional<br>
Composting: External<br>
Layouts: v-stack, max<br>
Pixel Usage: 1-pix borders<br>
Library: Xlib<br>
Configured with C(recompile)<br>
Built-in Bar</p>
<p>##<span class="hashtag">#Xmonad</span></p>
<p>Xmonad is a tiling window manager written in Haskell. Like most (if not all) window managers, it comes with no frills or window decorations. It works out-of-the-box and is very user friendly. On top of all that, Xmonad sports a fairly big extension library (which can add on even more functionality). The required libraries and ghc are big in size(about 800 mbs disk space). More customizable than any other window manager, only if you know Haskell.</p>
<p>Some details for advanced users:</p>
<p>System tray support: None<br>
On-the-fly reload: Yes<br>
Composting: Yes<br>
Layouts: nv-stack, nh-stack, max<br>
Pixel Usage: variable borders, no titles<br>
Control: via xmonad-hooks<br>
Library: Xlib<br>
Configured with Haskell<br>
Xmobar can be used</p>
<p>##<span class="hashtag">#herbstluftwm</span></p>
<p>Herbstluftwm is a manual tiling window manager for X11 written in C. The layout is based on splitting frames into subframes. Herbstluft is being rewritten in C++, termed as the ‘winter breeze’. The window manager currently lacks some features but the developers have promised to include requests in the C++ rewrite. Windows can’t be floated, but there is a workaround using a bash script.</p>
<p>Some details for advanced users:</p>
<p>System tray support: None<br>
On-the-fly reload: Yes<br>
Composting: External<br>
Layouts: rows, columns<br>
Pixel Usage: 1-pix borders<br>
Control: via herbstclient<br>
Library: Xlib, Glib</p>
<p>##<span class="hashtag">#i3wm</span></p>
<p>This is my choice. i3 is a dynamic tiling window manager. It has clean and fully documented code that makes it real simple to modify and tinker with. With extremely easy to remember keybindings, using i3 is extremely enjoyable, even without the need for a mouse.</p>
<p>Some details for advanced users:</p>
<p>System tray support: i3-bar<br>
On-the-fly reload: Yes<br>
Composting: External<br>
Layouts: tree, v-split, h-split, stacked, tabbed, max, can be nested infinitely<br>
Pixel Usage: none, 1-pix or 2-pix, optional titlebars, can hide edge borders<br>
Control: via ipc, or i3-msg(uses ipc)<br>
Library: XCB<br>
Built-in bar(i3-bar). Conky output can also be piped to it. Other options include i3blocks and dzen2.</p>
<hr>
<p>##<span class="hashtag">#Notes:</span></p>
<p>Management style<br>
Dynamic management emphasizes automatic management of window layouts for speed and simplicity. Manual management emphasizes manual adjustment of layout and sizing with potentially more precise control, at the cost of more time spent moving and sizing windows.</p>
<p>Layouts<br>
A number of common layout types appear in several tiling WMs, although the terminology varies somewhat.</p>
<p>max: one window shown fullscreen (with or without a status bar, title and borders). Aka: monocle (dwm).<br>
h-stack: master area in top half, other windows stack up horizontally in the bottom half. The master area may be resizable. May be inverted top-bottom. Aka: bottom stack (dwm).<br>
v-stack: master area in left half, other windows stack up vertically in the right half. The master area may be resizable. May be inverted left-right. Aka: tile (dwm).<br>
nh-stack: h-stack allowing &gt;=1 windows in master area. Aka: nbstack (dwm)<br>
nv-stack: v-stack allowing &gt;=1 windows in master area. Aka: ntile (dwm)<br>
h-split: a keybinding splits the current window horizontally creating space for another.<br>
v-split: a keybinding splits the current window vertically creating space for another.</p>
<hr>
<p>###<span class="hashtag">#References</span><br>
I used these links for help.<br>
<a href="https://wiki.archlinux.org/index.php/Comparison_of_tiling_window_managers" rel="noopener nofollow ugc">https://wiki.archlinux.org/index.php/Comparison_of_tiling_window_managers</a><br>
<a href="https://www.maketecheasier.com/tiling-window-managers-linux/" rel="noopener nofollow ugc">https://www.maketecheasier.com/tiling-window-managers-linux/</a></p>
<hr>
<p>That’s it. You can pm me for any help regarding i3wm. Also, <span class="mention">@unh0lys0da</span>,<a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a>,<a class="mention" href="https://0x00sec.org/u/g3ntleman">@g3ntleman</a>,<a class="mention" href="https://0x00sec.org/u/joe_schmoe">@Joe_Schmoe</a>, and <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> use i3 as well. If you choose any other wm, you could hit up their official channel to discuss your problems. All these window managers have their official channels on freenode, namely <span class="hashtag">#herbstluftwm</span>, <span class="hashtag">#bspwm</span>, <span class="hashtag">#xmonad</span>, and <a class="hashtag" href="https://0x00sec.org/tag/i3">#<span>i3</span></a>. dwm though has its own channel on the suckless IRC. If you want some good dotfiles, visit <a href="http://dotshare.it" rel="noopener nofollow ugc">dotshare</a>. These were the famous ones though. There are other window managers as well. Use the first link in the references for a complete table comparing all tiling wms.</p>
          <p><a href="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166/1</link>
        <pubDate>Tue, 04 Oct 2016 09:45:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1166-1</guid>
        <source url="https://0x00sec.org/t/hackers-choice-tiling-window-managers/1166.rss">Hackers&#39; Choice: Tiling Window Managers</source>
      </item>
  </channel>
</rss>
