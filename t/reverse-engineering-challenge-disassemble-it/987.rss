<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Reverse Engineering Challenge: Disassemble it!</title>
    <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987</link>
    <description>Are you trying to master the ELF format and you need some stuff to try your new skills?.... well, this is a simple challenge for you to try. 

# The Challenge
A colleague that works as Network Engineer for an important company has captured a piece of malware that somebody was trying to use against the company. Your friend tried to take a look at the code using `objdump` but he couldn&#39;t get anything so he come to you, an expert hacker, master of the Elfs to help him get the assembly code for that malware.

_Note: The binary in this challenge does not contain any malware. You can run it if you want but that is not even necesary_
# Your Goal
Fix the binary file. So you  can disassemble it using `objdump` and figure out the thread for this zero-day malware.

&gt; To probe you fix the binary, post the output of `readelf -h` in the comments. Use the `spoil` tag so your solution is not seen by other people trying to solve the challenge. Be free to provide a brief write-up explaining how did you solve the challenge

To get the binary you will have to copy and paste the text below in a file name  `rec01.gz.base64` (actually you can name it as you wish... it is just a name)

Then you have to figure out how to get the binary out of that file.

**Hint0:** No idea on how to get the binary file
[spoiler]
Well, this is hint 0 because we have already gave it to you. Check again the file name we have proposed and make a guess
[/spoiler]

**Hint1:** How to get the binary
[spoiler]
`cat rec01.gz.base64 | base64 -d | gunzip &gt; rec01`
[/spoiler]

**Hint2:** Not sure what to do next?
[spoiler]
Try readlelf on the binary and check the output. There are some complains in there.
[/spoiler]

**Hint3:** Use this as last resource in case you are really stuck.
[spoiler]
The original program has 9 sections... Now it should be easy!
[/spoiler]



### Your Secondary Goal
Write a program to apply this basic anti-forensic technique to any ELF file :stuck_out_tongue:
Then you can sell this tool to your colleague company so they can analyse future malwares using this technique.  

Hack Fun!

# The Challenging Binary

    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</description>
    
    <lastBuildDate>Wed, 31 Aug 2016 05:26:45 +0000</lastBuildDate>
    <category>Challenges</category>
    <atom:link href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/_py">@_py</a> and <span class="mention">@unh0lys0da</span>,</p>
<p>To be honest I haven’t read the text on <span class="mention">@unh0lys0da</span> post, just looked at the code and I though it was the reply to the secondary goal:</p>
<aside class="quote no-group quote-modified" data-username="0x00pf" data-post="1" data-topic="987">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/0x00pf/40/199_2.png" class="avatar"> 0x00pf:</div>
<blockquote>
<p>##<span class="hashtag">#Your</span> Secondary Goal</p>
<p>Write a program to apply this basic anti-forensic technique to any ELF file <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
</blockquote>
</aside>
<p>Actually, this are the two additional things you have to do to remove any warning from the <code>readelf</code> output (in addition to set the number of sections to 0). After that, <code>objdump</code>, will still fail to disassemble the program and <code>readelf</code> will not show any warning.</p>
<p>I really have to be more precise with these writings <img src="https://0x00sec.org/images/emoji/twitter/blush.png?v=9" title=":blush:" class="emoji" alt=":blush:"></p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/16">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/16</link>
        <pubDate>Tue, 30 Aug 2016 16:03:15 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-16</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>Hm I should do some reading then, but after changing it to 0, it worked for me as well.</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/15</link>
        <pubDate>Tue, 30 Aug 2016 08:54:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-15</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p><span class="mention">@unh0lys0da</span>, the “fix” for this challenge was to change the number of sections from 0 to 9. This code sample doesn’t seem to accomplish that unless I’m too tired.</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/14</link>
        <pubDate>Tue, 30 Aug 2016 06:10:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-14</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Good job. I did exactly the same</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/13</link>
        <pubDate>Mon, 29 Aug 2016 16:48:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-13</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>Alright here are the two programs i used to fix it:</p>
<div class="spoiler"><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/12">spoiler</a></div>
<p>Ok so the spoiler tag is pretty useless here.<br>
Ofcourse this could be put together as one program easily, but I fixed it two steps at a time.</p>
<p>Writing a program that automaticly detects tricks like this will be a bit harder, but I’ll see what I can come up with. ^^</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/12</link>
        <pubDate>Mon, 29 Aug 2016 16:37:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-12</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/_py">@_py</a> sorry about the confusion. Malware use to do things like that to avoid analysis. That is what I mentioned.</p>
<p>The challenge writing really needs some improvement <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>To get some assembly out of the binary you can try radare2</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/11</link>
        <pubDate>Mon, 29 Aug 2016 16:08:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-11</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="_py" data-post="9" data-topic="987">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/_py/40/4275_2.png" class="avatar"> _py:</div>
<blockquote>
<p>Do you mind sharing your thoughts about your code?</p>
</blockquote>
</aside>
<p>I’ve edited my response with more comments and fixed some small inaccuracies.</p>
<aside class="quote no-group" data-username="_py" data-post="9" data-topic="987">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/_py/40/4275_2.png" class="avatar"> _py:</div>
<blockquote>
<p>Did you manage to get the object code because as I explained above to pico it wasn’t possible with the knowledge I had.</p>
</blockquote>
</aside>
<p>Since I had no experience with it, I was required to sneak a peek at the last hint. Other than that, it wasn’t bad. All I really had to do was to look up the structures of the ELF64 format and I could work it out from there.</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/10</link>
        <pubDate>Mon, 29 Aug 2016 09:39:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-10</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="0x00pf" data-post="7" data-topic="987">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/0x00pf/40/199_2.png" class="avatar"> 0x00pf:</div>
<blockquote>
<p>Note that, this simple measurement can be considered an anti-forensic technique because:</p>
<p>The program still works normally, despite of having a corrupted header</p>
<p>readelf does not show any section or any symbol in the binary</p>
<p>objdump cannot disassemble the program</p>
<p>gdb refuses to load the program</p>
</blockquote>
</aside>
<p><a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a>, indeed I could not load the program or dump the object code and that was actually my first thought of solving it but gdb was refusing to load the program. I actually tried using a breakpoint at the entry point address which was shown in the readelf output but I didn’t have any luck at all. Also thank you <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a> for the challenge. It was my first one and no it wasn’t that easy to be solved because I haven’t mastered ELF yet. Though, it made me more familiar with the format itself and this could not be done without your challenge. Props to you mate.</p>
<p><a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a>, I got confused with the “malware” reference in the challenge description that’s why I asked but I can totally see how it can be used for obfuscation reasons since I could not disassemble the code with gdb. Do you mind sharing your thoughts about your code? Did you manage to get the object code because as I explained above to pico it wasn’t possible with the knowledge I had.</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/9</link>
        <pubDate>Mon, 29 Aug 2016 08:21:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-9</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>I don’t think it was meant to be malicious, probably just a method to obfuscate information to deter the reverse engineer’s attempts.</p>
<p>EDIT: Forgot to click “Reply” before pico’s.</p>
<p>Also, here’s a quick reverse engineer of the disassembly of the main function, so it might be a bit inaccurate:</p>
<pre><code class="lang-auto">size_t count;                           // length of data
const char *buf;                        // pointer to a buffer
unsigned int fd;                        // file descriptor
unsigned int sys_call;                  // syscall number

// main
func_00400144() {
    count = 0xF;                        // length = 15
    buf = 0x4004f6;                     // "Please, fix me!", 0
    fd = 0x1;                           // STDOUT

    ret = func_004001a2();              // printf-like function
    ret ^= ret;                         // 0

    return ret;                         // return 0
}

// this is basically some implementation of printf
func_004001a2() {
    sys_call = 0x1;
    ret_0 = sys_call(fd, buf, count);   // ssize_t ret0 = write(fd, buf, count);

    if (ret_0 &lt; unsigned(0xffffffffffffff7c)) {
        var_0 = -LOW_32BITS(ret0);      // 0x84
        ret_1 = func_004001a9();        // ret_1 = 0x601018; no idea what this value is
        ret_0 = var_0;
        ret_0 |= -1;                    // or 0xffffffffffffffff; return value is -1
    }

    return ret_0;                       // return number of bytes written or -1 on error
}

// no idea what this is; probably needs to be tested in runtime
func_004001a9() {
    return 0x601018;
}
</code></pre>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/8</link>
        <pubDate>Mon, 29 Aug 2016 05:57:42 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-8</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Congrats <a class="mention" href="https://0x00sec.org/u/_py">@_py</a> <img src="https://0x00sec.org/images/emoji/twitter/trophy.png?v=9" title=":trophy:" class="emoji" alt=":trophy:">!</p>
<p>Hope you enjoyed… but according to your write up it looks like it was too easy…</p>
<div class="spoiler"><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/7">spoiler</a></div>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/7</link>
        <pubDate>Mon, 29 Aug 2016 05:41:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-7</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>[spoiler]By readelf-ing the binary it’s quite obvious that there is something wrong with the number of the section headers. They just can’t be 0.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/6cb08d55b205d143c8bc0f502524f8dc5a8c1e86.png" width="690" height="488"></p>
<p>So the next step was to patch the binary so that the ELF header field would be correct. The ELF 64-bit header looks like this:</p>
<p>typedef struct<br>
{<br>
unsigned char e_ident[EI_NIDENT];<br>
Elf64_Half    e_type;<br>
Elf64_Half e_machine;<br>
Elf64_Word    e_version;<br>
Elf64_Addr    e_entry;<br>
Elf64_Off     e_phoff;<br>
Elf64_Off     e_shoff;<br>
Elf64_Word    e_flags;<br>
Elf64_Half    e_ehsize;<br>
Elf64_Half    e_phentsize;<br>
Elf64_Half    e_phnum;<br>
Elf64_Half    e_shentsize;<br>
Elf64_Half    e_shnum;           &lt;— Number of Section Headers<br>
Elf64_Half    e_shstrndx;<br>
} Elf64_Ehdr;</p>
<p>Using the xxd command, we get a pretty lengthy output  but we only care about the first 64 bytes. Specifically, we care about the 61th and 62th byte just by looking at the struct above. Thus:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/6709bf66be0e1452642ce78984785a4b2f966eb1.png" width="690" height="101"></p>
<p>As you can see the 61th and 62th byte are <strong>0000</strong>. I played around with the number of section headers by using a hex editor but kept getting errors until 9 was proved to be the correct number of section headers and voila:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/8ca50b0889627265fa7efc3961ce82fbb9522a61.png" width="652" height="500"></p>
<p>No corruption errors!</p>
<p>I’m hoping to come up with the anti-forensic code soon and I’ll edit the post.</p>
<p><a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a> I’d like to ask a question. I’m not that experienced with ELF yet so I hope I won’t sound stupid, but how is “Stripping” the number of sections headers considered “malicious”?[/spoiler]</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/6</link>
        <pubDate>Mon, 29 Aug 2016 00:57:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-6</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>What utility are you using to edit raw binary?</p>
<p>EDIT: Nevermind! I used <span class="spoiler"><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/5">spoiler</a></span> and solved it!</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/5</link>
        <pubDate>Sun, 28 Aug 2016 21:38:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-5</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Congrats <a class="mention" href="https://0x00sec.org/u/l3akm3-0day">@L3akM3-0day</a> <img src="https://0x00sec.org/images/emoji/twitter/trophy.png?v=9" title=":trophy:" class="emoji" alt=":trophy:"> and thanks for the detailed write-up.</p>
<p>Well done!</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/4</link>
        <pubDate>Sun, 28 Aug 2016 21:18:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-4</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[L3akM3-0day]]></dc:creator>
        <description><![CDATA[
            <p>Here is how I solve the Challenge</p>
<p>First Goal : Fix it<br>
Here is how I did to solve the first part</p>
<div class="spoiler"><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/3">spoiler</a></div>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/3</link>
        <pubDate>Sun, 28 Aug 2016 21:00:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-3</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>I’m about as far as making it into a legit binary.</p>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/2</link>
        <pubDate>Sun, 28 Aug 2016 18:43:12 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-2</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
      <item>
        <title>Reverse Engineering Challenge: Disassemble it!</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Are you trying to master the ELF format and you need some stuff to try your new skills?.. well, this is a simple challenge for you to try.</p>
<h1>The Challenge</h1>
<p>A colleague that works as Network Engineer for an important company has captured a piece of malware that somebody was trying to use against the company. Your friend tried to take a look at the code using <code>objdump</code> but he couldn’t get anything so he come to you, an expert hacker, master of the Elfs to help him get the assembly code for that malware.</p>
<p><em>Note: The binary in this challenge does not contain any malware. You can run it if you want but that is not even necesary</em></p>
<h1>Your Goal</h1>
<p>Fix the binary file. So you  can disassemble it using <code>objdump</code> and figure out the thread for this zero-day malware.</p>
<blockquote>
<p>To probe you fix the binary, post the output of <code>readelf -h</code> in the comments. Use the <code>spoil</code> tag so your solution is not seen by other people trying to solve the challenge. Be free to provide a brief write-up explaining how did you solve the challenge</p>
</blockquote>
<p>To get the binary you will have to copy and paste the text below in a file name  <code>rec01.gz.base64</code> (actually you can name it as you wish… it is just a name)</p>
<p>Then you have to figure out how to get the binary out of that file.</p>
<p><strong>Hint0:</strong> No idea on how to get the binary file</p>
<div class="spoiler"><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/1">spoiler</a></div>
<p><strong>Hint1:</strong> How to get the binary</p>
<div class="spoiler"><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/1">spoiler</a></div>
<p><strong>Hint2:</strong> Not sure what to do next?</p>
<div class="spoiler"><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/1">spoiler</a></div>
<p><strong>Hint3:</strong> Use this as last resource in case you are really stuck.</p>
<div class="spoiler"><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/1">spoiler</a></div>
<h3>Your Secondary Goal</h3>
<p>Write a program to apply this basic anti-forensic technique to any ELF file <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"><br>
Then you can sell this tool to your colleague company so they can analyse future malwares using this technique.</p>
<p>Hack Fun!</p>
<h1>The Challenging Binary</h1>
<pre><code>H4sIACQUw1cAA+1YXWwUVRS+s7vTHWg7u+En1gB11ZJsoSwMLtKSAjtl297FAVugIH+W1l2gSX+S
dqY2IIKORS/Dig/ogw8EjS+YSBpjkBBCp6xSQINpQ6AJEQIRsmWN/Gn573ju7GxtNzHRxAcf9iR3
zz3fPd853525mezMznKpwsYwKGU2tAjRqJYJmHHAwj9wj6QAVowc5gpn5rJotAXG+EAWGuMR8pi/
lGdCqbruTWN8jgW/NlI3yXNYw2NJ9lg6U77Ayk55h+Wrr8thJ/rnlpJF+ZNg2GFULq9BF55+/lA4
5PNPHprWzxv7L1+pvqBWHXPB6okhRwB1U1mCHq803bpYLSY31uDoqmEOk8kHeQ+KN8IKJr1xmvh7
V+k3yPWtHiJnXSxe+JZhGO2u+wNVcVpvLeGwetqIdTGDF2HhaB5cmRjW2OVQBZNhTBbh3kqOagRv
yu2tzDNDUunttgEy2G5DqAaT6+KaELkorhZrxFUhcn4lJvew+quX7DgeUhejZdGdnDK0jAxL5AHW
3LizX34Gq4+eVbKxFuBwp67MS2RhVXcnrgpD3VlsgO5vBlTGUeWUSL4/Nh56wobyAQqSW3HOXCo/
hTVQwh7M9aCQ5oQy8gSsPnheyQppa7gEF1J73YkbQj+0w706QpsM7Co/CTFhPwOKoIc0HneekQuw
+tCujAtpq6mURC6ELA0rIOyHYuopd+I8rb6YCl8gnMHkAlZPFqvbTjuVF7FW4YaK86EiTD0w9Sen
XpiGYJrgsNGDS3qU05LGFlOt7zygp8n1/mF6JTXWQbES3fXuAYhD0arVWJsXz6F3oAer127jwvNS
VCpwhdSrtyXy070vJMALewT93pevREsZTBb+AMnx8mHD6J4Ily5u0LIgN+9EPoT0IKxNIq6PddcR
PWETdMJuoQ00O2j8ymzFfkKdoe+pMt7rl527Hs1W7iTi2o7jErmGyeX49qeGkWCPttBK0cjAenGD
uFF8XazdGBNrBF1cBWfgD6yeM+DOP8bkVjUmd+4exuQKJmeT0/tw3Qfw/T7MnMPGWbkEl9yFg/Lm
DFzYJ0WLsqWShJy/pxwV25UJZsvfgBz/FNrBTsZhI5b4WdAToHdg3fqNtHms68DgCyCqyz44hTrb
4CTq0GAuOHoMa1ZWS9r0fdketKzzF7kCdxqYPJUXCTpWzxhUUF8w2mCEtKkFuPOS7JXITavpdLOp
wpftKp25UHEujW6YydDT9B2X6BMurQMJlgI4CSV98kTXEYcrCD883OdgoS7fpFc4VtUYqWuLFHk2
N3Q0RZ4fj2aHI+2zlda65nBLE5KCtVUryqVXxSBqr2vc0trQHE4+A6gx21YgpsPNTMlxch8xSXwq
jCePDWMKTRB591qeM3E/PTJPDGPk0Wc9SyQY8wGfOwovghGmzynAh5lknd22JblZZfvsoQ8dUXZv
VlB12m8y0BdZtffDeA5OVgcFynh31Bbk8/baRd6z24F5r8pW8nNs63kvACKfBwllPEd5P8LYDrzN
I7yyEZ5IeSLwanhvcBSP6naArkPAm/YvnqMZy1jGMpaxjGUsYxn7f5n5Gm2MN+eVS5Ys8Hhr6pVm
WfH4fcU+/6y5ihkJbwt+3xy/76XCJI6Qr21rm9wq19UjX3OLHPFtaVZ89UpDY3hWQxj55EiHjHyt
LeE6uQ75IltrN7fWNUWQLxnXt7Uh3xstTU2RZvm/2kc2DPp+b7Piv74LJOOCtHxHWpyPRn2TAAta
/KDF/9o+Np8ZG5r1KZb6T08/BiR9MhbS8pk0X2TNU/q9bMDyyTgvrSGXVu9liz8ic+R7StLlpOWn
77/Uqpniu1PfYSw+TstP7y9a/eek4Sn+zDQ8ff9jtI+y+RZ/6d/wU/YnFJ4o78gSAAA=</code></pre>
          <p><a href="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987/1</link>
        <pubDate>Sun, 28 Aug 2016 17:33:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-987-1</guid>
        <source url="https://0x00sec.org/t/reverse-engineering-challenge-disassemble-it/987.rss">Reverse Engineering Challenge: Disassemble it!</source>
      </item>
  </channel>
</rss>
