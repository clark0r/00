<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Doubt malware anti-forensics</title>
    <link>https://0x00sec.org/t/doubt-malware-anti-forensics/23062</link>
    <description>Hello 0x00’ers!
I’m new here so if I haven’t categorized my question properly I apologize. Thanks  0x00Sec for providing a forum to discuss and learning together.
I have a problem about malware that has bothered me for a long time.


### Background:
I work as a security, and sometimes dealing with malicious is part of my job. Once a host was infected malware by unauthorized hadoop yarn api. This malware was run by a ordinary user hadoop, and this hadoop user did not have much privilege to modify settings or files on the system. 


### Strange Things:
Under normal circumstances, I will use cp /proc/pid/exe /tmp/malware to restore the executable program of the malicious process. Even if the file has been deleted or the memfd_create call that fileless malicious program is used, it can be successfully restored the executable program by the cp command, unless it is a system kernel thread. But when I used the cp command to recover a malware process, the command return
&gt; cp: cannot stat &#39;/proc/pid/exe&#39;: No such file or directory.

This is very strange, it is worth mentioning that I am a root user and use busybox cp

### What magic does this malware may use:
I very curious about the magic used by this malicious program. It can hide its executable program well, even if it is a ordinary user hadoop. I currently know that there are the following methods to achieve similar hiding:
1. fuse: Ordinary users can mount fuse file system and run their own executable program, and then umount fuse, as far as I know, the executable program of the process cannot be restored by using the cp command at this time
2. nfs: similar to method 1

But these two methods of hiding one&#39;s own executable program that I know above are not the method used by the hadoop malicious program I encountered that time. so here to consult, does any 0x00’ers know what strange magic the malicious program may use?

Looking forward to hearing any relevant points!</description>
    
    <lastBuildDate>Fri, 11 Sep 2020 09:49:19 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/doubt-malware-anti-forensics/23062.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Doubt malware anti-forensics</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/doubt-malware-anti-forensics/23062/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doubt-malware-anti-forensics/23062/9</link>
        <pubDate>Sun, 10 Jan 2021 00:31:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23062-9</guid>
        <source url="https://0x00sec.org/t/doubt-malware-anti-forensics/23062.rss">Doubt malware anti-forensics</source>
      </item>
      <item>
        <title>Doubt malware anti-forensics</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Ooops… sure. That’s easier…</p>
          <p><a href="https://0x00sec.org/t/doubt-malware-anti-forensics/23062/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doubt-malware-anti-forensics/23062/8</link>
        <pubDate>Fri, 11 Sep 2020 09:49:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23062-8</guid>
        <source url="https://0x00sec.org/t/doubt-malware-anti-forensics/23062.rss">Doubt malware anti-forensics</source>
      </item>
      <item>
        <title>Doubt malware anti-forensics</title>
        <dc:creator><![CDATA[duakx]]></dc:creator>
        <description><![CDATA[
            <p>thanks pcio!<br>
This is a good method. Next time I encounter a similar malicious program, I will try it.<br>
If there is no gdb on the system, can also use cp /proc/PID/map_files/xxxx to dump it.<br>
I miss this kind of magical malicious program.</p>
          <p><a href="https://0x00sec.org/t/doubt-malware-anti-forensics/23062/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doubt-malware-anti-forensics/23062/7</link>
        <pubDate>Fri, 11 Sep 2020 09:45:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23062-7</guid>
        <source url="https://0x00sec.org/t/doubt-malware-anti-forensics/23062.rss">Doubt malware anti-forensics</source>
      </item>
      <item>
        <title>Doubt malware anti-forensics</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>My bad. That was the first sentence in your post <img src="https://0x00sec.org/images/emoji/twitter/sweat_smile.png?v=9" title=":sweat_smile:" class="emoji" alt=":sweat_smile:"></p>
<p>The only way I can think about to dump a running process in this circumstances is to attach to it with <code>gdb</code> and dump the text segment to do some static analysis. For that you need to:</p>
<ul>
<li>Get the addresses for the text segment from <code>/proc/PID/maps</code>. It should be the first one with executable permissions</li>
<li>Connect to the process using <code>gdb --pid</code>
</li>
<li>Dump the memory with something like <code>dump binary memory my_dump.bin start_addr end_address</code> (where start and end address come from the first step… remember to add <code>0x</code> in the command to let <code>gdb</code> know the values are hexadecimal)</li>
</ul>
<p><em>You can try to dump the rest of segments and rebuild the original ELF, but I’m not sure if all the information would be available in memory (for instance symbol tables)</em></p>
<p>This should dump the text segment into the file. The ELF header should be there (it is usually at the beginning of the text program header) so you should be able to find the offset for the entry point and try to reverse the initial code to figure out if the program does something fancy</p>
<p>There is a chance that the trick is done in the command-line when launching the program… In that case you may be lucky and may find something in the user history file, but I won’t bet on that. <a href="https://unix.stackexchange.com/questions/197854/how-does-the-proc-pid-exe-symlink-differ-from-ordinary-symlinks" rel="nofollow noopener">This stack overflow user</a> reported something like this playing with symbolic links but I have not been able to reproduce it.</p>
          <p><a href="https://0x00sec.org/t/doubt-malware-anti-forensics/23062/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doubt-malware-anti-forensics/23062/6</link>
        <pubDate>Fri, 11 Sep 2020 09:32:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23062-6</guid>
        <source url="https://0x00sec.org/t/doubt-malware-anti-forensics/23062.rss">Doubt malware anti-forensics</source>
      </item>
      <item>
        <title>Doubt malware anti-forensics</title>
        <dc:creator><![CDATA[duakx]]></dc:creator>
        <description><![CDATA[
            <p>If the user running the malicious program is root, I won’t be bothered for so long</p>
          <p><a href="https://0x00sec.org/t/doubt-malware-anti-forensics/23062/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doubt-malware-anti-forensics/23062/5</link>
        <pubDate>Fri, 11 Sep 2020 08:40:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23062-5</guid>
        <source url="https://0x00sec.org/t/doubt-malware-anti-forensics/23062.rss">Doubt malware anti-forensics</source>
      </item>
      <item>
        <title>Doubt malware anti-forensics</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>And the process runs as root I assume</p>
          <p><a href="https://0x00sec.org/t/doubt-malware-anti-forensics/23062/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doubt-malware-anti-forensics/23062/4</link>
        <pubDate>Fri, 11 Sep 2020 08:38:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23062-4</guid>
        <source url="https://0x00sec.org/t/doubt-malware-anti-forensics/23062.rss">Doubt malware anti-forensics</source>
      </item>
      <item>
        <title>Doubt malware anti-forensics</title>
        <dc:creator><![CDATA[duakx]]></dc:creator>
        <description><![CDATA[
            <p>Hi pico!<br>
OS is centos7, kernel 3.10 and the specific release version is not recorded.</p>
<p>What is certain is that the process exists, and it is not a zombie process and the pid is not constantly changing.(So it is inferred that the malware did not fork call)</p>
<p>I did experiment with fuse and nfs. Although the goal of hiding executable programs was achieved after umount fs(fuse&amp;nfs）, I was able to confirm that this malicious program did not use these two methods based on my experimental phenomena.</p>
          <p><a href="https://0x00sec.org/t/doubt-malware-anti-forensics/23062/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doubt-malware-anti-forensics/23062/3</link>
        <pubDate>Fri, 11 Sep 2020 08:25:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23062-3</guid>
        <source url="https://0x00sec.org/t/doubt-malware-anti-forensics/23062.rss">Doubt malware anti-forensics</source>
      </item>
      <item>
        <title>Doubt malware anti-forensics</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>That’s interesting… What kernel is running the machine? Did you checked if the PID exist?. Have you verified your hypothesis with fuse/nfs?</p>
<p>An old technique to avoid being caught is to just fork again and again every few seconds, so your PID gets changing and it is just hard to target the process.</p>
          <p><a href="https://0x00sec.org/t/doubt-malware-anti-forensics/23062/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doubt-malware-anti-forensics/23062/2</link>
        <pubDate>Fri, 11 Sep 2020 07:44:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23062-2</guid>
        <source url="https://0x00sec.org/t/doubt-malware-anti-forensics/23062.rss">Doubt malware anti-forensics</source>
      </item>
      <item>
        <title>Doubt malware anti-forensics</title>
        <dc:creator><![CDATA[duakx]]></dc:creator>
        <description><![CDATA[
            <p>Hello 0x00’ers!<br>
I’m new here so if I haven’t categorized my question properly I apologize. Thanks  0x00Sec for providing a forum to discuss and learning together.<br>
I have a problem about malware that has bothered me for a long time.</p>
<h3>Background:</h3>
<p>I work as a security, and sometimes dealing with malicious is part of my job. Once a host was infected malware by unauthorized hadoop yarn api. This malware was run by a ordinary user hadoop, and this hadoop user did not have much privilege to modify settings or files on the system.</p>
<h3>Strange Things:</h3>
<p>Under normal circumstances, I will use cp /proc/pid/exe /tmp/malware to restore the executable program of the malicious process. Even if the file has been deleted or the memfd_create call that fileless malicious program is used, it can be successfully restored the executable program by the cp command, unless it is a system kernel thread. But when I used the cp command to recover a malware process, the command return</p>
<blockquote>
<p>cp: cannot stat ‘/proc/pid/exe’: No such file or directory.</p>
</blockquote>
<p>This is very strange, it is worth mentioning that I am a root user and use busybox cp</p>
<h3>What magic does this malware may use:</h3>
<p>I very curious about the magic used by this malicious program. It can hide its executable program well, even if it is a ordinary user hadoop. I currently know that there are the following methods to achieve similar hiding:</p>
<ol>
<li>fuse: Ordinary users can mount fuse file system and run their own executable program, and then umount fuse, as far as I know, the executable program of the process cannot be restored by using the cp command at this time</li>
<li>nfs: similar to method 1</li>
</ol>
<p>But these two methods of hiding one’s own executable program that I know above are not the method used by the hadoop malicious program I encountered that time. so here to consult, does any 0x00’ers know what strange magic the malicious program may use?</p>
<p>Looking forward to hearing any relevant points!</p>
          <p><a href="https://0x00sec.org/t/doubt-malware-anti-forensics/23062/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/doubt-malware-anti-forensics/23062/1</link>
        <pubDate>Thu, 10 Sep 2020 08:29:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23062-1</guid>
        <source url="https://0x00sec.org/t/doubt-malware-anti-forensics/23062.rss">Doubt malware anti-forensics</source>
      </item>
  </channel>
</rss>
