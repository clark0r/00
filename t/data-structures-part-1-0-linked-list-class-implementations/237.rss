<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Data Structures (Part 1.0): Linked List [Class Implementations]</title>
    <link>https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237</link>
    <description>Hello 0x00sec!

Welcome to the maiden article of my series on Data Structures. Today, I&#39;ll be talking about [Linked Lists](https://en.wikipedia.org/wiki/Linked_list).

## What is a Linked List? &lt;a name=&quot;whatis&quot;&gt;&lt;/a&gt;
Since, you can all read Wikipedia, I don&#39;t really have to go into much detail. But, a Linked List is a datastructure with the following characteristics:

* A root `node`, which points to any succeeding nodes. It can point to one node, and in turn the node to which it points may point to yet another node (and so on); or, it can point to no nodes at all.
* An `O(n)` search
* An `O(n)` delete, which deletes the `node` at a certain index.
* An `O(n)` insert function that puts a new node at a certain index.
* An `O(n) insert function that puts a new node at the __beginning__, subordinating the root `node`.

## Quick Vocab

1. A `node` is a member of the linked list. A `node` holds one piece of data (e.g. `int`, `double`, etc.) and a pointer to another node, typically the next node.

----
# Beginning the Implementation

I&#39;ll be writing C++ code for this series. I&#39;ll be making use of generic programming and object-oriented programming. `node` and `list` will be classes.

## Class Implementations

### node.h 

```c++
template &lt;class T&gt;
class node {
  private:
	T data;
  public:

    node&lt;T&gt;* next;
	
        // class constructor
        node(T _data = 0, node&lt;T&gt;* ptr = nullptr)
                : data(_data), next(ptr) {}
	
        ~node();

        T&amp; d(); // data accessor

        void d(T _data); // data setter
};
```
Let&#39;s go through this more-or-less line-by-line.

`template &lt;class T&gt;` means that we declare a type `T` to serve as a fill-in-the-blank for the future. Later on, we&#39;ll do something like `node&lt;int&gt;` or `node&lt;char&gt;`. All the `T`s will be changed to the specified type.

We declare a type and give it one private attribute: `data`, which is some type `T`.

Then there is a class constructor. The particular syntax may look somewhat cryptic. We have a member function `node(...)` which takes two parameters, `_data`, and `ptr`. Both parameters have reasonable default values. `_data` is the information you want stored in the particular `node`. `ptr` is the `node` to which you want _this_ `node` to point.

`~node()` is what is called a class destructor. When a `node` goes out of scope in a program, `~node()` is called to clean up any resources.

__Note__: All of the functions from ~node() down are implemented in another file, node.cpp.

`d()` is a member function that will allow a programmer to access a node&#39;s data. Similarly, `d(T _data)` is the corresponding writer function, which allows a programmer to change the value of attribute `data` for a certain node.

### list.h
```
    template &lt;class T&gt;
    class List {
      private:
          node&lt;T&gt;* root;
          size_t len;

      public:

          List() : root(nullptr), len(0) {}

          ~List();

          node&lt;T&gt;* search(const T&amp; q);

          node&lt;T&gt;* insert(T val, const size_t&amp; idx);

          T del(const size_t&amp; idx);

          size_t size();
    };
```
Okay... so something weird is happening with that syntax highlighting.

`List` is the class that will serve as the interface for our linked list. It has two `private` attributes: `root` is a pointer to the root `node` in the list; `len` is the length of the list (this is optional). _Note: `size_t` is like an `int` but it&#39;s architecture dependent._

`List()` is the constructor for the class. It takes no parameters and just sets `root` to be a `nullptr`, a pointer which points nowhere. It also, logically, sets the length `len` of the list to zero.

`~List()` is the destructor. If you have not yet noticed, `~` denotes a class&#39;s destructor. Again, from the destructor down, all of the member functions are implemented in another file (__list.cpp__), which I will show you in _Part 1.1_.

`search(...)`, `insert(...)`, and `del(...)` are the functions I mentioned [earlier](#whatis); `size()` is a function that will return the value of `len`, telling is how long our list is.

----

# Conclusion

I did not want to make this too long, so I will be dividing _Linked List_ up into several parts, this one being _Part 1.0_. Stay tuned for the implementations of `search()`, `insert()`, and `del()`.

See ya next time, 0x00&#39;ers,
oaktree</description>
    
    <lastBuildDate>Mon, 09 May 2016 16:22:58 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Data Structures (Part 1.0): Linked List [Class Implementations]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/9</link>
        <pubDate>Sun, 21 Jan 2018 00:37:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-237-9</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237.rss">Data Structures (Part 1.0): Linked List [Class Implementations]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.0): Linked List [Class Implementations]</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Please note that I said <strong>something like</strong> a <em>smart pointer</em>. Just to be clear, what I said is that, for each <code>new</code> you have to run a <code>delete</code>. You can use some trick to fire the execution of <code>delete</code> but you have to call it. For automatic variables you do not have to, the compiler generates that code for you.</p>
<p>I’m looking forward to read 1.1. I’m now curious about what you have done.</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/8</link>
        <pubDate>Mon, 09 May 2016 16:22:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-237-8</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237.rss">Data Structures (Part 1.0): Linked List [Class Implementations]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.0): Linked List [Class Implementations]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>The destructors you’ll see in the next post of this series (<em>1.1</em>) are implemented such that resource allocation is responsible <em>without</em> smart pointers. <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a></p>
<p>Believe me: If I knew there were memory leaks, I wouldn’t post the code… And I did check with <code>valgrind</code>.</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/7</link>
        <pubDate>Mon, 09 May 2016 13:14:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-237-7</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237.rss">Data Structures (Part 1.0): Linked List [Class Implementations]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.0): Linked List [Class Implementations]</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>C++ does it with automatic variables but not with dynamically allocated objects, static variables,… <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> redefines types as pointers what suggested that everything will be dynamically allocated. In those cases you need to use something like a <em>smart pointer</em>. Smart pointers are nowadays part of C++, so yes ‘the language still supports that’, but with a minor help from the programmer.</p>
<p>In C, if you really want to have something like that, you can add a <a href="https://en.wikipedia.org/wiki/Boehm_garbage_collector" rel="nofollow noopener">Garbage Collector</a> to your program.</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/6</link>
        <pubDate>Mon, 09 May 2016 05:05:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-237-6</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237.rss">Data Structures (Part 1.0): Linked List [Class Implementations]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.0): Linked List [Class Implementations]</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for the post! <img src="https://0x00sec.org/images/emoji/twitter/smiley_cat.png?v=9" title=":smiley_cat:" class="emoji" alt=":smiley_cat:"> Beautiful code you and <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> got there!</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/5</link>
        <pubDate>Sun, 08 May 2016 15:05:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-237-5</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237.rss">Data Structures (Part 1.0): Linked List [Class Implementations]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.0): Linked List [Class Implementations]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Nice work, <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a>! It’d be cool if you could get those destructors to run when a <code>List</code> goes out of scope, but that’s a C++ thing, more or less. Correct?</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/4</link>
        <pubDate>Sun, 08 May 2016 13:46:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-237-4</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237.rss">Data Structures (Part 1.0): Linked List [Class Implementations]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.0): Linked List [Class Implementations]</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>C implementation because I’ve got nothing better to do.</p>
<h3>node.h</h3>
<pre><code class="lang-auto">/*
 * replace int to whatever suits your needs
 * since C does not provide generic types
 */
typedef int Data;
typedef struct _node *link;
typedef struct _node {
    Data data;
    link next;
};

/*
 * the "constructor" to create a new node with a value d
 * initializes link next member to NULL
 * returns a pointer to a struct _node, null if an error
 */
link newNode(Data d);

/*
 * the "destructor" to free a node from memory given a 
 * pointer to a struct _node
 */
void freeNode(link n);
</code></pre>
<p>##<span class="hashtag">#list</span>.h</p>
<pre><code class="lang-auto">typedef struct _list {
    link first;
    size_t size;
} *List;

/*
 * the "constructor" to create a new list with size 0
 * initializes link first member to NULL
 * returns a pointer to a struct _list, null if an error
 */
List newList();

/*
 * the "destructor" to free a list from memory given a 
 * pointer to a struct _list
 */
void freeList(List l);

/*
 * searches for a node in List l with value d
 * returns a pointer to a struct _node
 */
link search(List l, Data d);

/*
 * instantiates and inserts a node into List l
 * with a value d into position pos
 */
void insert(List l, Data d, size_t pos);

/*
 * removes a node in position pos in List l
 */
void deleteNode(List l, size_t pos);
</code></pre>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/3</link>
        <pubDate>Sun, 08 May 2016 04:50:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-237-3</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237.rss">Data Structures (Part 1.0): Linked List [Class Implementations]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.0): Linked List [Class Implementations]</title>
        <dc:creator><![CDATA[Sea]]></dc:creator>
        <description><![CDATA[
            <p>Great post! I just recently learned C# and am glad a lot of the knowledge transfers over.</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/2</link>
        <pubDate>Sun, 08 May 2016 00:26:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-237-2</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237.rss">Data Structures (Part 1.0): Linked List [Class Implementations]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.0): Linked List [Class Implementations]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Hello 0x00sec!</p>
<p>Welcome to the maiden article of my series on Data Structures. Today, I’ll be talking about <a href="https://en.wikipedia.org/wiki/Linked_list" rel="nofollow noopener">Linked Lists</a>.</p>
<h2>What is a Linked List? <a name="whatis" href="https://0x00sec.org"></a>
</h2>
<p>Since, you can all read Wikipedia, I don’t really have to go into much detail. But, a Linked List is a datastructure with the following characteristics:</p>
<ul>
<li>A root <code>node</code>, which points to any succeeding nodes. It can point to one node, and in turn the node to which it points may point to yet another node (and so on); or, it can point to no nodes at all.</li>
<li>An <code>O(n)</code> search</li>
<li>An <code>O(n)</code> delete, which deletes the <code>node</code> at a certain index.</li>
<li>An <code>O(n)</code> insert function that puts a new node at a certain index.</li>
<li>An <code>O(n) insert function that puts a new node at the __beginning__, subordinating the root </code>node`.</li>
</ul>
<h2>Quick Vocab</h2>
<ol>
<li>A <code>node</code> is a member of the linked list. A <code>node</code> holds one piece of data (e.g. <code>int</code>, <code>double</code>, etc.) and a pointer to another node, typically the next node.</li>
</ol>
<hr>
<h1>Beginning the Implementation</h1>
<p>I’ll be writing C++ code for this series. I’ll be making use of generic programming and object-oriented programming. <code>node</code> and <code>list</code> will be classes.</p>
<h2>Class Implementations</h2>
<h3>node.h</h3>
<pre><code class="lang-auto">template &lt;class T&gt;
class node {
  private:
	T data;
  public:

    node&lt;T&gt;* next;
	
        // class constructor
        node(T _data = 0, node&lt;T&gt;* ptr = nullptr)
                : data(_data), next(ptr) {}
	
        ~node();

        T&amp; d(); // data accessor

        void d(T _data); // data setter
};
</code></pre>
<p>Let’s go through this more-or-less line-by-line.</p>
<p><code>template &lt;class T&gt;</code> means that we declare a type <code>T</code> to serve as a fill-in-the-blank for the future. Later on, we’ll do something like <code>node&lt;int&gt;</code> or <code>node&lt;char&gt;</code>. All the <code>T</code>s will be changed to the specified type.</p>
<p>We declare a type and give it one private attribute: <code>data</code>, which is some type <code>T</code>.</p>
<p>Then there is a class constructor. The particular syntax may look somewhat cryptic. We have a member function <code>node(...)</code> which takes two parameters, <code>_data</code>, and <code>ptr</code>. Both parameters have reasonable default values. <code>_data</code> is the information you want stored in the particular <code>node</code>. <code>ptr</code> is the <code>node</code> to which you want <em>this</em> <code>node</code> to point.</p>
<p><code>~node()</code> is what is called a class destructor. When a <code>node</code> goes out of scope in a program, <code>~node()</code> is called to clean up any resources.</p>
<p><strong>Note</strong>: All of the functions from ~node() down are implemented in another file, node.cpp.</p>
<p><code>d()</code> is a member function that will allow a programmer to access a node’s data. Similarly, <code>d(T _data)</code> is the corresponding writer function, which allows a programmer to change the value of attribute <code>data</code> for a certain node.</p>
<h3>list.h</h3>
<pre><code class="lang-auto">    template &lt;class T&gt;
    class List {
      private:
          node&lt;T&gt;* root;
          size_t len;

      public:

          List() : root(nullptr), len(0) {}

          ~List();

          node&lt;T&gt;* search(const T&amp; q);

          node&lt;T&gt;* insert(T val, const size_t&amp; idx);

          T del(const size_t&amp; idx);

          size_t size();
    };
</code></pre>
<p>Okay… so something weird is happening with that syntax highlighting.</p>
<p><code>List</code> is the class that will serve as the interface for our linked list. It has two <code>private</code> attributes: <code>root</code> is a pointer to the root <code>node</code> in the list; <code>len</code> is the length of the list (this is optional). <em>Note: <code>size_t</code> is like an <code>int</code> but it’s architecture dependent.</em></p>
<p><code>List()</code> is the constructor for the class. It takes no parameters and just sets <code>root</code> to be a <code>nullptr</code>, a pointer which points nowhere. It also, logically, sets the length <code>len</code> of the list to zero.</p>
<p><code>~List()</code> is the destructor. If you have not yet noticed, <code>~</code> denotes a class’s destructor. Again, from the destructor down, all of the member functions are implemented in another file (<strong>list.cpp</strong>), which I will show you in <em>Part 1.1</em>.</p>
<p><code>search(...)</code>, <code>insert(...)</code>, and <code>del(...)</code> are the functions I mentioned <a href="https://0x00sec.org#whatis">earlier</a>; <code>size()</code> is a function that will return the value of <code>len</code>, telling is how long our list is.</p>
<hr>
<h1>Conclusion</h1>
<p>I did not want to make this too long, so I will be dividing <em>Linked List</em> up into several parts, this one being <em>Part 1.0</em>. Stay tuned for the implementations of <code>search()</code>, <code>insert()</code>, and <code>del()</code>.</p>
<p>See ya next time, 0x00’ers,<br>
oaktree</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237/1</link>
        <pubDate>Sat, 07 May 2016 23:29:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-237-1</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-0-linked-list-class-implementations/237.rss">Data Structures (Part 1.0): Linked List [Class Implementations]</source>
      </item>
  </channel>
</rss>
