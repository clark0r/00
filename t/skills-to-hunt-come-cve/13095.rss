<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Skills to hunt come CVE</title>
    <link>https://0x00sec.org/t/skills-to-hunt-come-cve/13095</link>
    <description>
I have been lately training myself on windows exploitation using multiples resources , but I learnt a lot this time  in topics such as how to perfom buffer overflows , seh , multiples way to jmp a shellcode 

```
call / jmp esp
pop ret
push ret
small buff
SEH
```

I also learn  bypasing DEP using ROP , bypassing ASLR using non-ASLR modules, partial overwrite,bruteforce address space , theorical and practical knowlegde about safeSEH and SEHOP . the use of egghunters , but however I skipped a bit the module of unicode for shellcoding on windows / linux . I could consider myself I am at level 2 of exploit development , and level 3 I could say everything related to heap , wingdb ,  UAF , and etc. what things should I go for right now ? my main goal right now is to hunt bugs specially memory corruption ones , browsers , and cool ones . I know I could not have the level for that right now , but I could . so my question is where should I go ? 

&lt;img src=&#39;//0x00sec.s3.dualstack.us-east-1.amazonaws.com/original/2X/8/8cf25b4c9358838cfb1ef7652f651a2cb93eef8e.jpeg&#39;&gt;</description>
    
    <lastBuildDate>Fri, 19 Apr 2019 19:10:51 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://0x00sec.org/t/skills-to-hunt-come-cve/13095.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Skills to hunt come CVE</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed 3 days after the last reply. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/skills-to-hunt-come-cve/13095/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/skills-to-hunt-come-cve/13095/4</link>
        <pubDate>Mon, 22 Apr 2019 19:10:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13095-4</guid>
        <source url="https://0x00sec.org/t/skills-to-hunt-come-cve/13095.rss">Skills to hunt come CVE</source>
      </item>
      <item>
        <title>Skills to hunt come CVE</title>
        <dc:creator><![CDATA[blackleitus]]></dc:creator>
        <description><![CDATA[
            <p>thanks for your help so much . the next step it will be the 1-3 days more on shellcoding and move to heap exploits advanced or stay 1-4 weeks on reversing</p>
          <p><a href="https://0x00sec.org/t/skills-to-hunt-come-cve/13095/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/skills-to-hunt-come-cve/13095/3</link>
        <pubDate>Fri, 19 Apr 2019 19:10:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13095-3</guid>
        <source url="https://0x00sec.org/t/skills-to-hunt-come-cve/13095.rss">Skills to hunt come CVE</source>
      </item>
      <item>
        <title>Skills to hunt come CVE</title>
        <dc:creator><![CDATA[exploit]]></dc:creator>
        <description><![CDATA[
            <p>Everything you learn is helpful, as long as you put it to work.<br>
I have a really limited knowledge when it comes to Windows, but I’m going to try.</p>
<p>Now, “bypassing randomization using non-protected modules” is not enough, since <em>ASLR</em> is now practically everywhere, but if you find an address and dump it during runtime(<em>other words: Leak it</em>), you can calculate addresses to perform a <strong>code-reuse</strong> attack or such(ROP, JOP…). and it isn’t the only protection out there, there’s CFG(Control-flow guard) which attackers found multiple ways around in the past (<em>i.e; data-only attacks or out-of-context calls</em>), Isolated Heap, EMET…<br>
Remember when <em>Site Isolation</em> was used to run an <a href="https://blog.exodusintel.com/2019/01/22/exploiting-the-magellan-bug-on-64-bit-chrome-desktop/" rel="nofollow noopener">exploit multiple times and increase its reliability</a>?<br>
“Child crashed? duuuuh, all I know is the parent process is still alive.”<br>
What a comedy, it really is a cat and mouse game.</p>
<ul>
<li>WinDbg will be useful in studying a possible attack vector and its exploitability, so understand the (Windows) Console Debugger, the available commands and scripting.</li>
<li>Note that when it comes to real applications, the attacker doesn’t have access to the victim’s machine. He should first use a bug(or most likely a <strong>couple of them</strong>) to acheive code execution and get over the sandbox(<em>Escape it</em>), only then can he think of escalating privileges(<em>EoP, LPE</em>) and guarantee persistence(<em>using a rootkit</em>).</li>
<li>Looking at all the <a href="https://cwe.mitre.org/data/index.html" rel="nofollow noopener">bug types</a> and their examples wouldn’t hurt, such as OOB R/W, TOCTOU and Race conditions, Uninitialized buffer, Logic bugs, Heap and Stack overflows, UAF, Type confusion…</li>
<li>Familiarize with IDA, WINAPI and Reversing C++ code along with peeking at available documents that study a specific browser’s engine and internals will be great help.</li>
</ul>
<p>In general, searching more is what’ll help you, good luck!</p>
          <p><a href="https://0x00sec.org/t/skills-to-hunt-come-cve/13095/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/skills-to-hunt-come-cve/13095/2</link>
        <pubDate>Fri, 19 Apr 2019 18:50:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13095-2</guid>
        <source url="https://0x00sec.org/t/skills-to-hunt-come-cve/13095.rss">Skills to hunt come CVE</source>
      </item>
      <item>
        <title>Skills to hunt come CVE</title>
        <dc:creator><![CDATA[blackleitus]]></dc:creator>
        <description><![CDATA[
            <p>I have been lately training myself on windows exploitation using multiples resources , but I learnt a lot this time  in topics such as how to perfom buffer overflows , seh , multiples way to jmp a shellcode</p>
<pre><code class="lang-auto">call / jmp esp
pop ret
push ret
small buff
SEH
</code></pre>
<p>I also learn  bypasing DEP using ROP , bypassing ASLR using non-ASLR modules, partial overwrite,bruteforce address space , theorical and practical knowlegde about safeSEH and SEHOP . the use of egghunters , but however I skipped a bit the module of unicode for shellcoding on windows / linux . I could consider myself I am at level 2 of exploit development , and level 3 I could say everything related to heap , wingdb ,  UAF , and etc. what things should I go for right now ? my main goal right now is to hunt bugs specially memory corruption ones , browsers , and cool ones . I know I could not have the level for that right now , but I could . so my question is where should I go ?</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8cf25b4c9358838cfb1ef7652f651a2cb93eef8e.jpeg" width="" height=""></p>
          <p><a href="https://0x00sec.org/t/skills-to-hunt-come-cve/13095/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/skills-to-hunt-come-cve/13095/1</link>
        <pubDate>Fri, 19 Apr 2019 06:41:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13095-1</guid>
        <source url="https://0x00sec.org/t/skills-to-hunt-come-cve/13095.rss">Skills to hunt come CVE</source>
      </item>
  </channel>
</rss>
