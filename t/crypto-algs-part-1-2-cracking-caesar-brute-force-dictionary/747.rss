<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Crypto Algs (Part 1.2): Cracking Caesar [Brute Force + Dictionary]</title>
    <link>https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747</link>
    <description>Sometimes, frequency analysis may fail, as @dtm [pointed out](https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/5).

Let&#39;s send a message to our buddy, Bob. We want to tell him about an animal. Upon receiving the message and no key, Bob is confused. What does &quot;rkssotm&quot; mean!? He tries to use our frequency analysis program and this is his result: &quot;dweeafy.&quot;

What is &quot;dweeafy?&quot; That means nothing to Bob. We see that our program did as intended. It found the most frequent letter in &quot;rkssotm,&quot; `s`, and calculated the offset from `e`. As you see, such a method is not a silver bullet.

Let&#39;s build out a dictionary scanner to help us figure out what to make of the message.

---
**brute2.cpp**
```c
#include &quot;dict-scan.cpp&quot;
#include &quot;encrypt.cpp&quot;
#include &lt;utility&gt;

#define RED &quot;\033[0;31m&quot;
#define NORMAL &quot;\033[0;39m&quot;

int main(int argc, char** argv) {
    if (argc != 2) {
        std::cout &lt;&lt; &quot;Usage: ./brute2 /path/to/dict\n&quot;;
        exit(1);
    }

    std::string s; std::getline(std::cin, s);
    
    std::vector&lt;std::string&gt; dictionary;
    if ( !DictionaryScanner::load(std::string(argv[1]), dictionary) ) {
        exit(1);
    } else {
        std::cout &lt;&lt; RED &lt;&lt; &quot;[*] Loaded dictionary at &quot;
            &lt;&lt; NORMAL &lt;&lt; argv[1] &lt;&lt; std::endl;
    }

    std::pair&lt;int,int&gt; max_found(0,0); // key, num_found
    std::string tmp;
    int found;
    std::cout &lt;&lt; RED &lt;&lt; &quot;[*] Scanning brute forces...\n&quot; &lt;&lt; NORMAL;

    for (int i = 0; i &lt; 26; i++) {
        tmp = Caesar::decrypt(s, i);
        found = DictionaryScanner::scan( tmp, dictionary );
        if (found &gt; max_found.second) {
            max_found.second = found;
            max_found.first = i;
        }
    }

    std::cout &lt;&lt; RED &lt;&lt; &quot;[ key: &quot; &lt;&lt; max_found.first &lt;&lt; &quot;, found: &quot; &lt;&lt; max_found.second
                &lt;&lt; &quot; ] &quot; &lt;&lt; NORMAL &lt;&lt; Caesar::decrypt(s, max_found.first) &lt;&lt; std::endl;
    return 0;
}
```
Woah. A lot happens in that file, huh?

Let&#39;s run through it.

1. Take input from the user: `std::string s; std::getline(std::cin, s);`
2. Load the specified dictionary into a `vector` of `string`s.
3. Keep track of the maximum words found over all iterations. Remember the key used to get that max, too: `std::pair&lt;int,int&gt; max_found(0,0);` and the following `for` loop.
4. Print out the result.

That&#39;s all there is to it. But what is under the hood, in the DictionaryScanner namespace?

The first thing we encounter is `load(...)`, which (obviously) loads the dictionary into a `vector` for quick access.

```c
bool load(const std::string&amp; file_path, std::vector&lt;std::string&gt;&amp; dictionary)  {
    
    std::ifstream fp(file_path);

    if (!fp) {
        std::cout &lt;&lt; &quot;[*] Error opening dictionary file at &quot; &lt;&lt; file_path
            &lt;&lt; &quot;.\n&quot;;
        return false;
    }

    std::string tmp;
    while(fp &gt;&gt; tmp) {
        dictionary.push_back(tmp);
    }

    fp.close();

    return true;
} 
```
Next, let&#39;s take a look at the `scan(...)` subroutine.

```c
int scan(const std::string&amp; text, const std::vector&lt;std::string&gt;&amp; dictionary) {
    
    int found = 0;

    for (auto&amp; s : dictionary) {
        //std::cout &lt;&lt; &quot;checking &quot; &lt;&lt; s &lt;&lt; std::endl;
        if ( find(text, s) )
            found++;
    }

    return found;
}
```
We see that it is just keeping track of how many words are found in the dictionary. But, it relies on a function called `find(...)`, which seems to take two parameters: the cipher- or plaintext, and a word from the dictionary.

`find(...)` is implemented by us (me), not a standard library. I got a weird compile error, okay? And I was too lazy to figure that out, so I made my own function. I understand that this is like popping a tire and then reinventing the wheel just to avoid a mechanic.

```c
bool find (const std::string&amp; text, const std::string&amp; s) {
    size_t text_len = text.length(), s_len = s.length();

    int j,k;
    for (int i = 0; i &lt; text_len; i++) {
        j = i;
        k = 0;
        while(k &lt; s_len &amp;&amp; j &lt; text_len &amp;&amp; tolower(text[j]) == tolower(s[k])) {
            /*std::cout &lt;&lt; &quot;\ttext[j] == s[k]: &quot; &lt;&lt; text[j]
                &lt;&lt; &quot; == &quot; &lt;&lt; s[k] &lt;&lt; std::endl;*/
            j++;k++;
        }
        if (k == s_len &amp;&amp; j &lt;= text_len)
            return true;
    }

    return false;
}
```
The function -- case-insensitively -- checks for the first (if any) occurrence of a word in the `text`.

---
Okay, so Bob has just spent the last 3 hours of his life writing all of this code, just because he wants to avoid reading over 25 different versions of &quot;rkssotm.&quot;

Let&#39;s load [this dictionary](http://pastebin.com/LfCcMyCK), adapted from [this](https://github.com/hzlzh/Domain-Name-List/blob/master/Animal-words.txt) wordlist I found online.

Okay:

    $ ./brute2 ./animals.txt
    rkssotm
    [*] Loaded dictionary at ../animals.txt
    [*] Scanning brute forces...

![cute lemming](//0x00sec.s3.amazonaws.com/original/1X/224b222b154e1b5607f53b90d92ad3470345e8d2.jpg)

    [ key: 6, found: 1 ] lemming

Awwwww, a lemming! How cute! Bob now feels like that 3 hours of coding (with breaks for finger-icing) was all worth it!

---
# Conclusion

I wasn&#39;t going to do this post until @dtm brought up such a good point. Frequency analysis isn&#39;t the do all end all. Neither is this. You could get some weird false-positives for some words.

Some improvements to the code would be
1. Make sure the word you are `find`ing is not some segment of a word that doesn&#39;t exist. This could happen when scanning for `it`, or other small words.
2. Handle plurality, maybe? You&#39;d think this would be easy, but if your dictionary only has singular animals, you can&#39;t just tack on an `s`. For example, Ox.

Later...
@oaktree</description>
    
    <lastBuildDate>Tue, 19 Jul 2016 22:35:22 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Crypto Algs (Part 1.2): Cracking Caesar [Brute Force + Dictionary]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747/6</link>
        <pubDate>Sun, 21 Jan 2018 00:37:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-747-6</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747.rss">Crypto Algs (Part 1.2): Cracking Caesar [Brute Force + Dictionary]</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.2): Cracking Caesar [Brute Force + Dictionary]</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Am I smelling a cheeky github repo?</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747/5</link>
        <pubDate>Tue, 19 Jul 2016 22:35:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-747-5</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747.rss">Crypto Algs (Part 1.2): Cracking Caesar [Brute Force + Dictionary]</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.2): Cracking Caesar [Brute Force + Dictionary]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>For <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a> or anyone else:</p>
<p><a href="http://pastebin.com/g0V0krQr" rel="nofollow noopener">brute2.cpp</a><br>
<a href="http://pastebin.com/xr0K41uC" rel="nofollow noopener">dict-scan.cpp</a><br>
<a href="http://pastebin.com/3Bem3QYB" rel="nofollow noopener">encrypt.cpp</a><br>
<a href="http://pastebin.com/1W3HGYMn" rel="nofollow noopener">freq-analysis.cpp</a></p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747/4</link>
        <pubDate>Mon, 18 Jul 2016 17:26:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-747-4</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747.rss">Crypto Algs (Part 1.2): Cracking Caesar [Brute Force + Dictionary]</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.2): Cracking Caesar [Brute Force + Dictionary]</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>pastebin with the whole code?</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747/3</link>
        <pubDate>Mon, 18 Jul 2016 17:16:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-747-3</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747.rss">Crypto Algs (Part 1.2): Cracking Caesar [Brute Force + Dictionary]</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.2): Cracking Caesar [Brute Force + Dictionary]</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Good job mate. Bob was a smart guy.<br>
<img src="//0x00sec.s3.amazonaws.com/original/1X/60f2aa9307c107b65f443db2bb62de3df11da181.png" width="160" height="200"></p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747/2</link>
        <pubDate>Mon, 18 Jul 2016 04:31:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-747-2</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747.rss">Crypto Algs (Part 1.2): Cracking Caesar [Brute Force + Dictionary]</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.2): Cracking Caesar [Brute Force + Dictionary]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Sometimes, frequency analysis may fail, as <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> <a href="https://0x00sec.org/t/crypto-algs-part-1-1-cracking-caesar/736/5">pointed out</a>.</p>
<p>Let’s send a message to our buddy, Bob. We want to tell him about an animal. Upon receiving the message and no key, Bob is confused. What does “rkssotm” mean!? He tries to use our frequency analysis program and this is his result: “dweeafy.”</p>
<p>What is “dweeafy?” That means nothing to Bob. We see that our program did as intended. It found the most frequent letter in “rkssotm,” <code>s</code>, and calculated the offset from <code>e</code>. As you see, such a method is not a silver bullet.</p>
<p>Let’s build out a dictionary scanner to help us figure out what to make of the message.</p>
<hr>
<p><strong>brute2.cpp</strong></p>
<pre><code class="lang-auto">#include "dict-scan.cpp"
#include "encrypt.cpp"
#include &lt;utility&gt;

#define RED "\033[0;31m"
#define NORMAL "\033[0;39m"

int main(int argc, char** argv) {
    if (argc != 2) {
        std::cout &lt;&lt; "Usage: ./brute2 /path/to/dict\n";
        exit(1);
    }

    std::string s; std::getline(std::cin, s);
    
    std::vector&lt;std::string&gt; dictionary;
    if ( !DictionaryScanner::load(std::string(argv[1]), dictionary) ) {
        exit(1);
    } else {
        std::cout &lt;&lt; RED &lt;&lt; "[*] Loaded dictionary at "
            &lt;&lt; NORMAL &lt;&lt; argv[1] &lt;&lt; std::endl;
    }

    std::pair&lt;int,int&gt; max_found(0,0); // key, num_found
    std::string tmp;
    int found;
    std::cout &lt;&lt; RED &lt;&lt; "[*] Scanning brute forces...\n" &lt;&lt; NORMAL;

    for (int i = 0; i &lt; 26; i++) {
        tmp = Caesar::decrypt(s, i);
        found = DictionaryScanner::scan( tmp, dictionary );
        if (found &gt; max_found.second) {
            max_found.second = found;
            max_found.first = i;
        }
    }

    std::cout &lt;&lt; RED &lt;&lt; "[ key: " &lt;&lt; max_found.first &lt;&lt; ", found: " &lt;&lt; max_found.second
                &lt;&lt; " ] " &lt;&lt; NORMAL &lt;&lt; Caesar::decrypt(s, max_found.first) &lt;&lt; std::endl;
    return 0;
}
</code></pre>
<p>Woah. A lot happens in that file, huh?</p>
<p>Let’s run through it.</p>
<ol>
<li>Take input from the user: <code>std::string s; std::getline(std::cin, s);</code>
</li>
<li>Load the specified dictionary into a <code>vector</code> of <code>string</code>s.</li>
<li>Keep track of the maximum words found over all iterations. Remember the key used to get that max, too: <code>std::pair&lt;int,int&gt; max_found(0,0);</code> and the following <code>for</code> loop.</li>
<li>Print out the result.</li>
</ol>
<p>That’s all there is to it. But what is under the hood, in the DictionaryScanner namespace?</p>
<p>The first thing we encounter is <code>load(...)</code>, which (obviously) loads the dictionary into a <code>vector</code> for quick access.</p>
<pre><code class="lang-auto">bool load(const std::string&amp; file_path, std::vector&lt;std::string&gt;&amp; dictionary)  {
    
    std::ifstream fp(file_path);

    if (!fp) {
        std::cout &lt;&lt; "[*] Error opening dictionary file at " &lt;&lt; file_path
            &lt;&lt; ".\n";
        return false;
    }

    std::string tmp;
    while(fp &gt;&gt; tmp) {
        dictionary.push_back(tmp);
    }

    fp.close();

    return true;
} 
</code></pre>
<p>Next, let’s take a look at the <code>scan(...)</code> subroutine.</p>
<pre><code class="lang-auto">int scan(const std::string&amp; text, const std::vector&lt;std::string&gt;&amp; dictionary) {
    
    int found = 0;

    for (auto&amp; s : dictionary) {
        //std::cout &lt;&lt; "checking " &lt;&lt; s &lt;&lt; std::endl;
        if ( find(text, s) )
            found++;
    }

    return found;
}
</code></pre>
<p>We see that it is just keeping track of how many words are found in the dictionary. But, it relies on a function called <code>find(...)</code>, which seems to take two parameters: the cipher- or plaintext, and a word from the dictionary.</p>
<p><code>find(...)</code> is implemented by us (me), not a standard library. I got a weird compile error, okay? And I was too lazy to figure that out, so I made my own function. I understand that this is like popping a tire and then reinventing the wheel just to avoid a mechanic.</p>
<pre><code class="lang-auto">bool find (const std::string&amp; text, const std::string&amp; s) {
    size_t text_len = text.length(), s_len = s.length();

    int j,k;
    for (int i = 0; i &lt; text_len; i++) {
        j = i;
        k = 0;
        while(k &lt; s_len &amp;&amp; j &lt; text_len &amp;&amp; tolower(text[j]) == tolower(s[k])) {
            /*std::cout &lt;&lt; "\ttext[j] == s[k]: " &lt;&lt; text[j]
                &lt;&lt; " == " &lt;&lt; s[k] &lt;&lt; std::endl;*/
            j++;k++;
        }
        if (k == s_len &amp;&amp; j &lt;= text_len)
            return true;
    }

    return false;
}
</code></pre>
<p>The function – case-insensitively – checks for the first (if any) occurrence of a word in the <code>text</code>.</p>
<hr>
<p>Okay, so Bob has just spent the last 3 hours of his life writing all of this code, just because he wants to avoid reading over 25 different versions of “rkssotm.”</p>
<p>Let’s load <a href="http://pastebin.com/LfCcMyCK" rel="noopener nofollow ugc">this dictionary</a>, adapted from <a href="https://github.com/hzlzh/Domain-Name-List/blob/master/Animal-words.txt" rel="noopener nofollow ugc">this</a> wordlist I found online.</p>
<p>Okay:</p>
<pre><code>$ ./brute2 ./animals.txt
rkssotm
[*] Loaded dictionary at ../animals.txt
[*] Scanning brute forces...
</code></pre>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/224b222b154e1b5607f53b90d92ad3470345e8d2.jpg" alt="cute lemming"></p>
<pre><code>[ key: 6, found: 1 ] lemming
</code></pre>
<p>Awwwww, a lemming! How cute! Bob now feels like that 3 hours of coding (with breaks for finger-icing) was all worth it!</p>
<hr>
<h1>Conclusion</h1>
<p>I wasn’t going to do this post until <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> brought up such a good point. Frequency analysis isn’t the do all end all. Neither is this. You could get some weird false-positives for some words.</p>
<p>Some improvements to the code would be</p>
<ol>
<li>Make sure the word you are <code>find</code>ing is not some segment of a word that doesn’t exist. This could happen when scanning for <code>it</code>, or other small words.</li>
<li>Handle plurality, maybe? You’d think this would be easy, but if your dictionary only has singular animals, you can’t just tack on an <code>s</code>. For example, Ox.</li>
</ol>
<p>Later…<br>
<a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a></p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747/1</link>
        <pubDate>Sun, 17 Jul 2016 23:30:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-747-1</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-2-cracking-caesar-brute-force-dictionary/747.rss">Crypto Algs (Part 1.2): Cracking Caesar [Brute Force + Dictionary]</source>
      </item>
  </channel>
</rss>
