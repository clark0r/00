<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C] Dynamic Memory (Part 7.0): [My]Free</title>
    <link>https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311</link>
    <description>It&#39;s been a while since the last edition ([I do say this every time](https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202)). Behold, a seventh article!

Allow me to restate the prerequisites:

1. Proficiency in C
2. Understanding of the Stack vs Heap
3. Familiarity with this article&#39;s predecessors (all of them).

_Disclaimer: what follows are my findings, and my own personal implementation of `free()`. Do not expect another person&#39;s `free()` to follow the same logic or routine._

---
# Logic Walkthrough

```c
void my_free(void *ptr);
```

`ptr` is expected to be an address previously returned by `my_malloc`. ___Note:___ _This function will not be able to correctly or safely free memory allocated by another utility._

Using some pointer arithmetic, `my_free()` finds the relevant chunk containing `ptr`&#39;s metadata. Let us reexamine what a chunk looks like:

```c
typedef struct _chunk {
    size_t  _chunk_sz;

    struct _chunk *next,
                  *prev,
                  *next_free,
                  *prev_free;


    _free_t _free;

} _chunk;
```

In the above `struct` declaration, `_free_t` is a type I defined. It&#39;s merely an `enum` that I use as a flag to... you guessed it: tell whether or not a chunk is free.

As you might expect, one of the things `my_free` does is alter this flag.

Each chunk also contains `next_free` and `prev_free` attributes that make up a doubly-linked list. This doubly-linked list is used to &quot;remember&quot; which chunks are free. ___Note:___ `next` and `prev` are meant to point to memory-adjacent chunks, but `next_free` and `prev_free` are not guaranteed to point to adjacent memory; rather, these pointers are used to speed up access to free chunks so that we can avoid looking at chunks that are already in use.

`my_free()` inserts this newly-freed chunk at the end of the freed chunks linked list. This means that the freed chunks list is ___not___ sorted.

There is also one more optimization. If the chunks to either side (memory-adjacent) of this now-freed chunk are free as well, the chunks will be merged. I have written a subroutine to handle this (mainly because linked-list pointer gymnastics look so ugly).

---
## Example

Imagine we have some memory laid out like so (I apologize in advance for the bleh-ness):

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/6/66ed528a8096950a08fa19767b6d8f84af103ab8.png&quot; width=&quot;690&quot; height=&quot;258&quot;&gt;

In the above photo, assume that the session struct is stored in memory somewhere to the left of A and the program break is somewhere to the right of E.

Our linked list of all chunks is {A,B,C,D,E}. Our linked list of freed chunks is {A,D}.

A user now calls `my_free` to request the deallocation of C:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/e/e7d3fe3e940213b47e6fbf0c9219c0c9e6ccea67.png&quot; width=&quot;690&quot; height=&quot;258&quot;&gt;

C is marked as FREE. While our linked list of _all_ chunks remains the same, our linked list of freed chunks becomes {A,D,C} (remember that newly-freed chunks are just inserted at the end).

`my_free` realizes that C and D, adjacent chunks, are both free. To adhere to the program design, C and D must now be merged. As C is before D, it will absorb D&#39;s space in memory, essentially making one larger C:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/4/4fdfa6664450ad8348b5c80ac098af0931588d2d.png&quot; width=&quot;690&quot; height=&quot;258&quot;&gt;

In merging C and D, D is removed from the _all chunks_ linked list, making that list {A,B,C,E}. The free chunks list now becomes {A,C}. The memory session decrements its count of chunks. D no longer exists as its own entity.

&lt;sub&gt;I hope this helps you, @_py.&lt;/sub&gt; 

---
# Implementation

Don&#39;t worry. It&#39;s just fifty lines.

```c
void my_free(void *ptr) {

    // 1. Calculate chunk&#39;s address.
    _chunk *c = (_chunk*)((char*)ptr - sizeof(_chunk) );

    // 2. Check chunk&#39;s validity
    if ( c &lt; _session-&gt;_first_chunk || c &gt; _session-&gt;_last_chunk + _session-&gt;_last_chunk-&gt;_chunk_sz) {
        fprintf(stderr, &quot;[!] Invalid Free! %p is out of range!\n&quot;, ptr);
        return;
    }

    // 3. Ignore chunk if it&#39;s free already.
    if (c-&gt;_free == FREE)
        return;

    // 4. Mark chunk as free.
    c-&gt;_free = FREE;

    // 5. Put chunk into free chunk list.
    if ( !_session-&gt;_first_free_chunk ) {

        /* if there are no chunks... */
        _session-&gt;_first_free_chunk = c;
        _session-&gt;_last_free_chunk = c;

        c-&gt;prev_free = NULL;
        c-&gt;next_free = NULL;

    } else {

        if (_session-&gt;_last_free_chunk) /* just in case... */
            _session-&gt;_last_free_chunk-&gt;next_free = c;

        c-&gt;prev_free = _session-&gt;_last_free_chunk;

        _session-&gt;_last_free_chunk = c;

    }

    // 6. Do chunk merging:

    if (c-&gt;next != NULL &amp;&amp; c-&gt;next-&gt;_free == FREE)
        _merge_chunks(c, c-&gt;next);

    // 6(b) Merge other side, if needed.
    if (c-&gt;prev != NULL &amp;&amp; c-&gt;prev-&gt;_free == FREE)
        _merge_chunks(c-&gt;prev, c);
}
```

I have left notes in the code snippet. If you&#39;re confused, feel free to comment a question.

---
# Conclusion

There are many things that can be done differently in this implementation:

* Newly-freed chunks could be inserted into the freed chunks list by size to speed up allocation lookups.
* The session&#39;s chunk list could be traversed to ensure that the chunk point is valid. Right now, only a range check is performed. Linear search can be costly, and binary search is out of question for _several_ reasons.
* One notable optimization is the use of a freed chunks list, but the freed chunks list could be omitted. In its place, the entire list of chunks (free or not) could be scanned. The freed chunks list trades space for speed, however, and most computers can sacrifice a few bytes of RAM (\* insert jab about Java here \*).</description>
    
    <lastBuildDate>Thu, 01 Dec 2016 00:38:59 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C] Dynamic Memory (Part 7.0): [My]Free</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/8</link>
        <pubDate>Sun, 21 Jan 2018 00:30:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1311-8</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311.rss">[C] Dynamic Memory (Part 7.0): [My]Free</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 7.0): [My]Free</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>Nice update <a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a>. My request wasn’t personal. I was hoping that others will benefit from a simple visualization. When you can draw a concept, you understand it much better.</p>
<p>Moreover, the whole meat of free() seems to rely on the unlink() macro. Just throwing ideas at you for future posts in case you are interested.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/7</link>
        <pubDate>Thu, 01 Dec 2016 00:38:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1311-7</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311.rss">[C] Dynamic Memory (Part 7.0): [My]Free</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 7.0): [My]Free</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Lol you deflected that troll so well.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/6</link>
        <pubDate>Wed, 30 Nov 2016 15:13:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1311-6</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311.rss">[C] Dynamic Memory (Part 7.0): [My]Free</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 7.0): [My]Free</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>I can add a doodle. Give me a few hours.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/5</link>
        <pubDate>Wed, 30 Nov 2016 14:28:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1311-5</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311.rss">[C] Dynamic Memory (Part 7.0): [My]Free</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 7.0): [My]Free</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a>: It’s about the learning experience!</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/4</link>
        <pubDate>Wed, 30 Nov 2016 14:28:12 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1311-4</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311.rss">[C] Dynamic Memory (Part 7.0): [My]Free</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 7.0): [My]Free</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>What would I use this for? <span class="hashtag">#troll</span></p>
<p>No seriously? For all those who got lost at</p>
<aside class="quote no-group" data-username="oaktree" data-post="1" data-topic="1311">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/oaktree/40/4077_2.png" class="avatar"> oaktree:</div>
<blockquote>
<p>Logic Walkthrough</p>
<p>void my_free(void *ptr);</p>
</blockquote>
</aside>
<p>Why would we need a custom free implimentation? Isn’t C good enough to do it itself? May as well just use Ruby or Python. C obviously sucks!</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/3</link>
        <pubDate>Wed, 30 Nov 2016 12:50:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1311-3</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311.rss">[C] Dynamic Memory (Part 7.0): [My]Free</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 7.0): [My]Free</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="oaktree" data-post="1" data-topic="1311">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/oaktree/40/4077_2.png" class="avatar"> oaktree:</div>
<blockquote>
<p>Each chunk also contains next_free and prev_free attributes that make up a doubly-linked list. This doubly-linked list is used to “remember” which chunks are free. Note: next and prev are meant to point to memory-adjacent chunks, but next_free and prev_free are not guaranteed to point to adjacent memory; rather, these pointers are used to speed up access to free chunks so that we can avoid looking at chunks that are already in use.</p>
<p>my_free() inserts this newly-freed chunk at the end of the freed chunks linked list. This means that the freed chunks list is not sorted.</p>
<p>There is also one more optimization. If the chunks to either side (memory-adjacent) of this now-freed chunk are free as well, the chunks will be merged. I have written a subroutine to handle this (mainly because linked-list pointer gymnastics look so ugly).</p>
</blockquote>
</aside>
<p>This is the most crucial info in this paper and I think a visual representation or a diagram is a must for this concept, plus, the code would be much more understood imo.</p>
<p>On the other hand, your intention might was code illustration and not in-depth explanation of the inner workings of the algo. In that case, forget what I said above.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/2</link>
        <pubDate>Wed, 30 Nov 2016 07:34:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1311-2</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311.rss">[C] Dynamic Memory (Part 7.0): [My]Free</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 7.0): [My]Free</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>It’s been a while since the last edition (<a href="https://0x00sec.org/t/c-dynamic-memory-part-6-0-a-closer-look-at-my-malloc/1202">I do say this every time</a>). Behold, a seventh article!</p>
<p>Allow me to restate the prerequisites:</p>
<ol>
<li>Proficiency in C</li>
<li>Understanding of the Stack vs Heap</li>
<li>Familiarity with this article’s predecessors (all of them).</li>
</ol>
<p><em>Disclaimer: what follows are my findings, and my own personal implementation of <code>free()</code>. Do not expect another person’s <code>free()</code> to follow the same logic or routine.</em></p>
<hr>
<h1>Logic Walkthrough</h1>
<pre><code class="lang-auto">void my_free(void *ptr);
</code></pre>
<p><code>ptr</code> is expected to be an address previously returned by <code>my_malloc</code>. <em><strong>Note:</strong></em> <em>This function will not be able to correctly or safely free memory allocated by another utility.</em></p>
<p>Using some pointer arithmetic, <code>my_free()</code> finds the relevant chunk containing <code>ptr</code>'s metadata. Let us reexamine what a chunk looks like:</p>
<pre><code class="lang-auto">typedef struct _chunk {
    size_t  _chunk_sz;

    struct _chunk *next,
                  *prev,
                  *next_free,
                  *prev_free;


    _free_t _free;

} _chunk;
</code></pre>
<p>In the above <code>struct</code> declaration, <code>_free_t</code> is a type I defined. It’s merely an <code>enum</code> that I use as a flag to… you guessed it: tell whether or not a chunk is free.</p>
<p>As you might expect, one of the things <code>my_free</code> does is alter this flag.</p>
<p>Each chunk also contains <code>next_free</code> and <code>prev_free</code> attributes that make up a doubly-linked list. This doubly-linked list is used to “remember” which chunks are free. <em><strong>Note:</strong></em> <code>next</code> and <code>prev</code> are meant to point to memory-adjacent chunks, but <code>next_free</code> and <code>prev_free</code> are not guaranteed to point to adjacent memory; rather, these pointers are used to speed up access to free chunks so that we can avoid looking at chunks that are already in use.</p>
<p><code>my_free()</code> inserts this newly-freed chunk at the end of the freed chunks linked list. This means that the freed chunks list is <em><strong>not</strong></em> sorted.</p>
<p>There is also one more optimization. If the chunks to either side (memory-adjacent) of this now-freed chunk are free as well, the chunks will be merged. I have written a subroutine to handle this (mainly because linked-list pointer gymnastics look so ugly).</p>
<hr>
<h2>Example</h2>
<p>Imagine we have some memory laid out like so (I apologize in advance for the bleh-ness):</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/6/66ed528a8096950a08fa19767b6d8f84af103ab8.png" width="690" height="258"></p>
<p>In the above photo, assume that the session struct is stored in memory somewhere to the left of A and the program break is somewhere to the right of E.</p>
<p>Our linked list of all chunks is {A,B,C,D,E}. Our linked list of freed chunks is {A,D}.</p>
<p>A user now calls <code>my_free</code> to request the deallocation of C:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/e/e7d3fe3e940213b47e6fbf0c9219c0c9e6ccea67.png" width="690" height="258"></p>
<p>C is marked as FREE. While our linked list of <em>all</em> chunks remains the same, our linked list of freed chunks becomes {A,D,C} (remember that newly-freed chunks are just inserted at the end).</p>
<p><code>my_free</code> realizes that C and D, adjacent chunks, are both free. To adhere to the program design, C and D must now be merged. As C is before D, it will absorb D’s space in memory, essentially making one larger C:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/4/4fdfa6664450ad8348b5c80ac098af0931588d2d.png" width="690" height="258"></p>
<p>In merging C and D, D is removed from the <em>all chunks</em> linked list, making that list {A,B,C,E}. The free chunks list now becomes {A,C}. The memory session decrements its count of chunks. D no longer exists as its own entity.</p>
<p><sub>I hope this helps you, <a class="mention" href="https://0x00sec.org/u/_py">@_py</a>.</sub></p>
<hr>
<h1>Implementation</h1>
<p>Don’t worry. It’s just fifty lines.</p>
<pre><code class="lang-auto">void my_free(void *ptr) {

    // 1. Calculate chunk's address.
    _chunk *c = (_chunk*)((char*)ptr - sizeof(_chunk) );

    // 2. Check chunk's validity
    if ( c &lt; _session-&gt;_first_chunk || c &gt; _session-&gt;_last_chunk + _session-&gt;_last_chunk-&gt;_chunk_sz) {
        fprintf(stderr, "[!] Invalid Free! %p is out of range!\n", ptr);
        return;
    }

    // 3. Ignore chunk if it's free already.
    if (c-&gt;_free == FREE)
        return;

    // 4. Mark chunk as free.
    c-&gt;_free = FREE;

    // 5. Put chunk into free chunk list.
    if ( !_session-&gt;_first_free_chunk ) {

        /* if there are no chunks... */
        _session-&gt;_first_free_chunk = c;
        _session-&gt;_last_free_chunk = c;

        c-&gt;prev_free = NULL;
        c-&gt;next_free = NULL;

    } else {

        if (_session-&gt;_last_free_chunk) /* just in case... */
            _session-&gt;_last_free_chunk-&gt;next_free = c;

        c-&gt;prev_free = _session-&gt;_last_free_chunk;

        _session-&gt;_last_free_chunk = c;

    }

    // 6. Do chunk merging:

    if (c-&gt;next != NULL &amp;&amp; c-&gt;next-&gt;_free == FREE)
        _merge_chunks(c, c-&gt;next);

    // 6(b) Merge other side, if needed.
    if (c-&gt;prev != NULL &amp;&amp; c-&gt;prev-&gt;_free == FREE)
        _merge_chunks(c-&gt;prev, c);
}
</code></pre>
<p>I have left notes in the code snippet. If you’re confused, feel free to comment a question.</p>
<hr>
<h1>Conclusion</h1>
<p>There are many things that can be done differently in this implementation:</p>
<ul>
<li>Newly-freed chunks could be inserted into the freed chunks list by size to speed up allocation lookups.</li>
<li>The session’s chunk list could be traversed to ensure that the chunk point is valid. Right now, only a range check is performed. Linear search can be costly, and binary search is out of question for <em>several</em> reasons.</li>
<li>One notable optimization is the use of a freed chunks list, but the freed chunks list could be omitted. In its place, the entire list of chunks (free or not) could be scanned. The freed chunks list trades space for speed, however, and most computers can sacrifice a few bytes of RAM (* insert jab about Java here *).</li>
</ul>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311/1</link>
        <pubDate>Wed, 30 Nov 2016 02:50:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1311-1</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-7-0-my-free/1311.rss">[C] Dynamic Memory (Part 7.0): [My]Free</source>
      </item>
  </channel>
</rss>
