<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>SQL Injection: Enumerating columns</title>
    <link>https://0x00sec.org/t/sql-injection-enumerating-columns/749</link>
    <description>SQLI: **&quot;refers to an injection attack wherein an attacker can execute malicious SQL statements (also commonly referred to as a malicious payload) that control a web application&#39;s database server (also commonly referred to as a Relational Database Management System – RDBMS).&quot;**

 A simple google search pops out this definition of SQLI (Sql injection). In this tutorial we won&#39;t need any fancy tool, but a browser, the website, and internet (of course). SQL injection is a whole lot simpler and doesn&#39;t require tools like SQLmap or w3af. Although, you can use these tools if you prefer to use them instead of my method, but for this tutorial(s) I&#39;m gonna try my best to both explain and show different methods. As usual, I take no responsibility if this information is used for malicious purposes. 

With that outta the way, SQL Injection (my method) is just basic code that will try to spit out information. The first step is finding a website. Once you have chosen your website the next step is to find where the database is located. This takes just some common sense, is there any login page? Or is there some form of contact? Or is there emails associated with it? This can be taken by basic observation. Before we do anything else, take a look around the website, taking note of every little detail. Take note of the URL when you go to a new page on the website, does the URL contain any &quot;weird looking&quot; letters or words? For example does the URL contain (something).asp? Take note of the contact page if there is any. Does the emails contain the website after the &quot;@&quot;? These and many more details are crucial to figuring out where the database lies. 

Now as the title says for this article, we aren&#39;t gonna inject code but instead figuring out basic information about the server. Now that we know a little bit about the website, it&#39;s time to figure out how many columns contain in the server. After the website depending on the type of server, type:

(website)/page.php?id=1 order by 5/*

OR

(website)/page.asp?id=1 order by 5/*

The latter is if the website contains any (something).asp in its URL. 

If a valid page isn&#39;t shown then change the &quot;5&quot; to another number. Another method is:

(website)/page.php?id=-1 order by 5/*

OR 

(website/page.asp?id=-1 order by 5/*

Another method to gain a valid page is using this method:

(website)/page.php?id=null order by 5/*

OR 

(website)/page.asp?id=null order by 5/*

Again, change the number until you gain a valid page.

I prefer using the other two methods since there&#39;s a higher chance of success if I type in a negative number or null after &quot;id=&quot;. Of course it takes sometimes persistence to figure out how many columns there are but if you are dedicated to these methods, you will succeed. The problem that I have with SQLmap and other tools is that one tool doesn&#39;t cover all the methods. SQLmap I personally don&#39;t use anymore since it only injects true/false, also known as blind SQL injection. A generic definition of blind injection can be found here:

http://www.cgisecurity.com/questions/blindsql.shtml

I am not saying dismiss SQLmap, but don&#39;t rely on it to be successful all the time. 

Well then, that&#39;s it for this tutorial. This tutorial was very short but I hope I covered everything as the title says. I&#39;m planning in the near future to write more articles on my methods for SQL injection, unless someone else does it before me.</description>
    
    <lastBuildDate>Tue, 10 Dec 2019 18:22:39 +0000</lastBuildDate>
    <category>Web Hacking</category>
    <atom:link href="https://0x00sec.org/t/sql-injection-enumerating-columns/749.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>SQL Injection: Enumerating columns</title>
        <dc:creator><![CDATA[PresComm]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/sql-injection-enumerating-columns/749/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sql-injection-enumerating-columns/749/10</link>
        <pubDate>Wed, 11 Dec 2019 12:42:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-749-10</guid>
        <source url="https://0x00sec.org/t/sql-injection-enumerating-columns/749.rss">SQL Injection: Enumerating columns</source>
      </item>
      <item>
        <title>SQL Injection: Enumerating columns</title>
        <dc:creator><![CDATA[kingsuthar93]]></dc:creator>
        <description><![CDATA[
            <p>@ Nitrax Greeting<br>
Is there any other methods to check vulnerability in website if this method not work?</p>
<p>Thank you</p>
          <p><a href="https://0x00sec.org/t/sql-injection-enumerating-columns/749/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sql-injection-enumerating-columns/749/9</link>
        <pubDate>Tue, 10 Dec 2019 18:22:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-749-9</guid>
        <source url="https://0x00sec.org/t/sql-injection-enumerating-columns/749.rss">SQL Injection: Enumerating columns</source>
      </item>
      <item>
        <title>SQL Injection: Enumerating columns</title>
        <dc:creator><![CDATA[kingsuthar93]]></dc:creator>
        <description><![CDATA[
            <p>Greetings Valentine…<br>
Is there any other option for check vulnerability in website if this method not work?<br>
thank you</p>
          <p><a href="https://0x00sec.org/t/sql-injection-enumerating-columns/749/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sql-injection-enumerating-columns/749/8</link>
        <pubDate>Tue, 10 Dec 2019 18:19:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-749-8</guid>
        <source url="https://0x00sec.org/t/sql-injection-enumerating-columns/749.rss">SQL Injection: Enumerating columns</source>
      </item>
      <item>
        <title>SQL Injection: Enumerating columns</title>
        <dc:creator><![CDATA[Valentine]]></dc:creator>
        <description><![CDATA[
            <p>Thank you for the suggestions and clarification… some statements are false I know but some statements were my opinion but thank you for pointing out some mistakes in the text.</p>
          <p><a href="https://0x00sec.org/t/sql-injection-enumerating-columns/749/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sql-injection-enumerating-columns/749/7</link>
        <pubDate>Tue, 19 Jul 2016 00:20:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-749-7</guid>
        <source url="https://0x00sec.org/t/sql-injection-enumerating-columns/749.rss">SQL Injection: Enumerating columns</source>
      </item>
      <item>
        <title>SQL Injection: Enumerating columns</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Hm, a suggestion for other articles but perhaps you could explain how a SQL injection works! I’m not too read up on SQL myself but I’m sure it would help your article if you explained what the code did and how it worked! Good job anyways. I see your articles improving the more you make 'em. Keep it up!</p>
          <p><a href="https://0x00sec.org/t/sql-injection-enumerating-columns/749/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sql-injection-enumerating-columns/749/6</link>
        <pubDate>Mon, 18 Jul 2016 19:09:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-749-6</guid>
        <source url="https://0x00sec.org/t/sql-injection-enumerating-columns/749.rss">SQL Injection: Enumerating columns</source>
      </item>
      <item>
        <title>SQL Injection: Enumerating columns</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Valentine" data-post="1" data-topic="749">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/valentine/40/1250_2.png" class="avatar"> Valentine:</div>
<blockquote>
<p>SQLmap I personally don’t use anymore since it only injects true/false, also known as blind SQL injection</p>
</blockquote>
</aside>
<p><a class="mention" href="https://0x00sec.org/u/valentine">@Valentine</a> I don’t know where this information come from, however, I use this tool for a professional purpose and I can affirm that this statement is not right. Indeed, the batterie of tests, which includes a lot of exploits e.g. GTK, buffer overflow, when clauses, …, depends on, mainly, of the risk level selected and implements 6 different SQl injection techniques :</p>
<ul>
<li>boolean-based blind</li>
<li>time-based blind</li>
<li>error-based</li>
<li>UNION query-based</li>
<li>stacked queries</li>
<li>out-of-band</li>
</ul>
<p>Moreover, it affords the possibility to specify the payload used, execute a remote shell on the targeted database, gather  information about the current user, …</p>
<p>SQLmap is one of the most complete tool concerning SQL Injections ! Nonetheless, it is important to keep in mind that the downsides, involved by its usage, can be catastrophic and irreversible.</p>
<p>Hope it helps to clarify this point.</p>
<p>Best,<br>
Nitrax</p>
          <p><a href="https://0x00sec.org/t/sql-injection-enumerating-columns/749/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sql-injection-enumerating-columns/749/5</link>
        <pubDate>Mon, 18 Jul 2016 18:05:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-749-5</guid>
        <source url="https://0x00sec.org/t/sql-injection-enumerating-columns/749.rss">SQL Injection: Enumerating columns</source>
      </item>
      <item>
        <title>SQL Injection: Enumerating columns</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p><img src="https://0x00sec.org/images/emoji/twitter/scream.png?v=9" title=":scream:" class="emoji only-emoji" alt=":scream:"> <img src="https://0x00sec.org/images/emoji/twitter/cold_sweat.png?v=9" title=":cold_sweat:" class="emoji only-emoji" alt=":cold_sweat:"></p>
          <p><a href="https://0x00sec.org/t/sql-injection-enumerating-columns/749/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sql-injection-enumerating-columns/749/4</link>
        <pubDate>Mon, 18 Jul 2016 15:43:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-749-4</guid>
        <source url="https://0x00sec.org/t/sql-injection-enumerating-columns/749.rss">SQL Injection: Enumerating columns</source>
      </item>
      <item>
        <title>SQL Injection: Enumerating columns</title>
        <dc:creator><![CDATA[Valentine]]></dc:creator>
        <description><![CDATA[
            <p>Hmmm… never thought about that.</p>
          <p><a href="https://0x00sec.org/t/sql-injection-enumerating-columns/749/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sql-injection-enumerating-columns/749/3</link>
        <pubDate>Mon, 18 Jul 2016 15:29:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-749-3</guid>
        <source url="https://0x00sec.org/t/sql-injection-enumerating-columns/749.rss">SQL Injection: Enumerating columns</source>
      </item>
      <item>
        <title>SQL Injection: Enumerating columns</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Don’t you have to escape the spaces when you try to inject a query into a URL? I’d think so. A valid URL has no whitespace characters, only <code>%20</code> and its relatives.</p>
          <p><a href="https://0x00sec.org/t/sql-injection-enumerating-columns/749/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sql-injection-enumerating-columns/749/2</link>
        <pubDate>Mon, 18 Jul 2016 15:29:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-749-2</guid>
        <source url="https://0x00sec.org/t/sql-injection-enumerating-columns/749.rss">SQL Injection: Enumerating columns</source>
      </item>
      <item>
        <title>SQL Injection: Enumerating columns</title>
        <dc:creator><![CDATA[Valentine]]></dc:creator>
        <description><![CDATA[
            <p>SQLI: <strong>"refers to an injection attack wherein an attacker can execute malicious SQL statements (also commonly referred to as a malicious payload) that control a web application’s database server (also commonly referred to as a Relational Database Management System – RDBMS)."</strong></p>
<p>A simple google search pops out this definition of SQLI (Sql injection). In this tutorial we won’t need any fancy tool, but a browser, the website, and internet (of course). SQL injection is a whole lot simpler and doesn’t require tools like SQLmap or w3af. Although, you can use these tools if you prefer to use them instead of my method, but for this tutorial(s) I’m gonna try my best to both explain and show different methods. As usual, I take no responsibility if this information is used for malicious purposes.</p>
<p>With that outta the way, SQL Injection (my method) is just basic code that will try to spit out information. The first step is finding a website. Once you have chosen your website the next step is to find where the database is located. This takes just some common sense, is there any login page? Or is there some form of contact? Or is there emails associated with it? This can be taken by basic observation. Before we do anything else, take a look around the website, taking note of every little detail. Take note of the URL when you go to a new page on the website, does the URL contain any “weird looking” letters or words? For example does the URL contain (something).asp? Take note of the contact page if there is any. Does the emails contain the website after the “@”? These and many more details are crucial to figuring out where the database lies.</p>
<p>Now as the title says for this article, we aren’t gonna inject code but instead figuring out basic information about the server. Now that we know a little bit about the website, it’s time to figure out how many columns contain in the server. After the website depending on the type of server, type:</p>
<p>(website)/page.php?id=1 order by 5/*</p>
<p>OR</p>
<p>(website)/page.asp?id=1 order by 5/*</p>
<p>The latter is if the website contains any (something).asp in its URL.</p>
<p>If a valid page isn’t shown then change the “5” to another number. Another method is:</p>
<p>(website)/page.php?id=-1 order by 5/*</p>
<p>OR</p>
<p>(website/page.asp?id=-1 order by 5/*</p>
<p>Another method to gain a valid page is using this method:</p>
<p>(website)/page.php?id=null order by 5/*</p>
<p>OR</p>
<p>(website)/page.asp?id=null order by 5/*</p>
<p>Again, change the number until you gain a valid page.</p>
<p>I prefer using the other two methods since there’s a higher chance of success if I type in a negative number or null after “id=”. Of course it takes sometimes persistence to figure out how many columns there are but if you are dedicated to these methods, you will succeed. The problem that I have with SQLmap and other tools is that one tool doesn’t cover all the methods. SQLmap I personally don’t use anymore since it only injects true/false, also known as blind SQL injection. A generic definition of blind injection can be found here:</p>
<p><a href="http://www.cgisecurity.com/questions/blindsql.shtml" class="onebox" target="_blank" rel="nofollow noopener">http://www.cgisecurity.com/questions/blindsql.shtml</a></p>
<p>I am not saying dismiss SQLmap, but don’t rely on it to be successful all the time.</p>
<p>Well then, that’s it for this tutorial. This tutorial was very short but I hope I covered everything as the title says. I’m planning in the near future to write more articles on my methods for SQL injection, unless someone else does it before me.</p>
          <p><a href="https://0x00sec.org/t/sql-injection-enumerating-columns/749/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sql-injection-enumerating-columns/749/1</link>
        <pubDate>Mon, 18 Jul 2016 15:19:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-749-1</guid>
        <source url="https://0x00sec.org/t/sql-injection-enumerating-columns/749.rss">SQL Injection: Enumerating columns</source>
      </item>
  </channel>
</rss>
