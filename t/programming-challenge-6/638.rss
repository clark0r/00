<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Programming Challenge #6</title>
    <link>https://0x00sec.org/t/programming-challenge-6/638</link>
    <description>Here&#39;s another fun Programming Challenge: _Service Lane_

Source: https://www.hackerrank.com/challenges/service-lane

---
Calvin is driving his favorite vehicle on the 101 freeway. He notices that the check engine light of his vehicle is on, and he wants to service it immediately to avoid any risks. Luckily, a service lane runs parallel to the highway. The length of the service lane is `N` units. The service lane consists of `N` segments of equal length and different width.

Calvin can enter to and exit from any segment. Let&#39;s call the entry segment as index `i` and the exit segment as index `j`. Assume that the exit segment lies after the entry segment (`i &lt;= j`) and . Calvin has to pass through __all__ segments from index `i` to index `j` (both inclusive).

![parth depiction](upload://5ifgUArqMGOXDfljVpuMdphHkXo.png)

Calvin has three types of vehicles - bike, car, and truck - represented by `1`, `2` and `3`, respectively. These numbers also denote the width of the vehicle.

You are given an array `width` of length `N`, where `width[k]` represents the width of the `k`th segment of the service lane. It is guaranteed that while servicing he can pass through at most `1000` segments, including the entry and exit segments.

* If , `width[k] = 1`, only the bike can pass through the `k`th segment.
* If , `width[k] = 2`, the bike and the car can pass through the `k`th segment.
* If , `width[k] = 3`, all three vehicles can pass through the `k`th segment.

Given the entry and exit point of Calvin&#39;s vehicle in the service lane, output the type of the largest vehicle which can pass through the service lane (including the entry and exit segments).

`T` test cases follow. Each test case contains two integers, `i` and `j`, where `i` is the index of the segment through which Calvin enters the service lane and `j` is the index of the lane segment through which he exits.

### Constraints

    2 &lt;= N &lt;= 1000
    1 &lt;= T &lt;= 1000
    0 &lt;= i &lt; j &lt; N
    2 &lt;= j - i + 1 &lt;= min(N,1000)
    1 &lt;= width[k] &lt;= 3, where 0 &lt;= k &lt; N

### Output Format

For each test case, print the number that represents the largest vehicle type that can pass through the service lane.

___Note:___ Calvin has to pass through all segments from index `i` to index `j` (both inclusive).

----
### Sample Input

    8 5
    2 3 1 2 3 2 3 3
    0 3
    4 6
    6 7
    3 5
    0 7

### Sample Output

    1
    2
    3
    2
    1

### Explanation

Below is the representation of the lane:

       |HIGHWAY|Lane|    -&gt;    Width

    0: |       |--|            2
    1: |       |---|           3
    2: |       |-|             1
    3: |       |--|            2
    4: |       |---|           3
    5: |       |--|            2
    6: |       |---|           3
    7: |       |---|           3

1. (0, 3): Because `width[2] = 1`, only the bike can pass through it.
2. (4, 6): Here the largest allowed vehicle which can pass through the 5th segment is the car and for the 4th and 6th segment it&#39;s the truck. Hence the largest vehicle allowed in these segments is a car.
3. (6, 7): In this example, the vehicle enters at the 6th segment and exits at the 7th segment. Both segments allow even trucks to pass through them. Hence the answer is 3.
4. (3, 5): `width[3] = width[5] = 2`. While the 4th segment allows the truck, the 3rd and 5th allow up to a car. So 2 will be the answer here.
5. (0, 7): The bike is the only vehicle which can pass through the 2nd segment, which limits the strength of the whole lane to 1.

---

I&#39;m excited to see what you guys come up with. My solution(s) will be up shortly.

@oaktree out.</description>
    
    <lastBuildDate>Thu, 23 Jun 2016 17:28:32 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/programming-challenge-6/638.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Programming Challenge #6</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/programming-challenge-6/638/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/programming-challenge-6/638/11</link>
        <pubDate>Sun, 21 Jan 2018 00:31:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-638-11</guid>
        <source url="https://0x00sec.org/t/programming-challenge-6/638.rss">Programming Challenge #6</source>
      </item>
      <item>
        <title>Programming Challenge #6</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>In order to complete the table in <a href="http://0x00sec.org/t/the-price-of-scripting/641" class="inline-onebox">The Price of Scripting</a>, I will add a couple more implementations:</p>
<h1>Lua</h1>
<pre><code class="lang-auto">#!/usr/bin/lua
n, t = io.read ("*n", "*n")

w= {}
for i=0, n - 1 do
    w[i] = io.read("*n")
end

for k=1, t do
    i,j = io.read("*n", "*n")
    print (math.min(table.unpack(w, i, j)))
end
</code></pre>
<h1>Perl</h1>
<pre><code class="lang-auto">#!/usr/bin/perl
use List::Util qw( min max );

($n, $t) = split(/\s+/, &lt;&gt;);
@w = split (/\s+/, &lt;&gt;);
while (($i, $j) = split (/\s+/, &lt;&gt;))
{
    print min( @w[$i..$j]) . "\n";
}
</code></pre>
<h1>Java</h1>
<p><em>My Java is a bit rusty</em> <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<pre><code class="lang-auto">import java.io.*;
import java.util.*;

public class c6 
{
    public static void main (String[] args) 
    {
        int k;
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int t = in.nextInt();
	int[]  w = new int[n];
	for (k = 0; k &lt; n; k++) w[k] = in.nextInt();
	for (k = 0; k &lt; t; k++)
	    {
		int i = in.nextInt();
		int j = in.nextInt();
		int r = 3;
		for (int l = i; l &lt; j + 1; l++) if (w[l] &lt; r) r = w[l];
		System.out.println (r);
	    }
    }
}

</code></pre>
          <p><a href="https://0x00sec.org/t/programming-challenge-6/638/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/programming-challenge-6/638/10</link>
        <pubDate>Thu, 23 Jun 2016 17:28:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-638-10</guid>
        <source url="https://0x00sec.org/t/programming-challenge-6/638.rss">Programming Challenge #6</source>
      </item>
      <item>
        <title>Programming Challenge #6</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Sure. I’m old school. <code>unit8_t</code> is pretty common nowadays but it was not always available some time ago. If you work with old systems <code>char</code> is safer, but indeed you are right.</p>
          <p><a href="https://0x00sec.org/t/programming-challenge-6/638/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/programming-challenge-6/638/9</link>
        <pubDate>Thu, 23 Jun 2016 15:52:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-638-9</guid>
        <source url="https://0x00sec.org/t/programming-challenge-6/638.rss">Programming Challenge #6</source>
      </item>
      <item>
        <title>Programming Challenge #6</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>That’s a great idea! By why not <code>uint8_t</code> for expressiveness?</p>
          <p><a href="https://0x00sec.org/t/programming-challenge-6/638/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/programming-challenge-6/638/8</link>
        <pubDate>Thu, 23 Jun 2016 14:28:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-638-8</guid>
        <source url="https://0x00sec.org/t/programming-challenge-6/638.rss">Programming Challenge #6</source>
      </item>
      <item>
        <title>Programming Challenge #6</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>The values for the <code>width</code> array were 1,2,3. We just need to bits to store the information. C ensures that a <code>char</code> takes 1 byte so it just saves memory…  A <code>int</code> array will use 2 bits out of 32 in best case…</p>
<p><em>Note: It should be better to say that a char can store the minimal addressable element by the processor… in other words, it contains a byte, but a byte may be bigger than 8 bits</em></p>
          <p><a href="https://0x00sec.org/t/programming-challenge-6/638/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/programming-challenge-6/638/7</link>
        <pubDate>Thu, 23 Jun 2016 05:20:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-638-7</guid>
        <source url="https://0x00sec.org/t/programming-challenge-6/638.rss">Programming Challenge #6</source>
      </item>
      <item>
        <title>Programming Challenge #6</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Why do this…</p>
<pre><code class="lang-auto">w = (char*) malloc (n);
</code></pre>
<p>rather than…</p>
<pre><code class="lang-auto">w = (int*)malloc(n);
</code></pre>
<p>that?</p>
<p>After all, you’re collecting integers.</p>
          <p><a href="https://0x00sec.org/t/programming-challenge-6/638/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/programming-challenge-6/638/6</link>
        <pubDate>Thu, 23 Jun 2016 00:15:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-638-6</guid>
        <source url="https://0x00sec.org/t/programming-challenge-6/638.rss">Programming Challenge #6</source>
      </item>
      <item>
        <title>Programming Challenge #6</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>A pure C version (no error checking)</p>
<pre><code class="lang-auto">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main (){
  int  n, t, k, i, j, r;
  char *w;

  scanf ("%d %d", &amp;n, &amp;t);

  w = (char*) malloc (n);

  for (i = 0; i &lt; n; scanf("%hhd ", &amp;w[i++]));
  for (k = 0; k &lt; t; k++)    {
      scanf ("%d %d", &amp;i, &amp;j);
      for (r = w[i++]; i &lt;= j; r = r &lt; w[i] ? r : w[i], i++);
      printf ("%d\n", r);
    }

  return 0;
}

</code></pre>
          <p><a href="https://0x00sec.org/t/programming-challenge-6/638/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/programming-challenge-6/638/5</link>
        <pubDate>Wed, 22 Jun 2016 21:21:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-638-5</guid>
        <source url="https://0x00sec.org/t/programming-challenge-6/638.rss">Programming Challenge #6</source>
      </item>
      <item>
        <title>Programming Challenge #6</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <pre><code class="lang-auto">// c++
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

int main(){
    int n, t;
    std::cin &gt;&gt; n &gt;&gt; t;
    std::vector&lt;int&gt; width(n);
    
    for (auto&amp; w : width) std::cin &gt;&gt; w;
    
    int i,j;
    while(t-- &gt; 0) {
        std::cin &gt;&gt; i &gt;&gt; j;
        std::cout &lt;&lt; *std::min_element(width.begin() + i,
                                       width.begin() + j + 1) // +1 bcs j is included
                  &lt;&lt; std::endl;
    }
    return 0;
}
</code></pre>
<p>Basically, all one must do is find the minimum from <code>i</code> to <code>j</code> in <code>width</code>.</p>
          <p><a href="https://0x00sec.org/t/programming-challenge-6/638/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/programming-challenge-6/638/4</link>
        <pubDate>Wed, 22 Jun 2016 14:23:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-638-4</guid>
        <source url="https://0x00sec.org/t/programming-challenge-6/638.rss">Programming Challenge #6</source>
      </item>
      <item>
        <title>Programming Challenge #6</title>
        <dc:creator><![CDATA[Khaos]]></dc:creator>
        <description><![CDATA[
            <p>Here’s a Python solution:</p>
<pre><code class="lang-auto">import sys

def GetMinSize(widthList, start, end):
    requiredWidthsList = widthList[start:end + 1]
    return min(requiredWidthsList)

def Main():
    n,t = raw_input().strip().split(' ')
    n,t = [int(n),int(t)]
    width = map(int,raw_input().strip().split(' '))
    for a0 in xrange(t):
        i,j = raw_input().strip().split(' ')
        i,j = [int(i),int(j)]
        print(GetMinSize(width, i, j))
    
if __name__ == "__main__":
    sys.exit(Main())

</code></pre>
          <p><a href="https://0x00sec.org/t/programming-challenge-6/638/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/programming-challenge-6/638/3</link>
        <pubDate>Wed, 22 Jun 2016 11:56:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-638-3</guid>
        <source url="https://0x00sec.org/t/programming-challenge-6/638.rss">Programming Challenge #6</source>
      </item>
      <item>
        <title>Programming Challenge #6</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Good job and great article! Keep it up!</p>
          <p><a href="https://0x00sec.org/t/programming-challenge-6/638/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/programming-challenge-6/638/2</link>
        <pubDate>Wed, 22 Jun 2016 06:41:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-638-2</guid>
        <source url="https://0x00sec.org/t/programming-challenge-6/638.rss">Programming Challenge #6</source>
      </item>
      <item>
        <title>Programming Challenge #6</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Here’s another fun Programming Challenge: <em>Service Lane</em></p>
<p>Source: <a href="https://www.hackerrank.com/challenges/service-lane" rel="noopener nofollow ugc">https://www.hackerrank.com/challenges/service-lane</a></p>
<hr>
<p>Calvin is driving his favorite vehicle on the 101 freeway. He notices that the check engine light of his vehicle is on, and he wants to service it immediately to avoid any risks. Luckily, a service lane runs parallel to the highway. The length of the service lane is <code>N</code> units. The service lane consists of <code>N</code> segments of equal length and different width.</p>
<p>Calvin can enter to and exit from any segment. Let’s call the entry segment as index <code>i</code> and the exit segment as index <code>j</code>. Assume that the exit segment lies after the entry segment (<code>i &lt;= j</code>) and . Calvin has to pass through <strong>all</strong> segments from index <code>i</code> to index <code>j</code> (both inclusive).</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/251ae338949559766f71b4d97eb69e3c49ed278a.png" alt="parth depiction" data-base62-sha1="5ifgUArqMGOXDfljVpuMdphHkXo" width="" height=""></p>
<p>Calvin has three types of vehicles - bike, car, and truck - represented by <code>1</code>, <code>2</code> and <code>3</code>, respectively. These numbers also denote the width of the vehicle.</p>
<p>You are given an array <code>width</code> of length <code>N</code>, where <code>width[k]</code> represents the width of the <code>k</code>th segment of the service lane. It is guaranteed that while servicing he can pass through at most <code>1000</code> segments, including the entry and exit segments.</p>
<ul>
<li>If , <code>width[k] = 1</code>, only the bike can pass through the <code>k</code>th segment.</li>
<li>If , <code>width[k] = 2</code>, the bike and the car can pass through the <code>k</code>th segment.</li>
<li>If , <code>width[k] = 3</code>, all three vehicles can pass through the <code>k</code>th segment.</li>
</ul>
<p>Given the entry and exit point of Calvin’s vehicle in the service lane, output the type of the largest vehicle which can pass through the service lane (including the entry and exit segments).</p>
<p><code>T</code> test cases follow. Each test case contains two integers, <code>i</code> and <code>j</code>, where <code>i</code> is the index of the segment through which Calvin enters the service lane and <code>j</code> is the index of the lane segment through which he exits.</p>
<h3>Constraints</h3>
<pre><code>2 &lt;= N &lt;= 1000
1 &lt;= T &lt;= 1000
0 &lt;= i &lt; j &lt; N
2 &lt;= j - i + 1 &lt;= min(N,1000)
1 &lt;= width[k] &lt;= 3, where 0 &lt;= k &lt; N
</code></pre>
<h3>Output Format</h3>
<p>For each test case, print the number that represents the largest vehicle type that can pass through the service lane.</p>
<p><em><strong>Note:</strong></em> Calvin has to pass through all segments from index <code>i</code> to index <code>j</code> (both inclusive).</p>
<hr>
<h3>Sample Input</h3>
<pre><code>8 5
2 3 1 2 3 2 3 3
0 3
4 6
6 7
3 5
0 7
</code></pre>
<h3>Sample Output</h3>
<pre><code>1
2
3
2
1
</code></pre>
<h3>Explanation</h3>
<p>Below is the representation of the lane:</p>
<pre><code>   |HIGHWAY|Lane|    -&gt;    Width

0: |       |--|            2
1: |       |---|           3
2: |       |-|             1
3: |       |--|            2
4: |       |---|           3
5: |       |--|            2
6: |       |---|           3
7: |       |---|           3
</code></pre>
<ol>
<li>(0, 3): Because <code>width[2] = 1</code>, only the bike can pass through it.</li>
<li>(4, 6): Here the largest allowed vehicle which can pass through the 5th segment is the car and for the 4th and 6th segment it’s the truck. Hence the largest vehicle allowed in these segments is a car.</li>
<li>(6, 7): In this example, the vehicle enters at the 6th segment and exits at the 7th segment. Both segments allow even trucks to pass through them. Hence the answer is 3.</li>
<li>(3, 5): <code>width[3] = width[5] = 2</code>. While the 4th segment allows the truck, the 3rd and 5th allow up to a car. So 2 will be the answer here.</li>
<li>(0, 7): The bike is the only vehicle which can pass through the 2nd segment, which limits the strength of the whole lane to 1.</li>
</ol>
<hr>
<p>I’m excited to see what you guys come up with. My solution(s) will be up shortly.</p>
<p><a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a> out.</p>
          <p><a href="https://0x00sec.org/t/programming-challenge-6/638/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/programming-challenge-6/638/1</link>
        <pubDate>Tue, 21 Jun 2016 22:46:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-638-1</guid>
        <source url="https://0x00sec.org/t/programming-challenge-6/638.rss">Programming Challenge #6</source>
      </item>
  </channel>
</rss>
