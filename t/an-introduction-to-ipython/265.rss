<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>An Introduction to IPython</title>
    <link>https://0x00sec.org/t/an-introduction-to-ipython/265</link>
    <description>&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/c47a378daf5233915118646099c801c0d3457080.jpg&quot; width=&quot;170&quot; height=&quot;80&quot;&gt;

Hopefully some of you will end up loving this tool as much as I do. I think I originally saw it on a defcon talk, and never looked back. Perhaps it&#39;s a bit long-winded, but I wanted to be detailed. Personally, I&#39;ve used it almost everyday since learning to use it, it&#39;s become an invaluable tool for working with Python. I urge anyone who loves their Python to give it a go.

## What Is IPython?&lt;br&gt;&lt;br&gt;

In a nutshell, it&#39;s the IDLE* you always dreamed of. IPython is a richly featured replacement for the standard Python IDLE. It offers a much wider range of functionality, that the standard IDLE, which generally ships with python, sorely lacks. It&#39;s a great tool for learning Python faster than you would without it, kind of like a handy cheat-sheet that&#39;s at your fingertips. It excels as a quick Python object reference (examples below), for testing snippets of code on-the-fly and exploring new modules. But these are just a few of the many features useful to the Python scripter. In this introduction, I will show off some it&#39;s most useful features. IPython is available for Linux, Mac and Windows.

_* Integrated Development &amp; Learning Environment_

## Install IPython

I will assume here that you are using Kali linux/debian. If not, just replace the commands with the relevant ones for your distro. To install on kali, type:

`apt-get install ipython`

OR for the python 3.x version

`apt-get install ipython3`

If you&#39;re trying this on windows, already have Python installed(I will assume you do), and have some experience installing packages, you can get it with the command:

`pip install ipython` replace with ipython3 if you use python 3.x

Here are some links that can help with installation issues:
https://pypi.python.org/pypi/pip
and here:
http://ipython.org/install.html .

## Start IPython

To start IPython, open a command prompt, and type `ipython`
You should see this new prompt in the terminal:&lt;br&gt;&lt;br&gt;

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/8e8675e3ffb4b353316c3fce9126d6d47a4a41d6.jpg&quot; width=&quot;654&quot; height=&quot;248&quot;&gt;

In my examples below, I will be using Kali and the IPython for Python 2.x

## Why Use IPython?

**Exploring objects, a handy on-the-fly reference.**

IPython makes exploring and learning more about python objects (modules, data-types, data-structures etc etc.) a breeze. See for yourself. Let&#39;s say you wanted to find out more about the `itertools` module (a very useful module). IPython makes this simple:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/80ecd6c8a54a1693ab7d75e5ceef873fae334e01.jpg&quot; width=&quot;654&quot; height=&quot;261&quot;&gt;&lt;br&gt;&lt;br&gt;

The command takes the form `object_name?`
Now hit `&lt;return&gt;`, and Boom!
&lt;br&gt;&lt;br&gt;
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/719749624becc80694e01866adf9e1096c2b058c.jpg&quot; width=&quot;654&quot; height=&quot;417&quot;&gt;&lt;br&gt;&lt;br&gt;

We get the modules _docstring_, and we find out that `itertools` contains &quot;Functional tools for creating and using iterators&quot;... Great!

Pressing `&lt;Enter&gt;` or the up/down directional keys will navigate through the rest of the _docstring_. We can escape back to IPython by pressing &#39;**q**&#39;.

However, it&#39;s not just modules you can do this with, you can also do this for pythons types (`str`, `list`, `tuple`, `dict` ... etc), variables you have created and ... well pretty much any object in python... and that&#39;s pretty useful, because in python, everything is an object!&lt;br&gt;&lt;br&gt;

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/2ee42164e17bbfd3d4a067b94bfaae776cedc149.jpg&quot; width=&quot;654&quot; height=&quot;284&quot;&gt;
&lt;br&gt;
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/f801c9d41ae6785de3dde6ec7c7b28b9df00db1c.jpg&quot; width=&quot;654&quot; height=&quot;417&quot;&gt;
&lt;br&gt;&lt;br&gt;
**Tab Completion**

Another great feature of IPython is it&#39;s Tab-completion. We can find out what methods `itertools` has by typing:&lt;br&gt;


`object_name. &lt;TAB&gt;`   ( `&lt;TAB&gt;` here means press the TAB key)&lt;br&gt;&lt;br&gt;

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/9a35966e5ea43bc5f48387901979d3d6fe35449e.jpg&quot; width=&quot;654&quot; height=&quot;417&quot;&gt;&lt;br&gt;&lt;br&gt;

Now I want to know more about `itertools.permutations`, again I can use `object_name?`&lt;br&gt;&lt;br&gt;

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/56e709201e30acfe2c0deff881cb894157869bbc.jpg&quot; width=&quot;654&quot; height=&quot;417&quot;&gt;
&lt;br&gt;
This is also useful if you can&#39;t quite remember the name of the method you want, but you do remember for instance, the letter it started with. In this instance we could type,

 `object_name.first_letter &lt;TAB&gt;` 

(remember this means hit tab) which gives you all the methods starting with that letter.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/693d2aabde373ccebd70ef9a11d661a935e073d8.jpg&quot; width=&quot;654&quot; height=&quot;156&quot;&gt;&lt;br&gt;&lt;br&gt;

In short, typing `object_name. &lt;TAB&gt;` will work for almost any object, displaying it&#39;s attributes and methods, if it has any. This also works on file and directory names and any objects you may have created yourself!
&lt;br&gt;&lt;br&gt;

**Magic Functions**

These are &#39;magic&#39; predefined functions whose syntax is much like that of a command line call. There are two types, line magics and cell magics.

Line magics syntax takes the form

`%func_name &lt;args&gt;`

where `&lt;args&gt;` is the rest of the line, without quotes or parentheses.

Cell magics syntax is
    `%%func_name &lt;args&gt;`
    `&lt;args&gt;`
    `&lt;args&gt;`
...

where `&lt;args&gt;` are both the rest of the line, and in a separate argument, the lines that follow it. Note that we use `%` twice for cell magics, once for line magics.

A brief example:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/e8e64e38230351b3f00b12798f8a8f92344be420.jpg&quot; width=&quot;654&quot; height=&quot;245&quot;&gt;

&lt;br&gt;&lt;br&gt;
A full list of magic functions can be seen by typing `%lsmagic`

Finally, to exit IPython, simply type `exit` and hit `&lt;Enter&gt;`

## In Conclusion

IPython is a very useful tool for scripting with python as a quick, easy, in-depth reference, scratchpad (for testing snippets of code on the the fly) and last, but not least, for expanding your knowledge of python (very handy for exploring new modules). I hope this will prove useful, it&#39;s my first post, and I appreciate any comments or criticism. Thanks for reading!

References:
https://ipython.org/</description>
    
    <lastBuildDate>Thu, 12 May 2016 14:27:00 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/an-introduction-to-ipython/265.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>An Introduction to IPython</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/an-introduction-to-ipython/265/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/an-introduction-to-ipython/265/7</link>
        <pubDate>Sun, 21 Jan 2018 00:30:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-265-7</guid>
        <source url="https://0x00sec.org/t/an-introduction-to-ipython/265.rss">An Introduction to IPython</source>
      </item>
      <item>
        <title>An Introduction to IPython</title>
        <dc:creator><![CDATA[EnergyWolf]]></dc:creator>
        <description><![CDATA[
            <p>For anyone who <em>is</em> in the market for one, I use PyCharm by Jetbrains as my Python IDE and would highly recommend it. People complain it’s a bit slow, since it’s coded in Python apparently, but I don’t mind waiting a few extra seconds for it to start up. Free full licenses for students on most of their products too, but the free versions are quite fully featured.</p>
          <p><a href="https://0x00sec.org/t/an-introduction-to-ipython/265/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/an-introduction-to-ipython/265/6</link>
        <pubDate>Thu, 12 May 2016 14:27:00 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-265-6</guid>
        <source url="https://0x00sec.org/t/an-introduction-to-ipython/265.rss">An Introduction to IPython</source>
      </item>
      <item>
        <title>An Introduction to IPython</title>
        <dc:creator><![CDATA[Neo]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for the heads up.<br>
I can’t bother with any fancy IDE because i am mostly working via SSH, and IPython seems like a good alternative to the standard Python interpreter for making programming easier.</p>
          <p><a href="https://0x00sec.org/t/an-introduction-to-ipython/265/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/an-introduction-to-ipython/265/5</link>
        <pubDate>Thu, 12 May 2016 10:55:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-265-5</guid>
        <source url="https://0x00sec.org/t/an-introduction-to-ipython/265.rss">An Introduction to IPython</source>
      </item>
      <item>
        <title>An Introduction to IPython</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Say oaktree, people keep telling me that Ruby is a “no-go” in terms of scripting and I should just try to stay with Python. Of course I’m awfully hesitant about doing that due to the fact that Ruby is also superior in many ways as well. What say you?</p>
          <p><a href="https://0x00sec.org/t/an-introduction-to-ipython/265/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/an-introduction-to-ipython/265/4</link>
        <pubDate>Tue, 10 May 2016 02:01:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-265-4</guid>
        <source url="https://0x00sec.org/t/an-introduction-to-ipython/265.rss">An Introduction to IPython</source>
      </item>
      <item>
        <title>An Introduction to IPython</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This is basically <code>irb</code> (Interactive Ruby) + <code>man</code>, but for Python! Cool!</p>
          <p><a href="https://0x00sec.org/t/an-introduction-to-ipython/265/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/an-introduction-to-ipython/265/3</link>
        <pubDate>Tue, 10 May 2016 01:26:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-265-3</guid>
        <source url="https://0x00sec.org/t/an-introduction-to-ipython/265.rss">An Introduction to IPython</source>
      </item>
      <item>
        <title>An Introduction to IPython</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for the tut! It was extremely useful! I don’t really have any criticism for this post, although to be frank I love how you clearly explained what was happening for each step. It makes it much easier for people who don’t know what you’re introducing, as well as helping them down the right path in terms of how it should be done.</p>
          <p><a href="https://0x00sec.org/t/an-introduction-to-ipython/265/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/an-introduction-to-ipython/265/2</link>
        <pubDate>Mon, 09 May 2016 23:11:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-265-2</guid>
        <source url="https://0x00sec.org/t/an-introduction-to-ipython/265.rss">An Introduction to IPython</source>
      </item>
      <item>
        <title>An Introduction to IPython</title>
        <dc:creator><![CDATA[EnergyWolf]]></dc:creator>
        <description><![CDATA[
            <p><img src="//0x00sec.s3.amazonaws.com/original/1X/c47a378daf5233915118646099c801c0d3457080.jpg" width="170" height="80"></p>
<p>Hopefully some of you will end up loving this tool as much as I do. I think I originally saw it on a defcon talk, and never looked back. Perhaps it’s a bit long-winded, but I wanted to be detailed. Personally, I’ve used it almost everyday since learning to use it, it’s become an invaluable tool for working with Python. I urge anyone who loves their Python to give it a go.</p>
<h2>What Is IPython?<br><br>
</h2>
<p>In a nutshell, it’s the IDLE* you always dreamed of. IPython is a richly featured replacement for the standard Python IDLE. It offers a much wider range of functionality, that the standard IDLE, which generally ships with python, sorely lacks. It’s a great tool for learning Python faster than you would without it, kind of like a handy cheat-sheet that’s at your fingertips. It excels as a quick Python object reference (examples below), for testing snippets of code on-the-fly and exploring new modules. But these are just a few of the many features useful to the Python scripter. In this introduction, I will show off some it’s most useful features. IPython is available for Linux, Mac and Windows.</p>
<p><em>* Integrated Development &amp; Learning Environment</em></p>
<h2>Install IPython</h2>
<p>I will assume here that you are using Kali linux/debian. If not, just replace the commands with the relevant ones for your distro. To install on kali, type:</p>
<p><code>apt-get install ipython</code></p>
<p>OR for the python 3.x version</p>
<p><code>apt-get install ipython3</code></p>
<p>If you’re trying this on windows, already have Python installed(I will assume you do), and have some experience installing packages, you can get it with the command:</p>
<p><code>pip install ipython</code> replace with ipython3 if you use python 3.x</p>
<p>Here are some links that can help with installation issues:<br>
</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://pypi.org/static/images/favicon.6a76275d.ico" class="site-icon" width="32" height="30">
      <a href="https://pypi.org/project/pip/" target="_blank" rel="noopener nofollow ugc">PyPI</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/1/19f8cec1b7c2eec3c043f1ad8bd7c8afb43be7b5.jpeg" class="thumbnail onebox-avatar" width="300" height="300">

<h3><a href="https://pypi.org/project/pip/" target="_blank" rel="noopener nofollow ugc">pip</a></h3>

<p>The PyPA recommended tool for installing Python packages.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>
and here:<br>
<a href="http://ipython.org/install.html" rel="noopener nofollow ugc">http://ipython.org/install.html</a> .<p></p>
<h2>Start IPython</h2>
<p>To start IPython, open a command prompt, and type <code>ipython</code><br>
You should see this new prompt in the terminal:<br><br></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/8e8675e3ffb4b353316c3fce9126d6d47a4a41d6.jpg" width="654" height="248"></p>
<p>In my examples below, I will be using Kali and the IPython for Python 2.x</p>
<h2>Why Use IPython?</h2>
<p><strong>Exploring objects, a handy on-the-fly reference.</strong></p>
<p>IPython makes exploring and learning more about python objects (modules, data-types, data-structures etc etc.) a breeze. See for yourself. Let’s say you wanted to find out more about the <code>itertools</code> module (a very useful module). IPython makes this simple:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/80ecd6c8a54a1693ab7d75e5ceef873fae334e01.jpg" width="654" height="261"><br><br></p>
<p>The command takes the form <code>object_name?</code><br>
Now hit <code>&lt;return&gt;</code>, and Boom!<br>
<br><br><br>
<img src="//0x00sec.s3.amazonaws.com/original/1X/719749624becc80694e01866adf9e1096c2b058c.jpg" width="654" height="417"><br><br></p>
<p>We get the modules <em>docstring</em>, and we find out that <code>itertools</code> contains “Functional tools for creating and using iterators”… Great!</p>
<p>Pressing <code>&lt;Enter&gt;</code> or the up/down directional keys will navigate through the rest of the <em>docstring</em>. We can escape back to IPython by pressing ‘<strong>q</strong>’.</p>
<p>However, it’s not just modules you can do this with, you can also do this for pythons types (<code>str</code>, <code>list</code>, <code>tuple</code>, <code>dict</code> … etc), variables you have created and … well pretty much any object in python… and that’s pretty useful, because in python, everything is an object!<br><br></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/2ee42164e17bbfd3d4a067b94bfaae776cedc149.jpg" width="654" height="284"></p>
<br>
<img src="//0x00sec.s3.amazonaws.com/original/1X/f801c9d41ae6785de3dde6ec7c7b28b9df00db1c.jpg" width="654" height="417">
<br><br>
**Tab Completion**
<p>Another great feature of IPython is it’s Tab-completion. We can find out what methods <code>itertools</code> has by typing:<br></p>
<p><code>object_name. &lt;TAB&gt;</code>   ( <code>&lt;TAB&gt;</code> here means press the TAB key)<br><br></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/9a35966e5ea43bc5f48387901979d3d6fe35449e.jpg" width="654" height="417"><br><br></p>
<p>Now I want to know more about <code>itertools.permutations</code>, again I can use <code>object_name?</code><br><br></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/56e709201e30acfe2c0deff881cb894157869bbc.jpg" width="654" height="417"></p>
<br>
This is also useful if you can't quite remember the name of the method you want, but you do remember for instance, the letter it started with. In this instance we could type,
<p><code>object_name.first_letter &lt;TAB&gt;</code></p>
<p>(remember this means hit tab) which gives you all the methods starting with that letter.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/693d2aabde373ccebd70ef9a11d661a935e073d8.jpg" width="654" height="156"><br><br></p>
<p>In short, typing <code>object_name. &lt;TAB&gt;</code> will work for almost any object, displaying it’s attributes and methods, if it has any. This also works on file and directory names and any objects you may have created yourself!<br>
<br><br></p>
<p><strong>Magic Functions</strong></p>
<p>These are ‘magic’ predefined functions whose syntax is much like that of a command line call. There are two types, line magics and cell magics.</p>
<p>Line magics syntax takes the form</p>
<p><code>%func_name &lt;args&gt;</code></p>
<p>where <code>&lt;args&gt;</code> is the rest of the line, without quotes or parentheses.</p>
<p>Cell magics syntax is<br>
<code>%%func_name &lt;args&gt;</code><br>
<code>&lt;args&gt;</code><br>
<code>&lt;args&gt;</code><br>
…</p>
<p>where <code>&lt;args&gt;</code> are both the rest of the line, and in a separate argument, the lines that follow it. Note that we use <code>%</code> twice for cell magics, once for line magics.</p>
<p>A brief example:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/e8e64e38230351b3f00b12798f8a8f92344be420.jpg" width="654" height="245"></p>
<p><br><br><br>
A full list of magic functions can be seen by typing <code>%lsmagic</code></p>
<p>Finally, to exit IPython, simply type <code>exit</code> and hit <code>&lt;Enter&gt;</code></p>
<h2>In Conclusion</h2>
<p>IPython is a very useful tool for scripting with python as a quick, easy, in-depth reference, scratchpad (for testing snippets of code on the the fly) and last, but not least, for expanding your knowledge of python (very handy for exploring new modules). I hope this will prove useful, it’s my first post, and I appreciate any comments or criticism. Thanks for reading!</p>
<p>References:<br>
</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://ipython.org/_static/favicon.ico" class="site-icon" width="18" height="18">
      <a href="https://ipython.org/" target="_blank" rel="noopener nofollow ugc">ipython.org</a>
  </header>
  <article class="onebox-body">
    <img src="" class="thumbnail" width="" height="">

<h3><a href="https://ipython.org/" target="_blank" rel="noopener nofollow ugc">Jupyter and the future of IPython — IPython</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
          <p><a href="https://0x00sec.org/t/an-introduction-to-ipython/265/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/an-introduction-to-ipython/265/1</link>
        <pubDate>Mon, 09 May 2016 16:05:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-265-1</guid>
        <source url="https://0x00sec.org/t/an-introduction-to-ipython/265.rss">An Introduction to IPython</source>
      </item>
  </channel>
</rss>
