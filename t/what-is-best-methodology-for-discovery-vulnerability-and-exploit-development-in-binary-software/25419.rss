<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What is best methodology for discovery vulnerability and Exploit Development in binary software?</title>
    <link>https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419</link>
    <description>I&#39;m new in Exploit Development and Discovery Vulnerability. I learning some technique by some course and books.I have learned Stack Buffer Overflow and Heap Buffer Overflow and Format Strings and some bypass technique for ASLR,NX,DEP , .... .
But I think its only technique and I need a methodology for best performance in discovery vulnerability in binary software.
so,what is best methodology for discovery vulnerability and Exploit Development in binary software?</description>
    
    <lastBuildDate>Fri, 21 May 2021 19:10:41 +0000</lastBuildDate>
    <category>Beginner Guides</category>
    <atom:link href="https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What is best methodology for discovery vulnerability and Exploit Development in binary software?</title>
        <dc:creator><![CDATA[verking]]></dc:creator>
        <description><![CDATA[
            <p>This is a very common question and one that doesn’t have an easy answer. The problem in even answering this for you is that we can only speculate how much you know, how much is academic vs experienced, etc.</p>
<p>For discovery a lot of work is being done in VR&amp;D, and I tend to see a lot of people at minimum incorporating fuzzing into their efforts. Project zero has a lot of interesting projects and blogs around fuzzing various applications:</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/googleprojectzero" target="_blank" rel="noopener nofollow ugc">GitHub</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/3X/1/a/1ab43966ab648c8cb8fd83d6529a0030ed19329c.png" class="thumbnail onebox-avatar" width="280" height="280">

<h3><a href="https://github.com/googleprojectzero" target="_blank" rel="noopener nofollow ugc">Google Project Zero</a></h3>

<p>Projects by Google Project Zero. Google Project Zero has 23 repositories available. Follow their code on GitHub.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://googleprojectzero.blogspot.com/favicon.ico" class="site-icon" width="32" height="32">
      <a href="https://googleprojectzero.blogspot.com/2020/04/fuzzing-imageio.html" target="_blank" rel="noopener nofollow ugc">googleprojectzero.blogspot.com</a>
  </header>
  <article class="onebox-body">
    

<h3><a href="https://googleprojectzero.blogspot.com/2020/04/fuzzing-imageio.html" target="_blank" rel="noopener nofollow ugc">Fuzzing ImageIO</a></h3>

<p>Posted by Samuel Groß, Project Zero    This blog post discusses an old type of issue, vulnerabilities in image format parsers, in a new(er)...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>I encourage you to look into fuzzing as it’ll help you at least get into more real world exploit development as you have to verify if a crash is of value or even reproducible.</p>
<p>You should also look more into “chaining”. Lots of people have been lucky in finding a vuln but often struggle to turn it into a full “exploit chain”. So if you were lucky enough to find a vuln in let’s say a browser … can you consistently reproduce it, and can you have it escape sandbox or carry out additional functionality?</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=32%2C32" class="site-icon" width="32" height="32">
      <a href="https://github.blog/2021-03-24-real-world-exploit-chains-explained/" target="_blank" rel="noopener nofollow ugc" title="10:28PM - 24 March 2021">The GitHub Blog – 24 Mar 21</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/362;"><img src="https://github.blog/wp-content/uploads/2019/09/security-1200-630.png?fit=1200%2C630" class="thumbnail" width="690" height="362"></div>

<h3><a href="https://github.blog/2021-03-24-real-world-exploit-chains-explained/" target="_blank" rel="noopener nofollow ugc">One day short of a full chain: Real world exploit chains explained | The...</a></h3>

<p>When it comes to security research, the path from bug to vulnerability to exploit can be a long one. GitHub Security Lab describes the journey.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>So fuzzing, and full exploit chain development would be my recommendation if you feel confident enough in the basics.</p>
          <p><a href="https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419/5</link>
        <pubDate>Fri, 21 May 2021 19:10:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25419-5</guid>
        <source url="https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419.rss">What is best methodology for discovery vulnerability and Exploit Development in binary software?</source>
      </item>
      <item>
        <title>What is best methodology for discovery vulnerability and Exploit Development in binary software?</title>
        <dc:creator><![CDATA[H45uK1mchi]]></dc:creator>
        <description><![CDATA[
            <p>Well, thats not so easy to answer.</p>
<p>One way is the good old source code analysis. A lot of important security issues were found this way. For example the recent sudo bug.</p>
<p>If you’re looking and auditing source code, the easiest way is to simply search for unsecure functions, which exist in all languages. And if you find one, you are basically following the call graph and see where is the input data coming from. Can I somehow influence it etc.</p>
<p>Another way, if you for example, do not have the source code available, is fuzzing. It can often find some good issues. However, the really hard part, most of the time is exploiting it.</p>
<p>The problem with a lot of pwn challenges and educational stuff, is that it is a very “sandboxed” view of things. In the real world it can get way more complicated to write a proper and stable exploit. Finding a buffer overflow or other type of vuln, can be challenging but most of the time its not that hard. The hard part is to exploit it in a way that the application keeps working.</p>
<p>Last but not least, I would say manual testing paired with an attached debugger / disassembler.<br>
Look for user input and any possible way you can provide data. Look at error handling etc.</p>
          <p><a href="https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419/4</link>
        <pubDate>Thu, 20 May 2021 18:59:15 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25419-4</guid>
        <source url="https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419.rss">What is best methodology for discovery vulnerability and Exploit Development in binary software?</source>
      </item>
      <item>
        <title>What is best methodology for discovery vulnerability and Exploit Development in binary software?</title>
        <dc:creator><![CDATA[ccsoup]]></dc:creator>
        <description><![CDATA[
            <p>I find this presentation in 2017 :<br>
<a href="https://www.youtube.com/watch?v=1vjchTrq0iQ" rel="noopener nofollow ugc">BalCCon2k17 - m-r Mane Piperevski - Methodology for Vulnerability Research and Exploit Development</a></p>
<p>if you have other resource share it.</p>
          <p><a href="https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419/3</link>
        <pubDate>Wed, 31 Mar 2021 10:09:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25419-3</guid>
        <source url="https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419.rss">What is best methodology for discovery vulnerability and Exploit Development in binary software?</source>
      </item>
      <item>
        <title>What is best methodology for discovery vulnerability and Exploit Development in binary software?</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Well isn’t that the million dollar question</p>
          <p><a href="https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419/2</link>
        <pubDate>Wed, 31 Mar 2021 09:28:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25419-2</guid>
        <source url="https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419.rss">What is best methodology for discovery vulnerability and Exploit Development in binary software?</source>
      </item>
      <item>
        <title>What is best methodology for discovery vulnerability and Exploit Development in binary software?</title>
        <dc:creator><![CDATA[ccsoup]]></dc:creator>
        <description><![CDATA[
            <p>I’m new in Exploit Development and Discovery Vulnerability. I learning some technique by some course and books.I have learned Stack Buffer Overflow and Heap Buffer Overflow and Format Strings and some bypass technique for ASLR,NX,DEP , … .<br>
But I think its only technique and I need a methodology for best performance in discovery vulnerability in binary software.<br>
so,what is best methodology for discovery vulnerability and Exploit Development in binary software?</p>
          <p><a href="https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419/1</link>
        <pubDate>Tue, 30 Mar 2021 10:12:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25419-1</guid>
        <source url="https://0x00sec.org/t/what-is-best-methodology-for-discovery-vulnerability-and-exploit-development-in-binary-software/25419.rss">What is best methodology for discovery vulnerability and Exploit Development in binary software?</source>
      </item>
  </channel>
</rss>
