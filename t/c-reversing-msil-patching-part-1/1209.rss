<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>C# Reversing - MSIL Patching [Part 1]</title>
    <link>https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209</link>
    <description>Hey mates!

Maybe some of the elder members remember my series about C# CrackMe Challenges. After a little break where I focussed on other stuff I&#39;m now back with an introduction to MSIL patching. Before you start with this post I recommend you to have a look at my [other parts](https://0x00sec.org/t/crackme-challenge-part-1-introduction-very-easy-password-mechanism-python/409/29) first :wink:. They teach some fundamentals which I won&#39;t cover here.

Moreover you shouldn&#39;t expect a typical tutorial. There are great tutorials out there written by more experienced reverse engineers. I just want to give you an insight into the topic and teach you some basic things which will help you out when you move further on :slight_smile:.

---
## MSIL
The Microsoft Intermediate Language is the representation of .Net code ready for being executed by a Virtual Machine or to be compiled into Native Code. It reminds of Assembler instructions due to it&#39;s bytecode-style but is not as low-level. All we have to know is that it&#39;s the code we can find when we get a .Net-executable. So when you want to reverse a .Net-application, MSIL is your new best friend :grin:. For more information have a look at [WikiPedia](https://en.wikipedia.org/wiki/Common_Intermediate_Language).

---
## Why Don&#39;t Just Decompile?
If you&#39;ve read my other series, you probably wonder why we aren&#39;t just decompiling into source code and working with it. Yep, good objection. Maybe it seems to be the easiest solution but sometimes a decompiled Visual Studio project produces errors. Or it&#39;s just too easy and not 1337 enough for us :grin:. Anyway, I recommend you to know your enemy, so if you prefer working with the source code it&#39;s okay but you should know how you could do it without it :wink:.

---
## Preparing The Environment
For decompiling I usually prefer dotPeek but this time we&#39;ll need [ILSpy](http://ilspy.net/) and as plugin [Reflexil](http://reflexil.net/). Please download both of them before we continue. Reflexil can be easily installed by copying the .dll into ILSpys directory.

---
## Our Target
As a target I&#39;ve found a [crypter](https://mega.nz/#!OxxQQIYJ!e2NAcXtIEpwAzkP9_7_e1U5zLYzFQ6oLXrMOuFXsPFg) and a [binder](https://mega.nz/#!foowVISJ!Rtd-9TchF5zO2Rs70mcP25rjAbVr2fX-0y3XnPqrLWY). They were both obfuscated with CliSecure but that&#39;s an easy challenge for de4dot :wink:. See my previous series for a tutorial on using it. This time I already cleaned both of them for you :slight_smile:. If you cracked one of them, the other one&#39;s pretty futile but maybe you want to test it out more than one time :grin:.

At this point I highly recommend you to spot the license-checking on your own. You won&#39;t need much experience to know how it can be circumvented... Come back when you&#39;ve got a plan how you&#39;d change the source to bypass it!

---
## Description Of My Patch
Have you found a way on your own? Okay, I trust you :wink:. The patch in this case is pretty easy. First we have to spot the place where the license checking is done. I use `Binder_Load()` but you could also patch the checking in other parts of the code. Maybe you want to do that as homework?

```
        private void Binder_Load(object sender, System.EventArgs e)
        {
            try
            {
                this.class1_0.method_0();
                string text = System.IO.File.ReadAllText(System.Windows.Forms.Application.StartupPath + &quot;\\License\\binder.license&quot;);

                if (text.Length &gt; 0)
                {
                    string[] array = this.class1_0.method_1(text);
                    this.kryptonLabel2.Text = string.Concat(new string[]
                    {
                        array[0],
                        &quot; - &quot;,
                        array[1],
                        &quot; - &quot;,
                        array[2]
                    });

                    this.bool_0 = true;
                }
            }
            catch
            {
                KryptonMessageBox.Show(&quot;Invalid license file!&quot;, &quot;License Error&quot;, System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Exclamation);
            }
        }
```

I think there&#39;s not much to explain. The first function `class1_0.method_0()` uses some anti-debugger stuff. Not interesting for us but maybe you want to have a look at it? In our case it never triggers so we can just ignore it. After that it tries to read a license file. Of course we haven&#39;t such a file so the catch-block is triggered which tells us that our version is unlicensed. If everything would run fine a boolean at the end would be set to true. Mmh... Could that be something like `bIsLicensed = true`? I shorten it here a bit up with telling you that it&#39;s the boolean which is used for identifying whether the program is licensed or not.

What to do now? Again there are different ways of solving the problem. You could just comment everything except the boolean out, set the boolean already in the beginning of the method to true, etc... I decided to use the second method because it&#39;s more interesting than just commenting some stuff out :wink:. 

How will the function look like when we&#39;re finished? Because we just copy the line in front of the other code it&#39;ll look like this:
```
        private void Binder_Load(object sender, System.EventArgs e)
        {
            try
            {
                this.bool_0 = true;  // Here we add our little one-line patch

                this.class1_0.method_0();
                string text = System.IO.File.ReadAllText(System.Windows.Forms.Application.StartupPath + &quot;\\License\\binder.license&quot;);

                if (text.Length &gt; 0)
                {
                    string[] array = this.class1_0.method_1(text);
                    this.kryptonLabel2.Text = string.Concat(new string[]
                    {
                        array[0],
                        &quot; - &quot;,
                        array[1],
                        &quot; - &quot;,
                        array[2]
                    });

                    this.bool_0 = true;
                }
            }
            catch
            {
                KryptonMessageBox.Show(&quot;Invalid license file!&quot;, &quot;License Error&quot;, System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Exclamation);
            }
        }
```

I hope you understood our devious plan :smile:.

---
## Using Reflexil
Now that we&#39;ve got an aim to achieve, we can start with patching the MSIL code. Start ILSpy, open the Binder/Crypter (Both work the same) and go to the `Binder(or crypter)_load()` method. Then click on View at the top bar and select Reflexil. If everything worked fine, you should see a new window at the bottom.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/3/35fa4535cac06720d476a2bf7ef5ad3493d0f829.PNG&quot; width=&quot;415&quot; height=&quot;212&quot;&gt;

Reflexil is very intuitive so I think you won&#39;t have any problems with it. Just select the method we&#39;re going to patch on the left navigation bar and it&#39;ll automatically show us the MSIL code.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/c/cf65ad222d54d745fbed3745c5db6938f68c87a6.PNG&quot; width=&quot;316&quot; height=&quot;189&quot;&gt;

Now scroll through the code and search for something interesting. Reflexil already commented on some of the lines, so that you don&#39;t even have to read the OpCodes :grin:. In my case I&#39;ve saw on line 53 how the bool is activated.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/1/1b46c65e92be460292aa3e06eef7bcc18e26d729.PNG&quot; width=&quot;685&quot; height=&quot;263&quot;&gt;

To patch the program just copy these 3 lines to the beginning of the method:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/5/5d4fdcacf1e52064dc91d5e60bd3a9108d4057a4.PNG&quot; width=&quot;658&quot; height=&quot;267&quot;&gt;

If you want to save the patched crypter/binder now, just rightclick on it in the left navigation bar and chose Save As.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/5/52e500185f3da95d86d753edddb424e012357d4d.PNG&quot; width=&quot;367&quot; height=&quot;435&quot;&gt;

Finished!

---
## Conclusion
When you want to make a fast inline patch, MSIL is essential. I highly recommend you to have a look at it and Reflexil when you got hooked :wink:.

|-TheDoctor-|</description>
    
    <lastBuildDate>Tue, 18 Oct 2016 07:48:19 +0000</lastBuildDate>
    <category>Reverse Engineering</category>
    <atom:link href="https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>C# Reversing - MSIL Patching [Part 1]</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Never heard of it before but it seems to be <strong>really</strong> cool <img src="https://0x00sec.org/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:">. Iâ€™ll have a look at it within the next few days!</p>
          <p><a href="https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209/5</link>
        <pubDate>Tue, 18 Oct 2016 07:48:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1209-5</guid>
        <source url="https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209.rss">C# Reversing - MSIL Patching [Part 1]</source>
      </item>
      <item>
        <title>C# Reversing - MSIL Patching [Part 1]</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Glad to here that from you <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">. Iâ€™m excited for your next hardware posts <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">.</p>
          <p><a href="https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209/4</link>
        <pubDate>Tue, 18 Oct 2016 07:46:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1209-4</guid>
        <source url="https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209.rss">C# Reversing - MSIL Patching [Part 1]</source>
      </item>
      <item>
        <title>C# Reversing - MSIL Patching [Part 1]</title>
        <dc:creator><![CDATA[FFY00]]></dc:creator>
        <description><![CDATA[
            <p>I usually use dnSpy, itâ€™s an upgraded version of ILSpy</p>
          <p><a href="https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209/3</link>
        <pubDate>Mon, 17 Oct 2016 21:12:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1209-3</guid>
        <source url="https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209.rss">C# Reversing - MSIL Patching [Part 1]</source>
      </item>
      <item>
        <title>C# Reversing - MSIL Patching [Part 1]</title>
        <dc:creator><![CDATA[anon79434934]]></dc:creator>
        <description><![CDATA[
            <p>There are a few things in this world that are very underrated. Your proficiency in C# is one of them.</p>
<p>Good job as usual.</p>
<p>-Phoenix750</p>
          <p><a href="https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209/2</link>
        <pubDate>Mon, 17 Oct 2016 20:34:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1209-2</guid>
        <source url="https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209.rss">C# Reversing - MSIL Patching [Part 1]</source>
      </item>
      <item>
        <title>C# Reversing - MSIL Patching [Part 1]</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Hey mates!</p>
<p>Maybe some of the elder members remember my series about C# CrackMe Challenges. After a little break where I focussed on other stuff Iâ€™m now back with an introduction to MSIL patching. Before you start with this post I recommend you to have a look at my <a href="https://0x00sec.org/t/crackme-challenge-part-1-introduction-very-easy-password-mechanism-python/409/29">other parts</a> first <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">. They teach some fundamentals which I wonâ€™t cover here.</p>
<p>Moreover you shouldnâ€™t expect a typical tutorial. There are great tutorials out there written by more experienced reverse engineers. I just want to give you an insight into the topic and teach you some basic things which will help you out when you move further on <img src="/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">.</p>
<hr>
<h2>MSIL</h2>
<p>The Microsoft Intermediate Language is the representation of .Net code ready for being executed by a Virtual Machine or to be compiled into Native Code. It reminds of Assembler instructions due to itâ€™s bytecode-style but is not as low-level. All we have to know is that itâ€™s the code we can find when we get a .Net-executable. So when you want to reverse a .Net-application, MSIL is your new best friend <img src="/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:">. For more information have a look at <a href="https://en.wikipedia.org/wiki/Common_Intermediate_Language" rel="noopener nofollow ugc">WikiPedia</a>.</p>
<hr>
<h2>Why Donâ€™t Just Decompile?</h2>
<p>If youâ€™ve read my other series, you probably wonder why we arenâ€™t just decompiling into source code and working with it. Yep, good objection. Maybe it seems to be the easiest solution but sometimes a decompiled Visual Studio project produces errors. Or itâ€™s just too easy and not 1337 enough for us <img src="/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:">. Anyway, I recommend you to know your enemy, so if you prefer working with the source code itâ€™s okay but you should know how you could do it without it <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">.</p>
<hr>
<h2>Preparing The Environment</h2>
<p>For decompiling I usually prefer dotPeek but this time weâ€™ll need <a href="http://ilspy.net/" rel="noopener nofollow ugc">ILSpy</a> and as plugin <a href="http://reflexil.net/" rel="noopener nofollow ugc">Reflexil</a>. Please download both of them before we continue. Reflexil can be easily installed by copying the .dll into ILSpys directory.</p>
<hr>
<h2>Our Target</h2>
<p>As a target Iâ€™ve found a <a href="https://mega.nz/#!OxxQQIYJ!e2NAcXtIEpwAzkP9_7_e1U5zLYzFQ6oLXrMOuFXsPFg" rel="noopener nofollow ugc">crypter</a> and a <a href="https://mega.nz/#!foowVISJ!Rtd-9TchF5zO2Rs70mcP25rjAbVr2fX-0y3XnPqrLWY" rel="noopener nofollow ugc">binder</a>. They were both obfuscated with CliSecure but thatâ€™s an easy challenge for de4dot <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">. See my previous series for a tutorial on using it. This time I already cleaned both of them for you <img src="/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">. If you cracked one of them, the other oneâ€™s pretty futile but maybe you want to test it out more than one time <img src="/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:">.</p>
<p>At this point I highly recommend you to spot the license-checking on your own. You wonâ€™t need much experience to know how it can be circumventedâ€¦ Come back when youâ€™ve got a plan how youâ€™d change the source to bypass it!</p>
<hr>
<h2>Description Of My Patch</h2>
<p>Have you found a way on your own? Okay, I trust you <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">. The patch in this case is pretty easy. First we have to spot the place where the license checking is done. I use <code>Binder_Load()</code> but you could also patch the checking in other parts of the code. Maybe you want to do that as homework?</p>
<pre><code class="lang-auto">        private void Binder_Load(object sender, System.EventArgs e)
        {
            try
            {
                this.class1_0.method_0();
                string text = System.IO.File.ReadAllText(System.Windows.Forms.Application.StartupPath + "\\License\\binder.license");

                if (text.Length &gt; 0)
                {
                    string[] array = this.class1_0.method_1(text);
                    this.kryptonLabel2.Text = string.Concat(new string[]
                    {
                        array[0],
                        " - ",
                        array[1],
                        " - ",
                        array[2]
                    });

                    this.bool_0 = true;
                }
            }
            catch
            {
                KryptonMessageBox.Show("Invalid license file!", "License Error", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Exclamation);
            }
        }
</code></pre>
<p>I think thereâ€™s not much to explain. The first function <code>class1_0.method_0()</code> uses some anti-debugger stuff. Not interesting for us but maybe you want to have a look at it? In our case it never triggers so we can just ignore it. After that it tries to read a license file. Of course we havenâ€™t such a file so the catch-block is triggered which tells us that our version is unlicensed. If everything would run fine a boolean at the end would be set to true. Mmhâ€¦ Could that be something like <code>bIsLicensed = true</code>? I shorten it here a bit up with telling you that itâ€™s the boolean which is used for identifying whether the program is licensed or not.</p>
<p>What to do now? Again there are different ways of solving the problem. You could just comment everything except the boolean out, set the boolean already in the beginning of the method to true, etcâ€¦ I decided to use the second method because itâ€™s more interesting than just commenting some stuff out <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">.</p>
<p>How will the function look like when weâ€™re finished? Because we just copy the line in front of the other code itâ€™ll look like this:</p>
<pre><code class="lang-auto">        private void Binder_Load(object sender, System.EventArgs e)
        {
            try
            {
                this.bool_0 = true;  // Here we add our little one-line patch

                this.class1_0.method_0();
                string text = System.IO.File.ReadAllText(System.Windows.Forms.Application.StartupPath + "\\License\\binder.license");

                if (text.Length &gt; 0)
                {
                    string[] array = this.class1_0.method_1(text);
                    this.kryptonLabel2.Text = string.Concat(new string[]
                    {
                        array[0],
                        " - ",
                        array[1],
                        " - ",
                        array[2]
                    });

                    this.bool_0 = true;
                }
            }
            catch
            {
                KryptonMessageBox.Show("Invalid license file!", "License Error", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Exclamation);
            }
        }
</code></pre>
<p>I hope you understood our devious plan <img src="/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:">.</p>
<hr>
<h2>Using Reflexil</h2>
<p>Now that weâ€™ve got an aim to achieve, we can start with patching the MSIL code. Start ILSpy, open the Binder/Crypter (Both work the same) and go to the <code>Binder(or crypter)_load()</code> method. Then click on View at the top bar and select Reflexil. If everything worked fine, you should see a new window at the bottom.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/3/35fa4535cac06720d476a2bf7ef5ad3493d0f829.PNG" width="415" height="212"></p>
<p>Reflexil is very intuitive so I think you wonâ€™t have any problems with it. Just select the method weâ€™re going to patch on the left navigation bar and itâ€™ll automatically show us the MSIL code.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/c/cf65ad222d54d745fbed3745c5db6938f68c87a6.PNG" width="316" height="189"></p>
<p>Now scroll through the code and search for something interesting. Reflexil already commented on some of the lines, so that you donâ€™t even have to read the OpCodes <img src="/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:">. In my case Iâ€™ve saw on line 53 how the bool is activated.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/1/1b46c65e92be460292aa3e06eef7bcc18e26d729.PNG" width="685" height="263"></p>
<p>To patch the program just copy these 3 lines to the beginning of the method:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/5/5d4fdcacf1e52064dc91d5e60bd3a9108d4057a4.PNG" width="658" height="267"></p>
<p>If you want to save the patched crypter/binder now, just rightclick on it in the left navigation bar and chose Save As.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/5/52e500185f3da95d86d753edddb424e012357d4d.PNG" width="367" height="435"></p>
<p>Finished!</p>
<hr>
<h2>Conclusion</h2>
<p>When you want to make a fast inline patch, MSIL is essential. I highly recommend you to have a look at it and Reflexil when you got hooked <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">.</p>
<p>|-TheDoctor-|</p>
          <p><a href="https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209/1</link>
        <pubDate>Mon, 17 Oct 2016 11:28:12 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1209-1</guid>
        <source url="https://0x00sec.org/t/c-reversing-msil-patching-part-1/1209.rss">C# Reversing - MSIL Patching [Part 1]</source>
      </item>
  </channel>
</rss>
