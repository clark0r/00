<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>STM32F103C8T6 E Scooter firmware reverse engineering</title>
    <link>https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201</link>
    <description>Hello folks,

I am new here, come from Germany and want to take some experince in reverse engineering code for hobby purpose. I have a Ninebot G30D E Scooter, and I want to find out how this thing work indisde. There are some people who found that already out, but they say nothing about their knowledge, so I think I have to get into this stuff and find it out by myself. 

Now I want to ask if you can help me a little bit with doing that. What I actually about the controller µC of the scooter know is:

STM32F103C8T6 inside (Every chinese BLDC Controller uses them, that seems to be a unwritten rule among chinese BLDC controller companies)

ARM Cortex M3 with little endian and 64kb of flash (They have in real 128kb, but ST says 64kb) 

Now is the first question: IDA asks me about the Memory organisation of the µC, so could someone here tell me how to set up IDA correctly so I will not already fail by decompiling itself? I tried by myself, but did always get error that the memory configuration is wrong.
I have the memory map, but didnt get really smart out of it.

Hope you can halp me, I think we are now in a time I will not come around learning coding and reversing/editing code anymore because everything has code inside nowdays.</description>
    
    <lastBuildDate>Sat, 19 Dec 2020 04:31:20 +0000</lastBuildDate>
    <category>Reverse Engineering</category>
    <atom:link href="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>STM32F103C8T6 E Scooter firmware reverse engineering</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/9</link>
        <pubDate>Tue, 13 Apr 2021 05:08:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24201-9</guid>
        <source url="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201.rss">STM32F103C8T6 E Scooter firmware reverse engineering</source>
      </item>
      <item>
        <title>STM32F103C8T6 E Scooter firmware reverse engineering</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Bastler" data-post="7" data-topic="24201">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/letter_avatar_proxy/v4/letter/b/f07891/40.png" class="avatar"> Bastler:</div>
<blockquote>
<p>how to read the output from IDA and/or the HEX Rays decompiler?</p>
</blockquote>
</aside>
<p>Well , take a short crash course on ARM assembly , stuff like this can’t be learnt in one day so give it some time , once you learn a few new things go back to IDA disassembly and look if stuff makes more sense , im no expert in reverse engineering but my  first step in these cases would be to look for useful strings in the program and how they are being used .</p>
          <p><a href="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/8</link>
        <pubDate>Sat, 19 Dec 2020 04:31:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24201-8</guid>
        <source url="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201.rss">STM32F103C8T6 E Scooter firmware reverse engineering</source>
      </item>
      <item>
        <title>STM32F103C8T6 E Scooter firmware reverse engineering</title>
        <dc:creator><![CDATA[Bastler]]></dc:creator>
        <description><![CDATA[
            <p>Hello folks,</p>
<p>Does someone here have further hints how to read the output from IDA and/or the HEX Rays decompiler?</p>
<p>And another question: Do you think there would be enough people interested to start a community to reverse the scooter firmware to the point everyone can change it like a open source firmware?</p>
<p>Its really sad that the big companies dont provide source code, I think closed source isnt contemporary anymore. But until the companies start thinking the same way, it will be nothing left for us than reverse things we want to edit <img src="https://0x00sec.org/images/emoji/twitter/sob.png?v=9" title=":sob:" class="emoji" alt=":sob:"></p>
          <p><a href="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/7</link>
        <pubDate>Fri, 18 Dec 2020 23:33:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24201-7</guid>
        <source url="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201.rss">STM32F103C8T6 E Scooter firmware reverse engineering</source>
      </item>
      <item>
        <title>STM32F103C8T6 E Scooter firmware reverse engineering</title>
        <dc:creator><![CDATA[Bastler]]></dc:creator>
        <description><![CDATA[
            <p>You take that too easy, its battery communicates with the motor, the motor is a BLDC, it communicats over UART with the dashboard, and over bluetooth with a app, and I want to make a open source firmware / Share my knowledge with the community, so everyone can flash the modified software on his scooter with the original hardware in it. (G30 is widely spread) there are people who call themselves <a href="http://Scooterhacking.org" rel="noopener nofollow ugc">Scooterhacking.org</a>, they have reversed the firmware already. But they dont share their knowledge, and thats the point I dont like on them. So I want to find out too, what they found out, and make it accessible for everyone. Heres a photo of a G30 Scooter from Ninebot: <a href="https://www.ebike-tuningparts.com/Segway-Ninebot-MAX-G30D?curr=EUR&amp;gclid=CjwKCAiA_eb-BRB2EiwAGBnXXvvzj8vW4y_MOrnLa-nwXAHunuGF9LMRT2xpxlFsl8S83amWHCESvxoCqDUQAvD_BwE" rel="noopener nofollow ugc">https://www.ebike-tuningparts.com/Segway-Ninebot-MAX-G30D?curr=EUR&amp;gclid=CjwKCAiA_eb-BRB2EiwAGBnXXvvzj8vW4y_MOrnLa-nwXAHunuGF9LMRT2xpxlFsl8S83amWHCESvxoCqDUQAvD_BwE</a></p>
          <p><a href="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/5</link>
        <pubDate>Wed, 16 Dec 2020 21:21:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24201-5</guid>
        <source url="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201.rss">STM32F103C8T6 E Scooter firmware reverse engineering</source>
      </item>
      <item>
        <title>STM32F103C8T6 E Scooter firmware reverse engineering</title>
        <dc:creator><![CDATA[clockw0rk]]></dc:creator>
        <description><![CDATA[
            <p>Whew, I was offline since almost a year because my computer somehow broke apart lolz.<br>
I believe an E-Scooter µC does not have THAT many build in commands, did you consider ripping it apart and applying a good old Arduino into it? I know these things are expensive af, but what does it do except controlling a PWM signal between battery and motor?</p>
          <p><a href="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/4</link>
        <pubDate>Wed, 16 Dec 2020 20:56:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24201-4</guid>
        <source url="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201.rss">STM32F103C8T6 E Scooter firmware reverse engineering</source>
      </item>
      <item>
        <title>STM32F103C8T6 E Scooter firmware reverse engineering</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            <p>I appreciate your persistence  , here’s something that hopefully will help you<br>
</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://azeria-labs.com/favicon.ico" class="site-icon" width="32" height="32">
      <a href="https://azeria-labs.com/writing-arm-assembly-part-1/" target="_blank" rel="noopener nofollow ugc">Azeria-Labs</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/309;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/b/9/b9de97fd4cfe1b73bc1ba1505bffc689cfea8b73_2_690x309.png" class="thumbnail" width="690" height="309" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/b/9/b9de97fd4cfe1b73bc1ba1505bffc689cfea8b73_2_690x309.png, https://0x00sec.s3.amazonaws.com/optimized/3X/b/9/b9de97fd4cfe1b73bc1ba1505bffc689cfea8b73_2_1035x463.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/b/9/b9de97fd4cfe1b73bc1ba1505bffc689cfea8b73_2_1380x618.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/b/9/b9de97fd4cfe1b73bc1ba1505bffc689cfea8b73_2_10x10.png"></div>

<h3><a href="https://azeria-labs.com/writing-arm-assembly-part-1/" target="_blank" rel="noopener nofollow ugc">Writing ARM Assembly (Part 1)</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/3</link>
        <pubDate>Tue, 15 Dec 2020 14:23:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24201-3</guid>
        <source url="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201.rss">STM32F103C8T6 E Scooter firmware reverse engineering</source>
      </item>
      <item>
        <title>STM32F103C8T6 E Scooter firmware reverse engineering</title>
        <dc:creator><![CDATA[Bastler]]></dc:creator>
        <description><![CDATA[
            <p>Ok, memory map problem solved, hex code succesfully decompiled. Can anyone give me a little bit help or something to read about reverse engineering (Understanding) ARM Code?</p>
          <p><a href="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/2</link>
        <pubDate>Mon, 14 Dec 2020 21:02:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24201-2</guid>
        <source url="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201.rss">STM32F103C8T6 E Scooter firmware reverse engineering</source>
      </item>
      <item>
        <title>STM32F103C8T6 E Scooter firmware reverse engineering</title>
        <dc:creator><![CDATA[Bastler]]></dc:creator>
        <description><![CDATA[
            <p>Hello folks,</p>
<p>I am new here, come from Germany and want to take some experince in reverse engineering code for hobby purpose. I have a Ninebot G30D E Scooter, and I want to find out how this thing work indisde. There are some people who found that already out, but they say nothing about their knowledge, so I think I have to get into this stuff and find it out by myself.</p>
<p>Now I want to ask if you can help me a little bit with doing that. What I actually about the controller µC of the scooter know is:</p>
<p>STM32F103C8T6 inside (Every chinese BLDC Controller uses them, that seems to be a unwritten rule among chinese BLDC controller companies)</p>
<p>ARM Cortex M3 with little endian and 64kb of flash (They have in real 128kb, but ST says 64kb)</p>
<p>Now is the first question: IDA asks me about the Memory organisation of the µC, so could someone here tell me how to set up IDA correctly so I will not already fail by decompiling itself? I tried by myself, but did always get error that the memory configuration is wrong.<br>
I have the memory map, but didnt get really smart out of it.</p>
<p>Hope you can halp me, I think we are now in a time I will not come around learning coding and reversing/editing code anymore because everything has code inside nowdays.</p>
          <p><a href="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201/1</link>
        <pubDate>Sat, 12 Dec 2020 13:08:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-24201-1</guid>
        <source url="https://0x00sec.org/t/stm32f103c8t6-e-scooter-firmware-reverse-engineering/24201.rss">STM32F103C8T6 E Scooter firmware reverse engineering</source>
      </item>
  </channel>
</rss>
