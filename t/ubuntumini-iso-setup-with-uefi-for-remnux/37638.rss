<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>UbuntuMini.iso setup with UEFI for REMnux</title>
    <link>https://0x00sec.org/t/ubuntumini-iso-setup-with-uefi-for-remnux/37638</link>
    <description>## UbuntuMini.iso Install Guide:

&lt;li&gt;By default the Ubuntu minimal .iso will only boot with a legacy BIOS. So im going to show you how you can get a UbuntuMini.iso on a UEFI system so we can install a minimal Ubuntu setup for REMnux. For this to happen we must build our own ISO using the Ubuntu minimal ISO, and a Ubuntu Server ISO.&lt;br&gt; Through my research on this, I came across a script on &lt;a target=&quot;_blank&quot; href=&quot;https://noobient.com/2019/06/25/ubuntu-18-04-uefi-network-installer/&quot;&gt;Noobient&lt;/a&gt;
&lt;br&gt;
&lt;li&gt;First lets create a temp directory for our work:&lt;br&gt;
                            &lt;code&gt;$ mkdir /tmp/remnux&lt;/code&gt;&lt;/li&gt;
                        &lt;li&gt;Next we will create a file for our script: (You can call this whatever you&#39;d like, I personally just named it customiso.sh)&lt;br&gt;
                            &lt;code&gt;$ touch customiso.sh&lt;/code&gt;&lt;/li&gt;
                        &lt;li&gt;Lets copy the script into the customiso file, then make it executable. You can use whatever text editor you would like. I will be using vim in this example.&lt;br&gt;
                            &lt;code&gt;$ vim customiso.sh&lt;/code&gt;&lt;/li&gt;
                        &lt;br&gt;
                            &lt;div class=&quot;cpy&quot; title=&quot;Copy Code to Clipboard&quot;&gt;&lt;i class=&quot;icon small&quot;&gt;&lt;/i&gt;&lt;pre&gt;&lt;code&gt;#!/bin/bash

set -eu

server_iso=&#39;ubuntu-20.04.1-legacy-server-amd64.iso&#39;
mini_iso=&#39;mini.iso&#39;
dist_dir=&#39;ubuntu-20.04-netinstall&#39;

if [ ! -e ${server_iso} ]
then
    wget &quot;https://cdimage.ubuntu.com/ubuntu-legacy-server/releases/focal/release/${server_iso}&quot;
fi

if [ ! -e ${mini_iso} ]
then
    wget &quot;http://archive.ubuntu.com/ubuntu/dists/focal/main/installer-amd64/current/legacy-images/netboot/${mini_iso}&quot;
fi

rm -rf ${dist_dir}*
7z x ${server_iso} -o${dist_dir}-tmp install/hwe-netboot/ubuntu-installer/amd64/linux
7z x ${server_iso} -o${dist_dir}-tmp install/hwe-netboot/ubuntu-installer/amd64/initrd.gz
7z x ${server_iso} -o${dist_dir} EFI
7z x ${mini_iso} -o${dist_dir}
mv ${dist_dir}-tmp/install/hwe-netboot/ubuntu-installer/amd64/linux ${dist_dir}/linux
mv ${dist_dir}-tmp/install/hwe-netboot/ubuntu-installer/amd64/initrd.gz ${dist_dir}/initrd.gz
zip -r ${dist_dir}.zip ${dist_dir}
&lt;/code&gt;&lt;/pre&gt;
                        &lt;code&gt;$ chmod +x customiso.sh&lt;/code&gt;
                        &lt;li&gt;Run the script:&lt;br&gt;
                        &lt;code&gt;$ ./customish.sh&lt;/code&gt;&lt;/li&gt;
                        &lt;li&gt;Now if you do a &lt;code&gt;ls&lt;/code&gt; you will see three new files and a two new directories. The two important files to verify are &lt;code&gt;ubuntu-20.04.1-legacy-server-amd64.iso&lt;/code&gt;, &lt;code&gt;mini.iso&lt;/code&gt;, and a the new directory called &lt;code&gt;ubuntu-20.04-netinstall&lt;/code&gt;.&lt;/li&gt;
                        &lt;li&gt;Time to verify the sha of your .iso files. to do this run the &lt;code&gt;sha256sum&lt;/code&gt; command on both files:&lt;/li&gt;
                        &lt;pre&gt;&lt;code&gt;$ sha256sum mini.iso
0e79e00bf844929d40825b1f0e8634415cda195ba23bae0b041911fde4dfe018  mini.iso
$ sha256sum ubuntu-20.04.1-legacy-server-amd64.iso 
f11bda2f2caed8f420802b59f382c25160b114ccc665dbac9c5046e7fceaced2  ubuntu-20.04.1-legacy-server-amd64.iso
&lt;/code&gt;&lt;/pre&gt;
                        &lt;li&gt;Now its time to make a custom ISO using the &lt;code&gt;mkisofs&lt;/code&gt; command. If you do not have the command. You can download &lt;code&gt;cdrtools&lt;/code&gt; through your package manager.&lt;/li&gt;
                        &lt;li&gt;What I did was run&lt;br&gt;
                        &lt;code&gt;$ mkisofs -o ubuntu-20.04-netinstall.iso \ &lt;/code&gt; &lt;br&gt; and this should give you a prompt to run the rest of the commands:&lt;/li&gt;
                        &lt;pre&gt;&lt;code&gt;&amp;gt; -b ubuntu-20.04-netinstall/isolinux.bin \
&amp;gt; -c ubuntu-20.04-netinstall/boot.cat \
&amp;gt; -no-emul-boot \
&amp;gt; -boot-load-size 4 \
&amp;gt; -boot-info-table -J -R -V \
&amp;gt; UbuntuMinimal .
&lt;/code&gt;&lt;/pre&gt;
                        &lt;li&gt;After completing the previous step, you should now see another file in your directory called &lt;code&gt;ubuntu-20.04-netinstall.iso&lt;/code&gt;.&lt;/li&gt;
                        &lt;li&gt;We now need to burn this iso onto our USB drive. Lets verify the name of our USB stick first with:&lt;/li&gt;
                        &lt;pre&gt;&lt;code&gt;$ lsblk
NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
sda      8:0    0 931.5G  0 disk 
├─sda1   8:1    0     1G  0 part /boot
├─sda2   8:2    0    30G  0 part /
└─sda3   8:3    0 900.5G  0 part /home
sdb      8:16   1  14.6G  0 disk
&lt;/code&gt;&lt;/pre&gt;
                        &lt;li&gt;Be careful to make sure you recognize the proper block device name for your USB. In the picture above my USB is listed as &lt;code&gt;sdb&lt;/code&gt;. If you are unsure what the block device name of your USB stick is called, you can run the &lt;code&gt;lsblk&lt;/code&gt; command without the USB inserted in your PC and compare the differences to see what NAME is added.&lt;/li&gt;
                        &lt;li&gt;Lets actually burn the ISO onto our USB now using the command &lt;code&gt;dd&lt;/code&gt;.&lt;/li&gt;
                        &lt;br&gt;
                        &lt;strong&gt;WARNING: YOU CAN DELETE YOUR OS IF YOU TYPE IN THE INCORRECT BLOCK DEVICE NAME&lt;/strong&gt;
                        &lt;br&gt;&lt;br&gt;
                        &lt;code&gt;$ dd bs=4M if=ubuntu-20.04-netinstall.iso of=/dev/sdb status=progress
&lt;/code&gt;
                        &lt;li&gt;Once this is completed it&#39;s now time to boot your USB stick. I am going to assume you are installing REMnux onto another device. So lets plug in the USB stick into a USB port on the device you&#39;d like to install Ubuntu on.&lt;/li&gt;
                        &lt;br&gt;&lt;b&gt;DISCLAIMER: I am going to assume that you have the knowledge about setting your boot order, and GRUB, so a few steps here will be skipped.&lt;/b&gt;
                        &lt;li&gt;
                            When I personally plugged in my USB I was getting an error that my PC could not find a bootable device when my USB stick was set to #1 in my boot order. I seen that this was not an issue with other people trying to boot a minimal Ubuntu iso with UEFI. If you are having the same issue as me, and already have grub installed, go back into your BIOS and set GRUB as #1 in your boot order.
                        &lt;/li&gt;
                        &lt;li&gt;
                            Once you see Grub pop up, depending on what is on your screen you will need to do a few steps differently
                        &lt;/li&gt;
                        &lt;li&gt;
                            Personally I previously had Arch installed on this device so I type in &lt;code&gt;c&lt;/code&gt; to get to the grub terminal. If this is the case. We will need to type in a few commands to get the Ubuntu Installer to run. First lets list our devices.
                        &lt;/li&gt;
                        &lt;code&gt;grub&amp;gt; ls&lt;/code&gt;&lt;br&gt;
                        &lt;li&gt;Depending on your previous setup and partitions this could look a bit differnt. In my case my output of &lt;code&gt;ls&lt;/code&gt; looked like this:&lt;/li&gt;
                        &lt;code&gt;(hd0) (hd1) (hd1,gpt3) (hd1,gpt2) (hd1,gpt1) (hd2)&lt;/code&gt;&lt;br&gt;
                        &lt;li&gt;If you are not positive on which device is your USB, once again you can unplug your usb device. Load up the grub terminal and perform a &lt;code&gt;ls&lt;/code&gt; and see what device is missing. Pay close attention to the devices listed with &lt;code&gt;,gptX&lt;/code&gt; in them as they can give you a hint. For example if I remove my USB and perform a &lt;code&gt;ls&lt;/code&gt; my output would look like this:&lt;/li&gt;
                        &lt;code&gt;(hd0) (hd0,gpt3) (hd0,gpt2) (hd0,gpt1) (hd1)&lt;/code&gt;&lt;br&gt;
                        &lt;li&gt;As you can see the &lt;code&gt;hdX&lt;/code&gt; number changes based on the order its listed and not the actual device itself. I can see that when my USB stick in inserted it is listed as &lt;code&gt;(hd0)&lt;/code&gt; since the &lt;code&gt;hdX,gptX)&lt;/code&gt; devices change numbers, and the trailing (hdX) also changes numbers. So now lets boot into our Ubuntu install:&lt;/li&gt;&lt;pre&gt;&lt;code&gt;grub&amp;gt; set root=(hd0)
grub&amp;gt; linux /ubuntu-20.04-netinstall/linux
grub&amp;gt; initrd /ubuntu-20.04-netinstall/initrd.gz
grub&amp;gt; boot&lt;/code&gt;&lt;/pre&gt;
                        &lt;li&gt;This will bring up the Ubuntu Installer. To finish the remnux install I will direct you to the &lt;a target=&quot;_blank&quot; href=&quot;http://Remnux.org&quot;&gt;Remnux.org&lt;/a&gt; website as they already have a detailed writeup on the correct steps to take.&lt;br&gt;
                            &lt;a target=&quot;_blank&quot; href=&quot;https://docs.remnux.org/install-distro/install-from-scratch&quot;&gt;Remnux Docs&lt;/a&gt;&lt;/li&gt;</description>
    
    <lastBuildDate>Sun, 29 Oct 2023 22:38:25 +0000</lastBuildDate>
    <category>Linux</category>
    <atom:link href="https://0x00sec.org/t/ubuntumini-iso-setup-with-uefi-for-remnux/37638.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>UbuntuMini.iso setup with UEFI for REMnux</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/ubuntumini-iso-setup-with-uefi-for-remnux/37638/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/ubuntumini-iso-setup-with-uefi-for-remnux/37638/2</link>
        <pubDate>Wed, 28 Feb 2024 14:38:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-37638-2</guid>
        <source url="https://0x00sec.org/t/ubuntumini-iso-setup-with-uefi-for-remnux/37638.rss">UbuntuMini.iso setup with UEFI for REMnux</source>
      </item>
      <item>
        <title>UbuntuMini.iso setup with UEFI for REMnux</title>
        <dc:creator><![CDATA[bootlegwifi]]></dc:creator>
        <description><![CDATA[
            <h2><a name="ubuntuminiiso-install-guide-1" class="anchor" href="https://0x00sec.org#ubuntuminiiso-install-guide-1"></a>UbuntuMini.iso Install Guide:</h2>
<li>By default the Ubuntu minimal .iso will only boot with a legacy BIOS. So im going to show you how you can get a UbuntuMini.iso on a UEFI system so we can install a minimal Ubuntu setup for REMnux. For this to happen we must build our own ISO using the Ubuntu minimal ISO, and a Ubuntu Server ISO.<br> Through my research on this, I came across a script on <a target="_blank" href="https://noobient.com/2019/06/25/ubuntu-18-04-uefi-network-installer/" rel="noopener nofollow ugc">Noobient</a>
<br>
</li><li>First lets create a temp directory for our work:<br>
                            <code>$ mkdir /tmp/remnux</code></li>
                        <li>Next we will create a file for our script: (You can call this whatever you'd like, I personally just named it customiso.sh)<br>
                            <code>$ touch customiso.sh</code></li>
                        <li>Lets copy the script into the customiso file, then make it executable. You can use whatever text editor you would like. I will be using vim in this example.<br>
                            <code>$ vim customiso.sh</code></li>
                        <br>
                            <div><i></i><pre><code>#!/bin/bash
<p>set -eu</p>
<p>server_iso=‘ubuntu-20.04.1-legacy-server-amd64.iso’<br>
mini_iso=‘mini.iso’<br>
dist_dir=‘ubuntu-20.04-netinstall’</p>
<p>if [ ! -e ${server_iso} ]<br>
then<br>
wget “<a href="https://cdimage.ubuntu.com/ubuntu-legacy-server/releases/focal/release/$%7Bserver_iso%7D" rel="noopener nofollow ugc">https://cdimage.ubuntu.com/ubuntu-legacy-server/releases/focal/release/${server_iso}</a>”<br>
fi</p>
<p>if [ ! -e ${mini_iso} ]<br>
then<br>
wget “<a href="http://archive.ubuntu.com/ubuntu/dists/focal/main/installer-amd64/current/legacy-images/netboot/$%7Bmini_iso%7D" rel="noopener nofollow ugc">http://archive.ubuntu.com/ubuntu/dists/focal/main/installer-amd64/current/legacy-images/netboot/${mini_iso}</a>”<br>
fi</p>
</code><p><code>rm -rf ${dist_dir}*<br>
7z x ${server_iso} -o${dist_dir}-tmp install/hwe-netboot/ubuntu-installer/amd64/linux<br>
7z x ${server_iso} -o${dist_dir}-tmp install/hwe-netboot/ubuntu-installer/amd64/initrd.gz<br>
7z x ${server_iso} -o${dist_dir} EFI<br>
7z x ${mini_iso} -o${dist_dir}<br>
mv ${dist_dir}-tmp/install/hwe-netboot/ubuntu-installer/amd64/linux ${dist_dir}/linux<br>
mv ${dist_dir}-tmp/install/hwe-netboot/ubuntu-installer/amd64/initrd.gz ${dist_dir}/initrd.gz<br>
zip -r ${dist_dir}.zip ${dist_dir}<br>
</code></p></pre><br>
<code>$ chmod +x customiso.sh</code><br>
<li>Run the script:<br><br>
<code>$ ./customish.sh</code></li><br>
<li>Now if you do a <code>ls</code> you will see three new files and a two new directories. The two important files to verify are <code>ubuntu-20.04.1-legacy-server-amd64.iso</code>, <code>mini.iso</code>, and a the new directory called <code>ubuntu-20.04-netinstall</code>.</li><br>
<li>Time to verify the sha of your .iso files. to do this run the <code>sha256sum</code> command on both files:</li><br>
<pre><code>$ sha256sum mini.iso<br>
0e79e00bf844929d40825b1f0e8634415cda195ba23bae0b041911fde4dfe018  mini.iso<br>
$ sha256sum ubuntu-20.04.1-legacy-server-amd64.iso<br>
f11bda2f2caed8f420802b59f382c25160b114ccc665dbac9c5046e7fceaced2  ubuntu-20.04.1-legacy-server-amd64.iso<br>
</code></pre><br>
<li>Now its time to make a custom ISO using the <code>mkisofs</code> command. If you do not have the command. You can download <code>cdrtools</code> through your package manager.</li><br>
<li>What I did was run<br><br>
<code>$ mkisofs -o ubuntu-20.04-netinstall.iso \ </code> <br> and this should give you a prompt to run the rest of the commands:</li><br>
<pre><code>&gt; -b ubuntu-20.04-netinstall/isolinux.bin <br>
&gt; -c ubuntu-20.04-netinstall/boot.cat <br>
&gt; -no-emul-boot <br>
&gt; -boot-load-size 4 <br>
&gt; -boot-info-table -J -R -V <br>
&gt; UbuntuMinimal .<br>
</code></pre><br>
<li>After completing the previous step, you should now see another file in your directory called <code>ubuntu-20.04-netinstall.iso</code>.</li><br>
<li>We now need to burn this iso onto our USB drive. Lets verify the name of our USB stick first with:</li><br>
<pre><code>$ lsblk<br>
NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS<br>
sda      8:0    0 931.5G  0 disk<br>
├─sda1   8:1    0     1G  0 part /boot<br>
├─sda2   8:2    0    30G  0 part /<br>
└─sda3   8:3    0 900.5G  0 part /home<br>
sdb      8:16   1  14.6G  0 disk<br>
</code></pre><br>
<li>Be careful to make sure you recognize the proper block device name for your USB. In the picture above my USB is listed as <code>sdb</code>. If you are unsure what the block device name of your USB stick is called, you can run the <code>lsblk</code> command without the USB inserted in your PC and compare the differences to see what NAME is added.</li><br>
<li>Lets actually burn the ISO onto our USB now using the command <code>dd</code>.</li><br>
<br><br>
<strong>WARNING: YOU CAN DELETE YOUR OS IF YOU TYPE IN THE INCORRECT BLOCK DEVICE NAME</strong><br>
<br><br><br>
<code>$ dd bs=4M if=ubuntu-20.04-netinstall.iso of=/dev/sdb status=progress<br>
</code><br>
<li>Once this is completed it’s now time to boot your USB stick. I am going to assume you are installing REMnux onto another device. So lets plug in the USB stick into a USB port on the device you’d like to install Ubuntu on.</li><br>
<br><b>DISCLAIMER: I am going to assume that you have the knowledge about setting your boot order, and GRUB, so a few steps here will be skipped.</b><br>
<li><br>
When I personally plugged in my USB I was getting an error that my PC could not find a bootable device when my USB stick was set to <span class="hashtag-raw">#1</span> in my boot order. I seen that this was not an issue with other people trying to boot a minimal Ubuntu iso with UEFI. If you are having the same issue as me, and already have grub installed, go back into your BIOS and set GRUB as <span class="hashtag-raw">#1</span> in your boot order.<br>
</li><br>
<li><br>
Once you see Grub pop up, depending on what is on your screen you will need to do a few steps differently<br>
</li><br>
<li><br>
Personally I previously had Arch installed on this device so I type in <code>c</code> to get to the grub terminal. If this is the case. We will need to type in a few commands to get the Ubuntu Installer to run. First lets list our devices.<br>
</li><br>
<code>grub&gt; ls</code><br><br>
<li>Depending on your previous setup and partitions this could look a bit differnt. In my case my output of <code>ls</code> looked like this:</li><br>
<code>(hd0) (hd1) (hd1,gpt3) (hd1,gpt2) (hd1,gpt1) (hd2)</code><br><br>
<li>If you are not positive on which device is your USB, once again you can unplug your usb device. Load up the grub terminal and perform a <code>ls</code> and see what device is missing. Pay close attention to the devices listed with <code>,gptX</code> in them as they can give you a hint. For example if I remove my USB and perform a <code>ls</code> my output would look like this:</li><br>
<code>(hd0) (hd0,gpt3) (hd0,gpt2) (hd0,gpt1) (hd1)</code><br><br>
<li>As you can see the <code>hdX</code> number changes based on the order its listed and not the actual device itself. I can see that when my USB stick in inserted it is listed as <code>(hd0)</code> since the <code>hdX,gptX)</code> devices change numbers, and the trailing (hdX) also changes numbers. So now lets boot into our Ubuntu install:</li><pre><code>grub&gt; set root=(hd0)<br>
grub&gt; linux /ubuntu-20.04-netinstall/linux<br>
grub&gt; initrd /ubuntu-20.04-netinstall/initrd.gz<br>
grub&gt; boot</code></pre><br>
<li>This will bring up the Ubuntu Installer. To finish the remnux install I will direct you to the <a target="_blank" href="http://Remnux.org" rel="noopener nofollow ugc">Remnux.org</a> website as they already have a detailed writeup on the correct steps to take.<br><br>
<a target="_blank" href="https://docs.remnux.org/install-distro/install-from-scratch" rel="noopener nofollow ugc">Remnux Docs</a></li><p></p></div>
          <p><a href="https://0x00sec.org/t/ubuntumini-iso-setup-with-uefi-for-remnux/37638/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/ubuntumini-iso-setup-with-uefi-for-remnux/37638/1</link>
        <pubDate>Sun, 29 Oct 2023 22:38:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-37638-1</guid>
        <source url="https://0x00sec.org/t/ubuntumini-iso-setup-with-uefi-for-remnux/37638.rss">UbuntuMini.iso setup with UEFI for REMnux</source>
      </item>
  </channel>
</rss>
