<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Caesar Cipher in C [Encryption &amp; Decryption]</title>
    <link>https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522</link>
    <description>**What is Caesar Cipher ?**

It is one of the simplest encryption technique in which each character in plain text is replaced by a character some fixed number of positions down to it.

For example, if key is 3 then we have to replace character by another character that is 3 position down to it. Like A will be replaced by D, C will be replaced by F and so on.

For decryption just follow the reverse of encryption process.
![image|300x132](upload://B5cV5UOSbckQrxb4B6LL0Gt2Uy.png) 

**Program for Caesar Cipher in C**

**Encryption**

    #include&lt;stdio.h&gt;
 
    int main()
    {
	char message[100], ch;
	int i, key;
	
	printf(&quot;Enter a message to encrypt: &quot;);
	gets(message);
	printf(&quot;Enter key: &quot;);
	scanf(&quot;%d&quot;, &amp;key);
	
	for(i = 0; message[i] != &#39;\0&#39;; ++i){
		ch = message[i];
		
		if(ch &gt;= &#39;a&#39; &amp;&amp; ch &lt;= &#39;z&#39;){
			ch = ch + key;
			
			if(ch &gt; &#39;z&#39;){
				ch = ch - &#39;z&#39; + &#39;a&#39; - 1;
			}
			
			message[i] = ch;
		}
		else if(ch &gt;= &#39;A&#39; &amp;&amp; ch &lt;= &#39;Z&#39;){
			ch = ch + key;
			
			if(ch &gt; &#39;Z&#39;){
				ch = ch - &#39;Z&#39; + &#39;A&#39; - 1;
			}
			
			message[i] = ch;
		}
	}
	
	printf(&quot;Encrypted message: %s&quot;, message);
	
	return 0;
    }


**Decryption**

    #include&lt;stdio.h&gt;
 
    int main()
    {
	char message[100], ch;
	int i, key;
	
	printf(&quot;Enter a message to decrypt: &quot;);
	gets(message);
	printf(&quot;Enter key: &quot;);
	scanf(&quot;%d&quot;, &amp;key);
	
	for(i = 0; message[i] != &#39;\0&#39;; ++i){
		ch = message[i];
		
		if(ch &gt;= &#39;a&#39; &amp;&amp; ch &lt;= &#39;z&#39;){
			ch = ch - key;
			
			if(ch &lt; &#39;a&#39;){
				ch = ch + &#39;z&#39; - &#39;a&#39; + 1;
			}
			
			message[i] = ch;
		}
		else if(ch &gt;= &#39;A&#39; &amp;&amp; ch &lt;= &#39;Z&#39;){
			ch = ch - key;
			
			if(ch &lt; &#39;A&#39;){
				ch = ch + &#39;Z&#39; - &#39;A&#39; + 1;
			}
			
			message[i] = ch;
		}
	}
	
	printf(&quot;Decrypted message: %s&quot;, message);
	
	return 0;
    }</description>
    
    <lastBuildDate>Mon, 28 Dec 2020 04:47:18 +0000</lastBuildDate>
    <category>Cryptology</category>
    <atom:link href="https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Caesar Cipher in C [Encryption &amp; Decryption]</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522/4</link>
        <pubDate>Fri, 12 Feb 2021 05:02:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23522-4</guid>
        <source url="https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522.rss">Caesar Cipher in C [Encryption &amp; Decryption]</source>
      </item>
      <item>
        <title>Caesar Cipher in C [Encryption &amp; Decryption]</title>
        <dc:creator><![CDATA[Alekhine]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/landi58">@landi58</a>  Here’s an implementation in C you can study. <a href="https://github.com/kokke/tiny-AES-c" rel="noopener nofollow ugc">Tiny-AES</a></p>
          <p><a href="https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522/3</link>
        <pubDate>Mon, 28 Dec 2020 04:47:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23522-3</guid>
        <source url="https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522.rss">Caesar Cipher in C [Encryption &amp; Decryption]</source>
      </item>
      <item>
        <title>Caesar Cipher in C [Encryption &amp; Decryption]</title>
        <dc:creator><![CDATA[landi58]]></dc:creator>
        <description><![CDATA[
            <p>Great post … easy to understand code. Please write AES 256 bit encryption/decryption in C/C++ if possible.</p>
          <p><a href="https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522/2</link>
        <pubDate>Fri, 23 Oct 2020 17:54:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23522-2</guid>
        <source url="https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522.rss">Caesar Cipher in C [Encryption &amp; Decryption]</source>
      </item>
      <item>
        <title>Caesar Cipher in C [Encryption &amp; Decryption]</title>
        <dc:creator><![CDATA[p0lyx4]]></dc:creator>
        <description><![CDATA[
            <p><strong>What is Caesar Cipher ?</strong></p>
<p>It is one of the simplest encryption technique in which each character in plain text is replaced by a character some fixed number of positions down to it.</p>
<p>For example, if key is 3 then we have to replace character by another character that is 3 position down to it. Like A will be replaced by D, C will be replaced by F and so on.</p>
<p>For decryption just follow the reverse of encryption process.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/3X/0/4/043125d171c63d6224912ccd001e02cd29936cb2.png" alt="image" data-base62-sha1="B5cV5UOSbckQrxb4B6LL0Gt2Uy" width="300" height="132"></p>
<p><strong>Program for Caesar Cipher in C</strong></p>
<p><strong>Encryption</strong></p>
<pre><code>#include&lt;stdio.h&gt;

int main()
{
char message[100], ch;
int i, key;

printf("Enter a message to encrypt: ");
gets(message);
printf("Enter key: ");
scanf("%d", &amp;key);

for(i = 0; message[i] != '\0'; ++i){
	ch = message[i];
	
	if(ch &gt;= 'a' &amp;&amp; ch &lt;= 'z'){
		ch = ch + key;
		
		if(ch &gt; 'z'){
			ch = ch - 'z' + 'a' - 1;
		}
		
		message[i] = ch;
	}
	else if(ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z'){
		ch = ch + key;
		
		if(ch &gt; 'Z'){
			ch = ch - 'Z' + 'A' - 1;
		}
		
		message[i] = ch;
	}
}

printf("Encrypted message: %s", message);

return 0;
}
</code></pre>
<p><strong>Decryption</strong></p>
<pre><code>#include&lt;stdio.h&gt;

int main()
{
char message[100], ch;
int i, key;

printf("Enter a message to decrypt: ");
gets(message);
printf("Enter key: ");
scanf("%d", &amp;key);

for(i = 0; message[i] != '\0'; ++i){
	ch = message[i];
	
	if(ch &gt;= 'a' &amp;&amp; ch &lt;= 'z'){
		ch = ch - key;
		
		if(ch &lt; 'a'){
			ch = ch + 'z' - 'a' + 1;
		}
		
		message[i] = ch;
	}
	else if(ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z'){
		ch = ch - key;
		
		if(ch &lt; 'A'){
			ch = ch + 'Z' - 'A' + 1;
		}
		
		message[i] = ch;
	}
}

printf("Decrypted message: %s", message);

return 0;
}</code></pre>
          <p><a href="https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522/1</link>
        <pubDate>Tue, 13 Oct 2020 13:02:12 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23522-1</guid>
        <source url="https://0x00sec.org/t/caesar-cipher-in-c-encryption-decryption/23522.rss">Caesar Cipher in C [Encryption &amp; Decryption]</source>
      </item>
  </channel>
</rss>
