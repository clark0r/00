<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to strengthen the code cave infection of aarch64 elf shared libraries?</title>
    <link>https://0x00sec.org/t/how-to-strengthen-the-code-cave-infection-of-aarch64-elf-shared-libraries/28314</link>
    <description>I am coding a packer for my aarch64 elf shared library.
I embedded a loader for decrypting the text section in a code cave within the PT_LOAD segments.
The rela.dyn entry is modified such that it points to the address of the loader; it this way,
the loader will be triggered once the shared library is called.

The cons of this mechanism are:
1. The attribute of the PT_LOAD segment is RWE. This raise suspicion since a normal PT_LOAD is not writable.
2. The address of the loader is written in the entry of the rela.dyn. One can trace the address back to the assembly of the loader and eventually hack my decrypting algorithm. They are plenty of techniques to fool the flow-orientated disassembler for x86. However, the addresses of aarch64 are aligned, I hardly find any relevant techniques.

Are there any ways to strengthen the cons ?

Reference
1. https://github.com/0x00pf/0x00sec_code.git (elfun/elf_infect.c, code cave infection)
2. https://github.com/0xN3utr0n/Noteme.git  ( triggering  loader with rela.dyn )</description>
    
    <lastBuildDate>Thu, 10 Feb 2022 00:54:40 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/how-to-strengthen-the-code-cave-infection-of-aarch64-elf-shared-libraries/28314.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to strengthen the code cave infection of aarch64 elf shared libraries?</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/how-to-strengthen-the-code-cave-infection-of-aarch64-elf-shared-libraries/28314/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-strengthen-the-code-cave-infection-of-aarch64-elf-shared-libraries/28314/2</link>
        <pubDate>Sat, 11 Jun 2022 07:21:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-28314-2</guid>
        <source url="https://0x00sec.org/t/how-to-strengthen-the-code-cave-infection-of-aarch64-elf-shared-libraries/28314.rss">How to strengthen the code cave infection of aarch64 elf shared libraries?</source>
      </item>
      <item>
        <title>How to strengthen the code cave infection of aarch64 elf shared libraries?</title>
        <dc:creator><![CDATA[gohack]]></dc:creator>
        <description><![CDATA[
            <p>I am coding a packer for my aarch64 elf shared library.<br>
I embedded a loader for decrypting the text section in a code cave within the PT_LOAD segments.<br>
The rela.dyn entry is modified such that it points to the address of the loader; it this way,<br>
the loader will be triggered once the shared library is called.</p>
<p>The cons of this mechanism are:</p>
<ol>
<li>The attribute of the PT_LOAD segment is RWE. This raise suspicion since a normal PT_LOAD is not writable.</li>
<li>The address of the loader is written in the entry of the rela.dyn. One can trace the address back to the assembly of the loader and eventually hack my decrypting algorithm. They are plenty of techniques to fool the flow-orientated disassembler for x86. However, the addresses of aarch64 are aligned, I hardly find any relevant techniques.</li>
</ol>
<p>Are there any ways to strengthen the cons ?</p>
<p>Reference</p>
<ol>
<li>
<a href="https://github.com/0x00pf/0x00sec_code.git" rel="noopener nofollow ugc">https://github.com/0x00pf/0x00sec_code.git</a> (elfun/elf_infect.c, code cave infection)</li>
<li>
<a href="https://github.com/0xN3utr0n/Noteme.git" rel="noopener nofollow ugc">https://github.com/0xN3utr0n/Noteme.git</a>  ( triggering  loader with rela.dyn )</li>
</ol>
          <p><a href="https://0x00sec.org/t/how-to-strengthen-the-code-cave-infection-of-aarch64-elf-shared-libraries/28314/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-strengthen-the-code-cave-infection-of-aarch64-elf-shared-libraries/28314/1</link>
        <pubDate>Wed, 09 Feb 2022 15:21:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-28314-1</guid>
        <source url="https://0x00sec.org/t/how-to-strengthen-the-code-cave-infection-of-aarch64-elf-shared-libraries/28314.rss">How to strengthen the code cave infection of aarch64 elf shared libraries?</source>
      </item>
  </channel>
</rss>
