<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Sorting (Part 6.0): Quick Sort [Sorta Efficient]</title>
    <link>https://0x00sec.org/t/sorting-part-6-0-quick-sort-sorta-efficient/202</link>
    <description>Hello 0x00sec!

Welcome to my sixth iteration of my sorting series. Today, we&#39;ll be discussing a personal favorite: Quicksort, or Quick Sort.

## Quick Sort: The Algorithm Under the Hood
[Quick Sort](https://en.wikipedia.org/wiki/Quicksort) is what&#39;s called a &quot;divide and conquer&quot; sorting algorithm. It takes a particular approach: pick an element `p` from the array-to-sort `arr`, any element, and call that the pivot point. Put all the elements in `arr` that are less than `p` on the left side of `p`, so in `arr[0]` to `arr[k-1]`, where `k` is the final position in the sorted array of `p`. Put all the elements greater than `p` on the right of `p`, or in the spots `arr[k+1]` to `arr[n-1]`, where `n` is the size of the array.

![quicksort diagram](upload://8xwkARIRVXqMaVswkvtkdxDRVNT.jpeg)

There are a few ways to accomplish this -- some are more efficient than others. Today, I&#39;ll be showing you the easiest way to do it, where we make new arrays for the &quot;left&quot; and &quot;right&quot; parts, and then join them at the end, rather than doing what&#39;s called [in-place quicksort](http://www.mathcs.emory.edu/~cheung/Courses/171/Syllabus/7-Sort/quick-sort2.html).

## Time Complexity
Mathematically, the worst-case time complexity of Quick Sort is `O(n^2)`, when the array-to-sort is in the worst possible order: reversed.

**BUT**, Quick Sort often behaves logarithmic-ally, rather than quadratic-ally, meaning it commonly has the time complexity `O(n * log(base 2) of n)`.

So, it is _sometimes_ faster than the previously-covered bubble, insertion, and selection sorts... Don&#39;t get too excited, but insertion sort is coming back for a little cameo in a coming post...

![time complexity visual pun](upload://mXvwGkJlV3dnH14jhfRfxp1X2Ah.jpeg)

----

## Ruby Implementation
```ruby
#! /usr/bin/env ruby
 
# str is array of chars
# pivot point is index in array to pivot on
# returns type like `str`
def quicksort(str, pivot_point)
    strlen = str.length
 
    # recursion terminating condition:
    return str if strlen &lt;= 1
 
    # find the pivot character
    pivot_char = str[pivot_point]
   
    # make new arrays for left and right of pivot
    # note: I&#39;m very much aware that this is not the most efficient method,
    # but it WILL make it easier to understand the concept of quicksort before
    # I proceed to cover the in-place version
    left = []
    right = []
 
    # go through all the elements, put the ones smaller than pivot_char on the left;
    # ...bigger on the right.
    for i in 0...strlen # exclusive range: 0 to one less than str&#39;s length
        next if i == pivot_point # skip over the pivot, we don&#39;t want to put it anywhere
        # because it&#39;ll already be in final position at the end of the function.
 
        if str[i] &lt; pivot_char
            left &lt;&lt; str[i]
        else
            right &lt;&lt; str[i]
        end
    end
```
Okay, so our `quicksort(...)` function starts on line 6. The first thing you see is our declaration of `strlen`. On line 10, we check if `str`, our array-to-sort, is empty or only has one element. An array with one or fewer elements is always sorted, so we just return the original array.

On line 13, we hold the value of our pivot in `pivot_char` by accessing the value stored at index `pivot_point` in `str`. This `pivot_point` is chosen by the caller of `quicksort(...)`. ***Note:*** _often, you&#39;ll see implementations use different methods to pick out the pivot points, opting for the first or last element, or some other element entirely._

We then declare `left = []` and `right = []` to hold the values less than the pivot and greater than the pivot, respectively.

In the `for` loop on line 24 we go through `str` and put each element in either the `left` or `right` arrays, but never both, excluding the pivot, because we don&#39;t need to re-sort the pivot; it will be in its final position.

```ruby
    # utilize recursion to sort the left and right arrays, until the partitions become
    # a singular-element array or an empty one.
    left = quicksort(left, rand(left.length))
    right = quicksort(right, rand(right.length))
 
    # overwrite the original str and drop the new stuff in, in order
    str = []
    str &lt;&lt; left &lt;&lt; pivot_char &lt;&lt; right
 
    return str.flatten # flatten because we pushed an array, a character/one-letter-string, and another array
    # FYI: flatten makes a 2+D array 1D.
 
end
 
puts &quot;give me a string&quot;
str = gets.chomp.split(&#39;&#39;)
 
puts quicksort(str, rand(str.length)).join(&#39;&#39;)
```
But we&#39;re not done yet. We now take the newly filled (or not filled) `left` and `right` and call `quicksort(...)` on them, too. ***Note:*** _this calling of a function from within itself is known as [recursion](https://en.wikipedia.org/wiki/Recursion). Make sure you have a terminator (ours is line 10) so that your function doesn&#39;t keep calling itself forever._

After the `left` and `right` arrays are quickly sorted -- pun intended -- we can stitch them together, the pivot in between, to build the completed, sorted `str`. We do this by erasing `str` and then copying `left`, `pivot_char`, and `right` into the just-emptied `str`.

We flatten `str` before returning it because pushing left/right to `str` creates a 2D array, something we do not desire.

## C++ Version
```c++
void quicksort(vector&lt;char&gt;&amp; vec, const int pivot_point) {
    if (vec.size() &lt;= 1) return;
 
    char pivot_char = vec[pivot_point];
 
    vector&lt;char&gt; left, right;
 
    for (int i = 0, n = vec.size(); i &lt; n; i++) {
        if (i == pivot_point) continue;
 
        if (vec[i] &lt; pivot_char) {
            left.push_back(vec[i]);
        } else {
            right.push_back(vec[i]);
        }
    }
 
    if (!left.empty()) quicksort(left, rand() % left.size());
    if (!right.empty()) quicksort(right, rand() % right.size());
 
    vec = left;
    vec.push_back(pivot_char);
    vec.insert(vec.end(), right.begin(), right.end());
}
```
As usual, I chose to use `vec` in place of `str`. Other than that, there is only one major contrast from the Ruby version: Before calling `quicksort(...)`, I check if the array-to-sort is empty. This is because of how C++ does random numbers. If I pick a random pivot in for an empty array, passing a random pivot would look like `rand() % 0`, because the size of an empty array is 0, yet you cannot do a modulo of 0, because you cannot divide by 0.

Conclusion
If you noticed in the title, this article is _Part 6.0_ that &quot;.0&quot; is there because I am implying the coming of a _6.1_ and maybe even _6.2_.

Why? Because this method of quicksorting is resource-inefficient. I only showed you it because it&#39;s the easiest form of quicksort to understand and implement.

So, stay tuned for _Sorting (Part 6.1): Quick Sort [In-Place]_.

Happy Hacking,
oaktree</description>
    
    <lastBuildDate>Fri, 06 May 2016 00:40:03 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/sorting-part-6-0-quick-sort-sorta-efficient/202.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Sorting (Part 6.0): Quick Sort [Sorta Efficient]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/sorting-part-6-0-quick-sort-sorta-efficient/202/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-6-0-quick-sort-sorta-efficient/202/3</link>
        <pubDate>Sun, 21 Jan 2018 00:37:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-202-3</guid>
        <source url="https://0x00sec.org/t/sorting-part-6-0-quick-sort-sorta-efficient/202.rss">Sorting (Part 6.0): Quick Sort [Sorta Efficient]</source>
      </item>
      <item>
        <title>Sorting (Part 6.0): Quick Sort [Sorta Efficient]</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Nicely written code, or in other words “beautiful code”.</p>
          <p><a href="https://0x00sec.org/t/sorting-part-6-0-quick-sort-sorta-efficient/202/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-6-0-quick-sort-sorta-efficient/202/2</link>
        <pubDate>Fri, 06 May 2016 00:40:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-202-2</guid>
        <source url="https://0x00sec.org/t/sorting-part-6-0-quick-sort-sorta-efficient/202.rss">Sorting (Part 6.0): Quick Sort [Sorta Efficient]</source>
      </item>
      <item>
        <title>Sorting (Part 6.0): Quick Sort [Sorta Efficient]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Hello 0x00sec!</p>
<p>Welcome to my sixth iteration of my sorting series. Today, we’ll be discussing a personal favorite: Quicksort, or Quick Sort.</p>
<h2>Quick Sort: The Algorithm Under the Hood</h2>
<p><a href="https://en.wikipedia.org/wiki/Quicksort" rel="noopener nofollow ugc">Quick Sort</a> is what’s called a “divide and conquer” sorting algorithm. It takes a particular approach: pick an element <code>p</code> from the array-to-sort <code>arr</code>, any element, and call that the pivot point. Put all the elements in <code>arr</code> that are less than <code>p</code> on the left side of <code>p</code>, so in <code>arr[0]</code> to <code>arr[k-1]</code>, where <code>k</code> is the final position in the sorted array of <code>p</code>. Put all the elements greater than <code>p</code> on the right of <code>p</code>, or in the spots <code>arr[k+1]</code> to <code>arr[n-1]</code>, where <code>n</code> is the size of the array.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3bdb723d364f1ac3d19c3f7dfdcfe3f20b8953e1.jpeg" alt="quicksort diagram" data-base62-sha1="8xwkARIRVXqMaVswkvtkdxDRVNT" width="" height=""></p>
<p>There are a few ways to accomplish this – some are more efficient than others. Today, I’ll be showing you the easiest way to do it, where we make new arrays for the “left” and “right” parts, and then join them at the end, rather than doing what’s called <a href="http://www.mathcs.emory.edu/~cheung/Courses/171/Syllabus/7-Sort/quick-sort2.html" rel="noopener nofollow ugc">in-place quicksort</a>.</p>
<h2>Time Complexity</h2>
<p>Mathematically, the worst-case time complexity of Quick Sort is <code>O(n^2)</code>, when the array-to-sort is in the worst possible order: reversed.</p>
<p><strong>BUT</strong>, Quick Sort often behaves logarithmic-ally, rather than quadratic-ally, meaning it commonly has the time complexity <code>O(n * log(base 2) of n)</code>.</p>
<p>So, it is <em>sometimes</em> faster than the previously-covered bubble, insertion, and selection sorts… Don’t get too excited, but insertion sort is coming back for a little cameo in a coming post…</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a0e9e6cf5d3c80c23a0879f7b2784cb7b86562a9.jpeg" alt="time complexity visual pun" data-base62-sha1="mXvwGkJlV3dnH14jhfRfxp1X2Ah" width="" height=""></p>
<hr>
<h2>Ruby Implementation</h2>
<pre><code class="lang-ruby">#! /usr/bin/env ruby
 
# str is array of chars
# pivot point is index in array to pivot on
# returns type like `str`
def quicksort(str, pivot_point)
    strlen = str.length
 
    # recursion terminating condition:
    return str if strlen &lt;= 1
 
    # find the pivot character
    pivot_char = str[pivot_point]
   
    # make new arrays for left and right of pivot
    # note: I'm very much aware that this is not the most efficient method,
    # but it WILL make it easier to understand the concept of quicksort before
    # I proceed to cover the in-place version
    left = []
    right = []
 
    # go through all the elements, put the ones smaller than pivot_char on the left;
    # ...bigger on the right.
    for i in 0...strlen # exclusive range: 0 to one less than str's length
        next if i == pivot_point # skip over the pivot, we don't want to put it anywhere
        # because it'll already be in final position at the end of the function.
 
        if str[i] &lt; pivot_char
            left &lt;&lt; str[i]
        else
            right &lt;&lt; str[i]
        end
    end
</code></pre>
<p>Okay, so our <code>quicksort(...)</code> function starts on line 6. The first thing you see is our declaration of <code>strlen</code>. On line 10, we check if <code>str</code>, our array-to-sort, is empty or only has one element. An array with one or fewer elements is always sorted, so we just return the original array.</p>
<p>On line 13, we hold the value of our pivot in <code>pivot_char</code> by accessing the value stored at index <code>pivot_point</code> in <code>str</code>. This <code>pivot_point</code> is chosen by the caller of <code>quicksort(...)</code>. <em><strong>Note:</strong></em> <em>often, you’ll see implementations use different methods to pick out the pivot points, opting for the first or last element, or some other element entirely.</em></p>
<p>We then declare <code>left = []</code> and <code>right = []</code> to hold the values less than the pivot and greater than the pivot, respectively.</p>
<p>In the <code>for</code> loop on line 24 we go through <code>str</code> and put each element in either the <code>left</code> or <code>right</code> arrays, but never both, excluding the pivot, because we don’t need to re-sort the pivot; it will be in its final position.</p>
<pre><code class="lang-ruby">    # utilize recursion to sort the left and right arrays, until the partitions become
    # a singular-element array or an empty one.
    left = quicksort(left, rand(left.length))
    right = quicksort(right, rand(right.length))
 
    # overwrite the original str and drop the new stuff in, in order
    str = []
    str &lt;&lt; left &lt;&lt; pivot_char &lt;&lt; right
 
    return str.flatten # flatten because we pushed an array, a character/one-letter-string, and another array
    # FYI: flatten makes a 2+D array 1D.
 
end
 
puts "give me a string"
str = gets.chomp.split('')
 
puts quicksort(str, rand(str.length)).join('')
</code></pre>
<p>But we’re not done yet. We now take the newly filled (or not filled) <code>left</code> and <code>right</code> and call <code>quicksort(...)</code> on them, too. <em><strong>Note:</strong></em> <em>this calling of a function from within itself is known as <a href="https://en.wikipedia.org/wiki/Recursion" rel="noopener nofollow ugc">recursion</a>. Make sure you have a terminator (ours is line 10) so that your function doesn’t keep calling itself forever.</em></p>
<p>After the <code>left</code> and <code>right</code> arrays are quickly sorted – pun intended – we can stitch them together, the pivot in between, to build the completed, sorted <code>str</code>. We do this by erasing <code>str</code> and then copying <code>left</code>, <code>pivot_char</code>, and <code>right</code> into the just-emptied <code>str</code>.</p>
<p>We flatten <code>str</code> before returning it because pushing left/right to <code>str</code> creates a 2D array, something we do not desire.</p>
<h2>C++ Version</h2>
<pre><code class="lang-auto">void quicksort(vector&lt;char&gt;&amp; vec, const int pivot_point) {
    if (vec.size() &lt;= 1) return;
 
    char pivot_char = vec[pivot_point];
 
    vector&lt;char&gt; left, right;
 
    for (int i = 0, n = vec.size(); i &lt; n; i++) {
        if (i == pivot_point) continue;
 
        if (vec[i] &lt; pivot_char) {
            left.push_back(vec[i]);
        } else {
            right.push_back(vec[i]);
        }
    }
 
    if (!left.empty()) quicksort(left, rand() % left.size());
    if (!right.empty()) quicksort(right, rand() % right.size());
 
    vec = left;
    vec.push_back(pivot_char);
    vec.insert(vec.end(), right.begin(), right.end());
}
</code></pre>
<p>As usual, I chose to use <code>vec</code> in place of <code>str</code>. Other than that, there is only one major contrast from the Ruby version: Before calling <code>quicksort(...)</code>, I check if the array-to-sort is empty. This is because of how C++ does random numbers. If I pick a random pivot in for an empty array, passing a random pivot would look like <code>rand() % 0</code>, because the size of an empty array is 0, yet you cannot do a modulo of 0, because you cannot divide by 0.</p>
<p>Conclusion<br>
If you noticed in the title, this article is <em>Part 6.0</em> that “.0” is there because I am implying the coming of a <em>6.1</em> and maybe even <em>6.2</em>.</p>
<p>Why? Because this method of quicksorting is resource-inefficient. I only showed you it because it’s the easiest form of quicksort to understand and implement.</p>
<p>So, stay tuned for <em>Sorting (Part 6.1): Quick Sort [In-Place]</em>.</p>
<p>Happy Hacking,<br>
oaktree</p>
          <p><a href="https://0x00sec.org/t/sorting-part-6-0-quick-sort-sorta-efficient/202/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-6-0-quick-sort-sorta-efficient/202/1</link>
        <pubDate>Thu, 05 May 2016 23:48:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-202-1</guid>
        <source url="https://0x00sec.org/t/sorting-part-6-0-quick-sort-sorta-efficient/202.rss">Sorting (Part 6.0): Quick Sort [Sorta Efficient]</source>
      </item>
  </channel>
</rss>
