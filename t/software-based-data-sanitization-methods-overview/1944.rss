<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Software-Based Data Sanitization Methods Overview</title>
    <link>https://0x00sec.org/t/software-based-data-sanitization-methods-overview/1944</link>
    <description>##Software-Based Data Sanitization Methods

---

Following up on my &quot;[Guide for Data Sanitization](https://0x00sec.org/t/guide-for-data-sanitization/1938)&quot; post, I&#39;ve decided to write up an article regarding the **_most common and popular_** data overwrite patterns, in other words, **_software-based sanitization methods_** (aka **_wipe methods_**).

Essentially, what all these methods do is overwrite the sensitive data on some form of electronic media, replacing it with gibberish. They all fall in the &quot;**_Clear_**&quot; type of sanitization, discussed in my previous post.

Most of these methods are freely provided by open source programs and tools such as:

* [DBAN](https://dban.org/)
* [Eraser](https://eraser.heidi.ie/)
* [BleachBit](https://www.bleachbit.org/)
* [CBL Data Shredder](http://www.cbldatarecovery.com/data-shredder/)
* [HDShredder](https://www.miray.de/download/hdshredder.html)
* [KillDisk](http://www.killdisk.com/downloadfree.htm)
* [CCleaner](https://www.piriform.com/ccleaner)
* [Blancco](https://www.blancco.com/)
* ...

And **many** more, all with different degrees of complexity and available methods. 

---
#####_DISCLAIMER_ : As expected, neither I or the bussinesses behind these programs can guarantee that all data is successfully erased or that it can&#39;t be recovered, either partially or in it&#39;s totality. Use them at your own risk.
---

On one hand, it&#39;s widely agreed upon that a _**single overwrite**_ is enough to prevent _any software-based recovery technique_. On the other hand, it&#39;s not so agreed upon that a _**single overwrite**_ is enough to prevent more _advanced hardware recovery techniques_. 

In other words, not everyone supports the idea that a software-based sanitization method prevents _**all types** of data extraction techniques_. This doubt sparked the creation of **_various overwrite patterns_**, both by independent researchers and governmental agencies organizations, **_according to their own research_**. Some examples are listed below.


## -- Secure Erase

**_Secure Erase_** is arguably the _**best and most effective**_ way to delete data on a HDD. It&#39;s not really a program, but rather **a set of commands** available on the firmware of **PATA / SATA** like HDD&#39;s. It works like this:

&gt; **Pass 1:** Writes a binary 1 or 0

Being an operation that **_occurs from the drive itself_**, there&#39;s _**no need to verifiy**_ the overwrite (the drive&#39;s own write fault detection makes sure it doesn&#39;t happen). This also makes the whole process **_considerably faster_** than other methods that involve 3rd Party software.

## -- Write Zero Method

The  **_Write Zero_** - aka the **_Single Write_** / **_zero fill_** Method, is rather simple. It&#39;s implemented the following way:

&gt; **Pass 1:** Writes a zero.

And that&#39;s it... The main problem with this method is that, _originally_, it **_doesn&#39;t verify_** if the 0 was actually written, making it less effective than other methods that actually do

There&#39;s also another factor to take into account when choosing to implement this method. For example, let&#39;s say you&#39;re a Detective and you&#39;re searching for your suspect in a big crowd. The first thing you should do is look for something that stands out, something that&#39;s not supposed to be there. 

The same applies to **_Data Forensics_**. If you know that a storage device was _**only**_ overwritten with 0&#39;s, then all you have to do you is look for something that doesn&#39;t fit the pattern. However , if you overwrite it with _**1&#39;s, 0&#39;s or random characters**_, it makes significantly harder to search for data since you don&#39;t know what you&#39;re looking for.


## -- US DoD 5220.22-M Standard

This _was_ the standard wipe method of the US Department of Defense (and other 3 letter agencies). However, it&#39;s no longer considered a viable / authorized wipe method by the regulatory authorities.

Although there are many different version of this method, this is the most common implementation:

&gt; **Pass 1:** Writes a 0 and verifies the write
&gt; **Pass 2:** Writes a 1 and verifies the write
&gt; **Pass 3:** Writes a random character and verifies the write

## -- Schneier Method

The Schneier Method follows this pattern:

&gt; **Pass 1:** Writes a 0
&gt; **Pass 2:** Writes a 1
&gt; **Pass 3:** Writes a string of random characters
&gt; **Pass 4:** Writes a string of random characters
&gt; **Pass 5:** Writes a string of random characters
&gt; **Pass 6:** Writes a string of random characters
&gt; **Pass 7:** Writes a string of random characters

## -- Gutmann Method

This method was created by **Peter Gutmann** in 1996. I believe it&#39;s the most complex method as it runs a **_total of 35 passes_**, like so:

&gt; **Pass 1 - 35:** Writes a random character

From the first and last 4 passes (1 - 4; 32 - 35) it simply writes a random character, however, between Passes 5 - 31 it uses a complex overwriting pattern.

_**This doesn&#39;t necessarily mean that the Gutmann method is the best**_ wipe method. It&#39;s important to understand that this was developed in the 90&#39;s, maybe even before, meaning that it was **_designed for past technology_**. Peter himself said that most of the passes in his method are useless to modern drives and that our best bet is just a random pattern overwrite.

Alternatively, some programs let you implement your own custom method by letting you choose how many passes to run and what to do in those passes.

---
##Conclusion

In this post we covered the most popular software sanitization methods, but believe me when I say there are many more. As you can see, there are only slight variations from method to method - some add / remove passes, others change what to do in those passes or even just add a &#39;verify write&#39; step.

I believe it all comes down to your personal preference and a good speed / security ratio, because, if you think about it, that&#39;s what originated all these different methods.

As all the methods described fall in the &quot;**_Clear_**&quot; type of sanitization, there&#39;s still a chance that target data can be recovered by **_more advanced / state of the art_** hardware-based recovery techniques, but you shouldn&#39;t worry about that unless you&#39;ve made some pretty powerful enemies...

With that said, I believe we&#39;ve reached the end of this post. As always, I hope you&#39;ve enjoyed reading it and feel free to give suggestions. Thanks.</description>
    
    <lastBuildDate>Sun, 30 Apr 2017 23:55:58 +0000</lastBuildDate>
    <category>Anonymity</category>
    <atom:link href="https://0x00sec.org/t/software-based-data-sanitization-methods-overview/1944.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Software-Based Data Sanitization Methods Overview</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/software-based-data-sanitization-methods-overview/1944/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/software-based-data-sanitization-methods-overview/1944/4</link>
        <pubDate>Sun, 21 Jan 2018 00:48:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1944-4</guid>
        <source url="https://0x00sec.org/t/software-based-data-sanitization-methods-overview/1944.rss">Software-Based Data Sanitization Methods Overview</source>
      </item>
      <item>
        <title>Software-Based Data Sanitization Methods Overview</title>
        <dc:creator><![CDATA[n3xUs]]></dc:creator>
        <description><![CDATA[
            <p>Heh, ‘disk destroyer’, but of course…</p>
          <p><a href="https://0x00sec.org/t/software-based-data-sanitization-methods-overview/1944/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/software-based-data-sanitization-methods-overview/1944/3</link>
        <pubDate>Sun, 30 Apr 2017 23:55:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1944-3</guid>
        <source url="https://0x00sec.org/t/software-based-data-sanitization-methods-overview/1944.rss">Software-Based Data Sanitization Methods Overview</source>
      </item>
      <item>
        <title>Software-Based Data Sanitization Methods Overview</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>What about:</p>
<pre><code class="lang-auto">sudo dd if=/dev/zero of=/dev/sda bs=8M
</code></pre>
<p>This works too right?</p>
          <p><a href="https://0x00sec.org/t/software-based-data-sanitization-methods-overview/1944/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/software-based-data-sanitization-methods-overview/1944/2</link>
        <pubDate>Sun, 30 Apr 2017 23:41:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1944-2</guid>
        <source url="https://0x00sec.org/t/software-based-data-sanitization-methods-overview/1944.rss">Software-Based Data Sanitization Methods Overview</source>
      </item>
      <item>
        <title>Software-Based Data Sanitization Methods Overview</title>
        <dc:creator><![CDATA[n3xUs]]></dc:creator>
        <description><![CDATA[
            <p>#<span class="hashtag">#Software-Based</span> Data Sanitization Methods</p>
<hr>
<p>Following up on my “<a href="https://0x00sec.org/t/guide-for-data-sanitization/1938">Guide for Data Sanitization</a>” post, I’ve decided to write up an article regarding the <strong><em>most common and popular</em></strong> data overwrite patterns, in other words, <strong><em>software-based sanitization methods</em></strong> (aka <strong><em>wipe methods</em></strong>).</p>
<p>Essentially, what all these methods do is overwrite the sensitive data on some form of electronic media, replacing it with gibberish. They all fall in the “<strong><em>Clear</em></strong>” type of sanitization, discussed in my previous post.</p>
<p>Most of these methods are freely provided by open source programs and tools such as:</p>
<ul>
<li><a href="https://dban.org/" rel="nofollow noopener">DBAN</a></li>
<li><a href="https://eraser.heidi.ie/" rel="nofollow noopener">Eraser</a></li>
<li><a href="https://www.bleachbit.org/" rel="nofollow noopener">BleachBit</a></li>
<li><a href="http://www.cbldatarecovery.com/data-shredder/" rel="nofollow noopener">CBL Data Shredder</a></li>
<li><a href="https://www.miray.de/download/hdshredder.html" rel="nofollow noopener">HDShredder</a></li>
<li><a href="http://www.killdisk.com/downloadfree.htm" rel="nofollow noopener">KillDisk</a></li>
<li><a href="https://www.piriform.com/ccleaner" rel="nofollow noopener">CCleaner</a></li>
<li><a href="https://www.blancco.com/" rel="nofollow noopener">Blancco</a></li>
<li>…</li>
</ul>
<p>And <strong>many</strong> more, all with different degrees of complexity and available methods.</p>
<hr>
<h2>#####<em>DISCLAIMER</em> : As expected, neither I or the bussinesses behind these programs can guarantee that all data is successfully erased or that it can’t be recovered, either partially or in it’s totality. Use them at your own risk.</h2>
<p>On one hand, it’s widely agreed upon that a <em><strong>single overwrite</strong></em> is enough to prevent <em>any software-based recovery technique</em>. On the other hand, it’s not so agreed upon that a <em><strong>single overwrite</strong></em> is enough to prevent more <em>advanced hardware recovery techniques</em>.</p>
<p>In other words, not everyone supports the idea that a software-based sanitization method prevents <em><strong>all types</strong> of data extraction techniques</em>. This doubt sparked the creation of <strong><em>various overwrite patterns</em></strong>, both by independent researchers and governmental agencies organizations, <strong><em>according to their own research</em></strong>. Some examples are listed below.</p>
<h2>– Secure Erase</h2>
<p><strong><em>Secure Erase</em></strong> is arguably the <em><strong>best and most effective</strong></em> way to delete data on a HDD. It’s not really a program, but rather <strong>a set of commands</strong> available on the firmware of <strong>PATA / SATA</strong> like HDD’s. It works like this:</p>
<blockquote>
<p><strong>Pass 1:</strong> Writes a binary 1 or 0</p>
</blockquote>
<p>Being an operation that <strong><em>occurs from the drive itself</em></strong>, there’s <em><strong>no need to verifiy</strong></em> the overwrite (the drive’s own write fault detection makes sure it doesn’t happen). This also makes the whole process <strong><em>considerably faster</em></strong> than other methods that involve 3rd Party software.</p>
<h2>– Write Zero Method</h2>
<p>The  <strong><em>Write Zero</em></strong> - aka the <strong><em>Single Write</em></strong> / <strong><em>zero fill</em></strong> Method, is rather simple. It’s implemented the following way:</p>
<blockquote>
<p><strong>Pass 1:</strong> Writes a zero.</p>
</blockquote>
<p>And that’s it… The main problem with this method is that, <em>originally</em>, it <strong><em>doesn’t verify</em></strong> if the 0 was actually written, making it less effective than other methods that actually do</p>
<p>There’s also another factor to take into account when choosing to implement this method. For example, let’s say you’re a Detective and you’re searching for your suspect in a big crowd. The first thing you should do is look for something that stands out, something that’s not supposed to be there.</p>
<p>The same applies to <strong><em>Data Forensics</em></strong>. If you know that a storage device was <em><strong>only</strong></em> overwritten with 0’s, then all you have to do you is look for something that doesn’t fit the pattern. However , if you overwrite it with <em><strong>1’s, 0’s or random characters</strong></em>, it makes significantly harder to search for data since you don’t know what you’re looking for.</p>
<h2>– US DoD 5220.22-M Standard</h2>
<p>This <em>was</em> the standard wipe method of the US Department of Defense (and other 3 letter agencies). However, it’s no longer considered a viable / authorized wipe method by the regulatory authorities.</p>
<p>Although there are many different version of this method, this is the most common implementation:</p>
<blockquote>
<p><strong>Pass 1:</strong> Writes a 0 and verifies the write<br>
<strong>Pass 2:</strong> Writes a 1 and verifies the write<br>
<strong>Pass 3:</strong> Writes a random character and verifies the write</p>
</blockquote>
<h2>– Schneier Method</h2>
<p>The Schneier Method follows this pattern:</p>
<blockquote>
<p><strong>Pass 1:</strong> Writes a 0<br>
<strong>Pass 2:</strong> Writes a 1<br>
<strong>Pass 3:</strong> Writes a string of random characters<br>
<strong>Pass 4:</strong> Writes a string of random characters<br>
<strong>Pass 5:</strong> Writes a string of random characters<br>
<strong>Pass 6:</strong> Writes a string of random characters<br>
<strong>Pass 7:</strong> Writes a string of random characters</p>
</blockquote>
<h2>– Gutmann Method</h2>
<p>This method was created by <strong>Peter Gutmann</strong> in 1996. I believe it’s the most complex method as it runs a <strong><em>total of 35 passes</em></strong>, like so:</p>
<blockquote>
<p><strong>Pass 1 - 35:</strong> Writes a random character</p>
</blockquote>
<p>From the first and last 4 passes (1 - 4; 32 - 35) it simply writes a random character, however, between Passes 5 - 31 it uses a complex overwriting pattern.</p>
<p><em><strong>This doesn’t necessarily mean that the Gutmann method is the best</strong></em> wipe method. It’s important to understand that this was developed in the 90’s, maybe even before, meaning that it was <strong><em>designed for past technology</em></strong>. Peter himself said that most of the passes in his method are useless to modern drives and that our best bet is just a random pattern overwrite.</p>
<p>Alternatively, some programs let you implement your own custom method by letting you choose how many passes to run and what to do in those passes.</p>
<hr>
<p>#<span class="hashtag">#Conclusion</span></p>
<p>In this post we covered the most popular software sanitization methods, but believe me when I say there are many more. As you can see, there are only slight variations from method to method - some add / remove passes, others change what to do in those passes or even just add a ‘verify write’ step.</p>
<p>I believe it all comes down to your personal preference and a good speed / security ratio, because, if you think about it, that’s what originated all these different methods.</p>
<p>As all the methods described fall in the “<strong><em>Clear</em></strong>” type of sanitization, there’s still a chance that target data can be recovered by <strong><em>more advanced / state of the art</em></strong> hardware-based recovery techniques, but you shouldn’t worry about that unless you’ve made some pretty powerful enemies…</p>
<p>With that said, I believe we’ve reached the end of this post. As always, I hope you’ve enjoyed reading it and feel free to give suggestions. Thanks.</p>
          <p><a href="https://0x00sec.org/t/software-based-data-sanitization-methods-overview/1944/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/software-based-data-sanitization-methods-overview/1944/1</link>
        <pubDate>Sat, 29 Apr 2017 18:44:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1944-1</guid>
        <source url="https://0x00sec.org/t/software-based-data-sanitization-methods-overview/1944.rss">Software-Based Data Sanitization Methods Overview</source>
      </item>
  </channel>
</rss>
