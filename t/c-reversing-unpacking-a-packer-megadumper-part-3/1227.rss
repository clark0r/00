<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>C# Reversing - Unpacking A Packer ~ MegaDumper [Part 3]</title>
    <link>https://0x00sec.org/t/c-reversing-unpacking-a-packer-megadumper-part-3/1227</link>
    <description>Hey mates,

in the [last part](https://0x00sec.org/t/c-reversing-unpacking-a-packer-part-2/1219/3) I used MSIL to add a `File.WriteAllBytes()` call, for dumping the packed executable. This time I show you a much easier way for dumping .NET-applications called MegaDumper.

---
## MegaDumper
MegaDumper is a tool which can easily dump .NET-executables directly from memory without the need of a skilled reverser :wink:. When the application is better protected than our example last time, it could be useful to have a one-click dumper. If you&#39;re interested in how MegaDumper does the job, just decompile the application and have a look at it. You&#39;re a reverser :grin:!

---
## Usage
Download the tool [here](https://exelab.ru/f/index.php?action=vthread&amp;forum=3&amp;topic=20686); it doesn&#39;t have to get installed. Now just run the [loader](https://mega.nz/#!igRQFCjD!n-D7vEIKEhZHtUY5ZogP5HMgv98mdMaWpGKexOlclpQ) from last time and open MegaDumper:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/1/1f860d7e2212e43e671fafd6aafae91b6957492b.PNG&quot; width=&quot;384&quot; height=&quot;82&quot;&gt;

Just select the application you want to dump, open the context menu and click on .Net dump. Yes, it&#39;s that low... Finally open the newly created folder &quot;Dumps&quot; and search for the dumped executable. You&#39;ll find more than one but I&#39;m sure you&#39;re clever enough to figure out which one&#39;s the right :wink:.

---
## Conclusion
This time a **very** small introduction about .Net dumping for losers. But anybody appreciates some help when he&#39;s working on a heavy case, so I think this tool perfectly suits into our arsenal :smile:. Again I recommend you to try breaking the remaining defenses of the CrackMe on your own for learning by doing. Nothing helps better with understanding something :slight_smile:.

|-TheDoctor-|</description>
    
    <lastBuildDate>Mon, 24 Oct 2016 13:15:40 +0000</lastBuildDate>
    <category>Reverse Engineering</category>
    <atom:link href="https://0x00sec.org/t/c-reversing-unpacking-a-packer-megadumper-part-3/1227.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>C# Reversing - Unpacking A Packer ~ MegaDumper [Part 3]</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Hey mates,</p>
<p>in the <a href="https://0x00sec.org/t/c-reversing-unpacking-a-packer-part-2/1219/3">last part</a> I used MSIL to add a <code>File.WriteAllBytes()</code> call, for dumping the packed executable. This time I show you a much easier way for dumping .NET-applications called MegaDumper.</p>
<hr>
<h2>MegaDumper</h2>
<p>MegaDumper is a tool which can easily dump .NET-executables directly from memory without the need of a skilled reverser <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">. When the application is better protected than our example last time, it could be useful to have a one-click dumper. If you’re interested in how MegaDumper does the job, just decompile the application and have a look at it. You’re a reverser <img src="/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:">!</p>
<hr>
<h2>Usage</h2>
<p>Download the tool <a href="https://exelab.ru/f/index.php?action=vthread&amp;forum=3&amp;topic=20686" rel="noopener nofollow ugc">here</a>; it doesn’t have to get installed. Now just run the <a href="https://mega.nz/#!igRQFCjD!n-D7vEIKEhZHtUY5ZogP5HMgv98mdMaWpGKexOlclpQ" rel="noopener nofollow ugc">loader</a> from last time and open MegaDumper:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/1/1f860d7e2212e43e671fafd6aafae91b6957492b.PNG" width="384" height="82"></p>
<p>Just select the application you want to dump, open the context menu and click on .Net dump. Yes, it’s that low… Finally open the newly created folder “Dumps” and search for the dumped executable. You’ll find more than one but I’m sure you’re clever enough to figure out which one’s the right <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">.</p>
<hr>
<h2>Conclusion</h2>
<p>This time a <strong>very</strong> small introduction about .Net dumping for losers. But anybody appreciates some help when he’s working on a heavy case, so I think this tool perfectly suits into our arsenal <img src="/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:">. Again I recommend you to try breaking the remaining defenses of the CrackMe on your own for learning by doing. Nothing helps better with understanding something <img src="/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">.</p>
<p>|-TheDoctor-|</p>
          <p><a href="https://0x00sec.org/t/c-reversing-unpacking-a-packer-megadumper-part-3/1227/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-reversing-unpacking-a-packer-megadumper-part-3/1227/1</link>
        <pubDate>Mon, 24 Oct 2016 13:15:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1227-1</guid>
        <source url="https://0x00sec.org/t/c-reversing-unpacking-a-packer-megadumper-part-3/1227.rss">C# Reversing - Unpacking A Packer ~ MegaDumper [Part 3]</source>
      </item>
  </channel>
</rss>
