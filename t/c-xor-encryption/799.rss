<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C++] XOR Encryption</title>
    <link>https://0x00sec.org/t/c-xor-encryption/799</link>
    <description>## Heading
Hello 0x00&#39;ers. I thought it would be cool to make a post specific to XOR encryption.

At the moment my main focus is getting the basics of python down but, that doesn&#39;t mean I don&#39;t have the time for a little fun with c++ :stuck_out_tongue: I&#39;m not the most knowledgeable person so I apologize if I make a mistake or leave something out.

So xor(Exclusive Or) is a logic gate that says _&quot;The output can only be True if one input is True and one input False.&quot;_

**Examples** 
1  0 = 1
True True = false
0   0 = 0
False True = True

Now the cool thing is, this can be used for encryption. You simply input a string and xor it by a single char(using a for loop) or by a string of the same size as the one being encrypted. 

**Example**
[&#39;A&#39;, &#39;R&#39;, &#39;P&#39;, &#39;A&#39;, &#39;n&#39;, &#39;e&#39;, &#39;t&#39;, &#39;\0&#39;]

we have a string of ASCII characters(&#39;ARPAnet&#39;) that we then convert to binary

**01000001 01010010 01010000 01000001 01101110 01100101 01110100**

now lets xor that string by another 7 character string such as racecar
using the logic we talked about above
[&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;e&#39;, &#39;c&#39;, &#39;a&#39;, &#39;r&#39;, &#39;\0&#39;]

**01110010 01100001 01100011 01100101 01100011 01100001 01110010**

ARPAnet
**01000001 01010010 01010000 01000001 01101110 01100101 01110100**
racecar                                     xor
**01110010 01100001 01100011 01100101 01100011 01100001 01110010**
_______________________________________________________________________
and we get

**00110011 00110011 00110011 00100100 00001101 00000100 00000110**

which can then be translated back into it&#39;s ASCII text form to get **&quot;333$&quot;**.

Notice how there are not 7 characters like there were in ARPAnet and racecar. This is because some bytes do not &quot;translate&quot; into ASCII characters after they got xor&#39;d. This makes decryption hard if you just have the encrypted string instead of the actual encrypted bytes.

To decrypt you would xor the flipped bits using the same key.

encrypted binary
**00110011 00110011 00110011 00100100 00001101 00000100 00000110**
racecar                                     xor
**01110010 01100001 01100011 01100101 01100011 01100001 01110010**
_______________________________________________________________________
and you would get your old message back

**01000001 01010010 01010000 01000001 01101110 01100101 01110100**

I made a little script to automate this. Unfortunately it doesn&#39;t like spaces so you will need to use another character such as a dash or underscore.

the script will be linked **_[here](http://pastebin.com/Q8AyLZuk)_**

Have fun and stay frosty :night_with_stars:</description>
    
    <lastBuildDate>Sun, 02 Jul 2017 09:35:54 +0000</lastBuildDate>
    <category>Cryptology</category>
    <atom:link href="https://0x00sec.org/t/c-xor-encryption/799.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C++] XOR Encryption</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/c-xor-encryption/799/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-xor-encryption/799/15</link>
        <pubDate>Sun, 21 Jan 2018 00:41:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-799-15</guid>
        <source url="https://0x00sec.org/t/c-xor-encryption/799.rss">[C++] XOR Encryption</source>
      </item>
      <item>
        <title>[C++] XOR Encryption</title>
        <dc:creator><![CDATA[ZillyZlash]]></dc:creator>
        <description><![CDATA[
            <p>Nicely written! Thanks for sharing</p>
          <p><a href="https://0x00sec.org/t/c-xor-encryption/799/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-xor-encryption/799/14</link>
        <pubDate>Sun, 02 Jul 2017 09:35:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-799-14</guid>
        <source url="https://0x00sec.org/t/c-xor-encryption/799.rss">[C++] XOR Encryption</source>
      </item>
      <item>
        <title>[C++] XOR Encryption</title>
        <dc:creator><![CDATA[n3k00n3]]></dc:creator>
        <description><![CDATA[
            <p>I made an asm version.</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/n3k00n3/crypto/blob/master/ASSEMBLY/XOR.asm" target="_blank" rel="nofollow noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/n3k00n3/crypto/blob/master/ASSEMBLY/XOR.asm" target="_blank" rel="nofollow noopener">n3k00n3/crypto/blob/master/ASSEMBLY/XOR.asm</a></h4>
<pre><code class="lang-asm">;----------------------------------------
;   
; :: XOR ENCRYPT ::
; usage: ./xor &lt;message&gt; &lt;key&gt;
;
;---------------------------------------


[BITS 64]

section .data
    usageMessage: db  'usage: ./xor &lt;message&gt; &lt;key&gt;', 0x0a, 0x00
    lenMessage: equ $-usageMessage

section .text
    global main
    global xor

    main:
    push rbp
</code></pre>

  This file has been truncated. <a href="https://github.com/n3k00n3/crypto/blob/master/ASSEMBLY/XOR.asm" target="_blank" rel="nofollow noopener">show original</a>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/c-xor-encryption/799/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-xor-encryption/799/13</link>
        <pubDate>Tue, 27 Jun 2017 13:56:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-799-13</guid>
        <source url="https://0x00sec.org/t/c-xor-encryption/799.rss">[C++] XOR Encryption</source>
      </item>
      <item>
        <title>[C++] XOR Encryption</title>
        <dc:creator><![CDATA[Awn]]></dc:creator>
        <description><![CDATA[
            <p>Nice, I remember when I first learned about XOR. Seems like magic right?</p>
<p>This blew my mind back in the day: <a href="https://sinister.ly/Thread-How-To-Write-Nonalphanumeric-PHP-Backdoors" rel="nofollow noopener">https://sinister.ly/Thread-How-To-Write-Nonalphanumeric-PHP-Backdoors</a></p>
          <p><a href="https://0x00sec.org/t/c-xor-encryption/799/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-xor-encryption/799/12</link>
        <pubDate>Mon, 26 Jun 2017 18:15:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-799-12</guid>
        <source url="https://0x00sec.org/t/c-xor-encryption/799.rss">[C++] XOR Encryption</source>
      </item>
      <item>
        <title>[C++] XOR Encryption</title>
        <dc:creator><![CDATA[Fust3rCluck]]></dc:creator>
        <description><![CDATA[
            <p>Hi, it’s just a logic gate. It doesn’t really matter what the values are. It’s only true if one input is on and the other is off, true false, 1 0, etc.</p>
<p>Thank you,<br>
-Fust3rCluck</p>
          <p><a href="https://0x00sec.org/t/c-xor-encryption/799/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-xor-encryption/799/11</link>
        <pubDate>Sat, 30 Jul 2016 20:20:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-799-11</guid>
        <source url="https://0x00sec.org/t/c-xor-encryption/799.rss">[C++] XOR Encryption</source>
      </item>
      <item>
        <title>[C++] XOR Encryption</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>I think one of us is missing something <img src="https://0x00sec.org/images/emoji/twitter/grin.png?v=9" title=":grin:" class="emoji" alt=":grin:"> In the first example, in my opinion the text doesn’t match the boolean values:</p>
<blockquote>
<p>1 0 = 1<br>
True True = false</p>
</blockquote>
<p>Here, you say the first bool is true, which I agree with. The second Boolean, 0, is  false but in the text you say it’s true. Also, the result of that operation should be true, shouldn’t it? <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Please tell me if I get something totally wrong here!<br>
Best, SmartOne</p>
          <p><a href="https://0x00sec.org/t/c-xor-encryption/799/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-xor-encryption/799/10</link>
        <pubDate>Thu, 28 Jul 2016 10:20:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-799-10</guid>
        <source url="https://0x00sec.org/t/c-xor-encryption/799.rss">[C++] XOR Encryption</source>
      </item>
      <item>
        <title>[C++] XOR Encryption</title>
        <dc:creator><![CDATA[Fust3rCluck]]></dc:creator>
        <description><![CDATA[
            <p>Thank you, and yup. I think it really helps in the long run if you know at least 2 different languages</p>
          <p><a href="https://0x00sec.org/t/c-xor-encryption/799/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-xor-encryption/799/9</link>
        <pubDate>Tue, 26 Jul 2016 15:40:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-799-9</guid>
        <source url="https://0x00sec.org/t/c-xor-encryption/799.rss">[C++] XOR Encryption</source>
      </item>
      <item>
        <title>[C++] XOR Encryption</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Ah and I recall a pretty good C/C++ tut on NB by <a class="mention" href="https://0x00sec.org/u/anon79434934">@anon79434934</a>, if you’d want to go check that out.</p>
          <p><a href="https://0x00sec.org/t/c-xor-encryption/799/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-xor-encryption/799/8</link>
        <pubDate>Mon, 25 Jul 2016 05:31:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-799-8</guid>
        <source url="https://0x00sec.org/t/c-xor-encryption/799.rss">[C++] XOR Encryption</source>
      </item>
      <item>
        <title>[C++] XOR Encryption</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Great article mate! It’s nice that you decided to jump from Python to C++. Many say it’ll make many other languages easier to learn (perhaps as it’s a bit hard to learn).</p>
          <p><a href="https://0x00sec.org/t/c-xor-encryption/799/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-xor-encryption/799/7</link>
        <pubDate>Mon, 25 Jul 2016 05:31:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-799-7</guid>
        <source url="https://0x00sec.org/t/c-xor-encryption/799.rss">[C++] XOR Encryption</source>
      </item>
      <item>
        <title>[C++] XOR Encryption</title>
        <dc:creator><![CDATA[Fust3rCluck]]></dc:creator>
        <description><![CDATA[
            <p>Hi, I’t could be that but i’ts basically saying the same thing, just in a different order <img src="https://0x00sec.org/images/emoji/twitter/smile_cat.png?v=9" title=":smile_cat:" class="emoji" alt=":smile_cat:"></p>
          <p><a href="https://0x00sec.org/t/c-xor-encryption/799/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-xor-encryption/799/6</link>
        <pubDate>Sun, 24 Jul 2016 17:31:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-799-6</guid>
        <source url="https://0x00sec.org/t/c-xor-encryption/799.rss">[C++] XOR Encryption</source>
      </item>
      <item>
        <title>[C++] XOR Encryption</title>
        <dc:creator><![CDATA[Fust3rCluck]]></dc:creator>
        <description><![CDATA[
            <p>Thank you…I’m just going to write about everything that comes to mind <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> I might make a c++ basics when I learn c++. I think trying to teach something you’re learning makes you understand it better.</p>
          <p><a href="https://0x00sec.org/t/c-xor-encryption/799/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-xor-encryption/799/5</link>
        <pubDate>Sun, 24 Jul 2016 17:29:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-799-5</guid>
        <source url="https://0x00sec.org/t/c-xor-encryption/799.rss">[C++] XOR Encryption</source>
      </item>
      <item>
        <title>[C++] XOR Encryption</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>Hi there,</p>
<p>Maybe I get you wrong, but shouldn’t this</p>
<blockquote>
<p>1 0 = 1<br>
True True = false<br>
0 0 = 0<br>
False True = True</p>
</blockquote>
<p>be this?</p>
<blockquote>
<p>1 0 = 1<br>
True False = True<br>
0 0 = 0<br>
False False = False</p>
</blockquote>
<p>I think this table would fit in better here:</p>
<pre><code class="lang-auto">Input	        Output
A       B
0	0	0
0	1	1
1	0	1
1	1	0
</code></pre>
<p>Best regards, SmartOne</p>
          <p><a href="https://0x00sec.org/t/c-xor-encryption/799/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-xor-encryption/799/4</link>
        <pubDate>Sun, 24 Jul 2016 12:43:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-799-4</guid>
        <source url="https://0x00sec.org/t/c-xor-encryption/799.rss">[C++] XOR Encryption</source>
      </item>
      <item>
        <title>[C++] XOR Encryption</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <p>As stated <a class="mention" href="https://0x00sec.org/u/thedoctor">@TheDoctor</a>, XOR-encryption is a fundamental knowledge to whom pretends to be a computer security specialist ! Often use to encrypt malware, via a fixed or sliding key, … XOR is a basic component of encryption and can be found in plenty of algorithms. However, I think that it is important to note, even if it seems obvious, that XOR should not be used,for security concern, in standalone.</p>
<p>Anyway, nice article, summarizing efficiently the XOR concept.</p>
<p>Best,<br>
Nitrax</p>
          <p><a href="https://0x00sec.org/t/c-xor-encryption/799/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-xor-encryption/799/3</link>
        <pubDate>Sun, 24 Jul 2016 12:04:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-799-3</guid>
        <source url="https://0x00sec.org/t/c-xor-encryption/799.rss">[C++] XOR Encryption</source>
      </item>
      <item>
        <title>[C++] XOR Encryption</title>
        <dc:creator><![CDATA[TheDoctor]]></dc:creator>
        <description><![CDATA[
            <p>Great first article! I think XOR-encryption should be fundamental knowledge, so this post helps beginners a lot ;). I only recommend you to leave out <code>using namespace std</code> next time, because it’s bad practice <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">. See explanation <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-in-c-considered-bad-practice" rel="nofollow noopener">here</a>.<br>
Anyway, it looks like you’ll post good stuff. What are your next ideas you may write about?</p>
          <p><a href="https://0x00sec.org/t/c-xor-encryption/799/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-xor-encryption/799/2</link>
        <pubDate>Sun, 24 Jul 2016 05:41:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-799-2</guid>
        <source url="https://0x00sec.org/t/c-xor-encryption/799.rss">[C++] XOR Encryption</source>
      </item>
      <item>
        <title>[C++] XOR Encryption</title>
        <dc:creator><![CDATA[Fust3rCluck]]></dc:creator>
        <description><![CDATA[
            <h2>Heading</h2>
<p>Hello 0x00’ers. I thought it would be cool to make a post specific to XOR encryption.</p>
<p>At the moment my main focus is getting the basics of python down but, that doesn’t mean I don’t have the time for a little fun with c++ <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> I’m not the most knowledgeable person so I apologize if I make a mistake or leave something out.</p>
<p>So xor(Exclusive Or) is a logic gate that says <em>“The output can only be True if one input is True and one input False.”</em></p>
<p><strong>Examples</strong><br>
1  0 = 1<br>
True True = false<br>
0   0 = 0<br>
False True = True</p>
<p>Now the cool thing is, this can be used for encryption. You simply input a string and xor it by a single char(using a for loop) or by a string of the same size as the one being encrypted.</p>
<p><strong>Example</strong><br>
[‘A’, ‘R’, ‘P’, ‘A’, ‘n’, ‘e’, ‘t’, ‘\0’]</p>
<p>we have a string of ASCII characters(‘ARPAnet’) that we then convert to binary</p>
<p><strong>01000001 01010010 01010000 01000001 01101110 01100101 01110100</strong></p>
<p>now lets xor that string by another 7 character string such as racecar<br>
using the logic we talked about above<br>
[‘r’, ‘a’, ‘c’, ‘e’, ‘c’, ‘a’, ‘r’, ‘\0’]</p>
<p><strong>01110010 01100001 01100011 01100101 01100011 01100001 01110010</strong></p>
<p>ARPAnet<br>
<strong>01000001 01010010 01010000 01000001 01101110 01100101 01110100</strong><br>
racecar                                     xor<br>
<strong>01110010 01100001 01100011 01100101 01100011 01100001 01110010</strong></p>
<hr>
<p>and we get</p>
<p><strong>00110011 00110011 00110011 00100100 00001101 00000100 00000110</strong></p>
<p>which can then be translated back into it’s ASCII text form to get <strong>“333$”</strong>.</p>
<p>Notice how there are not 7 characters like there were in ARPAnet and racecar. This is because some bytes do not “translate” into ASCII characters after they got xor’d. This makes decryption hard if you just have the encrypted string instead of the actual encrypted bytes.</p>
<p>To decrypt you would xor the flipped bits using the same key.</p>
<p>encrypted binary<br>
<strong>00110011 00110011 00110011 00100100 00001101 00000100 00000110</strong><br>
racecar                                     xor<br>
<strong>01110010 01100001 01100011 01100101 01100011 01100001 01110010</strong></p>
<hr>
<p>and you would get your old message back</p>
<p><strong>01000001 01010010 01010000 01000001 01101110 01100101 01110100</strong></p>
<p>I made a little script to automate this. Unfortunately it doesn’t like spaces so you will need to use another character such as a dash or underscore.</p>
<p>the script will be linked <strong><em><a href="http://pastebin.com/Q8AyLZuk" rel="nofollow noopener">here</a></em></strong></p>
<p>Have fun and stay frosty <img src="https://0x00sec.org/images/emoji/twitter/night_with_stars.png?v=9" title=":night_with_stars:" class="emoji" alt=":night_with_stars:"></p>
          <p><a href="https://0x00sec.org/t/c-xor-encryption/799/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-xor-encryption/799/1</link>
        <pubDate>Sun, 24 Jul 2016 02:25:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-799-1</guid>
        <source url="https://0x00sec.org/t/c-xor-encryption/799.rss">[C++] XOR Encryption</source>
      </item>
  </channel>
</rss>
