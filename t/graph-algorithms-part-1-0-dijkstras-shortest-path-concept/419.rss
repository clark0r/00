<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</title>
    <link>https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419</link>
    <description>Hey 0x00sec! I&#39;ll be taking a pause from my Data Structures series to introduce this community to Graph Theory with Dijkstra&#39;s Algorithm. I only just barely understand this, so bare with me.

# Graph Theory (Brief)

There are two main types of graphs:

* __Directed Graphs__ are graphs whose edges go a certain way. For example, the edge from node 1 to node 2 may be different in value than the edge from node 2 to node 1.
* __Undirected Graphs__ are graphs whose edges&#39; direction does not matter: `1 -&gt; 2 == 2 -&gt; 1`.

This series (the beginning, at least) will focus on undirected graphs.

There can also be cyclical edges, which are edges that point from one node back to that node.

----
# Description of Dijkstra&#39;s

__Dijkstra&#39;s Algorithm__ was created in the 1950s by a man named [Edsger W. Dijkstra](https://en.wikipedia.org/wiki/Edsger_W._Dijkstra). Its purpose is determining the shortest path between two points, or _nodes_, in a graph of points connected by _edges_.

It has a Time Complexity of `O( num_edges + num_nodes * log(2,num_nodes) )`. You can see that the number of nodes has a more drastic effect than the number of edges.

Let&#39;s say we have some graph:

![graph](//0x00sec.s3.amazonaws.com/original/1X/fa8a66ccee7152f287d8afe31619f0b2eb339f30.png)
_Taken from [here](http://www.maxburstein.com/blog/introduction-to-graph-theory-finding-shortest-path/), a great Intro to Graph Theory that you should totally go read after finishing this._

We want to find the distance between `A` and `H`. `A` is connected to two nodes, `B` and `C`. Let&#39;s list out the distance from `A` to every other node:

* A: 0
* B: 7
* C: 8
* D: ?
* E: ?
* F: ?
* G: ?
* H: ?

But why did I put all the question marks? It&#39;s because, looking from `A`, we only directly have access to `B` and `C`. All other nodes can only be accessed by going through `B` or `C` (or a node may be totally inaccessible).

But we&#39;re trying to get to H, right? So, if we start from `A`, should we move to `B` or `C`? Well, which one is closer to `A`, meaning which edge-length is smaller? Okay, let&#39;s pick `B`. From `B`, let&#39;s update our data:

* A: 0
* B: 7
* C: 8
* D: ?
* E: ?
* F: 9
* G: ?
* H: ?

Great. From `B` we can only go directly to `F`. Thus, we&#39;ve discovered a distance from `A` to `F`. The distance from `A` to `F` is determined by the sum of the distance from `A` to `B` and `B` to `F`, 9. Now, let&#39;s move to `F` and update our information again:

* A: 0
* B: 7
* C: 8
* D: ?
* E: ?
* F: 9
* G: ?
* H: 12

Oh, would you look at that!? We&#39;re at `H` now! So we know that the distance from `A` to `H` is twelve and our path was `A -&gt; B -&gt; F -&gt; H`.

----
# Conclusion

That&#39;s it for the concept of Dijkstra&#39;s Algorithm. In _Part 1.1_, I&#39;ll walk you through the coding of Dijkstra&#39;s algorithm. We&#39;ll be using matrices (2D arrays). I should also tell you now that I&#39;m going to use C++.  Surprised? I didn&#39;t think so!

I&#39;ll tell you that it personally took me quite a lot of time to get a grasp on Graph Theory and this algorithm. [This article](http://www.maxburstein.com/blog/introduction-to-graph-theory-finding-shortest-path/) was probably the most helpful thing I found on the internet about Dijkstra&#39;s Algorithm. You should totally go read it. I will be using code I wrote myself in the next tutorial, but it is influenced at least slightly by the author of that article.

Auf Wiedersehen,
oaktree</description>
    
    <lastBuildDate>Tue, 24 May 2016 15:17:54 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/8</link>
        <pubDate>Sun, 21 Jan 2018 00:37:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-419-8</guid>
        <source url="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419.rss">Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</source>
      </item>
      <item>
        <title>Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</title>
        <dc:creator><![CDATA[random-man]]></dc:creator>
        <description><![CDATA[
            <p>Also, I think that a lot of graph theory is applied in social media algorithms as well.</p>
          <p><a href="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/7</link>
        <pubDate>Tue, 24 May 2016 15:17:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-419-7</guid>
        <source url="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419.rss">Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</source>
      </item>
      <item>
        <title>Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</title>
        <dc:creator><![CDATA[random-man]]></dc:creator>
        <description><![CDATA[
            <p>Nice bro! I love how this is introducing algorithmic concepts to people.</p>
          <p><a href="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/6</link>
        <pubDate>Tue, 24 May 2016 15:16:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-419-6</guid>
        <source url="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419.rss">Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</source>
      </item>
      <item>
        <title>Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>What the values of the edges mean is up to the implementer. If you were doing routing, you’d probably care about ping, yes.</p>
          <p><a href="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/5</link>
        <pubDate>Fri, 20 May 2016 12:35:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-419-5</guid>
        <source url="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419.rss">Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</source>
      </item>
      <item>
        <title>Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Oh nice! I’ve never heard of that!</p>
          <p><a href="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/4</link>
        <pubDate>Fri, 20 May 2016 11:28:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-419-4</guid>
        <source url="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419.rss">Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</source>
      </item>
      <item>
        <title>Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a>, there is a routing protocol known as OSPF where “SPF” stands for Shortest Path First. It’s used almost everywhere and the algorithm behind it is Dijkstra’s. Even though its networking implementation is confusing, I highly recommend looking it up so you can understand the high-level image at least. It’s quite interesting.</p>
          <p><a href="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/3</link>
        <pubDate>Fri, 20 May 2016 08:39:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-419-3</guid>
        <source url="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419.rss">Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</source>
      </item>
      <item>
        <title>Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Man. Really good stuff <a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a>! In this example, could “distance” be exchanged for “speed/ping” for networks? I can picture this being useful for calculating the best route between nodes etc. What are your thoughts?</p>
          <p><a href="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/2</link>
        <pubDate>Fri, 20 May 2016 06:07:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-419-2</guid>
        <source url="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419.rss">Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</source>
      </item>
      <item>
        <title>Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Hey 0x00sec! I’ll be taking a pause from my Data Structures series to introduce this community to Graph Theory with Dijkstra’s Algorithm. I only just barely understand this, so bare with me.</p>
<h1>Graph Theory (Brief)</h1>
<p>There are two main types of graphs:</p>
<ul>
<li>
<strong>Directed Graphs</strong> are graphs whose edges go a certain way. For example, the edge from node 1 to node 2 may be different in value than the edge from node 2 to node 1.</li>
<li>
<strong>Undirected Graphs</strong> are graphs whose edges’ direction does not matter: <code>1 -&gt; 2 == 2 -&gt; 1</code>.</li>
</ul>
<p>This series (the beginning, at least) will focus on undirected graphs.</p>
<p>There can also be cyclical edges, which are edges that point from one node back to that node.</p>
<hr>
<h1>Description of Dijkstra’s</h1>
<p><strong>Dijkstra’s Algorithm</strong> was created in the 1950s by a man named <a href="https://en.wikipedia.org/wiki/Edsger_W._Dijkstra" rel="noopener nofollow ugc">Edsger W. Dijkstra</a>. Its purpose is determining the shortest path between two points, or <em>nodes</em>, in a graph of points connected by <em>edges</em>.</p>
<p>It has a Time Complexity of <code>O( num_edges + num_nodes * log(2,num_nodes) )</code>. You can see that the number of nodes has a more drastic effect than the number of edges.</p>
<p>Let’s say we have some graph:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/fa8a66ccee7152f287d8afe31619f0b2eb339f30.png" alt="graph"><br>
<em>Taken from <a href="http://www.maxburstein.com/blog/introduction-to-graph-theory-finding-shortest-path/" rel="noopener nofollow ugc">here</a>, a great Intro to Graph Theory that you should totally go read after finishing this.</em></p>
<p>We want to find the distance between <code>A</code> and <code>H</code>. <code>A</code> is connected to two nodes, <code>B</code> and <code>C</code>. Let’s list out the distance from <code>A</code> to every other node:</p>
<ul>
<li>A: 0</li>
<li>B: 7</li>
<li>C: 8</li>
<li>D: ?</li>
<li>E: ?</li>
<li>F: ?</li>
<li>G: ?</li>
<li>H: ?</li>
</ul>
<p>But why did I put all the question marks? It’s because, looking from <code>A</code>, we only directly have access to <code>B</code> and <code>C</code>. All other nodes can only be accessed by going through <code>B</code> or <code>C</code> (or a node may be totally inaccessible).</p>
<p>But we’re trying to get to H, right? So, if we start from <code>A</code>, should we move to <code>B</code> or <code>C</code>? Well, which one is closer to <code>A</code>, meaning which edge-length is smaller? Okay, let’s pick <code>B</code>. From <code>B</code>, let’s update our data:</p>
<ul>
<li>A: 0</li>
<li>B: 7</li>
<li>C: 8</li>
<li>D: ?</li>
<li>E: ?</li>
<li>F: 9</li>
<li>G: ?</li>
<li>H: ?</li>
</ul>
<p>Great. From <code>B</code> we can only go directly to <code>F</code>. Thus, we’ve discovered a distance from <code>A</code> to <code>F</code>. The distance from <code>A</code> to <code>F</code> is determined by the sum of the distance from <code>A</code> to <code>B</code> and <code>B</code> to <code>F</code>, 9. Now, let’s move to <code>F</code> and update our information again:</p>
<ul>
<li>A: 0</li>
<li>B: 7</li>
<li>C: 8</li>
<li>D: ?</li>
<li>E: ?</li>
<li>F: 9</li>
<li>G: ?</li>
<li>H: 12</li>
</ul>
<p>Oh, would you look at that!? We’re at <code>H</code> now! So we know that the distance from <code>A</code> to <code>H</code> is twelve and our path was <code>A -&gt; B -&gt; F -&gt; H</code>.</p>
<hr>
<h1>Conclusion</h1>
<p>That’s it for the concept of Dijkstra’s Algorithm. In <em>Part 1.1</em>, I’ll walk you through the coding of Dijkstra’s algorithm. We’ll be using matrices (2D arrays). I should also tell you now that I’m going to use C++.  Surprised? I didn’t think so!</p>
<p>I’ll tell you that it personally took me quite a lot of time to get a grasp on Graph Theory and this algorithm. <a href="http://www.maxburstein.com/blog/introduction-to-graph-theory-finding-shortest-path/" rel="noopener nofollow ugc">This article</a> was probably the most helpful thing I found on the internet about Dijkstra’s Algorithm. You should totally go read it. I will be using code I wrote myself in the next tutorial, but it is influenced at least slightly by the author of that article.</p>
<p>Auf Wiedersehen,<br>
oaktree</p>
          <p><a href="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419/1</link>
        <pubDate>Thu, 19 May 2016 23:26:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-419-1</guid>
        <source url="https://0x00sec.org/t/graph-algorithms-part-1-0-dijkstras-shortest-path-concept/419.rss">Graph Algorithms (Part 1.0): Dijkstra&#39;s Shortest Path [Concept]</source>
      </item>
  </channel>
</rss>
