<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Wannabe Tutorials: Section 1 Part 3</title>
    <link>https://0x00sec.org/t/wannabe-tutorials-section-1-part-3/1215</link>
    <description># Bash

A Bash Script is a plain text file that can run commands that you would normally run in a command line. Pretty much anything that is a command or can be run in the command line can be run in a Script. In simpler terms imagine a Play. Every Play has a script that tells the actors what to do. In a sense this is what Bash Scripting is. In my last tutorial I briefly introduced Bash in this Script:

```bash
#!/bin/sh

String= &quot;Execute commands Y/N: &quot;
read $String 

if [ Y $String ]; then 

String2= &quot; Type file: &quot;
read $String2

String3=&quot;Type directory: &quot;
read $String3

echo ls $String3
echo mv $String2 $String3

echo &quot;Press enter enter to exit.&quot;

else 

echo &quot;Press enter to exit. &quot;

fi
```

In Bash you don’t have to declare the variable, as you must in other languages. For example in C, this is how you would declare a int variable:

```c
#include &lt;stdio.h&gt;
 
int main(void) {
    int a = 1, b = 2, sum;
    sum = a + b;
 
    printf(&quot;%d + %d = %d\n&quot;, a, b, sum);
 
    return 0;
}
```

In Bash, we don’t have to do this. But if we want the the input from the users we read with the read function. Read is equivalent to the scanf() function in C. The syntax for the read function is as follows:

Read (variable)

Simple yes, but for each variable that you read you must put a $ before the variable or you will get a error. So for the String variable the code would look something like this:

```bash
read $String
```

But you are not limited to the read command when working with variables. The echo command can do two things, print a string in the terminal or run a command. The echo command is the equivalent to the printf() and the system() function in the C language. The syntax looks like either:

```bash
echo “message”
```

Or

```bash
echo command (variable)
```

As with the read function, you must put a $ in front of the variable that you insert into the function.

# Loops

There are three loops in any programming language; for loop, while loop, and if-then loop. The most basic loop, if-then loop, is the loop that we will work with the most for now. The syntax for the if-then loop is as follows:

```bash
if [condition];then

(Code)

else 

(Code)
fi
```

Simple, but powerful. 

# Final words  

That&#39;s it for now. I hope I didn&#39;t make it to cringy but I was starting to get bored and wanted to blow things up. All is all, cheers.</description>
    
    <lastBuildDate>Fri, 28 Oct 2016 01:13:31 +0000</lastBuildDate>
    <category>Beginner Guides</category>
    <atom:link href="https://0x00sec.org/t/wannabe-tutorials-section-1-part-3/1215.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Wannabe Tutorials: Section 1 Part 3</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Valentine" data-post="1" data-topic="1215">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/valentine/40/1250_2.png" class="avatar"> Valentine:</div>
<blockquote>
<p>There are three loops in any programming language; for loop, while loop, and if-then loop. The most basic loop, if-then loop, is the loop that we will work with the most for now. The syntax for the if-then loop is as follows:</p>
</blockquote>
</aside>
<p>if-then is NOT a loop, it’s a conditional statement.</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-1-part-3/1215/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-1-part-3/1215/3</link>
        <pubDate>Fri, 28 Oct 2016 01:13:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1215-3</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-1-part-3/1215.rss">Wannabe Tutorials: Section 1 Part 3</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 1 Part 3</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Valentine" data-post="1" data-topic="1215">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/valentine/40/1250_2.png" class="avatar"> Valentine:</div>
<blockquote>
<p>In Bash you don’t have to declare the variable, as you must in other languages. For example in C, this is how you would declare a int variable:</p>
</blockquote>
</aside>
<p>You technically are “declaring” a variable when you set it equal to something. The variable is implicitly declared before it is initialized.</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-1-part-3/1215/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-1-part-3/1215/2</link>
        <pubDate>Fri, 21 Oct 2016 00:17:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1215-2</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-1-part-3/1215.rss">Wannabe Tutorials: Section 1 Part 3</source>
      </item>
      <item>
        <title>Wannabe Tutorials: Section 1 Part 3</title>
        <dc:creator><![CDATA[Valentine]]></dc:creator>
        <description><![CDATA[
            <h1>Bash</h1>
<p>A Bash Script is a plain text file that can run commands that you would normally run in a command line. Pretty much anything that is a command or can be run in the command line can be run in a Script. In simpler terms imagine a Play. Every Play has a script that tells the actors what to do. In a sense this is what Bash Scripting is. In my last tutorial I briefly introduced Bash in this Script:</p>
<pre><code class="lang-bash">#!/bin/sh

String= "Execute commands Y/N: "
read $String 

if [ Y $String ]; then 

String2= " Type file: "
read $String2

String3="Type directory: "
read $String3

echo ls $String3
echo mv $String2 $String3

echo "Press enter enter to exit."

else 

echo "Press enter to exit. "

fi
</code></pre>
<p>In Bash you don’t have to declare the variable, as you must in other languages. For example in C, this is how you would declare a int variable:</p>
<pre><code class="lang-auto">#include &lt;stdio.h&gt;
 
int main(void) {
    int a = 1, b = 2, sum;
    sum = a + b;
 
    printf("%d + %d = %d\n", a, b, sum);
 
    return 0;
}
</code></pre>
<p>In Bash, we don’t have to do this. But if we want the the input from the users we read with the read function. Read is equivalent to the scanf() function in C. The syntax for the read function is as follows:</p>
<p>Read (variable)</p>
<p>Simple yes, but for each variable that you read you must put a $ before the variable or you will get a error. So for the String variable the code would look something like this:</p>
<pre><code class="lang-bash">read $String
</code></pre>
<p>But you are not limited to the read command when working with variables. The echo command can do two things, print a string in the terminal or run a command. The echo command is the equivalent to the printf() and the system() function in the C language. The syntax looks like either:</p>
<pre><code class="lang-bash">echo “message”
</code></pre>
<p>Or</p>
<pre><code class="lang-bash">echo command (variable)
</code></pre>
<p>As with the read function, you must put a $ in front of the variable that you insert into the function.</p>
<h1>Loops</h1>
<p>There are three loops in any programming language; for loop, while loop, and if-then loop. The most basic loop, if-then loop, is the loop that we will work with the most for now. The syntax for the if-then loop is as follows:</p>
<pre><code class="lang-bash">if [condition];then

(Code)

else 

(Code)
fi
</code></pre>
<p>Simple, but powerful.</p>
<h1>Final words</h1>
<p>That’s it for now. I hope I didn’t make it to cringy but I was starting to get bored and wanted to blow things up. All is all, cheers.</p>
          <p><a href="https://0x00sec.org/t/wannabe-tutorials-section-1-part-3/1215/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/wannabe-tutorials-section-1-part-3/1215/1</link>
        <pubDate>Wed, 19 Oct 2016 23:03:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1215-1</guid>
        <source url="https://0x00sec.org/t/wannabe-tutorials-section-1-part-3/1215.rss">Wannabe Tutorials: Section 1 Part 3</source>
      </item>
  </channel>
</rss>
