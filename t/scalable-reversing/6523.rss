<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Scalable reversing</title>
    <link>https://0x00sec.org/t/scalable-reversing/6523</link>
    <description># Intro
Second write-up here; this is something I just happened upon today while (super) bored at work.  I&#39;m not a math/algorithm nerd by any means, but I did find this pretty fascinating.  This will walk you through what I found and how I moved forward with it.

If anyone knows of an official name for this algorithm, I&#39;d be interested in knowing what it is.  I highly doubt I discovered anything new or mind-blowing, but it was a personal discovery I felt was worth sharing.

Let&#39;s begin!
## Boredom [part 0]
I remember reading a Quora post (if I find it again, I&#39;ll add it as a link) where a person asked &quot;what does the graph of XOR look like?&quot; and only got one reply, which shot the question down as being misinterpretive of what XOR does as a function.  That answer bothered me, so today I decided to explore it on my own.
___
## Boredom [part 1]:
### The beginning
To start from the very beginning, for any newcomers unaware of how logical XOR works, here is the truth table for the function:
```makefile
P | Q | P^Q
--+---+----
0 | 0 |  0
0 | 1 |  1
1 | 0 |  1
1 | 1 |  0
```
To put it in words, given two propositional variables, P and Q, the expression P XOR Q is true for either P OR Q but not P AND Q.

That&#39;s all well and good, but what if we replace variables in the propositional expression with natural numbers?  Just convert the number to binary, and run the function:
```makefile
2 ^ 3 = ?

2 = 0b10
3 = 0b11
--------
^ = 0b01

2 ^ 3 = 1
```
### The table
So that&#39;s it; XORing two natural numbers will output a natural number.  I wanted more, though.  I thought back to my days of elementary school and how we were taught multiplication using times tables.  Let&#39;s make an &quot;XORs table&quot; with natural numbers (I stop at 15 to keep this down to using 4 bits):
```makefile
   | 0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
---+------------------------------------------------
 0 | 0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
 1 | 1  0  3  2  5  4  7  6  9  8  B  A  D  C  F  E
 2 | 2  3  0  1  6  7  4  5  A  B  8  9  E  F  C  D
 3 | 3  2  1  0  7  6  5  4  B  A  9  8  F  E  D  C
 4 | 4  5  6  7  0  1  2  3  C  D  E  F  8  9  A  B
 5 | 5  4  7  6  1  0  3  2  D  C  F  E  9  8  B  A
 6 | 6  7  4  5  2  3  0  1  E  F  C  D  A  B  8  9
 7 | 7  6  5  4  3  2  1  0  F  E  D  C  B  A  9  8
 8 | 8  9  A  B  C  D  E  F  0  1  2  3  4  5  6  7
 9 | 9  8  B  A  D  C  F  E  1  0  3  2  5  4  7  6
 A | A  B  8  9  E  F  C  D  2  3  0  1  6  7  4  5
 B | B  A  9  8  F  E  D  C  3  2  1  0  7  6  5  4
 C | C  D  E  F  8  9  A  B  4  5  6  7  0  1  2  3
 D | D  C  F  E  9  8  B  A  5  4  7  6  1  0  3  2
 E | E  F  C  D  A  B  8  9  6  7  4  5  2  3  0  1
 F | F  E  D  C  B  A  9  8  7  6  5  4  3  2  1  0
```
When I first looked at this, I was once again bored.  I kept staring at it though and realized it was symmetric.  Not only that, but this table is symmetric over the line `f(x) = x`.
___
## Boredom [part 2]:
### Patterns and permutations and bears, oh my!
In case staring at a 16x16 table of characters doesn&#39;t make the symmetry immediately obvious, let&#39;s take another look:
```makefile
   | 0  1   2  3   4  5  6  7   8  9  A  B  C  D  E  F
---+------+------+------------+------------------------
 0 | 0  1 | 2  3 | 4  5  6  7 | 8  9  A  B  C  D  E  F
 1 | 1  0 | 3  2 | 5  4  7  6 | 9  8  B  A  D  C  F  E
   +------+      |            |
 2 | 2  3   0  1 | 6  7  4  5 | A  B  8  9  E  F  C  D
 3 | 3  2   1  0 | 7  6  5  4 | B  A  9  8  F  E  D  C
   +-------------+            |
 4 | 4  5   6  7   0  1  2  3 | C  D  E  F  8  9  A  B
 5 | 5  4   7  6   1  0  3  2 | D  C  F  E  9  8  B  A
 6 | 6  7   4  5   2  3  0  1 | E  F  C  D  A  B  8  9
 7 | 7  6   5  4   3  2  1  0 | F  E  D  C  B  A  9  8
   +--------------------------+------------------------
 8 | 8  9   A  B   C  D  E  F   0  1  2  3  4  5  6  7
 9 | 9  8   B  A   D  C  F  E   1  0  3  2  5  4  7  6
 A | A  B   8  9   E  F  C  D   2  3  0  1  6  7  4  5
 B | B  A   9  8   F  E  D  C   3  2  1  0  7  6  5  4
 C | C  D   E  F   8  9  A  B   4  5  6  7  0  1  2  3
 D | D  C   F  E   9  8  B  A   5  4  7  6  1  0  3  2
 E | E  F   C  D   A  B  8  9   6  7  4  5  2  3  0  1
 F | F  E   D  C   B  A  9  8   7  6  5  4  3  2  1  0
```
Awesome!  The numbers did ... something!  What does this mean?  We start by looking at the 2x2 box in the top left corner.  Think of that box as taking the two numbers on top as input, and producing the two numbers on bottom as output.  In this case, you give it `[0,1]` and it outputs `[1,0]`.

This is where things start to get interesting.  Let&#39;s make our scope bigger and jump out to a 4x4 box.  Now the top of the box takes in two 2x2 boxes as its input, and then swaps the entire box.  We can keep growing our scope and the block-swapping will perform the same operation, albeit on a larger input, every time.  If you notice, the output of the final block-swap is an exact reverseal of the first input string.
___
## Boredom [part 3]:
### Application for string literals
&quot;Gee, @fi6uh, this is hella boring,&quot; you might say.  No!  This is where the lightbulb went off over my head.  When given a string (adhering to some constraints we&#39;ll get to in a minute), you can reverse it in a fixed number of steps.
### The catch
Since XOR is a bitwise operator, its properties permeate through the this algorithm.  One caveat to this algorithm is that the string must be of length ` 2^n` (`^` here is &quot;raised to&quot;, not XOR).  This is easy enough to get around though, just pad the rest of the string up to the next power of 2.  Let&#39;s do an example; my username is only 5 characters, so I will pad it with 3 `_`&#39;s in order to make it a power of 2:
```makefile
 input:           fi6uh___
 1st permutation: ifu6_h__
 2nd permutation: u6if___h
 3rd permutation: ___hu6if
```
### The math
So the trick here is that for any string (padded to the next power of 2 if necessary) of length `n`, where `n` is 2 raised to some `p` in the natural numbers, it can be reversed in `p` permutations.  Let&#39;s demonstrate this with a longer string, of 16 characters.  `log2(16) = 4`, so I should be able to reverse this string in 4 steps:
```makefile
 input:           abcdefghijklmnop
 1st permutation: badcfehgjilknmpo
 2nd permutation: dcbahgfelkjiponm
 3rd permutation: hgfedcbaponmlkji
 4th permutation: ponmlkjihgfedcba
```
And we did it!  Pretty cool.  But can this be applied to a different structure?  Definitely!
___
## Boredom [part 4]:
### The matrix
Ok so we&#39;ve seen how this algorithm can reverse a string linearly, but it can be applied to a two dimensional &quot;string&quot; (er, matrix) as well.  When applying this to a string, you can think of &quot;pushing&quot; the operations down.  When we add a second dimension into the mix, you do the same thing, but &quot;push&quot; the operations right as well.  Let&#39;s demonstrate with an easy one:
```makefile
                          a b
 input:                   c d

                          b a
 1st permutation (down):  d c

                          d c
 2nd permutation (right): b a
```
To explain this a bit more, when we push the operation down, we select an element and its neighbor to the right, in this case `a` and `b`, and swap them horizontally.  Then, when we push the operation right, we select an element and its neighbor immediately below it, in this case `b` and `d`, and swap them vertically.  With a 2x2 matrix, that&#39;s all it takes!
### A larger matrix
There&#39;s a trick to this applying this algorithm in two directions, however.  You have to keep track of how many permutations you have done for each direction before you can grow your scope.  Notice for a 2x2, we did 2 permutations and selected 2 elements _in the same scope_ for both permutations.  This may be a little more obvious with a larger matrix, so let&#39;s bump it up a notch:
```makefile
                           a b c d
                           e f g h
                           i j k l
 input:                    m n o p

                           b a d c
                           f e h g
                           j i l k
 1st permutation (down):   n m p o

                           f e h g
                           b a d c
                           n m p o
 2nd permutation (right):  j i l k

                           h g f e
                           d c b a
                           p o n m
 3rd permutation (down):   l k j i

                           p o n m
                           l k j i
                           h g f e
 4th permutation (right):  d c b a
```
You can see more clearly here that with 2 dimensions, you do 2 permutations for each direction before growing your scope.  After following the algorithm, the matrix will be reflected over the bottom right corner (the &quot;origin&quot;, for the sake of this writing).  For a string, which only reads left to right, you only need to do 1 permutation to grow your scope.
___
## Conclusion:
LOL you thought you were done, but in the wise words of Leo:

http://laurenandmaxlikefood.files.wordpress.com/2012/01/we-need-to-go-deeper.jpg
___
## Boredom [part n]:
### The multiverse
The title for this topic uses the word &quot;scalable&quot; for a reason!  We&#39;ve seen a 1 dimensional permutation (string), we&#39;ve seen a 2 dimensional permutation (matrix), what about 3 dimensions?  Great question!  The answer is: apply the 1 dimensional algorithm for every added dimension, then grow your scope and repeat.  This means it _should_ work for n-dimensional structures, but I don&#39;t know how to draw permutations of things in those realms.  That said, I also don&#39;t know how to easily display permutations of a cube in ASCII, so instead I will draw a picture.  Note: not an artist. 
Here goes:

https://0x0.st/s1az.jpg

As you can see, simply following the algorithm for every direction results in a cube whose verteces have been reflected over the vertex 6 (in this case).
___
## Conclusion:
Hopefully this journey through permutations, time, and space has been entertaining and not boring.  I found that this personal discovery got me through lunch and made the rest of my work day exciting.  If any of you are more familiar with these topics (or have a name for what I just described), please comment and share with the group.

As always, if you notice any errors please let me know so I can address them.

/end math
___
## Addendum:
A detail was brought to my attention that I felt should be addressed:
[quote=&quot;fi6uh&quot;]
When given a string (adhering to some constraints we&#39;ll get to in a minute), you can reverse it in a fixed number of steps.
[/quote]
If defining &quot;fixed&quot; as a constant for every input, this statement is incorrect.  This algorithm has a [logarithmic time complexity](https://en.wikipedia.org/wiki/Time_complexity#Logarithmic_time) rather than a constant one.

It was also noted that this algorithm is _similar in function_ to both the [XOR swap](https://en.wikipedia.org/wiki/XOR_swap_algorithm) algorithm and the [Feistel cipher](https://en.wikipedia.org/wiki/Feistel_cipher) (though the name of the algorithm demonstrated here is still unknown to me).  Both of which have been implemented numerous times, though I&#39;m not sure if they &quot;move&quot; into higher dimensions.</description>
    
    <lastBuildDate>Mon, 14 May 2018 20:33:43 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/scalable-reversing/6523.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Scalable reversing</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/scalable-reversing/6523/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/scalable-reversing/6523/4</link>
        <pubDate>Fri, 01 Jun 2018 02:05:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6523-4</guid>
        <source url="https://0x00sec.org/t/scalable-reversing/6523.rss">Scalable reversing</source>
      </item>
      <item>
        <title>Scalable reversing</title>
        <dc:creator><![CDATA[fxbg]]></dc:creator>
        <description><![CDATA[
            <p>I suck at math (probably grade school level here), but when I researched a tiny bit into this it seemed a bit redundant since everything has to be organzied, what about tuples? this has nothing to do with tupling?</p>
          <p><a href="https://0x00sec.org/t/scalable-reversing/6523/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/scalable-reversing/6523/3</link>
        <pubDate>Mon, 14 May 2018 20:33:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6523-3</guid>
        <source url="https://0x00sec.org/t/scalable-reversing/6523.rss">Scalable reversing</source>
      </item>
      <item>
        <title>Scalable reversing</title>
        <dc:creator><![CDATA[r3llun]]></dc:creator>
        <description><![CDATA[
            <p>Nice post to read when in a similar situation! I recommend for further math related <a href="https://math.stackexchange.com/questions/961441/xor-is-commutative-associative-and-its-own-inverse-are-there-any-other-such-f" rel="nofollow noopener">reading</a> and for further code related <a href="https://0x00sec.org/t/programming-challenge-8-beginner/4572/10">reading</a></p>
          <p><a href="https://0x00sec.org/t/scalable-reversing/6523/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/scalable-reversing/6523/2</link>
        <pubDate>Mon, 14 May 2018 19:14:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6523-2</guid>
        <source url="https://0x00sec.org/t/scalable-reversing/6523.rss">Scalable reversing</source>
      </item>
      <item>
        <title>Scalable reversing</title>
        <dc:creator><![CDATA[fi6uh]]></dc:creator>
        <description><![CDATA[
            <h1>Intro</h1>
<p>Second write-up here; this is something I just happened upon today while (super) bored at work.  I’m not a math/algorithm nerd by any means, but I did find this pretty fascinating.  This will walk you through what I found and how I moved forward with it.</p>
<p>If anyone knows of an official name for this algorithm, I’d be interested in knowing what it is.  I highly doubt I discovered anything new or mind-blowing, but it was a personal discovery I felt was worth sharing.</p>
<p>Let’s begin!</p>
<h2>Boredom [part 0]</h2>
<p>I remember reading a Quora post (if I find it again, I’ll add it as a link) where a person asked “what does the graph of XOR look like?” and only got one reply, which shot the question down as being misinterpretive of what XOR does as a function.  That answer bothered me, so today I decided to explore it on my own.</p>
<hr>
<h2>Boredom [part 1]:</h2>
<h3>The beginning</h3>
<p>To start from the very beginning, for any newcomers unaware of how logical XOR works, here is the truth table for the function:</p>
<pre><code class="lang-makefile">P | Q | P^Q
--+---+----
0 | 0 |  0
0 | 1 |  1
1 | 0 |  1
1 | 1 |  0
</code></pre>
<p>To put it in words, given two propositional variables, P and Q, the expression P XOR Q is true for either P OR Q but not P AND Q.</p>
<p>That’s all well and good, but what if we replace variables in the propositional expression with natural numbers?  Just convert the number to binary, and run the function:</p>
<pre><code class="lang-makefile">2 ^ 3 = ?

2 = 0b10
3 = 0b11
--------
^ = 0b01

2 ^ 3 = 1
</code></pre>
<h3>The table</h3>
<p>So that’s it; XORing two natural numbers will output a natural number.  I wanted more, though.  I thought back to my days of elementary school and how we were taught multiplication using times tables.  Let’s make an “XORs table” with natural numbers (I stop at 15 to keep this down to using 4 bits):</p>
<pre><code class="lang-makefile">   | 0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
---+------------------------------------------------
 0 | 0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
 1 | 1  0  3  2  5  4  7  6  9  8  B  A  D  C  F  E
 2 | 2  3  0  1  6  7  4  5  A  B  8  9  E  F  C  D
 3 | 3  2  1  0  7  6  5  4  B  A  9  8  F  E  D  C
 4 | 4  5  6  7  0  1  2  3  C  D  E  F  8  9  A  B
 5 | 5  4  7  6  1  0  3  2  D  C  F  E  9  8  B  A
 6 | 6  7  4  5  2  3  0  1  E  F  C  D  A  B  8  9
 7 | 7  6  5  4  3  2  1  0  F  E  D  C  B  A  9  8
 8 | 8  9  A  B  C  D  E  F  0  1  2  3  4  5  6  7
 9 | 9  8  B  A  D  C  F  E  1  0  3  2  5  4  7  6
 A | A  B  8  9  E  F  C  D  2  3  0  1  6  7  4  5
 B | B  A  9  8  F  E  D  C  3  2  1  0  7  6  5  4
 C | C  D  E  F  8  9  A  B  4  5  6  7  0  1  2  3
 D | D  C  F  E  9  8  B  A  5  4  7  6  1  0  3  2
 E | E  F  C  D  A  B  8  9  6  7  4  5  2  3  0  1
 F | F  E  D  C  B  A  9  8  7  6  5  4  3  2  1  0
</code></pre>
<p>When I first looked at this, I was once again bored.  I kept staring at it though and realized it was symmetric.  Not only that, but this table is symmetric over the line <code>f(x) = x</code>.</p>
<hr>
<h2>Boredom [part 2]:</h2>
<h3>Patterns and permutations and bears, oh my!</h3>
<p>In case staring at a 16x16 table of characters doesn’t make the symmetry immediately obvious, let’s take another look:</p>
<pre><code class="lang-makefile">   | 0  1   2  3   4  5  6  7   8  9  A  B  C  D  E  F
---+------+------+------------+------------------------
 0 | 0  1 | 2  3 | 4  5  6  7 | 8  9  A  B  C  D  E  F
 1 | 1  0 | 3  2 | 5  4  7  6 | 9  8  B  A  D  C  F  E
   +------+      |            |
 2 | 2  3   0  1 | 6  7  4  5 | A  B  8  9  E  F  C  D
 3 | 3  2   1  0 | 7  6  5  4 | B  A  9  8  F  E  D  C
   +-------------+            |
 4 | 4  5   6  7   0  1  2  3 | C  D  E  F  8  9  A  B
 5 | 5  4   7  6   1  0  3  2 | D  C  F  E  9  8  B  A
 6 | 6  7   4  5   2  3  0  1 | E  F  C  D  A  B  8  9
 7 | 7  6   5  4   3  2  1  0 | F  E  D  C  B  A  9  8
   +--------------------------+------------------------
 8 | 8  9   A  B   C  D  E  F   0  1  2  3  4  5  6  7
 9 | 9  8   B  A   D  C  F  E   1  0  3  2  5  4  7  6
 A | A  B   8  9   E  F  C  D   2  3  0  1  6  7  4  5
 B | B  A   9  8   F  E  D  C   3  2  1  0  7  6  5  4
 C | C  D   E  F   8  9  A  B   4  5  6  7  0  1  2  3
 D | D  C   F  E   9  8  B  A   5  4  7  6  1  0  3  2
 E | E  F   C  D   A  B  8  9   6  7  4  5  2  3  0  1
 F | F  E   D  C   B  A  9  8   7  6  5  4  3  2  1  0
</code></pre>
<p>Awesome!  The numbers did … something!  What does this mean?  We start by looking at the 2x2 box in the top left corner.  Think of that box as taking the two numbers on top as input, and producing the two numbers on bottom as output.  In this case, you give it <code>[0,1]</code> and it outputs <code>[1,0]</code>.</p>
<p>This is where things start to get interesting.  Let’s make our scope bigger and jump out to a 4x4 box.  Now the top of the box takes in two 2x2 boxes as its input, and then swaps the entire box.  We can keep growing our scope and the block-swapping will perform the same operation, albeit on a larger input, every time.  If you notice, the output of the final block-swap is an exact reverseal of the first input string.</p>
<hr>
<h2>Boredom [part 3]:</h2>
<h3>Application for string literals</h3>
<p>“Gee, <a class="mention" href="https://0x00sec.org/u/fi6uh">@fi6uh</a>, this is hella boring,” you might say.  No!  This is where the lightbulb went off over my head.  When given a string (adhering to some constraints we’ll get to in a minute), you can reverse it in a fixed number of steps.</p>
<h3>The catch</h3>
<p>Since XOR is a bitwise operator, its properties permeate through the this algorithm.  One caveat to this algorithm is that the string must be of length <code> 2^n</code> (<code>^</code> here is “raised to”, not XOR).  This is easy enough to get around though, just pad the rest of the string up to the next power of 2.  Let’s do an example; my username is only 5 characters, so I will pad it with 3 <code>_</code>'s in order to make it a power of 2:</p>
<pre><code class="lang-makefile"> input:           fi6uh___
 1st permutation: ifu6_h__
 2nd permutation: u6if___h
 3rd permutation: ___hu6if
</code></pre>
<h3>The math</h3>
<p>So the trick here is that for any string (padded to the next power of 2 if necessary) of length <code>n</code>, where <code>n</code> is 2 raised to some <code>p</code> in the natural numbers, it can be reversed in <code>p</code> permutations.  Let’s demonstrate this with a longer string, of 16 characters.  <code>log2(16) = 4</code>, so I should be able to reverse this string in 4 steps:</p>
<pre><code class="lang-makefile"> input:           abcdefghijklmnop
 1st permutation: badcfehgjilknmpo
 2nd permutation: dcbahgfelkjiponm
 3rd permutation: hgfedcbaponmlkji
 4th permutation: ponmlkjihgfedcba
</code></pre>
<p>And we did it!  Pretty cool.  But can this be applied to a different structure?  Definitely!</p>
<hr>
<h2>Boredom [part 4]:</h2>
<h3>The matrix</h3>
<p>Ok so we’ve seen how this algorithm can reverse a string linearly, but it can be applied to a two dimensional “string” (er, matrix) as well.  When applying this to a string, you can think of “pushing” the operations down.  When we add a second dimension into the mix, you do the same thing, but “push” the operations right as well.  Let’s demonstrate with an easy one:</p>
<pre><code class="lang-makefile">                          a b
 input:                   c d

                          b a
 1st permutation (down):  d c

                          d c
 2nd permutation (right): b a
</code></pre>
<p>To explain this a bit more, when we push the operation down, we select an element and its neighbor to the right, in this case <code>a</code> and <code>b</code>, and swap them horizontally.  Then, when we push the operation right, we select an element and its neighbor immediately below it, in this case <code>b</code> and <code>d</code>, and swap them vertically.  With a 2x2 matrix, that’s all it takes!</p>
<h3>A larger matrix</h3>
<p>There’s a trick to this applying this algorithm in two directions, however.  You have to keep track of how many permutations you have done for each direction before you can grow your scope.  Notice for a 2x2, we did 2 permutations and selected 2 elements <em>in the same scope</em> for both permutations.  This may be a little more obvious with a larger matrix, so let’s bump it up a notch:</p>
<pre><code class="lang-makefile">                           a b c d
                           e f g h
                           i j k l
 input:                    m n o p

                           b a d c
                           f e h g
                           j i l k
 1st permutation (down):   n m p o

                           f e h g
                           b a d c
                           n m p o
 2nd permutation (right):  j i l k

                           h g f e
                           d c b a
                           p o n m
 3rd permutation (down):   l k j i

                           p o n m
                           l k j i
                           h g f e
 4th permutation (right):  d c b a
</code></pre>
<p>You can see more clearly here that with 2 dimensions, you do 2 permutations for each direction before growing your scope.  After following the algorithm, the matrix will be reflected over the bottom right corner (the “origin”, for the sake of this writing).  For a string, which only reads left to right, you only need to do 1 permutation to grow your scope.</p>
<hr>
<h2>Conclusion:</h2>
<p>LOL you thought you were done, but in the wise words of Leo:</p>
<p>          <a href="https://laurenandmaxlikefood.files.wordpress.com/2012/01/we-need-to-go-deeper.jpg" target="_blank" rel="noopener nofollow ugc" class="onebox">
            <img src="https://0x00sec.s3.amazonaws.com/original/2X/5/5e8b04658d0ad6a2f8289536ac793cc1d6211005.jpeg" width="400" height="226">
          </a>
</p>
<hr>
<h2>Boredom [part n]:</h2>
<h3>The multiverse</h3>
<p>The title for this topic uses the word “scalable” for a reason!  We’ve seen a 1 dimensional permutation (string), we’ve seen a 2 dimensional permutation (matrix), what about 3 dimensions?  Great question!  The answer is: apply the 1 dimensional algorithm for every added dimension, then grow your scope and repeat.  This means it <em>should</em> work for n-dimensional structures, but I don’t know how to draw permutations of things in those realms.  That said, I also don’t know how to easily display permutations of a cube in ASCII, so instead I will draw a picture.  Note: not an artist.<br>
Here goes:</p>
<p><a href="https://0x0.st/s1az.jpg" class="onebox" target="_blank" rel="noopener nofollow ugc">https://0x0.st/s1az.jpg</a></p>
<p>As you can see, simply following the algorithm for every direction results in a cube whose verteces have been reflected over the vertex 6 (in this case).</p>
<hr>
<h2>Conclusion:</h2>
<p>Hopefully this journey through permutations, time, and space has been entertaining and not boring.  I found that this personal discovery got me through lunch and made the rest of my work day exciting.  If any of you are more familiar with these topics (or have a name for what I just described), please comment and share with the group.</p>
<p>As always, if you notice any errors please let me know so I can address them.</p>
<p>/end math</p>
<hr>
<h2>Addendum:</h2>
<p>A detail was brought to my attention that I felt should be addressed:</p>
<aside class="quote no-group" data-username="fi6uh">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/fi6uh/40/4690_2.png" class="avatar"> fi6uh:</div>
<blockquote>
<p>When given a string (adhering to some constraints we’ll get to in a minute), you can reverse it in a fixed number of steps.</p>
</blockquote>
</aside>
<p>If defining “fixed” as a constant for every input, this statement is incorrect.  This algorithm has a <a href="https://en.wikipedia.org/wiki/Time_complexity#Logarithmic_time" rel="noopener nofollow ugc">logarithmic time complexity</a> rather than a constant one.</p>
<p>It was also noted that this algorithm is <em>similar in function</em> to both the <a href="https://en.wikipedia.org/wiki/XOR_swap_algorithm" rel="noopener nofollow ugc">XOR swap</a> algorithm and the <a href="https://en.wikipedia.org/wiki/Feistel_cipher" rel="noopener nofollow ugc">Feistel cipher</a> (though the name of the algorithm demonstrated here is still unknown to me).  Both of which have been implemented numerous times, though I’m not sure if they “move” into higher dimensions.</p>
          <p><a href="https://0x00sec.org/t/scalable-reversing/6523/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/scalable-reversing/6523/1</link>
        <pubDate>Wed, 02 May 2018 02:05:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6523-1</guid>
        <source url="https://0x00sec.org/t/scalable-reversing/6523.rss">Scalable reversing</source>
      </item>
  </channel>
</rss>
