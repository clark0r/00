<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>My Experience with Learning binwalk (0day?)</title>
    <link>https://0x00sec.org/t/my-experience-with-learning-binwalk-0day/10397</link>
    <description>### How I found a Vulnerability using binwalk (0day included)

While attempting to teach myself how to use binwalk from [this](https://p16.praetorian.com/blog/getting-started-with-damn-vulnerable-router-firmware-dvrf-v0.1) tutorial by Praetorian, I ran into a few problems with the firmware. So I decided, &quot;Fuck it! We&#39;ll do it live!&quot;
Since I&#39;ve been working in the Healthcare industry and would be reverse-engineer medical devices for future assignments, I decided to just get started now. 
#### Required Skills

To completely understand the content of this article, the following lists pre-requisite knowledge:

* General Linux Knowledge


### Let&#39;s get Started
I looked for some firmware and came across [this]( https://www.atredis.com/blog/2018/5/14/ge-healthcare-mac-5500-vulnerabilities) article.
Atredis found a few vulnerabilities in two devices, GE Healthcare MAC5500 EEG, and the Silex SDS-500, SD-320AN linux-based WiFi bridges.

They found some OS Injections in the SD-320AN, which I thought was pretty cool. Silex updated their firmware, so these vulnerabilities shouldn&#39;t be present. Atredis also shared a link on the current version of the firmware, so after the patch.
I wanted to know what would happen if I ran binwalk on the updated firmware. (I still didn&#39;t know how binwalk worked).

After running binwalk, I got a layout of a linux filesystem.

![22%20PM|445x500](upload://v9eySxZgo88Q4zgJz4WzHtbVBln.png) 

From here, I usually just go straight to **/etc/passwd**

&gt; root:x:0:0:root:/tmp:/bin/sh
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:100:sync:/bin:/bin/sync
mail:x:8:8:mail:/var/spool/mail:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
operator:x:37:37:Operator:/var:/bin/sh
haldaemon:x:68:68:hald:/:/bin/sh
dbus:x:81:81:dbus:/var/run/dbus:/bin/sh
ftp:x:83:83:ftp:/home/ftp:/bin/sh
nobody:x:99:99:nobody:/home:/bin/sh
sshd:x:103:99:Operator:/var:/bin/sh
admin:x:1001:1001:Linux User:/tmp/jail/tmp:/usr/bin/console

This wasn&#39;t that much help. So then I looked at **/etc/shadow**

&gt; root::10933:0:99999:7:::
bin:*:10933:0:99999:7:::
daemon:*:10933:0:99999:7:::
adm:*:10933:0:99999:7:::
lp:*:10933:0:99999:7:::
sync:*:10933:0:99999:7:::
shutdown:*:10933:0:99999:7:::
halt:*:10933:0:99999:7:::
uucp:*:10933:0:99999:7:::
operator:*:10933:0:99999:7:::
ftp:*:10933:0:99999:7:::
nobody:*:10933:0:99999:7:::
admin:tVMhrdFrEt866:0:0:99999:7:::

You notice the password for admin?
tVMhrdFrEt866

I thought this was a hash so I plugged it into [CrackStation](https://crackstation.net/). A great website that has a ton of hashes already there.

![39%20PM|690x276](upload://eklFnPWkoXCr6TP9kpuRLboZXoh.png) 

&quot;Unrecognized hash format.&quot; So...it&#39;s not a hash.
After a few moments, I thought about just throwing it into a [base64 decoder](https://www.base64decode.org/).

![59%20PM|445x500](upload://pcWU05NLN8pMR2ZwaPBJvVzopif.png) 

Base64 decoded tVMhrdFrEt866 as S!k:

### Conclusion:
All in all, from grabbing the firmware, to running binwalk (poorly. I&#39;m sure I&#39;m underutilizing it&#39;s potential.), and plugging this encoded string into a hash lookup and decoder, this entire process took me only about 2 hours. I spent more time being afraid of trying things in the wild, than I did actually discovering things. If you ever want to try or get into something, but want to build your skills up first, I suggest, if it&#39;s harmless like this, just do it. You&#39;ll learn. If it has some legal or criminal implications, then maybe you should spend more time in the Information Gathering and Recon phases. But this is harmless. Mostly.</description>
    
    <lastBuildDate>Wed, 02 Jan 2019 21:51:48 +0000</lastBuildDate>
    <category>Reverse Engineering</category>
    <atom:link href="https://0x00sec.org/t/my-experience-with-learning-binwalk-0day/10397.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>My Experience with Learning binwalk (0day?)</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/my-experience-with-learning-binwalk-0day/10397/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-experience-with-learning-binwalk-0day/10397/3</link>
        <pubDate>Fri, 18 Jan 2019 21:28:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10397-3</guid>
        <source url="https://0x00sec.org/t/my-experience-with-learning-binwalk-0day/10397.rss">My Experience with Learning binwalk (0day?)</source>
      </item>
      <item>
        <title>My Experience with Learning binwalk (0day?)</title>
        <dc:creator><![CDATA[FFY00]]></dc:creator>
        <description><![CDATA[
            <p>Yeah, sadly embedded devices usually have backdoor passwords. They don’t even go to the troubler of making a decent backdoor, they just add a user.</p>
          <p><a href="https://0x00sec.org/t/my-experience-with-learning-binwalk-0day/10397/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-experience-with-learning-binwalk-0day/10397/2</link>
        <pubDate>Wed, 02 Jan 2019 21:51:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10397-2</guid>
        <source url="https://0x00sec.org/t/my-experience-with-learning-binwalk-0day/10397.rss">My Experience with Learning binwalk (0day?)</source>
      </item>
      <item>
        <title>My Experience with Learning binwalk (0day?)</title>
        <dc:creator><![CDATA[REal0day]]></dc:creator>
        <description><![CDATA[
            <h3>How I found a Vulnerability using binwalk (0day included)</h3>
<p>While attempting to teach myself how to use binwalk from <a href="https://p16.praetorian.com/blog/getting-started-with-damn-vulnerable-router-firmware-dvrf-v0.1" rel="noopener nofollow ugc">this</a> tutorial by Praetorian, I ran into a few problems with the firmware. So I decided, “Fuck it! We’ll do it live!”<br>
Since I’ve been working in the Healthcare industry and would be reverse-engineer medical devices for future assignments, I decided to just get started now.</p>
<h4>Required Skills</h4>
<p>To completely understand the content of this article, the following lists pre-requisite knowledge:</p>
<ul>
<li>General Linux Knowledge</li>
</ul>
<h3>Let’s get Started</h3>
<p>I looked for some firmware and came across <a href="https://www.atredis.com/blog/2018/5/14/ge-healthcare-mac-5500-vulnerabilities" rel="noopener nofollow ugc">this</a> article.<br>
Atredis found a few vulnerabilities in two devices, GE Healthcare MAC5500 EEG, and the Silex SDS-500, SD-320AN linux-based WiFi bridges.</p>
<p>They found some OS Injections in the SD-320AN, which I thought was pretty cool. Silex updated their firmware, so these vulnerabilities shouldn’t be present. Atredis also shared a link on the current version of the firmware, so after the patch.<br>
I wanted to know what would happen if I ran binwalk on the updated firmware. (I still didn’t know how binwalk worked).</p>
<p>After running binwalk, I got a layout of a linux filesystem.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/da4ea27a3a88680935d062b871faa76eee271249.png" alt="22%20PM" data-base62-sha1="v9eySxZgo88Q4zgJz4WzHtbVBln" width="445" height="500"></p>
<p>From here, I usually just go straight to <strong>/etc/passwd</strong></p>
<blockquote>
<p>root:x:0:0:root:/tmp:/bin/sh<br>
daemon:x:1:1:daemon:/usr/sbin:/bin/sh<br>
bin:x:2:2:bin:/bin:/bin/sh<br>
sys:x:3:3:sys:/dev:/bin/sh<br>
sync:x:4:100:sync:/bin:/bin/sync<br>
mail:x:8:8:mail:/var/spool/mail:/bin/sh<br>
proxy:x:13:13:proxy:/bin:/bin/sh<br>
www-data:x:33:33:www-data:/var/www:/bin/sh<br>
backup:x:34:34:backup:/var/backups:/bin/sh<br>
operator:x:37:37:Operator:/var:/bin/sh<br>
haldaemon:x:68:68:hald:/:/bin/sh<br>
dbus:x:81:81:dbus:/var/run/dbus:/bin/sh<br>
ftp:x:83:83:ftp:/home/ftp:/bin/sh<br>
nobody:x:99:99:nobody:/home:/bin/sh<br>
sshd:x:103:99:Operator:/var:/bin/sh<br>
admin:x:1001:1001:Linux User:/tmp/jail/tmp:/usr/bin/console</p>
</blockquote>
<p>This wasn’t that much help. So then I looked at <strong>/etc/shadow</strong></p>
<blockquote>
<p>root::10933:0:99999:7:::<br>
bin:<em>:10933:0:99999:7:::<br>
daemon:</em>:10933:0:99999:7:::<br>
adm:<em>:10933:0:99999:7:::<br>
lp:</em>:10933:0:99999:7:::<br>
sync:<em>:10933:0:99999:7:::<br>
shutdown:</em>:10933:0:99999:7:::<br>
halt:<em>:10933:0:99999:7:::<br>
uucp:</em>:10933:0:99999:7:::<br>
operator:<em>:10933:0:99999:7:::<br>
ftp:</em>:10933:0:99999:7:::<br>
nobody:*:10933:0:99999:7:::<br>
admin:tVMhrdFrEt866:0:0:99999:7:::</p>
</blockquote>
<p>You notice the password for admin?<br>
tVMhrdFrEt866</p>
<p>I thought this was a hash so I plugged it into <a href="https://crackstation.net/" rel="noopener nofollow ugc">CrackStation</a>. A great website that has a ton of hashes already there.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/646b5088e8d252c66c0089c2c5a629a30db94245.png" alt="39%20PM" data-base62-sha1="eklFnPWkoXCr6TP9kpuRLboZXoh" width="690" height="276"></p>
<p>“Unrecognized hash format.” So…it’s not a hash.<br>
After a few moments, I thought about just throwing it into a <a href="https://www.base64decode.org/" rel="noopener nofollow ugc">base64 decoder</a>.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/b0ad1a01f450748f7074ac5a01d0eedb0698e25f.png" alt="59%20PM" data-base62-sha1="pcWU05NLN8pMR2ZwaPBJvVzopif" width="445" height="500"></p>
<p>Base64 decoded tVMhrdFrEt866 as S!k:</p>
<h3>Conclusion:</h3>
<p>All in all, from grabbing the firmware, to running binwalk (poorly. I’m sure I’m underutilizing it’s potential.), and plugging this encoded string into a hash lookup and decoder, this entire process took me only about 2 hours. I spent more time being afraid of trying things in the wild, than I did actually discovering things. If you ever want to try or get into something, but want to build your skills up first, I suggest, if it’s harmless like this, just do it. You’ll learn. If it has some legal or criminal implications, then maybe you should spend more time in the Information Gathering and Recon phases. But this is harmless. Mostly.</p>
          <p><a href="https://0x00sec.org/t/my-experience-with-learning-binwalk-0day/10397/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-experience-with-learning-binwalk-0day/10397/1</link>
        <pubDate>Wed, 19 Dec 2018 21:28:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-10397-1</guid>
        <source url="https://0x00sec.org/t/my-experience-with-learning-binwalk-0day/10397.rss">My Experience with Learning binwalk (0day?)</source>
      </item>
  </channel>
</rss>
