<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Crypto Algs (Part 1.0): The Caesar Cipher</title>
    <link>https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733</link>
    <description>Hey guys! I thought I would start a little series on cryptography algorithms. I&#39;m going to run out this last hour before Mr. Robot&#39;s season 2 airs.

With that said, let&#39;s get down to business. The __Caesar Cipher__ is named for its alleged use by the Roman Emperor Julius Caesar. In order to &quot;ensure&quot; the confidentiality of certain military-related messages, Caesar would perform an alphabetical shift on his messages.

Here&#39;s an example.

    C H E E S E

    F K H H V H

Can you guess what the key is? It is... [spoiler]three (3)[/spoiler]!

Okay. So all we did was shift each letter over to the &quot;right&quot; by three. Easy enough. What if the letters end up shifting past the alphabet?

    X R A Y

    A S B Z

All we must do is wrap around -- and there is an easy way to tell a computer to do this.

Let&#39;s develop an expression for the shift. Let&#39;s say that the index of &quot;A&quot; is `0`, and the index of &quot;X&quot; is `25`. Our key, or shift-value, is `k`. 

Our expression would look like this:

    character = ( index(character) + k ) % 26 + &quot;A&quot;

Let&#39;s shift &quot;B&quot; over by `3` as an example. The index of &quot;B&quot; is `1`.

    1 + 3 = 4
    4 % 26 = 4
    4 + &quot;A&quot; = &quot;E&quot;

---
# The Code

```c
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

int main() {
    std::string s; std::getline(std::cin, s);
    int k; std::cin &gt;&gt; k;

    for (auto&amp; c : s) {
        if (c &gt;= &#39;a&#39; &amp;&amp; c &lt;= &#39;z&#39;) {

            c = ((c - &#39;a&#39; + k) % 26) + &#39;a&#39;;

        } else if (c &gt;= &#39;A&#39; &amp;&amp; c &lt;= &#39;Z&#39;) {

            c = ((c - &#39;A&#39; + k) % 26) + &#39;A&#39;;

        }
    }

    std::cout &lt;&lt; s &lt;&lt; std::endl;
    return 0;
}
```

You&#39;ll notice that, rather than using some `index()` method, I subtract `c` from `&#39;a&#39;` to get an index. This is because your computer really just treats characters as special `unsigned`, one-byte (usually), `int`s.

In the Caesar Cipher, we ignore non-alphabetical characters because we won&#39;t shift those. What happens if you shift a period?

Next, I&#39;ll be doing the vigenere cipher.

Later...
@oaktree

P.S. Nxs&#39;y ymj hfjxfw hnumjw httq?</description>
    
    <lastBuildDate>Thu, 14 Jul 2016 17:34:36 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Crypto Algs (Part 1.0): The Caesar Cipher</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/9</link>
        <pubDate>Sun, 21 Jan 2018 00:37:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-733-9</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733.rss">Crypto Algs (Part 1.0): The Caesar Cipher</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.0): The Caesar Cipher</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a>: you could do that, but it’s easier in C or C++ to just use character subtraction, since characters are really just unsigned integers, like I mentioned.</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/8</link>
        <pubDate>Thu, 14 Jul 2016 17:34:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-733-8</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733.rss">Crypto Algs (Part 1.0): The Caesar Cipher</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.0): The Caesar Cipher</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Love it <a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a>!</p>
<p>It will be great a series of cryptographic posts covering increasingly complex algorithms and techniques.</p>
<p>As discussed, you may want to consider chaotic modulations/masking for a later post. This is a bit of a different view, more from the point of view of securing the signals and not directly the data (spread spectrum stuff and similar). It is pretty interesting the discussion about chaotic subsystem synchronization and how it can be use to mask signals into other signals… so, is is maybe closer to stenography than classical crypto. The maths are cools anyway <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>As a side note I will drop some related reading… not directly cryptography but I found it very interesting specially as an example on how to bring together things that may look completely unrelated</p>
<p><a href="http://lcamtuf.coredump.cx/oldtcp/tcpseq.html" class="onebox" target="_blank" rel="nofollow noopener">http://lcamtuf.coredump.cx/oldtcp/tcpseq.html</a></p>
<p>It is pretty useless nowadays but it is an interesting reading specially with regards to randomness that is most related to cryptology.</p>
<p>Congrat mate!</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/7</link>
        <pubDate>Thu, 14 Jul 2016 17:19:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-733-7</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733.rss">Crypto Algs (Part 1.0): The Caesar Cipher</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.0): The Caesar Cipher</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Nice post! I’m a little confused with the code, since it is in C. I will however make an effort to read into it a little deeper.</p>
<p>When I was making one in ruby, I just made an array of the whole alphabet <code>alphabet = “abcdefghijklmnopqrstuvwxyz”.split("")</code>, and then just referenced the values from their indexes in the array. <code>alphabet[0]</code> would equal a and so on. If I wanted to increment it, I would just do <code>alphabet[alphabet.index(“C”) + rot]</code></p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/6</link>
        <pubDate>Thu, 14 Jul 2016 17:17:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-733-6</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733.rss">Crypto Algs (Part 1.0): The Caesar Cipher</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.0): The Caesar Cipher</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/nitrax">@Nitrax</a> : I’ll do a <em>Part 1.1</em> about breaking the Caesar Cipher. Next up is vigenere. I may or may not get to more advanced stuff like AES+CBC and what not, depending on how comfortable I am with them when the time comes.</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/5</link>
        <pubDate>Thu, 14 Jul 2016 15:18:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-733-5</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733.rss">Crypto Algs (Part 1.0): The Caesar Cipher</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.0): The Caesar Cipher</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a> Great article ! Did you plan to write more about modern encryption schemes like CBC, ECB, … ? Upstream, I think that it would be relevant to add a section highlighting weaknesses, used to break the cipher ! What do you think ?</p>
<p><strong>Umpqr clapwnrgml qafckc ctcp <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue_closed_eyes.png?v=9" title=":stuck_out_tongue_closed_eyes:" class="emoji" alt=":stuck_out_tongue_closed_eyes:"></strong></p>
<p>Best,<br>
Nitrax</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/4</link>
        <pubDate>Thu, 14 Jul 2016 07:55:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-733-4</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733.rss">Crypto Algs (Part 1.0): The Caesar Cipher</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.0): The Caesar Cipher</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="oaktree" data-post="1" data-topic="733">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/oaktree/40/4077_2.png" class="avatar"> oaktree:</div>
<blockquote>
<p>Nxs’y ymj hfjxfw hnumjw httq</p>
</blockquote>
</aside>
<p>Pa’z wylaaf jvvs thal!</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/3</link>
        <pubDate>Thu, 14 Jul 2016 04:45:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-733-3</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733.rss">Crypto Algs (Part 1.0): The Caesar Cipher</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.0): The Caesar Cipher</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Great post mate! I remember when I used the Caesar cipher years ago to make confusing puzzles on reddit! It may be basic but it sure as hell gets the job done if used properly. I’ll look forward to anything else you have in store! Quick question, are you going to make a series with the basics, or are you going to move on to more advanced things quickly? If you plan on making this a series with notable basics I’d suggest a look at the Atbash cipher which was originally in the Hebrew alphabet. It’s one of the basic ciphers where you replace letters with other letters. Say, replace a e with an n. A bit harder to crack than the Caesar, but as said above can still get the job done if correctly used with other ciphers! Kudos!</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/2</link>
        <pubDate>Thu, 14 Jul 2016 04:33:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-733-2</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733.rss">Crypto Algs (Part 1.0): The Caesar Cipher</source>
      </item>
      <item>
        <title>Crypto Algs (Part 1.0): The Caesar Cipher</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Hey guys! I thought I would start a little series on cryptography algorithms. I’m going to run out this last hour before Mr. Robot’s season 2 airs.</p>
<p>With that said, let’s get down to business. The <strong>Caesar Cipher</strong> is named for its alleged use by the Roman Emperor Julius Caesar. In order to “ensure” the confidentiality of certain military-related messages, Caesar would perform an alphabetical shift on his messages.</p>
<p>Here’s an example.</p>
<pre><code>C H E E S E

F K H H V H
</code></pre>
<p>Can you guess what the key is? It is… <span class="spoiler"><a href="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/1">spoiler</a></span>!</p>
<p>Okay. So all we did was shift each letter over to the “right” by three. Easy enough. What if the letters end up shifting past the alphabet?</p>
<pre><code>X R A Y

A S B Z
</code></pre>
<p>All we must do is wrap around – and there is an easy way to tell a computer to do this.</p>
<p>Let’s develop an expression for the shift. Let’s say that the index of “A” is <code>0</code>, and the index of “X” is <code>25</code>. Our key, or shift-value, is <code>k</code>.</p>
<p>Our expression would look like this:</p>
<pre><code>character = ( index(character) + k ) % 26 + "A"
</code></pre>
<p>Let’s shift “B” over by <code>3</code> as an example. The index of “B” is <code>1</code>.</p>
<pre><code>1 + 3 = 4
4 % 26 = 4
4 + "A" = "E"
</code></pre>
<hr>
<h1>The Code</h1>
<pre><code class="lang-auto">#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

int main() {
    std::string s; std::getline(std::cin, s);
    int k; std::cin &gt;&gt; k;

    for (auto&amp; c : s) {
        if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') {

            c = ((c - 'a' + k) % 26) + 'a';

        } else if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') {

            c = ((c - 'A' + k) % 26) + 'A';

        }
    }

    std::cout &lt;&lt; s &lt;&lt; std::endl;
    return 0;
}
</code></pre>
<p>You’ll notice that, rather than using some <code>index()</code> method, I subtract <code>c</code> from <code>'a'</code> to get an index. This is because your computer really just treats characters as special <code>unsigned</code>, one-byte (usually), <code>int</code>s.</p>
<p>In the Caesar Cipher, we ignore non-alphabetical characters because we won’t shift those. What happens if you shift a period?</p>
<p>Next, I’ll be doing the vigenere cipher.</p>
<p>Later…<br>
<a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a></p>
<p>P.S. Nxs’y ymj hfjxfw hnumjw httq?</p>
          <p><a href="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733/1</link>
        <pubDate>Thu, 14 Jul 2016 01:21:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-733-1</guid>
        <source url="https://0x00sec.org/t/crypto-algs-part-1-0-the-caesar-cipher/733.rss">Crypto Algs (Part 1.0): The Caesar Cipher</source>
      </item>
  </channel>
</rss>
