<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>My antivirus evasion journey</title>
    <link>https://0x00sec.org/t/my-antivirus-evasion-journey/25744</link>
    <description>Hi!
Several people asked me in my previous [post](https://0x00sec.org/t/antivirus-runtime-bypass/25574) if I could share the knowladge that I acquired during my attempts to bypass antiviruses. At the beginning, I would like to inform that it won&#39;t be a step by step guide how to write crypter, but more likely a hint to people that are struggling with same problem. And please do not use this knowladge in any evil purposes. Don&#39;t be an asshole and don&#39;t hack anyone please, it&#39;s more satisfying to open FUD reverse shell on a good CTF :smile:

**Antivirus bypass concept.**
So the [concept](https://offs3cg33k.medium.com/antivirus-evasion-bypass-techniques-b547cc51c371) is not really hard to understand. You have a detectable payload (for example reverse shell) and to make it undetectable you have to execute it directly in memory. To make that, you have to write something called &quot;Stub&quot;. Stub is a program that holds encrypted payload inside it and when it gets executed, it decrypts payload bytes and loads them directly to memory using something called [Process Hollowing](https://iosonogio.github.io/process-hollowing-a-reverse-engineering-case). This technique bypasses antivirus scans. Sounds easy in theory but it&#39;s much harder to actually write it FUD. It&#39;s not really a big deal to write method that will have copy-pasted RunPE from github, encrypted payload bytes which are attached to the Stub. It would work a few years ago but now antiviruses are armed with advanced scantime and runtime protection + often they have sandboxes supported by AI.

**Making your stub actually FUD**
I couldn&#39;t really find any tutorial/guide how to keep my stub undetectable, so I decided to write a few different stubs and just test which of them are least detectable and then make different versions of these least detectable and check which are least detectable of them. Some sort of machine learning :grinning_face_with_smiling_eyes: 
And this are my results:
* Do not attach not encrypted payload to your stub.
* Do not attempt any internet connection with your stub
* If you are writing stub in C# try not to use Assembly.Load, Assembly.GetTypes etc.
* Try executing RunPE at runtime, don&#39;t copy-paste it into your main Stub, it will give you a lot of detections
* Write Stub as small as possible and as simple as you can and it will drastically reduce scantime detections. There are many functions that can be used to execute RunPE at runtime, just think creatively and test it. 
* You need to write it completly by yourself, you can&#39;t use someones techinques because they will be probably already detectable
* Changing icon and assembly information of your binary helps A LOT.
* Write your own obfuscator.
* Write your own junk code generator
* Write your own antisandbox
* Antisandbox has to be really simple, do not overengineer it. Try not looking through processes and files. ESET might be triggered by this.
* Your payload quality also matters. If you want to open reverse shell I recommend you writing it by yourself, because shells such as meterpreter can be detected when you try to execute some of their functions for instance open remote powershell/cmd. (It depends on the AV)
* If you want to stall, do it using winapi. Don&#39;t use Sleep(time) or Thread.Sleep(time) because AVs can skip it
* It&#39;s like a cat and mouse game, it will take you a time to make it completly FUD, because some functions that can bypass 1 AV can trigger 5 different AVs
* AMSI Bypass doesn&#39;t work with all AVs, it even triggers some. For example Defender can be bypassed, ESET doesn&#39;t care and Avast will kill your process but won&#39;t do anything despite this. 
* Don&#39;t do tests on Virustotal. Only on sites which are not distributing samples: antiscan.me or kleenscan.com

If you have any questions or I made a mistake in my post just write them down in the comments below.</description>
    
    <lastBuildDate>Sat, 19 Jun 2021 15:42:19 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/my-antivirus-evasion-journey/25744.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>My antivirus evasion journey</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/my-antivirus-evasion-journey/25744/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-antivirus-evasion-journey/25744/7</link>
        <pubDate>Sat, 21 Aug 2021 02:46:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25744-7</guid>
        <source url="https://0x00sec.org/t/my-antivirus-evasion-journey/25744.rss">My antivirus evasion journey</source>
      </item>
      <item>
        <title>My antivirus evasion journey</title>
        <dc:creator><![CDATA[arvi]]></dc:creator>
        <description><![CDATA[
            <p>Pretty neat threat. Thanks.</p>
          <p><a href="https://0x00sec.org/t/my-antivirus-evasion-journey/25744/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-antivirus-evasion-journey/25744/6</link>
        <pubDate>Sat, 19 Jun 2021 15:42:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25744-6</guid>
        <source url="https://0x00sec.org/t/my-antivirus-evasion-journey/25744.rss">My antivirus evasion journey</source>
      </item>
      <item>
        <title>My antivirus evasion journey</title>
        <dc:creator><![CDATA[Baphomet]]></dc:creator>
        <description><![CDATA[
            <p>Hi thanks for this thread.<br>
Do you have any alternative for Assembly.Load() in C# ? I’m pretty new to this language and to “learn” it i’ve written my own builder and stub, that was not hard (using ofc Assembly.Load), but the detection rate is pretty scary as expected. I’ve seen this repo <a href="https://github.com/gigajew/WinXRunPE" rel="noopener nofollow ugc">https://github.com/gigajew/WinXRunPE</a> but to be honest i don’t want to just copy/paste someone else work, i’d like to write something i understand not only something that just works. If you have any hints, i’ll be glad to do my research and post an update if it’s successful.</p>
          <p><a href="https://0x00sec.org/t/my-antivirus-evasion-journey/25744/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-antivirus-evasion-journey/25744/5</link>
        <pubDate>Thu, 27 May 2021 18:05:27 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25744-5</guid>
        <source url="https://0x00sec.org/t/my-antivirus-evasion-journey/25744.rss">My antivirus evasion journey</source>
      </item>
      <item>
        <title>My antivirus evasion journey</title>
        <dc:creator><![CDATA[verking]]></dc:creator>
        <description><![CDATA[
            <p>A very basic overview of some of these things that you are talking about:</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://www.isaca.org/favicon.ico" class="site-icon" width="48" height="48">
      <a href="https://www.isaca.org/resources/isaca-journal/issues/2017/volume-6/evasive-malware-tricks-how-malware-evades-detection-by-sandboxes" target="_blank" rel="noopener nofollow ugc">ISACA</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/362;"><img src="https://www.isaca.org:443/-/media/images/isacadp/project/isaca/logos/isaca-logo-web.png" class="thumbnail" width="690" height="362"></div>

<h3><a href="https://www.isaca.org/resources/isaca-journal/issues/2017/volume-6/evasive-malware-tricks-how-malware-evades-detection-by-sandboxes" target="_blank" rel="noopener nofollow ugc">Evasive Malware Tricks: How Malware Evades Detection by Sandboxes</a></h3>

<p>Sandboxes are widely used to detect malware.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>One part that it touches on and you did as well, is “stalling” or “delaying” execution. Using something like NtDelayExecution to just hold off executing for a moderate amount of time seems to be the best way to counter AV detection, and even sandboxing because of the time it is expected to provide analysis. Is this technique just trivial or worth leveraging more if time isn’t of the essence?</p>
<p>Reference: <a href="http://undocumented.ntinternals.net/UserMode/Undocumented%20Functions/NT%20Objects/Thread/NtDelayExecution.html" class="inline-onebox" rel="noopener nofollow ugc">NtDelayExecution</a></p>
          <p><a href="https://0x00sec.org/t/my-antivirus-evasion-journey/25744/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-antivirus-evasion-journey/25744/4</link>
        <pubDate>Fri, 21 May 2021 19:22:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25744-4</guid>
        <source url="https://0x00sec.org/t/my-antivirus-evasion-journey/25744.rss">My antivirus evasion journey</source>
      </item>
      <item>
        <title>My antivirus evasion journey</title>
        <dc:creator><![CDATA[Danus]]></dc:creator>
        <description><![CDATA[
            <p>This is a pretty good thread</p>
          <p><a href="https://0x00sec.org/t/my-antivirus-evasion-journey/25744/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-antivirus-evasion-journey/25744/3</link>
        <pubDate>Sat, 24 Apr 2021 12:45:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25744-3</guid>
        <source url="https://0x00sec.org/t/my-antivirus-evasion-journey/25744.rss">My antivirus evasion journey</source>
      </item>
      <item>
        <title>My antivirus evasion journey</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            <p>Nice , You kept it short and sweet , thanks for the post.</p>
          <p><a href="https://0x00sec.org/t/my-antivirus-evasion-journey/25744/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-antivirus-evasion-journey/25744/2</link>
        <pubDate>Wed, 21 Apr 2021 11:17:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25744-2</guid>
        <source url="https://0x00sec.org/t/my-antivirus-evasion-journey/25744.rss">My antivirus evasion journey</source>
      </item>
      <item>
        <title>My antivirus evasion journey</title>
        <dc:creator><![CDATA[nulled]]></dc:creator>
        <description><![CDATA[
            <p>Hi!<br>
Several people asked me in my previous <a href="https://0x00sec.org/t/antivirus-runtime-bypass/25574">post</a> if I could share the knowladge that I acquired during my attempts to bypass antiviruses. At the beginning, I would like to inform that it won’t be a step by step guide how to write crypter, but more likely a hint to people that are struggling with same problem. And please do not use this knowladge in any evil purposes. Don’t be an asshole and don’t hack anyone please, it’s more satisfying to open FUD reverse shell on a good CTF <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:"></p>
<p><strong>Antivirus bypass concept.</strong><br>
So the <a href="https://offs3cg33k.medium.com/antivirus-evasion-bypass-techniques-b547cc51c371" rel="noopener nofollow ugc">concept</a> is not really hard to understand. You have a detectable payload (for example reverse shell) and to make it undetectable you have to execute it directly in memory. To make that, you have to write something called “Stub”. Stub is a program that holds encrypted payload inside it and when it gets executed, it decrypts payload bytes and loads them directly to memory using something called <a href="https://iosonogio.github.io/process-hollowing-a-reverse-engineering-case" rel="noopener nofollow ugc">Process Hollowing</a>. This technique bypasses antivirus scans. Sounds easy in theory but it’s much harder to actually write it FUD. It’s not really a big deal to write method that will have copy-pasted RunPE from github, encrypted payload bytes which are attached to the Stub. It would work a few years ago but now antiviruses are armed with advanced scantime and runtime protection + often they have sandboxes supported by AI.</p>
<p><strong>Making your stub actually FUD</strong><br>
I couldn’t really find any tutorial/guide how to keep my stub undetectable, so I decided to write a few different stubs and just test which of them are least detectable and then make different versions of these least detectable and check which are least detectable of them. Some sort of machine learning <img src="https://0x00sec.org/images/emoji/twitter/grinning_face_with_smiling_eyes.png?v=9" title=":grinning_face_with_smiling_eyes:" class="emoji" alt=":grinning_face_with_smiling_eyes:"><br>
And this are my results:</p>
<ul>
<li>Do not attach not encrypted payload to your stub.</li>
<li>Do not attempt any internet connection with your stub</li>
<li>If you are writing stub in C# try not to use Assembly.Load, Assembly.GetTypes etc.</li>
<li>Try executing RunPE at runtime, don’t copy-paste it into your main Stub, it will give you a lot of detections</li>
<li>Write Stub as small as possible and as simple as you can and it will drastically reduce scantime detections. There are many functions that can be used to execute RunPE at runtime, just think creatively and test it.</li>
<li>You need to write it completly by yourself, you can’t use someones techinques because they will be probably already detectable</li>
<li>Changing icon and assembly information of your binary helps A LOT.</li>
<li>Write your own obfuscator.</li>
<li>Write your own junk code generator</li>
<li>Write your own antisandbox</li>
<li>Antisandbox has to be really simple, do not overengineer it. Try not looking through processes and files. ESET might be triggered by this.</li>
<li>Your payload quality also matters. If you want to open reverse shell I recommend you writing it by yourself, because shells such as meterpreter can be detected when you try to execute some of their functions for instance open remote powershell/cmd. (It depends on the AV)</li>
<li>If you want to stall, do it using winapi. Don’t use Sleep(time) or Thread.Sleep(time) because AVs can skip it</li>
<li>It’s like a cat and mouse game, it will take you a time to make it completly FUD, because some functions that can bypass 1 AV can trigger 5 different AVs</li>
<li>AMSI Bypass doesn’t work with all AVs, it even triggers some. For example Defender can be bypassed, ESET doesn’t care and Avast will kill your process but won’t do anything despite this.</li>
<li>Don’t do tests on Virustotal. Only on sites which are not distributing samples: <a href="http://antiscan.me" rel="noopener nofollow ugc">antiscan.me</a> or <a href="http://kleenscan.com" rel="noopener nofollow ugc">kleenscan.com</a>
</li>
</ul>
<p>If you have any questions or I made a mistake in my post just write them down in the comments below.</p>
          <p><a href="https://0x00sec.org/t/my-antivirus-evasion-journey/25744/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/my-antivirus-evasion-journey/25744/1</link>
        <pubDate>Wed, 21 Apr 2021 10:46:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-25744-1</guid>
        <source url="https://0x00sec.org/t/my-antivirus-evasion-journey/25744.rss">My antivirus evasion journey</source>
      </item>
  </channel>
</rss>
