<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to use hard-coded keys for two parties to form key agreement using ECDH from cryptopp library?</title>
    <link>https://0x00sec.org/t/how-to-use-hard-coded-keys-for-two-parties-to-form-key-agreement-using-ecdh-from-cryptopp-library/33044</link>
    <description>Hi folks!.
need help here and don&#39;t say &quot;just google&quot; because i have already done that. I need your help through this code, how it can be corrected to produce correct &quot;Agreed shared secret key&quot; which is supposed to be `&quot;1ed885b1064ae5e041cef89365eb7a63b87a6e3e59f6b3ec74c117b74c4e89a4&quot;`

The code:
```
#include &lt;iostream&gt;
using std::cout;
using std::cerr;
using std::endl;

#include &lt;string&gt;
using std::string;

#include &lt;stdexcept&gt;
using std::runtime_error;

#include &lt;cstdlib&gt;
using std::exit;

#include &quot;cryptopp/osrng.h&quot;
using CryptoPP::AutoSeededRandomPool;
using CryptoPP::AutoSeededX917RNG;

#include &quot;cryptopp/aes.h&quot;
using CryptoPP::AES;

#include &quot;cryptopp/eccrypto.h&quot;
using CryptoPP::ECP;
using CryptoPP::ECDH;

#include &quot;cryptopp/secblock.h&quot;
using CryptoPP::SecByteBlock;

#include &quot;cryptopp/oids.h&quot;
using CryptoPP::OID;

// ASN1 is a namespace, not an object
#include &quot;cryptopp/asn.h&quot;
using namespace CryptoPP::ASN1;

#include &quot;cryptopp/integer.h&quot;
using CryptoPP::Integer;

#include &lt;cryptopp/hex.h&gt;

int main( int, char** ) {

    OID CURVE = secp256r1();

    ECDH &lt; ECP &gt;::Domain dhA( CURVE ), dhB( CURVE );
    
    string privatekeyA = &quot;e8586d5fa27ffb6a37817c171c94189ad20d8fcf29fa58ba0e6cbe4cf2bb1079&quot;;
    string publickeyB = &quot;4f0609f35a0be01caa1287862680b803ea50fb66af2ad65e990aa4a8944c6191ac0d13d98612e12ba1d9afa86f997aab2827a0cee43bf963e8e995eb95df2fb33&quot;;

    SecByteBlock privA(dhA.PrivateKeyLength());
    SecByteBlock pubB(dhB.PublicKeyLength());  
    
    string Prkey, Pukey;
    unsigned char privateky[32];
    unsigned char publicky[64];

    CryptoPP::StringSource ssk(privatekeyA, true ,
        new CryptoPP::HexDecoder(
            new CryptoPP::StringSink(Prkey)
        )
    );

    CryptoPP::StringSource ssv(publickeyB, true ,
        new CryptoPP::HexDecoder(
            new CryptoPP::StringSink(Pukey)
        )
    );

    for(int i=0;i&lt;32;i++) {
		    if (Prkey[i]&lt;0) privateky[i]=Prkey[i]+256;
		    else privateky[i]=Prkey[i];
	    } 

    for(int i=0;i&lt;64;i++) {
		    if (Pukey[i]&lt;0) publicky[i]=Pukey[i]+256;
		    else publicky[i]=Pukey[i];
	    } 
	    
    privA.Assign(privateky, sizeof(privateky));
    pubB.Assign(publicky, sizeof(publicky));

    SecByteBlock sharedA(dhA.AgreedValueLength());

    dhA.Agree(sharedA, privA, pubB);

    Integer a;

    a.Decode(sharedA.BytePtr(), sharedA.SizeInBytes());
    cout &lt;&lt; &quot;Agreed to shared secret: &quot; &lt;&lt; std::hex &lt;&lt; a &lt;&lt; endl;

    return 0;
}
```
The output of this code is wrong. Am just playing around to understand the concept so any help even in comments will be highly appreciated.</description>
    
    <lastBuildDate>Fri, 20 Jan 2023 21:08:14 +0000</lastBuildDate>
    <category>Cryptology</category>
    <atom:link href="https://0x00sec.org/t/how-to-use-hard-coded-keys-for-two-parties-to-form-key-agreement-using-ecdh-from-cryptopp-library/33044.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to use hard-coded keys for two parties to form key agreement using ECDH from cryptopp library?</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/how-to-use-hard-coded-keys-for-two-parties-to-form-key-agreement-using-ecdh-from-cryptopp-library/33044/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-use-hard-coded-keys-for-two-parties-to-form-key-agreement-using-ecdh-from-cryptopp-library/33044/2</link>
        <pubDate>Mon, 22 May 2023 08:26:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33044-2</guid>
        <source url="https://0x00sec.org/t/how-to-use-hard-coded-keys-for-two-parties-to-form-key-agreement-using-ecdh-from-cryptopp-library/33044.rss">How to use hard-coded keys for two parties to form key agreement using ECDH from cryptopp library?</source>
      </item>
      <item>
        <title>How to use hard-coded keys for two parties to form key agreement using ECDH from cryptopp library?</title>
        <dc:creator><![CDATA[jonkaka]]></dc:creator>
        <description><![CDATA[
            <p>Hi folks!.<br>
need help here and don’t say “just google” because i have already done that. I need your help through this code, how it can be corrected to produce correct “Agreed shared secret key” which is supposed to be <code>"1ed885b1064ae5e041cef89365eb7a63b87a6e3e59f6b3ec74c117b74c4e89a4"</code></p>
<p>The code:</p>
<pre><code class="lang-auto">#include &lt;iostream&gt;
using std::cout;
using std::cerr;
using std::endl;

#include &lt;string&gt;
using std::string;

#include &lt;stdexcept&gt;
using std::runtime_error;

#include &lt;cstdlib&gt;
using std::exit;

#include "cryptopp/osrng.h"
using CryptoPP::AutoSeededRandomPool;
using CryptoPP::AutoSeededX917RNG;

#include "cryptopp/aes.h"
using CryptoPP::AES;

#include "cryptopp/eccrypto.h"
using CryptoPP::ECP;
using CryptoPP::ECDH;

#include "cryptopp/secblock.h"
using CryptoPP::SecByteBlock;

#include "cryptopp/oids.h"
using CryptoPP::OID;

// ASN1 is a namespace, not an object
#include "cryptopp/asn.h"
using namespace CryptoPP::ASN1;

#include "cryptopp/integer.h"
using CryptoPP::Integer;

#include &lt;cryptopp/hex.h&gt;

int main( int, char** ) {

    OID CURVE = secp256r1();

    ECDH &lt; ECP &gt;::Domain dhA( CURVE ), dhB( CURVE );
    
    string privatekeyA = "e8586d5fa27ffb6a37817c171c94189ad20d8fcf29fa58ba0e6cbe4cf2bb1079";
    string publickeyB = "4f0609f35a0be01caa1287862680b803ea50fb66af2ad65e990aa4a8944c6191ac0d13d98612e12ba1d9afa86f997aab2827a0cee43bf963e8e995eb95df2fb33";

    SecByteBlock privA(dhA.PrivateKeyLength());
    SecByteBlock pubB(dhB.PublicKeyLength());  
    
    string Prkey, Pukey;
    unsigned char privateky[32];
    unsigned char publicky[64];

    CryptoPP::StringSource ssk(privatekeyA, true ,
        new CryptoPP::HexDecoder(
            new CryptoPP::StringSink(Prkey)
        )
    );

    CryptoPP::StringSource ssv(publickeyB, true ,
        new CryptoPP::HexDecoder(
            new CryptoPP::StringSink(Pukey)
        )
    );

    for(int i=0;i&lt;32;i++) {
		    if (Prkey[i]&lt;0) privateky[i]=Prkey[i]+256;
		    else privateky[i]=Prkey[i];
	    } 

    for(int i=0;i&lt;64;i++) {
		    if (Pukey[i]&lt;0) publicky[i]=Pukey[i]+256;
		    else publicky[i]=Pukey[i];
	    } 
	    
    privA.Assign(privateky, sizeof(privateky));
    pubB.Assign(publicky, sizeof(publicky));

    SecByteBlock sharedA(dhA.AgreedValueLength());

    dhA.Agree(sharedA, privA, pubB);

    Integer a;

    a.Decode(sharedA.BytePtr(), sharedA.SizeInBytes());
    cout &lt;&lt; "Agreed to shared secret: " &lt;&lt; std::hex &lt;&lt; a &lt;&lt; endl;

    return 0;
}
</code></pre>
<p>The output of this code is wrong. Am just playing around to understand the concept so any help even in comments will be highly appreciated.</p>
          <p><a href="https://0x00sec.org/t/how-to-use-hard-coded-keys-for-two-parties-to-form-key-agreement-using-ecdh-from-cryptopp-library/33044/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-use-hard-coded-keys-for-two-parties-to-form-key-agreement-using-ecdh-from-cryptopp-library/33044/1</link>
        <pubDate>Fri, 20 Jan 2023 16:25:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-33044-1</guid>
        <source url="https://0x00sec.org/t/how-to-use-hard-coded-keys-for-two-parties-to-form-key-agreement-using-ecdh-from-cryptopp-library/33044.rss">How to use hard-coded keys for two parties to form key agreement using ECDH from cryptopp library?</source>
      </item>
  </channel>
</rss>
