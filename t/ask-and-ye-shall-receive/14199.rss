<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>&quot;Ask, and Ye Shall Receive&quot;</title>
    <link>https://0x00sec.org/t/ask-and-ye-shall-receive/14199</link>
    <description>
A crazy thing happened at work - I&#39;ve been interested in Application Securty
and pentesting for almost 2 years now, but only recently have I started to become
more active in order to gain knowledge.

They knew this at work, so I called for a 1:1 with my supervisor, and asked

&gt; What if I&#39;d take ownership of our application&#39;s security?

I&#39;ve prepared some notes why I want to do this (self development, motivation),
or why is it good for the product &amp; company (big customers will be interested to know where
and how their data is stored and retained at the very least), but to my surprise,
before I could even start vouching for myself, the answer was 

&gt; Yes, we&#39;d love that to happen

I was quite surprised by the answer, but their reasons were very similar to what I was about to say.
Win-win, right?

After some internal celebration (while keeping a straight face), I started to make plans
on what I&#39;d like to do in my new position.

## The Pentest

As the 0th step, I started to pentest our application - I didn&#39;t expect
any mind blowing results, since I&#39;m biased by knowing the internals and I&#39;m
not that good yet to find non-obvious issues. For the record, and without giving away too much:
the application is using Angular on the client and Django on the server, all on AWS.

With this in mind, I still went ahead and did it, and I was quite pleased, because:

* I could run my first ever brute-force attempt on a real site - I didn&#39;t get a password
for the account I was using, but that won&#39;t make it any less of an issue.
The command I used is `hydra -l snail@xxx.com -P ~/Downloads/rockyou.txt xxx.xxx.xxx.xxx http-post-form &#39;/oauth/token:username=^USER^&amp;grant_type=password&amp;password=^PASS^:Unauthorized&#39; -V`
* I did implement a CSRF and a Clickjacking PoC - CSRF couldn&#39;t be exploited, but due to a missing `X-Frame-Options` header, the latter PoC worked, YAY! Also made a note that the original site is `sub.domain.com`, and `sub-domain.com` is available, so it&#39;d be easy to fool someone.
* Every single user input field I&#39;ve found I tested for XSS - with all the wonky characters you can imagine (and even ü§™ emojis) - I must say I was impressed when nothing I tried has worked. I&#39;ve also tried uploading avatars with names like `-1.jpg&quot; onerror=&quot;alert(1)&quot;`, but again, it was all sanitized.
* SQL Injection didn&#39;t work - but I wasn&#39;t expecting it anyway
* I&#39;ve found 3 CVEs for our dependencies, but they all relied on certain configurations, which
we didn&#39;t have - lucky us I guess?
* I did find a couple of misconfiguration issues, and a way of triggering an Internal Server Error
with a file upload, which sounds interesting, maybe I could do something with it.

You know what they say:

&gt; If you failed a pentest, you know where your biggest vulnerabilities are, if you passed one, it doesn&#39;t mean you&#39;re secure, but instead it means you don&#39;t know what are your weaknesses

While I really enjoyed doing the above, and will carry on doing it for a couple of days to see if I can find anything
meaningful, I&#39;d like to involve an external pentester team at some point.

## What&#39;s next?

The next step is to write my first ever pentest report - which I&#39;m looking forward to, there are a couple of
good templates in [this repo](https://github.com/juliocesarfort/public-pentesting-reports) that I plan
to borrow some inspiration from.

I received some advice as well, one of them I think is probably the most important:

&gt; ... Which means first you need to build solid relationships with your development teams. You want them to feel comfortable. You want them to feel they won&#39;t be slowed down coming to you. It needs to be a clean /good process for both sides.

By [Jordan Ligas on Twitter](https://twitter.com/jordan_ligas/status/1135885085729800192)  

Since I&#39;m still part of the development team, I think this one is going to be relatively easy, but I think this is a very crucial part of one&#39;s success as a security enthusiast.

The other is not much of an advice, but a good starting point, the &quot;Your code&quot;, &quot;Your application&quot;, 
and &quot;Your product users&quot; sections in the [SaaS CTO Checklist](https://www.sqreen.com/checklists/saas-cto-security-checklist) will help you come up with the basics, and will point you to things you should learn about.

## Summary

If you want to be involved with the security aspect of the software you&#39;re working on,
try to make the first step! I was surprised this was all it took, but yet here I am - and I think you can do this too!
Especially if you&#39;re working at a smaller firm, I think security is more important, since if they lose
the trust of their users, it can mean the end of their company, whereas larger companies (ever heard of Equifax?)
can survive breaches, either because they have the money to endure while they rebuild trust, or
have something else that&#39;ll make them resilient to losing customers.

As I&#39;m celebrating this new position, please accept my virtual üç∫ or a ü•É (even a üçπ if that&#39;s your game)!

And as always, thanks for reading ü•∞</description>
    
    <lastBuildDate>Thu, 12 Dec 2019 11:24:34 +0000</lastBuildDate>
    <category>Beginner Guides</category>
    <atom:link href="https://0x00sec.org/t/ask-and-ye-shall-receive/14199.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>&quot;Ask, and Ye Shall Receive&quot;</title>
        <dc:creator><![CDATA[hacker_snail]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for the advice <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> <a class="mention" href="https://0x00sec.org/u/nekiruy">@Nekiruy</a> &amp; <a class="mention" href="https://0x00sec.org/u/icyphox">@icyphox</a> - I‚Äôll be working on making a proper CI/CD pipeline in the near future with SAST + I‚Äôll also be more firm on adding logging (pretty much non-existent at the moment, but the app is just starting to evolve)</p>
<p>I‚Äôve looked at Pacu, but haven‚Äôt tested it yet, but looking forward to it!</p>
          <p><a href="https://0x00sec.org/t/ask-and-ye-shall-receive/14199/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/ask-and-ye-shall-receive/14199/7</link>
        <pubDate>Fri, 07 Jun 2019 20:45:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-14199-7</guid>
        <source url="https://0x00sec.org/t/ask-and-ye-shall-receive/14199.rss">&quot;Ask, and Ye Shall Receive&quot;</source>
      </item>
      <item>
        <title>&quot;Ask, and Ye Shall Receive&quot;</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>I second this, you can automated authenticated scans with OWASP ZAP in docker. I spent a lot time researching this and have some code to get JSON from ZAP (to do with whatever you like!).</p>
          <p><a href="https://0x00sec.org/t/ask-and-ye-shall-receive/14199/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/ask-and-ye-shall-receive/14199/6</link>
        <pubDate>Fri, 07 Jun 2019 10:00:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-14199-6</guid>
        <source url="https://0x00sec.org/t/ask-and-ye-shall-receive/14199.rss">&quot;Ask, and Ye Shall Receive&quot;</source>
      </item>
      <item>
        <title>&quot;Ask, and Ye Shall Receive&quot;</title>
        <dc:creator><![CDATA[Nekiruy]]></dc:creator>
        <description><![CDATA[
            <p>Congrats on the new position, its good to see companies taking it seriously when someone stands up to be counted.</p>
<p>As you are on AWS, I would suggest that you look to that infra as a secondary test, look at your instance profiles, assigned roles etc. harden the infra that your app sits on in parralel to your app itself. (Assuming that you manage the AWS infra alongside your app as part of your DevOps pipeline ofc).</p>
<p>pacu from Rhino Security labs is a good tool for AWS testing, (<a href="https://github.com/RhinoSecurityLabs/pacu" rel="nofollow noopener">https://github.com/RhinoSecurityLabs/pacu</a>).</p>
<p>All the best.</p>
          <p><a href="https://0x00sec.org/t/ask-and-ye-shall-receive/14199/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/ask-and-ye-shall-receive/14199/5</link>
        <pubDate>Fri, 07 Jun 2019 09:52:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-14199-5</guid>
        <source url="https://0x00sec.org/t/ask-and-ye-shall-receive/14199.rss">&quot;Ask, and Ye Shall Receive&quot;</source>
      </item>
      <item>
        <title>&quot;Ask, and Ye Shall Receive&quot;</title>
        <dc:creator><![CDATA[icyphox]]></dc:creator>
        <description><![CDATA[
            <p>Great stuff! Just as <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> said, React, Angular and most other modern web frameworks implement input sanitation out of the box. XSS of any kind is a no-go.<br>
But definitely attack the logic, use BurpSuite and capture requests. Mess around with parameters, yada yada.<br>
Another thing I can recommend is implementing basic web security testing in your DevOps pipeline (if you‚Äôre using one). You‚Äôll definitely see some false positives, but it‚Äôs good to have nonetheless.</p>
<p>Good luck! &lt;3</p>
          <p><a href="https://0x00sec.org/t/ask-and-ye-shall-receive/14199/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/ask-and-ye-shall-receive/14199/4</link>
        <pubDate>Fri, 07 Jun 2019 09:22:42 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-14199-4</guid>
        <source url="https://0x00sec.org/t/ask-and-ye-shall-receive/14199.rss">&quot;Ask, and Ye Shall Receive&quot;</source>
      </item>
      <item>
        <title>&quot;Ask, and Ye Shall Receive&quot;</title>
        <dc:creator><![CDATA[hacker_snail]]></dc:creator>
        <description><![CDATA[
            <p>Yep, that‚Äôs what I gathered - the app (and infrastructure) should be safe from automated attacks, at least the most basic ones. The app is simple enough that there are no different authorisation levels - I did manage to bypass the password policy though, and I could set ‚Äúa‚Äù as a valid password. Not a big issue, but it goes into the report for sure <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/ask-and-ye-shall-receive/14199/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/ask-and-ye-shall-receive/14199/3</link>
        <pubDate>Fri, 07 Jun 2019 09:16:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-14199-3</guid>
        <source url="https://0x00sec.org/t/ask-and-ye-shall-receive/14199.rss">&quot;Ask, and Ye Shall Receive&quot;</source>
      </item>
      <item>
        <title>&quot;Ask, and Ye Shall Receive&quot;</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>This is awesome! Congrats man!</p>
<p>I usually find that when I test angular and react apps I can‚Äôt find much in the way of old school application vulnerabilities.</p>
<p>If I was you, I‚Äôd look hard on logic issues, can you delete somebody else‚Äôs files just being authenticated?</p>
<p>I‚Äôd hope you‚Äôre using Burpsuite, so capture the request to add or delete a certain item, authenticate as a lower priv or different user, and try the same request. You might find that the application is just checking that somebody is authenticated at all, and not that you own the asset etc.</p>
<p>The fact you‚Äôve not found very much is really good because it means you‚Äôve done a quick sweep. Some 14 year old script kiddie isn‚Äôt going to find something if you can‚Äôt (unlikely).</p>
<p>Anyway - keep up the awesome work man, I love these types of posts!</p>
          <p><a href="https://0x00sec.org/t/ask-and-ye-shall-receive/14199/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/ask-and-ye-shall-receive/14199/2</link>
        <pubDate>Fri, 07 Jun 2019 09:06:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-14199-2</guid>
        <source url="https://0x00sec.org/t/ask-and-ye-shall-receive/14199.rss">&quot;Ask, and Ye Shall Receive&quot;</source>
      </item>
      <item>
        <title>&quot;Ask, and Ye Shall Receive&quot;</title>
        <dc:creator><![CDATA[hacker_snail]]></dc:creator>
        <description><![CDATA[
            <p>A crazy thing happened at work - I‚Äôve been interested in Application Securty<br>
and pentesting for almost 2 years now, but only recently have I started to become<br>
more active in order to gain knowledge.</p>
<p>They knew this at work, so I called for a 1:1 with my supervisor, and asked</p>
<blockquote>
<p>What if I‚Äôd take ownership of our application‚Äôs security?</p>
</blockquote>
<p>I‚Äôve prepared some notes why I want to do this (self development, motivation),<br>
or why is it good for the product &amp; company (big customers will be interested to know where<br>
and how their data is stored and retained at the very least), but to my surprise,<br>
before I could even start vouching for myself, the answer was</p>
<blockquote>
<p>Yes, we‚Äôd love that to happen</p>
</blockquote>
<p>I was quite surprised by the answer, but their reasons were very similar to what I was about to say.<br>
Win-win, right?</p>
<p>After some internal celebration (while keeping a straight face), I started to make plans<br>
on what I‚Äôd like to do in my new position.</p>
<h2>The Pentest</h2>
<p>As the 0th step, I started to pentest our application - I didn‚Äôt expect<br>
any mind blowing results, since I‚Äôm biased by knowing the internals and I‚Äôm<br>
not that good yet to find non-obvious issues. For the record, and without giving away too much:<br>
the application is using Angular on the client and Django on the server, all on AWS.</p>
<p>With this in mind, I still went ahead and did it, and I was quite pleased, because:</p>
<ul>
<li>I could run my first ever brute-force attempt on a real site - I didn‚Äôt get a password<br>
for the account I was using, but that won‚Äôt make it any less of an issue.<br>
The command I used is <code>hydra -l snail@xxx.com -P ~/Downloads/rockyou.txt xxx.xxx.xxx.xxx http-post-form '/oauth/token:username=^USER^&amp;grant_type=password&amp;password=^PASS^:Unauthorized' -V</code>
</li>
<li>I did implement a CSRF and a Clickjacking PoC - CSRF couldn‚Äôt be exploited, but due to a missing <code>X-Frame-Options</code> header, the latter PoC worked, YAY! Also made a note that the original site is <code>sub.domain.com</code>, and <code>sub-domain.com</code> is available, so it‚Äôd be easy to fool someone.</li>
<li>Every single user input field I‚Äôve found I tested for XSS - with all the wonky characters you can imagine (and even <img src="https://0x00sec.org/images/emoji/twitter/crazy_face.png?v=9" title=":crazy_face:" class="emoji" alt=":crazy_face:"> emojis) - I must say I was impressed when nothing I tried has worked. I‚Äôve also tried uploading avatars with names like <code>-1.jpg" onerror="alert(1)"</code>, but again, it was all sanitized.</li>
<li>SQL Injection didn‚Äôt work - but I wasn‚Äôt expecting it anyway</li>
<li>I‚Äôve found 3 CVEs for our dependencies, but they all relied on certain configurations, which<br>
we didn‚Äôt have - lucky us I guess?</li>
<li>I did find a couple of misconfiguration issues, and a way of triggering an Internal Server Error<br>
with a file upload, which sounds interesting, maybe I could do something with it.</li>
</ul>
<p>You know what they say:</p>
<blockquote>
<p>If you failed a pentest, you know where your biggest vulnerabilities are, if you passed one, it doesn‚Äôt mean you‚Äôre secure, but instead it means you don‚Äôt know what are your weaknesses</p>
</blockquote>
<p>While I really enjoyed doing the above, and will carry on doing it for a couple of days to see if I can find anything<br>
meaningful, I‚Äôd like to involve an external pentester team at some point.</p>
<h2>What‚Äôs next?</h2>
<p>The next step is to write my first ever pentest report - which I‚Äôm looking forward to, there are a couple of<br>
good templates in <a href="https://github.com/juliocesarfort/public-pentesting-reports" rel="noopener nofollow ugc">this repo</a> that I plan<br>
to borrow some inspiration from.</p>
<p>I received some advice as well, one of them I think is probably the most important:</p>
<blockquote>
<p>‚Ä¶ Which means first you need to build solid relationships with your development teams. You want them to feel comfortable. You want them to feel they won‚Äôt be slowed down coming to you. It needs to be a clean /good process for both sides.</p>
</blockquote>
<p>By <a href="https://twitter.com/jordan_ligas/status/1135885085729800192" rel="noopener nofollow ugc">Jordan Ligas on Twitter</a></p>
<p>Since I‚Äôm still part of the development team, I think this one is going to be relatively easy, but I think this is a very crucial part of one‚Äôs success as a security enthusiast.</p>
<p>The other is not much of an advice, but a good starting point, the ‚ÄúYour code‚Äù, ‚ÄúYour application‚Äù,<br>
and ‚ÄúYour product users‚Äù sections in the <a href="https://www.sqreen.com/checklists/saas-cto-security-checklist" rel="noopener nofollow ugc">SaaS CTO Checklist</a> will help you come up with the basics, and will point you to things you should learn about.</p>
<h2>Summary</h2>
<p>If you want to be involved with the security aspect of the software you‚Äôre working on,<br>
try to make the first step! I was surprised this was all it took, but yet here I am - and I think you can do this too!<br>
Especially if you‚Äôre working at a smaller firm, I think security is more important, since if they lose<br>
the trust of their users, it can mean the end of their company, whereas larger companies (ever heard of Equifax?)<br>
can survive breaches, either because they have the money to endure while they rebuild trust, or<br>
have something else that‚Äôll make them resilient to losing customers.</p>
<p>As I‚Äôm celebrating this new position, please accept my virtual <img src="https://0x00sec.org/images/emoji/twitter/beer.png?v=9" title=":beer:" class="emoji" alt=":beer:"> or a <img src="https://0x00sec.org/images/emoji/twitter/tumbler_glass.png?v=9" title=":tumbler_glass:" class="emoji" alt=":tumbler_glass:"> (even a <img src="https://0x00sec.org/images/emoji/twitter/tropical_drink.png?v=9" title=":tropical_drink:" class="emoji" alt=":tropical_drink:"> if that‚Äôs your game)!</p>
<p>And as always, thanks for reading <img src="https://0x00sec.org/images/emoji/twitter/smiling_face_with_three_hearts.png?v=9" title=":smiling_face_with_three_hearts:" class="emoji" alt=":smiling_face_with_three_hearts:"></p>
          <p><a href="https://0x00sec.org/t/ask-and-ye-shall-receive/14199/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/ask-and-ye-shall-receive/14199/1</link>
        <pubDate>Fri, 07 Jun 2019 08:45:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-14199-1</guid>
        <source url="https://0x00sec.org/t/ask-and-ye-shall-receive/14199.rss">&quot;Ask, and Ye Shall Receive&quot;</source>
      </item>
  </channel>
</rss>
