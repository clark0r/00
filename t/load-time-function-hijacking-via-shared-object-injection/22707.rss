<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Load-Time Function Hijacking ( via Shared object injection)</title>
    <link>https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707</link>
    <description>
Hello guys, welcome to my writeup. I will get to the subject without further ado

**First of all, we need to know;**

*Load-Time:* Before a software starts running, it has a load time. It installs its requirements until the program is fully functional (Libraries, Memory Regions)

*Function Hooking:* Replacing or editing a function given in the software with a fake function.


**See the Functions used by a software**;

You can use the ftrace binarys used by the majority in linux to see the functions used in the software.


**Let&#39;s Start**
Now I assume that we open linux and compile the following code:


&gt;     #include &lt;stdio.h&gt;
&gt; 
&gt;     int main(){
&gt; 
&gt;       puts(&quot;Hello world !&quot;);
&gt; 
&gt;     }

&gt; Compiling : gcc hello.c -o hello

What we&#39;re going to do now is to replace this set function with the fake sets we provided at load time. Thus, the function we wrote will work, not the function written in the program.

**Writing the Fake library to hook the function:**


For the puts function, the creation of the fake library is as follows:


```
     
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;dlfcn.h&gt;
 
int puts(const char *message) {
 
  int (*new_puts)(const char *message);
 
  new_puts = dlsym(RTLD_NEXT, &quot;puts&quot;);
 
  return new_puts(&quot;Hijacked!&quot;);
}

```

The library is simply puts (); Creates a fake of the function dlsym (); allows it to replace the original thanks to its function.


The dlsym(); function takes two arguments. The first of these, the RTLD_NEXT enum, tells the dynamic loader API part to return to the next instance linked with the 2nd argument. The last argument is asking for the name of the sample to be returned to, and this is the puts function, which we will substitute forged.

&gt;   return new_puts(&quot;Hijacked!&quot;);

Here, puts (); The function that will replace the function is specified.



**Compiling the library and transferring it to LD_PRELOAD**

Compiling The Library :

```
gcc evil_library.c -o evil_library.so -fPIC -shared -ldl -D_GNU_SOURCE
```



The **LD_PRELOAD** environment variable can execute the library we provided at the moment the running software starts, so that we can manipulate the software.

In summary, when we assign the .Library path to the LD_PRELOAD environment variable, the library is enclosed in the running file.

Export our library to **LD_PRELOAD** environment variable with **export command**

```
export LD_PRELOAD=&quot;/home/mehmet/evil_library.so&quot;
```

Now, when our program is run, instead of &quot;Hello world&quot;, &quot;Hijacked!&quot; He will give our message.



![](upload://1QiZeS0LvLlOGX53kTTkg0sJ8Ze.jpeg)</description>
    
    <lastBuildDate>Sun, 01 Nov 2020 11:33:31 +0000</lastBuildDate>
    <category>Linux</category>
    <atom:link href="https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Load-Time Function Hijacking ( via Shared object injection)</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707/6</link>
        <pubDate>Mon, 14 Dec 2020 13:17:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-22707-6</guid>
        <source url="https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707.rss">Load-Time Function Hijacking ( via Shared object injection)</source>
      </item>
      <item>
        <title>Load-Time Function Hijacking ( via Shared object injection)</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            <p>I 'm sharing this just in case somebody need it :<br>
</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <a href="https://blog.netspi.com/function-hooking-part-i-hooking-shared-library-function-calls-in-linux/" target="_blank" rel="noopener" title="01:36PM - 08 July 2013">NetSPI Blog – 8 Jul 13</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/f/f508c3460e48b96fb38b9dacdd084d3e4215f1b5.png" class="thumbnail onebox-avatar" width="270" height="270">

<h3><a href="https://blog.netspi.com/function-hooking-part-i-hooking-shared-library-function-calls-in-linux/" target="_blank" rel="noopener">Function Hooking Part I: Hooking Shared Library Function Calls in Linux</a></h3>

<p>When assessing an application for weaknesses in a linux environment, we won’t always have the luxury of freely available source code or documentation. One method of monitoring applications to extract information is to attach a debugger to the...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
          <p><a href="https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707/4</link>
        <pubDate>Sun, 16 Aug 2020 04:12:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-22707-4</guid>
        <source url="https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707.rss">Load-Time Function Hijacking ( via Shared object injection)</source>
      </item>
      <item>
        <title>Load-Time Function Hijacking ( via Shared object injection)</title>
        <dc:creator><![CDATA[0x0fy]]></dc:creator>
        <description><![CDATA[
            <p>Yes, as you said, all binaries on the system using puts function are affected. Unless the LD_PORELOAD environment variable is changed. I haven’t found a solution for this yet.</p>
<p>And Yes, this is already a method used to Bypass Anti Debugging systems and SSL Pinning. I could write a writeup for this in the future.</p>
          <p><a href="https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707/3</link>
        <pubDate>Sat, 15 Aug 2020 06:54:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-22707-3</guid>
        <source url="https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707.rss">Load-Time Function Hijacking ( via Shared object injection)</source>
      </item>
      <item>
        <title>Load-Time Function Hijacking ( via Shared object injection)</title>
        <dc:creator><![CDATA[messede]]></dc:creator>
        <description><![CDATA[
            <p>Nice write up , but   wouldn’t this  hijack <code>puts</code> call for all binaries across the system ? , wouldn’t  it    be wise to check the caller before performing the hijack ? , and how could we do that ? , also would it be possible to hijack SSL encryption routines of a binaries  to retrieve plaintext HTTP (particularly in cases where a binary employs SSL pinning and reversing is not up your alley).</p>
          <p><a href="https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707/2</link>
        <pubDate>Sat, 15 Aug 2020 04:10:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-22707-2</guid>
        <source url="https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707.rss">Load-Time Function Hijacking ( via Shared object injection)</source>
      </item>
      <item>
        <title>Load-Time Function Hijacking ( via Shared object injection)</title>
        <dc:creator><![CDATA[0x0fy]]></dc:creator>
        <description><![CDATA[
            <p>Hello guys, welcome to my writeup. I will get to the subject without further ado</p>
<p><strong>First of all, we need to know;</strong></p>
<p><em>Load-Time:</em> Before a software starts running, it has a load time. It installs its requirements until the program is fully functional (Libraries, Memory Regions)</p>
<p><em>Function Hooking:</em> Replacing or editing a function given in the software with a fake function.</p>
<p><strong>See the Functions used by a software</strong>;</p>
<p>You can use the ftrace binarys used by the majority in linux to see the functions used in the software.</p>
<p><strong>Let’s Start</strong><br>
Now I assume that we open linux and compile the following code:</p>
<blockquote>
<pre><code>#include &lt;stdio.h&gt;

int main(){

  puts("Hello world !");

}
</code></pre>
</blockquote>
<blockquote>
<p>Compiling : gcc hello.c -o hello</p>
</blockquote>
<p>What we’re going to do now is to replace this set function with the fake sets we provided at load time. Thus, the function we wrote will work, not the function written in the program.</p>
<p><strong>Writing the Fake library to hook the function:</strong></p>
<p>For the puts function, the creation of the fake library is as follows:</p>
<pre><code class="lang-auto">     
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;dlfcn.h&gt;
 
int puts(const char *message) {
 
  int (*new_puts)(const char *message);
 
  new_puts = dlsym(RTLD_NEXT, "puts");
 
  return new_puts("Hijacked!");
}

</code></pre>
<p>The library is simply puts (); Creates a fake of the function dlsym (); allows it to replace the original thanks to its function.</p>
<p>The dlsym(); function takes two arguments. The first of these, the RTLD_NEXT enum, tells the dynamic loader API part to return to the next instance linked with the 2nd argument. The last argument is asking for the name of the sample to be returned to, and this is the puts function, which we will substitute forged.</p>
<blockquote>
<p>return new_puts(“Hijacked!”);</p>
</blockquote>
<p>Here, puts (); The function that will replace the function is specified.</p>
<p><strong>Compiling the library and transferring it to LD_PRELOAD</strong></p>
<p>Compiling The Library :</p>
<pre><code class="lang-auto">gcc evil_library.c -o evil_library.so -fPIC -shared -ldl -D_GNU_SOURCE
</code></pre>
<p>The <strong>LD_PRELOAD</strong> environment variable can execute the library we provided at the moment the running software starts, so that we can manipulate the software.</p>
<p>In summary, when we assign the .Library path to the LD_PRELOAD environment variable, the library is enclosed in the running file.</p>
<p>Export our library to <strong>LD_PRELOAD</strong> environment variable with <strong>export command</strong></p>
<pre><code class="lang-auto">export LD_PRELOAD="/home/mehmet/evil_library.so"
</code></pre>
<p>Now, when our program is run, instead of “Hello world”, “Hijacked!” He will give our message.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/0/0cebd3d73710bbe455523d234301d6f5cdf6394c.jpeg" data-download-href="/uploads/short-url/1QiZeS0LvLlOGX53kTTkg0sJ8Ze.jpeg?dl=1" title="" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0cebd3d73710bbe455523d234301d6f5cdf6394c_2_690x499.jpeg" alt="" data-base62-sha1="1QiZeS0LvLlOGX53kTTkg0sJ8Ze" width="690" height="499" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0cebd3d73710bbe455523d234301d6f5cdf6394c_2_690x499.jpeg, https://0x00sec.s3.amazonaws.com/optimized/2X/0/0cebd3d73710bbe455523d234301d6f5cdf6394c_2_1035x748.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/0/0cebd3d73710bbe455523d234301d6f5cdf6394c.jpeg 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0cebd3d73710bbe455523d234301d6f5cdf6394c_2_10x10.png"></a></div><p></p>
          <p><a href="https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707/1</link>
        <pubDate>Fri, 14 Aug 2020 21:11:27 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-22707-1</guid>
        <source url="https://0x00sec.org/t/load-time-function-hijacking-via-shared-object-injection/22707.rss">Load-Time Function Hijacking ( via Shared object injection)</source>
      </item>
  </channel>
</rss>
