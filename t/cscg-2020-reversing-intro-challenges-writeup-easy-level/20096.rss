<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>CSCG 2020 reversing intro challenges writeup (easy level)</title>
    <link>https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096</link>
    <description>Hello everyone, I hope all of you are safe out there, before we start I have to mention that I don’t have a good  experience in this field yet, so if you spot any mistakes or think of better methods of doing this, please let me know in the comments


[CSCG](https://earth.2020.cscg.de/) 2020 is a German Cyber Security Challenge Qualification [CTF](https://www.youtube.com/watch?v=8ev9ZX9J45A) which has some entry level challenges in couple fields, today we will be looking at the first 3 reverse engineering challenges


This write-up is targeting beginners like my self, so I will be demonstrating some easy ways to solve each challenge
## PREREQUISITE
In order to understand this write-up right, it’s recommended to have a basic idea about the following subjects
    • how C language code is structured
    • assembly language knowledge and debugging 
    • XOR
    • some familiarity with Linux


## first challenge
so let’s begin. After setting up an account in the CTF website, downloading the first challenge and unzipping it, you get two files, flag and rev1, the latter appears to be executable
now we need to get an idea about what those files might be, `file` is a great utility to get couple information about files, `file *` gives the following result : 
```
flag: ASCII text
rev1: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=c26549fbcc84a4199635818d97bd48b69eea5fb2, not stripped
```
this might seem a bit overwhelming but in an entry level challenge we’re only interested in 2 peaces of information, `ELF 64-bit executable`, and `not stripped`, meaning rev1 is an executable that runs under Linux 64 bits systems, and contains some strings that will help us debugging/reversing it if we had to 

the first file is obviously just a text file with the content : CSCG{real_flag_is_on_the_server}, as it was mentioned on the website that we should send the password we get from the executable to a server to get the actual flag

**So how would we approach this ?**

Trying to execute rev1 gives the following result 
![1-asking_for_password|283x85](upload://jdJVDVKslG2wOqtF8M3ZVitOpVk.png) 

&quot;password is not password&quot; **hmm okay**

“asking for a password” means that rev1 takes your input and compare it with some string that may or may not be hard-coded in the binary

`strings` is a great command to get all hard-coded strings in an executable

`strings rev1` gives the following result : 

![2-strings|690x473](upload://clj4RmXFVL9ieE9kWLw88kz6SIV.png) 

We can ignore most of it, but if you look close enough, you’ll see “give me your password” which is what we got earlier, and right underneath it, this weird string “ y0u_5h3ll_p455”, (from the Lord of the Rings series :stuck_out_tongue:) let’s try throwing that string at rev1 and .. 

![3-voila|489x103](upload://l0sZpWreMYgHuvgXAE9dOeAdYNh.png) 


now sending that string to the server gives the following result


![4-nc|426x108](upload://nNwQdppeclHjeUAJ9QCgsUIVhvk.png) 

Voilà! Easy 40 points earned without trying to debug anything



if you don’t like working with terminals that much, there is this nice tool called [ **Binary** **Ninja** ](https://binary.ninja/), which is great when it comes to static analysis, running it with rev1 gives us a nice graphical interface explains the executable branches (this where some assembly knowledge comes handy) there are also 3 ways of displaying code, from pure assembly to human-friendy-code, however I won’t be using that as I prefer reading the former :stuck_out_tongue:

after jumping to main() (which the tools detect the address of, automatically, thanks to the binary not being stripped), we get this view
![5-binaryninja|475x500](upload://nSfaoPpKnMt1WG2Z0C8F06R2Pfo.png) 


even if you have no idea about what’s going on, you can easily spot the password, and strcmp() which is used to compare it with your input

there also the command `ltrace` which you can use to trace system calls, after executing it with rev1,and throwing a random string at it,  you can see it being compared just like in the following picture

![6-trace|690x183](upload://2XeA12f6LC6qGBuVCOL4S17vUXw.png) 

**note** : we see the same string in both read() and strcmp() because rev1 compares our input with the password directly without changing it
and those where couple way of how you can approach this binary

## second challenge

the second challenges, gives the same files, same prompt, unless there is no hard-coded string this time, try running `strings` and you won’t see any password

running it with binary ninja, we get the following view
![7-second_challenge_binaryninja|690x340](upload://ySuJ99CFYu6Q16ryDoDX4VV7rrI.png) 


hmm, this time rev2 is not comparing our input string directly, but rather using a loop (denoted by the green and the blue lines) to change it byte by byte (subtracting 0x77 from each byte to be specific hence the `sub eax, 0x77`), and that explains why we couldn’t find any useful strings with the `strings` command, because all the bytes are non-ascii values

now we know that each byte is decreased by 0x77 and compared to something else, so to retrieve the password we should know that “something else” and increase each byte of it by 0x77

The easiest way to figure it out would be using `ltrace` command again, which shows us the following
![8-ltrace_again|690x144](upload://niuAs6yYNyTFRp6uNouhO7xvayk.png) 

now we see some weird characters which are just an encoding to represent non ascii characters I believe, we need to add 0x77 to each byte to get the password, for that I wrote something like this

```
#include&lt;stdio.h&gt;

int main(void){
        unsigned int i;
        int pass[] = {&#39;\374&#39;, &#39;\375&#39;, &#39;\352&#39;, &#39;\300&#39;, &#39;\272&#39;, &#39;\354&#39;, &#39;\350&#39;, &#39;\375&#39;, &#39;\373&#39;, &#39;\275&#39;, &#39;\367&#39;, &#39;\276&#39;, &#39;\357&#39;, &#39;\271&#39;, &#39;\373&#39;, &#39;\366&#39;, &#39;\275&#39;, &#39;\300&#39;, &#39;\272&#39;, &#39;\271&#39;, &#39;\367&#39;, &#39;\350&#39;, &#39;\362&#39;, &#39;\375&#39;, &#39;\350&#39;, &#39;\362&#39;, &#39;\374&#39;};

        for(i = 0 ; i &lt; sizeof(pass) / sizeof(pass[0]) ; i++)
                putchar(pass[i] + 0x77);
        puts(&quot;&quot;);
        return 0;
}

```

running this programs gives : “sta71c_tr4n5f0rm4710n_it_is” which I’m positive that it’s another movie’s quote that I don’t know about

![9-second_password|374x41](upload://h3fYGUIAEulMnXXwmg4AEnd4toQ.png) 

submitting it to the server we get

![10-second_challenge_solved|690x88](upload://teBCyk2r5TEFkwgc2Uv3kU6CweI.png) 
another not-so-hard 47 points !

## Third challenge
this is very similar to the second one, except this time we get a password with `file` and `ltrace`, just one little problem, it’s not the same!

`string`’s output : 
![12-strings_output|348x86](upload://2NGmD72Tvo60tgzrlyFcBk1at5e.png) 


`ltrace`’s output : 
![13-ltrace_output|690x173](upload://e7oG8wCAvveeBUNfD457YNBEYWd.png) 



`strings` gives us 2 lines, when `ltrace` show one long line only, with more characters than `strings`&#39;s output, well .. this is because strings by definition are a sequence of bytes followed by and null byte (‘\0’ byte), we can see that our password in second picture contains 3 of them, so `strings` sees that password as 4 separate strings, as for why the second one has more character than the first, `strings` only shows strings above a certain length, so “17” and “5J” are ignored because they’re too short (are you tired of the word “strings” yet ? :stuck_out_tongue: 

Now we know the password, now we just have to figure out exactly what input we should throw at rev3 so it can match that (remember that rev3 modifies our input before comparing it)


and for that we need to take a look at the assembly code, opening binaryninja, we get this view 

![11-xor|690x352](upload://otFyOCVTkz6faFLtlKj2ZNx8yPY.png) 

we’re only focusing on the left box cause that’s where the magic happens, if you can’t figure out what’s happening there, I advise you to use the other human-friendly displaying mode I talked about earlier, or just learn some assembly if you’re interested in this field :P

basically the codes loops over each byte of the input, xor it with (its index in the input string + 0xa) add subtract two from it

so if your input is “hey”

the code will do the following

```
pass[0] = (‘h’ ^ (0 + 0xa) ) -2

pass[1] = (‘e’ ^ (1 + 0xa) ) - 2
```


so to reverse this algorithm we should add 2 to each byte of the password we got earlier, then Xor it with (it’s index + 0xa)

and for that I wrote this code

```

#include&lt;stdio.h&gt;
#include&lt;string.h&gt;

int main(void){
        char ptr[] = {&#39;l&#39;, &#39;p&#39;, &#39;`&#39;, &#39;7&#39;, &#39;a&#39;, &#39;&lt;&#39;, &#39;q&#39;, &#39;L&#39;, &#39;w&#39;, &#39;\036&#39;, &#39;k&#39;, &#39;H&#39;, &#39;o&#39;, &#39;p&#39;, &#39;t&#39;, &#39;(&#39;, &#39;f&#39;, &#39;-&#39;, &#39;f&#39;, &#39;*&#39;, &#39;,&#39;, &#39;o&#39;,&#39;}&#39;, &#39;V&#39;, &#39;\017&#39;, &#39;\025&#39;, &#39;J&#39;};
        unsigned int i = 0;

        for(i = 0;i &lt; sizeof(ptr)/sizeof(ptr[0]); i++)
                printf(&quot;%c&quot;, (ptr[i] + 2) ^ (0xa + i));
        puts(&quot;&quot;);
        return 0;
}
```

After running this code we get the following flag : “dyn4m1c_k3y_gen3r4t10n_y34h” which all I can say about is “lol!” 

![14-last_flag|385x46](upload://uTo9KuGl469QxOiOxqMInDW52j1.png) 



One last thing we need to do ..
![15-last_hecking_flag|690x92](upload://gr7BwAfvkeeQDF6oiVB87pd9q0a.png) 


And there is our last laughable flag that gets us another 51 points !
I really hopped I could explain this so even beginners can understand and not find it boring





as this my first write up, I would like to thank @dtm and @leeky so much for putting up with my most-of-the-time-stupid questions, as well as other people who put me on track, like yeni, ayoub and hammadi

if anything unclear or fuzzy don’t hesitate to ask about it, Jeff’s out</description>
    
    <lastBuildDate>Sun, 02 Aug 2020 12:27:58 +0000</lastBuildDate>
    <category>Challenges</category>
    <atom:link href="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>CSCG 2020 reversing intro challenges writeup (easy level)</title>
        <dc:creator><![CDATA[Danus]]></dc:creator>
        <description><![CDATA[
            <p>This is a dream come true for me</p>
          <p><a href="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096/9</link>
        <pubDate>Thu, 04 Jun 2020 04:29:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20096-9</guid>
        <source url="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096.rss">CSCG 2020 reversing intro challenges writeup (easy level)</source>
      </item>
      <item>
        <title>CSCG 2020 reversing intro challenges writeup (easy level)</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Given that OllyDbg is for Windows executables and these are Linux binaries, it shouldn’t work. If there are any Windows binaries in the CTF, they might work (OllyDbg is quite outdated).</p>
          <p><a href="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096/8</link>
        <pubDate>Wed, 03 Jun 2020 14:31:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20096-8</guid>
        <source url="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096.rss">CSCG 2020 reversing intro challenges writeup (easy level)</source>
      </item>
      <item>
        <title>CSCG 2020 reversing intro challenges writeup (easy level)</title>
        <dc:creator><![CDATA[landi58]]></dc:creator>
        <description><![CDATA[
            <p>can OLY DBG work for these CTFs…?</p>
          <p><a href="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096/7</link>
        <pubDate>Wed, 03 Jun 2020 13:55:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20096-7</guid>
        <source url="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096.rss">CSCG 2020 reversing intro challenges writeup (easy level)</source>
      </item>
      <item>
        <title>CSCG 2020 reversing intro challenges writeup (easy level)</title>
        <dc:creator><![CDATA[jeff]]></dc:creator>
        <description><![CDATA[
            <p>glad you liked it!<br>
for now I only use binary ninja for static analysis and keep firing it up every 30 minutes, and gdb for dynamic analysis, but I’m sure the guys on discord can give more help, you should check it out if you haven’t already!</p>
          <p><a href="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096/6</link>
        <pubDate>Wed, 03 Jun 2020 13:47:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20096-6</guid>
        <source url="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096.rss">CSCG 2020 reversing intro challenges writeup (easy level)</source>
      </item>
      <item>
        <title>CSCG 2020 reversing intro challenges writeup (easy level)</title>
        <dc:creator><![CDATA[landi58]]></dc:creator>
        <description><![CDATA[
            <p>Your explaination is so good. I mean, i don’t know much about  CTF but after reading your writeup, i understands everything and now i am also gets interested in CTF exercies. I will practice these exercises now. Just want to ask you can you please suggest some free Reverse engineering tool other than Binary ninja because its too expensive for me. And i don’t like ghidra also because it’s not that much user friendly. if you have any suggestions for free reverese engineering tool then please tell me about that.</p>
<p>Thanks againg for great writeup.</p>
          <p><a href="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096/5</link>
        <pubDate>Wed, 03 Jun 2020 13:41:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20096-5</guid>
        <source url="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096.rss">CSCG 2020 reversing intro challenges writeup (easy level)</source>
      </item>
      <item>
        <title>CSCG 2020 reversing intro challenges writeup (easy level)</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Nice writeup! <img src="https://0x00sec.org/images/emoji/twitter/slightly_smiling_face.png?v=9" title=":slightly_smiling_face:" class="emoji" alt=":slightly_smiling_face:"></p>
          <p><a href="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096/4</link>
        <pubDate>Wed, 03 Jun 2020 09:16:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20096-4</guid>
        <source url="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096.rss">CSCG 2020 reversing intro challenges writeup (easy level)</source>
      </item>
      <item>
        <title>CSCG 2020 reversing intro challenges writeup (easy level)</title>
        <dc:creator><![CDATA[jeff]]></dc:creator>
        <description><![CDATA[
            <p>Hello everyone, I hope all of you are safe out there, before we start I have to mention that I don’t have a good  experience in this field yet, so if you spot any mistakes or think of better methods of doing this, please let me know in the comments</p>
<p><a href="https://earth.2020.cscg.de/" rel="noopener nofollow ugc">CSCG</a> 2020 is a German Cyber Security Challenge Qualification <a href="https://www.youtube.com/watch?v=8ev9ZX9J45A" rel="noopener nofollow ugc">CTF</a> which has some entry level challenges in couple fields, today we will be looking at the first 3 reverse engineering challenges</p>
<p>This write-up is targeting beginners like my self, so I will be demonstrating some easy ways to solve each challenge</p>
<h2>PREREQUISITE</h2>
<p>In order to understand this write-up right, it’s recommended to have a basic idea about the following subjects<br>
• how C language code is structured<br>
• assembly language knowledge and debugging<br>
• XOR<br>
• some familiarity with Linux</p>
<h2>first challenge</h2>
<p>so let’s begin. After setting up an account in the CTF website, downloading the first challenge and unzipping it, you get two files, flag and rev1, the latter appears to be executable<br>
now we need to get an idea about what those files might be, <code>file</code> is a great utility to get couple information about files, <code>file *</code> gives the following result :</p>
<pre><code class="lang-auto">flag: ASCII text
rev1: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=c26549fbcc84a4199635818d97bd48b69eea5fb2, not stripped
</code></pre>
<p>this might seem a bit overwhelming but in an entry level challenge we’re only interested in 2 peaces of information, <code>ELF 64-bit executable</code>, and <code>not stripped</code>, meaning rev1 is an executable that runs under Linux 64 bits systems, and contains some strings that will help us debugging/reversing it if we had to</p>
<p>the first file is obviously just a text file with the content : CSCG{real_flag_is_on_the_server}, as it was mentioned on the website that we should send the password we get from the executable to a server to get the actual flag</p>
<p><strong>So how would we approach this ?</strong></p>
<p>Trying to execute rev1 gives the following result<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/8/86b6f0d39147f4dc40eb6340c6aca914398dd406.png" alt="1-asking_for_password" data-base62-sha1="jdJVDVKslG2wOqtF8M3ZVitOpVk" width="283" height="85"></p>
<p>“password is not password” <strong>hmm okay</strong></p>
<p>“asking for a password” means that rev1 takes your input and compare it with some string that may or may not be hard-coded in the binary</p>
<p><code>strings</code> is a great command to get all hard-coded strings in an executable</p>
<p><code>strings rev1</code> gives the following result :</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/5/5682b24d44081ae6d21512598d11a35fabacd739.png" data-download-href="/uploads/short-url/clj4RmXFVL9ieE9kWLw88kz6SIV.png?dl=1" title="2-strings" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5682b24d44081ae6d21512598d11a35fabacd739_2_690x473.png" alt="2-strings" data-base62-sha1="clj4RmXFVL9ieE9kWLw88kz6SIV" width="690" height="473" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5682b24d44081ae6d21512598d11a35fabacd739_2_690x473.png, https://0x00sec.s3.amazonaws.com/original/2X/5/5682b24d44081ae6d21512598d11a35fabacd739.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/5/5682b24d44081ae6d21512598d11a35fabacd739.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/5/5682b24d44081ae6d21512598d11a35fabacd739_2_10x10.png"></a></div><p></p>
<p>We can ignore most of it, but if you look close enough, you’ll see “give me your password” which is what we got earlier, and right underneath it, this weird string “ y0u_5h3ll_p455”, (from the Lord of the Rings series <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:">) let’s try throwing that string at rev1 and …</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/933b2f4343a9c1b77cef8c3203aeebd268a2b6f7.png" alt="3-voila" data-base62-sha1="l0sZpWreMYgHuvgXAE9dOeAdYNh" width="489" height="103"></p>
<p>now sending that string to the server gives the following result</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a6cb4e74d5a0a1c3faf318acdcbdfc2ac6f8c4d2.png" alt="4-nc" data-base62-sha1="nNwQdppeclHjeUAJ9QCgsUIVhvk" width="426" height="108"></p>
<p>Voilà! Easy 40 points earned without trying to debug anything</p>
<p>if you don’t like working with terminals that much, there is this nice tool called <a href="https://binary.ninja/" rel="noopener nofollow ugc"> <strong>Binary</strong> <strong>Ninja</strong> </a>, which is great when it comes to static analysis, running it with rev1 gives us a nice graphical interface explains the executable branches (this where some assembly knowledge comes handy) there are also 3 ways of displaying code, from pure assembly to human-friendy-code, however I won’t be using that as I prefer reading the former <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>after jumping to main() (which the tools detect the address of, automatically, thanks to the binary not being stripped), we get this view<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/a/a753bf99221a3e3bc37f66dd4e0d70cbb486a986.png" data-download-href="/uploads/short-url/nSfaoPpKnMt1WG2Z0C8F06R2Pfo.png?dl=1" title="5-binaryninja" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a753bf99221a3e3bc37f66dd4e0d70cbb486a986_2_475x500.png" alt="5-binaryninja" data-base62-sha1="nSfaoPpKnMt1WG2Z0C8F06R2Pfo" width="475" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a753bf99221a3e3bc37f66dd4e0d70cbb486a986_2_475x500.png, https://0x00sec.s3.amazonaws.com/original/2X/a/a753bf99221a3e3bc37f66dd4e0d70cbb486a986.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/a/a753bf99221a3e3bc37f66dd4e0d70cbb486a986.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a753bf99221a3e3bc37f66dd4e0d70cbb486a986_2_10x10.png"></a></div><p></p>
<p>even if you have no idea about what’s going on, you can easily spot the password, and strcmp() which is used to compare it with your input</p>
<p>there also the command <code>ltrace</code> which you can use to trace system calls, after executing it with rev1,and throwing a random string at it,  you can see it being compared just like in the following picture</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/1/14b6833bb36873459c17bf79b2d16730ad5cf622.png" data-download-href="/uploads/short-url/2XeA12f6LC6qGBuVCOL4S17vUXw.png?dl=1" title="6-trace" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/1/14b6833bb36873459c17bf79b2d16730ad5cf622_2_690x183.png" alt="6-trace" data-base62-sha1="2XeA12f6LC6qGBuVCOL4S17vUXw" width="690" height="183" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/1/14b6833bb36873459c17bf79b2d16730ad5cf622_2_690x183.png, https://0x00sec.s3.amazonaws.com/original/2X/1/14b6833bb36873459c17bf79b2d16730ad5cf622.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/1/14b6833bb36873459c17bf79b2d16730ad5cf622.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/14b6833bb36873459c17bf79b2d16730ad5cf622_2_10x10.png"></a></div><p></p>
<p><strong>note</strong> : we see the same string in both read() and strcmp() because rev1 compares our input with the password directly without changing it<br>
and those where couple way of how you can approach this binary</p>
<h2>second challenge</h2>
<p>the second challenges, gives the same files, same prompt, unless there is no hard-coded string this time, try running <code>strings</code> and you won’t see any password</p>
<p>running it with binary ninja, we get the following view<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/f/f472ecc4492972195d53800009535c5184d7dfda.png" data-download-href="/uploads/short-url/ySuJ99CFYu6Q16ryDoDX4VV7rrI.png?dl=1" title="7-second_challenge_binaryninja" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f472ecc4492972195d53800009535c5184d7dfda_2_690x340.png" alt="7-second_challenge_binaryninja" data-base62-sha1="ySuJ99CFYu6Q16ryDoDX4VV7rrI" width="690" height="340" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f472ecc4492972195d53800009535c5184d7dfda_2_690x340.png, https://0x00sec.s3.amazonaws.com/original/2X/f/f472ecc4492972195d53800009535c5184d7dfda.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/f/f472ecc4492972195d53800009535c5184d7dfda.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f472ecc4492972195d53800009535c5184d7dfda_2_10x10.png"></a></div><p></p>
<p>hmm, this time rev2 is not comparing our input string directly, but rather using a loop (denoted by the green and the blue lines) to change it byte by byte (subtracting 0x77 from each byte to be specific hence the <code>sub eax, 0x77</code>), and that explains why we couldn’t find any useful strings with the <code>strings</code> command, because all the bytes are non-ascii values</p>
<p>now we know that each byte is decreased by 0x77 and compared to something else, so to retrieve the password we should know that “something else” and increase each byte of it by 0x77</p>
<p>The easiest way to figure it out would be using <code>ltrace</code> command again, which shows us the following<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/a/a3492ad5e52accae247aa6caacd6dbee7f2f35b0.png" data-download-href="/uploads/short-url/niuAs6yYNyTFRp6uNouhO7xvayk.png?dl=1" title="8-ltrace_again" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a3492ad5e52accae247aa6caacd6dbee7f2f35b0_2_690x144.png" alt="8-ltrace_again" data-base62-sha1="niuAs6yYNyTFRp6uNouhO7xvayk" width="690" height="144" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a3492ad5e52accae247aa6caacd6dbee7f2f35b0_2_690x144.png, https://0x00sec.s3.amazonaws.com/original/2X/a/a3492ad5e52accae247aa6caacd6dbee7f2f35b0.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/a/a3492ad5e52accae247aa6caacd6dbee7f2f35b0.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/a/a3492ad5e52accae247aa6caacd6dbee7f2f35b0_2_10x10.png"></a></div><p></p>
<p>now we see some weird characters which are just an encoding to represent non ascii characters I believe, we need to add 0x77 to each byte to get the password, for that I wrote something like this</p>
<pre><code class="lang-auto">#include&lt;stdio.h&gt;

int main(void){
        unsigned int i;
        int pass[] = {'\374', '\375', '\352', '\300', '\272', '\354', '\350', '\375', '\373', '\275', '\367', '\276', '\357', '\271', '\373', '\366', '\275', '\300', '\272', '\271', '\367', '\350', '\362', '\375', '\350', '\362', '\374'};

        for(i = 0 ; i &lt; sizeof(pass) / sizeof(pass[0]) ; i++)
                putchar(pass[i] + 0x77);
        puts("");
        return 0;
}

</code></pre>
<p>running this programs gives : “sta71c_tr4n5f0rm4710n_it_is” which I’m positive that it’s another movie’s quote that I don’t know about</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/77833afe2a302442307100f0f5551e9bde82ab48.png" alt="9-second_password" data-base62-sha1="h3fYGUIAEulMnXXwmg4AEnd4toQ" width="374" height="41"></p>
<p>submitting it to the server we get</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/cce5bdb3587f3a1b1d4f033c5ac06408c8a8a8c0.png" alt="10-second_challenge_solved" data-base62-sha1="teBCyk2r5TEFkwgc2Uv3kU6CweI" width="690" height="88"><br>
another not-so-hard 47 points !</p>
<h2>Third challenge</h2>
<p>this is very similar to the second one, except this time we get a password with <code>file</code> and <code>ltrace</code>, just one little problem, it’s not the same!</p>
<p><code>string</code>’s output :<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/1/13a2190db8e9ac0ce495d175d45dbb247842bc38.png" alt="12-strings_output" data-base62-sha1="2NGmD72Tvo60tgzrlyFcBk1at5e" width="348" height="86"></p>
<p><code>ltrace</code>’s output :<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/6/62f485d1a62086f85e96f0007c3646dc23187e79.png" data-download-href="/uploads/short-url/e7oG8wCAvveeBUNfD457YNBEYWd.png?dl=1" title="13-ltrace_output" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/6/62f485d1a62086f85e96f0007c3646dc23187e79_2_690x173.png" alt="13-ltrace_output" data-base62-sha1="e7oG8wCAvveeBUNfD457YNBEYWd" width="690" height="173" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/6/62f485d1a62086f85e96f0007c3646dc23187e79_2_690x173.png, https://0x00sec.s3.amazonaws.com/original/2X/6/62f485d1a62086f85e96f0007c3646dc23187e79.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/6/62f485d1a62086f85e96f0007c3646dc23187e79.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/6/62f485d1a62086f85e96f0007c3646dc23187e79_2_10x10.png"></a></div><p></p>
<p><code>strings</code> gives us 2 lines, when <code>ltrace</code> show one long line only, with more characters than <code>strings</code>'s output, well … this is because strings by definition are a sequence of bytes followed by and null byte (‘\0’ byte), we can see that our password in second picture contains 3 of them, so <code>strings</code> sees that password as 4 separate strings, as for why the second one has more character than the first, <code>strings</code> only shows strings above a certain length, so “17” and “5J” are ignored because they’re too short (are you tired of the word “strings” yet ? <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>Now we know the password, now we just have to figure out exactly what input we should throw at rev3 so it can match that (remember that rev3 modifies our input before comparing it)</p>
<p>and for that we need to take a look at the assembly code, opening binaryninja, we get this view</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/a/ab8ec8ccc019729f10010ecbb108ba26e1f95c0e.png" data-download-href="/uploads/short-url/otFyOCVTkz6faFLtlKj2ZNx8yPY.png?dl=1" title="11-xor" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/a/ab8ec8ccc019729f10010ecbb108ba26e1f95c0e_2_690x352.png" alt="11-xor" data-base62-sha1="otFyOCVTkz6faFLtlKj2ZNx8yPY" width="690" height="352" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/a/ab8ec8ccc019729f10010ecbb108ba26e1f95c0e_2_690x352.png, https://0x00sec.s3.amazonaws.com/original/2X/a/ab8ec8ccc019729f10010ecbb108ba26e1f95c0e.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/a/ab8ec8ccc019729f10010ecbb108ba26e1f95c0e.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/a/ab8ec8ccc019729f10010ecbb108ba26e1f95c0e_2_10x10.png"></a></div><p></p>
<p>we’re only focusing on the left box cause that’s where the magic happens, if you can’t figure out what’s happening there, I advise you to use the other human-friendly displaying mode I talked about earlier, or just learn some assembly if you’re interested in this field <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>basically the codes loops over each byte of the input, xor it with (its index in the input string + 0xa) add subtract two from it</p>
<p>so if your input is “hey”</p>
<p>the code will do the following</p>
<pre><code class="lang-auto">pass[0] = (‘h’ ^ (0 + 0xa) ) -2

pass[1] = (‘e’ ^ (1 + 0xa) ) - 2
</code></pre>
<p>so to reverse this algorithm we should add 2 to each byte of the password we got earlier, then Xor it with (it’s index + 0xa)</p>
<p>and for that I wrote this code</p>
<pre><code class="lang-auto">
#include&lt;stdio.h&gt;
#include&lt;string.h&gt;

int main(void){
        char ptr[] = {'l', 'p', '`', '7', 'a', '&lt;', 'q', 'L', 'w', '\036', 'k', 'H', 'o', 'p', 't', '(', 'f', '-', 'f', '*', ',', 'o','}', 'V', '\017', '\025', 'J'};
        unsigned int i = 0;

        for(i = 0;i &lt; sizeof(ptr)/sizeof(ptr[0]); i++)
                printf("%c", (ptr[i] + 2) ^ (0xa + i));
        puts("");
        return 0;
}
</code></pre>
<p>After running this code we get the following flag : “dyn4m1c_k3y_gen3r4t10n_y34h” which all I can say about is “lol!”</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d88419aedc2631cf8691e316a67611574347fbfb.png" alt="14-last_flag" data-base62-sha1="uTo9KuGl469QxOiOxqMInDW52j1" width="385" height="46"></p>
<p>One last thing we need to do …<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/7/7333aac3f2c7454b9a59194a16f227af4226f39a.png" data-download-href="/uploads/short-url/gr7BwAfvkeeQDF6oiVB87pd9q0a.png?dl=1" title="15-last_hecking_flag" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/7/7333aac3f2c7454b9a59194a16f227af4226f39a_2_690x92.png" alt="15-last_hecking_flag" data-base62-sha1="gr7BwAfvkeeQDF6oiVB87pd9q0a" width="690" height="92" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/7/7333aac3f2c7454b9a59194a16f227af4226f39a_2_690x92.png, https://0x00sec.s3.amazonaws.com/original/2X/7/7333aac3f2c7454b9a59194a16f227af4226f39a.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/7/7333aac3f2c7454b9a59194a16f227af4226f39a.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/7/7333aac3f2c7454b9a59194a16f227af4226f39a_2_10x10.png"></a></div><p></p>
<p>And there is our last laughable flag that gets us another 51 points !<br>
I really hopped I could explain this so even beginners can understand and not find it boring</p>
<p>as this my first write up, I would like to thank <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> and <a class="mention" href="https://0x00sec.org/u/leeky">@leeky</a> so much for putting up with my most-of-the-time-stupid questions, as well as other people who put me on track, like yeni, ayoub and hammadi</p>
<p>if anything unclear or fuzzy don’t hesitate to ask about it, Jeff’s out</p>
          <p><a href="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096/1</link>
        <pubDate>Sat, 28 Mar 2020 02:10:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20096-1</guid>
        <source url="https://0x00sec.org/t/cscg-2020-reversing-intro-challenges-writeup-easy-level/20096.rss">CSCG 2020 reversing intro challenges writeup (easy level)</source>
      </item>
  </channel>
</rss>
