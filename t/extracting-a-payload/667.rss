<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Extracting a Payload</title>
    <link>https://0x00sec.org/t/extracting-a-payload/667</link>
    <description>as @0x00pf explained in his [ELF injection tutorial](https://0x00sec.org/t/elfun-file-injector/410/19), you can extract the .text (actualy code) from an ELF (binary) file to get the payload.
There are many ways to do this and picoflamingo showed us one way.
Today I will share a shell script I wrote that does the same thing and prints it in ascii on your terminal, or wherever you redirect / pipe it.

```
#!/bin/bash
xxd -g 1 -s `h2d $(objdump -h $1 | grep .text | awk -e &#39;{print $6}&#39;)` $1
```
That&#39;s all, it&#39;s pretty short, but can be very functional for shellcode development.
You can check `man xxd` for more options to change it&#39;s output format.

Hope it&#39;s of any use to you !

I forgot to include h2d, it&#39;s a C program I wrote :slight_smile:

```c
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main(int argc, char *argv[])
{
    int indx = strlen(argv[1]) - 1;
    int i,j=1, sum = 0;
    for(i=indx;i&gt;=0;i--,j*=16) {
        if(argv[1][i] &gt;= &#39;0&#39; &amp;&amp; argv[1][i] &lt;= &#39;9&#39;)
            sum += ((argv[1][i] - &#39;0&#39;) * j);
        else
            sum += ((argv[1][i] - &#39;a&#39; + 10) * j);
    }
    printf(&quot;%d\n&quot;, sum);

    return 0;
}
```

After compiling you need to put it in your path, you can do this by moving it to /usr/bin, or make your own path folder, put the program in there and then update your PATH variable.
The best way to do this, is to add the addition in ~/.bashrc

`export PATH=&quot;$PATH:$HOME/.rvm/bin:$HOME/.path/&quot; # Add RVM to PATH for scripting`
You will find this liine in your .bashrc probably if you have RVM installed. As you can see I added the folder .path to it
Else put in the line:
`export PATH=&quot;$PATH:$HOME/.path` (if your folder is at ~/.path.)
After doing that, either restart your terminal or use: 
`source ~/.bashrc`</description>
    
    <lastBuildDate>Tue, 28 Jun 2016 10:21:06 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/extracting-a-payload/667.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Extracting a Payload</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/extracting-a-payload/667/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/extracting-a-payload/667/8</link>
        <pubDate>Sun, 21 Jan 2018 00:42:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-667-8</guid>
        <source url="https://0x00sec.org/t/extracting-a-payload/667.rss">Extracting a Payload</source>
      </item>
      <item>
        <title>Extracting a Payload</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>You can also add it in .bashrc, ofcourse h2d needs to be in your path<br>
(I use ~/.path/)</p>
          <p><a href="https://0x00sec.org/t/extracting-a-payload/667/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/extracting-a-payload/667/7</link>
        <pubDate>Tue, 28 Jun 2016 10:21:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-667-7</guid>
        <source url="https://0x00sec.org/t/extracting-a-payload/667.rss">Extracting a Payload</source>
      </item>
      <item>
        <title>Extracting a Payload</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Haha! I do like a good pipe xD</p>
          <p><a href="https://0x00sec.org/t/extracting-a-payload/667/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/extracting-a-payload/667/5</link>
        <pubDate>Mon, 27 Jun 2016 23:33:12 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-667-5</guid>
        <source url="https://0x00sec.org/t/extracting-a-payload/667.rss">Extracting a Payload</source>
      </item>
      <item>
        <title>Extracting a Payload</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>That has so many pipes, we should call you The Plumber.</p>
          <p><a href="https://0x00sec.org/t/extracting-a-payload/667/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/extracting-a-payload/667/4</link>
        <pubDate>Mon, 27 Jun 2016 23:31:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-667-4</guid>
        <source url="https://0x00sec.org/t/extracting-a-payload/667.rss">Extracting a Payload</source>
      </item>
      <item>
        <title>Extracting a Payload</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>This however I have found works much nicer IMO.</p>
<pre><code class="lang-auto">#!/bin/bash
objdump -d ./$1|grep '[0-9a-f]:'|grep -v 'file'|cut -f2 -d:|cut -f1-6 -d' '|tr -s ' '|tr '\t' ' '|sed 's/ $//g'|sed 's/ /\\x/g'|paste -d '' -s |sed 's/^/"/'|sed 's/$/"/g'

</code></pre>
<p>Actually gives you the shellcode.</p>
          <p><a href="https://0x00sec.org/t/extracting-a-payload/667/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/extracting-a-payload/667/3</link>
        <pubDate>Mon, 27 Jun 2016 22:27:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-667-3</guid>
        <source url="https://0x00sec.org/t/extracting-a-payload/667.rss">Extracting a Payload</source>
      </item>
      <item>
        <title>Extracting a Payload</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>OH MAN! YES! I have been forever trying to find a decent way to do this. Well, not forever, but I spent a hard 15 minutes of googling before I gave up xD</p>
<p>Thanks a tonne, going straight in my ~/Bin/ <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<p>I’ve named it shellstract!</p>
          <p><a href="https://0x00sec.org/t/extracting-a-payload/667/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/extracting-a-payload/667/2</link>
        <pubDate>Mon, 27 Jun 2016 22:08:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-667-2</guid>
        <source url="https://0x00sec.org/t/extracting-a-payload/667.rss">Extracting a Payload</source>
      </item>
      <item>
        <title>Extracting a Payload</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>as <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a> explained in his <a href="https://0x00sec.org/t/elfun-file-injector/410/19">ELF injection tutorial</a>, you can extract the .text (actualy code) from an ELF (binary) file to get the payload.<br>
There are many ways to do this and picoflamingo showed us one way.<br>
Today I will share a shell script I wrote that does the same thing and prints it in ascii on your terminal, or wherever you redirect / pipe it.</p>
<pre><code class="lang-auto">#!/bin/bash
xxd -g 1 -s `h2d $(objdump -h $1 | grep .text | awk -e '{print $6}')` $1
</code></pre>
<p>That’s all, it’s pretty short, but can be very functional for shellcode development.<br>
You can check <code>man xxd</code> for more options to change it’s output format.</p>
<p>Hope it’s of any use to you !</p>
<p>I forgot to include h2d, it’s a C program I wrote <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<pre><code class="lang-auto">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main(int argc, char *argv[])
{
    int indx = strlen(argv[1]) - 1;
    int i,j=1, sum = 0;
    for(i=indx;i&gt;=0;i--,j*=16) {
        if(argv[1][i] &gt;= '0' &amp;&amp; argv[1][i] &lt;= '9')
            sum += ((argv[1][i] - '0') * j);
        else
            sum += ((argv[1][i] - 'a' + 10) * j);
    }
    printf("%d\n", sum);

    return 0;
}
</code></pre>
<p>After compiling you need to put it in your path, you can do this by moving it to /usr/bin, or make your own path folder, put the program in there and then update your PATH variable.<br>
The best way to do this, is to add the addition in ~/.bashrc</p>
<p><code>export PATH="$PATH:$HOME/.rvm/bin:$HOME/.path/" # Add RVM to PATH for scripting</code><br>
You will find this liine in your .bashrc probably if you have RVM installed. As you can see I added the folder .path to it<br>
Else put in the line:<br>
<code>export PATH="$PATH:$HOME/.path</code> (if your folder is at ~/.path.)<br>
After doing that, either restart your terminal or use:<br>
<code>source ~/.bashrc</code></p>
          <p><a href="https://0x00sec.org/t/extracting-a-payload/667/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/extracting-a-payload/667/1</link>
        <pubDate>Mon, 27 Jun 2016 19:00:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-667-1</guid>
        <source url="https://0x00sec.org/t/extracting-a-payload/667.rss">Extracting a Payload</source>
      </item>
  </channel>
</rss>
