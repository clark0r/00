<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Bypass Linux Basic Anti Debugging</title>
    <link>https://0x00sec.org/t/bypass-linux-basic-anti-debugging/22799</link>
    <description>First of all, Hello everyone. Welcome to my new Writeup.

There are many methods to prevent Debugging in Linux. In this writeup we will see skipping the most used and simplest method.

Basic Logic of this process; If there is a Tracing operation with Ptrace, it is to detect it using ptrace.

Considering that there is a control like this:

&gt;     #include &lt;stdio.h&gt;
&gt;     #include &lt;sys/ptrace.h&gt;
&gt; 
&gt;     int main()
&gt;     {
&gt;     	if (ptrace(PTRACE_TRACEME, 0, 1, 0) &lt; 0) {
&gt;     		printf(&quot;Debugging Dedected , Fuck You !\n&quot;);
&gt;     		return 1;
&gt;     	}
&gt;     	printf(&quot;Normal Execution\n&quot;);
&gt;     	return 0;
&gt;     }

Here we see that the ptrace system call checks if the argument named PTRACE_TRACEME is a child process for Debugging.


If the Process is traced;

&gt; printf (&quot;Debugging Dedected, Fuck You! \ n&quot;); 

message, If not We get the message:

&gt; printf (&quot;Normal Execution \ n&quot;);

** How Can We bypass The Control Made In This Situation?** 

The solution I found for this is  using LD_PRELOAD; Hijacking the ptrace () Function

First of all ptrace (); We&#39;re creating a fake library to replace it as follows:

    &gt; long ptrace(int request, int pid, int addr, int data)
    &gt; {
    &gt;     return 0;
    &gt; } 

Compiling : gcc evillib.c -o evillib.so -fPIC -shared -ldl -D_GNU_SOURCE

After compilation, we assign the resulting library location to the LD_PRELOAD environment variable. and then when we run it with gdb



&gt;  printf (&quot;Normal Execution \ n&quot;);



We get This message. So we successfully bypassed Control.


To automate this, I share with you the little tool I wrote:

https://github.com/noopslide/Ptrace-Anti-Debugging-Bypass/blob/master/ptracebypass.py



Video on How to Use the Tool: 

https://www.youtube.com/watch?v=VmPfOobZwlE


**Thank you for your time.**
**good hackings.**</description>
    
    <lastBuildDate>Sat, 05 Sep 2020 06:51:17 +0000</lastBuildDate>
    <category>Reverse Engineering</category>
    <atom:link href="https://0x00sec.org/t/bypass-linux-basic-anti-debugging/22799.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Bypass Linux Basic Anti Debugging</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/bypass-linux-basic-anti-debugging/22799/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypass-linux-basic-anti-debugging/22799/4</link>
        <pubDate>Tue, 22 Dec 2020 04:01:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-22799-4</guid>
        <source url="https://0x00sec.org/t/bypass-linux-basic-anti-debugging/22799.rss">Bypass Linux Basic Anti Debugging</source>
      </item>
      <item>
        <title>Bypass Linux Basic Anti Debugging</title>
        <dc:creator><![CDATA[c0z]]></dc:creator>
        <description><![CDATA[
            <p>To expand on this, two blog posts that I’ve read recently talk about ptrace and general anti-debugging in a deeper level.</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://www.deepinstinct.com/wp-content/themes/deep/images/favicon/favicon-48x48.png" class="site-icon" width="48" height="48">
      <a href="https://www.deepinstinct.com/2017/12/27/common-anti-debugging-techniques-in-the-malware-landscape/" target="_blank" rel="nofollow noopener" title="12:46PM - 27 December 2017">Deep Instinct – 27 Dec 17</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/292;"><img src="https://www.deepinstinct.com/wp-content/uploads/2018/06/debugging-600x330.jpg" class="thumbnail" width="690" height="292"></div>

<h3><a href="https://www.deepinstinct.com/2017/12/27/common-anti-debugging-techniques-in-the-malware-landscape/" target="_blank" rel="nofollow noopener">Common Anti-Debugging Techniques in the Malware Landscape</a></h3>

<p>To make the post-detection analysis more difficult, threat actors use various anti-analysis techniques, one of the more common ones is Anti-Debugging</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox allowlistedgeneric">
  <header class="source">
      <a href="https://yellowbyte.github.io/hiding-call-to-ptrace.html" target="_blank" rel="nofollow noopener">yellowbyte.github.io</a>
  </header>
  <article class="onebox-body">
    

<h3><a href="https://yellowbyte.github.io/hiding-call-to-ptrace.html" target="_blank" rel="nofollow noopener">Hiding Call To Ptrace</a></h3>

<p>An Ed edition</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/bypass-linux-basic-anti-debugging/22799/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypass-linux-basic-anti-debugging/22799/3</link>
        <pubDate>Sat, 05 Sep 2020 06:51:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-22799-3</guid>
        <source url="https://0x00sec.org/t/bypass-linux-basic-anti-debugging/22799.rss">Bypass Linux Basic Anti Debugging</source>
      </item>
      <item>
        <title>Bypass Linux Basic Anti Debugging</title>
        <dc:creator><![CDATA[0x0fy]]></dc:creator>
        <description><![CDATA[
            <p>First of all, Hello everyone. Welcome to my new Writeup.</p>
<p>There are many methods to prevent Debugging in Linux. In this writeup we will see skipping the most used and simplest method.</p>
<p>Basic Logic of this process; If there is a Tracing operation with Ptrace, it is to detect it using ptrace.</p>
<p>Considering that there is a control like this:</p>
<blockquote>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;sys/ptrace.h&gt;

int main()
{
	if (ptrace(PTRACE_TRACEME, 0, 1, 0) &lt; 0) {
		printf("Debugging Dedected , Fuck You !\n");
		return 1;
	}
	printf("Normal Execution\n");
	return 0;
}
</code></pre>
</blockquote>
<p>Here we see that the ptrace system call checks if the argument named PTRACE_TRACEME is a child process for Debugging.</p>
<p>If the Process is traced;</p>
<blockquote>
<p>printf (“Debugging Dedected, Fuck You! \ n”);</p>
</blockquote>
<p>message, If not We get the message:</p>
<blockquote>
<p>printf (“Normal Execution \ n”);</p>
</blockquote>
<p>** How Can We bypass The Control Made In This Situation?**</p>
<p>The solution I found for this is  using LD_PRELOAD; Hijacking the ptrace () Function</p>
<p>First of all ptrace (); We’re creating a fake library to replace it as follows:</p>
<pre><code>&gt; long ptrace(int request, int pid, int addr, int data)
&gt; {
&gt;     return 0;
&gt; } 
</code></pre>
<p>Compiling : gcc evillib.c -o evillib.so -fPIC -shared -ldl -D_GNU_SOURCE</p>
<p>After compilation, we assign the resulting library location to the LD_PRELOAD environment variable. and then when we run it with gdb</p>
<blockquote>
<p>printf (“Normal Execution \ n”);</p>
</blockquote>
<p>We get This message. So we successfully bypassed Control.</p>
<p>To automate this, I share with you the little tool I wrote:</p>
<p><a href="https://github.com/noopslide/Ptrace-Anti-Debugging-Bypass/blob/master/ptracebypass.py" class="onebox" target="_blank" rel="noopener nofollow ugc">https://github.com/noopslide/Ptrace-Anti-Debugging-Bypass/blob/master/ptracebypass.py</a></p>
<p>Video on How to Use the Tool:</p>
<p><a href="https://www.youtube.com/watch?v=VmPfOobZwlE"> - YouTube</a></p>

<p><strong>Thank you for your time.</strong><br>
<strong>good hackings.</strong></p>
          <p><a href="https://0x00sec.org/t/bypass-linux-basic-anti-debugging/22799/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/bypass-linux-basic-anti-debugging/22799/1</link>
        <pubDate>Sat, 22 Aug 2020 11:56:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-22799-1</guid>
        <source url="https://0x00sec.org/t/bypass-linux-basic-anti-debugging/22799.rss">Bypass Linux Basic Anti Debugging</source>
      </item>
  </channel>
</rss>
