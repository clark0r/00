<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to get the output from a reflected loaded dll via anonymous pipes?</title>
    <link>https://0x00sec.org/t/how-to-get-the-output-from-a-reflected-loaded-dll-via-anonymous-pipes/26469</link>
    <description>Hi, I don&#39;t know if this is the right place to ask but I have a problem that I want to solve. I want to get the output of a reflective loaded DLL from my child&#39;s process via anonymous pipes.

Here is the code I wrote to spawn a process and inject a reflective DLL into it.
```c
DWORD SpawnDll(LPVOID lpDllBuffer, DWORD dwDllLength, const char* cpCommandLine , DWORD dwProcessArch) {  
  
#ifdef DEBUG  
    printf(&quot;\n\n[DEBUG] SpawnDll(0x0%p, %d, %s, %d)\n&quot;,  
           lpDllBuffer, dwDllLength, cpCommandLine, dwProcessArch);  
#endif  
  
 	if (lpDllBuffer == NULL) {  
 		free(lpDllBuffer);  
        return 0;  
    }  
  
 	BOOL bSuccess = FALSE;  
  
    HANDLE hStdInPipeRead = NULL;  
    HANDLE hStdInPipeWrite = NULL;  
    HANDLE hStdOutPipeRead = NULL;  
    HANDLE hStdOutPipeWrite = NULL;  
  
    SECURITY_ATTRIBUTES sa = {  
 		.nLength = sizeof(SECURITY_ATTRIBUTES),  
        .lpSecurityDescriptor = NULL,  
        .bInheritHandle = FALSE,  
    };  
  
    bSuccess = CreatePipe(&amp;hStdInPipeRead, &amp;hStdInPipeWrite, &amp;sa, 0);  
    if (bSuccess == FALSE)  
 		return ERROR_FAILED_INPUT_PIPE;  
  
    if (!SetHandleInformation(hStdInPipeWrite, HANDLE_FLAG_INHERIT, 0)) {  
 		DEBUGF(&quot;Stdin SetHandleInformation&quot;);  
        goto Cleanup;  
    }  
  
 	bSuccess = CreatePipe(&amp;hStdOutPipeRead, &amp;hStdOutPipeWrite, &amp;sa, 0);  
    if (bSuccess == FALSE)  
 		return ERROR_FAILED_OUTPUT_PIPE;  
  
    if (!SetHandleInformation(hStdOutPipeRead, HANDLE_FLAG_INHERIT, 0)) {  
 		DEBUGF(&quot;Stdout SetHandleInformation&quot;);  
        goto Cleanup;  
    }  
  
 	STARTUPINFOEXA sInfo = {  
 			.StartupInfo.cb = sizeof(STARTUPINFO),  
            .StartupInfo.dwFlags = STARTF_USESTDHANDLES,  
            .StartupInfo.hStdError = hStdOutPipeWrite,  
            .StartupInfo.hStdOutput = hStdOutPipeWrite,  
            .StartupInfo.hStdInput = hStdInPipeRead,  
    };  
  
    PROCESS_INFORMATION pInfo = { 0 };  
  
    CreateThread(NULL, 0, ReadFromPipe, hStdOutPipeRead, 0, NULL);  
  
    if (dwProcessArch == PROCESS_ARCH_X64) {  
 		bSuccess = CreateProcessA(NULL, (char*) &quot;C:\\Windows\\System32\\rundll32.exe&quot; , NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &amp;sInfo, &amp;pInfo);  
#ifdef DEBUG  
        printf(&quot;[DEBUG] Started Process :: C:\\Windows\\System32\\rundll32.exe\n&quot;);  
#endif  
 	} else {  
 		bSuccess = CreateProcessA(NULL, (char*) &quot;C:\\Windows\\SysWOW64\\rundll32.exe&quot;, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &amp;sInfo, &amp;pInfo);  
#ifdef DEBUG  
        printf(&quot;[DEBUG] Started Process :: C:\\Windows\\SysWOW64\\rundll32.exe\n&quot;);  
#endif  
 	}  
  
 	if (!bSuccess)  
 		goto Cleanup;  
  
    InjectDLL( pInfo.dwProcessId, lpDllBuffer, dwDllLength, cpCommandLine, dwProcessArch );  
  
#ifdef DEBUG  
    printf(&quot;[DEBUG] injected dll\n&quot;);  
#endif  
  
 	ResumeThread(pInfo.hThread);  
    CloseHandle(pInfo.hThread);  
  
    WaitForSingleObject(pInfo.hProcess, INFINITE);  
  
    Cleanup:  
        CloseHandle(hStdOutPipeRead);  
        CloseHandle(hStdOutPipeWrite);  
        CloseHandle(hStdInPipeWrite);  
        CloseHandle(hStdInPipeRead);  
  
    return 0;  
}
```

The `InjectDll` function is straight-up copied from [pupy rat reflected dll injection](https://github.com/n1nj4sec/pupy/blob/HEAD/client/sources/base_inject.c#L516). 

The `ReadPipe` function looks like that. 
```c
#define MAX_OUTPUT 1024
void ReadFromPipe(HANDLE hSTD_OUT_Read) {  
 	char	chBuf[MAX_OUTPUT + 1] = { 0 };  
    BOOL    bSuccess = FALSE;  
    DWORD   dwRead = 0;  
  
    DEBUGF(&quot;Started Reading from Pipe&quot;)  
 	bSuccess = ReadFile(hSTD_OUT_Read, chBuf, MAX_OUTPUT, &amp;dwRead, NULL);  

    DEBUGF(&quot;Starting do while loop...&quot;)  
 	do {  
 		chBuf[dwRead] = &#39;\0&#39;;  
#ifdef DEBUG  
        printf(&quot;[%s] dwRead :: %d\n&quot;, __FUNCTION__ , dwRead);  
#endif
 		if (dwRead != 0) printf(&quot;%s\n&quot;,chBuf);  
 		memset(chBuf, &#39;\0&#39;, sizeof(chBuf));  
        bSuccess = ReadFile(hSTD_OUT_Read, chBuf, MAX_OUTPUT, &amp;dwRead, NULL);
    } while (bSuccess == TRUE);  
    return;  
}
```

reflective Dll Source code based on [stephenfewer&#39;s dll](https://github.com/stephenfewer/ReflectiveDLLInjection/blob/master/dll/src/ReflectiveDll.c):
```c
//===============================================================================================//  
// This is a stub for the actual functionality of the DLL.  
//===============================================================================================//  
#include &quot;ReflectiveLoader.h&quot;  
#include &lt;stdio.h&gt;  
  
// Note: REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR and REFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN are  
// defined in the project properties (Properties-&gt;C++-&gt;Preprocessor) so as we can specify our own  
// DllMain and use the LoadRemoteLibraryR() API to inject this DLL.  
  
// You can use this value as a pseudo hinstDLL value (defined and set via ReflectiveLoader.c)  
extern HINSTANCE hAppInstance;  
//===============================================================================================//  
BOOL WINAPI DllMain( HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpReserved )  
{  
 BOOL bReturnValue = TRUE;  
    switch( dwReason ) {  
 		case DLL_QUERY_HMODULE:  
            if( lpReserved != NULL )  
 				*(HMODULE *)lpReserved = hAppInstance;  
            break;  
        case DLL_PROCESS_ATTACH:  
            hAppInstance = hinstDLL;  
            puts(&quot;[DEBUG] Hello from DllMain&quot;);  
            MessageBoxA( NULL, &quot;Hello from DllMain!&quot;, &quot;Reflective Dll Injection&quot;, MB_OK );  
            break;  
        case DLL_PROCESS_DETACH:  
        case DLL_THREAD_ATTACH:  
        case DLL_THREAD_DETACH:  
            break;  
    }  
 return bReturnValue;  
}
```

The injection part works because I see Message Box popping up for a second but then closing itself. 

![image|577x275](upload://ut1c8IFzJcjgURAGiqqb37o9sfd.png)

I already searched the internet and didn&#39;t really found anything (or i am to dump to search for it...)

Thank you guys for the help and answers : )</description>
    
    <lastBuildDate>Sat, 03 Jul 2021 17:03:51 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/how-to-get-the-output-from-a-reflected-loaded-dll-via-anonymous-pipes/26469.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to get the output from a reflected loaded dll via anonymous pipes?</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/how-to-get-the-output-from-a-reflected-loaded-dll-via-anonymous-pipes/26469/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-get-the-output-from-a-reflected-loaded-dll-via-anonymous-pipes/26469/2</link>
        <pubDate>Tue, 02 Nov 2021 09:04:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26469-2</guid>
        <source url="https://0x00sec.org/t/how-to-get-the-output-from-a-reflected-loaded-dll-via-anonymous-pipes/26469.rss">How to get the output from a reflected loaded dll via anonymous pipes?</source>
      </item>
      <item>
        <title>How to get the output from a reflected loaded dll via anonymous pipes?</title>
        <dc:creator><![CDATA[C5pider]]></dc:creator>
        <description><![CDATA[
            <p>Hi, I don’t know if this is the right place to ask but I have a problem that I want to solve. I want to get the output of a reflective loaded DLL from my child’s process via anonymous pipes.</p>
<p>Here is the code I wrote to spawn a process and inject a reflective DLL into it.</p>
<pre><code class="lang-auto">DWORD SpawnDll(LPVOID lpDllBuffer, DWORD dwDllLength, const char* cpCommandLine , DWORD dwProcessArch) {  
  
#ifdef DEBUG  
    printf("\n\n[DEBUG] SpawnDll(0x0%p, %d, %s, %d)\n",  
           lpDllBuffer, dwDllLength, cpCommandLine, dwProcessArch);  
#endif  
  
 	if (lpDllBuffer == NULL) {  
 		free(lpDllBuffer);  
        return 0;  
    }  
  
 	BOOL bSuccess = FALSE;  
  
    HANDLE hStdInPipeRead = NULL;  
    HANDLE hStdInPipeWrite = NULL;  
    HANDLE hStdOutPipeRead = NULL;  
    HANDLE hStdOutPipeWrite = NULL;  
  
    SECURITY_ATTRIBUTES sa = {  
 		.nLength = sizeof(SECURITY_ATTRIBUTES),  
        .lpSecurityDescriptor = NULL,  
        .bInheritHandle = FALSE,  
    };  
  
    bSuccess = CreatePipe(&amp;hStdInPipeRead, &amp;hStdInPipeWrite, &amp;sa, 0);  
    if (bSuccess == FALSE)  
 		return ERROR_FAILED_INPUT_PIPE;  
  
    if (!SetHandleInformation(hStdInPipeWrite, HANDLE_FLAG_INHERIT, 0)) {  
 		DEBUGF("Stdin SetHandleInformation");  
        goto Cleanup;  
    }  
  
 	bSuccess = CreatePipe(&amp;hStdOutPipeRead, &amp;hStdOutPipeWrite, &amp;sa, 0);  
    if (bSuccess == FALSE)  
 		return ERROR_FAILED_OUTPUT_PIPE;  
  
    if (!SetHandleInformation(hStdOutPipeRead, HANDLE_FLAG_INHERIT, 0)) {  
 		DEBUGF("Stdout SetHandleInformation");  
        goto Cleanup;  
    }  
  
 	STARTUPINFOEXA sInfo = {  
 			.StartupInfo.cb = sizeof(STARTUPINFO),  
            .StartupInfo.dwFlags = STARTF_USESTDHANDLES,  
            .StartupInfo.hStdError = hStdOutPipeWrite,  
            .StartupInfo.hStdOutput = hStdOutPipeWrite,  
            .StartupInfo.hStdInput = hStdInPipeRead,  
    };  
  
    PROCESS_INFORMATION pInfo = { 0 };  
  
    CreateThread(NULL, 0, ReadFromPipe, hStdOutPipeRead, 0, NULL);  
  
    if (dwProcessArch == PROCESS_ARCH_X64) {  
 		bSuccess = CreateProcessA(NULL, (char*) "C:\\Windows\\System32\\rundll32.exe" , NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &amp;sInfo, &amp;pInfo);  
#ifdef DEBUG  
        printf("[DEBUG] Started Process :: C:\\Windows\\System32\\rundll32.exe\n");  
#endif  
 	} else {  
 		bSuccess = CreateProcessA(NULL, (char*) "C:\\Windows\\SysWOW64\\rundll32.exe", NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &amp;sInfo, &amp;pInfo);  
#ifdef DEBUG  
        printf("[DEBUG] Started Process :: C:\\Windows\\SysWOW64\\rundll32.exe\n");  
#endif  
 	}  
  
 	if (!bSuccess)  
 		goto Cleanup;  
  
    InjectDLL( pInfo.dwProcessId, lpDllBuffer, dwDllLength, cpCommandLine, dwProcessArch );  
  
#ifdef DEBUG  
    printf("[DEBUG] injected dll\n");  
#endif  
  
 	ResumeThread(pInfo.hThread);  
    CloseHandle(pInfo.hThread);  
  
    WaitForSingleObject(pInfo.hProcess, INFINITE);  
  
    Cleanup:  
        CloseHandle(hStdOutPipeRead);  
        CloseHandle(hStdOutPipeWrite);  
        CloseHandle(hStdInPipeWrite);  
        CloseHandle(hStdInPipeRead);  
  
    return 0;  
}
</code></pre>
<p>The <code>InjectDll</code> function is straight-up copied from <a href="https://github.com/n1nj4sec/pupy/blob/HEAD/client/sources/base_inject.c#L516" rel="noopener nofollow ugc">pupy rat reflected dll injection</a>.</p>
<p>The <code>ReadPipe</code> function looks like that.</p>
<pre><code class="lang-auto">#define MAX_OUTPUT 1024
void ReadFromPipe(HANDLE hSTD_OUT_Read) {  
 	char	chBuf[MAX_OUTPUT + 1] = { 0 };  
    BOOL    bSuccess = FALSE;  
    DWORD   dwRead = 0;  
  
    DEBUGF("Started Reading from Pipe")  
 	bSuccess = ReadFile(hSTD_OUT_Read, chBuf, MAX_OUTPUT, &amp;dwRead, NULL);  

    DEBUGF("Starting do while loop...")  
 	do {  
 		chBuf[dwRead] = '\0';  
#ifdef DEBUG  
        printf("[%s] dwRead :: %d\n", __FUNCTION__ , dwRead);  
#endif
 		if (dwRead != 0) printf("%s\n",chBuf);  
 		memset(chBuf, '\0', sizeof(chBuf));  
        bSuccess = ReadFile(hSTD_OUT_Read, chBuf, MAX_OUTPUT, &amp;dwRead, NULL);
    } while (bSuccess == TRUE);  
    return;  
}
</code></pre>
<p>reflective Dll Source code based on <a href="https://github.com/stephenfewer/ReflectiveDLLInjection/blob/master/dll/src/ReflectiveDll.c" rel="noopener nofollow ugc">stephenfewer’s dll</a>:</p>
<pre><code class="lang-auto">//===============================================================================================//  
// This is a stub for the actual functionality of the DLL.  
//===============================================================================================//  
#include "ReflectiveLoader.h"  
#include &lt;stdio.h&gt;  
  
// Note: REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR and REFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN are  
// defined in the project properties (Properties-&gt;C++-&gt;Preprocessor) so as we can specify our own  
// DllMain and use the LoadRemoteLibraryR() API to inject this DLL.  
  
// You can use this value as a pseudo hinstDLL value (defined and set via ReflectiveLoader.c)  
extern HINSTANCE hAppInstance;  
//===============================================================================================//  
BOOL WINAPI DllMain( HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpReserved )  
{  
 BOOL bReturnValue = TRUE;  
    switch( dwReason ) {  
 		case DLL_QUERY_HMODULE:  
            if( lpReserved != NULL )  
 				*(HMODULE *)lpReserved = hAppInstance;  
            break;  
        case DLL_PROCESS_ATTACH:  
            hAppInstance = hinstDLL;  
            puts("[DEBUG] Hello from DllMain");  
            MessageBoxA( NULL, "Hello from DllMain!", "Reflective Dll Injection", MB_OK );  
            break;  
        case DLL_PROCESS_DETACH:  
        case DLL_THREAD_ATTACH:  
        case DLL_THREAD_DETACH:  
            break;  
    }  
 return bReturnValue;  
}
</code></pre>
<p>The injection part works because I see Message Box popping up for a second but then closing itself.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/d/5/d588fcd4547a4bb449ea6c972734c7b675c668b7.png" alt="image" data-base62-sha1="ut1c8IFzJcjgURAGiqqb37o9sfd" width="577" height="275"></p>
<p>I already searched the internet and didn’t really found anything (or i am to dump to search for it…)</p>
<p>Thank you guys for the help and answers : )</p>
          <p><a href="https://0x00sec.org/t/how-to-get-the-output-from-a-reflected-loaded-dll-via-anonymous-pipes/26469/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-get-the-output-from-a-reflected-loaded-dll-via-anonymous-pipes/26469/1</link>
        <pubDate>Sat, 03 Jul 2021 17:03:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26469-1</guid>
        <source url="https://0x00sec.org/t/how-to-get-the-output-from-a-reflected-loaded-dll-via-anonymous-pipes/26469.rss">How to get the output from a reflected loaded dll via anonymous pipes?</source>
      </item>
  </channel>
</rss>
