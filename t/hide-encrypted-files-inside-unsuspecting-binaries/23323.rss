<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Hide Encrypted Files inside unsuspecting Binaries</title>
    <link>https://0x00sec.org/t/hide-encrypted-files-inside-unsuspecting-binaries/23323</link>
    <description>**Hiding Encrypted Files within unsuspecting Binaries**

This is pretty basic stuff if you’re are familiar with the ELF binary format as well as basic experience with creating your own basic Trojans with Elf binary injection. However With a bit of creativity I have found other ways to use Elf binaries, not just for malicious intent for creating Trojan Horses, but also to hide sensitive data within unsuspecting binary files.

The whole point of this post is to spark creative ideas in others. And also give back to the community, that has given me a lot in return.

**Use case**

Lets say You have some encrypted files in a directory. Well It’s good that’s it’s encrypted and I hope you’ve hidden your private key well! However As an extra level of security, How about hiding those encrypted files inside unsuspecting binary programs? So to any Hacker, They look like regular binary files, and they execute them as expected ,because they are normal executable ;) . However Inside the executable is a secret encrypted file embedded into the binary of the file.

It reminds me of how Mr robot hides encrypted files within CD’s

**The Code**

**The Structs Used**

    /*Used for pointing to the mapped binary in memory*/

    struct Host
    {
         uint8_t *host;
    };

    /*used as a guide to where the secret file is located in the binary,
    * this will be embedded into the .NOTE section for easy reference*/

    struct secret_map
    {

        Elf64_Addr offset;
        int64_t size;

    };

**Writing An Encrypted File into Binary The Algorithm**
1. Read the Encrypted File from the user onto the Heap. Then Find an available Code cave (unused space) big enough for the File, and Write the File to the unused space. Then save the coordinates to the Struct Secret_map (our roadmap).

       void write_secret_file()
       {
    	  Elf64_Ehdr *ehdr; Elf64_Phdr *phdr;

    	ehdr = (Elf64_Ehdr *)host.host;
    	phdr = (Elf64_Phdr *)&amp;host.host[ehdr-&gt;e_phoff];


    	/*open key file and mmap to heap*/
    	int fd = open(sfile,O_RDONLY);

    	struct stat st;
    	lstat(sfile,&amp;st);

    	char *secret_file = malloc(sizeof(char)*st.st_size);

    	/*read file into allocated memory*/
    	read(fd,secret_file,st.st_size);


    	int cave_offset,cave_length; cave_offset = cave_length = 0;
    	for(int i=0;i&lt;ehdr-&gt;e_phnum;i++)
    	{
    		/*calculate start*/
    		cave_offset = phdr[i].p_offset + phdr[i].p_filesz;
    		/*next calculate the gap*/
    		cave_length = phdr[i+1].p_offset - cave_offset;

    		if(cave_length&gt;=st.st_size)
    		{
    			printf(&quot;[+]Found cave to fit secret file\n&quot;);
    			printf(&quot;cave offset = %d and length = %d\n&quot;,cave_offset,cave_length);


    			/*memcpy secret_file into code cave*/
    			memcpy((host.host+cave_offset),secret_file,st.st_size);
    			printf(&quot;[+]Secret file injected into binary\n&quot;);

                                       /*save coordinates to our roadmap*/
    			map.offset = cave_offset;
    			map.size = st.st_size;
    		//	map.size = cave_length;	

    			break;
    		}

    	}
    	free(secret_file); }


2. Then inject the coordinates into the .NOTE segment of the ELF binary, as a roadmap to help locate the Encrypted file for extraction.

        /*Save secret file coordinates in struct and write as a roadmap to .Note
        * @offset = address of where secret file is located in binary
       * @length = length of bytes of secret file in binary*/
       void write_roadmap()

          {

            Elf64_Ehdr *ehdr ; Elf64_Phdr *phdr; Elf64_Shdr *shdr;
      	    ehdr = (Elf64_Ehdr *)host.host;
       	    phdr = (Elf64_Phdr *)&amp;host.host[ehdr-&gt;e_phoff];

    	   for(int i=0;i&lt;ehdr-&gt;e_phnum;i++)
    	   {
    		if(phdr[i].p_type==PT_NOTE)
    		{
    	
    		
    			if(sizeof(struct secret_map)&lt;=phdr[i].p_filesz)
    			{
    				printf(&quot;[+]Secret roadmap struct can fit in .Note\n&quot;);
    	
    				/*Malloc struct*/
    				struct secret_map *structure = malloc(sizeof(struct secret_map));
    				structure-&gt;offset = map.offset;
    				structure-&gt;size = map.size;
    					
    				/*memcopy struct to start of note*/
    				memcpy((host.host+phdr[i].p_offset),structure,sizeof(struct secret_map));

    				
    				free(structure);

    				printf(&quot;[+]Secret roadmap injected into .Note segment\n&quot;);
    			}
    			else
    			{
    				printf(&quot;[-]Secret roadmap struct to small for .NOTE\n&quot;);
    			}
    			
    			break;
    		}	
    	         }
                }

Reading An Encrypted File from Binary Algorithm (Extraction)


  1. Check Elf binary to see if there is a roadmap struct, by Reading the .NOTE section. You’ll know if a roadmap exists or not, as When reading the struct you’ll receive some sort of error.
    
2. Once you have the roadmap, then use the roadmap to locate where the Encrypted File is in the binary and extract the Encrypted File from the Binary onto the Heap. Then Write the allocated memory into a file. Thus we have extracted the Encrypted File. And then the User can then use their private key to unencrypted the file for whatever use they needed that encrypted File for.

       /*Read structure from .Note*/
       void read_roadmap()
       {
    	Elf64_Ehdr *ehdr; Elf64_Phdr *phdr;
    	
    	ehdr = (Elf64_Ehdr *)host.host;
    	phdr = (Elf64_Phdr *)&amp;host.host[ehdr-&gt;e_phoff];

    	struct secret_map *structure = malloc(sizeof(struct secret_map));

    	for(int i=0;i&lt;ehdr-&gt;e_phnum;i++)
    	{
    		if(phdr[i].p_type==PT_NOTE)
    		{
    			memcpy(structure,host.host+phdr[i].p_offset,sizeof(struct secret_map));
    			break;
    		}
    	}

    	map.offset = structure-&gt;offset;
    	map.size = structure-&gt;size;

    	printf(&quot;[+]Obtained roadmap from .NOTE segment\n&quot;);
    	
    	free(structure);	
        }
       void read_secret_file()
       {
    	/*useing map to obtain the location of secret file*/
    	read_roadmap();

    	/*mmap some memory enough on the heap to get file from binary into allocated memory*/
    	char *buf = malloc(sizeof(char)*map.size);

    	/*memcpy into buf*/
    	memcpy(buf,host.host+map.offset,map.size);
    	
    	/*write to a temp &quot;key&quot; file*/
    	FILE *fd = fopen(sfile,&quot;a+&quot;);

    	fwrite(buf,map.size,1,fd); 

    	fclose(fd);	

       }

**Why Encrypted Files**

If you inject Unencrypted Data into a binary File. If you just Open the binary in a text editor such as vim, It’s actually pretty simple to find any important data in there, as it’s usually in plain English. Which why it is important It should be encrypted Files. Unless you’re are reading/writing the bytes themselves.

**Improvements**

   1. Split the encrypted file and break it apart into smaller code caves, so it makes it harder to piece together.
    2. Align the .NOTE section properly to not give any warnings or indication there is something in there...

**Security**

This is just a another layer of security and extra step in trying to Hide important data for a hacker. You could say That all they need to find is the roadmap struct within the .note. Which is true, but to anyone else, Know one knows there is a struct located in the .NOTE segment. And even then, in order to read it correctly, you’ll need to understand what type of struct is there, the size etc. 

Essentially Creating an Extra step, extra work for the hacker, And depending on the hacker’s skill level, hiding an encrypted File inside an unsuspecting Executable, could be enough to deter them from actually looking and dissecting the binary. Essentially skill level or laziness could stop them from going further, and they may just assume the executable is just an executable with nothing interesting inside.

Remember this is just a basic prototype, there are many ways to make it much harder to find sensitive data.

**Notes**

This is only works currently with PIE , position independent executable. I plan on improving on this concept to improve security, hiding it better, as well as being able to inject into other types of executable ELF types within Linux. This is just a proof of concept. There are a few potential bugs. But like I say this is just a proof of concept, and spark some more creativity in the community

**Demonstration Screenshots**

![Screenshot from 2020-09-29 14-13-27|690x431](upload://4W4m2L6WopdOARFc2vzvFfV3grY.png) 

![Screenshot from 2020-09-29 14-13-44|690x431](upload://9fhV2oxe7YZXyTuf3RqCFO6hjNJ.png) 

![Screenshot from 2020-09-29 14-14-56|690x431](upload://bz79lJrABCjHSKJdvheNvggQZXL.png) 

**Full Code Available Here**

My code only accepts .GPG files, meaning it refuses to inject Files which have not been encrypted with GPG. And again it&#39;s a quick prototype, there are a few bugs, and the error checking isn&#39;t really implemented properly, as it&#39;s a very quick prototype proof of concept

https://github.com/digitalXmage/HideMe

**Conclusion**

I Hope someone has learnt something from this. Or if not, at least open some doors in terms of creativity. This is my first Actual Write up post. Lets Hope it&#39;s not completely useless...</description>
    
    <lastBuildDate>Fri, 02 Oct 2020 00:47:33 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/hide-encrypted-files-inside-unsuspecting-binaries/23323.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Hide Encrypted Files inside unsuspecting Binaries</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/hide-encrypted-files-inside-unsuspecting-binaries/23323/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hide-encrypted-files-inside-unsuspecting-binaries/23323/5</link>
        <pubDate>Fri, 29 Jan 2021 06:14:42 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23323-5</guid>
        <source url="https://0x00sec.org/t/hide-encrypted-files-inside-unsuspecting-binaries/23323.rss">Hide Encrypted Files inside unsuspecting Binaries</source>
      </item>
      <item>
        <title>Hide Encrypted Files inside unsuspecting Binaries</title>
        <dc:creator><![CDATA[digitalXmage]]></dc:creator>
        <description><![CDATA[
            <p>Thanks! You’ve made my day <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/hide-encrypted-files-inside-unsuspecting-binaries/23323/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hide-encrypted-files-inside-unsuspecting-binaries/23323/3</link>
        <pubDate>Tue, 29 Sep 2020 17:19:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23323-3</guid>
        <source url="https://0x00sec.org/t/hide-encrypted-files-inside-unsuspecting-binaries/23323.rss">Hide Encrypted Files inside unsuspecting Binaries</source>
      </item>
      <item>
        <title>Hide Encrypted Files inside unsuspecting Binaries</title>
        <dc:creator><![CDATA[Ninja243]]></dc:creator>
        <description><![CDATA[
            <p>This is insane!</p>
<p>Thanks for the really well written post!</p>
          <p><a href="https://0x00sec.org/t/hide-encrypted-files-inside-unsuspecting-binaries/23323/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hide-encrypted-files-inside-unsuspecting-binaries/23323/2</link>
        <pubDate>Tue, 29 Sep 2020 15:55:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23323-2</guid>
        <source url="https://0x00sec.org/t/hide-encrypted-files-inside-unsuspecting-binaries/23323.rss">Hide Encrypted Files inside unsuspecting Binaries</source>
      </item>
      <item>
        <title>Hide Encrypted Files inside unsuspecting Binaries</title>
        <dc:creator><![CDATA[digitalXmage]]></dc:creator>
        <description><![CDATA[
            <p><strong>Hiding Encrypted Files within unsuspecting Binaries</strong></p>
<p>This is pretty basic stuff if you’re are familiar with the ELF binary format as well as basic experience with creating your own basic Trojans with Elf binary injection. However With a bit of creativity I have found other ways to use Elf binaries, not just for malicious intent for creating Trojan Horses, but also to hide sensitive data within unsuspecting binary files.</p>
<p>The whole point of this post is to spark creative ideas in others. And also give back to the community, that has given me a lot in return.</p>
<p><strong>Use case</strong></p>
<p>Lets say You have some encrypted files in a directory. Well It’s good that’s it’s encrypted and I hope you’ve hidden your private key well! However As an extra level of security, How about hiding those encrypted files inside unsuspecting binary programs? So to any Hacker, They look like regular binary files, and they execute them as expected ,because they are normal executable <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"> . However Inside the executable is a secret encrypted file embedded into the binary of the file.</p>
<p>It reminds me of how Mr robot hides encrypted files within CD’s</p>
<p><strong>The Code</strong></p>
<p><strong>The Structs Used</strong></p>
<pre><code>/*Used for pointing to the mapped binary in memory*/

struct Host
{
     uint8_t *host;
};

/*used as a guide to where the secret file is located in the binary,
* this will be embedded into the .NOTE section for easy reference*/

struct secret_map
{

    Elf64_Addr offset;
    int64_t size;

};
</code></pre>
<p><strong>Writing An Encrypted File into Binary The Algorithm</strong></p>
<ol>
<li>
<p>Read the Encrypted File from the user onto the Heap. Then Find an available Code cave (unused space) big enough for the File, and Write the File to the unused space. Then save the coordinates to the Struct Secret_map (our roadmap).</p>
<pre><code>void write_secret_file()
{
   Elf64_Ehdr *ehdr; Elf64_Phdr *phdr;

 ehdr = (Elf64_Ehdr *)host.host;
 phdr = (Elf64_Phdr *)&amp;host.host[ehdr-&gt;e_phoff];


 /*open key file and mmap to heap*/
 int fd = open(sfile,O_RDONLY);

 struct stat st;
 lstat(sfile,&amp;st);

 char *secret_file = malloc(sizeof(char)*st.st_size);

 /*read file into allocated memory*/
 read(fd,secret_file,st.st_size);


 int cave_offset,cave_length; cave_offset = cave_length = 0;
 for(int i=0;i&lt;ehdr-&gt;e_phnum;i++)
 {
 	/*calculate start*/
 	cave_offset = phdr[i].p_offset + phdr[i].p_filesz;
 	/*next calculate the gap*/
 	cave_length = phdr[i+1].p_offset - cave_offset;

 	if(cave_length&gt;=st.st_size)
 	{
 		printf("[+]Found cave to fit secret file\n");
 		printf("cave offset = %d and length = %d\n",cave_offset,cave_length);


 		/*memcpy secret_file into code cave*/
 		memcpy((host.host+cave_offset),secret_file,st.st_size);
 		printf("[+]Secret file injected into binary\n");

                                /*save coordinates to our roadmap*/
 		map.offset = cave_offset;
 		map.size = st.st_size;
 	//	map.size = cave_length;	

 		break;
 	}

 }
 free(secret_file); }
</code></pre>
</li>
<li>
<p>Then inject the coordinates into the .NOTE segment of the ELF binary, as a roadmap to help locate the Encrypted file for extraction.</p>
<pre><code> /*Save secret file coordinates in struct and write as a roadmap to .Note
 * @offset = address of where secret file is located in binary
* @length = length of bytes of secret file in binary*/
void write_roadmap()

   {

     Elf64_Ehdr *ehdr ; Elf64_Phdr *phdr; Elf64_Shdr *shdr;
     ehdr = (Elf64_Ehdr *)host.host;
	    phdr = (Elf64_Phdr *)&amp;host.host[ehdr-&gt;e_phoff];

    for(int i=0;i&lt;ehdr-&gt;e_phnum;i++)
    {
 	if(phdr[i].p_type==PT_NOTE)
 	{
 
 	
 		if(sizeof(struct secret_map)&lt;=phdr[i].p_filesz)
 		{
 			printf("[+]Secret roadmap struct can fit in .Note\n");
 
 			/*Malloc struct*/
 			struct secret_map *structure = malloc(sizeof(struct secret_map));
 			structure-&gt;offset = map.offset;
 			structure-&gt;size = map.size;
 				
 			/*memcopy struct to start of note*/
 			memcpy((host.host+phdr[i].p_offset),structure,sizeof(struct secret_map));

 			
 			free(structure);

 			printf("[+]Secret roadmap injected into .Note segment\n");
 		}
 		else
 		{
 			printf("[-]Secret roadmap struct to small for .NOTE\n");
 		}
 		
 		break;
 	}	
          }
         }
</code></pre>
</li>
</ol>
<p>Reading An Encrypted File from Binary Algorithm (Extraction)</p>
<ol>
<li>
<p>Check Elf binary to see if there is a roadmap struct, by Reading the .NOTE section. You’ll know if a roadmap exists or not, as When reading the struct you’ll receive some sort of error.</p>
</li>
<li>
<p>Once you have the roadmap, then use the roadmap to locate where the Encrypted File is in the binary and extract the Encrypted File from the Binary onto the Heap. Then Write the allocated memory into a file. Thus we have extracted the Encrypted File. And then the User can then use their private key to unencrypted the file for whatever use they needed that encrypted File for.</p>
<pre><code>/*Read structure from .Note*/
void read_roadmap()
{
 Elf64_Ehdr *ehdr; Elf64_Phdr *phdr;
 
 ehdr = (Elf64_Ehdr *)host.host;
 phdr = (Elf64_Phdr *)&amp;host.host[ehdr-&gt;e_phoff];

 struct secret_map *structure = malloc(sizeof(struct secret_map));

 for(int i=0;i&lt;ehdr-&gt;e_phnum;i++)
 {
 	if(phdr[i].p_type==PT_NOTE)
 	{
 		memcpy(structure,host.host+phdr[i].p_offset,sizeof(struct secret_map));
 		break;
 	}
 }

 map.offset = structure-&gt;offset;
 map.size = structure-&gt;size;

 printf("[+]Obtained roadmap from .NOTE segment\n");
 
 free(structure);	
 }
void read_secret_file()
{
 /*useing map to obtain the location of secret file*/
 read_roadmap();

 /*mmap some memory enough on the heap to get file from binary into allocated memory*/
 char *buf = malloc(sizeof(char)*map.size);

 /*memcpy into buf*/
 memcpy(buf,host.host+map.offset,map.size);
 
 /*write to a temp "key" file*/
 FILE *fd = fopen(sfile,"a+");

 fwrite(buf,map.size,1,fd); 

 fclose(fd);	

}
</code></pre>
</li>
</ol>
<p><strong>Why Encrypted Files</strong></p>
<p>If you inject Unencrypted Data into a binary File. If you just Open the binary in a text editor such as vim, It’s actually pretty simple to find any important data in there, as it’s usually in plain English. Which why it is important It should be encrypted Files. Unless you’re are reading/writing the bytes themselves.</p>
<p><strong>Improvements</strong></p>
<ol>
<li>Split the encrypted file and break it apart into smaller code caves, so it makes it harder to piece together.<br>
2. Align the .NOTE section properly to not give any warnings or indication there is something in there…</li>
</ol>
<p><strong>Security</strong></p>
<p>This is just a another layer of security and extra step in trying to Hide important data for a hacker. You could say That all they need to find is the roadmap struct within the .note. Which is true, but to anyone else, Know one knows there is a struct located in the .NOTE segment. And even then, in order to read it correctly, you’ll need to understand what type of struct is there, the size etc.</p>
<p>Essentially Creating an Extra step, extra work for the hacker, And depending on the hacker’s skill level, hiding an encrypted File inside an unsuspecting Executable, could be enough to deter them from actually looking and dissecting the binary. Essentially skill level or laziness could stop them from going further, and they may just assume the executable is just an executable with nothing interesting inside.</p>
<p>Remember this is just a basic prototype, there are many ways to make it much harder to find sensitive data.</p>
<p><strong>Notes</strong></p>
<p>This is only works currently with PIE , position independent executable. I plan on improving on this concept to improve security, hiding it better, as well as being able to inject into other types of executable ELF types within Linux. This is just a proof of concept. There are a few potential bugs. But like I say this is just a proof of concept, and spark some more creativity in the community</p>
<p><strong>Demonstration Screenshots</strong></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/2/2/2299264deb70838a100e5ad3e29ee71d97bbdd5e.png" data-download-href="/uploads/short-url/4W4m2L6WopdOARFc2vzvFfV3grY.png?dl=1" title="Screenshot from 2020-09-29 14-13-27" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/2/2/2299264deb70838a100e5ad3e29ee71d97bbdd5e_2_690x431.png" alt="Screenshot from 2020-09-29 14-13-27" data-base62-sha1="4W4m2L6WopdOARFc2vzvFfV3grY" width="690" height="431" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/2/2/2299264deb70838a100e5ad3e29ee71d97bbdd5e_2_690x431.png, https://0x00sec.s3.amazonaws.com/optimized/3X/2/2/2299264deb70838a100e5ad3e29ee71d97bbdd5e_2_1035x646.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/2/2/2299264deb70838a100e5ad3e29ee71d97bbdd5e.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/2/2/2299264deb70838a100e5ad3e29ee71d97bbdd5e_2_10x10.png"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/0/40ce011063333b971acc135b833f5e2d683b192f.png" data-download-href="/uploads/short-url/9fhV2oxe7YZXyTuf3RqCFO6hjNJ.png?dl=1" title="Screenshot from 2020-09-29 14-13-44" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/0/40ce011063333b971acc135b833f5e2d683b192f_2_690x431.png" alt="Screenshot from 2020-09-29 14-13-44" data-base62-sha1="9fhV2oxe7YZXyTuf3RqCFO6hjNJ" width="690" height="431" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/0/40ce011063333b971acc135b833f5e2d683b192f_2_690x431.png, https://0x00sec.s3.amazonaws.com/optimized/3X/4/0/40ce011063333b971acc135b833f5e2d683b192f_2_1035x646.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/4/0/40ce011063333b971acc135b833f5e2d683b192f.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/4/0/40ce011063333b971acc135b833f5e2d683b192f_2_10x10.png"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/1/511017674f821b603729799e5312f4ab744c5b0d.png" data-download-href="/uploads/short-url/bz79lJrABCjHSKJdvheNvggQZXL.png?dl=1" title="Screenshot from 2020-09-29 14-14-56" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/1/511017674f821b603729799e5312f4ab744c5b0d_2_690x431.png" alt="Screenshot from 2020-09-29 14-14-56" data-base62-sha1="bz79lJrABCjHSKJdvheNvggQZXL" width="690" height="431" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/1/511017674f821b603729799e5312f4ab744c5b0d_2_690x431.png, https://0x00sec.s3.amazonaws.com/optimized/3X/5/1/511017674f821b603729799e5312f4ab744c5b0d_2_1035x646.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/5/1/511017674f821b603729799e5312f4ab744c5b0d.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/5/1/511017674f821b603729799e5312f4ab744c5b0d_2_10x10.png"></a></div><p></p>
<p><strong>Full Code Available Here</strong></p>
<p>My code only accepts .GPG files, meaning it refuses to inject Files which have not been encrypted with GPG. And again it’s a quick prototype, there are a few bugs, and the error checking isn’t really implemented properly, as it’s a very quick prototype proof of concept</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/digitalXmage/HideMe" target="_blank" rel="noopener nofollow ugc">GitHub</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/3X/8/7/87821f82cacd56abc33104aba5594aa42b038be4.jpeg" class="thumbnail onebox-avatar" width="360" height="360">

<h3><a href="https://github.com/digitalXmage/HideMe" target="_blank" rel="noopener nofollow ugc">digitalXmage/HideMe</a></h3>

<p>Hide Encrypted .gpg Files inside an unsuspecting Binary Executable - digitalXmage/HideMe</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p><strong>Conclusion</strong></p>
<p>I Hope someone has learnt something from this. Or if not, at least open some doors in terms of creativity. This is my first Actual Write up post. Lets Hope it’s not completely useless…</p>
          <p><a href="https://0x00sec.org/t/hide-encrypted-files-inside-unsuspecting-binaries/23323/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hide-encrypted-files-inside-unsuspecting-binaries/23323/1</link>
        <pubDate>Tue, 29 Sep 2020 14:14:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-23323-1</guid>
        <source url="https://0x00sec.org/t/hide-encrypted-files-inside-unsuspecting-binaries/23323.rss">Hide Encrypted Files inside unsuspecting Binaries</source>
      </item>
  </channel>
</rss>
