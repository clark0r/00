<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Breaking non-ANSI RSA with Pollard&#39;s algorithm</title>
    <link>https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410</link>
    <description># WTF is RFC5114?
We all know the importance of large prime numbers in cryptography, given that `n = pq` form large numbers&#39; prime factorization requires an unreachable amount of computational resources.
But why is this RFC enforces a secure DH group (used not just in crypto, but zeroknowledge systems too like FFS or Chaum-Pedersen) and the ANSI-RSA standard requires &quot;strong&quot; primes on top of this? (there is a dispute on this, more below)

So as you already know, RSA begins with finding a modulus N by multiplying two large primes.
But we all know that modulo algebra is a really friendly area in math, given that the modulo is an equivalence-relation, so we can do almost any kind of magic with it without breaking the result.
There are several examples of these magics for eg Fermats-little theorem which states that if a number n is congruent to 1 modulo a factor of n, then the gcd(x − 1, n) will be divisible by that factor.

John Pollard came up with a special-usecase prime factorization like this called `p-1` that uses this magic. It happens that the current RSA &quot;rules&quot; we define is enough for that special usecase.

The algo is defined like this (actual example is from wikipedia):

We want to get the prime factorization of 299

- First we get a number called a &quot;smooth bound&quot; to 299
  A smooth number  is a concept written down by Leonard Adleman, it means that number X is Y-bound if neither of X&#39;s prime factors are greater than Y.
  Let this number be `5` for start.
- Then we multiply the floor of all primes on the power of `log_p(n)` smaller than our smooth bound
  Formally ![](https://wikimedia.org/api/rest_v1/media/math/render/svg/5aeddb3e83515dbe572b109415216f87eb8ff890)
  We selected the bound `5`, the primes up to 5 are `[2,3,5]`
  `floor(log2(299)) = 8`
  `floor(log3(299)) = 5`
  `floor(log5(299)) = 3`
  So our equation is: `M = 2^8 * 3^5 * 5^3`
- Then we select a random coprime `a` to `n` (so that GCD(a,n) == 1, you can use the euclidean algo here), let this be 2. I recommend using always 2 for IRL RSA cracking since 2 will be always a coprime (as any other integer) and it&#39;s faster to operate on powers of 2 on a CPU.
- We search for `GCD(a^m -1 ,n)` which is 13
  If the result is 1 so `(a^m)-1` is also a coprime, we select a larger bound and restart
  If the result is n we need a smaller bound and restart
  13 is smaller than N and larger than 1 so this is our solution.
  299/13 = 23 which is a prime so we are over with the factorization now.

So as you may get the overall idea now, since we won&#39;t have an easy job with large primes we&#39;ll need this procedure several times for a full factorization.
There&#39;s an efficient mature implementation of p-1 and also several factorization algos here: https://gforge.inria.fr/forum/forum.php?forum_id=11510

### The solution
Safe primes are primes in the form 2p+1 where p is a prime too. Because the p-1 algorithms efficiency depends on not p&#39;s but p-1&#39;s prime factorization, if you satisfy this dependency it implies that an attacker cannot select a smooth parameter easily (as it&#39;s proven that if q=2p+1 then q-1 will have a large factor).
Strong primes takes this even further, these are primes `p`  that have a property that it&#39;s greater then the arithmetic mean of it&#39;s neighbor primes. Formally `p_n &gt; (p_(n-1) + p_(n+1)) / 2`. We need these because Pollard came up with a +1 and even a Rho factorization algorithm later :)

### The case with ANSI and stuff
So you may feel like to destroy all your 4096-bit keys but remember that this algo still has a bottleneck on runtime O(B*log(B)*log^2(n)), so if you have to increase B several times you&#39;ve fallen into the &quot;computationally infeasible to crack&quot; pitfall again. But this is no explanation so the ANSI-RSA standard required strong primes to be used with implementations
**However**
Even more efficient factorization algorithms showed up (tutorials on those later) so several other &quot;standards&quot; (famous xkcd here) advised that using strong primes is just an overhead for they can&#39;t provide security against the newest weapons.</description>
    
    <lastBuildDate>Sat, 26 Aug 2017 02:33:44 +0000</lastBuildDate>
    <category>Cryptology</category>
    <atom:link href="https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Breaking non-ANSI RSA with Pollard&#39;s algorithm</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>For clarity’s sake, you should declare the variables before you use them in later steps. <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410/4</link>
        <pubDate>Sat, 26 Aug 2017 02:33:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3410-4</guid>
        <source url="https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410.rss">Breaking non-ANSI RSA with Pollard&#39;s algorithm</source>
      </item>
      <item>
        <title>Breaking non-ANSI RSA with Pollard&#39;s algorithm</title>
        <dc:creator><![CDATA[Silur]]></dc:creator>
        <description><![CDATA[
            <p><code>a</code> is the random coprime we choose against N in the third step, <code>m</code> is the sum we got from the second step</p>
          <p><a href="https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410/3</link>
        <pubDate>Sat, 26 Aug 2017 02:32:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3410-3</guid>
        <source url="https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410.rss">Breaking non-ANSI RSA with Pollard&#39;s algorithm</source>
      </item>
      <item>
        <title>Breaking non-ANSI RSA with Pollard&#39;s algorithm</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Where do all these <code>a</code>'s, <code>m</code>'s, etc, come up?</p>
          <p><a href="https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410/2</link>
        <pubDate>Sat, 26 Aug 2017 02:21:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3410-2</guid>
        <source url="https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410.rss">Breaking non-ANSI RSA with Pollard&#39;s algorithm</source>
      </item>
      <item>
        <title>Breaking non-ANSI RSA with Pollard&#39;s algorithm</title>
        <dc:creator><![CDATA[Silur]]></dc:creator>
        <description><![CDATA[
            <h1>WTF is RFC5114?</h1>
<p>We all know the importance of large prime numbers in cryptography, given that <code>n = pq</code> form large numbers’ prime factorization requires an unreachable amount of computational resources.<br>
But why is this RFC enforces a secure DH group (used not just in crypto, but zeroknowledge systems too like FFS or Chaum-Pedersen) and the ANSI-RSA standard requires “strong” primes on top of this? (there is a dispute on this, more below)</p>
<p>So as you already know, RSA begins with finding a modulus N by multiplying two large primes.<br>
But we all know that modulo algebra is a really friendly area in math, given that the modulo is an equivalence-relation, so we can do almost any kind of magic with it without breaking the result.<br>
There are several examples of these magics for eg Fermats-little theorem which states that if a number n is congruent to 1 modulo a factor of n, then the gcd(x − 1, n) will be divisible by that factor.</p>
<p>John Pollard came up with a special-usecase prime factorization like this called <code>p-1</code> that uses this magic. It happens that the current RSA “rules” we define is enough for that special usecase.</p>
<p>The algo is defined like this (actual example is from wikipedia):</p>
<p>We want to get the prime factorization of 299</p>
<ul>
<li>First we get a number called a “smooth bound” to 299<br>
A smooth number  is a concept written down by Leonard Adleman, it means that number X is Y-bound if neither of X’s prime factors are greater than Y.<br>
Let this number be <code>5</code> for start.</li>
<li>Then we multiply the floor of all primes on the power of <code>log_p(n)</code> smaller than our smooth bound<br>
Formally <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5aeddb3e83515dbe572b109415216f87eb8ff890" alt="" width="21" height="5"><br>
We selected the bound <code>5</code>, the primes up to 5 are <code>[2,3,5]</code><br>
<code>floor(log2(299)) = 8</code><br>
<code>floor(log3(299)) = 5</code><br>
<code>floor(log5(299)) = 3</code><br>
So our equation is: <code>M = 2^8 * 3^5 * 5^3</code>
</li>
<li>Then we select a random coprime <code>a</code> to <code>n</code> (so that GCD(a,n) == 1, you can use the euclidean algo here), let this be 2. I recommend using always 2 for IRL RSA cracking since 2 will be always a coprime (as any other integer) and it’s faster to operate on powers of 2 on a CPU.</li>
<li>We search for <code>GCD(a^m -1 ,n)</code> which is 13<br>
If the result is 1 so <code>(a^m)-1</code> is also a coprime, we select a larger bound and restart<br>
If the result is n we need a smaller bound and restart<br>
13 is smaller than N and larger than 1 so this is our solution.<br>
299/13 = 23 which is a prime so we are over with the factorization now.</li>
</ul>
<p>So as you may get the overall idea now, since we won’t have an easy job with large primes we’ll need this procedure several times for a full factorization.<br>
There’s an efficient mature implementation of p-1 and also several factorization algos here: <a href="https://gforge.inria.fr/forum/forum.php?forum_id=11510" rel="nofollow noopener">https://gforge.inria.fr/forum/forum.php?forum_id=11510</a></p>
<h3>The solution</h3>
<p>Safe primes are primes in the form 2p+1 where p is a prime too. Because the p-1 algorithms efficiency depends on not p’s but p-1’s prime factorization, if you satisfy this dependency it implies that an attacker cannot select a smooth parameter easily (as it’s proven that if q=2p+1 then q-1 will have a large factor).<br>
Strong primes takes this even further, these are primes <code>p</code>  that have a property that it’s greater then the arithmetic mean of it’s neighbor primes. Formally <code>p_n &gt; (p_(n-1) + p_(n+1)) / 2</code>. We need these because Pollard came up with a +1 and even a Rho factorization algorithm later <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<h3>The case with ANSI and stuff</h3>
<p>So you may feel like to destroy all your 4096-bit keys but remember that this algo still has a bottleneck on runtime O(B*log(B)*log^2(n)), so if you have to increase B several times you’ve fallen into the “computationally infeasible to crack” pitfall again. But this is no explanation so the ANSI-RSA standard required strong primes to be used with implementations<br>
<strong>However</strong><br>
Even more efficient factorization algorithms showed up (tutorials on those later) so several other “standards” (famous xkcd here) advised that using strong primes is just an overhead for they can’t provide security against the newest weapons.</p>
          <p><a href="https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410/1</link>
        <pubDate>Fri, 25 Aug 2017 19:22:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3410-1</guid>
        <source url="https://0x00sec.org/t/breaking-non-ansi-rsa-with-pollards-algorithm/3410.rss">Breaking non-ANSI RSA with Pollard&#39;s algorithm</source>
      </item>
  </channel>
</rss>
