<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[VulnHub] Troll: 1 - Solution</title>
    <link>https://0x00sec.org/t/vulnhub-troll-1-solution/5963</link>
    <description>This is my solution to the Tr0ll: 1 challenge by Maleus. The challenge and his webpage can be found here:

https://www.vulnhub.com/entry/tr0ll-1,100/

&gt; Tr0ll was inspired by the constant trolling of the machines within the OSCP labs.

&gt; The goal is simple, gain root and get Proof.txt from the /root directory.

&gt; Not for the easily frustrated! Fair warning, there be trolls ahead!

## Details
After locating the IP address of the target machine on our virtual network (we were not provided with login or networking information), I added the address to my `/etc/hosts` to prevent from having to keep typing out the entire IP.
```
    Currently scanning: Finished!   |   Screen View: Unique Hosts                 
                                                                               
    4 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 240               
    _____________________________________________________________________________
    IP            At MAC Address     Count     Len  MAC Vendor / Hostname      
    -----------------------------------------------------------------------------
    192.168.171.1   00:50:56:c0:00:08      1      60  VMware, Inc.                
    192.168.171.2   00:50:56:fe:d9:5a      1      60  VMware, Inc.                
    192.168.171.133 00:0c:29:29:73:49      1      60  VMware, Inc.                
    192.168.171.254 00:50:56:f0:f5:0a      1      60  VMware, Inc.                

    root@kali:~/troll# echo &quot;192.168.171.133 troll&quot; &gt;&gt; /etc/hosts
```
Now that we have that out of the way, let&#39;s start with an NMAP scan to get some more information.
```
    root@kali:~/troll# nmap -Pn -sT -A -p- -T4 troll
    
    Starting Nmap 7.31 ( https://nmap.org ) at 2017-01-03 00:56 CST
    Nmap scan report for troll (192.168.171.133)
    Host is up (0.00026s latency).
    Not shown: 65532 closed ports
    PORT   STATE SERVICE VERSION
    21/tcp open  ftp     vsftpd 3.0.2
    | ftp-anon: Anonymous FTP login allowed (FTP code 230)
    |_-rwxrwxrwx    1 1000     0            8068 Aug 09  2014 lol.pcap [NSE: writeable]
    22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)
    | ssh-hostkey: 
    |   1024 d6:18:d9:ef:75:d3:1c:29:be:14:b5:2b:18:54:a9:c0 (DSA)
    |   2048 ee:8c:64:87:44:39:53:8c:24:fe:9d:39:a9:ad:ea:db (RSA)
    |_  256 0e:66:e6:50:cf:56:3b:9c:67:8b:5f:56:ca:ae:6b:f4 (ECDSA)
    80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
    | http-robots.txt: 1 disallowed entry 
    |_/secret
    |_http-server-header: Apache/2.4.7 (Ubuntu)
    |_http-title: Site doesn&#39;t have a title (text/html).
    MAC Address: 00:0C:29:29:73:49 (VMware)
    No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
    
    Network Distance: 1 hop
    Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
    
    TRACEROUTE
    HOP RTT     ADDRESS
    1   0.26 ms troll (192.168.171.133)
```

We have FTP (with anonymous login enabled), SSH, and an Apache web server. We don&#39;t have very much to go off of so let&#39;s start with the web server. 

![Alt](upload://uFIwiedcVaKvWRrbMZIVaTxTNth.jpeg &quot;Pic&quot;)

Staying true to its name, the web server immediately presents us with a troll. Nothing in the source, looks like a dead end to me. Let&#39;s check out the `/secret` directory that NMAP picked up.

![Alt](upload://1HD73lP0hmQQMGYJ5HbZxzG39Bg.jpeg &quot;Pic2&quot;)

No surprise here...At this point, I tried to search for data hidden in the images but I found nothing useful. Web server seems like a dead end for now, so I&#39;m going to check out that FTP server. After logging with with `anonymous:pass `, I see that there is a pcap file for us to download. 
```
    root@kali:~/troll# ftp
    ftp&gt; open
    (to) troll
    Connected to troll.
    220 (vsFTPd 3.0.2)
    Name (troll:root): anonymous
    331 Please specify the password.
    Password:
    230 Login successful.
    Remote system type is UNIX.
    Using binary mode to transfer files.
    ftp&gt; ls
    200 PORT command successful. Consider using PASV.
    150 Here comes the directory listing.
    -rwxrwxrwx    1 1000     0            8068 Aug 09  2014 lol.pcap
```

I download the pcap file and throw it into Wireshark. After skimming over the capture, I notice a file named `secret_stuff.txt`. Looking down a little further, I notice that this file was downloaded and the data is readily available to read.

![](upload://3NKxpAdXWyiHZlAcCe9fk10ARIT.jpeg)
![](upload://w3iADWtsIGeaewrDZl1dhoCnZ1K.jpeg)

After scratching my head over this message for probably far too long, I finally figure out that this is a directory on the web server. I copy and paste it into my browser and finally make some progress!

![](upload://hPopDb12GXRooiDgW8CDfpzUUVr.jpeg)

Here we have some kind of file named `roflmao`. I download it and run the `file` command on it, it is a 32-bit executable. Upon running it, we get this message
&gt; Find address 0x0856BF to proceed

My first instinct is to start digging into the executable itself. I run `objdump` on the file but discover that 0x0856BF is too high of a memory address and isn&#39;t found within the binary. 

```
    root@kali:~/troll# objdump -d roflmao 
    
    roflmao:     file format elf32-i386
    
    0804841d &lt;main&gt;:
    
    804841d:	55                   	push   %ebp
    
    804841e:	89 e5                	mov    %esp,%ebp
    
    8048420:	83 e4 f0             	and    $0xfffffff0,%esp
    
    8048423:	83 ec 10             	sub    $0x10,%esp
    
    8048426:	c7 04 24 d0 84 04 08 	movl   $0x80484d0,(%esp)
    
    804842d:	e8 be fe ff ff       	call   80482f0 &lt;printf@plt&gt;
    
    8048432:	c9                   	leave  
    
    8048433:	c3                   	ret    
    
    8048434:	66 90                	xchg   %ax,%ax
    
    8048436:	66 90                	xchg   %ax,%ax
    
    8048438:	66 90                	xchg   %ax,%ax
    
    804843a:	66 90                	xchg   %ax,%ax
    
    804843c:	66 90                	xchg   %ax,%ax
    
    804843e:	66 90                	xchg   %ax,%ax
```

Instead of wasting anymore time on that route, I write it off as a dead end and decide to try what worked before; check to see if it&#39;s a directory. I copy and paste that address into my browser and we get a hit!
 
![](upload://6Z5R5n2d2PXoDM7zniR9vZzGHSW.jpeg)
![](upload://PxbjYXzXtl1ywo7ZytajHv49DK.jpeg)
![](upload://mRaenCVj7wVoBxsuPCKMOhyuOau.jpeg)

We are presented with two directories, one containing what appears to be a list of usernames and one containing what appears to be a password for one of those usernames. I&#39;m gonna guess that these usernames and password are for the SSH. So, after lots of trial and error I discover that the password located in `Pass.txt` is NOT the correct password. The password is in fact...&quot;Pass.txt&quot; (silly me, what was i thinking).

The correct login information is `overflow:Pass.txt`. We have shell access! Now we can really start poking around :)

![](https://i.imgur.com/undefined.jpg)

Remember, the goal here is to obtain root level privileges so we can read the flag located in the /root directory. After poking around for a bit, I don&#39;t find any files that are particularly interesting, ran into lots of dead ends. I finally decided to check the exact kernel release and version of the target system. Running `uname -a` gives us: `Linux troll 3.13.0-32-generic #57-Ubuntu SMP Tue Jul 15 03:51:12 UTC 2014 i686 i686 i686 GNU/Linux`

Before diving any further into the filesystem to try and enumerate vulnerable processes, I decide to start with the kernel itself. Utilizing `searchsploit`, I discover that Ubuntu versions 12.04, 14.04, 14.10, and 15.04 that are running the Linux Kernel 3.13.0 - 3.19 are vulnerable to a local root exploit. If you care to read the exact workings of the exploit, which I recommend you do, it can be found here: 
[Linux Kernel 3.13.0 &lt; 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - &#39;overlayfs&#39; Privilege Escalation](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1328)

Let&#39;s see if we can get this working! Since I have the exploit on my Kali machine, I spin up a simple web server and download the source code of the exploit over to the target system using `wget`. Next, I compile the c file into an executable and run it. Let&#39;s see what we get...
![](upload://2o6Xrw8VJmJNRWqYpJQT5GSGlNX.jpeg)

We have successfully obtained root and captured the flag! Quite a frustrating challenge, but very satisfying.</description>
    
    <lastBuildDate>Sun, 25 Mar 2018 14:07:29 +0000</lastBuildDate>
    <category>CTF</category>
    <atom:link href="https://0x00sec.org/t/vulnhub-troll-1-solution/5963.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[VulnHub] Troll: 1 - Solution</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/vulnhub-troll-1-solution/5963/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/vulnhub-troll-1-solution/5963/5</link>
        <pubDate>Sat, 21 Apr 2018 04:46:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5963-5</guid>
        <source url="https://0x00sec.org/t/vulnhub-troll-1-solution/5963.rss">[VulnHub] Troll: 1 - Solution</source>
      </item>
      <item>
        <title>[VulnHub] Troll: 1 - Solution</title>
        <dc:creator><![CDATA[anon79434934]]></dc:creator>
        <description><![CDATA[
            <p>I am really liking these Vulnhub challenges, finally something else other than RE.</p>
<p>Viva la revolucion!</p>
          <p><a href="https://0x00sec.org/t/vulnhub-troll-1-solution/5963/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/vulnhub-troll-1-solution/5963/4</link>
        <pubDate>Sun, 25 Mar 2018 14:07:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5963-4</guid>
        <source url="https://0x00sec.org/t/vulnhub-troll-1-solution/5963.rss">[VulnHub] Troll: 1 - Solution</source>
      </item>
      <item>
        <title>[VulnHub] Troll: 1 - Solution</title>
        <dc:creator><![CDATA[johnmarston]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for reading, glad you enjoyed it!</p>
          <p><a href="https://0x00sec.org/t/vulnhub-troll-1-solution/5963/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/vulnhub-troll-1-solution/5963/3</link>
        <pubDate>Fri, 23 Mar 2018 18:08:08 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5963-3</guid>
        <source url="https://0x00sec.org/t/vulnhub-troll-1-solution/5963.rss">[VulnHub] Troll: 1 - Solution</source>
      </item>
      <item>
        <title>[VulnHub] Troll: 1 - Solution</title>
        <dc:creator><![CDATA[alioo]]></dc:creator>
        <description><![CDATA[
            <p>nice walkthrough <img src="https://0x00sec.org/images/emoji/twitter/+1.png?v=9" title=":+1:" class="emoji" alt=":+1:"></p>
          <p><a href="https://0x00sec.org/t/vulnhub-troll-1-solution/5963/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/vulnhub-troll-1-solution/5963/2</link>
        <pubDate>Fri, 23 Mar 2018 11:27:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5963-2</guid>
        <source url="https://0x00sec.org/t/vulnhub-troll-1-solution/5963.rss">[VulnHub] Troll: 1 - Solution</source>
      </item>
      <item>
        <title>[VulnHub] Troll: 1 - Solution</title>
        <dc:creator><![CDATA[johnmarston]]></dc:creator>
        <description><![CDATA[
            <p>This is my solution to the Tr0ll: 1 challenge by Maleus. The challenge and his webpage can be found here:</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://www.vulnhub.com/static/img/favicon.ico" class="site-icon" width="64" height="64">
      <a href="https://www.vulnhub.com/entry/tr0ll-1,100/" target="_blank" rel="noopener nofollow ugc">vulnhub.com</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:666/500;"><img src="https://0x00sec.s3.amazonaws.com/original/3X/6/5/65cf04159507378462c5316707b264a32b2a4b5c.png" class="thumbnail" width="666" height="500" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/6/5/65cf04159507378462c5316707b264a32b2a4b5c_2_10x10.png"></div>

<h3><a href="https://www.vulnhub.com/entry/tr0ll-1,100/" target="_blank" rel="noopener nofollow ugc">Tr0ll: 1</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<blockquote>
<p>Tr0ll was inspired by the constant trolling of the machines within the OSCP labs.</p>
</blockquote>
<blockquote>
<p>The goal is simple, gain root and get Proof.txt from the /root directory.</p>
</blockquote>
<blockquote>
<p>Not for the easily frustrated! Fair warning, there be trolls ahead!</p>
</blockquote>
<h2>Details</h2>
<p>After locating the IP address of the target machine on our virtual network (we were not provided with login or networking information), I added the address to my <code>/etc/hosts</code> to prevent from having to keep typing out the entire IP.</p>
<pre><code class="lang-auto">    Currently scanning: Finished!   |   Screen View: Unique Hosts                 
                                                                               
    4 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 240               
    _____________________________________________________________________________
    IP            At MAC Address     Count     Len  MAC Vendor / Hostname      
    -----------------------------------------------------------------------------
    192.168.171.1   00:50:56:c0:00:08      1      60  VMware, Inc.                
    192.168.171.2   00:50:56:fe:d9:5a      1      60  VMware, Inc.                
    192.168.171.133 00:0c:29:29:73:49      1      60  VMware, Inc.                
    192.168.171.254 00:50:56:f0:f5:0a      1      60  VMware, Inc.                

    root@kali:~/troll# echo "192.168.171.133 troll" &gt;&gt; /etc/hosts
</code></pre>
<p>Now that we have that out of the way, let’s start with an NMAP scan to get some more information.</p>
<pre><code class="lang-auto">    root@kali:~/troll# nmap -Pn -sT -A -p- -T4 troll
    
    Starting Nmap 7.31 ( https://nmap.org ) at 2017-01-03 00:56 CST
    Nmap scan report for troll (192.168.171.133)
    Host is up (0.00026s latency).
    Not shown: 65532 closed ports
    PORT   STATE SERVICE VERSION
    21/tcp open  ftp     vsftpd 3.0.2
    | ftp-anon: Anonymous FTP login allowed (FTP code 230)
    |_-rwxrwxrwx    1 1000     0            8068 Aug 09  2014 lol.pcap [NSE: writeable]
    22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)
    | ssh-hostkey: 
    |   1024 d6:18:d9:ef:75:d3:1c:29:be:14:b5:2b:18:54:a9:c0 (DSA)
    |   2048 ee:8c:64:87:44:39:53:8c:24:fe:9d:39:a9:ad:ea:db (RSA)
    |_  256 0e:66:e6:50:cf:56:3b:9c:67:8b:5f:56:ca:ae:6b:f4 (ECDSA)
    80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
    | http-robots.txt: 1 disallowed entry 
    |_/secret
    |_http-server-header: Apache/2.4.7 (Ubuntu)
    |_http-title: Site doesn't have a title (text/html).
    MAC Address: 00:0C:29:29:73:49 (VMware)
    No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
    
    Network Distance: 1 hop
    Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
    
    TRACEROUTE
    HOP RTT     ADDRESS
    1   0.26 ms troll (192.168.171.133)
</code></pre>
<p>We have FTP (with anonymous login enabled), SSH, and an Apache web server. We don’t have very much to go off of so let’s start with the web server.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/d/d6f8780acfc9670ec9fcb01c7e5691f4223a0953.jpeg" data-download-href="/uploads/short-url/uFIwiedcVaKvWRrbMZIVaTxTNth.jpeg?dl=1" title="Pic" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d6f8780acfc9670ec9fcb01c7e5691f4223a0953.jpeg" alt="Alt" title="Pic" data-base62-sha1="uFIwiedcVaKvWRrbMZIVaTxTNth" width="690" height="350" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/d/d6f8780acfc9670ec9fcb01c7e5691f4223a0953_2_10x10.png"></a></div><p></p>
<p>Staying true to its name, the web server immediately presents us with a troll. Nothing in the source, looks like a dead end to me. Let’s check out the <code>/secret</code> directory that NMAP picked up.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/0/0bf0c6d2bdfe2c3c0302bdb04c94ef50d0fcee12.jpeg" data-download-href="/uploads/short-url/1HD73lP0hmQQMGYJ5HbZxzG39Bg.jpeg?dl=1" title="Pic2" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0bf0c6d2bdfe2c3c0302bdb04c94ef50d0fcee12.jpeg" alt="Alt" title="Pic2" data-base62-sha1="1HD73lP0hmQQMGYJ5HbZxzG39Bg" width="690" height="329" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/0/0bf0c6d2bdfe2c3c0302bdb04c94ef50d0fcee12_2_10x10.png"></a></div><p></p>
<p>No surprise here…At this point, I tried to search for data hidden in the images but I found nothing useful. Web server seems like a dead end for now, so I’m going to check out that FTP server. After logging with with <code>anonymous:pass </code>, I see that there is a pcap file for us to download.</p>
<pre><code class="lang-auto">    root@kali:~/troll# ftp
    ftp&gt; open
    (to) troll
    Connected to troll.
    220 (vsFTPd 3.0.2)
    Name (troll:root): anonymous
    331 Please specify the password.
    Password:
    230 Login successful.
    Remote system type is UNIX.
    Using binary mode to transfer files.
    ftp&gt; ls
    200 PORT command successful. Consider using PASV.
    150 Here comes the directory listing.
    -rwxrwxrwx    1 1000     0            8068 Aug 09  2014 lol.pcap
</code></pre>
<p>I download the pcap file and throw it into Wireshark. After skimming over the capture, I notice a file named <code>secret_stuff.txt</code>. Looking down a little further, I notice that this file was downloaded and the data is readily available to read.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/1/1aa638512382918f75d220429756659cf271f7f3.jpeg" data-download-href="/uploads/short-url/3NKxpAdXWyiHZlAcCe9fk10ARIT.jpeg?dl=1" title="" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/1/1aa638512382918f75d220429756659cf271f7f3_2_690x164.jpeg" alt="" data-base62-sha1="3NKxpAdXWyiHZlAcCe9fk10ARIT" width="690" height="164" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/1/1aa638512382918f75d220429756659cf271f7f3_2_690x164.jpeg, https://0x00sec.s3.amazonaws.com/optimized/2X/1/1aa638512382918f75d220429756659cf271f7f3_2_1035x246.jpeg 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/1/1aa638512382918f75d220429756659cf271f7f3_2_1380x328.jpeg 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/1aa638512382918f75d220429756659cf271f7f3_2_10x10.png"></a></div><br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/e/e0a50f26381ed54221316410f86b02d5ee7068c8.jpeg" data-download-href="/uploads/short-url/w3iADWtsIGeaewrDZl1dhoCnZ1K.jpeg?dl=1" title="" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e0a50f26381ed54221316410f86b02d5ee7068c8.jpeg" alt="" data-base62-sha1="w3iADWtsIGeaewrDZl1dhoCnZ1K" width="690" height="151" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/e/e0a50f26381ed54221316410f86b02d5ee7068c8_2_10x10.png"></a></div><p></p>
<p>After scratching my head over this message for probably far too long, I finally figure out that this is a directory on the web server. I copy and paste it into my browser and finally make some progress!</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/7/7cf4348385ba5e2e5fce1a4416ff20f21bcc3659.jpeg" data-download-href="/uploads/short-url/hPopDb12GXRooiDgW8CDfpzUUVr.jpeg?dl=1" title="" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7cf4348385ba5e2e5fce1a4416ff20f21bcc3659.jpeg" alt="" data-base62-sha1="hPopDb12GXRooiDgW8CDfpzUUVr" width="690" height="302" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/7/7cf4348385ba5e2e5fce1a4416ff20f21bcc3659_2_10x10.png"></a></div><p></p>
<p>Here we have some kind of file named <code>roflmao</code>. I download it and run the <code>file</code> command on it, it is a 32-bit executable. Upon running it, we get this message</p>
<blockquote>
<p>Find address 0x0856BF to proceed</p>
</blockquote>
<p>My first instinct is to start digging into the executable itself. I run <code>objdump</code> on the file but discover that 0x0856BF is too high of a memory address and isn’t found within the binary.</p>
<pre><code class="lang-auto">    root@kali:~/troll# objdump -d roflmao 
    
    roflmao:     file format elf32-i386
    
    0804841d &lt;main&gt;:
    
    804841d:	55                   	push   %ebp
    
    804841e:	89 e5                	mov    %esp,%ebp
    
    8048420:	83 e4 f0             	and    $0xfffffff0,%esp
    
    8048423:	83 ec 10             	sub    $0x10,%esp
    
    8048426:	c7 04 24 d0 84 04 08 	movl   $0x80484d0,(%esp)
    
    804842d:	e8 be fe ff ff       	call   80482f0 &lt;printf@plt&gt;
    
    8048432:	c9                   	leave  
    
    8048433:	c3                   	ret    
    
    8048434:	66 90                	xchg   %ax,%ax
    
    8048436:	66 90                	xchg   %ax,%ax
    
    8048438:	66 90                	xchg   %ax,%ax
    
    804843a:	66 90                	xchg   %ax,%ax
    
    804843c:	66 90                	xchg   %ax,%ax
    
    804843e:	66 90                	xchg   %ax,%ax
</code></pre>
<p>Instead of wasting anymore time on that route, I write it off as a dead end and decide to try what worked before; check to see if it’s a directory. I copy and paste that address into my browser and we get a hit!</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/3/30f5034b7ee8dd99143d85c456a9d9da752d9e7a.jpeg" data-download-href="/uploads/short-url/6Z5R5n2d2PXoDM7zniR9vZzGHSW.jpeg?dl=1" title="" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/2X/3/30f5034b7ee8dd99143d85c456a9d9da752d9e7a.jpeg" alt="" data-base62-sha1="6Z5R5n2d2PXoDM7zniR9vZzGHSW" width="690" height="268" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/3/30f5034b7ee8dd99143d85c456a9d9da752d9e7a_2_10x10.png"></a></div><br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/0/05d357352f2dc2d33b6ab227ad921b68e7c361f4.jpeg" alt="" data-base62-sha1="PxbjYXzXtl1ywo7ZytajHv49DK" width="626" height="234"><br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a0325518858acb353998c3772445e6e7a93600e2.jpeg" alt="" data-base62-sha1="mRaenCVj7wVoBxsuPCKMOhyuOau" width="641" height="84"><p></p>
<p>We are presented with two directories, one containing what appears to be a list of usernames and one containing what appears to be a password for one of those usernames. I’m gonna guess that these usernames and password are for the SSH. So, after lots of trial and error I discover that the password located in <code>Pass.txt</code> is NOT the correct password. The password is in fact…“Pass.txt” (silly me, what was i thinking).</p>
<p>The correct login information is <code>overflow:Pass.txt</code>. We have shell access! Now we can really start poking around <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p><span alt="" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>Remember, the goal here is to obtain root level privileges so we can read the flag located in the /root directory. After poking around for a bit, I don’t find any files that are particularly interesting, ran into lots of dead ends. I finally decided to check the exact kernel release and version of the target system. Running <code>uname -a</code> gives us: <code>Linux troll 3.13.0-32-generic #57-Ubuntu SMP Tue Jul 15 03:51:12 UTC 2014 i686 i686 i686 GNU/Linux</code></p>
<p>Before diving any further into the filesystem to try and enumerate vulnerable processes, I decide to start with the kernel itself. Utilizing <code>searchsploit</code>, I discover that Ubuntu versions 12.04, 14.04, 14.10, and 15.04 that are running the Linux Kernel 3.13.0 - 3.19 are vulnerable to a local root exploit. If you care to read the exact workings of the exploit, which I recommend you do, it can be found here:<br>
<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1328" rel="noopener nofollow ugc">Linux Kernel 3.13.0 &lt; 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - ‘overlayfs’ Privilege Escalation</a></p>
<p>Let’s see if we can get this working! Since I have the exploit on my Kali machine, I spin up a simple web server and download the source code of the exploit over to the target system using <code>wget</code>. Next, I compile the c file into an executable and run it. Let’s see what we get…<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/2X/1/10be1d688d1b1a799199bff0b1506649b2215dfd.jpeg" data-download-href="/uploads/short-url/2o6Xrw8VJmJNRWqYpJQT5GSGlNX.jpeg?dl=1" title="" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/10be1d688d1b1a799199bff0b1506649b2215dfd.jpeg" alt="" data-base62-sha1="2o6Xrw8VJmJNRWqYpJQT5GSGlNX" width="675" height="500" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/10be1d688d1b1a799199bff0b1506649b2215dfd_2_10x10.png"></a></div><p></p>
<p>We have successfully obtained root and captured the flag! Quite a frustrating challenge, but very satisfying.</p>
          <p><a href="https://0x00sec.org/t/vulnhub-troll-1-solution/5963/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/vulnhub-troll-1-solution/5963/1</link>
        <pubDate>Thu, 22 Mar 2018 04:46:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5963-1</guid>
        <source url="https://0x00sec.org/t/vulnhub-troll-1-solution/5963.rss">[VulnHub] Troll: 1 - Solution</source>
      </item>
  </channel>
</rss>
