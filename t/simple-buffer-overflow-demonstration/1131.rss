<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Simple Buffer Overflow Demonstration</title>
    <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131</link>
    <description>Hi 0x00&#39;ers :smiley:

I was messing around with C and I decided to replicate a buffer overflow attack. What is a buffer overflow?

In simple terms, `a buffer overflow is when input goes past the &quot;cap&quot; that is allowed for the input to have.`

In more advanced terms, `a buffer overflow is when the user inputs more data into a buffer than it had been allocated for.`

Here is a simple script to demonstrate.

```c
#include &lt;stdio.h&gt;  // Include the library you need to input and output things.

int main(){ // Define the main function. The &quot;int&quot; signifies it will return an integer(in this case zero to signify the end).
    int key = 0; // Set a variable &quot;key&quot; of the data type integer to zero (the name &quot;key&quot; can be anything).
    char typy[5]; // Create a character array of the name &quot;typy&quot; that allocates 5 bytes for stdin (input) (&quot;typy&quot; can be any name you want).
    printf(&quot;Type something: &quot;); // A function that lets the user input data.
    gets(typy); // &quot;Gets&quot; the input that the user typed and stores it in typy.
    printf(typy); // Prints what you typed (the data stored in typy).
    printf(&quot;\n&quot;); // Prints a new line to make it look neater when the program exits (purely cosmetic. I use it to make it look neater in my linux terminal.)
    if (key){ // If the value of key is true (non zero)
        printf(&quot;It worked\n&quot;); // Print &quot;It worked. Notice the new line character. This is, once again, to make my terminal look neat as the program executes.&quot;
    }
    return 0; // Exits the program cleanly. (You are returning an integer to the function. That is why you start it off with &quot;int&quot; main()).
}
```
Now save the script and compile it with your favorite compiler.
For example, I would do `gcc buffer_overflow_demo.c` then run it with `./a.out`.

Let&#39;s evaluate what the script does. First, it tells you to type something. Let&#39;s type a word under five characters such as &quot;dog&quot;. It prints dog back out to you. Everything runs normal and as expected. Now run it again and this time type something over 5 such as &quot;0x00sec Rocks&quot;. What happens? This time it should output the line &quot;It worked&quot;. Why does that happen? `Simply because the character array ran out of room (allocated memory) to store what you typed in, so it &quot;overflowed&quot; and overwrote the variable &quot;key&quot; to make it non-zero.` Remember any thing non-zero is true. When you ran the program the first time and typed dog it was under the size of allocated memory so everything ran fine and nothing was overwritten.

I hope that helped you understand what a buffer overflow was, how it works, and how it is executed.
As always,

Stay Frosty :snowman:</description>
    
    <lastBuildDate>Thu, 13 Oct 2016 22:39:29 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/16">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/16</link>
        <pubDate>Sun, 21 Jan 2018 00:30:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-16</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[Fust3rCluck]]></dc:creator>
        <description><![CDATA[
            <p>Yes, you’re right. Fixing it.</p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/15</link>
        <pubDate>Thu, 13 Oct 2016 22:39:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-15</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>It’s arch-dependent. For instance, PA-RISC stack grows upwards… Never worked with one though.</p>
<p>Thinking about it as a physical stack may be confusing. Better consider it as a LIFO (Last In First out) collection. Then it doen’t matter in which direction it grows… the important thing is that the last to get in is the first to get out.</p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/14</link>
        <pubDate>Thu, 29 Sep 2016 05:22:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-14</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a>, IMO, the best way to find it out is through the legend GDB itself. Here’s a sample of ASM code if you want to play around with it. Nothing crazy, pretty self-explanatory, but it will help you visualise the whole upwards/downwards trick:</p>
<pre><code class="lang-auto">global _start			

section .text
_start:

	mov eax, 0x66778899
	mov ebx, 0x0
	mov ecx, 0x0

	push ax
	pop bx

	push eax
	pop ecx

	push word [sample]
	pop ecx

	push dword [sample]
	pop edx

	; exit syscall

	mov eax, 1
	mov ebx, 0		
	int 0x80


section .data

sample:	db 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11, 0x22
</code></pre>
<p>Compilation: nasm -g -f elf32 -o stack.o stack.nasm ; ld -o stack stack.o</p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/13</link>
        <pubDate>Thu, 29 Sep 2016 01:56:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-13</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>That’s what I thought…</p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/12</link>
        <pubDate>Thu, 29 Sep 2016 01:13:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-12</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>As the name suggests, stacking things are placing items on top of another, therefore it implies the upwards direction.</p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/11</link>
        <pubDate>Thu, 29 Sep 2016 01:11:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-11</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="_py" data-post="9" data-topic="1131">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/_py/40/4275_2.png" class="avatar"> _py:</div>
<blockquote>
<p>(keep in mind the stack grows downwards and the buffer will be growing upwards)</p>
</blockquote>
</aside>
<p>You’d think, visually, that the stack would grow upwards… Is this a universal thing or arch-dependent?</p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/10</link>
        <pubDate>Wed, 28 Sep 2016 23:22:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-10</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a> yes, padding is indeed applied but in this case it’s more important which variable gets stored below/above the another. If the buffer gets stored below the “key” variable, then it can indeed overflow and affect key’s value, otherwise the affected variables would be instruction pointers, frame pointers, auxiliary vectors  and much more (keep in mind the stack grows downwards and the buffer will be growing upwards).</p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/9</link>
        <pubDate>Wed, 28 Sep 2016 22:07:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-9</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/_py">@_py</a> I bet that article you linked me (<a href="http://www.catb.org/esr/structure-packing/" rel="nofollow noopener">here</a>) applies to this… There is likely padding between the variables in memory.</p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/8</link>
        <pubDate>Wed, 28 Sep 2016 20:51:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-8</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>Sure, compiler optimization plays a big role but I’ve messed with these kind of buffer overflows and I was unable to change the value of a certain variable unless the buffer was declared in a specific way/order.</p>
<p>Just an fyi to those who aren’t getting the expected result.</p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/7</link>
        <pubDate>Wed, 28 Sep 2016 17:41:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-7</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> pointed it out.</p>
<p>Apparently, gcc sorts local variables in the stack according to its type and not the declaration order. Looks like <code>int</code> goes first and actually the arrays goes last. It does not matter where do you put the <code>int</code>, it will always will go first, at least, right now with gcc.</p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/6</link>
        <pubDate>Wed, 28 Sep 2016 16:50:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-6</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>I’m not sure if there’s a guaranteed way of knowing how the stack will turn out since that entirely depends on the compiler and what it believes is the most optimal solution. But yes, most, if not all, of my encounters were the other way around.</p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/5</link>
        <pubDate>Wed, 28 Sep 2016 03:02:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-5</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>This is a buffer overflow vulnerability but not the one that can modify the state of a variable. Get a pen and draw the stack on a paper. The declaration of the variables in the source code says it all.</p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/4</link>
        <pubDate>Tue, 27 Sep 2016 16:23:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-4</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Good example.</p>
<p>You will probably have to compile with something like this, to actually test the program.</p>
<p><code>gcc -Wall -o bdemo buffer_overflow_demo.c -fno-stack-protector</code></p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/3</link>
        <pubDate>Sat, 24 Sep 2016 07:54:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-3</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Nice. Try to spot the other vulnerability in your code.</p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/2</link>
        <pubDate>Sat, 24 Sep 2016 06:34:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-2</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
      <item>
        <title>Simple Buffer Overflow Demonstration</title>
        <dc:creator><![CDATA[Fust3rCluck]]></dc:creator>
        <description><![CDATA[
            <p>Hi 0x00’ers <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p>I was messing around with C and I decided to replicate a buffer overflow attack. What is a buffer overflow?</p>
<p>In simple terms, <code>a buffer overflow is when input goes past the "cap" that is allowed for the input to have.</code></p>
<p>In more advanced terms, <code>a buffer overflow is when the user inputs more data into a buffer than it had been allocated for.</code></p>
<p>Here is a simple script to demonstrate.</p>
<pre><code class="lang-auto">#include &lt;stdio.h&gt;  // Include the library you need to input and output things.

int main(){ // Define the main function. The "int" signifies it will return an integer(in this case zero to signify the end).
    int key = 0; // Set a variable "key" of the data type integer to zero (the name "key" can be anything).
    char typy[5]; // Create a character array of the name "typy" that allocates 5 bytes for stdin (input) ("typy" can be any name you want).
    printf("Type something: "); // A function that lets the user input data.
    gets(typy); // "Gets" the input that the user typed and stores it in typy.
    printf(typy); // Prints what you typed (the data stored in typy).
    printf("\n"); // Prints a new line to make it look neater when the program exits (purely cosmetic. I use it to make it look neater in my linux terminal.)
    if (key){ // If the value of key is true (non zero)
        printf("It worked\n"); // Print "It worked. Notice the new line character. This is, once again, to make my terminal look neat as the program executes."
    }
    return 0; // Exits the program cleanly. (You are returning an integer to the function. That is why you start it off with "int" main()).
}
</code></pre>
<p>Now save the script and compile it with your favorite compiler.<br>
For example, I would do <code>gcc buffer_overflow_demo.c</code> then run it with <code>./a.out</code>.</p>
<p>Let’s evaluate what the script does. First, it tells you to type something. Let’s type a word under five characters such as “dog”. It prints dog back out to you. Everything runs normal and as expected. Now run it again and this time type something over 5 such as “0x00sec Rocks”. What happens? This time it should output the line “It worked”. Why does that happen? <code>Simply because the character array ran out of room (allocated memory) to store what you typed in, so it "overflowed" and overwrote the variable "key" to make it non-zero.</code> Remember any thing non-zero is true. When you ran the program the first time and typed dog it was under the size of allocated memory so everything ran fine and nothing was overwritten.</p>
<p>I hope that helped you understand what a buffer overflow was, how it works, and how it is executed.<br>
As always,</p>
<p>Stay Frosty <img src="https://0x00sec.org/images/emoji/twitter/snowman.png?v=9" title=":snowman:" class="emoji" alt=":snowman:"></p>
          <p><a href="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131/1</link>
        <pubDate>Sat, 24 Sep 2016 04:02:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1131-1</guid>
        <source url="https://0x00sec.org/t/simple-buffer-overflow-demonstration/1131.rss">Simple Buffer Overflow Demonstration</source>
      </item>
  </channel>
</rss>
