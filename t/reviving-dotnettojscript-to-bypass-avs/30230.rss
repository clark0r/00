<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Reviving DotNetToJScript to bypass AVs</title>
    <link>https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230</link>
    <description>Hello everyone recently i tried to revive an old technique used to .NET executables in memory directly from JScript.

The procedure is public and pretty well explained

Here is the repo: ([https://github.com/tyranid/DotNetToJScript](https://DotNetToJScript))

So, we are in 2022 and using that plain-clean version of DotNetToJScript wont help for sure to bypass antiviruses, so the first step i did is obfuscating the output jscript file with the .NET executable encoded inside.

I managed to bypass some antiviruses (one of them is BitDefender, yes, bypasses with DotNetToJScript obfuscated)

So, i managed to bypass some antiviruses, fine, but then why im writing this?

Well because I am struggling to bypass the latest Windows Defender.

Why is it getting detected? I think here is pretty well explained: [https://www.microsoft.com/security/blog/2018/09/27/out-of-sight-but-not-invisible-defeating-fileless-malware-with-behavior-monitoring-amsi-and-next-gen-av/](Generically detecting fileless techniques)

So, the detection im getting is from amsi of course and is named **Trojan:JS/SharpShooter.A** and obviously its a behavior detection.

So... obfuscating the script is not an option, adding random junk code / calling random functions between the code isnt an option too.. is there a way to bypass this detection just by jscript?

Any idea will be helpful!</description>
    
    <lastBuildDate>Mon, 18 Jul 2022 12:13:48 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Reviving DotNetToJScript to bypass AVs</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/9</link>
        <pubDate>Tue, 15 Nov 2022 16:49:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-30230-9</guid>
        <source url="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230.rss">Reviving DotNetToJScript to bypass AVs</source>
      </item>
      <item>
        <title>Reviving DotNetToJScript to bypass AVs</title>
        <dc:creator><![CDATA[0xDEADBEEF]]></dc:creator>
        <description><![CDATA[
            <p>Exactly. Scanning the file returns no detection. Even by using online scanner is about 0/63. The problem comes when i execute it, doesnt matter how and how much is the script obfuscated. Its a detection based on behvior detection (probably checking for called functions, DynamicInvoke, CreateInstance etc).</p>
          <p><a href="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/8</link>
        <pubDate>Mon, 18 Jul 2022 12:13:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-30230-8</guid>
        <source url="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230.rss">Reviving DotNetToJScript to bypass AVs</source>
      </item>
      <item>
        <title>Reviving DotNetToJScript to bypass AVs</title>
        <dc:creator><![CDATA[nightwolf]]></dc:creator>
        <description><![CDATA[
            <p>I have a friend that has done a decent amount of work with JScript based tooling. They said that they haven’t really run into AMSI at all with JScript so they thought something else might be going on. They did also suggest trying GadgetToJScript as well.</p>
<p>The detection you mentioned, I was assuming that occurred on execution of the file not simply scanning the file itself. Was I correct in that assumption?</p>
          <p><a href="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/7</link>
        <pubDate>Mon, 18 Jul 2022 03:11:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-30230-7</guid>
        <source url="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230.rss">Reviving DotNetToJScript to bypass AVs</source>
      </item>
      <item>
        <title>Reviving DotNetToJScript to bypass AVs</title>
        <dc:creator><![CDATA[0xDEADBEEF]]></dc:creator>
        <description><![CDATA[
            <p>Well, GadgetToJScript is another intresting alternative but lacks of some features like specific method invoking, argument passing etc.</p>
<p>Also, its just matter of time and this will be detected too, it use a different behavior, but has no real amsi bypasses implemented inside.</p>
          <p><a href="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/6</link>
        <pubDate>Sun, 17 Jul 2022 17:31:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-30230-6</guid>
        <source url="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230.rss">Reviving DotNetToJScript to bypass AVs</source>
      </item>
      <item>
        <title>Reviving DotNetToJScript to bypass AVs</title>
        <dc:creator><![CDATA[dmcxblue]]></dc:creator>
        <description><![CDATA[
            <p>Just wondering why not use GadgetToJScript</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://github.com/med0x2e/GadgetToJScript">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">

      <a href="https://github.com/med0x2e/GadgetToJScript" target="_blank" rel="noopener nofollow ugc">GitHub</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/345;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/8/1/816f3dd7bc351e9b58b3c1cab93aeb647c2af5a8_2_690x345.png" class="thumbnail" width="690" height="345" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/8/1/816f3dd7bc351e9b58b3c1cab93aeb647c2af5a8_2_690x345.png, https://0x00sec.s3.amazonaws.com/optimized/3X/8/1/816f3dd7bc351e9b58b3c1cab93aeb647c2af5a8_2_1035x517.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/8/1/816f3dd7bc351e9b58b3c1cab93aeb647c2af5a8.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/8/1/816f3dd7bc351e9b58b3c1cab93aeb647c2af5a8_2_10x10.png"></div>

<h3><a href="https://github.com/med0x2e/GadgetToJScript" target="_blank" rel="noopener nofollow ugc">GitHub - med0x2e/GadgetToJScript: A tool for generating .NET serialized...</a></h3>

  <p>A tool for generating .NET serialized gadgets that can trigger .NET assembly load/execution when deserialized using BinaryFormatter from JS/VBS/VBA based scripts. - GitHub - med0x2e/GadgetToJScript...</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/5</link>
        <pubDate>Sun, 17 Jul 2022 16:21:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-30230-5</guid>
        <source url="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230.rss">Reviving DotNetToJScript to bypass AVs</source>
      </item>
      <item>
        <title>Reviving DotNetToJScript to bypass AVs</title>
        <dc:creator><![CDATA[nightwolf]]></dc:creator>
        <description><![CDATA[
            <p>It sounds like your best option then is to work on developing a JScript based AMSI bypass.</p>
          <p><a href="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/4</link>
        <pubDate>Sun, 17 Jul 2022 03:03:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-30230-4</guid>
        <source url="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230.rss">Reviving DotNetToJScript to bypass AVs</source>
      </item>
      <item>
        <title>Reviving DotNetToJScript to bypass AVs</title>
        <dc:creator><![CDATA[0xDEADBEEF]]></dc:creator>
        <description><![CDATA[
            <p>Unfortuntaly cause of other circumstances i must use eval(). Anyways i found intresting that post, but unfortunatly doesnt give a praticable solution for my case.</p>
          <p><a href="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/3</link>
        <pubDate>Sun, 17 Jul 2022 02:11:42 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-30230-3</guid>
        <source url="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230.rss">Reviving DotNetToJScript to bypass AVs</source>
      </item>
      <item>
        <title>Reviving DotNetToJScript to bypass AVs</title>
        <dc:creator><![CDATA[nightwolf]]></dc:creator>
        <description><![CDATA[
            <p>You’ll need to bypass AMSI. Most of the bypasses I’ve seen have been focused around PowerShell but I would image there are options for JScript as well. This <a href="https://www.tiraniddo.dev/2018/06/disabling-amsi-in-jscript-with-one.html" rel="noopener nofollow ugc">blog post</a> is from 2018 and what it describes probably isn’t ideal but worked at the time. I haven’t tested if it works currently. I do recall a comment elsewhere that not using eval() may keep AMSI from scanning the code at all. That was from a while ago though so your millage may vary.</p>
          <p><a href="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/2</link>
        <pubDate>Sun, 17 Jul 2022 02:00:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-30230-2</guid>
        <source url="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230.rss">Reviving DotNetToJScript to bypass AVs</source>
      </item>
      <item>
        <title>Reviving DotNetToJScript to bypass AVs</title>
        <dc:creator><![CDATA[0xDEADBEEF]]></dc:creator>
        <description><![CDATA[
            <p>Hello everyone recently i tried to revive an old technique used to .NET executables in memory directly from JScript.</p>
<p>The procedure is public and pretty well explained</p>
<p>Here is the repo: (<a href="https://DotNetToJScript" rel="noopener nofollow ugc">https://github.com/tyranid/DotNetToJScript</a>)</p>
<p>So, we are in 2022 and using that plain-clean version of DotNetToJScript wont help for sure to bypass antiviruses, so the first step i did is obfuscating the output jscript file with the .NET executable encoded inside.</p>
<p>I managed to bypass some antiviruses (one of them is BitDefender, yes, bypasses with DotNetToJScript obfuscated)</p>
<p>So, i managed to bypass some antiviruses, fine, but then why im writing this?</p>
<p>Well because I am struggling to bypass the latest Windows Defender.</p>
<p>Why is it getting detected? I think here is pretty well explained: [<a href="https://www.microsoft.com/security/blog/2018/09/27/out-of-sight-but-not-invisible-defeating-fileless-malware-with-behavior-monitoring-amsi-and-next-gen-av/" rel="noopener nofollow ugc">https://www.microsoft.com/security/blog/2018/09/27/out-of-sight-but-not-invisible-defeating-fileless-malware-with-behavior-monitoring-amsi-and-next-gen-av/</a>](Generically detecting fileless techniques)</p>
<p>So, the detection im getting is from amsi of course and is named <strong>Trojan:JS/SharpShooter.A</strong> and obviously its a behavior detection.</p>
<p>So… obfuscating the script is not an option, adding random junk code / calling random functions between the code isnt an option too… is there a way to bypass this detection just by jscript?</p>
<p>Any idea will be helpful!</p>
          <p><a href="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230/1</link>
        <pubDate>Sun, 17 Jul 2022 00:48:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-30230-1</guid>
        <source url="https://0x00sec.org/t/reviving-dotnettojscript-to-bypass-avs/30230.rss">Reviving DotNetToJScript to bypass AVs</source>
      </item>
  </channel>
</rss>
