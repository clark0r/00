<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to convert programs written for x86 to ARM?</title>
    <link>https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945</link>
    <description>Hello! 

I have a problem. I have been going through Ryan &quot;elfmaster&quot; O&#39;Neill&#39;s [Learning Linux Binary Analysis](https://www.amazon.com/Learning-Binary-Analysis-elfmaster-ONeill/dp/1782167102), and have found two of his tools to be clever and very useful. Namely, [ftrace](https://github.com/elfmaster/ftrace) and [Extended Core File Snapshot](https://github.com/elfmaster/ecfs).

I want to use these on an ARM processor. Can anyone point me in the right direction so that I can learn how to use these tools on ARM?

Do I have to recompile it from source on an ARM processor? A lot of the code seems x86 specific.</description>
    
    <lastBuildDate>Tue, 18 Jul 2017 05:30:22 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to convert programs written for x86 to ARM?</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>I’d be interested on such a tool whenever is ready <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/9</link>
        <pubDate>Tue, 18 Jul 2017 05:30:22 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2945-9</guid>
        <source url="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945.rss">How to convert programs written for x86 to ARM?</source>
      </item>
      <item>
        <title>How to convert programs written for x86 to ARM?</title>
        <dc:creator><![CDATA[Bowlslaw]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for the help and advice! I want to do something useful in which I will learn a lot. I have no idea how long this may take me, hehe, but it would just be sooo useful for ARM processors</p>
          <p><a href="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/8</link>
        <pubDate>Mon, 17 Jul 2017 22:45:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2945-8</guid>
        <source url="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945.rss">How to convert programs written for x86 to ARM?</source>
      </item>
      <item>
        <title>How to convert programs written for x86 to ARM?</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/leeky">@Leeky</a> pointed out some of the issues. After looking a bit into <code>ftrace</code>, you will really have to change quite some code. Most of the ELF related stuff should be fine, but in addition to the <code>jump</code> opcodes you may also have to rework the break points (that uses a different instruction on ARM) and specially the <code>getargs</code> function that will be pretty different.</p>
<p>The ARM ABI is actually closer to x86_64 than to the 32bits counterpart, in the sense that parameters are passed in registers (in the normal case), but the way to resolve pointer is a bit different. For example, this is a call to a <code>puts</code> function on an ARM 32 bits (not Thumb).</p>
<pre><code>00008604:   ldr	r0, [pc, #0x68] 
00008608:   bl	&lt;puts@plt&gt;
</code></pre>
<p>The first instruction load on <code>r0</code> the first parameters (for x86_64 <code>rdi</code> is used instead), then it uses PC relative addressing, to load the pointer to the actual string to print. This translates in calculating the position of that pointer (PC + 0x68 + 4 = 0x8608 + 0x68 + 4 = 0x8670) and use the content of that position.</p>
<p>Summing up, it looks like quite some work to port the tool to ARM… but I would say you will learn a ton doing it <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>At first glance I think using capstone will simplify a bit the parsing. For instance, it already classifies some mnemonics as jumps or calls automatically. However I have had issues working with Thumb code and specially when Thumb and ARM32 code is mixed.</p>
          <p><a href="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/7</link>
        <pubDate>Mon, 17 Jul 2017 20:01:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2945-7</guid>
        <source url="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945.rss">How to convert programs written for x86 to ARM?</source>
      </item>
      <item>
        <title>How to convert programs written for x86 to ARM?</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>Do you have the source? If so, cross-compile with something like GCC.</p>
          <p><a href="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/6</link>
        <pubDate>Mon, 17 Jul 2017 00:46:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2945-6</guid>
        <source url="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945.rss">How to convert programs written for x86 to ARM?</source>
      </item>
      <item>
        <title>How to convert programs written for x86 to ARM?</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>Actually all of this can be read from the ELF File header.</p>
          <p><a href="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/5</link>
        <pubDate>Sun, 16 Jul 2017 17:56:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2945-5</guid>
        <source url="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945.rss">How to convert programs written for x86 to ARM?</source>
      </item>
      <item>
        <title>How to convert programs written for x86 to ARM?</title>
        <dc:creator><![CDATA[Leeky]]></dc:creator>
        <description><![CDATA[
            <p>Well yeah but you would need to change alot more things (I’ve only looked at the ftrace).<br>
for example the branch_table would need ARM opcodes instread of x86 opcodes.<br>
Also like you noticed the user_regs_struct needs adjustments to be ARM compatible (usage of ARM registers instead of x86).You also need to change everything the author marked with <span class="hashtag">#ifdef</span> <strong>x86_64</strong> as it simbolizes that the following code<br>
only works on 64bit x86 code (and the code in the else statement only on 32bit x86 code).<br>
The problem is that some structures and other things may be identical for x86 and x86-64 but different for ARM so you need to find those different parts as well and change them.</p>
<pre><code class="lang-auto">	switch (opts.arch) {
		case 32:
			ehdr32 = (Elf32_Ehdr *)mem;
			if (ehdr32-&gt;e_machine != EM_386)
				return 0;
			break;
		case 64:
			ehdr64 = (Elf64_Ehdr *)mem;
			if (ehdr64-&gt;e_machine != EM_X86_64 &amp;&amp; ehdr64-&gt;e_machine != EM_IA_64)
				return 0;
			break;
	}</code></pre>
<p>Is an example for that as it checks if the ELF is build for x86 or x86-64 which obviously isn’t the case for something build for ARM.<br>
Also the getstr and getargs seem to depend on x86-64 architecture.</p>
<p>My ARM sadly isn’t good enough to tell you if there are any not easily spotable differences so I guess you could just change those <span class="hashtag">#ifdef</span> parts to fit the ARM architecture and then try to debug it.</p>
          <p><a href="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/4</link>
        <pubDate>Sun, 16 Jul 2017 17:46:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2945-4</guid>
        <source url="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945.rss">How to convert programs written for x86 to ARM?</source>
      </item>
      <item>
        <title>How to convert programs written for x86 to ARM?</title>
        <dc:creator><![CDATA[Bowlslaw]]></dc:creator>
        <description><![CDATA[
            <p>This code, for example:</p>
<pre><code>#ifdef __x86_64__
    		esp = pt_reg.rsp;
    		eip = pt_reg.rip;
    		eax = pt_reg.rax;
    		ebx = pt_reg.rbx;
    		ecx = pt_reg.rcx;
    		edx = pt_reg.rdx;
    		esi = pt_reg.rsi;
    		edi = pt_reg.rdi;
    #else
    		esp = pt_reg.esp;
    		eip = pt_reg.eip;
    		eax = pt_reg.eax;
    		ebx = pt_reg.ebx;
    		ecx = pt_reg.ecx;
    		edx = pt_reg.edx;
    		esi = pt_reg.esi;
    		edi = pt_reg.edi;
</code></pre>
<p>I would need to change this to equivalent ARM arm?</p>
          <p><a href="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/3</link>
        <pubDate>Sun, 16 Jul 2017 17:21:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2945-3</guid>
        <source url="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945.rss">How to convert programs written for x86 to ARM?</source>
      </item>
      <item>
        <title>How to convert programs written for x86 to ARM?</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>If you’re talking about assembly, converting it would most likely require a port…</p>
<p>This is pretty much why higher-level languages, like C, were made.</p>
          <p><a href="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/2</link>
        <pubDate>Sun, 16 Jul 2017 17:06:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2945-2</guid>
        <source url="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945.rss">How to convert programs written for x86 to ARM?</source>
      </item>
      <item>
        <title>How to convert programs written for x86 to ARM?</title>
        <dc:creator><![CDATA[Bowlslaw]]></dc:creator>
        <description><![CDATA[
            <p>Hello!</p>
<p>I have a problem. I have been going through Ryan “elfmaster” O’Neill’s <a href="https://www.amazon.com/Learning-Binary-Analysis-elfmaster-ONeill/dp/1782167102?tag=0x00sec03-20" rel="nofollow noopener">Learning Linux Binary Analysis</a>, and have found two of his tools to be clever and very useful. Namely, <a href="https://github.com/elfmaster/ftrace" rel="nofollow noopener">ftrace</a> and <a href="https://github.com/elfmaster/ecfs" rel="nofollow noopener">Extended Core File Snapshot</a>.</p>
<p>I want to use these on an ARM processor. Can anyone point me in the right direction so that I can learn how to use these tools on ARM?</p>
<p>Do I have to recompile it from source on an ARM processor? A lot of the code seems x86 specific.</p>
          <p><a href="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945/1</link>
        <pubDate>Sun, 16 Jul 2017 16:56:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2945-1</guid>
        <source url="https://0x00sec.org/t/how-to-convert-programs-written-for-x86-to-arm/2945.rss">How to convert programs written for x86 to ARM?</source>
      </item>
  </channel>
</rss>
