<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Ultimate Python Cheat Sheet</title>
    <link>https://0x00sec.org/t/the-ultimate-python-cheat-sheet/754</link>
    <description>Hello everybody, This is Webster. I am going to write the Ultimate Cheat Sheet for the entire Python Programming Language that you’ll ever need. 
I am sure you all are familiar with Python programming. Just in case if you don&#39;t know what Python is:
&gt; Python is a widely used high-level, general-purpose, interpreted, dynamic programming language. Its design philosophy emphasises code readability, and its syntax allows programmers to express concepts in fewer lines of code than possible in languages such as C++ or Java.

In the Cheat Sheet, I’ll try to cover every single thing that you’ll need most of the time. But, If I forget to add something, let me know in the comments.

The Complete Python Cheat Sheet:
&gt; # The Ultimate Python Cheat Sheet by Webster
   # The Ultimate Python Cheat Sheet by The Tech Bible
  # import is used to make specialty functions available
  # These are called modules
  import random
  import sys
  import os

&gt; # Hello world is just one line of code
&gt; # print() outputs data to the screen
&gt; print(&quot;Hello World&quot;)

&gt; &#39;&#39;&#39;
&gt; This is a multi-line comment
&gt; &#39;&#39;&#39;

&gt; # A variable is a place to store values
&gt; # Its name is like a label for that value
&gt; name = &quot;Webster&quot;
&gt; print(name)

&gt; # A variable name can contain letters, numbers, or _
&gt; # but can&#39;t start with a number

&gt; # There are 5 data types Numbers, Strings, List, Tuple, Dictionary
&gt; # You can store any of them in the same variable

&gt; name = 15
&gt; print(name)

&gt; # The arithmetic operators +, -, *, /, %, **, //
&gt; # ** Exponential calculation
&gt; # // Floor Division
&gt; print(&quot;5 + 2 =&quot;, 5+2)
&gt; print(&quot;5 - 2 =&quot;, 5-2)
&gt; print(&quot;5 * 2 =&quot;, 5*2)
&gt; print(&quot;5 / 2 =&quot;, 5/2)
&gt; print(&quot;5 % 2 =&quot;, 5%2)
&gt; print(&quot;5 ** 2 =&quot;, 5**2)
&gt; print(&quot;5 // 2 =&quot;, 5//2)

&gt; # Order of Operation states * and / is performed before + and -

&gt; print(&quot;1 + 2 - 3 * 2 =&quot;, 1 + 2 - 3 * 2)
&gt; print(&quot;(1 + 2 - 3) * 2 =&quot;, (1 + 2 - 3) * 2)

&gt; # A string is a string of characters surrounded by &quot; or &#39;
&gt; # If you must use a &quot; or &#39; between the same quote escape it with \
&gt; quote = &quot;\&quot;Always remember your unique,&quot;

&gt; # A multi-line quote
&gt; multi_line_quote = &#39;&#39;&#39; just
&gt; like everyone else&quot; &#39;&#39;&#39;

&gt; print(quote + multi_line_quote)

&gt; # To embed a string in output use %s
&gt; print(&quot;%s %s %s&quot; % (&#39;I like the quote&#39;, quote, multi_line_quote))

&gt; # To keep from printing newlines use end=&quot;&quot;
&gt; print(&quot;I don&#39;t like &quot;,end=&quot;&quot;)
&gt; print(&quot;newlines&quot;)

&gt; # You can print a string multiple times with *
&gt; print(&#39;\n&#39; * 5)

&gt; # LISTS -------------
&gt; # A list allows you to create a list of values and manipulate them
&gt; # Each value has an index with the first one starting at 0

&gt; grocery_list = [&#39;Juice&#39;, &#39;Tomatoes&#39;, &#39;Potatoes&#39;, &#39;Bananas&#39;]
&gt; print(&#39;The first item is&#39;, grocery_list[1])

&gt; # You can change the value stored in a list box
&gt; grocery_list[0] = &quot;Green Juice&quot;
&gt; print(grocery_list)

&gt; # You can get a subset of the list with [min:up to but not including max]

&gt; print(grocery_list[1:3])

&gt; # You can put any data type in a a list including a list
&gt; other_events = [&#39;Wash Car&#39;, &#39;Pick up Kids&#39;, &#39;Cash Check&#39;]
&gt; to_do_list = [other_events, grocery_list]

&gt; print(to_do_list)

&gt; # Get the second item in the second list (Boxes inside of boxes)
&gt; print(to_do_list[1][1])

&gt; # You add values using append
&gt; grocery_list.append(&#39;onions&#39;)
&gt; print(to_do_list)

&gt; # Insert item at given index
&gt; grocery_list.insert(1, &quot;Pickle&quot;)

&gt; # Remove item from list
&gt; grocery_list.remove(&quot;Pickle&quot;)

&gt; # Sorts items in list
&gt; grocery_list.sort()

&gt; # Reverse sort items in list
&gt; grocery_list.reverse()

&gt; # del deletes an item at specified index
&gt; del grocery_list[4]
&gt; print(to_do_list)

&gt; # We can combine lists with a +
&gt; to_do_list = other_events + grocery_list
&gt; print(to_do_list)

&gt; # Get length of list
&gt; print(len(to_do_list))

&gt; # Get the max item in list
&gt; print(max(to_do_list))

&gt; # Get the minimum item in list
&gt; print(min(to_do_list))

&gt; # TUPLES -------------
&gt; # Values in a tuple can&#39;t change like lists

&gt; pi_tuple = (3, 1, 4, 1, 5, 9)

&gt; # Convert tuple into a list
&gt; new_tuple = list(pi_tuple)

&gt; # Convert a list into a tuple
&gt; # new_list = tuple(grocery_list)

&gt; # tuples also have len(tuple), min(tuple) and max(tuple)

&gt; # DICTIONARY or MAP -------------
&gt; # Made up of values with a unique key for each value
&gt; # Similar to lists, but you can&#39;t join dicts with a +

&gt; super_villains = {&#39;Fiddler&#39; : &#39;Isaac Bowin&#39;,
&gt;                   &#39;Captain Cold&#39; : &#39;Leonard Snart&#39;,
&gt;                   &#39;Weather Wizard&#39; : &#39;Mark Mardon&#39;,
&gt;                   &#39;Mirror Master&#39; : &#39;Sam Scudder&#39;,
&gt;                   &#39;Pied Piper&#39; : &#39;Thomas Peterson&#39;}

&gt; # BTW, Leonard Snart is not a Super Villain, he is my hero
&gt; print(super_villains[&#39;Captain Cold&#39;])

&gt; # Delete an entry
&gt; del super_villains[&#39;Fiddler&#39;]
&gt; print(super_villains)

&gt; # Replace a value
&gt; super_villains[&#39;Pied Piper&#39;] = &#39;Hartley Rathaway&#39;

&gt; # Print the number of items in the dictionary
&gt; print(len(super_villains))

&gt; # Get the value for the passed key
&gt; print(super_villains.get(&quot;Pied Piper&quot;))

&gt; # Get a list of dictionary keys
&gt; print(super_villains.keys())

&gt; # Get a list of dictionary values
&gt; print(super_villains.values())

&gt; # CONDITIONALS -------------
&gt; # The if, else and elif statements are used to perform different
&gt; # actions based off of conditions
&gt; # Comparison Operators : ==, !=, &gt;, &lt;, &gt;=, &lt;=

&gt; # The if statement will execute code if a condition is met
&gt; # White space is used to group blocks of code in Python
&gt; # Use the same number of proceeding spaces for blocks of code

&gt; age = 30
&gt; if age &gt; 16 :
&gt;     print(&#39;You are old enough to drive&#39;)

&gt; # Use an if statement if you want to execute different code regardless
&gt; # of whether the condition ws met or not

&gt; if age &gt; 16 :
&gt;     print(&#39;You are old enough to drive&#39;)
&gt; else :
&gt;     print(&#39;You are not old enough to drive&#39;)

&gt; # If you want to check for multiple conditions use elif
&gt; # If the first matches it won&#39;t check other conditions that follow

&gt; if age &gt;= 21 :
&gt;     print(&#39;You are old enough to drive a tractor trailer&#39;)
&gt; elif age &gt;= 16:
&gt;     print(&#39;You are old enough to drive a car&#39;)
&gt; else :
&gt;     print(&#39;You are not old enough to drive&#39;)

&gt; # You can combine conditions with logical operators
&gt; # Logical Operators : and, or, not

&gt; if ((age &gt;= 1) and (age &lt;= 18)):
&gt;     print(&quot;You get a birthday party&quot;)
&gt; elif (age == 21) or (age &gt;= 65):
&gt;     print(&quot;You get a birthday party&quot;)
&gt; elif not(age == 30):
&gt;     print(&quot;You don&#39;t get a birthday party&quot;)
&gt; else:
&gt;     print(&quot;You get a birthday party yeah&quot;)

&gt; # FOR LOOPS -------------
&gt; # Allows you to perform an action a set number of times
&gt; # Range performs the action 10 times 0 - 9
&gt; for x in range(0, 10):
&gt;     print(x , &#39; &#39;, end=&quot;&quot;)

&gt; print(&#39;\n&#39;)

&gt; # You can use for loops to cycle through a list
&gt; grocery_list = [&#39;Juice&#39;, &#39;Tomatoes&#39;, &#39;Potatoes&#39;, &#39;Bananas&#39;]

&gt; for y in grocery_list:
&gt;     print(y)

&gt; # You can also define a list of numbers to cycle through
&gt; for x in [2,4,6,8,10]:
&gt;     print(x)

&gt; # You can double up for loops to cycle through lists
&gt; num_list =[[1,2,3],[10,20,30],[100,200,300]];

&gt; for x in range(0,3):
&gt;     for y in range(0,3):
&gt;         print(num_list[x][y])

&gt; # WHILE LOOPS -------------
&gt; # While loops are used when you don&#39;t know ahead of time how many
&gt; # times you&#39;ll have to loop
&gt; random_num = random.randrange(0,100)

&gt; while (random_num != 15):
&gt;     print(random_num)
&gt;     random_num = random.randrange(0,100)

&gt; # An iterator for a while loop is defined before the loop
&gt; i = 0;
&gt; while (i &lt;= 20):
&gt;     if(i%2 == 0):
&gt;         print(i)
&gt;     elif(i == 9):
&gt;         # Forces the loop to end all together
&gt;         break
&gt;     else:
&gt;         # Shorthand for i = i + 1
&gt;         i += 1
&gt;         # Skips to the next iteration of the loop
&gt;         continue

&gt;     i += 1

&gt; # FUNCTIONS -------------
&gt; # Functions allow you to reuse and write readable code
&gt; # Type def (define), function name and parameters it receives
&gt; # return is used to return something to the caller of the function
&gt; def addNumbers(fNum, sNum):
&gt;     sumNum = fNum + sNum
&gt;     return sumNum

&gt; print(addNumbers(1, 4))

&gt; # Can&#39;t get the value of rNum because it was created in a function
&gt; # It is said to be out of scope
&gt; # print(sumNum)

&gt; # If you define a variable outside of the function it works every place
&gt; newNum = 0;
&gt; def subNumbers(fNum, sNum):
&gt;     newNum = fNum - sNum
&gt;     return newNum

&gt; print(subNumbers(1, 4))

&gt; # USER INPUT -------------
&gt; print(&#39;What is your name?&#39;)

&gt; # Stores everything typed up until ENTER
&gt; name = sys.stdin.readline()

&gt; print(&#39;Hello&#39;, name)

&gt; # STRINGS -------------
&gt; # A string is a series of characters surrounded by &#39; or &quot;
&gt; long_string = &quot;I&#39;ll catch you if you fall - The Floor&quot;

&gt; # Retrieve the first 4 characters
&gt; print(long_string[0:4])

&gt; # Get the last 5 characters
&gt; print(long_string[-5:])

&gt; # Everything up to the last 5 characters
&gt; print(long_string[:-5])

&gt; # Concatenate part of a string to another
&gt; print(long_string[:4] + &quot; be there&quot;)

&gt; # String formatting
&gt; print(&quot;%c is my %s letter and my number %d number is %.5f&quot; % (&#39;X&#39;, &#39;favorite&#39;, 1, .14))

&gt; # Capitalizes the first letter
&gt; print(long_string.capitalize())

&gt; # Returns the index of the start of the string
&gt; # case sensitive
&gt; print(long_string.find(&quot;Floor&quot;))

&gt; # Returns true if all characters are letters &#39; isn&#39;t a letter
&gt; print(long_string.isalpha())

&gt; # Returns true if all characters are numbers
&gt; print(long_string.isalnum())

&gt; # Returns the string length
&gt; print(len(long_string))

&gt; # Replace the first word with the second (Add a number to replace more)
&gt; print(long_string.replace(&quot;Floor&quot;, &quot;Ground&quot;))

&gt; # Remove white space from front and end
&gt; print(long_string.strip())

&gt; # Split a string into a list based on the delimiter you provide
&gt; quote_list = long_string.split(&quot; &quot;)
&gt; print(quote_list)

&gt; # FILE I/O -------------

&gt; # Overwrite or create a file for writing
&gt; test_file = open(&quot;test.txt&quot;, &quot;wb&quot;)

&gt; # Get the file mode used
&gt; print(test_file.mode)

&gt; # Get the files name
&gt; print(test_file.name)

&gt; # Write text to a file with a newline
&gt; test_file.write(bytes(&quot;Write me to the file\n&quot;, &#39;UTF-8&#39;))

&gt; # Close the file
&gt; test_file.close()

&gt; # Opens a file for reading and writing
&gt; test_file = open(&quot;test.txt&quot;, &quot;r+&quot;)

&gt; # Read text from the file
&gt; text_in_file = test_file.read()

&gt; print(text_in_file)

&gt; # Delete the file
&gt; os.remove(&quot;test.txt&quot;)

&gt; # CLASSES AND OBJECTS -------------
&gt; # The concept of OOP allows us to model real world things using code
&gt; # Every object has attributes (color, height, weight) which are object variables
&gt; # Every object has abilities (walk, talk, eat) which are object functions

&gt; class Animal:
&gt;     # None signifies the lack of a value
&gt;     # You can make a variable private by starting it with __
&gt;     __name = None
&gt;     __height = None
&gt;     __weight = None
&gt;     __sound = None

&gt;     # The constructor is called to set up or initialize an object
&gt;     # self allows an object to refer to itself inside of the class
&gt;     def __init__(self, name, height, weight, sound):
&gt;         self.__name = name
&gt;         self.__height = height
&gt;         self.__weight = weight
&gt;         self.__sound = sound

&gt;     def set_name(self, name):
&gt;         self.__name = name

&gt;     def set_height(self, height):
&gt;         self.__height = height

&gt;     def set_weight(self, height):
&gt;         self.__height = height

&gt;     def set_sound(self, sound):
&gt;         self.__sound = sound

&gt;     def get_name(self):
&gt;         return self.__name

&gt;     def get_height(self):
&gt;         return str(self.__height)

&gt;     def get_weight(self):
&gt;         return str(self.__weight)

&gt;     def get_sound(self):
&gt;         return self.__sound

&gt;     def get_type(self):
&gt;         print(&quot;Animal&quot;)

&gt;     def toString(self):
&gt;         return &quot;{} is {} cm tall and {} kilograms and says {}&quot;.format(self.__name, self.__height, self.__weight, self.__sound)

&gt; # How to create a Animal object
&gt; cat = Animal(&#39;Whiskers&#39;, 33, 10, &#39;Meow&#39;)

&gt; print(cat.toString())

&gt; # You can&#39;t access this value directly because it is private
&gt; #print(cat.__name)

&gt; # INHERITANCE -------------
&gt; # You can inherit all of the variables and methods from another class

&gt; class Dog(Animal):
&gt;     __owner = None

&gt;     def __init__(self, name, height, weight, sound, owner):
&gt;         self.__owner = owner
&gt;         self.__animal_type = None

&gt;         # How to call the super class constructor
&gt;         super(Dog, self).__init__(name, height, weight, sound)

&gt;     def set_owner(self, owner):
&gt;         self.__owner = owner

&gt;     def get_owner(self):
&gt;         return self.__owner

&gt;     def get_type(self):
&gt;         print (&quot;Dog&quot;)

&gt;     # We can overwrite functions in the super class
&gt;     def toString(self):
&gt;         return &quot;{} is {} cm tall and {} kilograms and says {}. His owner is {}&quot;.format(self.get_name(), self.get_height(), self.get_weight(), self.get_sound(), self.__owner)

&gt;     # You don&#39;t have to require attributes to be sent
&gt;     # This allows for method overloading
&gt;     def multiple_sounds(self, how_many=None):
&gt;         if how_many is None:
&gt;             print(self.get_sound)
&gt;         else:
&gt;             print(self.get_sound() * how_many)

&gt; spot = Dog(&quot;Spot&quot;, 53, 27, &quot;Ruff&quot;, &quot;Webster&quot;)

&gt; print(spot.toString())

&gt; # Polymorphism allows use to refer to objects as their super class
&gt; # and the correct functions are called automatically

&gt; class AnimalTesting:
&gt;     def get_type(self, animal):
&gt;         animal.get_type()

&gt; test_animals = AnimalTesting()

&gt; test_animals.get_type(cat)
&gt; test_animals.get_type(spot)

&gt; spot.multiple_sounds(4)

Post originally written at: https://www.techbible.org/2016/07/ultimate-python-cheat-sheet/
Download the file: https://github.com/webster007/python_scripts/blob/master/Complete_python_cheat_sheet.py</description>
    
    <lastBuildDate>Wed, 20 Jul 2016 07:42:47 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/the-ultimate-python-cheat-sheet/754.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Ultimate Python Cheat Sheet</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/the-ultimate-python-cheat-sheet/754/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-ultimate-python-cheat-sheet/754/4</link>
        <pubDate>Sun, 21 Jan 2018 00:31:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-754-4</guid>
        <source url="https://0x00sec.org/t/the-ultimate-python-cheat-sheet/754.rss">The Ultimate Python Cheat Sheet</source>
      </item>
      <item>
        <title>The Ultimate Python Cheat Sheet</title>
        <dc:creator><![CDATA[Webster]]></dc:creator>
        <description><![CDATA[
            <p>Glad to know that you found it helpful.</p>
          <p><a href="https://0x00sec.org/t/the-ultimate-python-cheat-sheet/754/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-ultimate-python-cheat-sheet/754/3</link>
        <pubDate>Wed, 20 Jul 2016 07:42:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-754-3</guid>
        <source url="https://0x00sec.org/t/the-ultimate-python-cheat-sheet/754.rss">The Ultimate Python Cheat Sheet</source>
      </item>
      <item>
        <title>The Ultimate Python Cheat Sheet</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for this mate! I  actually have something like this just in case I’m not thinking too well, and I forget something. Really helps out.</p>
          <p><a href="https://0x00sec.org/t/the-ultimate-python-cheat-sheet/754/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-ultimate-python-cheat-sheet/754/2</link>
        <pubDate>Tue, 19 Jul 2016 19:42:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-754-2</guid>
        <source url="https://0x00sec.org/t/the-ultimate-python-cheat-sheet/754.rss">The Ultimate Python Cheat Sheet</source>
      </item>
      <item>
        <title>The Ultimate Python Cheat Sheet</title>
        <dc:creator><![CDATA[Webster]]></dc:creator>
        <description><![CDATA[
            <p>Hello everybody, This is Webster. I am going to write the Ultimate Cheat Sheet for the entire Python Programming Language that you’ll ever need.<br>
I am sure you all are familiar with Python programming. Just in case if you don’t know what Python is:</p>
<blockquote>
<p>Python is a widely used high-level, general-purpose, interpreted, dynamic programming language. Its design philosophy emphasises code readability, and its syntax allows programmers to express concepts in fewer lines of code than possible in languages such as C++ or Java.</p>
</blockquote>
<p>In the Cheat Sheet, I’ll try to cover every single thing that you’ll need most of the time. But, If I forget to add something, let me know in the comments.</p>
<p>The Complete Python Cheat Sheet:</p>
<blockquote>
<h1>The Ultimate Python Cheat Sheet by Webster</h1>
</blockquote>
<h1>The Ultimate Python Cheat Sheet by The Tech Bible</h1>
<h1>import is used to make specialty functions available</h1>
<h1>These are called modules</h1>
<p>import random<br>
import sys<br>
import os</p>
<blockquote>
<h1>Hello world is just one line of code</h1>
<h1>print() outputs data to the screen</h1>
<p>print(“Hello World”)</p>
</blockquote>
<blockquote>
<p>‘’’<br>
This is a multi-line comment<br>
‘’’</p>
</blockquote>
<blockquote>
<h1>A variable is a place to store values</h1>
<h1>Its name is like a label for that value</h1>
<p>name = “Webster”<br>
print(name)</p>
</blockquote>
<blockquote>
<h1>A variable name can contain letters, numbers, or _</h1>
<h1>but can’t start with a number</h1>
</blockquote>
<blockquote>
<h1>There are 5 data types Numbers, Strings, List, Tuple, Dictionary</h1>
<h1>You can store any of them in the same variable</h1>
</blockquote>
<blockquote>
<p>name = 15<br>
print(name)</p>
</blockquote>
<blockquote>
<h1>The arithmetic operators +, -, *, /, %, **, //</h1>
<h1>** Exponential calculation</h1>
<h1>// Floor Division</h1>
<p>print(“5 + 2 =”, 5+2)<br>
print(“5 - 2 =”, 5-2)<br>
print(“5 * 2 =”, 5*2)<br>
print(“5 / 2 =”, 5/2)<br>
print(“5 % 2 =”, 5%2)<br>
print(“5 ** 2 =”, 5**2)<br>
print(“5 // 2 =”, 5//2)</p>
</blockquote>
<blockquote>
<h1>Order of Operation states * and / is performed before + and -</h1>
</blockquote>
<blockquote>
<p>print(“1 + 2 - 3 * 2 =”, 1 + 2 - 3 * 2)<br>
print("(1 + 2 - 3) * 2 =", (1 + 2 - 3) * 2)</p>
</blockquote>
<blockquote>
<h1>A string is a string of characters surrounded by " or ’</h1>
<h1>If you must use a " or ’ between the same quote escape it with \</h1>
<p>quote = "“Always remember your unique,”</p>
</blockquote>
<blockquote>
<h1>A multi-line quote</h1>
<p>multi_line_quote = ‘’’ just<br>
like everyone else" ‘’’</p>
</blockquote>
<blockquote>
<p>print(quote + multi_line_quote)</p>
</blockquote>
<blockquote>
<h1>To embed a string in output use %s</h1>
<p>print("%s %s %s" % (‘I like the quote’, quote, multi_line_quote))</p>
</blockquote>
<blockquote>
<h1>To keep from printing newlines use end=""</h1>
<p>print(“I don’t like “,end=””)<br>
print(“newlines”)</p>
</blockquote>
<blockquote>
<h1>You can print a string multiple times with *</h1>
<p>print(’\n’ * 5)</p>
</blockquote>
<blockquote>
<h1>LISTS -------------</h1>
<h1>A list allows you to create a list of values and manipulate them</h1>
<h1>Each value has an index with the first one starting at 0</h1>
</blockquote>
<blockquote>
<p>grocery_list = [‘Juice’, ‘Tomatoes’, ‘Potatoes’, ‘Bananas’]<br>
print(‘The first item is’, grocery_list[1])</p>
</blockquote>
<blockquote>
<h1>You can change the value stored in a list box</h1>
<p>grocery_list[0] = “Green Juice”<br>
print(grocery_list)</p>
</blockquote>
<blockquote>
<h1>You can get a subset of the list with [min:up to but not including max]</h1>
</blockquote>
<blockquote>
<p>print(grocery_list[1:3])</p>
</blockquote>
<blockquote>
<h1>You can put any data type in a a list including a list</h1>
<p>other_events = [‘Wash Car’, ‘Pick up Kids’, ‘Cash Check’]<br>
to_do_list = [other_events, grocery_list]</p>
</blockquote>
<blockquote>
<p>print(to_do_list)</p>
</blockquote>
<blockquote>
<h1>Get the second item in the second list (Boxes inside of boxes)</h1>
<p>print(to_do_list[1][1])</p>
</blockquote>
<blockquote>
<h1>You add values using append</h1>
<p>grocery_list.append(‘onions’)<br>
print(to_do_list)</p>
</blockquote>
<blockquote>
<h1>Insert item at given index</h1>
<p>grocery_list.insert(1, “Pickle”)</p>
</blockquote>
<blockquote>
<h1>Remove item from list</h1>
<p>grocery_list.remove(“Pickle”)</p>
</blockquote>
<blockquote>
<h1>Sorts items in list</h1>
<p>grocery_list.sort()</p>
</blockquote>
<blockquote>
<h1>Reverse sort items in list</h1>
<p>grocery_list.reverse()</p>
</blockquote>
<blockquote>
<h1>del deletes an item at specified index</h1>
<p>del grocery_list[4]<br>
print(to_do_list)</p>
</blockquote>
<blockquote>
<h1>We can combine lists with a +</h1>
<p>to_do_list = other_events + grocery_list<br>
print(to_do_list)</p>
</blockquote>
<blockquote>
<h1>Get length of list</h1>
<p>print(len(to_do_list))</p>
</blockquote>
<blockquote>
<h1>Get the max item in list</h1>
<p>print(max(to_do_list))</p>
</blockquote>
<blockquote>
<h1>Get the minimum item in list</h1>
<p>print(min(to_do_list))</p>
</blockquote>
<blockquote>
<h1>TUPLES -------------</h1>
<h1>Values in a tuple can’t change like lists</h1>
</blockquote>
<blockquote>
<p>pi_tuple = (3, 1, 4, 1, 5, 9)</p>
</blockquote>
<blockquote>
<h1>Convert tuple into a list</h1>
<p>new_tuple = list(pi_tuple)</p>
</blockquote>
<blockquote>
<h1>Convert a list into a tuple</h1>
<h1>new_list = tuple(grocery_list)</h1>
</blockquote>
<blockquote>
<h1>tuples also have len(tuple), min(tuple) and max(tuple)</h1>
</blockquote>
<blockquote>
<h1>DICTIONARY or MAP -------------</h1>
<h1>Made up of values with a unique key for each value</h1>
<h1>Similar to lists, but you can’t join dicts with a +</h1>
</blockquote>
<blockquote>
<p>super_villains = {‘Fiddler’ : ‘Isaac Bowin’,<br>
‘Captain Cold’ : ‘Leonard Snart’,<br>
‘Weather Wizard’ : ‘Mark Mardon’,<br>
‘Mirror Master’ : ‘Sam Scudder’,<br>
‘Pied Piper’ : ‘Thomas Peterson’}</p>
</blockquote>
<blockquote>
<h1>BTW, Leonard Snart is not a Super Villain, he is my hero</h1>
<p>print(super_villains[‘Captain Cold’])</p>
</blockquote>
<blockquote>
<h1>Delete an entry</h1>
<p>del super_villains[‘Fiddler’]<br>
print(super_villains)</p>
</blockquote>
<blockquote>
<h1>Replace a value</h1>
<p>super_villains[‘Pied Piper’] = ‘Hartley Rathaway’</p>
</blockquote>
<blockquote>
<h1>Print the number of items in the dictionary</h1>
<p>print(len(super_villains))</p>
</blockquote>
<blockquote>
<h1>Get the value for the passed key</h1>
<p>print(super_villains.get(“Pied Piper”))</p>
</blockquote>
<blockquote>
<h1>Get a list of dictionary keys</h1>
<p>print(super_villains.keys())</p>
</blockquote>
<blockquote>
<h1>Get a list of dictionary values</h1>
<p>print(super_villains.values())</p>
</blockquote>
<blockquote>
<h1>CONDITIONALS -------------</h1>
<h1>The if, else and elif statements are used to perform different</h1>
<h1>actions based off of conditions</h1>
<h1>Comparison Operators : ==, !=, &gt;, &lt;, &gt;=, &lt;=</h1>
</blockquote>
<blockquote>
<h1>The if statement will execute code if a condition is met</h1>
<h1>White space is used to group blocks of code in Python</h1>
<h1>Use the same number of proceeding spaces for blocks of code</h1>
</blockquote>
<blockquote>
<p>age = 30<br>
if age &gt; 16 :<br>
print(‘You are old enough to drive’)</p>
</blockquote>
<blockquote>
<h1>Use an if statement if you want to execute different code regardless</h1>
<h1>of whether the condition ws met or not</h1>
</blockquote>
<blockquote>
<p>if age &gt; 16 :<br>
print(‘You are old enough to drive’)<br>
else :<br>
print(‘You are not old enough to drive’)</p>
</blockquote>
<blockquote>
<h1>If you want to check for multiple conditions use elif</h1>
<h1>If the first matches it won’t check other conditions that follow</h1>
</blockquote>
<blockquote>
<p>if age &gt;= 21 :<br>
print(‘You are old enough to drive a tractor trailer’)<br>
elif age &gt;= 16:<br>
print(‘You are old enough to drive a car’)<br>
else :<br>
print(‘You are not old enough to drive’)</p>
</blockquote>
<blockquote>
<h1>You can combine conditions with logical operators</h1>
<h1>Logical Operators : and, or, not</h1>
</blockquote>
<blockquote>
<p>if ((age &gt;= 1) and (age &lt;= 18)):<br>
print(“You get a birthday party”)<br>
elif (age == 21) or (age &gt;= 65):<br>
print(“You get a birthday party”)<br>
elif not(age == 30):<br>
print(“You don’t get a birthday party”)<br>
else:<br>
print(“You get a birthday party yeah”)</p>
</blockquote>
<blockquote>
<h1>FOR LOOPS -------------</h1>
<h1>Allows you to perform an action a set number of times</h1>
<h1>Range performs the action 10 times 0 - 9</h1>
<p>for x in range(0, 10):<br>
print(x , ’ ', end="")</p>
</blockquote>
<blockquote>
<p>print(’\n’)</p>
</blockquote>
<blockquote>
<h1>You can use for loops to cycle through a list</h1>
<p>grocery_list = [‘Juice’, ‘Tomatoes’, ‘Potatoes’, ‘Bananas’]</p>
</blockquote>
<blockquote>
<p>for y in grocery_list:<br>
print(y)</p>
</blockquote>
<blockquote>
<h1>You can also define a list of numbers to cycle through</h1>
<p>for x in [2,4,6,8,10]:<br>
print(x)</p>
</blockquote>
<blockquote>
<h1>You can double up for loops to cycle through lists</h1>
<p>num_list =[[1,2,3],[10,20,30],[100,200,300]];</p>
</blockquote>
<blockquote>
<p>for x in range(0,3):<br>
for y in range(0,3):<br>
print(num_list[x][y])</p>
</blockquote>
<blockquote>
<h1>WHILE LOOPS -------------</h1>
<h1>While loops are used when you don’t know ahead of time how many</h1>
<h1>times you’ll have to loop</h1>
<p>random_num = random.randrange(0,100)</p>
</blockquote>
<blockquote>
<p>while (random_num != 15):<br>
print(random_num)<br>
random_num = random.randrange(0,100)</p>
</blockquote>
<blockquote>
<h1>An iterator for a while loop is defined before the loop</h1>
<p>i = 0;<br>
while (i &lt;= 20):<br>
if(i%2 == 0):<br>
print(i)<br>
elif(i == 9):<br>
# Forces the loop to end all together<br>
break<br>
else:<br>
# Shorthand for i = i + 1<br>
i += 1<br>
# Skips to the next iteration of the loop<br>
continue</p>
</blockquote>
<blockquote>
<pre><code>i += 1
</code></pre>
</blockquote>
<blockquote>
<h1>FUNCTIONS -------------</h1>
<h1>Functions allow you to reuse and write readable code</h1>
<h1>Type def (define), function name and parameters it receives</h1>
<h1>return is used to return something to the caller of the function</h1>
<p>def addNumbers(fNum, sNum):<br>
sumNum = fNum + sNum<br>
return sumNum</p>
</blockquote>
<blockquote>
<p>print(addNumbers(1, 4))</p>
</blockquote>
<blockquote>
<h1>Can’t get the value of rNum because it was created in a function</h1>
<h1>It is said to be out of scope</h1>
<h1>print(sumNum)</h1>
</blockquote>
<blockquote>
<h1>If you define a variable outside of the function it works every place</h1>
<p>newNum = 0;<br>
def subNumbers(fNum, sNum):<br>
newNum = fNum - sNum<br>
return newNum</p>
</blockquote>
<blockquote>
<p>print(subNumbers(1, 4))</p>
</blockquote>
<blockquote>
<h1>USER INPUT -------------</h1>
<p>print(‘What is your name?’)</p>
</blockquote>
<blockquote>
<h1>Stores everything typed up until ENTER</h1>
<p>name = sys.stdin.readline()</p>
</blockquote>
<blockquote>
<p>print(‘Hello’, name)</p>
</blockquote>
<blockquote>
<h1>STRINGS -------------</h1>
<h1>A string is a series of characters surrounded by ’ or "</h1>
<p>long_string = “I’ll catch you if you fall - The Floor”</p>
</blockquote>
<blockquote>
<h1>Retrieve the first 4 characters</h1>
<p>print(long_string[0:4])</p>
</blockquote>
<blockquote>
<h1>Get the last 5 characters</h1>
<p>print(long_string[-5:])</p>
</blockquote>
<blockquote>
<h1>Everything up to the last 5 characters</h1>
<p>print(long_string[:-5])</p>
</blockquote>
<blockquote>
<h1>Concatenate part of a string to another</h1>
<p>print(long_string[:4] + " be there")</p>
</blockquote>
<blockquote>
<h1>String formatting</h1>
<p>print("%c is my %s letter and my number %d number is %.5f" % (‘X’, ‘favorite’, 1, .14))</p>
</blockquote>
<blockquote>
<h1>Capitalizes the first letter</h1>
<p>print(long_string.capitalize())</p>
</blockquote>
<blockquote>
<h1>Returns the index of the start of the string</h1>
<h1>case sensitive</h1>
<p>print(long_string.find(“Floor”))</p>
</blockquote>
<blockquote>
<h1>Returns true if all characters are letters ’ isn’t a letter</h1>
<p>print(long_string.isalpha())</p>
</blockquote>
<blockquote>
<h1>Returns true if all characters are numbers</h1>
<p>print(long_string.isalnum())</p>
</blockquote>
<blockquote>
<h1>Returns the string length</h1>
<p>print(len(long_string))</p>
</blockquote>
<blockquote>
<h1>Replace the first word with the second (Add a number to replace more)</h1>
<p>print(long_string.replace(“Floor”, “Ground”))</p>
</blockquote>
<blockquote>
<h1>Remove white space from front and end</h1>
<p>print(long_string.strip())</p>
</blockquote>
<blockquote>
<h1>Split a string into a list based on the delimiter you provide</h1>
<p>quote_list = long_string.split(" ")<br>
print(quote_list)</p>
</blockquote>
<blockquote>
<h1>FILE I/O -------------</h1>
</blockquote>
<blockquote>
<h1>Overwrite or create a file for writing</h1>
<p>test_file = open(“test.txt”, “wb”)</p>
</blockquote>
<blockquote>
<h1>Get the file mode used</h1>
<p>print(test_file.mode)</p>
</blockquote>
<blockquote>
<h1>Get the files name</h1>
<p>print(test_file.name)</p>
</blockquote>
<blockquote>
<h1>Write text to a file with a newline</h1>
<p>test_file.write(bytes(“Write me to the file\n”, ‘UTF-8’))</p>
</blockquote>
<blockquote>
<h1>Close the file</h1>
<p>test_file.close()</p>
</blockquote>
<blockquote>
<h1>Opens a file for reading and writing</h1>
<p>test_file = open(“test.txt”, “r+”)</p>
</blockquote>
<blockquote>
<h1>Read text from the file</h1>
<p>text_in_file = test_file.read()</p>
</blockquote>
<blockquote>
<p>print(text_in_file)</p>
</blockquote>
<blockquote>
<h1>Delete the file</h1>
<p>os.remove(“test.txt”)</p>
</blockquote>
<blockquote>
<h1>CLASSES AND OBJECTS -------------</h1>
<h1>The concept of OOP allows us to model real world things using code</h1>
<h1>Every object has attributes (color, height, weight) which are object variables</h1>
<h1>Every object has abilities (walk, talk, eat) which are object functions</h1>
</blockquote>
<blockquote>
<p>class Animal:<br>
# None signifies the lack of a value<br>
# You can make a variable private by starting it with __<br>
__name = None<br>
__height = None<br>
__weight = None<br>
__sound = None</p>
</blockquote>
<blockquote>
<pre><code># The constructor is called to set up or initialize an object
# self allows an object to refer to itself inside of the class
def __init__(self, name, height, weight, sound):
    self.__name = name
    self.__height = height
    self.__weight = weight
    self.__sound = sound
</code></pre>
</blockquote>
<blockquote>
<pre><code>def set_name(self, name):
    self.__name = name
</code></pre>
</blockquote>
<blockquote>
<pre><code>def set_height(self, height):
    self.__height = height
</code></pre>
</blockquote>
<blockquote>
<pre><code>def set_weight(self, height):
    self.__height = height
</code></pre>
</blockquote>
<blockquote>
<pre><code>def set_sound(self, sound):
    self.__sound = sound
</code></pre>
</blockquote>
<blockquote>
<pre><code>def get_name(self):
    return self.__name
</code></pre>
</blockquote>
<blockquote>
<pre><code>def get_height(self):
    return str(self.__height)
</code></pre>
</blockquote>
<blockquote>
<pre><code>def get_weight(self):
    return str(self.__weight)
</code></pre>
</blockquote>
<blockquote>
<pre><code>def get_sound(self):
    return self.__sound
</code></pre>
</blockquote>
<blockquote>
<pre><code>def get_type(self):
    print("Animal")
</code></pre>
</blockquote>
<blockquote>
<pre><code>def toString(self):
    return "{} is {} cm tall and {} kilograms and says {}".format(self.__name, self.__height, self.__weight, self.__sound)
</code></pre>
</blockquote>
<blockquote>
<h1>How to create a Animal object</h1>
<p>cat = Animal(‘Whiskers’, 33, 10, ‘Meow’)</p>
</blockquote>
<blockquote>
<p>print(cat.toString())</p>
</blockquote>
<blockquote>
<h1>You can’t access this value directly because it is private</h1>
<p><span class="hashtag">#print</span>(cat.__name)</p>
</blockquote>
<blockquote>
<h1>INHERITANCE -------------</h1>
<h1>You can inherit all of the variables and methods from another class</h1>
</blockquote>
<blockquote>
<p>class Dog(Animal):<br>
__owner = None</p>
</blockquote>
<blockquote>
<pre><code>def __init__(self, name, height, weight, sound, owner):
    self.__owner = owner
    self.__animal_type = None
</code></pre>
</blockquote>
<blockquote>
<pre><code>    # How to call the super class constructor
    super(Dog, self).__init__(name, height, weight, sound)
</code></pre>
</blockquote>
<blockquote>
<pre><code>def set_owner(self, owner):
    self.__owner = owner
</code></pre>
</blockquote>
<blockquote>
<pre><code>def get_owner(self):
    return self.__owner
</code></pre>
</blockquote>
<blockquote>
<pre><code>def get_type(self):
    print ("Dog")
</code></pre>
</blockquote>
<blockquote>
<pre><code># We can overwrite functions in the super class
def toString(self):
    return "{} is {} cm tall and {} kilograms and says {}. His owner is {}".format(self.get_name(), self.get_height(), self.get_weight(), self.get_sound(), self.__owner)
</code></pre>
</blockquote>
<blockquote>
<pre><code># You don't have to require attributes to be sent
# This allows for method overloading
def multiple_sounds(self, how_many=None):
    if how_many is None:
        print(self.get_sound)
    else:
        print(self.get_sound() * how_many)
</code></pre>
</blockquote>
<blockquote>
<p>spot = Dog(“Spot”, 53, 27, “Ruff”, “Webster”)</p>
</blockquote>
<blockquote>
<p>print(spot.toString())</p>
</blockquote>
<blockquote>
<h1>Polymorphism allows use to refer to objects as their super class</h1>
<h1>and the correct functions are called automatically</h1>
</blockquote>
<blockquote>
<p>class AnimalTesting:<br>
def get_type(self, animal):<br>
animal.get_type()</p>
</blockquote>
<blockquote>
<p>test_animals = AnimalTesting()</p>
</blockquote>
<blockquote>
<p>test_animals.get_type(cat)<br>
test_animals.get_type(spot)</p>
</blockquote>
<blockquote>
<p>spot.multiple_sounds(4)</p>
</blockquote>
<p>Post originally written at: <a href="https://www.techbible.org/2016/07/ultimate-python-cheat-sheet/" rel="nofollow noopener">https://www.techbible.org/2016/07/ultimate-python-cheat-sheet/</a><br>
Download the file: <a href="https://github.com/webster007/python_scripts/blob/master/Complete_python_cheat_sheet.py" rel="nofollow noopener">https://github.com/webster007/python_scripts/blob/master/Complete_python_cheat_sheet.py</a></p>
          <p><a href="https://0x00sec.org/t/the-ultimate-python-cheat-sheet/754/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-ultimate-python-cheat-sheet/754/1</link>
        <pubDate>Tue, 19 Jul 2016 10:07:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-754-1</guid>
        <source url="https://0x00sec.org/t/the-ultimate-python-cheat-sheet/754.rss">The Ultimate Python Cheat Sheet</source>
      </item>
  </channel>
</rss>
