<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Writeup: 0x00sec CTF - Exercise #4</title>
    <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232</link>
    <description>![header-ctf-0x00sec|690x269](upload://wOiVhJMMswDlMlkqZB8w6ZTLfjQ.png) 

# Writeup CTF 0x00sec Web - Exercise #4

Another day, another ctf challenge.  This time no. 4 of the web exercises

## The Challenge

Like always we take a look at the page source first. Because after 3 challenges, we know that we most likely get a hint from there.

![source|690x389](upload://opWw03x09UwmzkPea4ykAdytiKD.png) 

And yet again, we have a hint. This time it is:

	&lt;!-- TODO: --&gt;
	&lt;!-- * Restrict debug log access--&gt;

We now know, that we have somewhere an accessible log file. But how to find it?

## The Attack

There are multiple ways of finding some files. One easy way would be to spin up [gobuster](https://github.com/OJ/gobuster &quot;Gobuster&quot;) and see if we get any results. I did it in the background while manually testing.

If you&#39;re lucky you can also just guess the file name. I&#39;ve tried `debug.txt`, `log.txt` and some other variations. But found nothing.

However, I also checked `robots.txt`. As it is present in most websites and can have some information leakage. The [robots.txt](https://developers.google.com/search/reference/robots_txt) handles what files and folders should be indexed or not indexed by search machine bots.

Which is kind of funny, because you are explicitly putting sensitive information in there. Like hey, we have a secret file or endpoint which should not be shown in google. But then it is in your `robots.txt` to prevent google from indexing it.

Well, we have luck because there is a robots.txt

![robots|416x229](upload://w722sBTdb73WdexDiZ9divK6cFO.png) 

And gobuster also returns us this result:

![gobuster|436x201](upload://3SdrU2Pl2daAfZ9O4vU7xFDAb2z.png) 


If we access the log, we see it&#39;s content. 

There are several entries that are looking like this one.

	Timestamp: 1584680782
	Host: exercise-4.0x00sec.dev
	Connection: close
	X-Real-Ip: 138.197.209.37
	X-Forwarded-For: 138.197.209.37
	X-Forwarded-Proto: https
	X-Forwarded-Ssl: on
	X-Forwarded-Port: 443
	User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36
	Accept: */*
	Cookie: PHPSESSID=4a95c7eedff98581d964f7a8f74da9e5


We can assume that the entries will get appended in chronological order. 
You can also checkout the timestamps and convert them with for example [unixtimestamp.com](https://www.unixtimestamp.com/index.php) to be sure.

Depending on when you make this challenge the debug log can be quite big. And sometimes the browser can have problems displaying it.

We can download it with `wget` and show it&#39;s content with `less`.

	wget https://exercise-4.0x00sec.dev/debug.log

	less +G debug.log.html

The `+G` will scroll to the bottom of the file. `+` for immediately invoke a command and `G` to scroll to the end of the file.

From here it should be relatively easy, because the debug.log contains the PHP Session Cookie. We can try a [Session Hijacking Attack](https://en.wikipedia.org/wiki/Session_hijacking).

To perform this attack, we need to latest cookie. Thats why we scrolled to the end of the file. 

We just copy the `PHPSESSID` value, open chrome devtools and replace our `PHPSESSID` value with the one from the debug.log.

![phpsessid|690x253](upload://8NakJISrbEhervqJhPNzJyT75b7.png) 

After we refresh the page we should be logged in and see the flag.

## Conclusion

This is a very cool exercise and a serious vulnerability. In the end of last year, someone was able to hijack the session of a hackerone employee and gained access to all private programs and bug reports.

[https://hackerone.com/reports/745324](https://hackerone.com/reports/745324)</description>
    
    <lastBuildDate>Sat, 11 Apr 2020 18:40:58 +0000</lastBuildDate>
    <category>CTF</category>
    <atom:link href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Writeup: 0x00sec CTF - Exercise #4</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232/7</link>
        <pubDate>Mon, 03 Aug 2020 06:08:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20232-7</guid>
        <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232.rss">Writeup: 0x00sec CTF - Exercise #4</source>
      </item>
      <item>
        <title>Writeup: 0x00sec CTF - Exercise #4</title>
        <dc:creator><![CDATA[funkbot]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for linking that report at the end! See how a stolen cookie was used to access a whole SSO session really highlights the impact of this vulnerability.</p>
          <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232/6</link>
        <pubDate>Sat, 11 Apr 2020 18:40:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20232-6</guid>
        <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232.rss">Writeup: 0x00sec CTF - Exercise #4</source>
      </item>
      <item>
        <title>Writeup: 0x00sec CTF - Exercise #4</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Updated!!</p>
<p><a href="http://ctf.0x00sec.org">ctf.0x00sec.org</a> <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232/5</link>
        <pubDate>Tue, 07 Apr 2020 18:22:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20232-5</guid>
        <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232.rss">Writeup: 0x00sec CTF - Exercise #4</source>
      </item>
      <item>
        <title>Writeup: 0x00sec CTF - Exercise #4</title>
        <dc:creator><![CDATA[H45uK1mchi]]></dc:creator>
        <description><![CDATA[
            <p>Haha thanks. Sadly I don’t have the source file anymore. I just grabbed the 0x00sec logo and added the CTF which is this font: <a href="https://www.dafont.com/painted.font" rel="nofollow noopener">https://www.dafont.com/painted.font</a></p>
          <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232/4</link>
        <pubDate>Tue, 07 Apr 2020 16:10:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20232-4</guid>
        <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232.rss">Writeup: 0x00sec CTF - Exercise #4</source>
      </item>
      <item>
        <title>Writeup: 0x00sec CTF - Exercise #4</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Awesome writeup, I must say I really like the custom banner you put together! Do you have a source file we can update the main site with? Looks dope!</p>
<p>PS:</p>
<aside class="quote no-group" data-username="H45uK1mchi" data-post="1" data-topic="20232">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/h45uk1mchi/40/11065_2.png" class="avatar"> H45uK1mchi:</div>
<blockquote>
<p>less +G debug.log.html</p>
</blockquote>
</aside>
<p>I never knew this trick! Thanks!</p>
          <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232/3</link>
        <pubDate>Fri, 03 Apr 2020 14:42:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20232-3</guid>
        <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232.rss">Writeup: 0x00sec CTF - Exercise #4</source>
      </item>
      <item>
        <title>Writeup: 0x00sec CTF - Exercise #4</title>
        <dc:creator><![CDATA[vict0ni]]></dc:creator>
        <description><![CDATA[
            <p>Nice one! I love that image you add with the pink “CTF” at the bottom <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:"></p>
          <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232/2</link>
        <pubDate>Fri, 03 Apr 2020 14:37:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20232-2</guid>
        <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232.rss">Writeup: 0x00sec CTF - Exercise #4</source>
      </item>
      <item>
        <title>Writeup: 0x00sec CTF - Exercise #4</title>
        <dc:creator><![CDATA[H45uK1mchi]]></dc:creator>
        <description><![CDATA[
            <p><span alt="header-ctf-0x00sec" data-base62-sha1="wOiVhJMMswDlMlkqZB8w6ZTLfjQ" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<h1>Writeup CTF 0x00sec Web - Exercise <span class="hashtag">#4</span>
</h1>
<p>Another day, another ctf challenge.  This time no. 4 of the web exercises</p>
<h2>The Challenge</h2>
<p>Like always we take a look at the page source first. Because after 3 challenges, we know that we most likely get a hint from there.</p>
<p><span alt="source" data-base62-sha1="opWw03x09UwmzkPea4ykAdytiKD" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>And yet again, we have a hint. This time it is:</p>
<pre><code>&lt;!-- TODO: --&gt;
&lt;!-- * Restrict debug log access--&gt;
</code></pre>
<p>We now know, that we have somewhere an accessible log file. But how to find it?</p>
<h2>The Attack</h2>
<p>There are multiple ways of finding some files. One easy way would be to spin up <a href="https://github.com/OJ/gobuster" title="Gobuster" rel="nofollow noopener">gobuster</a> and see if we get any results. I did it in the background while manually testing.</p>
<p>If you’re lucky you can also just guess the file name. I’ve tried <code>debug.txt</code>, <code>log.txt</code> and some other variations. But found nothing.</p>
<p>However, I also checked <code>robots.txt</code>. As it is present in most websites and can have some information leakage. The <a href="https://developers.google.com/search/reference/robots_txt" rel="nofollow noopener">robots.txt</a> handles what files and folders should be indexed or not indexed by search machine bots.</p>
<p>Which is kind of funny, because you are explicitly putting sensitive information in there. Like hey, we have a secret file or endpoint which should not be shown in google. But then it is in your <code>robots.txt</code> to prevent google from indexing it.</p>
<p>Well, we have luck because there is a robots.txt</p>
<p><span alt="robots" data-base62-sha1="w722sBTdb73WdexDiZ9divK6cFO" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>And gobuster also returns us this result:</p>
<p><span alt="gobuster" data-base62-sha1="3SdrU2Pl2daAfZ9O4vU7xFDAb2z" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>If we access the log, we see it’s content.</p>
<p>There are several entries that are looking like this one.</p>
<pre><code>Timestamp: 1584680782
Host: exercise-4.0x00sec.dev
Connection: close
X-Real-Ip: 138.197.209.37
X-Forwarded-For: 138.197.209.37
X-Forwarded-Proto: https
X-Forwarded-Ssl: on
X-Forwarded-Port: 443
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36
Accept: */*
Cookie: PHPSESSID=4a95c7eedff98581d964f7a8f74da9e5
</code></pre>
<p>We can assume that the entries will get appended in chronological order.<br>
You can also checkout the timestamps and convert them with for example <a href="https://www.unixtimestamp.com/index.php" rel="nofollow noopener">unixtimestamp.com</a> to be sure.</p>
<p>Depending on when you make this challenge the debug log can be quite big. And sometimes the browser can have problems displaying it.</p>
<p>We can download it with <code>wget</code> and show it’s content with <code>less</code>.</p>
<pre><code>wget https://exercise-4.0x00sec.dev/debug.log

less +G debug.log.html
</code></pre>
<p>The <code>+G</code> will scroll to the bottom of the file. <code>+</code> for immediately invoke a command and <code>G</code> to scroll to the end of the file.</p>
<p>From here it should be relatively easy, because the debug.log contains the PHP Session Cookie. We can try a <a href="https://en.wikipedia.org/wiki/Session_hijacking" rel="nofollow noopener">Session Hijacking Attack</a>.</p>
<p>To perform this attack, we need to latest cookie. Thats why we scrolled to the end of the file.</p>
<p>We just copy the <code>PHPSESSID</code> value, open chrome devtools and replace our <code>PHPSESSID</code> value with the one from the debug.log.</p>
<p><span alt="phpsessid" data-base62-sha1="8NakJISrbEhervqJhPNzJyT75b7" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>After we refresh the page we should be logged in and see the flag.</p>
<h2>Conclusion</h2>
<p>This is a very cool exercise and a serious vulnerability. In the end of last year, someone was able to hijack the session of a hackerone employee and gained access to all private programs and bug reports.</p>
<p><a href="https://hackerone.com/reports/745324" rel="nofollow noopener">https://hackerone.com/reports/745324</a></p>
          <p><a href="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232/1</link>
        <pubDate>Fri, 03 Apr 2020 14:08:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20232-1</guid>
        <source url="https://0x00sec.org/t/writeup-0x00sec-ctf-exercise-4/20232.rss">Writeup: 0x00sec CTF - Exercise #4</source>
      </item>
  </channel>
</rss>
