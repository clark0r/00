<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Malware Reversing - Burpsuite Keygen</title>
    <link>https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167</link>
    <description>DISCLAIMER: The following post contains a virus sample. If you decide to mess with it you do so at your own risk. Do not go running it on your computer, at least use a VM.

Some random new &quot;user&quot; called @the_heat_man posted some files on the forums multiple times (after being deleted by mods) caliming it was a keygen for burpsuite. Many members of these forums were suspicious of it being malware. I, along with @Leeky, @dtm, @Cry0l1t3 and @anon3236228 (please let me know if I missed anyone) decided to reverse engineer it to see if it is. Surprisingly as well as containing a remote access trojan (RAT) it actually contains a working keygen. As such, for legal reasons I have not included a link to the original file.
The following is a writeup of the analysis of the RAT.

The keygen comes with a file called `virus.txt` which contains what appears to be a [link](https://www.virustotal.com/#/file/6530b29367de2b0fa42c411f94ae734d745443256431aee0fe221acb7a75c103/detection) to a virus total scan of the keygen jarfile

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/d/d3ab0271f8a60ba503685ec62564c6c5731a4208.png&quot; width=&quot;690&quot; height=&quot;338&quot;&gt;

However the hash on virus total is different to the actual file, indicating that it&#39;s a scan of a different file

(NOTE: iirc when I originally visited the page all the scans were clean and the file name matched the file `burp-loader-keygen1.7.31.jar` . The page says the last analysis was today, so that may have something to do with it.)

```
&gt; shasum -a 256 burp-loader-keygen1.7.31.jar
1bf764e77a543def4c623e6e207b1b72999f6550cf49651b88d53f80ae10e4d7  burp-loader-keygen1.7.31.jar
```

Jars are stored as zip files so we can extract the jar with unzip.
```
&gt; cp burp-loader-keygen1.7.31.jar burp-loader-keygen1.7.31.zip
&gt; unzip burp-loader-keygen1.7.31.zip
Archive:  burp-loader-keygen1.7.31.zip
   creating: META-INF/
 extracting: META-INF/MANIFEST.MF    
   creating: burploader/
 extracting: burploader/Burploader.class  
 extracting: burploader/Data.bin 
```

There is a class file which can be decompiled, I will use jad, which is installed on kali.

```
&gt; jad burploader/Burploader.class
```
Here is the important part of the decompiled java code

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/e/e218b483901d3e89d77e52e4f650c3f0ba10ce27.png&quot; width=&quot;690&quot; height=&quot;235&quot;&gt;

Before this part is a base64 encoding of another jarfile contaning the keygen. That is stored in m. The decode function decodes the base64 and writes it to a file called `Data.jar`
This section of code contains powershell commands to download and run this powershell script `http://imonty.cn/wp-includes/pomo/script/dcss/js.js`
(the extension is .js but it is actually powershell)
and to also run the keygen.

Let&#39;s download that code and have a look.
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/e/e739b234a72c804332c79139d27c0fdb236f459c.png&quot; width=&quot;690&quot; height=&quot;227&quot;&gt;

This drops two more files into a newly made c:\ProgramData\WindowsNT directory
The files are:

* `http://imonty.cn/wp-includes/pomo/script/dcss/co.js` saved as `WindowsNT.ini` and 
* `http://imonty.cn/wp-includes/pomo/script/dcss/co.vbs` saved as `WindowsNT.vbs`

It then runs the visual basic script (co.vbs), so let&#39;s look at that first

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/4/4b37a9150532ab8464a801fcf513f20ea792e727.png&quot; width=&quot;690&quot; height=&quot;248&quot;&gt;

Here we have obfuscated visual basic code. The easiest method to deobfuscate is to replace the part of the code that executes with something that prints (This may not work in all cases, but it is a very useful technique). Here, clearly, the part that executes the deobfuscated code is the `EVAL(ExEcUTE(www))`  (circled)

(what this file is actually doing, is to split the long string at every `*` and then evaluate the expressions in the resulting list, and turning the results of the math expressions into characters. Finally running the resulting string from concatenating those characters)

To print the string instead of executing we can replace the `EVAL(ExEcUTE(www))`  with `wscript.echo www` and run it.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/6/600cdfe12d8514435d17e44c05ba101e2ca430ee.png&quot; width=&quot;690&quot; height=&quot;200&quot;&gt;

What this does is run the other downloaded file, co.js (saved as WindowsNT.ini) in powershell.
So let&#39;s look at co.js
This file is large, so I have uploaded it [here](https://gist.githubusercontent.com/lkw657/f2dfae7f73267c8114de039a60efcb51/raw/e7b622c0385b48a3f727cb9b97fbf2b34966a5d5/co.ps1.gz.b64)
I gziped and b64ed the file to make it upload nicely, you should do `cat co.ps1.gzip.b64 | base64 -d | gunzip &gt; co.ps1` to read it
I have also renamed co.js to co.ps1 to make the `./` in powershell work easier.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/5/55150c0af0eede85c6698c6dc82844f95418162f.png&quot; width=&quot;690&quot; height=&quot;342&quot;&gt;

`iex` (alias for invoke-expression) is a function that evaluates powershell code, so we need to replace it with `write-output` to print it instead, then run the file.

The modified code should look like this

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/f/f4a56c4dc096928c33e5e439c7ef46449cac8d39.png&quot; width=&quot;690&quot; height=&quot;344&quot;&gt;

I was running in a new virtual machine, so I had to allow untrusted powershell scripts to execute.
After running powershell as an administrator:
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/a/a953bb037049e97546dc469680206f9926df023c.png&quot; width=&quot;690&quot; height=&quot;130&quot;&gt;

```
PS E:\burp\burploader&gt; ./co.ps1 &gt; co.2.ps1
```

I uploaded the resulting file [here](https://gist.githubusercontent.com/lkw657/aa4cb19b3b7b5ccd55c846a59b3c07bf/raw/572ae9cff6747c45c2880f655139c4aebe0ff266/co.2.ps1.gz.b64)
We have yet another layer of obfusication.

The beginning of this fie looks like this

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/7/793ebfca37846be873a16c5fb6bacbe7b0c34483.png&quot; width=&quot;690&quot; height=&quot;342&quot;&gt;

This time it calls `Invoke-Expression` instead of `iex`, replace it with `write-output` .

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/0/0f4a5d13eed014334e794d2b67e584ab803b4467.png&quot; width=&quot;690&quot; height=&quot;343&quot;&gt;

Now run it.
```
PS E:\burp\burploader&gt; ./co.2.ps1 &gt; co.3.ps1
```

[File](https://gist.githubusercontent.com/lkw657/bbbf4df3c2aa92f59cdd856643409d0f/raw/171f282ad627db264f279ca10644cda285acb284/co.3.ps1.gz.b64)

The first thing to notice is that the new file has three sections separated by blank lines. I made the mistake of missing the first section and couldn&#39;t find some needed code later (this was found by @leeky and @dtm). Instead of trying to deobfusicate the whole file at once (like I did) I learnt that it would have been better to split it 3 smaller files and do them one at a time.

**First section:**
The **end** of the section looks like this.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/2/231b72f34ddacdaaabf67bb54a513a0ae47583ce.png&quot; width=&quot;690&quot; height=&quot;343&quot;&gt;

We don&#39;t have something that looks as nice as `invoke-expression` this time, however since the execution will be done last it is most likely that the call will be on one of the ends, the left with the deobfusicated code as an arguement, or the right, with the code piped into the standard input. 
In this case the left just consists of a bracket, so let&#39;s check the rightmost statement after a pipe (circled). 
`.( $PsHOmE[21]+$PShOMe[30]+&#39;X&#39;)` Interesting. let&#39;s see what `$PsHOmE[21]+$PShOMe[30]+&#39;X&#39;` evaluates to.

```
PS E:\burp\burploader&gt; $PsHOmE[21]+$PShOMe[30]+&#39;X&#39;
ieX
```
so we need to replace the `.( $PsHOmE[21]+$PShOMe[30]+&#39;X&#39;)` with `write-output`

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/1/1fcee38e286e4e8ce19d6cdcd3f24bcf7bbc3c7e.png&quot; width=&quot;690&quot; height=&quot;344&quot;&gt;

The result is more obfusicated code. 

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/6/62388ad1dd2c30fdb4233ecb27d30119d1bd82e4.png&quot; width=&quot;690&quot; height=&quot;344&quot;&gt;

Let&#39;s repeat the same idea. What is `.( $eNv:PuBliC[13]+$eNv:pUBLiC[5]+&#39;x&#39;)` at the beginning
```
PS E:\burp\burploader&gt; $eNv:PuBliC[13]+$eNv:pUBLiC[5]+&#39;x&#39;
iex
```
so replace it with `write-output`

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/7/79196fd4a26902a5a7cc525c50553a0e7a301d94.png&quot; width=&quot;690&quot; height=&quot;342&quot;&gt;

After executing there is more obsusication, so do it again on the new file replacing 
`&amp; ($pShoME[21]+$pShoME[34]+&#39;X&#39;)` at the end with `write-output`
And again with ` &amp;( $pShoME[21]+$pSHOMe[30]+&#39;X&#39;)` at the beginning


**Second section:**
(starts with [String]::JoIN(&#39;&#39;,( [Char[]]( 127 ,105 )

The *end* of the second section looks like this

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/5/5635b2b6d50acf0a692ce58b37e561d83bb1714c.png&quot; width=&quot;689&quot; height=&quot;343&quot;&gt;

Replace `.((gV &#39;*mDR*&#39;).nAme[3,11,2]-joIn&#39;&#39;)` at the end with `write-output`
It&#39;s still obfusicated. So, look at the end `.( $pShoME[4]+$PsHoMe[30]+&#39;X&#39;)` , replace with `write-output` and then execute.
And then we need to do this again, replacing `&amp;( ([sTrINg]$verbosePREFerencE)[1,3]+&#39;x&#39;-JOIN&#39;&#39;)` near the beginning with `write-output`
And one last time, replacing `. ( $Env:comsPec[4,15,25]-JOiN&#39;&#39;)` at the end with `write-output`


**Third section:**
The start of the third section looks like this

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/7/7afd8246410e455425ab93de21db25f6310b608a.png&quot; width=&quot;690&quot; height=&quot;340&quot;&gt;

Replace `.( $PsHome[4]+$PShoME[34]+&#39;X&#39;)` at the beginning with `write-output` and execute.
This section now looks pretty readable, particually if we replace the function names.

This is as far as we can get with this method. The function names must be found through manual analysis and unmangling the variable names and content must be done through another method, such as manual or writing a script.

The output of concatenating all this back together is [here](https://gist.githubusercontent.com/lkw657/becdb839139901fcc907fc39605a890d/raw/70e685f6ec0917aad7a6662132f967577bd72e3e/final1.ps1.b64)
[Here](https://gist.githubusercontent.com/lkw657/4244014b5c091325feb3b40e0a3c786f/raw/3476aa131dcbb7fc244691dd5ed90a4af724b854/final2.ps1.b64) is a modification of the code I made without the messy variables and making up names for some of the functions.

Virustotal does not detect the powershell script as a virus [here](https://www.virustotal.com/#/file/6f38fe65cad067a73888552cdb9817a37329863d8732b4e930938f619ca504fe/detection)

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/4/4ca6b607b6497d7409c65541f2ee516bffbe06c7.png&quot; width=&quot;689&quot; height=&quot;337&quot;&gt;

Some heuristics, however, detect the dropper [here](https://www.virustotal.com/#/file/1bf764e77a543def4c623e6e207b1b72999f6550cf49651b88d53f80ae10e4d7/detection)

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/2/277249b80c5e1c8aa15a7d47c94673f496890d39.png&quot; width=&quot;689&quot; height=&quot;338&quot;&gt;

The first section just contains variables, however the names and values are very mangled. 

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/7/7a62bacf91f3e02cb08bd7541442ab27542e935a.png&quot; width=&quot;690&quot; height=&quot;342&quot;&gt;

From analysing the functions we worked out that the variable `$dragon_middle` contains domains that the RAT will try to connect to (going through them until it can connect to one). The variables `$private` and `$public` contain encryption and decryption keys for data that is transfered by the RAT. @Leeky pulled these out by looping over the arrays and printing the contents. The results are [here](https://gist.githubusercontent.com/lkw657/61905786d99565ba8df087f208b4310a/raw/3c3250bd30e68e286d0a06f371719f49583a1b92/variables.txt)

@Cry0l1t3 Went through the domains and highlighted [this one](https://gist.githubusercontent.com/lkw657/db14c27dd42f83ad62ec64de6862249a/raw/3ff41837eeeeda4acf909f64910e4f5ae33a222a/domain) for having a different host than all the others.

@dtm made a more complete list of variables [here](https://gist.githubusercontent.com/lkw657/9d81fac2ca10126eceb5119eae92b30e/raw/6791d90b9c4929a9029c8070c04632696ce33d15/variables.txt) I don&#39;t know enough about windows to say how this was produced. But based on the format I think he used a command to print the environment (correct me if I&#39;m wrong).
While it doesn&#39;t have all the elements in `$dragon_middle` it contains some other interesting variables such as the serivces it uses to find the victim&#39;s ip `https://api.ipify.org/` and country `http://apinotes.com/ipaddress/ip.php?ip=`.

He also made a [packet capture](https://gist.githubusercontent.com/lkw657/e9c13ddb9cf3955384f3b39f22f97d6d/raw/ae674ac8401597c759e15ee7f79ea78ee520557d/packets.pcap.b64) of it trying to contact a server.

The second section contains the code for encryption and decryption, and the 3rd section contains the rest of the code.

The RAT uses RSA to communicate to a server. Weirdly, I think the public key and private key have been named the wrong way around.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/a/a61dd874d78afd34eb9a51fd1e98f3b0b8ac259e.png&quot; width=&quot;690&quot; height=&quot;343&quot;&gt;
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/e/eb81eb6730ee8fe4c6a7d49d82d03bb7fba56fb7.png&quot; width=&quot;690&quot; height=&quot;181&quot;&gt;

The public key and private key have different moduli which indicates they are most likely from different key pairs.
Messages sent to the server are encrypted with the server&#39;s public key (`$secret` in the code) and decrypted by the server&#39;s private key (stored on the server)
Messages sent to the RAT are encrypted with the RAT&#39;s public key (on the server) and decrypted with the RATs private key (`$public` in the code)
In theory if this were done properly the message to the server wouldn&#39;t be able to be decrypted (of course the RAT could be modified to just print it). However the keys use small primes and are thus weak.

When the RAT starts, the first thing it tries to do is gain persistence. 

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/e/ea2da49cf919afa8605832199f33b71acfe5d1c0.png&quot; width=&quot;690&quot; height=&quot;295&quot;&gt;

It does this by adding the location of the vbs file to the registry in the key `HKCU:SOFTWARE\Microsoft\Windows\CurrentVersion\Run\DifenderUpdate` It then scedules the script at that location to be run on login.
I am not sure what the first part of the persistence function is doing. I think it looks like it is disabling protections in Word&#39;s protected view, but I&#39;m not sure why that would be needed.

Next the rat checks for debuggers by checking the names of running processes against a list of debuggers and other tools. If one is found it shuts down the computer

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/0/0bb2e06c08ed69b3304ff444ffb1c6dbc0e9c98b.png&quot; width=&quot;690&quot; height=&quot;118&quot;&gt;

It then tries to connect to one of the servers listed in `$dragon_middle`. Whenever the code errors in future it will also do this again (presumably because it thinks that server may be down or blocked)

Next it tries to register with the server before accepting and handling commands

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/9/98a2fb41522a3cfb800a2bbdf01fdec3eef33ae8.png&quot; width=&quot;690&quot; height=&quot;161&quot;&gt;
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/c/ce20d97d5d6f22c98935c37f17d196d8459963e7.png&quot; width=&quot;690&quot; height=&quot;343&quot;&gt;
&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/6/60bed19a4cc5dc67d039ad92c34e31e692ec1863.png&quot; width=&quot;689&quot; height=&quot;189&quot;&gt;

The following commands are accepted

* reboot
   reboots the computer
* shutdown
   shuts down the computer
* clean
   tries to wipe as much as possible from C:\, D:\, E:\ and F:\ before rebooting
* screenshot
   takes a screenshot and sends it to the server
* upload
   transfers a file from the server to the victim

If the command is not one of those it tries to execute it in powershell

I ran the keygen with the default execution policy (remember when I had to change it) and checked for the c:\ProgramData\WindowsNT directory to see if the RAT managed to run. The directory was not created so it seems it&#39;s possible that it could be blocked by windows.

###Adendum:
I mentioned that the crypto is weak, this is how you break it.
I&#39;m not going to cover the basics of how RSA works here, but there is an 0x00sec tutorial [here](https://0x00sec.org/t/encryption-101-rsa-001-the-maths-behind-it/1921) and [wikipedia](https://en.wikipedia.org/wiki/RSA_(cryptosystem)) has a lot of good info

In RSA two primes `p` and `q` are used to calculate `n = p*q` the primes used should be kept secret. They are also used to calculate `λ(n) = λ(p*q) = lcm(p-1, q-1)`. The public exponent `e` and the private exponent `d` are related to each other by the following equation `d == e^(-1) (mod λ(n))`.

In the case of the RAT `n` is small (as the result of using small primes) so it can easily be factored into `p` and  `q`. They can then be used to calculate `λ(n)` and then the last equation can be used to calculate `d` from `e`.

Using sage math

```
# from $private variable in rat
e = 959
n = 713

# factor n
# list(factor(n)) returns prime factors as a list of tuples of (factor, amount)
# we just want the factors
p, q = [a[0] for a in list(factor(n))]

# calculate λ(n) 
l = lcm(p-1, q-1)

# calculate d
print(&#39;d = {}&#39;.format(inverse_mod(e, l)))
```

gives `d = 149`

With the server&#39;s private key we can write a script to decrypt messages sent to the server. If we use the same process to get the RAT&#39;s public key we could MiTM the traffic between the RAT and the server.

Here is a decryption script in python
```
def decrypt(ciphertext):
    key = 149
    n = 713
    decrypted = []
    for i in range(0, len(ciphertext)):
        num = int(ciphertext[i])
        t = pow(num, key, n)
        decrypted.append(chr(t))
    return &#39;&#39;.join(decrypted)

nums = input().split()
print(decrypt([int(i) for i in nums]))
```

In @dtm&#39;s pcap the following is sent to the server
```
340 362 396 383 105 598 219 362 581 362 518 73 35 73 504 220 515 665 504 515 515 35 515 518 133 335 316 665 515 665 220 665 316 181 665 335 515 38 335 335 335 316 362 663 362 145 180 396 637 383 219 362 581 362 180 383 432 432 145 219 367 362 590
```
Running that through the script gives the decryption as

```
{&quot;TOKEN&quot;:&quot;70e0a413a11e17db9313439c3b1fbbb9&quot;,&quot;ACTION&quot;:&quot;COMMAND&quot;}
```</description>
    
    <lastBuildDate>Fri, 02 Feb 2018 23:05:26 +0000</lastBuildDate>
    <category>Reverse Engineering</category>
    <atom:link href="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Malware Reversing - Burpsuite Keygen</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/23">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/23</link>
        <pubDate>Thu, 01 Mar 2018 00:59:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5167-23</guid>
        <source url="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167.rss">Malware Reversing - Burpsuite Keygen</source>
      </item>
      <item>
        <title>Malware Reversing - Burpsuite Keygen</title>
        <dc:creator><![CDATA[lkw]]></dc:creator>
        <description><![CDATA[
            <p>We didn’t spend as much time analyzing the keygen that it dropped, however I think it is probably not infected (I didn’t see anything obviously bad in my quick looks). I have seen the keygen on the internet without the malware dropper. I think it is likely that the malware author found the keygen and decided to wrap it in the dropper and redistribute it.</p>
          <p><a href="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/21">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/21</link>
        <pubDate>Fri, 02 Feb 2018 19:27:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5167-21</guid>
        <source url="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167.rss">Malware Reversing - Burpsuite Keygen</source>
      </item>
      <item>
        <title>Malware Reversing - Burpsuite Keygen</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>This is a good chance to go as far as you can, document your work, share it, and just ask, “Hey, what’s my next step?” We love those kinds of journeys and helping people out!</p>
          <p><a href="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/20">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/20</link>
        <pubDate>Fri, 02 Feb 2018 18:38:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5167-20</guid>
        <source url="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167.rss">Malware Reversing - Burpsuite Keygen</source>
      </item>
      <item>
        <title>Malware Reversing - Burpsuite Keygen</title>
        <dc:creator><![CDATA[byakuganIII]]></dc:creator>
        <description><![CDATA[
            <p>Yes this was an absolutely amazing malware reversing/analysis and I learned a lot of stuff from it specially reversing obfuscation scripts, and I’m sorry if my previous comment bother you guys and I didn’t mean to ask for support by any means, all I want was to discover if this man edit the original file or it was already malware.<br>
and even if I tried to reverse it I absolutely have zero knowledge with java and how to reverse it.</p>
          <p><a href="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/19">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/19</link>
        <pubDate>Fri, 02 Feb 2018 18:35:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5167-19</guid>
        <source url="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167.rss">Malware Reversing - Burpsuite Keygen</source>
      </item>
      <item>
        <title>Malware Reversing - Burpsuite Keygen</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>This was an absolutely amazing example of catching malware in the wild and reversing it. However, I’d like to address what i’m seeing in the comments:</p>
<p>Let’s discuss the work that <a class="mention" href="https://0x00sec.org/u/lkw">@lkw</a> and friends performed here and <em>not</em> use this as a support thread to ask for help with the malware you discovered. Take this example and reverse your own, share your progress, and we’ll discuss it there.</p>
          <p><a href="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/17">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/17</link>
        <pubDate>Fri, 02 Feb 2018 16:52:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5167-17</guid>
        <source url="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167.rss">Malware Reversing - Burpsuite Keygen</source>
      </item>
      <item>
        <title>Malware Reversing - Burpsuite Keygen</title>
        <dc:creator><![CDATA[SecurityFlaw]]></dc:creator>
        <description><![CDATA[
            <p>Great work guys!<br>
Nice stuff!</p>
          <p><a href="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/6</link>
        <pubDate>Wed, 31 Jan 2018 02:13:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5167-6</guid>
        <source url="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167.rss">Malware Reversing - Burpsuite Keygen</source>
      </item>
      <item>
        <title>Malware Reversing - Burpsuite Keygen</title>
        <dc:creator><![CDATA[W0lf]]></dc:creator>
        <description><![CDATA[
            <p>I used this as a tutorial to learn about reversing obfuscation code. Great write up sorry i cant help beyond that</p>
          <p><a href="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/5</link>
        <pubDate>Tue, 30 Jan 2018 23:36:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5167-5</guid>
        <source url="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167.rss">Malware Reversing - Burpsuite Keygen</source>
      </item>
      <item>
        <title>Malware Reversing - Burpsuite Keygen</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>This is amazing. This is what an awesome hacking community like this does. Good job everybody involved!</p>
          <p><a href="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/4</link>
        <pubDate>Tue, 30 Jan 2018 22:39:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5167-4</guid>
        <source url="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167.rss">Malware Reversing - Burpsuite Keygen</source>
      </item>
      <item>
        <title>Malware Reversing - Burpsuite Keygen</title>
        <dc:creator><![CDATA[termhn]]></dc:creator>
        <description><![CDATA[
            <p>Fun little read. Nice job <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/3</link>
        <pubDate>Tue, 30 Jan 2018 16:56:08 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5167-3</guid>
        <source url="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167.rss">Malware Reversing - Burpsuite Keygen</source>
      </item>
      <item>
        <title>Malware Reversing - Burpsuite Keygen</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-VIP" data-username="lkw" data-post="1" data-topic="5167">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/lkw/40/6369_2.png" class="avatar"> lkw:</div>
<blockquote>
<p><a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> made a more complete list of variables here I don’t know enough about windows to say how this was produced. But based on the format I think he used a command to print the environment (correct me if I’m wrong).</p>
</blockquote>
</aside>
<p>IIRC, the command was</p>
<pre><code class="lang-auto">Get-Variable | format-list Name, Value &gt;dump.txt
</code></pre>
<p>which does, unfortunately, truncate the variables. If you want the full values, you can use this (generates ugly unformated output):</p>
<pre><code class="lang-auto">Get-Variable | Select -Expand Value &gt;dump.txt
</code></pre>
          <p><a href="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/2</link>
        <pubDate>Tue, 30 Jan 2018 02:38:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5167-2</guid>
        <source url="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167.rss">Malware Reversing - Burpsuite Keygen</source>
      </item>
      <item>
        <title>Malware Reversing - Burpsuite Keygen</title>
        <dc:creator><![CDATA[lkw]]></dc:creator>
        <description><![CDATA[
            <p>DISCLAIMER: The following post contains a virus sample. If you decide to mess with it you do so at your own risk. Do not go running it on your computer, at least use a VM.</p>
<p>Some random new “user” called <a class="mention" href="https://0x00sec.org/u/the_heat_man">@the_heat_man</a> posted some files on the forums multiple times (after being deleted by mods) caliming it was a keygen for burpsuite. Many members of these forums were suspicious of it being malware. I, along with <a class="mention" href="https://0x00sec.org/u/leeky">@Leeky</a>, <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a>, <a class="mention" href="https://0x00sec.org/u/cry0l1t3">@Cry0l1t3</a> and <a class="mention" href="https://0x00sec.org/u/anon3236228">@anon3236228</a> (please let me know if I missed anyone) decided to reverse engineer it to see if it is. Surprisingly as well as containing a remote access trojan (RAT) it actually contains a working keygen. As such, for legal reasons I have not included a link to the original file.<br>
The following is a writeup of the analysis of the RAT.</p>
<p>The keygen comes with a file called <code>virus.txt</code> which contains what appears to be a <a href="https://www.virustotal.com/#/file/6530b29367de2b0fa42c411f94ae734d745443256431aee0fe221acb7a75c103/detection">link</a> to a virus total scan of the keygen jarfile</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/d/d3ab0271f8a60ba503685ec62564c6c5731a4208.png" width="690" height="338"></p>
<p>However the hash on virus total is different to the actual file, indicating that it’s a scan of a different file</p>
<p>(NOTE: iirc when I originally visited the page all the scans were clean and the file name matched the file <code>burp-loader-keygen1.7.31.jar</code> . The page says the last analysis was today, so that may have something to do with it.)</p>
<pre><code class="lang-auto">&gt; shasum -a 256 burp-loader-keygen1.7.31.jar
1bf764e77a543def4c623e6e207b1b72999f6550cf49651b88d53f80ae10e4d7  burp-loader-keygen1.7.31.jar
</code></pre>
<p>Jars are stored as zip files so we can extract the jar with unzip.</p>
<pre><code class="lang-auto">&gt; cp burp-loader-keygen1.7.31.jar burp-loader-keygen1.7.31.zip
&gt; unzip burp-loader-keygen1.7.31.zip
Archive:  burp-loader-keygen1.7.31.zip
   creating: META-INF/
 extracting: META-INF/MANIFEST.MF    
   creating: burploader/
 extracting: burploader/Burploader.class  
 extracting: burploader/Data.bin 
</code></pre>
<p>There is a class file which can be decompiled, I will use jad, which is installed on kali.</p>
<pre><code class="lang-auto">&gt; jad burploader/Burploader.class
</code></pre>
<p>Here is the important part of the decompiled java code</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/e/e218b483901d3e89d77e52e4f650c3f0ba10ce27.png" width="690" height="235"></p>
<p>Before this part is a base64 encoding of another jarfile contaning the keygen. That is stored in m. The decode function decodes the base64 and writes it to a file called <code>Data.jar</code><br>
This section of code contains powershell commands to download and run this powershell script <code>http://imonty.cn/wp-includes/pomo/script/dcss/js.js</code><br>
(the extension is .js but it is actually powershell)<br>
and to also run the keygen.</p>
<p>Let’s download that code and have a look.<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/e/e739b234a72c804332c79139d27c0fdb236f459c.png" width="690" height="227"></p>
<p>This drops two more files into a newly made c:\ProgramData\WindowsNT directory<br>
The files are:</p>
<ul>
<li>
<code>http://imonty.cn/wp-includes/pomo/script/dcss/co.js</code> saved as <code>WindowsNT.ini</code> and</li>
<li>
<code>http://imonty.cn/wp-includes/pomo/script/dcss/co.vbs</code> saved as <code>WindowsNT.vbs</code>
</li>
</ul>
<p>It then runs the visual basic script (co.vbs), so let’s look at that first</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/4/4b37a9150532ab8464a801fcf513f20ea792e727.png" width="690" height="248"></p>
<p>Here we have obfuscated visual basic code. The easiest method to deobfuscate is to replace the part of the code that executes with something that prints (This may not work in all cases, but it is a very useful technique). Here, clearly, the part that executes the deobfuscated code is the <code>EVAL(ExEcUTE(www))</code>  (circled)</p>
<p>(what this file is actually doing, is to split the long string at every <code>*</code> and then evaluate the expressions in the resulting list, and turning the results of the math expressions into characters. Finally running the resulting string from concatenating those characters)</p>
<p>To print the string instead of executing we can replace the <code>EVAL(ExEcUTE(www))</code>  with <code>wscript.echo www</code> and run it.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/6/600cdfe12d8514435d17e44c05ba101e2ca430ee.png" width="690" height="200"></p>
<p>What this does is run the other downloaded file, co.js (saved as WindowsNT.ini) in powershell.<br>
So let’s look at co.js<br>
This file is large, so I have uploaded it <a href="https://gist.githubusercontent.com/lkw657/f2dfae7f73267c8114de039a60efcb51/raw/e7b622c0385b48a3f727cb9b97fbf2b34966a5d5/co.ps1.gz.b64">here</a><br>
I gziped and b64ed the file to make it upload nicely, you should do <code>cat co.ps1.gzip.b64 | base64 -d | gunzip &gt; co.ps1</code> to read it<br>
I have also renamed co.js to co.ps1 to make the <code>./</code> in powershell work easier.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/5/55150c0af0eede85c6698c6dc82844f95418162f.png" width="690" height="342"></p>
<p><code>iex</code> (alias for invoke-expression) is a function that evaluates powershell code, so we need to replace it with <code>write-output</code> to print it instead, then run the file.</p>
<p>The modified code should look like this</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/f/f4a56c4dc096928c33e5e439c7ef46449cac8d39.png" width="690" height="344"></p>
<p>I was running in a new virtual machine, so I had to allow untrusted powershell scripts to execute.<br>
After running powershell as an administrator:<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/a/a953bb037049e97546dc469680206f9926df023c.png" width="690" height="130"></p>
<pre><code class="lang-auto">PS E:\burp\burploader&gt; ./co.ps1 &gt; co.2.ps1
</code></pre>
<p>I uploaded the resulting file <a href="https://gist.githubusercontent.com/lkw657/aa4cb19b3b7b5ccd55c846a59b3c07bf/raw/572ae9cff6747c45c2880f655139c4aebe0ff266/co.2.ps1.gz.b64">here</a><br>
We have yet another layer of obfusication.</p>
<p>The beginning of this fie looks like this</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/793ebfca37846be873a16c5fb6bacbe7b0c34483.png" width="690" height="342"></p>
<p>This time it calls <code>Invoke-Expression</code> instead of <code>iex</code>, replace it with <code>write-output</code> .</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/0/0f4a5d13eed014334e794d2b67e584ab803b4467.png" width="690" height="343"></p>
<p>Now run it.</p>
<pre><code class="lang-auto">PS E:\burp\burploader&gt; ./co.2.ps1 &gt; co.3.ps1
</code></pre>
<p><a href="https://gist.githubusercontent.com/lkw657/bbbf4df3c2aa92f59cdd856643409d0f/raw/171f282ad627db264f279ca10644cda285acb284/co.3.ps1.gz.b64">File</a></p>
<p>The first thing to notice is that the new file has three sections separated by blank lines. I made the mistake of missing the first section and couldn’t find some needed code later (this was found by <a class="mention" href="https://0x00sec.org/u/leeky">@leeky</a> and <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a>). Instead of trying to deobfusicate the whole file at once (like I did) I learnt that it would have been better to split it 3 smaller files and do them one at a time.</p>
<p><strong>First section:</strong><br>
The <strong>end</strong> of the section looks like this.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/2/231b72f34ddacdaaabf67bb54a513a0ae47583ce.png" width="690" height="343"></p>
<p>We don’t have something that looks as nice as <code>invoke-expression</code> this time, however since the execution will be done last it is most likely that the call will be on one of the ends, the left with the deobfusicated code as an arguement, or the right, with the code piped into the standard input.<br>
In this case the left just consists of a bracket, so let’s check the rightmost statement after a pipe (circled).<br>
<code>.( $PsHOmE[21]+$PShOMe[30]+'X')</code> Interesting. let’s see what <code>$PsHOmE[21]+$PShOMe[30]+'X'</code> evaluates to.</p>
<pre><code class="lang-auto">PS E:\burp\burploader&gt; $PsHOmE[21]+$PShOMe[30]+'X'
ieX
</code></pre>
<p>so we need to replace the <code>.( $PsHOmE[21]+$PShOMe[30]+'X')</code> with <code>write-output</code></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/1/1fcee38e286e4e8ce19d6cdcd3f24bcf7bbc3c7e.png" width="690" height="344"></p>
<p>The result is more obfusicated code.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/6/62388ad1dd2c30fdb4233ecb27d30119d1bd82e4.png" width="690" height="344"></p>
<p>Let’s repeat the same idea. What is <code>.( $eNv:PuBliC[13]+$eNv:pUBLiC[5]+'x')</code> at the beginning</p>
<pre><code class="lang-auto">PS E:\burp\burploader&gt; $eNv:PuBliC[13]+$eNv:pUBLiC[5]+'x'
iex
</code></pre>
<p>so replace it with <code>write-output</code></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/79196fd4a26902a5a7cc525c50553a0e7a301d94.png" width="690" height="342"></p>
<p>After executing there is more obsusication, so do it again on the new file replacing<br>
<code>&amp; ($pShoME[21]+$pShoME[34]+'X')</code> at the end with <code>write-output</code><br>
And again with <code> &amp;( $pShoME[21]+$pSHOMe[30]+'X')</code> at the beginning</p>
<p><strong>Second section:</strong><br>
(starts with [String]::JoIN(’’,( [Char[]]( 127 ,105 )</p>
<p>The <em>end</em> of the second section looks like this</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/5/5635b2b6d50acf0a692ce58b37e561d83bb1714c.png" width="689" height="343"></p>
<p>Replace <code>.((gV '*mDR*').nAme[3,11,2]-joIn'')</code> at the end with <code>write-output</code><br>
It’s still obfusicated. So, look at the end <code>.( $pShoME[4]+$PsHoMe[30]+'X')</code> , replace with <code>write-output</code> and then execute.<br>
And then we need to do this again, replacing <code>&amp;( ([sTrINg]$verbosePREFerencE)[1,3]+'x'-JOIN'')</code> near the beginning with <code>write-output</code><br>
And one last time, replacing <code>. ( $Env:comsPec[4,15,25]-JOiN'')</code> at the end with <code>write-output</code></p>
<p><strong>Third section:</strong><br>
The start of the third section looks like this</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/7afd8246410e455425ab93de21db25f6310b608a.png" width="690" height="340"></p>
<p>Replace <code>.( $PsHome[4]+$PShoME[34]+'X')</code> at the beginning with <code>write-output</code> and execute.<br>
This section now looks pretty readable, particually if we replace the function names.</p>
<p>This is as far as we can get with this method. The function names must be found through manual analysis and unmangling the variable names and content must be done through another method, such as manual or writing a script.</p>
<p>The output of concatenating all this back together is <a href="https://gist.githubusercontent.com/lkw657/becdb839139901fcc907fc39605a890d/raw/70e685f6ec0917aad7a6662132f967577bd72e3e/final1.ps1.b64">here</a><br>
<a href="https://gist.githubusercontent.com/lkw657/4244014b5c091325feb3b40e0a3c786f/raw/3476aa131dcbb7fc244691dd5ed90a4af724b854/final2.ps1.b64">Here</a> is a modification of the code I made without the messy variables and making up names for some of the functions.</p>
<p>Virustotal does not detect the powershell script as a virus <a href="https://www.virustotal.com/#/file/6f38fe65cad067a73888552cdb9817a37329863d8732b4e930938f619ca504fe/detection">here</a></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/4/4ca6b607b6497d7409c65541f2ee516bffbe06c7.png" width="689" height="337"></p>
<p>Some heuristics, however, detect the dropper <a href="https://www.virustotal.com/#/file/1bf764e77a543def4c623e6e207b1b72999f6550cf49651b88d53f80ae10e4d7/detection">here</a></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/2/277249b80c5e1c8aa15a7d47c94673f496890d39.png" width="689" height="338"></p>
<p>The first section just contains variables, however the names and values are very mangled.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/7a62bacf91f3e02cb08bd7541442ab27542e935a.png" width="690" height="342"></p>
<p>From analysing the functions we worked out that the variable <code>$dragon_middle</code> contains domains that the RAT will try to connect to (going through them until it can connect to one). The variables <code>$private</code> and <code>$public</code> contain encryption and decryption keys for data that is transfered by the RAT. <a class="mention" href="https://0x00sec.org/u/leeky">@Leeky</a> pulled these out by looping over the arrays and printing the contents. The results are <a href="https://gist.githubusercontent.com/lkw657/61905786d99565ba8df087f208b4310a/raw/3c3250bd30e68e286d0a06f371719f49583a1b92/variables.txt">here</a></p>
<p><a class="mention" href="https://0x00sec.org/u/cry0l1t3">@Cry0l1t3</a> Went through the domains and highlighted <a href="https://gist.githubusercontent.com/lkw657/db14c27dd42f83ad62ec64de6862249a/raw/3ff41837eeeeda4acf909f64910e4f5ae33a222a/domain">this one</a> for having a different host than all the others.</p>
<p><a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> made a more complete list of variables <a href="https://gist.githubusercontent.com/lkw657/9d81fac2ca10126eceb5119eae92b30e/raw/6791d90b9c4929a9029c8070c04632696ce33d15/variables.txt">here</a> I don’t know enough about windows to say how this was produced. But based on the format I think he used a command to print the environment (correct me if I’m wrong).<br>
While it doesn’t have all the elements in <code>$dragon_middle</code> it contains some other interesting variables such as the serivces it uses to find the victim’s ip <code>https://api.ipify.org/</code> and country <code>http://apinotes.com/ipaddress/ip.php?ip=</code>.</p>
<p>He also made a <a href="https://gist.githubusercontent.com/lkw657/e9c13ddb9cf3955384f3b39f22f97d6d/raw/ae674ac8401597c759e15ee7f79ea78ee520557d/packets.pcap.b64">packet capture</a> of it trying to contact a server.</p>
<p>The second section contains the code for encryption and decryption, and the 3rd section contains the rest of the code.</p>
<p>The RAT uses RSA to communicate to a server. Weirdly, I think the public key and private key have been named the wrong way around.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/a/a61dd874d78afd34eb9a51fd1e98f3b0b8ac259e.png" width="690" height="343"><br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/e/eb81eb6730ee8fe4c6a7d49d82d03bb7fba56fb7.png" width="690" height="181"></p>
<p>The public key and private key have different moduli which indicates they are most likely from different key pairs.<br>
Messages sent to the server are encrypted with the server’s public key (<code>$secret</code> in the code) and decrypted by the server’s private key (stored on the server)<br>
Messages sent to the RAT are encrypted with the RAT’s public key (on the server) and decrypted with the RATs private key (<code>$public</code> in the code)<br>
In theory if this were done properly the message to the server wouldn’t be able to be decrypted (of course the RAT could be modified to just print it). However the keys use small primes and are thus weak.</p>
<p>When the RAT starts, the first thing it tries to do is gain persistence.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/e/ea2da49cf919afa8605832199f33b71acfe5d1c0.png" width="690" height="295"></p>
<p>It does this by adding the location of the vbs file to the registry in the key <code>HKCU:SOFTWARE\Microsoft\Windows\CurrentVersion\Run\DifenderUpdate</code> It then scedules the script at that location to be run on login.<br>
I am not sure what the first part of the persistence function is doing. I think it looks like it is disabling protections in Word’s protected view, but I’m not sure why that would be needed.</p>
<p>Next the rat checks for debuggers by checking the names of running processes against a list of debuggers and other tools. If one is found it shuts down the computer</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/0/0bb2e06c08ed69b3304ff444ffb1c6dbc0e9c98b.png" width="690" height="118"></p>
<p>It then tries to connect to one of the servers listed in <code>$dragon_middle</code>. Whenever the code errors in future it will also do this again (presumably because it thinks that server may be down or blocked)</p>
<p>Next it tries to register with the server before accepting and handling commands</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/9/98a2fb41522a3cfb800a2bbdf01fdec3eef33ae8.png" width="690" height="161"><br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/c/ce20d97d5d6f22c98935c37f17d196d8459963e7.png" width="690" height="343"><br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/6/60bed19a4cc5dc67d039ad92c34e31e692ec1863.png" width="689" height="189"></p>
<p>The following commands are accepted</p>
<ul>
<li>reboot<br>
reboots the computer</li>
<li>shutdown<br>
shuts down the computer</li>
<li>clean<br>
tries to wipe as much as possible from C:, D:, E:\ and F:\ before rebooting</li>
<li>screenshot<br>
takes a screenshot and sends it to the server</li>
<li>upload<br>
transfers a file from the server to the victim</li>
</ul>
<p>If the command is not one of those it tries to execute it in powershell</p>
<p>I ran the keygen with the default execution policy (remember when I had to change it) and checked for the c:\ProgramData\WindowsNT directory to see if the RAT managed to run. The directory was not created so it seems it’s possible that it could be blocked by windows.</p>
<p>##<span class="hashtag">#Adendum:</span><br>
I mentioned that the crypto is weak, this is how you break it.<br>
I’m not going to cover the basics of how RSA works here, but there is an 0x00sec tutorial <a href="https://0x00sec.org/t/encryption-101-rsa-001-the-maths-behind-it/1921">here</a> and <a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)">wikipedia</a> has a lot of good info</p>
<p>In RSA two primes <code>p</code> and <code>q</code> are used to calculate <code>n = p*q</code> the primes used should be kept secret. They are also used to calculate <code>λ(n) = λ(p*q) = lcm(p-1, q-1)</code>. The public exponent <code>e</code> and the private exponent <code>d</code> are related to each other by the following equation <code>d == e^(-1) (mod λ(n))</code>.</p>
<p>In the case of the RAT <code>n</code> is small (as the result of using small primes) so it can easily be factored into <code>p</code> and  <code>q</code>. They can then be used to calculate <code>λ(n)</code> and then the last equation can be used to calculate <code>d</code> from <code>e</code>.</p>
<p>Using sage math</p>
<pre><code class="lang-auto"># from $private variable in rat
e = 959
n = 713

# factor n
# list(factor(n)) returns prime factors as a list of tuples of (factor, amount)
# we just want the factors
p, q = [a[0] for a in list(factor(n))]

# calculate λ(n) 
l = lcm(p-1, q-1)

# calculate d
print('d = {}'.format(inverse_mod(e, l)))
</code></pre>
<p>gives <code>d = 149</code></p>
<p>With the server’s private key we can write a script to decrypt messages sent to the server. If we use the same process to get the RAT’s public key we could MiTM the traffic between the RAT and the server.</p>
<p>Here is a decryption script in python</p>
<pre><code class="lang-auto">def decrypt(ciphertext):
    key = 149
    n = 713
    decrypted = []
    for i in range(0, len(ciphertext)):
        num = int(ciphertext[i])
        t = pow(num, key, n)
        decrypted.append(chr(t))
    return ''.join(decrypted)

nums = input().split()
print(decrypt([int(i) for i in nums]))
</code></pre>
<p>In <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a>’s pcap the following is sent to the server</p>
<pre><code class="lang-auto">340 362 396 383 105 598 219 362 581 362 518 73 35 73 504 220 515 665 504 515 515 35 515 518 133 335 316 665 515 665 220 665 316 181 665 335 515 38 335 335 335 316 362 663 362 145 180 396 637 383 219 362 581 362 180 383 432 432 145 219 367 362 590
</code></pre>
<p>Running that through the script gives the decryption as</p>
<pre><code class="lang-auto">{"TOKEN":"70e0a413a11e17db9313439c3b1fbbb9","ACTION":"COMMAND"}
</code></pre>
          <p><a href="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167/1</link>
        <pubDate>Tue, 30 Jan 2018 00:58:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5167-1</guid>
        <source url="https://0x00sec.org/t/malware-reversing-burpsuite-keygen/5167.rss">Malware Reversing - Burpsuite Keygen</source>
      </item>
  </channel>
</rss>
