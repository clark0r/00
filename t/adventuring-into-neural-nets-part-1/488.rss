<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Adventuring into Neural Nets (Part 1)</title>
    <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488</link>
    <description>Hello! Random-man reporting. So this is gonna be a quick write up on some basic neural network stuff, and I&#39;ll probably divide it in 2 parts. First off, let me say that I&#39;m not a professional computer scientist or mathematician. I want to head down that route when I get to the point in life, but for now, I&#39;m just an amateur. Just a disclaimer ;) . I&#39;m learning this as I write on it. 

## What is a Neural Network?
A neural network is sort a man-made &quot;emulation&quot; of a real neural network, that is a subset of an actual brain. Now, if you asked ME whether or not a complex neural network would produce a real &quot;intelligence&quot;, that is, a being with true consciousness, I&#39;d probably say no, at least for now. However, they could definitely be used to produce something along the same level as a plant or simple minded animal :D. That&#39;s very useful. 

So as we all know in life, not ALL problems are easy to solve with a computer. At least, the way to programmatically solve them isn&#39;t always obvious. If we have a set of numbers, we know that sorting them is definitely a task for a computer, and there are many ways to do this. Of course this is obvious to all who have read some of @oaktree&#39;s great stuff on sorting, and taken a look at Bogo sort, perhaps one of mankinds most beautiful creations. But ask a computer whether or not this is a picture of a dog.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/c83b9db01dffe3f5bc35443bccbace590b8b9d3d.jpg&quot; width=&quot;227&quot; height=&quot;222&quot;&gt;

Is there an obvious solution? Probably not. This is where neural networks come to use in our endeavors. The idea of a neural network is that we setup a system that will take some input. It will most likely produce an arbitrary outcome based on it&#39;s initial conditions. Then the output is judged on a criteria of being our desired outcome. Based on this, the system will shift its conditions based on our feedback. So a classical computational problem may be something like...

Programmer: Hey, if I ask you for the arithmetic mean of a set of numbers, I want you the return the ratio of the sum of    all  the elements to the total cardinality, or number of elements in the set. Got it?
Computer: Yeah seems legit.

But let us now consider a different style of problem.

Programmer: Hey, I have a situtation that you can never truly understand because you are only a computer, but I need you to produce a correct outcome based on such  a situation. Since you can&#39;t &quot;really&quot; understand the situation, I&#39;m gonna give you some input, you can first give me some random output, and I&#39;ll tell you how correct you are based on that. That way, you&#39;ll start to get a feel for what kinds of results come from different kinds of inputs.
Computer: .....

So that&#39;s a real simplified set of ideas to digest. Let&#39;s take a look at a bit of theory to understand the structure of a simple neural network setup. With a neural network, we have three fundamental parts. We have the inputs, then we have a &quot;black box&quot; or &quot;hidden layer&quot; in the middle, where the input is processed, and then we have the output. This may as well describe any program though huh? Neural networks are special though.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/e81c5d4b77b5c0556ece0e83d4a7c1cf685c528b.jpeg&quot; width=&quot;511&quot; height=&quot;350&quot;&gt;




Now let&#39;s briefly look at an EXTREMELY simple neural net, one that produces a very basic outcome.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/4c5a6cde2861d9a4c59e1e794b3ff0fa99d0f1bf.png&quot; width=&quot;690&quot; height=&quot;400&quot;&gt;

As you can see, we have three inputs, which are all connected to the one neuron in the middle layer. But notice how each input connection has a &quot;weight&quot; to it. The end outcome, y, is simply the sum of the product of the input values and their weights, well, actually, it&#39;s probably a normalized result from an Activation function, but we&#39;ll get there. Let&#39;s write up a quick function for the simplest kind of neural network. One dubbed the &quot;perceptron&quot;. Let&#39;s take a quick look first.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/0b17bc8db5a8d4496ae6c92ef435c658e56813e6.png&quot; width=&quot;690&quot; height=&quot;110&quot;&gt;

So, let&#39;s take this progressively. The inputs are gonna be real numbers. Each is muliplied by it&#39;s weight, then they are summed for the final outcome in the end layer. So, we can describe any outcome for a given set with this function, expressed in symbolic and code form. Where I stands for input and w is the weight for that input.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/f60151d15ba1ece227abb036e6db45ee316e375c.gif&quot; width=&quot;59&quot; height=&quot;54&quot;&gt;

```
def perceptron(_in1, _in2, _w1, _w2):
    return _in1*_w1+_in2*_w2
```

Now, let&#39;s briefly generalize this situation and simplify for N inputs :). 

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/c2f3a794f4b9513d75447e43ff9bc2be61a0edcd.gif&quot; width=&quot;59&quot; height=&quot;54&quot;&gt;

```
def gen_perceptron(_in,_w):
    ret = 0
    for i in range(len(_in)):
        ret = ret + _in[i]*_w[i]
    return ret/abs(ret)
```

That way, we get either +/-1 as an answer. Now, taking this last binary value is called our &quot;Activation function&quot;. In this case, we have simplified it. In many other applications, though, the
activation function takes other forms. In this article, we are gonna do something a little different and talk about the sigmoid activation function...

Now, since we are just starting out in neural networks, we are not gonna tackle a true A.I. problem yet, for now, let&#39;s tackle something simple and logical. We will use the techniques of neural networks, though. Now, since we have a basic understanding of some of these concepts, let&#39;s try and build a neural network and train it for a simple problem I will describe soon. This is definitely not a problem that needs a neural net to solve, but let&#39;s tackle it to practice our skills and get a better understanding of things :smiley:.  Sometimes, instead of trying to understand the theory and dwelve deeply, we may first want to take what we know, roll with it, and DO something with it. In future articles, I&#39;ll definitely go into more thorough and detailed explanations of things. For now, we may just want to get used to some of the ideas of a neural network, and practice a little application of one, just to get our feet a little wet.

Now, in trying to make a neural network for our problem, we shall look at a new Activation function. That is, a sigmoid function. It takes the mathematical form of...

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/cbba084a1b15112a459e7f9c9678b6ce22ddfc7a.png&quot; width=&quot;485&quot; height=&quot;323&quot;&gt;&lt;br&gt;
Why would we use a function like this? Well, I couldn&#39;t tell you all of the reasons as I&#39;m still learning this too, but I can tell you that sigmoid functions are great for squashing values. This function will take any x as input as toss it somewhere between 0 and 1. If you are unfamiliar with the &quot;e&quot;, that is Eulers number. It is a very special number, like pi, and trying to explain the significance of it here will bring us to quite a tangent. e is a transcendental number, it could never be a solution of a polynomial with rational coefficients, and it is widely known as a common exponential and logarithmic base. If you are not familiar with all of the mathematical terms, don&#39;t worry, we will look at them as we encounter them more in the future. To solve the problem I will describe briefly, we are going to first train the neural network! We shall first randomly set its initial conditions, then we will give it input, let it guess, then give it output on whether or not it was correct. Based on this, it will adjust its weights to better optimize for the situation! This is gonna be an example of what is called &quot;Back Propagation&quot;. Now, let&#39;s look at a goal or problem.... We want to train the neural net to emulate the following truth table logic...
---
Input    Input    Input    Output
0        0        1        0
1        1        1        1
1        0        1        1
0        1        1        0
----
What&#39;s the secret sauce? It just takes the value in the left most column. So, we know we&#39;re gonna need 3 inputs. They are gonna be weighted as well. Our gameplan is to take these three inputs, multiply each by their weights, pass the sum of those through the sigmoid function, evaluate the error, and adjust the weighted values. Now notice that since all our input values are either zero or one, the results that are being passed to the sigmoid are really just gonna be the sums of a subset of the weights. Let&#39;s take a look at some of the mathematical operations we will partake in with respect to this particular problem.

1. To get the value we will push through the sigmoid function:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/ee9f0f8508dd5754e4d2478f6b8bc15b19b9e36a.gif&quot; width=&quot;59&quot; height=&quot;54&quot;&gt;   


Simple enough, we take the sum of the products of the weights and inputs. 

2. Sigmoid function to &quot;normalize&quot; the outputs of neuron:
(note- what I mean by normalization is that we are bringing the outputs to be between 0 and 1)

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/022e42dc2503f707e5c71de6cbb71b60f35ebbc9.gif&quot; width=&quot;58&quot; height=&quot;38&quot;&gt;

For the next formula, I&#39;m just gonna refer to the Sigmoid function as S(x) for simplicity :P

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/ed7d5c0c5b8c66f643af6272ff28c0ebfc75948a.gif&quot; width=&quot;61&quot; height=&quot;18&quot;&gt;

Now, the S&#39;(O) is the derivative of the sigmoid function taking the neural network output as an input. I will not go into the Calculus of the derivative, but I will briefly try to give an intution incase you are not familiar with the concept of a derivative. Consider a linear function, that is a line, like y = mx + b. Notice that the slope of the line remains the same at any point along the line. However, in a non-linear function, or a curve, the slope changes as we move along the function. So, the derivative is an algebraic formula we can use to find the slope on the curve at that particular part of the curve. 

You might be asking, why the hell are we multiplying by that?!!? Well just chill out and put down the bat. I can explain. So take another look at the curve of the sigmoid function. Notice that the closer y-value is to either 0 or 1, the smaller the derivative, or slope at that point is. Makes sense, because if the value is really close to the right answer, which in this case is either 0 or 1, we don&#39;t want to adjust the weight as much. We&#39;re just using some of the mathematical forces of nature and of this function here to our advantage is all. The e-value, in this formula, is not Eulers number! In this formula, it is an error value, the difference between the result and the desired output. 

Why multiply by the error value? Because we want to make our change to the weights proportional to the error, or how badly the neural net screwed up on that particular try. Now we also multiply by the Input value, which in this situation, is either a 1 or a 0. Why? I&#39;m gonna be completely honest with you, I am not completely sure why. However, when/if I find that out, I will definitely try to explain it in part 2 of this. 

So, the main idea is that we are gonna adjust the weights with a value that is proportional to the error. Which makes sense since we&#39;re trying to optimize this baby little by little...

(note- In part 2, or in a future part, I will attempt to better explain the back propagation algorithm :) )

Whats left after this? Well, we gotta write this thing, and train it a bunch of times! I&#39;m gonna wrap this post up so the two parts are in more digestible smaller chunks. I&#39;m gonna start on it tonight, but I don&#39;t know if it will be posted by tomorrow. Hopefully soon. I hope you had a fun or at least an interesting time reading this, and  I am excited to continue on this topic!

(Note: For the first part of this, I didn&#39;t want to be too mathematically rigorous. It was more meant to get you used to some of the aspects of neural networks. For part 2, I plan on discussing how we will actually train this thing. Then, in future parts, I&#39;ll probably start off from the basics again, but with more rigorous explanations. I hope I haven&#39;t made any errors writing this late at night :P, and if I did, please feel free to point them out. Thanks for reading.)</description>
    
    <lastBuildDate>Fri, 04 Aug 2017 19:02:13 +0000</lastBuildDate>
    <category>Artificial Intelligence</category>
    <atom:link href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/16">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/16</link>
        <pubDate>Sun, 21 Jan 2018 00:36:12 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-16</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[FFY00]]></dc:creator>
        <description><![CDATA[
            <p>I’m not an expert in Deep Learning or Neural Networks but from my experience, using ReLU as an activation, instead of sigmoid, results in more acurate results. The more non-linear the function is the mode descriminative the model is.</p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/15</link>
        <pubDate>Fri, 04 Aug 2017 19:02:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-15</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Lucky you!</p>
<p>Guess we will see some cool AI stuff coming soon!</p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/14</link>
        <pubDate>Thu, 26 May 2016 22:00:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-14</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[random-man]]></dc:creator>
        <description><![CDATA[
            <p>Man I just got into summer break so time is pretty plentiful luckily <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/13</link>
        <pubDate>Thu, 26 May 2016 21:54:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-13</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Yes. Now everything is using convolutional networks</p>
<aside class="onebox wikipedia">
  <header class="source">
      <a href="https://en.wikipedia.org/wiki/Convolutional_neural_network" target="_blank" rel="noopener nofollow ugc">en.wikipedia.org</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:220/128;"><img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a57a7162f3246d086df4c2f2263bf8dedc29f3b6.jpeg" class="thumbnail" width="220" height="128"></div>

<h3><a href="https://en.wikipedia.org/wiki/Convolutional_neural_network" target="_blank" rel="noopener nofollow ugc">Convolutional neural network</a></h3>

<p>In deep learning, a convolutional neural network (CNN, or ConvNet) is a class of deep neural networks, most commonly applied to analyzing visual imagery. They are also known as shift invariant or space invariant artificial neural networks (SIANN), based on their shared-weights architecture and translation invariance characteristics. They have applications in image and video recognition, recommender systems, image classification, medical image analysis, natural language processing,  CNNs are regul...</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>Take a look to caffe project (<a href="http://caffe.berkeleyvision.org/" rel="noopener nofollow ugc">http://caffe.berkeleyvision.org/</a>). Google released tensorflow recently (<a href="https://www.tensorflow.org/" rel="noopener nofollow ugc">https://www.tensorflow.org/</a>)… there is quite some material to work with… if you have the time!</p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/12</link>
        <pubDate>Thu, 26 May 2016 21:50:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-12</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[random-man]]></dc:creator>
        <description><![CDATA[
            <p>Ah I see. Yeah like the one neural network doing all the image manipulation stuff. I think its Googles.</p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/11</link>
        <pubDate>Thu, 26 May 2016 21:47:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-11</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>That’s good. In a sense SVMs have substitute MLPs in many fields…</p>
<p>Do not spend much time with the Hopfield networks. They are nice because of its simplicity (structural and training-wise), so they make a nice case for an introduction to the topic. Their main problem is the limited <em>capacity</em> that prevents its use in real applications. I like them, because they behave as an associate memory, and they were the first one I implemented!</p>
<p>I haven’t follow the topic for a while but I do not thing there has been any further research on them. Now that the computers are more powerful, all the recurrent networks that couldn’t be used many years ago, are coming to live (including the convolutional ones that all of us have seen recently)</p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/10</link>
        <pubDate>Thu, 26 May 2016 18:47:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-10</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[random-man]]></dc:creator>
        <description><![CDATA[
            <p>Thank you! I the section change too. I like this new section <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/9</link>
        <pubDate>Thu, 26 May 2016 18:14:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-9</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[random-man]]></dc:creator>
        <description><![CDATA[
            <p>Thanks! I like that idea.</p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/8</link>
        <pubDate>Thu, 26 May 2016 18:12:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-8</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[random-man]]></dc:creator>
        <description><![CDATA[
            <p>And yeah, I guess deep learning is a goal of mine, but the Artificial Intelligence section would benefit from any machine  learning algorithms I’d say :). Including the Hopfield networks. I’ll definitely have to familiarize myself with them.</p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/7</link>
        <pubDate>Thu, 26 May 2016 18:11:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-7</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[random-man]]></dc:creator>
        <description><![CDATA[
            <p>Thanks <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a> ! and yes, I will look into SVMs! I never heard of hopfield networks, but I will check them out also!</p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/6</link>
        <pubDate>Thu, 26 May 2016 18:04:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-6</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Love it!</p>
<p>As you asked for comments.</p>
<ul>
<li>Regarding the training, I would say you are talking about supervised learning. This is indeed how perceptrons are trained, but there are other networks that can be trained un-sepervised (<a href="https://en.wikipedia.org/wiki/Self-organizing_map" rel="nofollow noopener">Kohonen Networks for instance</a>).</li>
<li>It might be worth mention that you may have multiple hidden layers and that the layers does not need to be fully connected</li>
<li>For the second part… would you mention SVM?..</li>
</ul>
<p>Hope the comments would be useful and please keep going. This is a really interesting topic</p>
<p>P.S.: You may mention the Hopfield networks, the training method is a lot simpler ;)… but I guess you are aiming towards deep learning, so that may not be very useful <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/5</link>
        <pubDate>Thu, 26 May 2016 17:35:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-5</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Nice. I think we should move this to a new category, though: <a href="https://0x00sec.org/c/How-to/artificial-intelligence">How-To -&gt; Artificial Intelligence</a>.</p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/4</link>
        <pubDate>Thu, 26 May 2016 12:56:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-4</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Sweeeeeeet article <a class="mention" href="https://0x00sec.org/u/random-man">@random-man</a>! Really good job! I had no idea where to start with Neural networks, this is really cool!</p>
<p>Nice share <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/3</link>
        <pubDate>Thu, 26 May 2016 10:10:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-3</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[random-man]]></dc:creator>
        <description><![CDATA[
            <p>Some formatting issues. Sorry…</p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/2</link>
        <pubDate>Thu, 26 May 2016 05:33:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-2</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
      <item>
        <title>Adventuring into Neural Nets (Part 1)</title>
        <dc:creator><![CDATA[random-man]]></dc:creator>
        <description><![CDATA[
            <p>Hello! Random-man reporting. So this is gonna be a quick write up on some basic neural network stuff, and I’ll probably divide it in 2 parts. First off, let me say that I’m not a professional computer scientist or mathematician. I want to head down that route when I get to the point in life, but for now, I’m just an amateur. Just a disclaimer <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"> . I’m learning this as I write on it.</p>
<h2>What is a Neural Network?</h2>
<p>A neural network is sort a man-made “emulation” of a real neural network, that is a subset of an actual brain. Now, if you asked ME whether or not a complex neural network would produce a real “intelligence”, that is, a being with true consciousness, I’d probably say no, at least for now. However, they could definitely be used to produce something along the same level as a plant or simple minded animal :D. That’s very useful.</p>
<p>So as we all know in life, not ALL problems are easy to solve with a computer. At least, the way to programmatically solve them isn’t always obvious. If we have a set of numbers, we know that sorting them is definitely a task for a computer, and there are many ways to do this. Of course this is obvious to all who have read some of <a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a>’s great stuff on sorting, and taken a look at Bogo sort, perhaps one of mankinds most beautiful creations. But ask a computer whether or not this is a picture of a dog.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/c83b9db01dffe3f5bc35443bccbace590b8b9d3d.jpg" width="227" height="222"></p>
<p>Is there an obvious solution? Probably not. This is where neural networks come to use in our endeavors. The idea of a neural network is that we setup a system that will take some input. It will most likely produce an arbitrary outcome based on it’s initial conditions. Then the output is judged on a criteria of being our desired outcome. Based on this, the system will shift its conditions based on our feedback. So a classical computational problem may be something like…</p>
<p>Programmer: Hey, if I ask you for the arithmetic mean of a set of numbers, I want you the return the ratio of the sum of    all  the elements to the total cardinality, or number of elements in the set. Got it?<br>
Computer: Yeah seems legit.</p>
<p>But let us now consider a different style of problem.</p>
<p>Programmer: Hey, I have a situtation that you can never truly understand because you are only a computer, but I need you to produce a correct outcome based on such  a situation. Since you can’t “really” understand the situation, I’m gonna give you some input, you can first give me some random output, and I’ll tell you how correct you are based on that. That way, you’ll start to get a feel for what kinds of results come from different kinds of inputs.<br>
Computer: …</p>
<p>So that’s a real simplified set of ideas to digest. Let’s take a look at a bit of theory to understand the structure of a simple neural network setup. With a neural network, we have three fundamental parts. We have the inputs, then we have a “black box” or “hidden layer” in the middle, where the input is processed, and then we have the output. This may as well describe any program though huh? Neural networks are special though.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/e81c5d4b77b5c0556ece0e83d4a7c1cf685c528b.jpeg" width="511" height="350"></p>
<p>Now let’s briefly look at an EXTREMELY simple neural net, one that produces a very basic outcome.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/4c5a6cde2861d9a4c59e1e794b3ff0fa99d0f1bf.png" width="690" height="400"></p>
<p>As you can see, we have three inputs, which are all connected to the one neuron in the middle layer. But notice how each input connection has a “weight” to it. The end outcome, y, is simply the sum of the product of the input values and their weights, well, actually, it’s probably a normalized result from an Activation function, but we’ll get there. Let’s write up a quick function for the simplest kind of neural network. One dubbed the “perceptron”. Let’s take a quick look first.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/0b17bc8db5a8d4496ae6c92ef435c658e56813e6.png" width="690" height="110"></p>
<p>So, let’s take this progressively. The inputs are gonna be real numbers. Each is muliplied by it’s weight, then they are summed for the final outcome in the end layer. So, we can describe any outcome for a given set with this function, expressed in symbolic and code form. Where I stands for input and w is the weight for that input.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/f60151d15ba1ece227abb036e6db45ee316e375c.gif" width="59" height="54"></p>
<pre><code class="lang-auto">def perceptron(_in1, _in2, _w1, _w2):
    return _in1*_w1+_in2*_w2
</code></pre>
<p>Now, let’s briefly generalize this situation and simplify for N inputs :).</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/c2f3a794f4b9513d75447e43ff9bc2be61a0edcd.gif" width="59" height="54"></p>
<pre><code class="lang-auto">def gen_perceptron(_in,_w):
    ret = 0
    for i in range(len(_in)):
        ret = ret + _in[i]*_w[i]
    return ret/abs(ret)
</code></pre>
<p>That way, we get either +/-1 as an answer. Now, taking this last binary value is called our “Activation function”. In this case, we have simplified it. In many other applications, though, the<br>
activation function takes other forms. In this article, we are gonna do something a little different and talk about the sigmoid activation function…</p>
<p>Now, since we are just starting out in neural networks, we are not gonna tackle a true A.I. problem yet, for now, let’s tackle something simple and logical. We will use the techniques of neural networks, though. Now, since we have a basic understanding of some of these concepts, let’s try and build a neural network and train it for a simple problem I will describe soon. This is definitely not a problem that needs a neural net to solve, but let’s tackle it to practice our skills and get a better understanding of things <img src="/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:">.  Sometimes, instead of trying to understand the theory and dwelve deeply, we may first want to take what we know, roll with it, and DO something with it. In future articles, I’ll definitely go into more thorough and detailed explanations of things. For now, we may just want to get used to some of the ideas of a neural network, and practice a little application of one, just to get our feet a little wet.</p>
<p>Now, in trying to make a neural network for our problem, we shall look at a new Activation function. That is, a sigmoid function. It takes the mathematical form of…</p>
<h2>
<img src="//0x00sec.s3.amazonaws.com/original/1X/cbba084a1b15112a459e7f9c9678b6ce22ddfc7a.png" width="485" height="323"><br><br>
Why would we use a function like this? Well, I couldn’t tell you all of the reasons as I’m still learning this too, but I can tell you that sigmoid functions are great for squashing values. This function will take any x as input as toss it somewhere between 0 and 1. If you are unfamiliar with the “e”, that is Eulers number. It is a very special number, like pi, and trying to explain the significance of it here will bring us to quite a tangent. e is a transcendental number, it could never be a solution of a polynomial with rational coefficients, and it is widely known as a common exponential and logarithmic base. If you are not familiar with all of the mathematical terms, don’t worry, we will look at them as we encounter them more in the future. To solve the problem I will describe briefly, we are going to first train the neural network! We shall first randomly set its initial conditions, then we will give it input, let it guess, then give it output on whether or not it was correct. Based on this, it will adjust its weights to better optimize for the situation! This is gonna be an example of what is called “Back Propagation”. Now, let’s look at a goal or problem… We want to train the neural net to emulate the following truth table logic…</h2>
<h2>Input    Input    Input    Output<br>
0        0        1        0<br>
1        1        1        1<br>
1        0        1        1<br>
0        1        1        0</h2>
<p>What’s the secret sauce? It just takes the value in the left most column. So, we know we’re gonna need 3 inputs. They are gonna be weighted as well. Our gameplan is to take these three inputs, multiply each by their weights, pass the sum of those through the sigmoid function, evaluate the error, and adjust the weighted values. Now notice that since all our input values are either zero or one, the results that are being passed to the sigmoid are really just gonna be the sums of a subset of the weights. Let’s take a look at some of the mathematical operations we will partake in with respect to this particular problem.</p>
<ol>
<li>To get the value we will push through the sigmoid function:</li>
</ol>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/ee9f0f8508dd5754e4d2478f6b8bc15b19b9e36a.gif" width="59" height="54">   </p>
<p>Simple enough, we take the sum of the products of the weights and inputs.</p>
<ol start="2">
<li>Sigmoid function to “normalize” the outputs of neuron:<br>
(note- what I mean by normalization is that we are bringing the outputs to be between 0 and 1)</li>
</ol>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/022e42dc2503f707e5c71de6cbb71b60f35ebbc9.gif" width="58" height="38"></p>
<p>For the next formula, I’m just gonna refer to the Sigmoid function as S(x) for simplicity <img src="/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/ed7d5c0c5b8c66f643af6272ff28c0ebfc75948a.gif" width="61" height="18"></p>
<p>Now, the S’(O) is the derivative of the sigmoid function taking the neural network output as an input. I will not go into the Calculus of the derivative, but I will briefly try to give an intution incase you are not familiar with the concept of a derivative. Consider a linear function, that is a line, like y = mx + b. Notice that the slope of the line remains the same at any point along the line. However, in a non-linear function, or a curve, the slope changes as we move along the function. So, the derivative is an algebraic formula we can use to find the slope on the curve at that particular part of the curve.</p>
<p>You might be asking, why the hell are we multiplying by that?!!? Well just chill out and put down the bat. I can explain. So take another look at the curve of the sigmoid function. Notice that the closer y-value is to either 0 or 1, the smaller the derivative, or slope at that point is. Makes sense, because if the value is really close to the right answer, which in this case is either 0 or 1, we don’t want to adjust the weight as much. We’re just using some of the mathematical forces of nature and of this function here to our advantage is all. The e-value, in this formula, is not Eulers number! In this formula, it is an error value, the difference between the result and the desired output.</p>
<p>Why multiply by the error value? Because we want to make our change to the weights proportional to the error, or how badly the neural net screwed up on that particular try. Now we also multiply by the Input value, which in this situation, is either a 1 or a 0. Why? I’m gonna be completely honest with you, I am not completely sure why. However, when/if I find that out, I will definitely try to explain it in part 2 of this.</p>
<p>So, the main idea is that we are gonna adjust the weights with a value that is proportional to the error. Which makes sense since we’re trying to optimize this baby little by little…</p>
<p>(note- In part 2, or in a future part, I will attempt to better explain the back propagation algorithm <img src="/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> )</p>
<p>Whats left after this? Well, we gotta write this thing, and train it a bunch of times! I’m gonna wrap this post up so the two parts are in more digestible smaller chunks. I’m gonna start on it tonight, but I don’t know if it will be posted by tomorrow. Hopefully soon. I hope you had a fun or at least an interesting time reading this, and  I am excited to continue on this topic!</p>
<p>(Note: For the first part of this, I didn’t want to be too mathematically rigorous. It was more meant to get you used to some of the aspects of neural networks. For part 2, I plan on discussing how we will actually train this thing. Then, in future parts, I’ll probably start off from the basics again, but with more rigorous explanations. I hope I haven’t made any errors writing this late at night :P, and if I did, please feel free to point them out. Thanks for reading.)</p>
          <p><a href="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488/1</link>
        <pubDate>Thu, 26 May 2016 05:32:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-488-1</guid>
        <source url="https://0x00sec.org/t/adventuring-into-neural-nets-part-1/488.rss">Adventuring into Neural Nets (Part 1)</source>
      </item>
  </channel>
</rss>
