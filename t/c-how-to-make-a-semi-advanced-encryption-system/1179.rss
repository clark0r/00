<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C#] How To Make A Semi-Advanced Encryption System</title>
    <link>https://0x00sec.org/t/c-how-to-make-a-semi-advanced-encryption-system/1179</link>
    <description>Hi all im back and today ill show you how to make a basic Encryption key for a basic cipher that i mad a while back.

we will be using these dll&#39;s. we don&#39;t need any but Exception`s are helpful.
```C#
using System; // not needed 
```

For making the Encryption key we will need 2 things a list of letters and symbols to use
```C#
private char[] alphabet = new char[]
        {
            &#39;q&#39;,&#39;w&#39;,&#39;e&#39;,&#39;r&#39;,&#39;t&#39;,&#39;z&#39;,&#39;u&#39;,&#39;i&#39;,&#39;o&#39;,&#39;p&#39;,&#39;a&#39;,&#39;s&#39;,&#39;d&#39;,&#39;f&#39;,&#39;g&#39;,
            &#39;h&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;y&#39;,&#39;x&#39;,&#39;c&#39;,&#39;v&#39;,&#39;b&#39;,&#39;n&#39;,&#39;m&#39;,&#39;Q&#39;,&#39;W&#39;,&#39;E&#39;,&#39;R&#39;,
            &#39;T&#39;,&#39;Z&#39;,&#39;U&#39;,&#39;I&#39;,&#39;O&#39;,&#39;P&#39;,&#39;A&#39;,&#39;S&#39;,&#39;D&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;J&#39;,&#39;K&#39;,&#39;L&#39;,
            &#39;Y&#39;,&#39;X&#39;,&#39;C&#39;,&#39;V&#39;,&#39;B&#39;,&#39;N&#39;,&#39;M&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,
            &#39;9&#39;,&#39;!&#39;,&#39;&quot;&#39;,&#39;§&#39;,&#39;$&#39;,&#39;%&#39;,&#39;&amp;&#39;,&#39;/&#39;,&#39;(&#39;,&#39;)&#39;,&#39;=&#39;,&#39;?&#39;,&#39;ß&#39;,&#39;´&#39;,&#39;`&#39;,
            &#39;²&#39;,&#39;³&#39;,&#39;{&#39;,&#39;[&#39;,&#39;]&#39;,&#39;}&#39;,&#39;^&#39;,&#39;°&#39;,&#39;&lt;&#39;,&#39;&gt;&#39;,&#39;|&#39;,&#39;µ&#39;,&#39;,&#39;,&#39;;&#39;,&#39;.&#39;,
            &#39;:&#39;,&#39;-&#39;,&#39;_&#39;,&#39;ö&#39;,&#39;ä&#39;,&#39;ü&#39;,&#39;Ö&#39;,&#39;Ä&#39;,&#39;Ü&#39;,&#39;+&#39;,&#39;*&#39;,&#39;~&#39;,&#39;#&#39;,&#39;€&#39;,&#39; &#39;,
            &#39;0&#39;
        };// all keys on qwertz (german) keyboard
```
And a thew helpful methods (functions).
```C#
private int GET_LETTER_NUM(char letter,char[] alphabet)
        {
            for (int x = 0; x &lt; alphabet.Length; x++)
            {
                if (letter == alphabet[x]) { return x; }
            }
            throw new Exception(&quot;unknown letter/symbol: &quot; + letter + ToString());
        }//gets the position in alphabet for that letter

        private int SpecialFormulaONE(int DividingNumber, int number)
        {
            int length = number;
            while (number &gt; -100000)
            {
                if (number &gt; DividingNumber)
                {
                    number = number - DividingNumber;
                }
                else
                {
                    if (number == DividingNumber)
                    {
                        number--;
                    }
                    return number;
                }
            }
            throw new Exception(&quot;SpecialFormulaONE failure&quot;);
        }//i made this to replace % (get dividing remainder)
```

now for making the actual Encryption key
```C#
public string[] GET_KEY(string key, char[] alphabet)//key is the password input
        {
            if (key.Length &lt; 16)
            {
                throw new Exception(&quot;too small a key&quot;);
            }
            char[] input = key.ToCharArray();
            int length = input.Length;
            char first_letter = input[0];
            char last_letter = input[length - 1];
            string[] END = new string[alphabet.Length];


            //start of encryption process
            {
                //1 E_KEY cell per Letter in Alphabet
                for (int x = 0; x &lt; alphabet.Length; x++)//1 E_KEY cell = 4 alphabet letter
                {
                    string cell = &quot;&quot;;
                    for (int y = 0; y &lt; 4; y++)
                    {

                        int end = 0;
                        for (int z = 0; z &lt; length; z++)
                        {
                            int offset = (x * y * z) + length;
                            end += GET_LETTER_NUM(input[z],alphabet) + offset;
                        }
                        cell += alphabet[SpecialFormulaONE(alphabet.Length, end)].ToString();

                    }
                    END[x] = cell;
                }
            }

            return END;
        }//creates a key
```</description>
    
    <lastBuildDate>Sun, 30 Apr 2017 16:16:28 +0000</lastBuildDate>
    <category>Cryptology</category>
    <atom:link href="https://0x00sec.org/t/c-how-to-make-a-semi-advanced-encryption-system/1179.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C#] How To Make A Semi-Advanced Encryption System</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="SmartOne" data-post="3" data-topic="1179">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/smartone/40/187_2.png" class="avatar"> SmartOne:</div>
<blockquote>
<p>Before trying to answer your question, I would like you to read oaktree’s post adherency guidelines and the Markdown Cheatsheet.</p>
</blockquote>
</aside>
<p>What a blast from the past!</p>
          <p><a href="https://0x00sec.org/t/c-how-to-make-a-semi-advanced-encryption-system/1179/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-how-to-make-a-semi-advanced-encryption-system/1179/4</link>
        <pubDate>Sun, 30 Apr 2017 16:16:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1179-4</guid>
        <source url="https://0x00sec.org/t/c-how-to-make-a-semi-advanced-encryption-system/1179.rss">[C#] How To Make A Semi-Advanced Encryption System</source>
      </item>
      <item>
        <title>[C#] How To Make A Semi-Advanced Encryption System</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>Hi and welcome the 0x00sec community!<br>
Before trying to answer your question, I would like you to read <a href="https://0x00sec.org/t/post-coherency-and-adherence-to-good-english/">oaktree’s post adherency guidelines</a> and the <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#code" rel="nofollow noopener">Markdown Cheatsheet</a>.<br>
Please help us to help you and reformat your post! <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
Thanks! SmartOne</p>
          <p><a href="https://0x00sec.org/t/c-how-to-make-a-semi-advanced-encryption-system/1179/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-how-to-make-a-semi-advanced-encryption-system/1179/3</link>
        <pubDate>Sat, 29 Apr 2017 21:34:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1179-3</guid>
        <source url="https://0x00sec.org/t/c-how-to-make-a-semi-advanced-encryption-system/1179.rss">[C#] How To Make A Semi-Advanced Encryption System</source>
      </item>
      <item>
        <title>[C#] How To Make A Semi-Advanced Encryption System</title>
        <dc:creator><![CDATA[M4hd1]]></dc:creator>
        <description><![CDATA[
            <p>I cant understand , this functions , if we pass a sample text like : “hello im asking a question” to the get_key function with alphabet array<br>
it will return this text:</p>
<blockquote>
<p>((((.(²°…(°Öt.(.tm.(ÖlX.(€U/.(tX;.(s9r.(ln.(m;Y.(U#&amp;.(Fa,.(Xne.(2Db.(91L.(/&amp;%.(}µ.(^äw.(;ev.(üjK.(#T$.(rL|.(a70.(kßc.(nµJ.(Z*§.(Do&gt;.(Yv0.(1Ax.(8NH.(&amp;$".(´[&lt;.(}_ .(,0y.(ägG.(~E!.(eJ°.(p5€.(j=l.(b&gt;F.(TÜ9.(Su^.(Lx#.(MOk.(7VD.(%"8.(ß³}.(]:~.(µ j.(ödS.(<em>Q7.(wG].(o3</em>.(h(h.(v°A.(RÖ6.(At[.(Kl+.(NUg.(6XP.($95.(?{.([;Ü.(|#f.(<em>aO.(+n4.(0D³.(i1Ä.(g&amp;d.(c}I.(Eä3.(Pe².(JjÖ.(BTs.(5LU.(§72.(=ß.({µü.(&gt;*a.(-oZ.(Üv1.(0A´.(uNä.(f$p.(x[T.(W_M.(O0ß.(Hgö.(VEo.(4JR.("5N.()=?.(³&gt;</em>.(&lt;Üi.(:uE.(ÄxB.( O=.(zV-.(d"u.(y³W.(Q:V.(I ).(Gd:.(CQz.(3GQ.(!3C.</p>
</blockquote>
<p>Do I Using this code in a rightway ?</p>
          <p><a href="https://0x00sec.org/t/c-how-to-make-a-semi-advanced-encryption-system/1179/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-how-to-make-a-semi-advanced-encryption-system/1179/2</link>
        <pubDate>Sat, 29 Apr 2017 16:31:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1179-2</guid>
        <source url="https://0x00sec.org/t/c-how-to-make-a-semi-advanced-encryption-system/1179.rss">[C#] How To Make A Semi-Advanced Encryption System</source>
      </item>
      <item>
        <title>[C#] How To Make A Semi-Advanced Encryption System</title>
        <dc:creator><![CDATA[dedady157]]></dc:creator>
        <description><![CDATA[
            <p>Hi all im back and today ill show you how to make a basic Encryption key for a basic cipher that i mad a while back.</p>
<p>we will be using these dll’s. we don’t need any but Exception`s are helpful.</p>
<pre><code class="lang-auto">using System; // not needed 
</code></pre>
<p>For making the Encryption key we will need 2 things a list of letters and symbols to use</p>
<pre><code class="lang-auto">private char[] alphabet = new char[]
        {
            'q','w','e','r','t','z','u','i','o','p','a','s','d','f','g',
            'h','j','k','l','y','x','c','v','b','n','m','Q','W','E','R',
            'T','Z','U','I','O','P','A','S','D','F','G','H','J','K','L',
            'Y','X','C','V','B','N','M','1','2','3','4','5','6','7','8',
            '9','!','"','§','$','%','&amp;','/','(',')','=','?','ß','´','`',
            '²','³','{','[',']','}','^','°','&lt;','&gt;','|','µ',',',';','.',
            ':','-','_','ö','ä','ü','Ö','Ä','Ü','+','*','~','#','€',' ',
            '0'
        };// all keys on qwertz (german) keyboard
</code></pre>
<p>And a thew helpful methods (functions).</p>
<pre><code class="lang-auto">private int GET_LETTER_NUM(char letter,char[] alphabet)
        {
            for (int x = 0; x &lt; alphabet.Length; x++)
            {
                if (letter == alphabet[x]) { return x; }
            }
            throw new Exception("unknown letter/symbol: " + letter + ToString());
        }//gets the position in alphabet for that letter

        private int SpecialFormulaONE(int DividingNumber, int number)
        {
            int length = number;
            while (number &gt; -100000)
            {
                if (number &gt; DividingNumber)
                {
                    number = number - DividingNumber;
                }
                else
                {
                    if (number == DividingNumber)
                    {
                        number--;
                    }
                    return number;
                }
            }
            throw new Exception("SpecialFormulaONE failure");
        }//i made this to replace % (get dividing remainder)
</code></pre>
<p>now for making the actual Encryption key</p>
<pre><code class="lang-auto">public string[] GET_KEY(string key, char[] alphabet)//key is the password input
        {
            if (key.Length &lt; 16)
            {
                throw new Exception("too small a key");
            }
            char[] input = key.ToCharArray();
            int length = input.Length;
            char first_letter = input[0];
            char last_letter = input[length - 1];
            string[] END = new string[alphabet.Length];


            //start of encryption process
            {
                //1 E_KEY cell per Letter in Alphabet
                for (int x = 0; x &lt; alphabet.Length; x++)//1 E_KEY cell = 4 alphabet letter
                {
                    string cell = "";
                    for (int y = 0; y &lt; 4; y++)
                    {

                        int end = 0;
                        for (int z = 0; z &lt; length; z++)
                        {
                            int offset = (x * y * z) + length;
                            end += GET_LETTER_NUM(input[z],alphabet) + offset;
                        }
                        cell += alphabet[SpecialFormulaONE(alphabet.Length, end)].ToString();

                    }
                    END[x] = cell;
                }
            }

            return END;
        }//creates a key
</code></pre>
          <p><a href="https://0x00sec.org/t/c-how-to-make-a-semi-advanced-encryption-system/1179/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-how-to-make-a-semi-advanced-encryption-system/1179/1</link>
        <pubDate>Sat, 08 Oct 2016 15:09:42 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1179-1</guid>
        <source url="https://0x00sec.org/t/c-how-to-make-a-semi-advanced-encryption-system/1179.rss">[C#] How To Make A Semi-Advanced Encryption System</source>
      </item>
  </channel>
</rss>
