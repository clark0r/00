<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[ Penny ] - PT-0x00 - Configure your own vulnerable CTF machine</title>
    <link>https://0x00sec.org/t/penny-pt-0x00-configure-your-own-vulnerable-ctf-machine/8411</link>
    <description>What’s up, everyone?

This tutorial will show you how to configure your own vulnerable CTF server manually. There exist some scripts which do this job for you but it&#39;s much better when you understand why these vulnerabilities work. ;)
Before we start I recommend you document every change/step. Write it down like a script. So you will be able to set it up again if required just by paste all of the commands. I will mark some words **strong** for important information we have to document. 

### Content:
1. Preparation
2. Installation
3. proof.txt &amp; local.txt
4. First Snapshot
5. Privilege Escalation
6. Second Snapshot
7. Exploitation
8. Third Snapshot
9. Complexity 

### 1. Preparation

First things first, we need to know what we want to teach the people. There are some questions we have to answer for this. For example: 
* What should they learn from this machine?
* Which steps are required to pwn it?
* Which exploitation techniques should be used?
* Which knowledge is required to succeed?
* What kind of vulnerability should be used?
* How many methods for each phase are possible?
* Which passwords?
* How many users?
* What OS is required?
* ...

The creation of a vulnerable machine looks like the penetration testing process but backward. This includes mainly the following: 
1. Privilege Escalation
2. Exploitation
3. Enumeration

We have to create a rough walkthrough of how the way has to look like. Based on this we will get a picture of how to configure this machine. Before we start to download the image let us search for a local privilege exploit. For this, you can use the [Exploit-DB](https://www.exploit-db.com/) or the preinstalled tool &quot;**searchsploit**&quot; in Kali Linux:

![1|344x500](upload://9tHQ8uoSzF44msbrW6tp3UJdLpI.png) 

I chose this one: _&quot;Linux Kernel 3.13.0 &amp;lt; 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - &#39;overlayfs&#39; | **37292.c**&quot;_
with the **Ubuntu 14.04** version. For the Exploitation phase, we will configure the vulnerability manually. 

### 2. Installation

Let us download the image:
`wget http://old-releases.ubuntu.com/releases/14.04.0/ubuntu-14.04-server-amd64.iso`

You can use VirtualBox or VMware. That&#39;s your choice. I will use my VMware Workstation. Here are some of my settings by creating a new VM:
* VM name: Crybuntu
* Maximum Disk Size: 10 GB
* [x] Store virtual disk as a single file
* Memory: 2048 MB
* Number of processors: 2
* Number of cores: 2
* New CD/DVD: /(path-to)/ubuntu-14.04-server-amd64.iso

Now we can start the VM. That&#39;s the basic installation process. So use whatever you like. 
My settings:
* Hostname: Crybuntu
* Username: **cryalot**

![2|690x196](upload://mOVOaKHuJzWH5CypiQJOHL4iYYx.png) 

* User password: **cry4moon** (contained inside the _rockyou.txt_ wordlist)

To ensure our VM doesn&#39;t update itself automatically we need to set the &quot;tasksel&quot; for &quot;No automatic updates&quot;.

![4|690x233](upload://4PxeZnMT7oQQkX1xs3Th5mnV5PC.png) 

Now we reached the part for software selection.

![5|690x321](upload://1oRhvm0b2jRKpjoynGDlFLZm8c.png) 

Here you can choose whatever you like. My selection:
* OpenSSH server
* LAMP Server
* Mail Server
* Samba file server

After the installation, we want to login into this VM using SSH as root. For this, we have to edit the line to &quot;_PermitRootLogin yes_&quot; inside the &quot;_/etc/ssh/sshd_config_&quot;  file. In addition, we have to set a root password:
`sudo su`
`passwd`
`[rockit]` 
`[rockit]`

Further, we have to be able to compile the local privilege escalation exploit on this machine. Therefore we need to install GCC on it.

`apt-get install gcc -y` 
___________________
What kind of vulnerabilities do we have so far?
* Old release of Ubuntu Linux with the version 14.04
* Weak password for cryalot
* Weak password for root
* Vulnerable kernel version
* SSH root login enabled
________________

### 3. proof.txt &amp; local.txt
Now let us generate some hashes for the **proof.txt** and **local.txt**.
`date | sha1sum &gt; proof.txt`

![6|447x111](upload://bhI4CgOAeOLRx8EJme1f7ZaiueR.png) 

**proof.txt = 7de08ccab8ef837d7041918bf6e890b13e728769**

`date | sha1sum &gt; local.txt`

![7|505x59](upload://6NhDKfqRVnzmCf5oYlqZOAe71cQ.png) 

**local.txt = fbc7a8d44951efe8f9a3bf6d029be077a14523e7**


### 4. First Snapshot
Now we configured the basic setup so far. Let us take a snapshot for this before we test the local privilege escalation exploit. We will be able to go back to this state if something doesn&#39;t work as we like or we broke the system. I wrote all the steps we did so far as a comment.

* LAMP
* Mail
* Samba
* OpenSSH - PermitRootLogin yes
* root:rockit
* cryalot:cry4moon
* GCC
* proof.txt = 7de08ccab8ef837d7041918bf6e890b13e728769
* local.txt = fbc7a8d44951efe8f9a3bf6d029be077a14523e7

### 5. Privilege Escalation

We have to ensure that the people will be able to find this exploit we chosen before. I tested it with the kernel version of the vulnerable VM.

`searchsploit linux kernel 3.13`

And it works perfectly:

![image|690x81](upload://hebjxfS2JV4PYavCV15SfMLDXDo.png) 

Let&#39;s test this exploit. I used netcat to transfer the exploit.

![9|690x205](upload://386EpJ0uWkTqh7ROvn2s7B6m4xt.png) 

Nice. Now you can revert the machine to the previous snapshot you created before to ensure that the execution of this exploit didn&#39;t break anything for another execution. Let us create a further vulnerability to obtain root privileges. For this, I will create a simple BASH-script called **.update.sh** owned by root with full privileges.

`echo “echo &#39;Updating...&#39;; apt-get update -y &amp;gt; /dev/null”`
`chmod 777 .update.sh`

Also, I will configure the _sudoers_-file for the user &quot;cryalot&quot; to let him run only one command as sudo.

![10|554x277](upload://5biJodH7m3kZjuaKsBubjCBnKgQ.png) 

### 6. Second Snapshot

Here we can edit this script to execute a reverse shell and create our second snapshot.


### 7. Exploitation

Now comes the really interesting part. I chose the Samba server for the exploitation phase. It will be configured for Metasploit and manual exploitation. The Metasploit module for this will be the &quot;**is_known_pipename**&quot;.
Let us create a new sharing folder and edit the _smb.conf_:

`cd /home/cryalot/`
`mkdir Sharing`
`chown cryalot:cryalot Sharing/`
`cd Sharing`
`cp /etc/samba/smb.conf /etc/samba/smb.conf.bak`
`nano /etc/samba/smb.conf`

I added the following lines at the end of the file:
`[Sharing]`
`comment = Sharing`
`path = /home/cryalot/Sharing`
`browseable = yes`
`guest ok = yes`
`writable = yes`
`create mask = 0644`
`directory mask = 0777`

The configuration of the smb.conf then looks like the following:

![11|351x249](upload://38bVWdiSpm9dGGQZC81voVhtFwt.png) 

Now we have to restart the Samba server test the configuration file for syntax errors:
`service smbd restart`
`testparm`

The &quot;testparm&quot; will show you which configurations are active for the Samba server. It should show all these lines we added to the _smb.conf_.

Now let us run &quot;enum4linux&quot; against this server to enumerate the new sharing folder:
`enum4linux -S xxx.xxx.xxx.xxxx`

![12|526x78](upload://gLQ19anPrjKEAJbDnkDyNHKSueO.png) 

And we want to check if the metasploit modules work too:

![13|690x261](upload://Ah2w0bqDlxsMLKOGt4sKfSDwG5g.png) 

### 8. Third Snapshot
Nice. So everything works fine and we can create another snapshot for this VM.

### 9. Complexity

This was a really basic configuration. It should give you an idea of where to start and how to move on. You can make it much more complex. Add things like rabbit holes. Harder passwords. Add firewall rules to block nmap scans. Do whatever you like. **It&#39;s not important how hard the machine will be but it&#39;s important what the people will learn from it!** 

A word about enumeration:
Make sure the people will be able to obtain the information to get into. That&#39;s really important here. Test all the changes you did. For example, if there is a password file which is required to successfully exploit this machine but there is no way to read it for a beginner she/he will not be able to learn the things you want. Do all the enumeration steps and ensure you will be able to find the information.

Don&#39;t forget to TRY HARDER. ;)

Regards,
Cry0l1t3</description>
    
    <lastBuildDate>Tue, 04 Sep 2018 11:02:57 +0000</lastBuildDate>
    <category>CTF</category>
    <atom:link href="https://0x00sec.org/t/penny-pt-0x00-configure-your-own-vulnerable-ctf-machine/8411.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[ Penny ] - PT-0x00 - Configure your own vulnerable CTF machine</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/penny-pt-0x00-configure-your-own-vulnerable-ctf-machine/8411/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/penny-pt-0x00-configure-your-own-vulnerable-ctf-machine/8411/2</link>
        <pubDate>Thu, 04 Oct 2018 11:02:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-8411-2</guid>
        <source url="https://0x00sec.org/t/penny-pt-0x00-configure-your-own-vulnerable-ctf-machine/8411.rss">[ Penny ] - PT-0x00 - Configure your own vulnerable CTF machine</source>
      </item>
      <item>
        <title>[ Penny ] - PT-0x00 - Configure your own vulnerable CTF machine</title>
        <dc:creator><![CDATA[Cry0l1t3]]></dc:creator>
        <description><![CDATA[
            <p>What’s up, everyone?</p>
<p>This tutorial will show you how to configure your own vulnerable CTF server manually. There exist some scripts which do this job for you but it’s much better when you understand why these vulnerabilities work. <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"><br>
Before we start I recommend you document every change/step. Write it down like a script. So you will be able to set it up again if required just by paste all of the commands. I will mark some words <strong>strong</strong> for important information we have to document.</p>
<h3>Content:</h3>
<ol>
<li>Preparation</li>
<li>Installation</li>
<li>proof.txt &amp; local.txt</li>
<li>First Snapshot</li>
<li>Privilege Escalation</li>
<li>Second Snapshot</li>
<li>Exploitation</li>
<li>Third Snapshot</li>
<li>Complexity</li>
</ol>
<h3>1. Preparation</h3>
<p>First things first, we need to know what we want to teach the people. There are some questions we have to answer for this. For example:</p>
<ul>
<li>What should they learn from this machine?</li>
<li>Which steps are required to pwn it?</li>
<li>Which exploitation techniques should be used?</li>
<li>Which knowledge is required to succeed?</li>
<li>What kind of vulnerability should be used?</li>
<li>How many methods for each phase are possible?</li>
<li>Which passwords?</li>
<li>How many users?</li>
<li>What OS is required?</li>
<li>…</li>
</ul>
<p>The creation of a vulnerable machine looks like the penetration testing process but backward. This includes mainly the following:</p>
<ol>
<li>Privilege Escalation</li>
<li>Exploitation</li>
<li>Enumeration</li>
</ol>
<p>We have to create a rough walkthrough of how the way has to look like. Based on this we will get a picture of how to configure this machine. Before we start to download the image let us search for a local privilege exploit. For this, you can use the <a href="https://www.exploit-db.com/" rel="noopener nofollow ugc">Exploit-DB</a> or the preinstalled tool “<strong>searchsploit</strong>” in Kali Linux:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/426f3d1d11d5d30b2267655dee2c6239255c279e.png" alt="1" data-base62-sha1="9tHQ8uoSzF44msbrW6tp3UJdLpI" width="344" height="500"></p>
<p>I chose this one: <em>“Linux Kernel 3.13.0 &lt; 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - ‘overlayfs’ | <strong>37292.c</strong>”</em><br>
with the <strong>Ubuntu 14.04</strong> version. For the Exploitation phase, we will configure the vulnerability manually.</p>
<h3>2. Installation</h3>
<p>Let us download the image:<br>
<code>wget http://old-releases.ubuntu.com/releases/14.04.0/ubuntu-14.04-server-amd64.iso</code></p>
<p>You can use VirtualBox or VMware. That’s your choice. I will use my VMware Workstation. Here are some of my settings by creating a new VM:</p>
<ul>
<li>VM name: Crybuntu</li>
<li>Maximum Disk Size: 10 GB</li>
<li>[x] Store virtual disk as a single file</li>
<li>Memory: 2048 MB</li>
<li>Number of processors: 2</li>
<li>Number of cores: 2</li>
<li>New CD/DVD: /(path-to)/ubuntu-14.04-server-amd64.iso</li>
</ul>
<p>Now we can start the VM. That’s the basic installation process. So use whatever you like.<br>
My settings:</p>
<ul>
<li>Hostname: Crybuntu</li>
<li>Username: <strong>cryalot</strong>
</li>
</ul>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/9ff1b95d252d03eb48d94e885e35bf9c470bb629.png" alt="2" data-base62-sha1="mOVOaKHuJzWH5CypiQJOHL4iYYx" width="690" height="196"></p>
<ul>
<li>User password: <strong>cry4moon</strong> (contained inside the <em>rockyou.txt</em> wordlist)</li>
</ul>
<p>To ensure our VM doesn’t update itself automatically we need to set the “tasksel” for “No automatic updates”.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/21dc106ba09d9d52668360de38e6d3877a7aa13c.png" alt="4" data-base62-sha1="4PxeZnMT7oQQkX1xs3Th5mnV5PC" width="690" height="233"></p>
<p>Now we reached the part for software selection.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/00288a9469e65735692e9de6906d93c9248a00fc.png" alt="5" data-base62-sha1="1oRhvm0b2jRKpjoynGDlFLZm8c" width="690" height="321"></p>
<p>Here you can choose whatever you like. My selection:</p>
<ul>
<li>OpenSSH server</li>
<li>LAMP Server</li>
<li>Mail Server</li>
<li>Samba file server</li>
</ul>
<p>After the installation, we want to login into this VM using SSH as root. For this, we have to edit the line to “<em>PermitRootLogin yes</em>” inside the “<em>/etc/ssh/sshd_config</em>”  file. In addition, we have to set a root password:<br>
<code>sudo su</code><br>
<code>passwd</code><br>
<code>[rockit]</code><br>
<code>[rockit]</code></p>
<p>Further, we have to be able to compile the local privilege escalation exploit on this machine. Therefore we need to install GCC on it.</p>
<p><code>apt-get install gcc -y</code></p>
<hr>
<p>What kind of vulnerabilities do we have so far?</p>
<ul>
<li>Old release of Ubuntu Linux with the version 14.04</li>
<li>Weak password for cryalot</li>
<li>Weak password for root</li>
<li>Vulnerable kernel version</li>
<li>SSH root login enabled</li>
</ul>
<hr>
<h3>3. proof.txt &amp; local.txt</h3>
<p>Now let us generate some hashes for the <strong>proof.txt</strong> and <strong>local.txt</strong>.<br>
<code>date | sha1sum &gt; proof.txt</code></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/4/4f186faa7cfc7f25f754891287f8f13ea29e77c1.png" alt="6" data-base62-sha1="bhI4CgOAeOLRx8EJme1f7ZaiueR" width="447" height="111"></p>
<p><strong>proof.txt = 7de08ccab8ef837d7041918bf6e890b13e728769</strong></p>
<p><code>date | sha1sum &gt; local.txt</code></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2f9f4100fb1c31d21568773a91da873a192d7148.png" alt="7" data-base62-sha1="6NhDKfqRVnzmCf5oYlqZOAe71cQ" width="505" height="59"></p>
<p><strong>local.txt = fbc7a8d44951efe8f9a3bf6d029be077a14523e7</strong></p>
<h3>4. First Snapshot</h3>
<p>Now we configured the basic setup so far. Let us take a snapshot for this before we test the local privilege escalation exploit. We will be able to go back to this state if something doesn’t work as we like or we broke the system. I wrote all the steps we did so far as a comment.</p>
<ul>
<li>LAMP</li>
<li>Mail</li>
<li>Samba</li>
<li>OpenSSH - PermitRootLogin yes</li>
<li>root:rockit</li>
<li>cryalot:cry4moon</li>
<li>GCC</li>
<li>proof.txt = 7de08ccab8ef837d7041918bf6e890b13e728769</li>
<li>local.txt = fbc7a8d44951efe8f9a3bf6d029be077a14523e7</li>
</ul>
<h3>5. Privilege Escalation</h3>
<p>We have to ensure that the people will be able to find this exploit we chosen before. I tested it with the kernel version of the vulnerable VM.</p>
<p><code>searchsploit linux kernel 3.13</code></p>
<p>And it works perfectly:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/78bf5ff3d836be389ab52b5a900c0a0219a1f7ee.png" alt="image" data-base62-sha1="hebjxfS2JV4PYavCV15SfMLDXDo" width="690" height="81"></p>
<p>Let’s test this exploit. I used netcat to transfer the exploit.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/15f122095de6969af49e5fe10b8645db590f08fb.png" alt="9" data-base62-sha1="386EpJ0uWkTqh7ROvn2s7B6m4xt" width="690" height="205"></p>
<p>Nice. Now you can revert the machine to the previous snapshot you created before to ensure that the execution of this exploit didn’t break anything for another execution. Let us create a further vulnerability to obtain root privileges. For this, I will create a simple BASH-script called <strong>.update.sh</strong> owned by root with full privileges.</p>
<p><code>echo “echo 'Updating...'; apt-get update -y &amp;gt; /dev/null”</code><br>
<code>chmod 777 .update.sh</code></p>
<p>Also, I will configure the <em>sudoers</em>-file for the user “cryalot” to let him run only one command as sudo.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/2/2451ef266d27f8dabfd066548dbfa8c4640d1be4.png" alt="10" data-base62-sha1="5biJodH7m3kZjuaKsBubjCBnKgQ" width="554" height="277"></p>
<h3>6. Second Snapshot</h3>
<p>Here we can edit this script to execute a reverse shell and create our second snapshot.</p>
<h3>7. Exploitation</h3>
<p>Now comes the really interesting part. I chose the Samba server for the exploitation phase. It will be configured for Metasploit and manual exploitation. The Metasploit module for this will be the “<strong>is_known_pipename</strong>”.<br>
Let us create a new sharing folder and edit the <em>smb.conf</em>:</p>
<p><code>cd /home/cryalot/</code><br>
<code>mkdir Sharing</code><br>
<code>chown cryalot:cryalot Sharing/</code><br>
<code>cd Sharing</code><br>
<code>cp /etc/samba/smb.conf /etc/samba/smb.conf.bak</code><br>
<code>nano /etc/samba/smb.conf</code></p>
<p>I added the following lines at the end of the file:<br>
<code>[Sharing]</code><br>
<code>comment = Sharing</code><br>
<code>path = /home/cryalot/Sharing</code><br>
<code>browseable = yes</code><br>
<code>guest ok = yes</code><br>
<code>writable = yes</code><br>
<code>create mask = 0644</code><br>
<code>directory mask = 0777</code></p>
<p>The configuration of the smb.conf then looks like the following:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/15f3993ea69e304739c575fd279021205572f309.png" alt="11" data-base62-sha1="38bVWdiSpm9dGGQZC81voVhtFwt" width="351" height="249"></p>
<p>Now we have to restart the Samba server test the configuration file for syntax errors:<br>
<code>service smbd restart</code><br>
<code>testparm</code></p>
<p>The “testparm” will show you which configurations are active for the Samba server. It should show all these lines we added to the <em>smb.conf</em>.</p>
<p>Now let us run “enum4linux” against this server to enumerate the new sharing folder:<br>
<code>enum4linux -S xxx.xxx.xxx.xxxx</code></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/7/758b299f6afd88ed6839a6d69c3055723bddee1e.png" alt="12" data-base62-sha1="gLQ19anPrjKEAJbDnkDyNHKSueO" width="526" height="78"></p>
<p>And we want to check if the metasploit modules work too:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/f/fe3b6362a49033c0ddd06209862ccce99424e75e.png" alt="13" data-base62-sha1="Ah2w0bqDlxsMLKOGt4sKfSDwG5g" width="690" height="261"></p>
<h3>8. Third Snapshot</h3>
<p>Nice. So everything works fine and we can create another snapshot for this VM.</p>
<h3>9. Complexity</h3>
<p>This was a really basic configuration. It should give you an idea of where to start and how to move on. You can make it much more complex. Add things like rabbit holes. Harder passwords. Add firewall rules to block nmap scans. Do whatever you like. <strong>It’s not important how hard the machine will be but it’s important what the people will learn from it!</strong></p>
<p>A word about enumeration:<br>
Make sure the people will be able to obtain the information to get into. That’s really important here. Test all the changes you did. For example, if there is a password file which is required to successfully exploit this machine but there is no way to read it for a beginner she/he will not be able to learn the things you want. Do all the enumeration steps and ensure you will be able to find the information.</p>
<p>Don’t forget to TRY HARDER. <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<p>Regards,<br>
Cry0l1t3</p>
          <p><a href="https://0x00sec.org/t/penny-pt-0x00-configure-your-own-vulnerable-ctf-machine/8411/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/penny-pt-0x00-configure-your-own-vulnerable-ctf-machine/8411/1</link>
        <pubDate>Tue, 04 Sep 2018 11:02:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-8411-1</guid>
        <source url="https://0x00sec.org/t/penny-pt-0x00-configure-your-own-vulnerable-ctf-machine/8411.rss">[ Penny ] - PT-0x00 - Configure your own vulnerable CTF machine</source>
      </item>
  </channel>
</rss>
