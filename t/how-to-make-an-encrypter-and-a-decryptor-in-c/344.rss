<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to make an encrypter and a decryptor in C#</title>
    <link>https://0x00sec.org/t/how-to-make-an-encrypter-and-a-decryptor-in-c/344</link>
    <description>hi all this how to is going to show you how to encrypt and decrypt you very own messages (this how to is for safely storing data and sending secure messages (both must have same key))

first: we need to make the key(a random assortment of letters numbers that translate into a single letter)
we make it like so(make it in a different file)


```C#
string[] replaceVall = new string[] {//the encrypted letter values corresponding to the bottom
				&quot;gmzr&quot;, &quot;mFQF&quot;, &quot;dhHa&quot;, &quot;vrwH&quot;, &quot;jkmq&quot;, &quot;PtZa&quot;, &quot;Bf*J&quot;, &quot;Sw-T&quot;, &quot;+-tr&quot;, &quot;Ag*k&quot;,
			       	&quot;Ai#T&quot;, &quot;+M#=&quot;, &quot;BI~k&quot;, &quot;ohgp&quot;, &quot;.gpL&quot;, &quot;NMws&quot;, &quot;xavz&quot;, &quot;o~MN&quot;, &quot;Vzxq&quot;, &quot;fqq,&quot;,
				&quot;kz(t&quot;, &quot;W!tk&quot;, &quot;S-oJ&quot;, &quot;tkOz&quot;, &quot;z=aX&quot;, &quot;RL*M&quot;, &quot;t+_;&quot;, &quot;gdW&amp;&quot;, &quot;%$?J&quot;, &quot;LNPb&quot;,
				&quot;ApYX&quot;, &quot;Guv:&quot;, &quot;;xPQ&quot;, &quot;zobi&quot;, &quot;ncOM&quot;, &quot;;hE_&quot;, &quot;*Kgo&quot;, &quot;CO+Y&quot;, &quot;vT-D&quot;, &quot;QGW-&quot;,
				&quot;ZRrp&quot;, &quot;Kq-V&quot;, &quot;GFkI&quot;, &quot;hM#H&quot;, &quot;V-uv&quot;, &quot;of*v&quot;, &quot;EHtJ&quot;, &quot;gMCM&quot;, &quot;yPxQ&quot;, &quot;sOjL&quot;, 
				&quot;PUPJ&quot;, &quot;jnRS&quot;, &quot;OxOG&quot;, &quot;NRuk&quot;, &quot;JCU+&quot;, &quot;qaDK&quot;, &quot;aIFX&quot;, &quot;ZoTf&quot;, &quot;AwuQ&quot;, &quot;YOzt&quot;,
				&quot;WIXQ&quot;, &quot;YiwZ&quot;, &quot;ReMT&quot;, &quot;eRIC&quot;, &quot;iwbg&quot;, &quot;-Bu*&quot;, &quot;:KrV&quot;, &quot;bCFK&quot;, &quot;HWQR&quot;, &quot;TG#r&quot;,
				&quot;UikE&quot;, &quot;bOsu&quot;, &quot;omEO&quot;, &quot;Ia.D&quot;
			};
			char[] alphabet = new char[] {//this is all the letters that i will use 
                                &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;,
				&#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;,&#39;F&#39;,&#39;G&#39;,
				&#39;H&#39;, &#39;I&#39;, &#39;J&#39;, &#39;K&#39;, &#39;L&#39;, &#39;M&#39;, &#39;N&#39;, &#39;O&#39;, &#39;P&#39;, &#39;Q&#39;, &#39;R&#39;, &#39;S&#39;, &#39;T&#39;, &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;,
				&#39;.&#39;,&#39;;&#39;,&#39;:&#39;,&#39;,&#39;,&#39;-&#39;,&#39;_&#39;,&#39;#&#39;,&#39;*&#39;,&#39;+&#39;,&#39;~&#39;,&#39;!&#39;,&#39;&quot;&#39;,&#39;ยง&#39;,&#39;$&#39;,&#39;%&#39;,&#39;&amp;&#39;,&#39;/&#39;,&#39;(&#39;,&#39;)&#39;,&#39;=&#39;,&#39;?&#39;,&#39; &#39;};
```

ok so now that we have that made we need to make the replacer (it finds the letter and returns the corresponding &quot;replaceVall&quot; value)

```C#
private string replacer(string message){
			char[] msg = new char[message.Length];
			for (int f = 0; f &lt; msg.Length; f++) {
				Char.TryParse (message.Substring (f, 1), out msg [f]);//sets up the char array for 
                                //easier use with the key
			}
                        string end = &quot;&quot;;//this will be the end result
			for (int x = 0; x &lt; msg.Length; x++) {//loop for how long the message is
				for (int j = 0; j &lt; alphabet.Length; j++) {//loop for every letter we have set up
					if (msg [x] == alphabet [j]) {//if the current letter is the same as the letter
                                        //in the &quot;alphabet&quot; array we know what number the encoded part is
						end += replaceVall [j];//add the encoded part the the end result
					}
				}
			}
			return end;
		}
```

so now we make the main function for the encrypter

```C#
public string encode(string message,int layers){
			string end_message = &quot;&quot;;
			string temp_layer = message;



			for (int x = 0; x &lt; layers; x++) {//loop for the set amount of layers
				temp_layer = replacer (temp_layer);//this is for layering
			}
			end_message = temp_layer;
			return end_message;
		}
```

now we can encode messages but now we need a way to decode them make a new file and enter this

```C#
string[] replaceVall = new string[] {//the encripted letter vallue&#39;s corosponding to the bottom
			&quot;gmzr&quot;, &quot;mFQF&quot;, &quot;dhHa&quot;, &quot;vrwH&quot;, &quot;jkmq&quot;, &quot;PtZa&quot;, &quot;Bf*J&quot;, &quot;Sw-T&quot;, &quot;+-tr&quot;, &quot;Ag*k&quot;,
			&quot;Ai#T&quot;, &quot;+M#=&quot;, &quot;BI~k&quot;, &quot;ohgp&quot;, &quot;.gpL&quot;, &quot;NMws&quot;, &quot;xavz&quot;, &quot;o~MN&quot;, &quot;Vzxq&quot;, &quot;fqq,&quot;,
			&quot;kz(t&quot;, &quot;W!tk&quot;, &quot;S-oJ&quot;, &quot;tkOz&quot;, &quot;z=aX&quot;, &quot;RL*M&quot;, &quot;t+_;&quot;, &quot;gdW&amp;&quot;, &quot;%$?J&quot;, &quot;LNPb&quot;,
			&quot;ApYX&quot;, &quot;Guv:&quot;, &quot;;xPQ&quot;, &quot;zobi&quot;, &quot;ncOM&quot;, &quot;;hE_&quot;, &quot;*Kgo&quot;, &quot;CO+Y&quot;, &quot;vT-D&quot;, &quot;QGW-&quot;,
			&quot;ZRrp&quot;, &quot;Kq-V&quot;, &quot;GFkI&quot;, &quot;hM#H&quot;, &quot;V-uv&quot;, &quot;of*v&quot;, &quot;EHtJ&quot;, &quot;gMCM&quot;, &quot;yPxQ&quot;, &quot;sOjL&quot;, 
			&quot;PUPJ&quot;, &quot;jnRS&quot;, &quot;OxOG&quot;, &quot;NRuk&quot;, &quot;JCU+&quot;, &quot;qaDK&quot;, &quot;aIFX&quot;, &quot;ZoTf&quot;, &quot;AwuQ&quot;, &quot;YOzt&quot;,
			&quot;WIXQ&quot;, &quot;YiwZ&quot;, &quot;ReMT&quot;, &quot;eRIC&quot;, &quot;iwbg&quot;, &quot;-Bu*&quot;, &quot;:KrV&quot;, &quot;bCFK&quot;, &quot;HWQR&quot;, &quot;TG#r&quot;,
			&quot;UikE&quot;, &quot;bOsu&quot;, &quot;omEO&quot;, &quot;Ia.D&quot;
		};
		char[] alphabet = new char[] {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;,
			&#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;,&#39;F&#39;,&#39;G&#39;,
			&#39;H&#39;, &#39;I&#39;, &#39;J&#39;, &#39;K&#39;, &#39;L&#39;, &#39;M&#39;, &#39;N&#39;, &#39;O&#39;, &#39;P&#39;, &#39;Q&#39;, &#39;R&#39;, &#39;S&#39;, &#39;T&#39;, &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;,
			&#39;.&#39;,&#39;;&#39;,&#39;:&#39;,&#39;,&#39;,&#39;-&#39;,&#39;_&#39;,&#39;#&#39;,&#39;*&#39;,&#39;+&#39;,&#39;~&#39;,&#39;!&#39;,&#39;&quot;&#39;,&#39;ยง&#39;,&#39;$&#39;,&#39;%&#39;,&#39;&amp;&#39;,&#39;/&#39;,&#39;(&#39;,&#39;)&#39;,&#39;=&#39;,&#39;?&#39;,&#39; &#39;};
		private string remove_layer(string message){
			string end = &quot;&quot;;

			for (int x = 0; x &lt; message.Length / 4; x++) {
				string line = message.Substring (x * 4,4);//get the next 4 digits
				for (int j = 0; j &lt; replaceVall.Length; j++) {
					if (line.StartsWith( replaceVall [j])) {//this is the same as on top just in revers
						end += alphabet [j];
					}
				}
			}
			return end;
		}
		public string decode(string message){
			while (true) {
				bool islayer = false;
				for(int x=0;x&lt;replaceVall.Length;x++){
					if (message.StartsWith(replaceVall[x])) {//check to see if there is another layer
                                        //if so then go agen
						islayer = true;
						break;
					}
				}
				if (islayer) {
					message = remove_layer (message);//if there is a layer decode agen

				} else {
					break;//if there is no more layers exit
				}
			}
			return message;
		}
```

ok now the main decoder is done know we need a main menu

```C#
public static void Main (string[] args)
		{
			top:
			Console.ForegroundColor = ConsoleColor.Green;
			Console.WriteLine (&quot;!encoder and decoder!&quot;);
			Console.Title=&quot;encoder and decoder1.0&quot;;
			Console.WriteLine (&quot;1: encode message&quot;);
			Console.WriteLine (&quot;2: decode message&quot;);//menu selection screen
			string option = Console.ReadLine();
			Console.Clear ();

			if (option == &quot;1&quot;) {
                                Console.WriteLine (&quot;message you want to encode&quot;);
				string msg = Console.ReadLine ();
				Console.WriteLine (&quot;layers of encription(max 4)&quot;);//select settings
				Console.WriteLine (&quot;the more layers the longer the encode message will be&quot;);
				Console.WriteLine (&quot;but it will be more secure&quot;);
				int x = 0;
				string layers = Console.ReadLine ();
				try{
					Int32.TryParse (layers, out x);//convert the layers string to an int
				}catch{
					Console.WriteLine (&quot;must be a int e.g: 1(max 4)&quot;);
					goto top;
				}
				if (x &lt;= 4) {
					var link = new encode_advanced ();
					string res = link.encode (msg, x);
					Console.WriteLine (&quot;length:&quot; + res.Length);//this is a safety feature because  
					Console.WriteLine (&quot;message:&quot;);//the coder will fup after 4 layers e.g 5 (or up)
					Console.WriteLine (res);
				} else {
					Console.WriteLine (&quot;must be a int e.g: 1(max 4)&quot;);
					goto top;
				}
			} else if (option == &quot;2&quot;) {
				Console.WriteLine (&quot;message you want to decode&quot;);
				string msg = Console.ReadLine ();
				var link = new decode_advanced ();//just enter the message you want to decode
				Console.WriteLine (&quot;#Running&quot;);
				string res = link.decode (msg);
				Console.Clear ();
				Console.WriteLine (res);
			} 
			goto top;		
		}
```
bye for now and i hope you learnt some C# from this
warnings:

if the layer is above 4 it will fail
to send messages to your friends both of you will need the same key,
if you have the same key as the tutorial your message isn&#39;t secure
i suggest making one from scratch,
if the decoder doesn&#39;t work first try try again if it still doesn&#39;t work  make a new key,

disclaimer:

i don&#39;t condone in miss use of this program under any circumstances
this tutorial is made for educational purposes no more no less</description>
    
    <lastBuildDate>Fri, 13 May 2016 18:51:11 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/how-to-make-an-encrypter-and-a-decryptor-in-c/344.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to make an encrypter and a decryptor in C#</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/how-to-make-an-encrypter-and-a-decryptor-in-c/344/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-make-an-encrypter-and-a-decryptor-in-c/344/3</link>
        <pubDate>Sun, 21 Jan 2018 00:30:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-344-3</guid>
        <source url="https://0x00sec.org/t/how-to-make-an-encrypter-and-a-decryptor-in-c/344.rss">How to make an encrypter and a decryptor in C#</source>
      </item>
      <item>
        <title>How to make an encrypter and a decryptor in C#</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>The syntax highlighting is better, but the indendation is off. Could you sort that?</p>
          <p><a href="https://0x00sec.org/t/how-to-make-an-encrypter-and-a-decryptor-in-c/344/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-make-an-encrypter-and-a-decryptor-in-c/344/2</link>
        <pubDate>Fri, 13 May 2016 18:51:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-344-2</guid>
        <source url="https://0x00sec.org/t/how-to-make-an-encrypter-and-a-decryptor-in-c/344.rss">How to make an encrypter and a decryptor in C#</source>
      </item>
      <item>
        <title>How to make an encrypter and a decryptor in C#</title>
        <dc:creator><![CDATA[dedady157]]></dc:creator>
        <description><![CDATA[
            <p>hi all this how to is going to show you how to encrypt and decrypt you very own messages (this how to is for safely storing data and sending secure messages (both must have same key))</p>
<p>first: we need to make the key(a random assortment of letters numbers that translate into a single letter)<br>
we make it like so(make it in a different file)</p>
<pre><code class="lang-auto">string[] replaceVall = new string[] {//the encrypted letter values corresponding to the bottom
				"gmzr", "mFQF", "dhHa", "vrwH", "jkmq", "PtZa", "Bf*J", "Sw-T", "+-tr", "Ag*k",
			       	"Ai#T", "+M#=", "BI~k", "ohgp", ".gpL", "NMws", "xavz", "o~MN", "Vzxq", "fqq,",
				"kz(t", "W!tk", "S-oJ", "tkOz", "z=aX", "RL*M", "t+_;", "gdW&amp;", "%$?J", "LNPb",
				"ApYX", "Guv:", ";xPQ", "zobi", "ncOM", ";hE_", "*Kgo", "CO+Y", "vT-D", "QGW-",
				"ZRrp", "Kq-V", "GFkI", "hM#H", "V-uv", "of*v", "EHtJ", "gMCM", "yPxQ", "sOjL", 
				"PUPJ", "jnRS", "OxOG", "NRuk", "JCU+", "qaDK", "aIFX", "ZoTf", "AwuQ", "YOzt",
				"WIXQ", "YiwZ", "ReMT", "eRIC", "iwbg", "-Bu*", ":KrV", "bCFK", "HWQR", "TG#r",
				"UikE", "bOsu", "omEO", "Ia.D"
			};
			char[] alphabet = new char[] {//this is all the letters that i will use 
                                'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
				'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E','F','G',
				'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
				'.',';',':',',','-','_','#','*','+','~','!','"','ยง','$','%','&amp;','/','(',')','=','?',' '};
</code></pre>
<p>ok so now that we have that made we need to make the replacer (it finds the letter and returns the corresponding โreplaceVallโ value)</p>
<pre><code class="lang-auto">private string replacer(string message){
			char[] msg = new char[message.Length];
			for (int f = 0; f &lt; msg.Length; f++) {
				Char.TryParse (message.Substring (f, 1), out msg [f]);//sets up the char array for 
                                //easier use with the key
			}
                        string end = "";//this will be the end result
			for (int x = 0; x &lt; msg.Length; x++) {//loop for how long the message is
				for (int j = 0; j &lt; alphabet.Length; j++) {//loop for every letter we have set up
					if (msg [x] == alphabet [j]) {//if the current letter is the same as the letter
                                        //in the "alphabet" array we know what number the encoded part is
						end += replaceVall [j];//add the encoded part the the end result
					}
				}
			}
			return end;
		}
</code></pre>
<p>so now we make the main function for the encrypter</p>
<pre><code class="lang-auto">public string encode(string message,int layers){
			string end_message = "";
			string temp_layer = message;



			for (int x = 0; x &lt; layers; x++) {//loop for the set amount of layers
				temp_layer = replacer (temp_layer);//this is for layering
			}
			end_message = temp_layer;
			return end_message;
		}
</code></pre>
<p>now we can encode messages but now we need a way to decode them make a new file and enter this</p>
<pre><code class="lang-auto">string[] replaceVall = new string[] {//the encripted letter vallue's corosponding to the bottom
			"gmzr", "mFQF", "dhHa", "vrwH", "jkmq", "PtZa", "Bf*J", "Sw-T", "+-tr", "Ag*k",
			"Ai#T", "+M#=", "BI~k", "ohgp", ".gpL", "NMws", "xavz", "o~MN", "Vzxq", "fqq,",
			"kz(t", "W!tk", "S-oJ", "tkOz", "z=aX", "RL*M", "t+_;", "gdW&amp;", "%$?J", "LNPb",
			"ApYX", "Guv:", ";xPQ", "zobi", "ncOM", ";hE_", "*Kgo", "CO+Y", "vT-D", "QGW-",
			"ZRrp", "Kq-V", "GFkI", "hM#H", "V-uv", "of*v", "EHtJ", "gMCM", "yPxQ", "sOjL", 
			"PUPJ", "jnRS", "OxOG", "NRuk", "JCU+", "qaDK", "aIFX", "ZoTf", "AwuQ", "YOzt",
			"WIXQ", "YiwZ", "ReMT", "eRIC", "iwbg", "-Bu*", ":KrV", "bCFK", "HWQR", "TG#r",
			"UikE", "bOsu", "omEO", "Ia.D"
		};
		char[] alphabet = new char[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
			'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E','F','G',
			'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
			'.',';',':',',','-','_','#','*','+','~','!','"','ยง','$','%','&amp;','/','(',')','=','?',' '};
		private string remove_layer(string message){
			string end = "";

			for (int x = 0; x &lt; message.Length / 4; x++) {
				string line = message.Substring (x * 4,4);//get the next 4 digits
				for (int j = 0; j &lt; replaceVall.Length; j++) {
					if (line.StartsWith( replaceVall [j])) {//this is the same as on top just in revers
						end += alphabet [j];
					}
				}
			}
			return end;
		}
		public string decode(string message){
			while (true) {
				bool islayer = false;
				for(int x=0;x&lt;replaceVall.Length;x++){
					if (message.StartsWith(replaceVall[x])) {//check to see if there is another layer
                                        //if so then go agen
						islayer = true;
						break;
					}
				}
				if (islayer) {
					message = remove_layer (message);//if there is a layer decode agen

				} else {
					break;//if there is no more layers exit
				}
			}
			return message;
		}
</code></pre>
<p>ok now the main decoder is done know we need a main menu</p>
<pre><code class="lang-auto">public static void Main (string[] args)
		{
			top:
			Console.ForegroundColor = ConsoleColor.Green;
			Console.WriteLine ("!encoder and decoder!");
			Console.Title="encoder and decoder1.0";
			Console.WriteLine ("1: encode message");
			Console.WriteLine ("2: decode message");//menu selection screen
			string option = Console.ReadLine();
			Console.Clear ();

			if (option == "1") {
                                Console.WriteLine ("message you want to encode");
				string msg = Console.ReadLine ();
				Console.WriteLine ("layers of encription(max 4)");//select settings
				Console.WriteLine ("the more layers the longer the encode message will be");
				Console.WriteLine ("but it will be more secure");
				int x = 0;
				string layers = Console.ReadLine ();
				try{
					Int32.TryParse (layers, out x);//convert the layers string to an int
				}catch{
					Console.WriteLine ("must be a int e.g: 1(max 4)");
					goto top;
				}
				if (x &lt;= 4) {
					var link = new encode_advanced ();
					string res = link.encode (msg, x);
					Console.WriteLine ("length:" + res.Length);//this is a safety feature because  
					Console.WriteLine ("message:");//the coder will fup after 4 layers e.g 5 (or up)
					Console.WriteLine (res);
				} else {
					Console.WriteLine ("must be a int e.g: 1(max 4)");
					goto top;
				}
			} else if (option == "2") {
				Console.WriteLine ("message you want to decode");
				string msg = Console.ReadLine ();
				var link = new decode_advanced ();//just enter the message you want to decode
				Console.WriteLine ("#Running");
				string res = link.decode (msg);
				Console.Clear ();
				Console.WriteLine (res);
			} 
			goto top;		
		}
</code></pre>
<p>bye for now and i hope you learnt some C# from this<br>
warnings:</p>
<p>if the layer is above 4 it will fail<br>
to send messages to your friends both of you will need the same key,<br>
if you have the same key as the tutorial your message isnโt secure<br>
i suggest making one from scratch,<br>
if the decoder doesnโt work first try try again if it still doesnโt work  make a new key,</p>
<p>disclaimer:</p>
<p>i donโt condone in miss use of this program under any circumstances<br>
this tutorial is made for educational purposes no more no less</p>
          <p><a href="https://0x00sec.org/t/how-to-make-an-encrypter-and-a-decryptor-in-c/344/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-make-an-encrypter-and-a-decryptor-in-c/344/1</link>
        <pubDate>Fri, 13 May 2016 18:43:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-344-1</guid>
        <source url="https://0x00sec.org/t/how-to-make-an-encrypter-and-a-decryptor-in-c/344.rss">How to make an encrypter and a decryptor in C#</source>
      </item>
  </channel>
</rss>
