<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Game Hacking on Linux - scanmem Basics</title>
    <link>https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458</link>
    <description>Hey, this is a very brief tutorial on scanmem, a memory manipulation tool for Linux that&#39;s well suited to game hacking. I&#39;ll be using GZDoom as an example, but you should be able to follow along with any game you want.

Firstly, install scanmem. Check your distro&#39;s repositories as there&#39;s a very good chance it&#39;s in there. If you need to compile from source, you can download it [here](https://github.com/scanmem/scanmem).

```
$ # Arch Linux users would do the following:
$ sudo pacman -S scanmem
```

Now you&#39;ll need to start scanmem. It&#39;s a command-line tool, so you need to do it from a shell. scanmem doesn&#39;t ask for much, just root privileges and the PID of the game you want to hack, which you can specify as a parameter when starting it:

```
$ sudo scanmem `pidof gzdoom`
```

You&#39;ll initially be greeted with some copyright information, followed by a pretty courteous prompt:

```
Please enter current value, or &quot;help&quot; for other commands.
0&gt;
```

What it wants you to do now is enter the current value of the variable you want to change.  I suggest that you pick something easily changed by legitimate means, like health. In my example with GZDoom, I&#39;ll be modifying the amount of shotgun ammo I have, so I would enter:

```
0&gt; 13
```

It will now scan through the process memory for everything that could be interpreted as a 13, and spit out a message about having some absurd amount of matches.

```
info: we currently have 22290 matches.
22290&gt;
```

We&#39;re going to have to narrow that down. Go back to your game and change the value. If it&#39;s health you&#39;re trying to modify, go get hit by an enemy. For me, I&#39;ll fire off some shotgun rounds.

When you&#39;re done, you need to let scanmem know how the value changed. You can give it another literal value, like &quot;12&quot;, but scanmem provides a few helpful shortcuts. `&gt;` tells it that it generally increased, `&lt;` tells it that it generally decreased, and `=` tells it that it stayed the same.

```
22290&gt; 12
..........info: we currently have 5 matches.
5&gt;
```

Wow, that really narrowed it down. Just wash, rinse and repeat until that number of matches stops changing.

If you manage to narrow it down to 1, good job! You can just use the `set` command to set the variable like this:

```
1&gt; set 65535
```

Although for me, it&#39;s stuck at four results. That&#39;s not bad, though. You just need to experiment  with writing to those potential addresses. You&#39;ll first need to `list` the addresses it found:

```
4&gt; list
[ 0]      345e214,  2 +       ecf214,  heap, 11, [I32 I16 I8 ]
[ 1]      34606c4,  2 +       ed16c4,  heap, 11, [I32 I16 I8 ]
[ 2]      346bc90,  2 +       edcc90,  heap, 11, [I64 I32 I16 I8 ]
[ 3]      3ecb358,  2 +      193c358,  heap, 11, [I32 I16 I8 ]
```

There&#39;s a bit more information than we need here, but that&#39;s no problem. The second column contains the memory address it thinks is the variable, and the last column is the possible integer types. (I8 is an 8-bit signed or unsigned integer, for example). What we&#39;re going to do now is write the value we want to those addresses until the change we want happens. This is done with the `write` command, which takes the integer type, the address, and the value as parameters.

```
4&gt; write i32 34606c4 65535
4&gt; write i32 345e214 65535
4&gt; write i32 346bc90 65535
4&gt; write i32 3ecb358 65535
```

And eventually, you will be rewarded.

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/2X/6/68ecc59f291bbab8f67927936bd69360ac8a21e0.png&quot; width=&quot;690&quot; height=&quot;388&quot;&gt;</description>
    
    <lastBuildDate>Mon, 19 Jun 2017 15:43:55 +0000</lastBuildDate>
    <category>Linux</category>
    <atom:link href="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Game Hacking on Linux - scanmem Basics</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/9</link>
        <pubDate>Sun, 21 Jan 2018 00:36:58 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2458-9</guid>
        <source url="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458.rss">Game Hacking on Linux - scanmem Basics</source>
      </item>
      <item>
        <title>Game Hacking on Linux - scanmem Basics</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <p>Yes I read that one a while ago as well and this here reminded me of the article by <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> too <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/8</link>
        <pubDate>Mon, 19 Jun 2017 15:43:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2458-8</guid>
        <source url="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458.rss">Game Hacking on Linux - scanmem Basics</source>
      </item>
      <item>
        <title>Game Hacking on Linux - scanmem Basics</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>Did you read this? Also a great post with CheatEngine<br>
</p><aside class="quote quote-modified" data-post="1" data-topic="1232">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/0x00sec.org/dtm/40/6409_2.png" class="avatar">
    <a href="https://0x00sec.org/t/game-hacking-3d-pinball-space-cadet/1232">Game Hacking: 3D Pinball - Space Cadet</a> <a class="badge-wrapper  bullet" href="https://0x00sec.org/c/reverse-engineering/58"><span class="badge-category-bg" style="background-color: #12A89D;"></span><span style="" data-drop-close="true" class="badge-category clear-badge">Reverse Engineering</span></a>
  </div>
  <blockquote>
    When someone has too much time on their hands (and usually also has a lot of work to do), their productivity sometimes slips… and by “slips”, I mean it completely collapses into itself and implodes. 
ANYWAY, back to the focus of this thread, I decided to have some fun with my newly installed Windows XP OS on my VM, and by fun, I mean screwing around with this wonderful game which brings me back so many memories: 3D Pinball - Space Cadet. I’ve been getting more into reverse engineering these few …
  </blockquote>
</aside>
<p></p>
          <p><a href="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/7</link>
        <pubDate>Mon, 19 Jun 2017 15:35:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2458-7</guid>
        <source url="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458.rss">Game Hacking on Linux - scanmem Basics</source>
      </item>
      <item>
        <title>Game Hacking on Linux - scanmem Basics</title>
        <dc:creator><![CDATA[jakob]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for the tip. Would this work for variables in heap-allocated structures, though? It doesn’t seem like the ASM for GZDoom references these addresses anywhere</p>
          <p><a href="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/6</link>
        <pubDate>Mon, 19 Jun 2017 13:51:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2458-6</guid>
        <source url="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458.rss">Game Hacking on Linux - scanmem Basics</source>
      </item>
      <item>
        <title>Game Hacking on Linux - scanmem Basics</title>
        <dc:creator><![CDATA[Silur]]></dc:creator>
        <description><![CDATA[
            <p>actually after you found and confirmed the addr you have to modify, you can propagate back in the ASM with r2 using <code>/r</code> and <code>axt</code> and after you found the initialization of the variable you can calculate the physical addr, or simply use <code>?p</code> (currently does not work with overlaps).<br>
Then you have the offset you have to overwrite with a hex editor (or r2 itself).<br>
Be careful to use padding <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          <p><a href="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/5</link>
        <pubDate>Mon, 19 Jun 2017 09:07:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2458-5</guid>
        <source url="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458.rss">Game Hacking on Linux - scanmem Basics</source>
      </item>
      <item>
        <title>Game Hacking on Linux - scanmem Basics</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <p>This totally feels like back in the days when I used <a href="http://www.cheatengine.org/">CheatEngine</a> in Windows for this kinda stuff… Fun times <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/4</link>
        <pubDate>Mon, 19 Jun 2017 08:43:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2458-4</guid>
        <source url="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458.rss">Game Hacking on Linux - scanmem Basics</source>
      </item>
      <item>
        <title>Game Hacking on Linux - scanmem Basics</title>
        <dc:creator><![CDATA[jakob]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a> Yeah, it isn’t too much of a problem here unless you’re trying to save memory addresses for the next time you run the game.</p>
          <p><a href="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/3</link>
        <pubDate>Mon, 19 Jun 2017 01:25:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2458-3</guid>
        <source url="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458.rss">Game Hacking on Linux - scanmem Basics</source>
      </item>
      <item>
        <title>Game Hacking on Linux - scanmem Basics</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Are you familiar with ASLR?</p>
          <p><a href="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/2</link>
        <pubDate>Mon, 19 Jun 2017 00:55:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2458-2</guid>
        <source url="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458.rss">Game Hacking on Linux - scanmem Basics</source>
      </item>
      <item>
        <title>Game Hacking on Linux - scanmem Basics</title>
        <dc:creator><![CDATA[jakob]]></dc:creator>
        <description><![CDATA[
            <p>Hey, this is a very brief tutorial on scanmem, a memory manipulation tool for Linux that’s well suited to game hacking. I’ll be using GZDoom as an example, but you should be able to follow along with any game you want.</p>
<p>Firstly, install scanmem. Check your distro’s repositories as there’s a very good chance it’s in there. If you need to compile from source, you can download it <a href="https://github.com/scanmem/scanmem" rel="noopener nofollow ugc">here</a>.</p>
<pre><code class="lang-auto">$ # Arch Linux users would do the following:
$ sudo pacman -S scanmem
</code></pre>
<p>Now you’ll need to start scanmem. It’s a command-line tool, so you need to do it from a shell. scanmem doesn’t ask for much, just root privileges and the PID of the game you want to hack, which you can specify as a parameter when starting it:</p>
<pre><code class="lang-auto">$ sudo scanmem `pidof gzdoom`
</code></pre>
<p>You’ll initially be greeted with some copyright information, followed by a pretty courteous prompt:</p>
<pre><code class="lang-auto">Please enter current value, or "help" for other commands.
0&gt;
</code></pre>
<p>What it wants you to do now is enter the current value of the variable you want to change.  I suggest that you pick something easily changed by legitimate means, like health. In my example with GZDoom, I’ll be modifying the amount of shotgun ammo I have, so I would enter:</p>
<pre><code class="lang-auto">0&gt; 13
</code></pre>
<p>It will now scan through the process memory for everything that could be interpreted as a 13, and spit out a message about having some absurd amount of matches.</p>
<pre><code class="lang-auto">info: we currently have 22290 matches.
22290&gt;
</code></pre>
<p>We’re going to have to narrow that down. Go back to your game and change the value. If it’s health you’re trying to modify, go get hit by an enemy. For me, I’ll fire off some shotgun rounds.</p>
<p>When you’re done, you need to let scanmem know how the value changed. You can give it another literal value, like “12”, but scanmem provides a few helpful shortcuts. <code>&gt;</code> tells it that it generally increased, <code>&lt;</code> tells it that it generally decreased, and <code>=</code> tells it that it stayed the same.</p>
<pre><code class="lang-auto">22290&gt; 12
..........info: we currently have 5 matches.
5&gt;
</code></pre>
<p>Wow, that really narrowed it down. Just wash, rinse and repeat until that number of matches stops changing.</p>
<p>If you manage to narrow it down to 1, good job! You can just use the <code>set</code> command to set the variable like this:</p>
<pre><code class="lang-auto">1&gt; set 65535
</code></pre>
<p>Although for me, it’s stuck at four results. That’s not bad, though. You just need to experiment  with writing to those potential addresses. You’ll first need to <code>list</code> the addresses it found:</p>
<pre><code class="lang-auto">4&gt; list
[ 0]      345e214,  2 +       ecf214,  heap, 11, [I32 I16 I8 ]
[ 1]      34606c4,  2 +       ed16c4,  heap, 11, [I32 I16 I8 ]
[ 2]      346bc90,  2 +       edcc90,  heap, 11, [I64 I32 I16 I8 ]
[ 3]      3ecb358,  2 +      193c358,  heap, 11, [I32 I16 I8 ]
</code></pre>
<p>There’s a bit more information than we need here, but that’s no problem. The second column contains the memory address it thinks is the variable, and the last column is the possible integer types. (I8 is an 8-bit signed or unsigned integer, for example). What we’re going to do now is write the value we want to those addresses until the change we want happens. This is done with the <code>write</code> command, which takes the integer type, the address, and the value as parameters.</p>
<pre><code class="lang-auto">4&gt; write i32 34606c4 65535
4&gt; write i32 345e214 65535
4&gt; write i32 346bc90 65535
4&gt; write i32 3ecb358 65535
</code></pre>
<p>And eventually, you will be rewarded.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/6/68ecc59f291bbab8f67927936bd69360ac8a21e0.png" width="690" height="388"></p>
          <p><a href="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458/1</link>
        <pubDate>Sun, 18 Jun 2017 23:51:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-2458-1</guid>
        <source url="https://0x00sec.org/t/game-hacking-on-linux-scanmem-basics/2458.rss">Game Hacking on Linux - scanmem Basics</source>
      </item>
  </channel>
</rss>
