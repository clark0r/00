<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Sorting (Part 4.0): Bogo Sort</title>
    <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200</link>
    <description>## What Is Bogo Sort?
Bogo Sort is a sorting algorithm that is not used in production at all. Why? Because it&#39;s extremely stupid. Some even call it &quot;Stupid Sort.&quot;

The algorithm works by generating random permutations of an inputted array-to-sort. Then, it checks to see if the randomly generated permutation is sorted. If so, it returns that sorted array and exits; otherwise, it makes another permutation.

Worst-Case Time Complexity: `O( (n+1)! )` because of all the possible permuting.

Best-Case Time Complexity: `o(n)` if the array-to-sort is already sorted.

**Note:** Bogo Sort can generate the same permutation more than once in a run, thus wasting even more of our time.

## Ruby Implementation
```ruby
class Array
    def sorted?
        ### goes thru array and checks if all elements are in order
        for i in 1...self.length
            return false if self[i-1] &gt; self[i]
        end
        return true
    end
    def bogosort
        ### randomly shuffles until sorted
        self.shuffle! until self.sorted?
        return self #return sorted array
    end
end
 
puts &quot;give me a string&quot;
str = gets.chomp.split(&#39;&#39;)
puts str.bogosort.join(&#39;&#39;)
```
I&#39;ll tell you that I got inspiration for this implementation from various parts of the internet -- and probably Wikipedia.

So, anyway, I&#39;ve extended Ruby&#39;s `Array` class to have a few extra methods: `sorted?` and `bogosort`.

I hope that you all can infer what `sorted?` does; yet, if not, I&#39;ll tell you that it ensures that all the elements are in order.. and, yes, I&#39;m that guy who uses for loops in Ruby.

Okay, so `bogosort` basically just uses a built-in shuffle method to get a new permutation of the array-to-sort and stops shuffling when the array-to-sort is sorted. Simple enough.

## C++ Version
```c++
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;cstdlib&gt;
 
using namespace std;
 
bool is_sorted(const vector&lt;char&gt;&amp; vec) {
   
    for (int i = 1, n = vec.size(); i &lt; n; i++) {
        if (vec[i-1] &gt; vec[i]) return false;
        // returns false if an element is smaller than one to its left
    }
 
    return true;
}
 
void shuffle(vector&lt;char&gt;&amp; vec) {
    int i,n, tmp, rand_idx;
 
    for(i = 0, n = vec.size(); i &lt; n; i++) {
       
        tmp = vec[i]; // store temporarily
       
        rand_idx = rand() % n; // pick a random index in the vector/array
 
        // swap each element in vector/array with another one that is chosen randomly
        vec[i] = vec[rand_idx];
        vec[rand_idx] = tmp;
    }
}
 
void bogosort(vector&lt;char&gt;&amp; vec) {
    while( !is_sorted(vec) ) shuffle(vec);
}
 
int main() {
    cout &lt;&lt; &quot;give me a string&quot; &lt;&lt; endl;
    string s; getline(cin, s);
 
    vector&lt;char&gt; vec(s.begin(), s.end());
 
    if (!vec.empty()) bogosort(vec);
 
    string str(vec.begin(), vec.end());
 
    cout &lt;&lt; str &lt;&lt; endl;
    return 0;
}
```
The deal is the same for `is_sorted(...)` as it was for our Ruby implementation&#39;s `sorted?`.

In our C++ implementation, however, I actually define my own shuffle function. Basically, it swaps an element in our vector/array with another, randomly-chosen one to create a fresh permutation. Of course, it could potentially do the same thing twice.

The actual `bogosort(...)` function does the same thing in this C++ version as our Ruby version did.

Conclusion
That&#39;s it for Bogo/Stupid/Monkey Sort.

You can check out [this cool Stack Overflow post](https://stackoverflow.com/questions/2609857/are-there-any-worse-sorting-algorithms-than-bogosort-a-k-a-monkey-sort) for some more crazy sorting algorithms.

Leave a comment if you have a question.

See you all later,
oaktree</description>
    
    <lastBuildDate>Tue, 24 May 2016 15:46:52 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/17">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/17</link>
        <pubDate>Sun, 21 Jan 2018 00:37:36 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-17</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[random-man]]></dc:creator>
        <description><![CDATA[
            <p>This just made my day <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">  . What an ass backwards algorithm</p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/16">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/16</link>
        <pubDate>Tue, 24 May 2016 15:46:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-16</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Don’t let your dreams be dreams.</p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/15</link>
        <pubDate>Thu, 19 May 2016 11:47:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-15</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Lol <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> yes, that is <em>technically</em> true. But us programmers are all caught up in the <em><strong>worst-case time complexity</strong></em>, which is <em>infinity</em>!</p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/14</link>
        <pubDate>Thu, 19 May 2016 11:28:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-14</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>LOL - DTM Knows whats going down…</p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/13</link>
        <pubDate>Thu, 19 May 2016 05:23:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-13</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="oaktree" data-post="5" data-topic="200">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/oaktree/40/4077_2.png" class="avatar"> oaktree:</div>
<blockquote>
<p>Bogo sort is a joke.</p>
</blockquote>
</aside>
<p>h8ters gon h8te.</p>
<aside class="quote no-group" data-username="oaktree" data-post="5" data-topic="200">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/oaktree/40/4077_2.png" class="avatar"> oaktree:</div>
<blockquote>
<p>It could technically take infinite time to finish.</p>
</blockquote>
</aside>
<p>And technically, it’s the only sorting algorithm which can sort everything in one round.</p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/12</link>
        <pubDate>Thu, 19 May 2016 01:50:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-12</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Well, if you have it sort 1000 chars, you’ll be sitting there for a while… Also you could run the Ackermann function on large numbers (or negative numbers).</p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/11</link>
        <pubDate>Mon, 16 May 2016 17:25:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-11</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[Neo]]></dc:creator>
        <description><![CDATA[
            <p>Leave it to Ruby programmers to use a question mark in a method name <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p>Anyway, Bogo Sort implementation are often part of a computer science course. So thank you for the introducton to this topic. You even used two different languages and all that, good work.</p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/10</link>
        <pubDate>Mon, 16 May 2016 15:24:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-10</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>No! Get out! Bogo would be perfect for a memory and CPU exhaustion program!</p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/9</link>
        <pubDate>Mon, 16 May 2016 15:19:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-9</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Well said. Guess I was being ignorant to some extent on that one <img src="https://0x00sec.org/images/emoji/twitter/blush.png?v=9" title=":blush:" class="emoji" alt=":blush:"></p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/8</link>
        <pubDate>Fri, 06 May 2016 00:35:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-8</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Well, it’s code you’d never run nor use; a modern compiler would likely omit it from the object file (compiled program). Including it would be a waste, really, of <em>your</em> time only.</p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/7</link>
        <pubDate>Fri, 06 May 2016 00:34:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-7</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Well I guess then it’d be perfect for making someone confused, eh? I mean if someone was trying to reverse-engineer something, then the bogo sort would just be a waste of time for them to find out what it does. And if it really is a joke I guess it’d be fun to include it in your code just to poke some fun <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/6</link>
        <pubDate>Fri, 06 May 2016 00:32:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-6</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Oh… I should clear this up: <strong>Bogo sort is a joke</strong>. Nobody uses it in the real world. It could technically take infinite time to finish.</p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/5</link>
        <pubDate>Fri, 06 May 2016 00:30:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-5</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Well, although it is all over the internet, I’m sure that’s never stopped people from making newer and better versions on the internet. Similarly to what you see with viruses today, many virus makers borrowed newer concepts from the older ones, in order to further improve their virus.</p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/4</link>
        <pubDate>Fri, 06 May 2016 00:28:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-4</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>What do you mean? Who’d reverse-engineer a sorting algo when the source code is all over the internet?</p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/3</link>
        <pubDate>Fri, 06 May 2016 00:26:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-3</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Couldn’t the Bogo Sort be a way of confusing a person who’d try to reverse engineer the program, or whatever it is that the<br>
Bogo Sort is included in?</p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/2</link>
        <pubDate>Fri, 06 May 2016 00:25:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-2</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
      <item>
        <title>Sorting (Part 4.0): Bogo Sort</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <h2>What Is Bogo Sort?</h2>
<p>Bogo Sort is a sorting algorithm that is not used in production at all. Why? Because it’s extremely stupid. Some even call it “Stupid Sort.”</p>
<p>The algorithm works by generating random permutations of an inputted array-to-sort. Then, it checks to see if the randomly generated permutation is sorted. If so, it returns that sorted array and exits; otherwise, it makes another permutation.</p>
<p>Worst-Case Time Complexity: <code>O( (n+1)! )</code> because of all the possible permuting.</p>
<p>Best-Case Time Complexity: <code>o(n)</code> if the array-to-sort is already sorted.</p>
<p><strong>Note:</strong> Bogo Sort can generate the same permutation more than once in a run, thus wasting even more of our time.</p>
<h2>Ruby Implementation</h2>
<pre><code class="lang-ruby">class Array
    def sorted?
        ### goes thru array and checks if all elements are in order
        for i in 1...self.length
            return false if self[i-1] &gt; self[i]
        end
        return true
    end
    def bogosort
        ### randomly shuffles until sorted
        self.shuffle! until self.sorted?
        return self #return sorted array
    end
end
 
puts "give me a string"
str = gets.chomp.split('')
puts str.bogosort.join('')
</code></pre>
<p>I’ll tell you that I got inspiration for this implementation from various parts of the internet – and probably Wikipedia.</p>
<p>So, anyway, I’ve extended Ruby’s <code>Array</code> class to have a few extra methods: <code>sorted?</code> and <code>bogosort</code>.</p>
<p>I hope that you all can infer what <code>sorted?</code> does; yet, if not, I’ll tell you that it ensures that all the elements are in order… and, yes, I’m that guy who uses for loops in Ruby.</p>
<p>Okay, so <code>bogosort</code> basically just uses a built-in shuffle method to get a new permutation of the array-to-sort and stops shuffling when the array-to-sort is sorted. Simple enough.</p>
<h2>C++ Version</h2>
<pre><code class="lang-auto">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;cstdlib&gt;
 
using namespace std;
 
bool is_sorted(const vector&lt;char&gt;&amp; vec) {
   
    for (int i = 1, n = vec.size(); i &lt; n; i++) {
        if (vec[i-1] &gt; vec[i]) return false;
        // returns false if an element is smaller than one to its left
    }
 
    return true;
}
 
void shuffle(vector&lt;char&gt;&amp; vec) {
    int i,n, tmp, rand_idx;
 
    for(i = 0, n = vec.size(); i &lt; n; i++) {
       
        tmp = vec[i]; // store temporarily
       
        rand_idx = rand() % n; // pick a random index in the vector/array
 
        // swap each element in vector/array with another one that is chosen randomly
        vec[i] = vec[rand_idx];
        vec[rand_idx] = tmp;
    }
}
 
void bogosort(vector&lt;char&gt;&amp; vec) {
    while( !is_sorted(vec) ) shuffle(vec);
}
 
int main() {
    cout &lt;&lt; "give me a string" &lt;&lt; endl;
    string s; getline(cin, s);
 
    vector&lt;char&gt; vec(s.begin(), s.end());
 
    if (!vec.empty()) bogosort(vec);
 
    string str(vec.begin(), vec.end());
 
    cout &lt;&lt; str &lt;&lt; endl;
    return 0;
}
</code></pre>
<p>The deal is the same for <code>is_sorted(...)</code> as it was for our Ruby implementation’s <code>sorted?</code>.</p>
<p>In our C++ implementation, however, I actually define my own shuffle function. Basically, it swaps an element in our vector/array with another, randomly-chosen one to create a fresh permutation. Of course, it could potentially do the same thing twice.</p>
<p>The actual <code>bogosort(...)</code> function does the same thing in this C++ version as our Ruby version did.</p>
<p>Conclusion<br>
That’s it for Bogo/Stupid/Monkey Sort.</p>
<p>You can check out <a href="https://stackoverflow.com/questions/2609857/are-there-any-worse-sorting-algorithms-than-bogosort-a-k-a-monkey-sort" rel="nofollow noopener">this cool Stack Overflow post</a> for some more crazy sorting algorithms.</p>
<p>Leave a comment if you have a question.</p>
<p>See you all later,<br>
oaktree</p>
          <p><a href="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200/1</link>
        <pubDate>Thu, 05 May 2016 23:23:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-200-1</guid>
        <source url="https://0x00sec.org/t/sorting-part-4-0-bogo-sort/200.rss">Sorting (Part 4.0): Bogo Sort</source>
      </item>
  </channel>
</rss>
