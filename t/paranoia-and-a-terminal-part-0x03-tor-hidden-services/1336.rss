<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</title>
    <link>https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336</link>
    <description>Hello, my loyal 0x00&#39;ers! You are reading my 4th Installment of **Paranoia and a Terminal**! 

Today we are going to discuss how to set up a Tor Service; and how to access it. Tor services are a really good addition to your toolkit as a Paranoid hacker. Tor can be used as an Anonymity tool, but providing Anonymity is only a facet of what Tor is capable of.

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/c/cda2a6525d60d62a3c700d86e66f54e68501574c.jpg&#39;&gt;

## What&#39;s a Tor Service?
So firstly, what&#39;s a Tor Service? 

A Tor Service (or .onion address) is a service on the Tor Network. The quote directly from [The Tor Project](https://blog.torproject.org) 

&gt;  Hidden Services are a Tor technology that allows users to connect to services (blogs, chats, and many other things) with neither the user nor the site giving up identifying information.

Tor Services are great things because they provide Anonymity for both parties, the server is completely hidden as is the client. 

Using a Tor Hidden service avoids the obvious issue of **Exit Nodes**, but it also incorporates a separate encryption layer between the last node and the Tor Service, so technically HTTPS is unnecessary.  This is incredibly powerful as neither the Sysadmin or the User can mess up on this very simple necessity of encryption. 

Tor Hidden Services also sidestep 2 major issues with security. 

- Firewalls
- Port Forwarding

When you configure a Tor Hidden Service (as you&#39;ll see later), you don&#39;t need to ever configure your router to port forward to allow Tor through (only outgoing ports), and you don&#39;t need to worry about blocking ports (such as SSH). This instantly provides a huge layer of protection. 

This means you can have a remote server with HTTP, SSH and other control ports open, but only configure the HTTP Ports to show on the Tor Service. This means nobody would know it&#39;s an HTTP server by looking at the cleartext side, and nobody would know it had SSH from the Tor side.  

**Secrecy is Security** - right?

## Configuration
Configuration is very straight forward. Firstly you need to get a web server (or any other type of server running), and install `tor`. Tor being the standalone application, not the Tor Browser Bundle.

On Linux this is as simple as taking a trip to your favourite package manager.

*buntu/Debian
```
$ sudo apt-get update &amp;&amp; sudo apt-get -y install tor
```

Or....

Arch:

```bash
$ sudo pacman -S tor
```

Very straightforward.

Now just run Tor for the first time to get all the files generated and such.

```
$ tor
```

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/5/5bb6d7114c553b87b91ac9b14ca3468286ea7954.jpg&#39;&gt;

**In the event you get an error here**, you will probably need to sort out permissions. Assuming your user name is &quot;nuller&quot;, run:

```bash
$ sudo chown -R nuller:users /var/lib/tor
```

Now you need to edit your Tor Config file. On most machines this is at `/etc/tor/torrc`

```
$ sudo vim /etc/tor/torrc
```

(You can use nano here or whatever editor you would like here although I use vim).

Append on the last two lines
```bash
HiddenServiceDir /var/lib/tor/secret-server/
HiddenServicePort 80 127.0.0.1:80
```

These two lines are extremely simple.

- **HiddenServiceDir** - This is the location of where your private key files and such will be stored, make sure this directory location is safe. The directory will be made if it doesn&#39;t already exist.
- **HiddenServicePort** - This is the port infomation. The first argument, &quot;80&quot; is the Tor Service Port, and the second one &quot;127.0.0.1:80&quot;, is the address you want to forward to. In theory this can be any IP and port and does *not* have to be your local machine.

Once you&#39;ve done that, save the file and restart Tor!

With my Tor configuration on Arch, it is not very verbose and doesn&#39;t even tell me it worked. However on Ubuntu it is very verbose and tells me all about it.

In the event that your .onion address isn&#39;t told to you. Navigate to that directory you mentioned in `HiddenServiceDir`. In our example it was /var/lib/tor/secret-server/

```
$ cd /var/lib/tor/secret-server/
$ ls
```

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/9/919a0c6775c156892a2cefe805afd7a22c9b2dac.jpg&#39;&gt;

In there are two files 

- `hostname` - This file simply contains the hostname to your newly generate Tor Service.
-  `private_key` - This file contains your private_key (**KEEP THIS SAFE**). If anybody finds this private key they can spoof your service and cause some serious problems. Guard this with your life. 

Now if everything is set up correctly and Tor is running, navigate to the address in `hostname` and your new shiny Tor Service should be up and running! Easy eh?

You can now run an incredibly fraudulent illegal site, or just something you want to stay secure! The choice is yours! &lt;small&gt; Please, don&#39;t make something incredibly illegal and then blame us, that would be awful &lt;/small&gt; 

At this point, you can either leave and be happy with mediocrity, or you can stay and find out how to be truly 1337. 

## Client Configuration
So what you&#39;ve just set up right now is really cool, although it only really rocks for things like web servers, and at this point in time you can only access it through The Tor Browser. What are you going to do when you want to funnel your IRC traffic through it? 

### Say hello to mapaddress + proxychains.
I&#39;m hoping you&#39;re familiar with proxychains, it&#39;s been covered countless times, and Pico even made a tutorial about how it works. 

`mapaddress` allows you to *map*  real life addresses to Tor Addresses so that dumb clients like IRC Clients and Hosts files can recognise them. 

On your client machine (assuming you have Tor set up), edit your config file.

```
$ sudo vim /etc/tor/torrc
```

Scroll to the bottom and append

```bash
AutomapHostsOnResolve 1
AutomapHostsSuffixes .exit,.onion

mapaddress 100.100.100.100 nullxvxy6kasmy2r.onion
```

These lines will allow you to map nullxvxy6kasmy2r.onion (0x00sec Tor Address) to 100.100.100.100. If you restart Tor and do:
```go
$ proxychains curl 100.100.100.100
```

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/6/6a8dc685763745ef8322e877994bd0c1db8f7db7.jpg&#39;&gt;

It should respond with the 0x00sec homepage in raw HTML. Now you can move onto more exciting things, like configuring your IRC client or patching your hosts file.

Personally I have configured duckduckgo.com to point to 100.100.100.100, so when I load my browser using Tor as a Socks Proxy, it automatically loads duckduckgo results through the Tor Address; it doesn&#39;t even look any different.

I hope you all enjoyed this article! It was a lot of fun to make, and it is really fun to be able to share to this awesome &amp; warm community! I look forward to your comments!

Stay Snappy!

\- pry0cc</description>
    
    <lastBuildDate>Sat, 10 Dec 2016 11:08:45 +0000</lastBuildDate>
    <category>Linux</category>
    <atom:link href="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/8</link>
        <pubDate>Sun, 21 Jan 2018 00:36:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1336-8</guid>
        <source url="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336.rss">Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</source>
      </item>
      <item>
        <title>Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Thanks <a class="mention" href="https://0x00sec.org/u/merozey">@Merozey</a>! I knew you’d like it <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          <p><a href="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/7</link>
        <pubDate>Sat, 10 Dec 2016 11:08:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1336-7</guid>
        <source url="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336.rss">Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</source>
      </item>
      <item>
        <title>Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</title>
        <dc:creator><![CDATA[Merozey]]></dc:creator>
        <description><![CDATA[
            <p>great article pry0cc!</p>
          <p><a href="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/6</link>
        <pubDate>Sat, 10 Dec 2016 10:46:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1336-6</guid>
        <source url="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336.rss">Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</source>
      </item>
      <item>
        <title>Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Thank you! I like it too.</p>
          <p><a href="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/5</link>
        <pubDate>Sat, 10 Dec 2016 08:25:27 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1336-5</guid>
        <source url="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336.rss">Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</source>
      </item>
      <item>
        <title>Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This is interesting. The last part is even cooler.</p>
          <p><a href="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/4</link>
        <pubDate>Sat, 10 Dec 2016 01:32:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1336-4</guid>
        <source url="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336.rss">Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</source>
      </item>
      <item>
        <title>Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Thanks a tonne <a class="mention" href="https://0x00sec.org/u/n3xus">@n3xUs</a>!</p>
          <p><a href="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/3</link>
        <pubDate>Sat, 10 Dec 2016 01:19:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1336-3</guid>
        <source url="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336.rss">Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</source>
      </item>
      <item>
        <title>Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</title>
        <dc:creator><![CDATA[n3xUs]]></dc:creator>
        <description><![CDATA[
            <p><img src="//0x00sec.s3.amazonaws.com/original/2X/5/5be3b3de316bc8cbf667206a87776c1998b4cc7e.jpg" width="" height=""></p>
<p>######(Please ignore the fact that it is a facebook like…)</p>
          <p><a href="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/2</link>
        <pubDate>Sat, 10 Dec 2016 01:16:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1336-2</guid>
        <source url="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336.rss">Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</source>
      </item>
      <item>
        <title>Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Hello, my loyal 0x00’ers! You are reading my 4th Installment of <strong>Paranoia and a Terminal</strong>!</p>
<p>Today we are going to discuss how to set up a Tor Service; and how to access it. Tor services are a really good addition to your toolkit as a Paranoid hacker. Tor can be used as an Anonymity tool, but providing Anonymity is only a facet of what Tor is capable of.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/c/cda2a6525d60d62a3c700d86e66f54e68501574c.jpg"></p>
<h2>What’s a Tor Service?</h2>
<p>So firstly, what’s a Tor Service?</p>
<p>A Tor Service (or .onion address) is a service on the Tor Network. The quote directly from <a href="https://blog.torproject.org">The Tor Project</a></p>
<blockquote>
<p>Hidden Services are a Tor technology that allows users to connect to services (blogs, chats, and many other things) with neither the user nor the site giving up identifying information.</p>
</blockquote>
<p>Tor Services are great things because they provide Anonymity for both parties, the server is completely hidden as is the client.</p>
<p>Using a Tor Hidden service avoids the obvious issue of <strong>Exit Nodes</strong>, but it also incorporates a separate encryption layer between the last node and the Tor Service, so technically HTTPS is unnecessary.  This is incredibly powerful as neither the Sysadmin or the User can mess up on this very simple necessity of encryption.</p>
<p>Tor Hidden Services also sidestep 2 major issues with security.</p>
<ul>
<li>Firewalls</li>
<li>Port Forwarding</li>
</ul>
<p>When you configure a Tor Hidden Service (as you’ll see later), you don’t need to ever configure your router to port forward to allow Tor through (only outgoing ports), and you don’t need to worry about blocking ports (such as SSH). This instantly provides a huge layer of protection.</p>
<p>This means you can have a remote server with HTTP, SSH and other control ports open, but only configure the HTTP Ports to show on the Tor Service. This means nobody would know it’s an HTTP server by looking at the cleartext side, and nobody would know it had SSH from the Tor side.</p>
<p><strong>Secrecy is Security</strong> - right?</p>
<h2>Configuration</h2>
<p>Configuration is very straight forward. Firstly you need to get a web server (or any other type of server running), and install <code>tor</code>. Tor being the standalone application, not the Tor Browser Bundle.</p>
<p>On Linux this is as simple as taking a trip to your favourite package manager.</p>
<p>*buntu/Debian</p>
<pre><code class="lang-auto">$ sudo apt-get update &amp;&amp; sudo apt-get -y install tor
</code></pre>
<p>Or…</p>
<p>Arch:</p>
<pre><code class="lang-bash">$ sudo pacman -S tor
</code></pre>
<p>Very straightforward.</p>
<p>Now just run Tor for the first time to get all the files generated and such.</p>
<pre><code class="lang-auto">$ tor
</code></pre>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/5/5bb6d7114c553b87b91ac9b14ca3468286ea7954.jpg"></p>
<p><strong>In the event you get an error here</strong>, you will probably need to sort out permissions. Assuming your user name is “nuller”, run:</p>
<pre><code class="lang-bash">$ sudo chown -R nuller:users /var/lib/tor
</code></pre>
<p>Now you need to edit your Tor Config file. On most machines this is at <code>/etc/tor/torrc</code></p>
<pre><code class="lang-auto">$ sudo vim /etc/tor/torrc
</code></pre>
<p>(You can use nano here or whatever editor you would like here although I use vim).</p>
<p>Append on the last two lines</p>
<pre><code class="lang-bash">HiddenServiceDir /var/lib/tor/secret-server/
HiddenServicePort 80 127.0.0.1:80
</code></pre>
<p>These two lines are extremely simple.</p>
<ul>
<li>
<strong>HiddenServiceDir</strong> - This is the location of where your private key files and such will be stored, make sure this directory location is safe. The directory will be made if it doesn’t already exist.</li>
<li>
<strong>HiddenServicePort</strong> - This is the port infomation. The first argument, “80” is the Tor Service Port, and the second one “127.0.0.1:80”, is the address you want to forward to. In theory this can be any IP and port and does <em>not</em> have to be your local machine.</li>
</ul>
<p>Once you’ve done that, save the file and restart Tor!</p>
<p>With my Tor configuration on Arch, it is not very verbose and doesn’t even tell me it worked. However on Ubuntu it is very verbose and tells me all about it.</p>
<p>In the event that your .onion address isn’t told to you. Navigate to that directory you mentioned in <code>HiddenServiceDir</code>. In our example it was /var/lib/tor/secret-server/</p>
<pre><code class="lang-auto">$ cd /var/lib/tor/secret-server/
$ ls
</code></pre>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/9/919a0c6775c156892a2cefe805afd7a22c9b2dac.jpg"></p>
<p>In there are two files</p>
<ul>
<li>
<code>hostname</code> - This file simply contains the hostname to your newly generate Tor Service.</li>
<li>
<code>private_key</code> - This file contains your private_key (<strong>KEEP THIS SAFE</strong>). If anybody finds this private key they can spoof your service and cause some serious problems. Guard this with your life.</li>
</ul>
<p>Now if everything is set up correctly and Tor is running, navigate to the address in <code>hostname</code> and your new shiny Tor Service should be up and running! Easy eh?</p>
<p>You can now run an incredibly fraudulent illegal site, or just something you want to stay secure! The choice is yours! <small> Please, don’t make something incredibly illegal and then blame us, that would be awful </small></p>
<p>At this point, you can either leave and be happy with mediocrity, or you can stay and find out how to be truly 1337.</p>
<h2>Client Configuration</h2>
<p>So what you’ve just set up right now is really cool, although it only really rocks for things like web servers, and at this point in time you can only access it through The Tor Browser. What are you going to do when you want to funnel your IRC traffic through it?</p>
<h3>Say hello to mapaddress + proxychains.</h3>
<p>I’m hoping you’re familiar with proxychains, it’s been covered countless times, and Pico even made a tutorial about how it works.</p>
<p><code>mapaddress</code> allows you to <em>map</em>  real life addresses to Tor Addresses so that dumb clients like IRC Clients and Hosts files can recognise them.</p>
<p>On your client machine (assuming you have Tor set up), edit your config file.</p>
<pre><code class="lang-auto">$ sudo vim /etc/tor/torrc
</code></pre>
<p>Scroll to the bottom and append</p>
<pre><code class="lang-bash">AutomapHostsOnResolve 1
AutomapHostsSuffixes .exit,.onion

mapaddress 100.100.100.100 nullxvxy6kasmy2r.onion
</code></pre>
<p>These lines will allow you to map nullxvxy6kasmy2r.onion (0x00sec Tor Address) to 100.100.100.100. If you restart Tor and do:</p>
<pre><code class="lang-auto">$ proxychains curl 100.100.100.100
</code></pre>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/6/6a8dc685763745ef8322e877994bd0c1db8f7db7.jpg"></p>
<p>It should respond with the 0x00sec homepage in raw HTML. Now you can move onto more exciting things, like configuring your IRC client or patching your hosts file.</p>
<p>Personally I have configured <a href="http://duckduckgo.com">duckduckgo.com</a> to point to 100.100.100.100, so when I load my browser using Tor as a Socks Proxy, it automatically loads duckduckgo results through the Tor Address; it doesn’t even look any different.</p>
<p>I hope you all enjoyed this article! It was a lot of fun to make, and it is really fun to be able to share to this awesome &amp; warm community! I look forward to your comments!</p>
<p>Stay Snappy!</p>
<p>- pry0cc</p>
          <p><a href="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336/1</link>
        <pubDate>Fri, 09 Dec 2016 23:58:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1336-1</guid>
        <source url="https://0x00sec.org/t/paranoia-and-a-terminal-part-0x03-tor-hidden-services/1336.rss">Paranoia and a Terminal - Part 0x03 - Tor Hidden Services</source>
      </item>
  </channel>
</rss>
