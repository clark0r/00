<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Playing with Hashes and Tickets</title>
    <link>https://0x00sec.org/t/playing-with-hashes-and-tickets/26604</link>
    <description># Playing with Hashes and Tickets

In a current event I came across an environment where cracking hashes or tickets was not required, or basically impossible, so I started doing my research to keep track on what can we do, when we only have Hashes or Tickets in our possession some are limited to what can be done, but others are more free on what we can achieve so I will work on examples for Windows and Linux Environments.

**1.- PtH (Pass the Hash)**

Pass the Hash is a credential theft and lateral movement technique in which an attacker can abuse the challenge-and-response nature of NTLM authentication protocol to authenticate as a user with only the NTLM hash of the user’s password. The attacker is thus able to use the compromised account without ever brute-forcing or obtaining the plaintext password.

***Administrator Privileges are required on the compromised workstation***

Mimiktaz:

Mimikatz is fairly easy to use this will require us to have already obtain Administrator Privileges (or SYSTEM) to dump the hashes and pass them to start using the accounts privileges over the environment.

![](upload://zEpyZqcr51oBGH4CZ72UGUmkIL7.png)

My focus will be with John as this is an Administrator account on a Remote Workstation

![](upload://aGJj102XRfCkmUqtqRDuI7CNzwr.png)

Now if I try to list the C directory of the remote workstation I get what was expected an Access Denied.

![](upload://qbjcSSQaLNDzqTvWJrgsNAuBedW.png)

Now we will pass the hash with mimikatz

![](upload://hkFsMGmfzgR7pq9X04WPGjiVGxP.png)

A new CMD window will prompt and we can check our access to the Remote Workstation

![](upload://aasaIruQ7QJ8u2GFy5oQb3YUMjx.png)

Mimikatz is great but now let’s give it a try with Linux

Psexec.py from the impacket toolkit is a python version of PsExec for Linux (there are also a variety of tools that achieve the same result but using different methods ***wmiexec, smbexec.*** By using these methods the tools will elevate to a SYSTEM shell because of the way they function (Create a Service and these typically run with High Privileges “SYSTEM”)

![](upload://m5WQFSIT5BNt7O2XLa5NzUseCKz.png)

**2.- SharpNamedPipePTH**

(This technique can also be in par with Tokens)

A tool used for authentication via a named pipe for user impersonation. It is based on the Sharp-SMBExec tool, the tool will create a pipe, and pass the hash of the user you are trying to impersonate for authentication this is a great method to execute a binary and use your favorite method to steal or impersonate the token with your favorite C2, in this example I approach it using Cobalt Strike

We will add the username – hash – and binary we are trying to execute and if successful our binary will execute with the token we are trying to impersonate, from here we can inject, steal or any way you would like to approach this situation in my preference I injected a beacon to the process.

![](upload://juVf0t6twVO8gZRZGRv58Zz7dHT.png)

Injected:

![](upload://sTwjxWFlBtaobPCo0TqPUulcbLx.png)

But there is a limitation, which I understand why the author mentioned in using the tool when a certain user has only access to certain resources that no one else can, but the limitation is that this technique does not allow network authentication, this is still a great technique just be aware of the limitations.

![](upload://X4KB5l1NLDJsacpuJtC5Lc3z5K.png)

**3.- CrackMapExec**

A swiss army for pentesting networks, authored by byt3bl33d3r and built using Python, Powershell, and other languages it is meant to be the swiss knife for Networking it is an amazing to compromise AD, capture hashes, pth, execute code, enumeration and more. It’s usage is straight forward when passing the hash.

![](upload://utaiyuAAh62o6mViZ9nX17gqayG.png)

Here pwned just tells us that the user is a local Administrator on the Workstation it also contains a great feature to Locally Authenticate to the workstation with no parameters CrackMapExec will find the Domain Name and use that for authentication but if we add “–local-auth” we will authenticate locally assuming the user only is a local account and not a domain account.

![](upload://hnZ5manKjwQyLXz912fSc0dRM5I.png)

You can tell the Domain switched to the workstations name and tried to authenticate as a local user, this is something to be aware off as sometimes we have compromised a user but not a Domain User.

**4.- Over-Pass-the-Hash**

Over Pass the hash is an attack that allows an intruder to authenticate as a user without having access to the user’s password. This is a technique where an attacker uses the NTLM hashes for authentication and bypass the standard authentication step clear text password for login. This technique is a combination of passing the hash and passing the ticket, so it’s called Over Pass the Hash. Allows the creating of Kerberos tickets from NTLM hashes or AES keys that allows access to the resource service that required Kerberos authentication.

I could not duplicate the technique as it seems I am not gaining the same keys that are show in the example.

Example:

![](upload://s2O0JCguBDWLEDo8pLB7mCvRZ9G.png)

Mine:

![](upload://7VdqINSwNv9TkJ48m2MCbx5VDHr.png)

Please just look at the references below

**5.- NTLM Relaying**

In this section we will be working with the technique NTLM Relaying, this will replay the NTLM hash to another workstation and execute code, if the user has administrator privileges or permission that allow WRITE access to an SMB Share, also signing has to be disabled you can test this with crackmapexec tool and view the permissions as show below:

![](upload://o5tl5NncM3CC38fTDBlBf4KL5nX.png)

So jwinchester has the proper permissions on to the targeted workstation so with this we can use the ntlmrelay technique to upload and execute a beacon. As we are aware John is an Administrator on the ECHO Workstation we can target this machine with ntlmrelay with the “-t” parameter, but I will demonstrate Code Execution and a binary to be execute on the Target workstation we will also remember to enable smb2support as this will not work with today’s network since SMBv1 is pretty old:

![](upload://sGgHuPPTiGS4PIMJkhCC5TKaAlz.png)

Now we wait for the user to try and access our target machine which we can use other methods such as Tainted Shares, ShortCut Links, or any other methods that you are familiar with to capture the Net-NTLM hash. In the following example I just forced it with the user by trying to list a fake share:

![](upload://4qYDPOQAGvdNDbwxo0fXsCx6O51.png)

When this happens the user sends the NTLM hash and we relay it to another box where the user is a Local Administrator, with this we get Code Execution.

![](upload://sZRwkwjjvXVzK2xBFmzGmN8QPN7.png)

What about a beacon that we hold on our attack box? Will use the “-e” parameter to use this:

![](upload://jG7KBJ18rIuf3yf5Bfh2Fqy3jtT.png)

We now have a beacon with SYSTEM privileges on the workstation:

![](upload://8PLuB9kjCtTei4TG4ssWzMoWdP2.png)

**6.- PipeServerImpersonate.PS1**

***Administrator Privileges***

Named pipes are nothing new, its an old technology you will find in many operating systems (Unix, Windows,…) to permit asynchronous or synchronous inter-process communication (IPC) on the same computer or on different computers across the network, named pipes are a method for I/O that is great for also executing code to other workstations, Psexec being an example of it.

You can view these easily yourself using PowerShell or pipelist from SysInternals, now let’s try the PowerShell script.

We can see below that by utilizing the script and connecting to the Pipe , we can connect to it directly via CMD just by echoing anything to it.

![](upload://evRaOXC9wsbqwTIv0hjkD3JV6hd.png)

![](upload://jtnx91S6EmhfWrzzGdzNeVccy77.png)

Now we go back to our host where we see the new notepad process executing but with jwinchesters token.

![](upload://mYwjFMCOKpcV9CBETZgvuGYHdPL.png)

Now we can inject a beacon to this process and impersonate the user, but this also comes with limitations no Network Access, so be wary of this not being an option to Lateral Move more to access local resources specifically for a user.

**7.- Pass the Ticket**

In pass the tickets attacks, an attacker is able to extract a Kerberos Ticket Granting Ticket (TGT) from LSASS memory on a system and then use this on another system to request Kerberos service tickets (TGS) to gain access to a network resource.

One primary difference between pass-the-hash and pass-the-ticket, is that Kerberos TGT tickets expire (10 hours by default) whereas NTLM hashes only change when the user changes their password. So a TGT ticket must be used within its lifetime, or it can be renewed for a longer period of time (7 days).

Tools like mimikatz can perform this attack. First let us confirm that we receive an access denied with our current user

![](upload://edhytY2RID1p7ZJrvz4VdkRljNk.png)

Now with Rubeus we can monitor the Network for tickets, we can force a ticket into our current session by authenticating with the user we are trying to compromise (Just a Demo, there might be other methods to achieve this in an active Network). I focused on this target since the user has CIFS privilege’s over Desktop-Delta.

Some other methods to capture the tickets is if you have the credentials and try to start an Interactive Logon-Session

Local Login: Physically Logging in at Your Workstation

***runas: Perhaps you are a Low Level Helpdesk who uses /runas to spawn a CMD with DA Account, this will result in a TGT for the DA account be cached in LSSAS***

***runas /netonly: TGT will appear after running a network command (*** [ ***\\IP\SYSVOL*** ](https://IP/SYSVOL) ***) or something***

***PsExec*** [ ***\\server*** ](https://server) ***-u user -p pwd cmd – PSExec leaves a TGT providing explicit credentials were defined***

***Remote Desktop (RDP)***

By placing Rubeus in Monitor Mode we can capture the tickets

![](upload://pRR5Z1jS1L4dymhFPBa6utpWsTY.png)

From here passing the ticket is simple with Rubeus

![](upload://tGUWXLMtUb0QwYiUeGif04EbTEB.png)

Now let us verify and try our access to the targeted workstation

![](upload://6hwERryM7V17cDzF4GOz1Qtsrhe.png)

8.- Evil-WinRM

Another method when holding hashes is to use the PSRemote functionality this allows us to execute code onto a workstation if we have the proper privileges which are usually Administrator when executing remote actions or a sort of special privileges that only a certain user contains.

![](upload://9d9AMfjFRFWboA39Stj5C854MWf.png)

References:

https://stealthbits.com/blog/how-to-detect-overpass-the-hash-attacks/

https://attack.stealthbits.com/pass-the-hash-attack-explained

https://book.hacktricks.xyz/windows/ntlm

https://decoder.cloud/2019/03/06/windows-named-pipes-impersonation/

https://en.hackndo.com/ntlm-relay/

https://stealthbits.com/blog/how-to-detect-pass-the-ticket-attacks/</description>
    
    <lastBuildDate>Sat, 04 Sep 2021 18:44:07 +0000</lastBuildDate>
    <category>Red-Team</category>
    <atom:link href="https://0x00sec.org/t/playing-with-hashes-and-tickets/26604.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Playing with Hashes and Tickets</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/playing-with-hashes-and-tickets/26604/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/playing-with-hashes-and-tickets/26604/7</link>
        <pubDate>Wed, 17 Nov 2021 13:17:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26604-7</guid>
        <source url="https://0x00sec.org/t/playing-with-hashes-and-tickets/26604.rss">Playing with Hashes and Tickets</source>
      </item>
      <item>
        <title>Playing with Hashes and Tickets</title>
        <dc:creator><![CDATA[cybren]]></dc:creator>
        <description><![CDATA[
            <p>Useful. Thanks for this awesome post <img src="https://0x00sec.org/images/emoji/twitter/vulcan_salute.png?v=9" title=":vulcan_salute:" class="emoji" alt=":vulcan_salute:"></p>
          <p><a href="https://0x00sec.org/t/playing-with-hashes-and-tickets/26604/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/playing-with-hashes-and-tickets/26604/6</link>
        <pubDate>Sat, 04 Sep 2021 18:44:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26604-6</guid>
        <source url="https://0x00sec.org/t/playing-with-hashes-and-tickets/26604.rss">Playing with Hashes and Tickets</source>
      </item>
      <item>
        <title>Playing with Hashes and Tickets</title>
        <dc:creator><![CDATA[dmcxblue]]></dc:creator>
        <description><![CDATA[
            <p>No way OSCP has this???. Wow I have not seen there stuff in a while might need to catch up with them. I remember the old OSCP but that was around 4 - 5 years ago maybe they changed.</p>
          <p><a href="https://0x00sec.org/t/playing-with-hashes-and-tickets/26604/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/playing-with-hashes-and-tickets/26604/5</link>
        <pubDate>Tue, 20 Jul 2021 14:01:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26604-5</guid>
        <source url="https://0x00sec.org/t/playing-with-hashes-and-tickets/26604.rss">Playing with Hashes and Tickets</source>
      </item>
      <item>
        <title>Playing with Hashes and Tickets</title>
        <dc:creator><![CDATA[c0z]]></dc:creator>
        <description><![CDATA[
            <p>I think this complements the OSCP documentation perfectly <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/playing-with-hashes-and-tickets/26604/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/playing-with-hashes-and-tickets/26604/4</link>
        <pubDate>Tue, 20 Jul 2021 04:59:08 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26604-4</guid>
        <source url="https://0x00sec.org/t/playing-with-hashes-and-tickets/26604.rss">Playing with Hashes and Tickets</source>
      </item>
      <item>
        <title>Playing with Hashes and Tickets</title>
        <dc:creator><![CDATA[Ashh]]></dc:creator>
        <description><![CDATA[
            <p>This is awesome man!! Who needs a password when you have an NTLM hash?</p>
<p>One thing that might be worth including is popping an RDP session via NTLM. This can be done with xfreerdp:<br>
<code>xfreerdp /u:&lt;username&gt; /pth:&lt;lm:nt hash&gt; /v:&lt;target&gt; /d:&lt;domain&gt;</code></p>
          <p><a href="https://0x00sec.org/t/playing-with-hashes-and-tickets/26604/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/playing-with-hashes-and-tickets/26604/3</link>
        <pubDate>Mon, 19 Jul 2021 15:08:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26604-3</guid>
        <source url="https://0x00sec.org/t/playing-with-hashes-and-tickets/26604.rss">Playing with Hashes and Tickets</source>
      </item>
      <item>
        <title>Playing with Hashes and Tickets</title>
        <dc:creator><![CDATA[vict0ni]]></dc:creator>
        <description><![CDATA[
            <p>Nice article! Especially for internal pentesting and AD beginners like myself <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          <p><a href="https://0x00sec.org/t/playing-with-hashes-and-tickets/26604/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/playing-with-hashes-and-tickets/26604/2</link>
        <pubDate>Mon, 19 Jul 2021 08:19:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26604-2</guid>
        <source url="https://0x00sec.org/t/playing-with-hashes-and-tickets/26604.rss">Playing with Hashes and Tickets</source>
      </item>
      <item>
        <title>Playing with Hashes and Tickets</title>
        <dc:creator><![CDATA[dmcxblue]]></dc:creator>
        <description><![CDATA[
            <h1>
<a name="playing-with-hashes-and-tickets-1" class="anchor" href="https://0x00sec.org#playing-with-hashes-and-tickets-1"></a>Playing with Hashes and Tickets</h1>
<p>In a current event I came across an environment where cracking hashes or tickets was not required, or basically impossible, so I started doing my research to keep track on what can we do, when we only have Hashes or Tickets in our possession some are limited to what can be done, but others are more free on what we can achieve so I will work on examples for Windows and Linux Environments.</p>
<p><strong>1.- PtH (Pass the Hash)</strong></p>
<p>Pass the Hash is a credential theft and lateral movement technique in which an attacker can abuse the challenge-and-response nature of NTLM authentication protocol to authenticate as a user with only the NTLM hash of the user’s password. The attacker is thus able to use the compromised account without ever brute-forcing or obtaining the plaintext password.</p>
<p><em><strong>Administrator Privileges are required on the compromised workstation</strong></em></p>
<p>Mimiktaz:</p>
<p>Mimikatz is fairly easy to use this will require us to have already obtain Administrator Privileges (or SYSTEM) to dump the hashes and pass them to start using the accounts privileges over the environment.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/f/9/f9dd8d76353e5727342ce7d2034c6522d5adec59.png" alt="" data-base62-sha1="zEpyZqcr51oBGH4CZ72UGUmkIL7" width="624" height="254"></p>
<p>My focus will be with John as this is an Administrator account on a Remote Workstation</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/a/4aea4b6beca8a2cabdc45f08cb4123aac27d1d5f.png" data-download-href="/uploads/short-url/aGJj102XRfCkmUqtqRDuI7CNzwr.png?dl=1" title="" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/a/4aea4b6beca8a2cabdc45f08cb4123aac27d1d5f_2_618x500.png" alt="" data-base62-sha1="aGJj102XRfCkmUqtqRDuI7CNzwr" width="618" height="500" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/a/4aea4b6beca8a2cabdc45f08cb4123aac27d1d5f_2_618x500.png, https://0x00sec.s3.amazonaws.com/original/3X/4/a/4aea4b6beca8a2cabdc45f08cb4123aac27d1d5f.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/4/a/4aea4b6beca8a2cabdc45f08cb4123aac27d1d5f.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/4/a/4aea4b6beca8a2cabdc45f08cb4123aac27d1d5f_2_10x10.png"></a></div><p></p>
<p>Now if I try to list the C directory of the remote workstation I get what was expected an Access Denied.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/b/7/b77fcf3fc6b9be2bbf38dcc055b8c1f83a59dd10.png" alt="" data-base62-sha1="qbjcSSQaLNDzqTvWJrgsNAuBedW" width="432" height="141"></p>
<p>Now we will pass the hash with mimikatz</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/7/9/797b139aa5ea79b517a6c9eb3e0481e13a047dd1.png" alt="" data-base62-sha1="hkFsMGmfzgR7pq9X04WPGjiVGxP" width="624" height="350"></p>
<p>A new CMD window will prompt and we can check our access to the Remote Workstation</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/4/7/474445acf398d4f1a9315986a50da013fb73e1db.png" alt="" data-base62-sha1="aasaIruQ7QJ8u2GFy5oQb3YUMjx" width="624" height="347"></p>
<p>Mimikatz is great but now let’s give it a try with Linux</p>
<p>Psexec.py from the impacket toolkit is a python version of PsExec for Linux (there are also a variety of tools that achieve the same result but using different methods <em><strong>wmiexec, smbexec.</strong></em> By using these methods the tools will elevate to a SYSTEM shell because of the way they function (Create a Service and these typically run with High Privileges “SYSTEM”)</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/9/a/9adbfc9305278b169ad449216197769b2b12ef6f.png" alt="" data-base62-sha1="m5WQFSIT5BNt7O2XLa5NzUseCKz" width="624" height="292"></p>
<p><strong>2.- SharpNamedPipePTH</strong></p>
<p>(This technique can also be in par with Tokens)</p>
<p>A tool used for authentication via a named pipe for user impersonation. It is based on the Sharp-SMBExec tool, the tool will create a pipe, and pass the hash of the user you are trying to impersonate for authentication this is a great method to execute a binary and use your favorite method to steal or impersonate the token with your favorite C2, in this example I approach it using Cobalt Strike</p>
<p>We will add the username – hash – and binary we are trying to execute and if successful our binary will execute with the token we are trying to impersonate, from here we can inject, steal or any way you would like to approach this situation in my preference I injected a beacon to the process.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/8/8/88a82bf095cc3014e9a017b98ddfc3616a5b7dad.png" alt="" data-base62-sha1="juVf0t6twVO8gZRZGRv58Zz7dHT" width="624" height="206"></p>
<p>Injected:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/c/a/ca838f63dcebe4dccd2ea359a5f44eeb5070b25f.png" alt="" data-base62-sha1="sTwjxWFlBtaobPCo0TqPUulcbLx" width="624" height="58"></p>
<p>But there is a limitation, which I understand why the author mentioned in using the tool when a certain user has only access to certain resources that no one else can, but the limitation is that this technique does not allow network authentication, this is still a great technique just be aware of the limitations.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/0/6/06ad93aeb9112bdb53fcdbc45384a17510878ff8.png" alt="" data-base62-sha1="X4KB5l1NLDJsacpuJtC5Lc3z5K" width="465" height="102"></p>
<p><strong>3.- CrackMapExec</strong></p>
<p>A swiss army for pentesting networks, authored by byt3bl33d3r and built using Python, Powershell, and other languages it is meant to be the swiss knife for Networking it is an amazing to compromise AD, capture hashes, pth, execute code, enumeration and more. It’s usage is straight forward when passing the hash.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/d/5/d58d3c93f7d8fe5950d5d96ee8c0aea85d51b39e.png" alt="" data-base62-sha1="utaiyuAAh62o6mViZ9nX17gqayG" width="624" height="92"></p>
<p>Here pwned just tells us that the user is a local Administrator on the Workstation it also contains a great feature to Locally Authenticate to the workstation with no parameters CrackMapExec will find the Domain Name and use that for authentication but if we add “–local-auth” we will authenticate locally assuming the user only is a local account and not a domain account.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/7/9/79db0ccda090790d690995478336b03f7db0c74a.png" alt="" data-base62-sha1="hnZ5manKjwQyLXz912fSc0dRM5I" width="624" height="50"></p>
<p>You can tell the Domain switched to the workstations name and tried to authenticate as a local user, this is something to be aware off as sometimes we have compromised a user but not a Domain User.</p>
<p><strong>4.- Over-Pass-the-Hash</strong></p>
<p>Over Pass the hash is an attack that allows an intruder to authenticate as a user without having access to the user’s password. This is a technique where an attacker uses the NTLM hashes for authentication and bypass the standard authentication step clear text password for login. This technique is a combination of passing the hash and passing the ticket, so it’s called Over Pass the Hash. Allows the creating of Kerberos tickets from NTLM hashes or AES keys that allows access to the resource service that required Kerberos authentication.</p>
<p>I could not duplicate the technique as it seems I am not gaining the same keys that are show in the example.</p>
<p>Example:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/c/4/c48e17301ca672c2fe6da9d8b89ba41cf9348dd4.png" alt="" data-base62-sha1="s2O0JCguBDWLEDo8pLB7mCvRZ9G" width="480" height="415"></p>
<p>Mine:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/3/7/3786f81c389b021d2963b1996651c91f7713e949.png" alt="" data-base62-sha1="7VdqINSwNv9TkJ48m2MCbx5VDHr" width="624" height="382"></p>
<p>Please just look at the references below</p>
<p><strong>5.- NTLM Relaying</strong></p>
<p>In this section we will be working with the technique NTLM Relaying, this will replay the NTLM hash to another workstation and execute code, if the user has administrator privileges or permission that allow WRITE access to an SMB Share, also signing has to be disabled you can test this with crackmapexec tool and view the permissions as show below:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/a/8/a8d28fa77d919887138bb222616b0365aef40f09.png" alt="" data-base62-sha1="o5tl5NncM3CC38fTDBlBf4KL5nX" width="624" height="181"></p>
<p>So jwinchester has the proper permissions on to the targeted workstation so with this we can use the ntlmrelay technique to upload and execute a beacon. As we are aware John is an Administrator on the ECHO Workstation we can target this machine with ntlmrelay with the “-t” parameter, but I will demonstrate Code Execution and a binary to be execute on the Target workstation we will also remember to enable smb2support as this will not work with today’s network since SMBv1 is pretty old:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/c/9/c904131fb53481e90c6a2f30724f1d3221ae61b9.png" alt="" data-base62-sha1="sGgHuPPTiGS4PIMJkhCC5TKaAlz" width="518" height="123"></p>
<p>Now we wait for the user to try and access our target machine which we can use other methods such as Tainted Shares, ShortCut Links, or any other methods that you are familiar with to capture the Net-NTLM hash. In the following example I just forced it with the user by trying to list a fake share:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/1/f/1f156566b22f6ab2c325ab8ab8844c9129f0ef9f.png" alt="" data-base62-sha1="4qYDPOQAGvdNDbwxo0fXsCx6O51" width="349" height="84"></p>
<p>When this happens the user sends the NTLM hash and we relay it to another box where the user is a Local Administrator, with this we get Code Execution.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/c/b/cb3b16782fa6fdfd2c7949fa5050a3825ad9a5f1.png" alt="" data-base62-sha1="sZRwkwjjvXVzK2xBFmzGmN8QPN7" width="624" height="388"></p>
<p>What about a beacon that we hold on our attack box? Will use the “-e” parameter to use this:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/8/9/89ec54e941e58307e41dc70ee5ac6a28acf14c91.png" alt="" data-base62-sha1="jG7KBJ18rIuf3yf5Bfh2Fqy3jtT" width="624" height="328"></p>
<p>We now have a beacon with SYSTEM privileges on the workstation:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/3/d/3deb69776e87812b2f7d003b1916bacad6c78700.png" alt="" data-base62-sha1="8PLuB9kjCtTei4TG4ssWzMoWdP2" width="624" height="65"></p>
<p><strong>6.- PipeServerImpersonate.PS1</strong></p>
<p><em><strong>Administrator Privileges</strong></em></p>
<p>Named pipes are nothing new, its an old technology you will find in many operating systems (Unix, Windows,…) to permit asynchronous or synchronous inter-process communication (IPC) on the same computer or on different computers across the network, named pipes are a method for I/O that is great for also executing code to other workstations, Psexec being an example of it.</p>
<p>You can view these easily yourself using PowerShell or pipelist from SysInternals, now let’s try the PowerShell script.</p>
<p>We can see below that by utilizing the script and connecting to the Pipe , we can connect to it directly via CMD just by echoing anything to it.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/6/5/65b857725c20e21415b0536b132649f0862a86ab.png" alt="" data-base62-sha1="evRaOXC9wsbqwTIv0hjkD3JV6hd" width="582" height="324"></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/8/8/887b80218a28c53a65d40a632e018bd5abf91581.png" alt="" data-base62-sha1="jtnx91S6EmhfWrzzGdzNeVccy77" width="515" height="174"></p>
<p>Now we go back to our host where we see the new notepad process executing but with jwinchesters token.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/a/1/a107356db1893862eb4704a83b68cc73008d3fe5.png" alt="" data-base62-sha1="mYwjFMCOKpcV9CBETZgvuGYHdPL" width="624" height="22"></p>
<p>Now we can inject a beacon to this process and impersonate the user, but this also comes with limitations no Network Access, so be wary of this not being an option to Lateral Move more to access local resources specifically for a user.</p>
<p><strong>7.- Pass the Ticket</strong></p>
<p>In pass the tickets attacks, an attacker is able to extract a Kerberos Ticket Granting Ticket (TGT) from LSASS memory on a system and then use this on another system to request Kerberos service tickets (TGS) to gain access to a network resource.</p>
<p>One primary difference between pass-the-hash and pass-the-ticket, is that Kerberos TGT tickets expire (10 hours by default) whereas NTLM hashes only change when the user changes their password. So a TGT ticket must be used within its lifetime, or it can be renewed for a longer period of time (7 days).</p>
<p>Tools like mimikatz can perform this attack. First let us confirm that we receive an access denied with our current user</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/6/3/639ed3def9e4cc37b7d019d9dc38989367f7e926.png" alt="" data-base62-sha1="edhytY2RID1p7ZJrvz4VdkRljNk" width="450" height="173"></p>
<p>Now with Rubeus we can monitor the Network for tickets, we can force a ticket into our current session by authenticating with the user we are trying to compromise (Just a Demo, there might be other methods to achieve this in an active Network). I focused on this target since the user has CIFS privilege’s over Desktop-Delta.</p>
<p>Some other methods to capture the tickets is if you have the credentials and try to start an Interactive Logon-Session</p>
<p>Local Login: Physically Logging in at Your Workstation</p>
<p><em><strong>runas: Perhaps you are a Low Level Helpdesk who uses /runas to spawn a CMD with DA Account, this will result in a TGT for the DA account be cached in LSSAS</strong></em></p>
<p><em><strong>runas /netonly: TGT will appear after running a network command (</strong></em> <a href="https://IP/SYSVOL" rel="noopener nofollow ugc"> <em><strong>\IP\SYSVOL</strong></em> </a> <em><strong>) or something</strong></em></p>
<p><em><strong>PsExec</strong></em> <a href="https://server" rel="noopener nofollow ugc"> <em><strong>\server</strong></em> </a> <em><strong>-u user -p pwd cmd – PSExec leaves a TGT providing explicit credentials were defined</strong></em></p>
<p><em><strong>Remote Desktop (RDP)</strong></em></p>
<p>By placing Rubeus in Monitor Mode we can capture the tickets</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/b/5/b54cdc77cf82f3c7d7f0053ddb6431c31444709e.png" alt="" data-base62-sha1="pRR5Z1jS1L4dymhFPBa6utpWsTY" width="624" height="432"></p>
<p>From here passing the ticket is simple with Rubeus</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/d/0/d01908f3e834896cdf11f735ae2297f452b934d9.png" alt="" data-base62-sha1="tGUWXLMtUb0QwYiUeGif04EbTEB" width="624" height="496"></p>
<p>Now let us verify and try our access to the targeted workstation</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/3X/2/c/2c083cfdd1d51eec6b6542e222c2165b034814c8.png" alt="" data-base62-sha1="6hwERryM7V17cDzF4GOz1Qtsrhe" width="624" height="403"></p>
<p>8.- Evil-WinRM</p>
<p>Another method when holding hashes is to use the PSRemote functionality this allows us to execute code onto a workstation if we have the proper privileges which are usually Administrator when executing remote actions or a sort of special privileges that only a certain user contains.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/0/40903db763b5929dbe8bd3351acfedcdd300520b.png" data-download-href="/uploads/short-url/9d9AMfjFRFWboA39Stj5C854MWf.png?dl=1" title="" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/0/40903db763b5929dbe8bd3351acfedcdd300520b_2_690x234.png" alt="" data-base62-sha1="9d9AMfjFRFWboA39Stj5C854MWf" width="690" height="234" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/0/40903db763b5929dbe8bd3351acfedcdd300520b_2_690x234.png, https://0x00sec.s3.amazonaws.com/original/3X/4/0/40903db763b5929dbe8bd3351acfedcdd300520b.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/4/0/40903db763b5929dbe8bd3351acfedcdd300520b.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/4/0/40903db763b5929dbe8bd3351acfedcdd300520b_2_10x10.png"></a></div><p></p>
<p>References:</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/3X/a/a/aa543283a503e8319f2824577104712253727dc7.png" class="site-icon" width="192" height="192">
      <a href="https://stealthbits.com/blog/how-to-detect-overpass-the-hash-attacks/" target="_blank" rel="noopener nofollow ugc" title="07:16PM - 26 February 2019">Stealthbits Technologies – 26 Feb 19</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:240/262;"><img src="https://0x00sec.s3.amazonaws.com/original/3X/6/5/654d5baad1352b58212294c54a4fd33f2985f33d.png" class="thumbnail" width="240" height="262"></div>

<h3><a href="https://stealthbits.com/blog/how-to-detect-overpass-the-hash-attacks/" target="_blank" rel="noopener nofollow ugc">How to Detect Overpass-the-Hash Attacks</a></h3>

<p>This post takes a look at Overpass-The-Hash attack. This is a combination of both Pass-The-Hash &amp; Pass-The-Ticket attacks. Click in to see how it works.</p>

  <p><span class="label1">Est. reading time: 6 minutes</span>
    </p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/3X/c/0/c049447817e592a1187ff438934c9a3e4570dd19.png" class="site-icon" width="32" height="32">
      <a href="https://attack.stealthbits.com/pass-the-hash-attack-explained" target="_blank" rel="noopener nofollow ugc" title="06:28PM - 09 September 2020">Attack Catalog – 9 Sep 20</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:100/56;"><img src="https://0x00sec.s3.amazonaws.com/original/3X/3/0/30473d7f8d6e345bd4d3c2120304ae3a4d5317fa.jpeg" class="thumbnail" width="100" height="56"></div>

<h3><a href="https://attack.stealthbits.com/pass-the-hash-attack-explained" target="_blank" rel="noopener nofollow ugc">Pass the Hash Attack Tutorial | Lateral Movement using LanMan or NTLM hashes</a></h3>

<p>Pass the Hash is a technique that enables an attacker (typically using Mimikatz) to leverage the LanMan or NTLM hashes of a user’s password. Click in for more!</p>

  <p><span class="label1">Est. reading time: 7 minutes</span>
    </p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p><a href="https://book.hacktricks.xyz/windows/ntlm" class="onebox" target="_blank" rel="noopener nofollow ugc">https://book.hacktricks.xyz/windows/ntlm</a></p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://s1.wp.com/i/favicon.ico" class="site-icon" width="32" height="32">
      <a href="https://decoder.cloud/2019/03/06/windows-named-pipes-impersonation/" target="_blank" rel="noopener nofollow ugc" title="02:16PM - 06 March 2019">Decoder's Blog – 6 Mar 19</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:440/183;"><img src="https://decoderblogblog.files.wordpress.com/2019/03/pipe1.jpg?fit=440%2C330" class="thumbnail" width="440" height="183"></div>

<h3><a href="https://decoder.cloud/2019/03/06/windows-named-pipes-impersonation/" target="_blank" rel="noopener nofollow ugc">Windows Named Pipes &amp; Impersonation</a></h3>

<p>&nbsp; Named pipes are nothing new,&nbsp; it’s a an old technology you will find in many operating systems (Unix, Windows,…) to permit asynchronous or synchronous inter-process communication…</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/3X/2/5/25be82a3d49223d7932fc699fa5226a1482efc57.png" class="site-icon" width="192" height="192">
      <a href="https://en.hackndo.com/ntlm-relay/" target="_blank" rel="noopener nofollow ugc" title="10:11AM - 01 April 2020">hackndo – 1 Apr 20</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/187;"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/f/6/f630aa66b5ce8fabf42109ed72b97df57b9e8633_2_690x187.png" class="thumbnail" width="690" height="187" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/f/6/f630aa66b5ce8fabf42109ed72b97df57b9e8633_2_690x187.png, https://0x00sec.s3.amazonaws.com/optimized/3X/f/6/f630aa66b5ce8fabf42109ed72b97df57b9e8633_2_1035x280.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/f/6/f630aa66b5ce8fabf42109ed72b97df57b9e8633.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/f/6/f630aa66b5ce8fabf42109ed72b97df57b9e8633_2_10x10.png"></div>

<h3><a href="https://en.hackndo.com/ntlm-relay/" target="_blank" rel="noopener nofollow ugc">NTLM Relay</a></h3>

<p>NTLM relay is a technique of standing between a client and a server to perform actions on the server while impersonating the client. Protections such as SMB signing or MIC allow to limit the actions of an attacker. This article goes into detail about...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/3X/a/a/aa543283a503e8319f2824577104712253727dc7.png" class="site-icon" width="192" height="192">
      <a href="https://stealthbits.com/blog/how-to-detect-pass-the-ticket-attacks/" target="_blank" rel="noopener nofollow ugc" title="08:33PM - 19 February 2019">Stealthbits Technologies – 19 Feb 19</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:240/262;"><img src="https://0x00sec.s3.amazonaws.com/original/3X/6/5/654d5baad1352b58212294c54a4fd33f2985f33d.png" class="thumbnail" width="240" height="262"></div>

<h3><a href="https://stealthbits.com/blog/how-to-detect-pass-the-ticket-attacks/" target="_blank" rel="noopener nofollow ugc">How to Detect Pass-the-Ticket Attacks</a></h3>

<p>In this post we dive into how pass the ticket attacks work &amp; detection. In a pass-the-ticket attack, an attacker is able to extract a Kerberos TGT (Ticket-Granting-Ticket).</p>

  <p><span class="label1">Est. reading time: 7 minutes</span>
    </p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/playing-with-hashes-and-tickets/26604/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/playing-with-hashes-and-tickets/26604/1</link>
        <pubDate>Sun, 18 Jul 2021 21:17:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26604-1</guid>
        <source url="https://0x00sec.org/t/playing-with-hashes-and-tickets/26604.rss">Playing with Hashes and Tickets</source>
      </item>
  </channel>
</rss>
