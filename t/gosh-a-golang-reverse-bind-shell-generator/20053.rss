<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>GoSH, a Golang reverse/bind shell generator</title>
    <link>https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053</link>
    <description>Hello 0x00sec !

Having to spend plenty of time in home due to the coronavirus outbreak, I decided to write a simple (and hopefully useful :slight_smile: ) tool that automates generation of shells in Golang. More detailed info is available in the README, but I think that the usage is self explanatory. 

DISCLAIMER: I have started learning Go just a few days ago, so the code probably will look shitty to the more experienced wielders of this beautiful language. I would love to see your contributions and ideas for improvements :&gt;

Here is the link to the repository:
[https://github.com/TheSecondSun/GoSH](https://github.com/TheSecondSun/GoSH)

Best wishes to everyone</description>
    
    <lastBuildDate>Thu, 26 Mar 2020 22:02:40 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>GoSH, a Golang reverse/bind shell generator</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053/7</link>
        <pubDate>Sat, 25 Jul 2020 10:45:18 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20053-7</guid>
        <source url="https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053.rss">GoSH, a Golang reverse/bind shell generator</source>
      </item>
      <item>
        <title>GoSH, a Golang reverse/bind shell generator</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Tyr4n7" data-post="5" data-topic="20053">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/tyr4n7/40/10969_2.png" class="avatar"> Tyr4n7:</div>
<blockquote>
<p>I assumed that as well, but any good public GitHub project should include full specifications on the project and its files to let other Devs continue the work. Cheers</p>
</blockquote>
</aside>
<p>well I’ll give you that but for a repo with only src and the compiled binary there’s not much detective work to do.</p>
<aside class="quote no-group" data-username="Tyr4n7" data-post="5" data-topic="20053">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/tyr4n7/40/10969_2.png" class="avatar"> Tyr4n7:</div>
<blockquote>
<p>I never used VIM, wouldn’t have known, but what does it store and what information can be recovered from such files?</p>
</blockquote>
</aside>
<p>Like my code block states these <code>filename.swp</code> files hold all the made changes to <code>filename</code> since opening it for editing. These files are non-volatile, meaning they stay as long on disk as you do not close the open buffer (in this case a file to edit) properly. Now if you e.g. get a power outage or your terminal crashes you’d lose all your unsaved changes you were editing. However, since the .swp files exist you can recover the already made changes and continue working where you left of.</p>
<p>Furthermore, they serve as an actual lock file! Try opening a file in vim and in another terminal try opening the same file again. In the second terminal you’ll get a warning that the file you’re trying to open is already opened and changes you were about to make in this instance may cause troubles.</p>
<p>Nowadays in days of full fledged IDEs with permanent auto save features these <code>*.swp file</code> could be seen as <em>relicts</em> from old times. Finally, when you use <code>sublime</code>, or <code>vscode</code> and you close your editor without saving all your files and open it up again later on (even after reboot) your unsaved but opened files are still there. That’s the same magic vim does for ages but less obvious to the user <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> .</p>
<p>But that’s enough off topic for now. If you have further questions let’s move this to discord/dm</p>
          <p><a href="https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053/6</link>
        <pubDate>Thu, 26 Mar 2020 20:37:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20053-6</guid>
        <source url="https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053.rss">GoSH, a Golang reverse/bind shell generator</source>
      </item>
      <item>
        <title>GoSH, a Golang reverse/bind shell generator</title>
        <dc:creator><![CDATA[Tyr4n7]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>without looking at the repo I assume <code>gosh</code> (short for go shell) is the actual shell generator binary</p>
</blockquote>
<p>I assumed that as well, but any good  public GitHub project should include full specifications on the project and its files to let other Devs continue the work. Cheers</p>
<blockquote>
<p>The <code>*.swp</code> files are temporary lock files e.g. created by vim to hold meta information about changes made to these files. So they are not relevant to the project and can safely be deleted (which they should be automatically when closing vim properly)</p>
</blockquote>
<p>I never used VIM, wouldn’t have known, but what does it store and what information can be recovered from such files?<br>
reglarless, he removed the <code>*.swp</code> files in the last commit.</p>
          <p><a href="https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053/5</link>
        <pubDate>Thu, 26 Mar 2020 19:51:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20053-5</guid>
        <source url="https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053.rss">GoSH, a Golang reverse/bind shell generator</source>
      </item>
      <item>
        <title>GoSH, a Golang reverse/bind shell generator</title>
        <dc:creator><![CDATA[ricksanchez]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/tyr4n7">@Tyr4n7</a> without looking at the repo I assume <code>gosh</code> (short for go shell) is the actual shell generator binary<br>
The <code>*.swp</code> files are temporary lock files e.g. created by vim to hold meta information about changes made to these files. So they are not relevant to the project and can safely be deleted (which they should be automatically when closing vim properly)</p>
<p>Context:</p>
<pre><code class="lang-auto">==============================================================================
 1. The swap file                                        swap-file

 Vim stores the things you changed in a swap file.  Using the original file
 you started from plus the swap file you can mostly recover your work.
</code></pre>
          <p><a href="https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053/4</link>
        <pubDate>Thu, 26 Mar 2020 06:28:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20053-4</guid>
        <source url="https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053.rss">GoSH, a Golang reverse/bind shell generator</source>
      </item>
      <item>
        <title>GoSH, a Golang reverse/bind shell generator</title>
        <dc:creator><![CDATA[Tyr4n7]]></dc:creator>
        <description><![CDATA[
            <p>Pretty cool project. I have a question though, what are these files? I don’t see anything about 'em in the README / Source Code</p>
<p><code>https://github.com/TheSecondSun/GoSH/blob/master/gosh</code><br>
<code>https://github.com/TheSecondSun/GoSH/blob/master/.gosh.go.swp</code><br>
<code>https://github.com/TheSecondSun/GoSH/blob/master/templates/.bind.go.swp</code><br>
<code>https://github.com/TheSecondSun/GoSH/blob/master/templates/.reverse.go.swp</code></p>
          <p><a href="https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053/3</link>
        <pubDate>Thu, 26 Mar 2020 02:51:05 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20053-3</guid>
        <source url="https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053.rss">GoSH, a Golang reverse/bind shell generator</source>
      </item>
      <item>
        <title>GoSH, a Golang reverse/bind shell generator</title>
        <dc:creator><![CDATA[vce0wod]]></dc:creator>
        <description><![CDATA[
            <p>Bless you,hahahahahaha</p>
          <p><a href="https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053/2</link>
        <pubDate>Wed, 25 Mar 2020 20:06:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20053-2</guid>
        <source url="https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053.rss">GoSH, a Golang reverse/bind shell generator</source>
      </item>
      <item>
        <title>GoSH, a Golang reverse/bind shell generator</title>
        <dc:creator><![CDATA[TSS]]></dc:creator>
        <description><![CDATA[
            <p>Hello 0x00sec !</p>
<p>Having to spend plenty of time in home due to the coronavirus outbreak, I decided to write a simple (and hopefully useful <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> ) tool that automates generation of shells in Golang. More detailed info is available in the README, but I think that the usage is self explanatory.</p>
<p>DISCLAIMER: I have started learning Go just a few days ago, so the code probably will look shitty to the more experienced wielders of this beautiful language. I would love to see your contributions and ideas for improvements :&gt;</p>
<p>Here is the link to the repository:<br>
<a href="https://github.com/TheSecondSun/GoSH" rel="nofollow noopener">https://github.com/TheSecondSun/GoSH</a></p>
<p>Best wishes to everyone</p>
          <p><a href="https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053/1</link>
        <pubDate>Wed, 25 Mar 2020 18:45:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-20053-1</guid>
        <source url="https://0x00sec.org/t/gosh-a-golang-reverse-bind-shell-generator/20053.rss">GoSH, a Golang reverse/bind shell generator</source>
      </item>
  </channel>
</rss>
