<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Reflective DLL Injection - AV detects at runtime</title>
    <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307</link>
    <description>Hello people

(This is my first post on 0x00sec)

I have a DLL injector - say injector.exe - that uses the Reflective DLL Injection technique. When executed, all the steps until VirtualAllocEx and WriteProcessMemory run perfectly (I put up debug print statements which show up in the cmd indicating the flow of execution). But, when it comes to the step of executing the DLL using CreateRemoteThread, an AV called &#39;eScan&#39; is blocking the injector.exe. I have tried using RtlCreateUserThread and NtCreateThreadEx instead of CreateRemoteThread, but to no avail.

Can anyone please tell me why is it happening?

Thank you</description>
    
    <lastBuildDate>Tue, 10 Jul 2018 05:56:01 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/24">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/24</link>
        <pubDate>Sun, 29 Jul 2018 05:30:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-24</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>The CONTEXT struct can be found here: <a href="https://www.nirsoft.net/kernel_struct/vista/CONTEXT.html">https://www.nirsoft.net/kernel_struct/vista/CONTEXT.html</a></p>
<pre><code class="lang-auto">typedef struct _CONTEXT
{
     ULONG ContextFlags;
     ULONG Dr0;
     ULONG Dr1;
     ULONG Dr2;
     ULONG Dr3;
     ULONG Dr6;
     ULONG Dr7;
     FLOATING_SAVE_AREA FloatSave;
     ULONG SegGs;
     ULONG SegFs;
     ULONG SegEs;
     ULONG SegDs;
     ULONG Edi;
     ULONG Esi;
     ULONG Ebx;
     ULONG Edx;
     ULONG Ecx;
     ULONG Eax;
     ULONG Ebp;
     ULONG Eip;
     ULONG SegCs;
     ULONG EFlags;
     ULONG Esp;
     ULONG SegSs;
     UCHAR ExtendedRegisters[512];
} CONTEXT, *PCONTEXT;
</code></pre>
<p>which contains the “context” of the thread. From here, I assume you can find the stack information.</p>
<p>As for the start address, you can try something like this: <a href="https://stackoverflow.com/questions/11147846/how-to-retrieve-starting-address-of-a-thread-in-windows">https://stackoverflow.com/questions/11147846/how-to-retrieve-starting-address-of-a-thread-in-windows</a>. Personally, I’ve never done this before so I cannot confirm anything.</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/23">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/23</link>
        <pubDate>Tue, 10 Jul 2018 05:56:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-23</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[lnl]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>…in connection with the above comment…</p>
</blockquote>
<p>In the Process Explorer, we can see the threads of a process, and also the stack of the thread, that shows which DLL functions are associated with which thread.</p>
<p>E.g., thread no. 6068 has its start address at WINMM.dll!timeEndPeriod+0x147</p>
<p>Is it possible to get this data from inside Visual Studio? I believe it is possible because Process Explorer is doing it. But how? How do we get the start address associated with a ThreadId?</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/a/a9bbc72427a6b03e617b528e02f0ab3002189930.png" alt="pex" data-base62-sha1="odx0ipVorMjRnEoqJWzJaqRvonC" width="690" height="269"></p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/22">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/22</link>
        <pubDate>Tue, 10 Jul 2018 04:42:15 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-22</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[lnl]]></dc:creator>
        <description><![CDATA[
            <p>Hi <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a></p>
<p>I’ve tried injecting using QueueUserAPC. It works, but the target process crashes sometimes.</p>
<p>Is there any way I can get the details (like the Stack) of the enumerated threads of a target process? I was hoping that we can target better which threads we can inject if we have some useful info about the thread.</p>
<p>And, what information can I extract from the CONTEXT of a thread?</p>
<p>Thank you</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/21">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/21</link>
        <pubDate>Tue, 10 Jul 2018 04:23:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-21</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="lnl" data-post="19" data-topic="7307">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/letter_avatar_proxy/v4/letter/l/d78d45/40.png" class="avatar"> lnl:</div>
<blockquote>
<p>suspend and inject is a definite no-go in terms of reliability, right?</p>
</blockquote>
</aside>
<p>I don’t think this is the case. From what I can understand, you are just completely hijacking a thread by setting the instruction pointer at the entry point of your DLL without returning execution back to it. It wouldn’t be surprising that something goes wrong with the process.</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/20">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/20</link>
        <pubDate>Fri, 06 Jul 2018 07:19:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-20</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[lnl]]></dc:creator>
        <description><![CDATA[
            <p>I knew that it could be unstable, but didn’t know the gravity of it. So, suspend and inject is a definite no-go in terms of reliability, right?</p>
<p>I haven’t tried them. I will try and get back to you.</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/19">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/19</link>
        <pubDate>Fri, 06 Jul 2018 07:15:03 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-19</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="lnl" data-post="17" data-topic="7307">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/letter_avatar_proxy/v4/letter/l/d78d45/40.png" class="avatar"> lnl:</div>
<blockquote>
<p>I’ve tried suspending a remote thread (already existing), changing its context structure, and resuming it.</p>
</blockquote>
</aside>
<p>Oh wow, that actually sounds incredibly unstable to me. I’ve never even attempted something like this fearing that the process will just break.</p>
<aside class="quote no-group" data-username="lnl" data-post="17" data-topic="7307">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/letter_avatar_proxy/v4/letter/l/d78d45/40.png" class="avatar"> lnl:</div>
<blockquote>
<p>This problem persists irrespective of the kind of DLL used for injection ( basic message box DLL or keylogger DLL)</p>
<ol start="2">
<li>and when I inject a keylogger DLL, the target process becomes Not Responding, immediately after I take focus back to the target process</li>
</ol>
<p>This I’m thinking could be because of the while loop that is inherent to a keylogger DLL. If that’s the case, can you suggest how can I go about it? If not, then what could be the reason?</p>
</blockquote>
</aside>
<p>I’m not sure about how your keylogger works so I cannot comment on anything about that. Of course, if the process has some sort of GUI and the thread that handles the Windows messages does not operate correctly, it may cause the “Not Responding” message.</p>
<p>Have you tried what I previously suggested? Using APC or SetWindowsHookEx DLL injection.</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/18">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/18</link>
        <pubDate>Fri, 06 Jul 2018 07:02:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-18</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[lnl]]></dc:creator>
        <description><![CDATA[
            <p>Hi <a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a></p>
<p>The AV is simply flagging any exe which calls CreateRemoteThread or any of its variants.</p>
<p>So, I’ve tried suspending a remote thread (already existing), changing its context structure, and resuming it. I’m encountering 2 issues here -</p>
<ol>
<li>The injected DLL is not executed until I bring focus back to the target process, i.e.</li>
</ol>
<ul>
<li>click on the target process in the task bar ( if it’s minimized ) or</li>
<li>alt-tab into the target process or take my mouse pointer to it and click on it ( if it’s in the background )</li>
</ul>
<p>This problem persists irrespective of the kind of DLL used for injection ( basic message box  DLL or keylogger DLL)</p>
<ol start="2">
<li>and when I inject a keylogger DLL, the target process becomes Not Responding, immediately after I take focus back to the target process</li>
</ol>
<p>This I’m thinking could be because of the while loop that is inherent to a keylogger DLL. If that’s the case, can you suggest how can I go about it? If not, then what could be the reason?</p>
<p>Thank you</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/17">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/17</link>
        <pubDate>Fri, 06 Jul 2018 06:44:27 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-17</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[lnl]]></dc:creator>
        <description><![CDATA[
            <p>Sure. It will take some time. I’ll keep you posted. Thank you.</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/16">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/16</link>
        <pubDate>Wed, 04 Jul 2018 07:12:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-16</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Try with a different DLL injection method like APC or SetWindowsHookEx.</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/15</link>
        <pubDate>Wed, 04 Jul 2018 07:09:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-15</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[lnl]]></dc:creator>
        <description><![CDATA[
            <p>Even with a non-malicious payload, with just a MessageBox, the injection is getting detected. The AV detects the file <code>injector.exe</code> using Behaviour Detection and quarantines it.</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/14</link>
        <pubDate>Wed, 04 Jul 2018 07:04:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-14</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>It could be possible that your process is getting triggered within the kernel using a driver belonging to the AV via <code>PsSetCreateThreadNotifyRoutine</code> to detect creation of new threads which might also stop any other standard DLL injection method (maybe they could still work, I’m not 100% sure). Is your payload malicious? If it is, perhaps try using a non-malicious payload and see if the results are the same. Or perhaps you could deobfuscate your payload on runtime after injection.</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/13</link>
        <pubDate>Wed, 04 Jul 2018 06:45:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-13</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[lnl]]></dc:creator>
        <description><![CDATA[
            <p><code>CreateRemoteThread</code><br>
48 83 ec 48 48 8b 84 24 80 0</p>
<p><code>RtlCreateUserThread</code><br>
48 83 ec 68 41 80 f8 1 f 85</p>
<p><code>NtCreateThreadEx</code><br>
4c 8b d1 b8 a5 0 0 0 f 5</p>
<p>I am using either <code>CreateRemoteThread, RtlCreateUserThread, NtCreateThreadEx</code> depending on a commandline argument. All 3 are caught by the AV at realtime, when they are being executed. Say, if there are no AV hooks on these functions and no AV-related DLLs loaded in my process, what other trick by the AV could be at play?</p>
<p>The AV detecting this injection on my VM is QuickHeal. In a <a href="https://blogs.quickheal.com/analysis-fileless-malware-quick-heal-security-labs/" rel="nofollow noopener">QuickHeal blog post</a>, they discuss how malware uses ‘CreateRemoteThread’ and API such as, ‘VirtualAlloc’, ‘VirtualAllocEx’, ‘WriteProcessMemory’, and ‘ReadProcessMemory’.<br>
I think it’s fair to assume that they do check for the execution of these functions to detect injection. If yes, then how else could they be doing it?</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/12</link>
        <pubDate>Wed, 04 Jul 2018 06:37:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-12</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>They look normal. You were saying that <code>CreateThread</code> was the issue? Perhaps the disassembly there may be interesting.</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/11</link>
        <pubDate>Wed, 04 Jul 2018 06:19:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-11</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[lnl]]></dc:creator>
        <description><![CDATA[
            <p>VirtualAllocEx<br>
48 83 ec 38 8b 44 24 60 89 44</p>
<p>WriteProcessMemory<br>
48 83 ec 38 48 8b 44 24 60 48</p>
<p>ReadProcessMemory<br>
48 83 ec 38 48 8b 44 24 60 48</p>
<p>NtAllocateVirtualMemory<br>
4c 8b d1 b8 15 0 0 0 f 5</p>
<p>NtWriteVirtualMemory<br>
4c 8b d1 b8 37 0 0 0 f 5</p>
<p>NtReadVirtualMemory<br>
4c 8b d1 b8 3c 0 0 0 f 5</p>
<p>My machine is a Win 7 x64 VM</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/10</link>
        <pubDate>Wed, 04 Jul 2018 05:59:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-10</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>The disassembly does not look like anything I am familiar with, but can you check the corresponding  <code>NtXxx</code> functions of those? e.g. <code>WriteProcessMemory</code> is <code>NtWriteVirtualMemory</code>. Also, is your architecture x86 or x64? You can also try extracting the disassembly in a debugger if that’s easier or more convenient.</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/9</link>
        <pubDate>Wed, 04 Jul 2018 05:48:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-9</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[lnl]]></dc:creator>
        <description><![CDATA[
            <p>The first 10 bytes of these 3 functions -</p>
<p>VirtualAllocEx<br>
48 83 ec 38 8b 44 24 60 89 44</p>
<p>WriteProcessmemory<br>
48 83 ec 38 48 8b 44 24 60 48</p>
<p>ReadProcessMemory<br>
48 83 ec 38 48 8b 44 24 60 48</p>
<p>These bytes are not suspicious, right?<br>
What could be the way forward?</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/8</link>
        <pubDate>Wed, 04 Jul 2018 05:36:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-8</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>You might be able to do it like so:</p>
<pre><code class="lang-auto">FARPROC VirtualAllocExFunc = GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "VirtualAllocEx");

BYTE bytes[10];
memcpy(bytes, VirtualAllocExFunc, sizeof(bytes));

// check if bytes are instructions to hook
</code></pre>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/7</link>
        <pubDate>Wed, 04 Jul 2018 05:21:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-7</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[lnl]]></dc:creator>
        <description><![CDATA[
            <p>Hi dtm</p>
<blockquote>
<p>You can either look for suspicious modules in the memory space (e.g. Avast has modules named aswhookx.dll or similar)</p>
</blockquote>
<p>I have used EnumProcessModules to list loaded modules and there are no suspicious modules, they are all trusted windows DLLs.</p>
<blockquote>
<p>or you can check each function’s beginning bytes and look for instructions that correspond to software interrupts or jumps to suspicious locations (e.g. a WinAPI function that jumps to an address space that is marked as executable but has no name).</p>
</blockquote>
<p>I need to get the entrypoint to the imported functions (like VirtualAllocEx, WriteProcessMemory, createRemoteThread) to check their beginning bytes, right? How do I get the entrypoint to these imported functions?</p>
<p>Pardon me if my doubts are too obvious or silly. I’m a beginner.<br>
I will document all of these learnings in a blog post for posterity.</p>
<p>Thanks</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/6</link>
        <pubDate>Wed, 04 Jul 2018 05:14:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-6</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>You can either look for suspicious modules in the memory space (e.g. Avast has modules named aswhookx.dll or similar) or you can check each function’s beginning bytes and look for instructions that correspond to software interrupts or jumps to suspicious locations (e.g. a WinAPI function that jumps to an address space that is marked as executable but has no name).</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/5</link>
        <pubDate>Tue, 03 Jul 2018 10:06:13 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-5</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[lnl]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a>, how do I check for hooks installed by the AV?</p>
<p>P.S. Sorry for the delayed response. I was on leave.</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/4</link>
        <pubDate>Tue, 03 Jul 2018 09:33:51 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-4</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>Can you check your process’s memory space for any of the AV’s mapped DLLs or if there are any hooks installed in the API functions?</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/3</link>
        <pubDate>Fri, 29 Jun 2018 06:54:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-3</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[lnl]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/dtm">@dtm</a> , I’ve read your post on Reflective DLL Injection. Big fan of your content. Can you please shed some light on this?</p>
<p>Thanks</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/2</link>
        <pubDate>Fri, 29 Jun 2018 05:41:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-2</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
      <item>
        <title>Reflective DLL Injection - AV detects at runtime</title>
        <dc:creator><![CDATA[lnl]]></dc:creator>
        <description><![CDATA[
            <p>Hello people</p>
<p>(This is my first post on 0x00sec)</p>
<p>I have a DLL injector - say injector.exe - that uses the Reflective DLL Injection technique. When executed, all the steps until VirtualAllocEx and WriteProcessMemory run perfectly (I put up debug print statements which show up in the cmd indicating the flow of execution). But, when it comes to the step of executing the DLL using CreateRemoteThread, an AV called ‘eScan’ is blocking the injector.exe. I have tried using RtlCreateUserThread and NtCreateThreadEx instead of CreateRemoteThread, but to no avail.</p>
<p>Can anyone please tell me why is it happening?</p>
<p>Thank you</p>
          <p><a href="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307/1</link>
        <pubDate>Fri, 29 Jun 2018 05:30:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-7307-1</guid>
        <source url="https://0x00sec.org/t/reflective-dll-injection-av-detects-at-runtime/7307.rss">Reflective DLL Injection - AV detects at runtime</source>
      </item>
  </channel>
</rss>
