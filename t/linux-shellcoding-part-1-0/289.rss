<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Linux Shellcoding (Part 1.0)</title>
    <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289</link>
    <description>As promised, here is the shellcode tutorial once again

## Requirements
Alright so this isn&#39;t going to be msfvenom tutorial. (shellcodes are payloads). 
This tutorial will focus on writing shellcodes using Assembly.

Knowledge of C and Assembly is highly recommend. Also knowing how the stack works is a big plus.

## Memory Segments
When a program is run it is loaded in the RAM. Normally 5 segments are used in programs:

    The stack segment (For function calls (dynamic)).
    The heap segment (For dynamicly allocating memory).
    The data segment (Variables).
    The bss segment (Variables).
    The text segment (Set of instructions (The actual code)).

With assembly you have total control over these segments.
In shellcoding however we will only be using the text and the stack segment.

## Assembly primer
So first we need to know some assembly.

**The registers**
We will be focusing on a couple of registers:

    The EAX register
    The EBX register
    The ECX register
    The EDX register
    The ESP register

These registers are like little pieces of memory that are in the CPU. 
They have nothing to do with RAM though as they are part of the CPU. 
The CPU uses these registers to do calculations and perform simple algorithms.

In assembly we adress these registers, they can be thought of as variables.

**Assembly instructions**
There are some instructions that are important in assembly programming:

    MOV (assign, for example MOV EAX, 32 (EAX = 32)).
    XOR (Exclusive OR, for example XOR EAX, EAX)
    PUSH (Push something on the stack, example: PUSH EAX).
    POP (Load what was on the stack in a register/variable, example: POP EBX).
    CALL (Call a function, for example: CALL FuncPrint).
    INT (Interrupt, kernel command, for example INT 0x80 which is used in calling syscalls).

Be sure that you understand these concepts. 
You can ofcourse try to learn what they mean from this tutorial, 
but it&#39;s better to take your time to learn about these from a more in depth source.

## Syscalls
What is important in shellcoding, is making use of syscalls. 
Syscalls are functions that the kernel recognizes, this means that if your shellcode calls a syscall, 
you don&#39;t have to include headers or declare them.

here: http://syscalls.kernelgrok.com/ you can find an overview of all linux x86 syscalls, look up syscall 11 (0xB).

A syscall takes arguments like normal functions, however syscalls are different in that they don&#39;t use the stack. 
You can think of syscall parameters like argv[] in C:

argv[0] the &#39;first&#39; argument (your program in C), would be the EAX register. 
This is also where you load the syscall number, for execve this is 11, or 0xB in hexa.

argv[1] is like the second argument and would be the EBX register. For example the string &quot;/bin/bash&quot;,

note that a string in C is called as a pointer, for example char *s = &quot;Hello World&quot;. 
The variable &#39;s&#39; is a pointer and NOT the actual string, it&#39;s a memory adress where the string is stored. 
s could be something like 0x4000b401. On 0x4000b401 you&#39;d then find the value &#39;/&#39; or 0x2f in hexa. 
This get&#39;s read until the nullbyte 0x00. The actual string would never fit in the 32 bit registry.

The third argument is ECX, for execve this would be the arguments for the program that gets called (also a string).

## A too simple shellcode
A shellcode is in many ways similar to a normal program, except for the fact that it uses the virtual space used by the program you are exploitating (so not his own).

The name shellcode is kind of misleading, it implies shellcodes are used to spawn shells, however nowadays there are many other uses for shellcodes, 
like `chmod 777` a certain program, or `download` and `execute` a file, nevertheless &#39;shellcode&#39; was the name that stick.

Today we will be writing a simple shellcode that spawns a shell.

First though, we will write a normal assembly program. You will need nasm installed on your machine to compile it. 
`sudo apt-get install nasm`.

So here is the assembly program:
```nasm
section .data
  msg db &#39;/bin/sh&#39; ; db stands for define byte, msg will now be a string pointer.
 
section .text
  global _start   ; Needed for compiler, comparable to int main()
 
_start:
  mov eax, 11     ; eax = 11, think of it like this mov [destination], [source], 11 is execve
  mov ebx, msg    ; Load the string pointer into ebx
  mov ecx, 0      ; no arguments in exc
  int 0x80        ; syscall
 
  mov eax, 1      ; exit syscall
  mov ebx, 0      ; no errors
  int 0x80        ; syscall
```

Copy and paste it in an editor and save as shell.asm
To compile it use the following commands:
`nasm -f elf -o shell.o shell.asm`
`ld -o shell shell.o`
Now run it with:
`./shell`

Awesome, a shell. This is what we wanted!, easy right?
Now lets try to extract the shellcode.
To do so use the command:
`objdump -M intel -d shell`
This will result in:
http://imgur.com/UYj7wms
Lets look at the 2nd line in _start, instead of msg, it says 0x80490a0. This the memory adress of the string msg.

This is a problem though. Remember that I said a shellcode doesnt use it&#39;s own virtual space, but that of the program? 
This means, that the adress 0x80490a0 probably contains either garbage or nothing. 
Since the .data segment of our assembly program isn&#39;t used in the shellcode.
The shellcode would be:
`&quot;\xb8\x0b\x00\x00\x00\x00\xbb\xa0\x90\x04\x08\xb9\x00\x00\x00\x00\x00\xcd\x80\xb8\x01\x00\x00\x00\xbb\x00\x00\x00\x00\xcd\x80&quot;`
Now we face another problem, nullbytes.

## Eliminating nullbytes
Before we continue, let&#39;s do an experiment with a C program.
Open up an editor and write the simple program:
```c
#include &lt;stdio.h&gt;
int main()
{
    printf(&quot;Hello\x00 World!&quot;);

    return 0;
}
```
Compile and run.

Result:
`Hello`

So what happened here? If you&#39;ve programmed with C you may know the problem here, strings use \x00 for terminating.
In a bufferoverflow, the shellcode (which is a string) gets loaded on the stack. 
Therefore a nullbyte will terminate the chain of instructions.

So now let&#39;s look at our program once again.

## XOR
Like I said earlier XOR is an assembly instruction.
XOR is like OR, however there is one major difference.
Let&#39;s look at two tables.

    OR:
    1 OR 1 = 1
    1 OR 0 = 1
    0 OR 1 = 1
    0 OR 0 = 0
and

    XOR:
    1 XOR 1 = 0
    1 XOR 0 = 1
    0 XOR 1 = 1
    0 XOR 0 = 0

So how is this relevant? Well remember that you can&#39;t use nullbytes. 
So if you want to put 0 in a register, doing MOV EAX, 0, would cause a nullbyte.

Lets say the EAX register looks like this:
&lt;many zero&#39;s and one&#39;s&gt;...0010001101
XOR&#39;ing EAX with itself would cause each bit to XOR itself.
the bit is either 1 or 0.

    1 XOR 1 = 0.
    0 XOR 0 = 0.
Therefore every bit gets set to 0.
Doing so would be the same as mov eax, 0, but without the use of nullbytes.

Now let&#39;s look at the code objdump once again.

Notice that the operation MOV EAX, 0xb, still gives nullbytes as a result. 
The reason for this is the fact that EAX is a 32 bit register.

You can read the line b8 0b 00 00 00 as:
b8 (EAX) 0b (11) 00 00 00 which translates to: EAX = 00 00 00 0b, which translates to EAX = 11, or MOV EAX, 0xb.


## Adressing Lower Halves of Registries

If you&#39;re already familiar with assembly you might&#39;ve read that EAX&#39;s lower half can also be used for instructions. 
This lower half is called AX and is 2 bytes (16 bits) in size.

AX can also be split. the higher half is called AH and the lower half is called AL.
Think of it like this:

    [---16bits---|--AH-8bits-|--AL-8bits-]
    [---16bits---|-------16bits-AX-------]
    [-----------32bits---EAX-------------]
So in order to assign 11 to EAX, we have to combine the things we discussed.
First we need to make sure EAX doesn&#39;t contain garbage values.
To do so we zero EAX out with the XOR operator.
XOR EAX, EAX
Now we can assign 11 to the lower half of EAX.
MOV AL, 0xb (11)


## Using the Stack to Store Variables

So we already have the first argument for our syscall ready.

Now we need to assign a string pointer to EBX, but before we do that, we need something to point to, that is, the actual character array:

`|&#39;/&#39;|&#39;b&#39;|&#39;i&#39;|&#39;n&#39;|&#39;/&#39;|&#39;s&#39;|&#39;h&#39;|\x00|`

The only dynamic memory we can use for this is the stack.
Note that each ascii character has a corresponding hex value, a table can be found http://www.asciitable.com/ here.
from left to right the hexcodes are:
0x2f 0x62 0x69 0x6e 0x2f 0x73 0x68 0x00.
What we can do is push these on the stack. Then we can use the stack pointer ESP as a string pointer.
Because the stack is FILO and grows downwards, we have to assign the values in reverse order.
To push values on the stack you can use the command PUSH:
PUSH &lt;value&gt;, be aware that you can only push 4 bytes, each time.
Now a problem arises. You cant push &quot;/sh\x00&quot; on the stack. as it will terminate the shellcode.
To do so, we have to go back a few steps and look at our first two lines:
    
    XOR EAX, EAX
    MOV AL, 0xb

Notice that after XOR EAX, EAX, EAX will have the value 0.

In shellcoding it is sometimes wiser to use this to our advantage as long as possible, because we now have a 0 we can assign, with this in mind we will postpone the COMMAND MOV AL, 0xb.

So instead of pushing 0x0068732f (&quot;\x00hs/&quot;) on the stack. we split it in two parts: 0x00 and 0x68732f.
Now instead of doing PUSH 0x00, we do PUSH EAX.
It has the same result, but we avoided a nullbyte.
Next we can do:
    
    PUSH 0x68732f2f (Added a / here to avoid a nullbyte).
    PUSH 0x6e69622f

Now the the stack pointer will point to the string &quot;/bin//sh&quot;.
So this will be our 2nd argument (EBX).

    MOV EBX, ESP
The third argument (ECX) for our syscall execve is a string with arguments for /bin/sh. Ofcourse we don&#39;t want this to contain garbage, because that would result in sh not running and giving a warning about invalid arguments. Therefore we need ECX to be 0.

Once again we can use our EAX register.

    MOV ECX, EAX

Finally we assign EAX:

    MOV AL, 0xb

And do the syscall;

    INT 0x80
This leaves us with the following code:

```
section .text
  global _start

_start:
  xor eax, eax
  push eax
  push 0x68732f2f
  push 0x6e69622f
  mov ebx, esp
  mov ecx, eax
  mov al, 0xb
  int 0x80
```

## Extracting the Shellcode
Now let&#39;s compile it
`nasm -f elf -o shell.o shell.asm`
`ld -o shell shell.o`

Now to get the shellcode I wrote this C program:
```c
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;fcntl.h&gt;

int main(int argc, char *argv[])
{
        char l = 1;
        unsigned char buf;
        int fd;
        fd = open(argv[1],0,S_IRUSR);
        while(read(fd,&amp;buf,1)) {
                if(buf == 0 &amp;&amp; l == 1) {
                        printf(&quot; \n&quot;);
                        l = 0;
                }
                else if(buf) {
                        printf(&quot;\\x%02x&quot;,buf);
                        l = 1;
                }
        }

        close(fd);
}
```
It will ignore caves of nullbytes and only show continues hexdumps.
One of these lines is your shellcode.

To check if your shellcode works you can use this simple C program:
```c
int main()
{
  char *shellcode = &quot;&lt;the shellcode&gt;&quot;;

  (*(void(*)()) shellcode)();
}
```

That was all for today, hope you enjoyed it!

unh0lys0da</description>
    
    <lastBuildDate>Mon, 22 May 2017 14:02:39 +0000</lastBuildDate>
    <category>Exploit Development</category>
    <atom:link href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/38">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/38</link>
        <pubDate>Sun, 21 Jan 2018 00:43:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-38</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[n0tnu11]]></dc:creator>
        <description><![CDATA[
            <p>The quality of tutorials on this site never cease to amaze me.<br>
Awesome work <a class="mention" href="https://0x00sec.org/u/ioth1nkn0t">@IoTh1nkN0t</a>!</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/37">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/37</link>
        <pubDate>Mon, 22 May 2017 14:02:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-37</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[SynFl00der]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for the tutorial.</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/36">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/36</link>
        <pubDate>Sun, 21 May 2017 07:02:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-36</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[EnergyWolf]]></dc:creator>
        <description><![CDATA[
            <p>Thanks <span class="mention">@unh0lys0da</span> for the tutorial, found it nice and clear.<br>
Just wanted to say for anyone on a 64bit system(which is surely most of us by now?) you can still compile and link everything as 32 bit like so:<br>
<code>nasm -f elf -o shell.o shell.asm</code> &lt;&lt; no change here<br>
<code>ld -m elf_i386 -o shell shell.o</code> &lt;&lt; use mode elf_i386<br>
So you can follow along with the tut as it is for simplicity.</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/35">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/35</link>
        <pubDate>Sun, 07 Aug 2016 15:50:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-35</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[Fust3rCluck]]></dc:creator>
        <description><![CDATA[
            <p>This was awesome, nice job!</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/34">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/34</link>
        <pubDate>Sat, 06 Aug 2016 23:04:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-34</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Does it still make you head hurt?</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/33">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/33</link>
        <pubDate>Tue, 02 Aug 2016 11:42:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-33</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>Ooh yes, that’s what I meant</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/32">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/32</link>
        <pubDate>Fri, 13 May 2016 19:17:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-32</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for checking… Yep, I understood the point. It was just another example</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/31">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/31</link>
        <pubDate>Fri, 13 May 2016 17:21:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-31</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>It is in the text segment and the address is read directly from the beginning of the text segment. A pop will not work. I wrote to try the RIP-relative addressing mode on the x64… as a shellcode it needs  tweak… It has a null at the beginning <img src="https://0x00sec.org/images/emoji/twitter/yum.png?v=9" title=":yum:" class="emoji" alt=":yum:"></p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/30">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/30</link>
        <pubDate>Fri, 13 May 2016 05:08:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-30</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="unh0lys0da" data-post="27" data-topic="289">
<div class="title">
<div class="quote-controls"></div>
 unh0lys0da:</div>
<blockquote>
<pre><code class="lang-perl">stuff:
db '/bin/sh',0
call return
</code></pre>
</blockquote>
</aside>
<p>These two should be the other way around like so:</p>
<pre><code class="lang-auto">stuff:
call return
db '/bin/sh', 0
</code></pre>
<p>This pushes the string onto the stack because whenever a call is used, the address of the next instruction within <code>db '/bin/sh', 0</code> gets pushed as the return value.</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/29">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/29</link>
        <pubDate>Fri, 13 May 2016 03:47:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-29</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[AgentSniff]]></dc:creator>
        <description><![CDATA[
            <p>interesting, when you declare the ‘/bin/sh’,0 with no name, the program automatically pushes the string into the stack?</p>
<p>short jump is for relative jump right?</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/28">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/28</link>
        <pubDate>Fri, 13 May 2016 00:12:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-28</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>Woah no trouble at all <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"><br>
I’ve just checked it and there seems to go something wrong with the string /bin//sh<br>
It seems a delimiter get’s added between the pushes. (Trying to figure out why).<br>
Another method is using a short jump.</p>
<pre><code class="lang-auto">global _start
_start:
jmp short stuff

return:
pop rdi
xor rax, rax
(rest of the shellcode)

stuff:
db '/bin/sh',0
call return
</code></pre>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/27">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/27</link>
        <pubDate>Fri, 13 May 2016 00:01:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-27</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[AgentSniff]]></dc:creator>
        <description><![CDATA[
            <p>The second one works fine!</p>
<p>sorry for the trouble!</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/26">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/26</link>
        <pubDate>Thu, 12 May 2016 23:53:53 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-26</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>Woah this one is pretty, msg is on the stack right?<br>
then pop/lea it in rdi?<br>
also the <code>add al, 0x3b</code> was cool</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/25">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/25</link>
        <pubDate>Thu, 12 May 2016 23:48:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-25</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>Like I said, I didn’t test either of them.<br>
I quite frankly have no clue as to why it  doesnt work, I would have to see a hexdump with ascii on the side.<br>
I personally think the 2nd program is way better, because it loads the string in the RBX register. This shows the potential of x64 shellcoding.</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/24">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/24</link>
        <pubDate>Thu, 12 May 2016 23:45:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-24</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[AgentSniff]]></dc:creator>
        <description><![CDATA[
            <p>I agree, i don’t know why it does not work</p>
<p>Disassembly of section .text:</p>
<p>0000000000400080 &lt;_start&gt;:<br>
400080:	48 31 c0             	xor     %rax,%rax<br>
400083:	50                     	push   %rax<br>
400084:	68 2f 2f 73 68       	pushq  $0x68732f2f<br>
400089:	68 2f 62 69 6e       	pushq  $0x6e69622f<br>
40008e:	48 89 e7             	mov    %rsp,%rdi<br>
400091:	48 89 c6             	mov    %rax,%rsi<br>
400094:	48 89 c2             	mov    %rax,%rdx<br>
400097:	b8 3b 00 00 00       	mov    $0x3b,%eax<br>
40009c:	0f 05                  	syscall<br>
40009e:	b8 3c 00 00 00       	mov    $0x3c,%eax<br>
4000a3:	bf 00 00 00 00       	mov    $0x0,%edi<br>
4000a8:	0f 05                 	syscall</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/23">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/23</link>
        <pubDate>Thu, 12 May 2016 23:24:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-23</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[AgentSniff]]></dc:creator>
        <description><![CDATA[
            <p>i’ve tried to start the shell this way to, and works perfectly</p>
<p>but calling it from the stack is the point…</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/22">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/22</link>
        <pubDate>Thu, 12 May 2016 23:17:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-22</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>xor whatever, whatever<br>
Should ALWAYS result in 0.<br>
for each bit it is either 1 or 0<br>
1 XOR 1 = 0<br>
0 XOR 0 = 0</p>
<p>There is no way that RAX != RAX<br>
Every bit in RAX == The same bit in RAX</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/21">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/21</link>
        <pubDate>Thu, 12 May 2016 18:08:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-21</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p><span class="mention">@unh0lys0da</span>: Your second code works OK on my system. The first one crashes… I haven’t checked why . I like the <code>xor rax,59</code></p>
<p>This is my version (<span class="mention">@unh0lys0da</span> a small variation of the one you’ve already seen).</p>
<pre><code class="lang-auto">section .text
	msg db '/bin/sh',0 
	
	global _start   
 
_start:
	xor rax,rax
	mov rdx,rax 		; No Env
	mov rsi,rax		; No argv
	lea rdi, [rel msg]

	add al, 0x3b

	syscall	
</code></pre>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/20">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/20</link>
        <pubDate>Thu, 12 May 2016 16:50:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-20</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[AgentSniff]]></dc:creator>
        <description><![CDATA[
            <p>Thank you for your reply</p>
<p>I’m quite new to Linux, and always forget to put the root ‘/’ when using absolute path</p>
<p>i tried your code, it does not work here, i saw in the disassembly that the result from xor rax,rax does not result on null.</p>
<p>could you check this?</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/19">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/19</link>
        <pubDate>Thu, 12 May 2016 16:10:12 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-19</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>It won’t work for several reasons:</p>
<ul>
<li>There are nullbytes. (If you’d use this to overflow nullterminated string input).</li>
<li>It’s /bin/sh</li>
<li>/bin/sh also has to be null terminated (You need to push a null on the stack as well).</li>
</ul>
<p>Apart from that the code is right.</p>
<p>I think the following should work:</p>
<pre><code class="lang-auto">section .text
    global _start

_start:
    xor rax, rax
    push rax
    push '//sh'
    push '/bin'
    mov rdi, rsp
    mov rsi, rax
    mov rdx, rax
    xor rax, 59
    syscall
 
    
</code></pre>
<p>I haven’t tested it, but I think it’s somewhat like this.<br>
You could also try to load <code>/bin//sh</code> in a registry since we’re working with 64 bit ^^(64 bit, 8 bytes, 8 chars).<br>
It would be something like:</p>
<pre><code class="lang-auto">xor rax,rax
push rax
mov rsi, rax
mov rdx, rax
mov rbx, '/bin//sh'
push rbx
mov rdi, rsp
xor rax, 59
syscall
</code></pre>
<p>But I also haven’t tried this one.<br>
I’ll try them later.</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/18">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/18</link>
        <pubDate>Thu, 12 May 2016 06:32:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-18</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>OK! I think that depends on the specific system. Usually, and specially for the first stage boot code, you usually have just one option (the address the processor starts running code), for even more <em>embedded</em> system you probably will need an specialised Link Script</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/17">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/17</link>
        <pubDate>Thu, 12 May 2016 04:38:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-17</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[AgentSniff]]></dc:creator>
        <description><![CDATA[
            <p>You are right about the typo with rdi and rdx.</p>
<p>My experience with Assembly is only with 8bits processors like atmega and PIC.</p>
<p>I just translate your code for x64, i hope to learn more with your next tutorials!</p>
<p>I was trying to open a shell calling from the stack like your example but it does not work</p>
<p>take a look:</p>
<pre><code>section .text

        global _start:

_start:

        push 'sh'
        push 'bin/'
        mov rax,59
        mov rdi,rsp
        mov rsi,0
        ;mov rdx,0
        syscall

        mov rax,60
        mov rdi,0
        syscall
</code></pre>
<p>in this order of push command, it will first push two null bytes then ‘h’ and ‘s’, followed by second push ‘/’ ‘n’ ‘i’ ‘b’ right?</p>
<p>the stack works like a FILO (first in last out) so it spits ‘b’ ‘i’ ‘n’ ‘/’ ‘s’ ‘h’ x0 x0 right?</p>
<p>shell_stack:     file format elf64-x86-64</p>
<p>Disassembly of section .text:</p>
<pre><code>0000000000400080 &lt;_start&gt;:
  400080:    68 73 68 00 00            pushq  $0x6873
  400085:    68 62 69 6e 2f            pushq  $0x2f6e6962
  40008a:    b8 3b 00 00 00            mov    $0x3b,%eax
  40008f:    48 89 e7                  mov    %rsp,%rdi
  400092:    be 00 00 00 00            mov    $0x0,%esi
  400097:    0f 05                     syscall 
  400099:    b8 3c 00 00 00            mov    $0x3c,%eax
  40009e:    bf 00 00 00 00            mov    $0x0,%edi
  4000a3:    0f 05                     syscall</code></pre>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/16">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/16</link>
        <pubDate>Wed, 11 May 2016 22:57:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-16</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>Find the location of the inode(?) to start reading from</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/15</link>
        <pubDate>Wed, 11 May 2016 21:56:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-15</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
      <item>
        <title>Linux Shellcoding (Part 1.0)</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Not sure what do you mean my <em>find the location</em>. Anyhow I never had a chance to use it. It is for really constrained embedded system…</p>
          <p><a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/linux-shellcoding-part-1-0/289/14</link>
        <pubDate>Wed, 11 May 2016 18:35:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-289-14</guid>
        <source url="https://0x00sec.org/t/linux-shellcoding-part-1-0/289.rss">Linux Shellcoding (Part 1.0)</source>
      </item>
  </channel>
</rss>
