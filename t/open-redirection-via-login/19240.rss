<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Open redirection via login</title>
    <link>https://0x00sec.org/t/open-redirection-via-login/19240</link>
    <description>Note: ignore ////

Assuming the target was ////example.com




When visiting the website and navigate to Login page . The website return GET parameters , one of them was interesting as it seems good to check for open redirection.



https://example.com/login?url=example.com/welcome



If you tried to inject [ @google.com ] and log in , the website will redirect you to ////example.com
If you tried to inject [ ////google.com , ////google.com , other common open redirection whitelist bypass ] it won&#39;t work.


After that i checked and changed the parameter value from 



////example.com/login?url=////example.com/welcome

To 

////example.com/login?url=////example.org/welcome



After log in , the website will get your redirected to ////example.org/welcome

After checking , example.org was not paid domain and available to purchase . That being said if attacker buy it from ////namecheap.com or other domain registration service, he can got open redirection on the endpoint and redirect to its website which it is ////example.org



I&#39;m here trying to write bugs , tricks in bug bounty hunting and penetration testing because i like this form + to inspire other researchers on the community to write their findings here.
+ 

The reason between having //// before websites urls is because i&#39;m new user  and i can&#39;t post more than 2 links in a post so i put these chars.
Thanks.

I</description>
    
    <lastBuildDate>Tue, 25 Feb 2020 05:14:29 +0000</lastBuildDate>
    <category>Bug Bounty</category>
    <atom:link href="https://0x00sec.org/t/open-redirection-via-login/19240.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Open redirection via login</title>
        <dc:creator><![CDATA[osama-hamad]]></dc:creator>
        <description><![CDATA[
            <p>Yeah , thanks for your notice, i’ll put this in mind in future tests too but in case of this company i stopped there when i was testing cause i know it will be marked as duplicate and it got marked as duplicate in the end xD.</p>
          <p><a href="https://0x00sec.org/t/open-redirection-via-login/19240/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/open-redirection-via-login/19240/3</link>
        <pubDate>Tue, 25 Feb 2020 05:14:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19240-3</guid>
        <source url="https://0x00sec.org/t/open-redirection-via-login/19240.rss">Open redirection via login</source>
      </item>
      <item>
        <title>Open redirection via login</title>
        <dc:creator><![CDATA[vict0ni]]></dc:creator>
        <description><![CDATA[
            <p>Nice one!<br>
If they only check the first part of the target url (i.e. until the first dot) maybe then you could also redirect to <a href="http://example.domain.com">example.domain.com</a>, if you already have <a href="http://domain.com">domain.com</a>?</p>
          <p><a href="https://0x00sec.org/t/open-redirection-via-login/19240/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/open-redirection-via-login/19240/2</link>
        <pubDate>Sun, 16 Feb 2020 11:59:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19240-2</guid>
        <source url="https://0x00sec.org/t/open-redirection-via-login/19240.rss">Open redirection via login</source>
      </item>
      <item>
        <title>Open redirection via login</title>
        <dc:creator><![CDATA[osama-hamad]]></dc:creator>
        <description><![CDATA[
            <p>Note: ignore ////</p>
<p>Assuming the target was ////example.com</p>
<p>When visiting the website and navigate to Login page . The website return GET parameters , one of them was interesting as it seems good to check for open redirection.</p>
<p><a href="https://example.com/login?url=example.com/welcome" class="onebox" target="_blank" rel="nofollow noopener">https://example.com/login?url=example.com/welcome</a></p>
<p>If you tried to inject [ <span class="mention">@google.com</span> ] and log in , the website will redirect you to ////example.com<br>
If you tried to inject [ ////google.com , ////google.com , other common open redirection whitelist bypass ] it won’t work.</p>
<p>After that i checked and changed the parameter value from</p>
<p>////example.com/login?url=////example.com/welcome</p>
<p>To</p>
<p>////example.com/login?url=////example.org/welcome</p>
<p>After log in , the website will get your redirected to ////example.org/welcome</p>
<p>After checking , <a href="http://example.org" rel="nofollow noopener">example.org</a> was not paid domain and available to purchase . That being said if attacker buy it from ////namecheap.com or other domain registration service, he can got open redirection on the endpoint and redirect to its website which it is ////example.org</p>
<p>I’m here trying to write bugs , tricks in bug bounty hunting and penetration testing because i like this form + to inspire other researchers on the community to write their findings here.<br>
+</p>
<p>The reason between having //// before websites urls is because i’m new user  and i can’t post more than 2 links in a post so i put these chars.<br>
Thanks.</p>
<p>I</p>
          <p><a href="https://0x00sec.org/t/open-redirection-via-login/19240/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/open-redirection-via-login/19240/1</link>
        <pubDate>Sat, 15 Feb 2020 19:10:42 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-19240-1</guid>
        <source url="https://0x00sec.org/t/open-redirection-via-login/19240.rss">Open redirection via login</source>
      </item>
  </channel>
</rss>
