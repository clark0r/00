<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Python module/package importing through HTTP/S</title>
    <link>https://0x00sec.org/t/python-module-package-importing-through-http-s/3407</link>
    <description>### Hello all again!

It&#39;s been a while since the [ Python Package for creating backdoors](https://0x00sec.org/t/a-python-package-for-creating-backdoors/3170/29) thingie and all that time I have been researching a way to properly create a _stager_ for a Python backdoor script that **has dependencies**.

\*You know stagers! The lil&#39; things that _set the stage_ for the real thing to run. 

So, after 2 weeks of research and vacation I came up with the `httpimport` project!

https://github.com/operatorequals/httpimport

### What does it do?

The `httpimport` module lets anyone import _Python packages/modules_ from HTTP/S Servers that serve directories.
For example, if you open a `SimpleHTTPServer` in a directory where a Python module/package resides, then this module/package is **directly importable** through the LAN to **any computer that runs Python**.

#### The (good) catch!
This technique is highly different from `wget`ting a folder - adding to the `PYTHONPATH` - and `import`ing as  **NO DATA IS WRITTEN TO DISK!**. It imports Python code directly from memory to the _calling Python process_! Suitable for a _stager_!

#### Resources
The repository&#39;s `README.md` has many examples, and the Unit Test code in `test.py` is self explanatory, they can be found here:
https://github.com/operatorequals/httpimport/blob/master/README.md

and here:
https://github.com/operatorequals/httpimport/blob/master/test.py


### Github Repository Importing support
Import my `covertutils` package to make your backdoor today just by:
```python
&gt;&gt;&gt; from httpimport import *
&gt;&gt;&gt; with github_repo(&#39;operatorequals&#39;, &#39;covertutils&#39;) : 
...     import covertutils
...
&gt;&gt;&gt; 
```
No need to `git clone`, or `venv` a thing. When you close the REPL, the `covertutils` package will be nowhere to be found!

Want a specific commit? Does the API break your application after that commit? No Problem!
```python
&gt;&gt;&gt; from httpimport import *
&gt;&gt;&gt; with github_repo(&#39;operatorequals&#39;, &#39;covertutils&#39;, commit=&#39;cf3f78c77c437edf2c291bd5b4ed27e0a93e6a77&#39;) : 
...     import covertutils
...
&gt;&gt;&gt; 
```

### Make it yours at _PyPI_
As this module is more a Python (long craved) feature, than a little _stager_ script it has also been uploaded to `PyPI` for everyone to `pip install httpimport` it:

https://pypi.org/project/httpimport/

#### Python3 supported!
Last but not least, this is a _Python2/3_ **cross compatible** module, with **cross compatible test suite** to suit all needs!

### Tried for a PEP and rejected
I have also requested in Python-Ideas mailing list to polish this module and make it a core `stdlib` feature, but it has been rejected as the Security Implications are **huge** (_the scenario of HTTP MiTM RCE scared them a lot and for good reasons!_).


#### A **Huge** thanks to @Joe_Schmoe who passed me some of his custom Finders/Loaders in the IRC some weeks ago!</description>
    
    <lastBuildDate>Tue, 29 Aug 2017 13:34:00 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/python-module-package-importing-through-http-s/3407.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Python module/package importing through HTTP/S</title>
        <dc:creator><![CDATA[operatorequals]]></dc:creator>
        <description><![CDATA[
            <p>Yeah, but this is like wrapping the <code>imp</code> API.<br>
There are different ways to <em>Find</em> and <em>Load</em> modules, and this is why <code>find_module</code> and <code>load_module</code> functions can be implemented from scratch in the first place.<br>
If you are using SSH, the <code>find_module</code> can use a <code>listdir</code> kind of command to find the available packages, and don’t bother with a pre-configured name list…</p>
<p>Anyway, don’t listen to me! I have a way of thinking and you have another! Write what your heart tells you and submit a PR! Or if you change things a lot, create a new project based on this one! If you feel like launching a “<em>Python package for remote importing</em>” let me know!</p>
          <p><a href="https://0x00sec.org/t/python-module-package-importing-through-http-s/3407/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-module-package-importing-through-http-s/3407/6</link>
        <pubDate>Tue, 29 Aug 2017 13:34:00 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3407-6</guid>
        <source url="https://0x00sec.org/t/python-module-package-importing-through-http-s/3407.rss">Python module/package importing through HTTP/S</source>
      </item>
      <item>
        <title>Python module/package importing through HTTP/S</title>
        <dc:creator><![CDATA[rokups]]></dc:creator>
        <description><![CDATA[
            <p>Maybe it could be an option to add a way for user to set a function that is supposed to retrieve data? That way package could be used with any transport and protocol.</p>
          <p><a href="https://0x00sec.org/t/python-module-package-importing-through-http-s/3407/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-module-package-importing-through-http-s/3407/5</link>
        <pubDate>Mon, 28 Aug 2017 10:12:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3407-5</guid>
        <source url="https://0x00sec.org/t/python-module-package-importing-through-http-s/3407.rss">Python module/package importing through HTTP/S</source>
      </item>
      <item>
        <title>Python module/package importing through HTTP/S</title>
        <dc:creator><![CDATA[operatorequals]]></dc:creator>
        <description><![CDATA[
            <p>Like SCP/SSH/SFTP?<br>
It is highly possible, yeah, just tweak the part where <code>urlopen()</code> is called, but keep in mind that it would be better if you only used ‘<strong>0</strong>’ external dependencies.<br>
The code is properly documented as of <code>0.5.1</code>.<br>
Be my guest and make a <code>remoteimport</code> package…</p>
          <p><a href="https://0x00sec.org/t/python-module-package-importing-through-http-s/3407/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-module-package-importing-through-http-s/3407/4</link>
        <pubDate>Sat, 26 Aug 2017 15:14:16 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3407-4</guid>
        <source url="https://0x00sec.org/t/python-module-package-importing-through-http-s/3407.rss">Python module/package importing through HTTP/S</source>
      </item>
      <item>
        <title>Python module/package importing through HTTP/S</title>
        <dc:creator><![CDATA[rokups]]></dc:creator>
        <description><![CDATA[
            <p>This is a great package. Would there be any way to wrap it in another transport though?</p>
          <p><a href="https://0x00sec.org/t/python-module-package-importing-through-http-s/3407/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-module-package-importing-through-http-s/3407/3</link>
        <pubDate>Sat, 26 Aug 2017 07:53:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3407-3</guid>
        <source url="https://0x00sec.org/t/python-module-package-importing-through-http-s/3407.rss">Python module/package importing through HTTP/S</source>
      </item>
      <item>
        <title>Python module/package importing through HTTP/S</title>
        <dc:creator><![CDATA[Joe_Schmoe]]></dc:creator>
        <description><![CDATA[
            <p>he actually did it the madman</p>
          <p><a href="https://0x00sec.org/t/python-module-package-importing-through-http-s/3407/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-module-package-importing-through-http-s/3407/2</link>
        <pubDate>Fri, 25 Aug 2017 11:37:10 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3407-2</guid>
        <source url="https://0x00sec.org/t/python-module-package-importing-through-http-s/3407.rss">Python module/package importing through HTTP/S</source>
      </item>
      <item>
        <title>Python module/package importing through HTTP/S</title>
        <dc:creator><![CDATA[operatorequals]]></dc:creator>
        <description><![CDATA[
            <h3>Hello all again!</h3>
<p>It’s been a while since the <a href="https://0x00sec.org/t/a-python-package-for-creating-backdoors/3170/29"> Python Package for creating backdoors</a> thingie and all that time I have been researching a way to properly create a <em>stager</em> for a Python backdoor script that <strong>has dependencies</strong>.</p>
<p>*You know stagers! The lil’ things that <em>set the stage</em> for the real thing to run.</p>
<p>So, after 2 weeks of research and vacation I came up with the <code>httpimport</code> project!</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/operatorequals/httpimport" target="_blank" rel="noopener nofollow ugc">GitHub</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/e/e6b5128c870516deee7629dfafb49ada8bc38b75.jpeg" class="thumbnail onebox-avatar" width="253" height="253">

<h3><a href="https://github.com/operatorequals/httpimport" target="_blank" rel="noopener nofollow ugc">operatorequals/httpimport</a></h3>

<p>Module for remote in-memory Python package/module loading through HTTP/S - operatorequals/httpimport</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<h3>What does it do?</h3>
<p>The <code>httpimport</code> module lets anyone import <em>Python packages/modules</em> from HTTP/S Servers that serve directories.<br>
For example, if you open a <code>SimpleHTTPServer</code> in a directory where a Python module/package resides, then this module/package is <strong>directly importable</strong> through the LAN to <strong>any computer that runs Python</strong>.</p>
<h4>The (good) catch!</h4>
<p>This technique is highly different from <code>wget</code>ting a folder - adding to the <code>PYTHONPATH</code> - and <code>import</code>ing as  <strong>NO DATA IS WRITTEN TO DISK!</strong>. It imports Python code directly from memory to the <em>calling Python process</em>! Suitable for a <em>stager</em>!</p>
<h4>Resources</h4>
<p>The repository’s <code>README.md</code> has many examples, and the Unit Test code in <code>test.py</code> is self explanatory, they can be found here:<br>
</p><aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/operatorequals/httpimport/blob/master/README.md" target="_blank" rel="noopener nofollow ugc">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/operatorequals/httpimport/blob/master/README.md" target="_blank" rel="noopener nofollow ugc">operatorequals/httpimport/blob/master/README.md</a></h4>
<pre><code class="lang-md"># `httpimport`
## *Python's missing feature!*
##### [The feature has been suggested in Python Mailing List](https://lwn.net/Articles/732194/)

_Remote_, _in-memory_ Python _package/module_ `import`ing **through HTTP/S**

![PyPI - Python Version](https://img.shields.io/pypi/pyversions/httpimport)
[![PyPI version](https://badge.fury.io/py/httpimport.svg)](https://pypi.python.org/pypi/httpimport)
[![Build Status](https://travis-ci.org/operatorequals/httpimport.svg?branch=tests)](https://travis-ci.org/operatorequals/httpimport)
![Coverage Badge](https://raw.githubusercontent.com/operatorequals/httpimport/tests/coverage.svg?sanitize=true)

![CPython 2.7](https://img.shields.io/badge/Works%20on-CPython%202.7-green)
![CPython 3.4](https://img.shields.io/badge/Works%20on-CPython%203.4-brightgreen)
![CPython 3.7](https://img.shields.io/badge/Works%20on-CPython%203.7-brightgreen)
![Pypy 2.7](https://img.shields.io/badge/Works%20on-Pypy%202.7-yellowgreen)
![Pypy 3.6](https://img.shields.io/badge/Works%20on-Pypy%203.6-yellowgreen)
![Jython 2.7.1](https://img.shields.io/badge/Works%20on-Jython%202.7.1-orange)

A feature that _Python2/3_ **misses** and has become popular in other languages is the **remote loading of packages/modules**.

</code></pre>

  This file has been truncated. <a href="https://github.com/operatorequals/httpimport/blob/master/README.md" target="_blank" rel="noopener nofollow ugc">show original</a>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<p></p>
<p>and here:<br>
<a href="https://github.com/operatorequals/httpimport/blob/master/test.py" class="onebox" target="_blank" rel="noopener nofollow ugc">https://github.com/operatorequals/httpimport/blob/master/test.py</a></p>
<h3>Github Repository Importing support</h3>
<p>Import my <code>covertutils</code> package to make your backdoor today just by:</p>
<pre><code class="lang-python">&gt;&gt;&gt; from httpimport import *
&gt;&gt;&gt; with github_repo('operatorequals', 'covertutils') : 
...     import covertutils
...
&gt;&gt;&gt; 
</code></pre>
<p>No need to <code>git clone</code>, or <code>venv</code> a thing. When you close the REPL, the <code>covertutils</code> package will be nowhere to be found!</p>
<p>Want a specific commit? Does the API break your application after that commit? No Problem!</p>
<pre><code class="lang-python">&gt;&gt;&gt; from httpimport import *
&gt;&gt;&gt; with github_repo('operatorequals', 'covertutils', commit='cf3f78c77c437edf2c291bd5b4ed27e0a93e6a77') : 
...     import covertutils
...
&gt;&gt;&gt; 
</code></pre>
<h3>Make it yours at <em>PyPI</em>
</h3>
<p>As this module is more a Python (long craved) feature, than a little <em>stager</em> script it has also been uploaded to <code>PyPI</code> for everyone to <code>pip install httpimport</code> it:</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://pypi.org/static/images/favicon.6a76275d.ico" class="site-icon" width="32" height="30">
      <a href="https://pypi.org/project/httpimport/" target="_blank" rel="noopener nofollow ugc">PyPI</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/1/19f8cec1b7c2eec3c043f1ad8bd7c8afb43be7b5.jpeg" class="thumbnail onebox-avatar" width="300" height="300">

<h3><a href="https://pypi.org/project/httpimport/" target="_blank" rel="noopener nofollow ugc">httpimport</a></h3>

<p>Module for remote in-memory Python package/module loading through HTTP</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<h4>Python3 supported!</h4>
<p>Last but not least, this is a <em>Python2/3</em> <strong>cross compatible</strong> module, with <strong>cross compatible test suite</strong> to suit all needs!</p>
<h3>Tried for a PEP and rejected</h3>
<p>I have also requested in Python-Ideas mailing list to polish this module and make it a core <code>stdlib</code> feature, but it has been rejected as the Security Implications are <strong>huge</strong> (<em>the scenario of HTTP MiTM RCE scared them a lot and for good reasons!</em>).</p>
<h4>A <strong>Huge</strong> thanks to <a class="mention" href="https://0x00sec.org/u/joe_schmoe">@Joe_Schmoe</a> who passed me some of his custom Finders/Loaders in the IRC some weeks ago!</h4>
          <p><a href="https://0x00sec.org/t/python-module-package-importing-through-http-s/3407/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/python-module-package-importing-through-http-s/3407/1</link>
        <pubDate>Fri, 25 Aug 2017 11:05:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3407-1</guid>
        <source url="https://0x00sec.org/t/python-module-package-importing-through-http-s/3407.rss">Python module/package importing through HTTP/S</source>
      </item>
  </channel>
</rss>
