<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Double URL-encoded XSS</title>
    <link>https://0x00sec.org/t/double-url-encoded-xss/21574</link>
    <description>Right after the quarantine ended I had a mini burn out for more than a month, where I didn’t even bother to try and hunt for bugs. After those one and a half months of trying to find my motivation again, I found a XSS that required a bit more thinking than the typical `javascript:alert(1)` cases.

Revisiting my old notes from a BB program, I observed an endpoint that I tried to exploit the last time, before I go through that burn out. Back then I wasn’t able to exploit it, so now I thought I’d give it a second chance. The endpoint was `https://example.com/dir/legacy-browser?redir=/`. There was a button, where you would get redirected to the endpoint the paramteter redir was pointing. Analyzing the source code, I could see that the website was redirecting the user this way:

![double_url_xss|484x22](upload://m8yTjozXcodwQrmbIrzY0PDD8nx.png) 

At first, I thought that this should be easy. I tried escaping the parenthesis by injecting `&#39;)` in the `redir` parameter. The result was that the illegal characters would be removed. Actually, if there was any illegal characters, the app would redirect you by default to `/`.

I tried to inject a null byte `%00`, just to see how the app would react. The app translated the null byte into `NULL`. So the payload `redir=/%00/` would get reflected into the source code as `javascript:redirect(&#39;/NULL/&#39;)`. I thought “great, the url encoded characters are getting decoded”. I clicked the button and… I got redirected to `/NULL/`. Also, any other illegal url encoded characters would be removed, just as I described previously.

So, apparently, the URL was getting decoded and sent to `javascript:redirect()`. But I wanted to inject some illegal characters to escape the parenthesis. After some thought, I came to the conclusion that in orded to send illegal characters to `javascript:redirect()`, those characters had to be URL-encoded, after they have been decoded from the URL bar. Hence the double URL encoding!

I sent the second payload `https://www.example.com/dir/legacy-browser?redir=/%2500/test`, where `%2500` is the double-URL-encoded null byte. The result was for `javascript:redirect(&#39;/%00/test&#39;)` to get reflected. After hitting the button, I got redirected to `https://example.com/`, meaning that the null byte in `javascript:redirect()` was actually getting decoded. So I could actually send working double URL encoded payloads.

Having this in my mind, I crafted a payload for this endpoint (and by crafting, I mean copying and pasting the XSS payload from [brutelogic](https://twitter.com/brutelogic) in [PayloadsAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20Injection) and adding a `&#39;)` in front). I double URL-encoded it and injected it into the parameter. And after hitting the button, the XSS was getting triggered, right before the user got redirected to `/`.

Final exploit: `https://example.com/enpoint?redir=/%2527)%253B%2520alert(document.cookies)%253B%252F%252F`
## tl;dr
![carbon|690x288](upload://4afrLu9DGIm0CYvPuNmKuq62FaN.png)</description>
    
    <lastBuildDate>Wed, 03 Jun 2020 20:19:14 +0000</lastBuildDate>
    <category>Bug Bounty</category>
    <atom:link href="https://0x00sec.org/t/double-url-encoded-xss/21574.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Double URL-encoded XSS</title>
        <dc:creator><![CDATA[vict0ni]]></dc:creator>
        <description><![CDATA[
            <p>Thanks man!! <img src="https://0x00sec.org/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:"></p>
          <p><a href="https://0x00sec.org/t/double-url-encoded-xss/21574/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/double-url-encoded-xss/21574/3</link>
        <pubDate>Wed, 03 Jun 2020 20:19:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-21574-3</guid>
        <source url="https://0x00sec.org/t/double-url-encoded-xss/21574.rss">Double URL-encoded XSS</source>
      </item>
      <item>
        <title>Double URL-encoded XSS</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Dude this is awesome!!!</p>
<p>I’m so happy you got this one too! Good job!</p>
          <p><a href="https://0x00sec.org/t/double-url-encoded-xss/21574/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/double-url-encoded-xss/21574/2</link>
        <pubDate>Wed, 03 Jun 2020 12:40:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-21574-2</guid>
        <source url="https://0x00sec.org/t/double-url-encoded-xss/21574.rss">Double URL-encoded XSS</source>
      </item>
      <item>
        <title>Double URL-encoded XSS</title>
        <dc:creator><![CDATA[vict0ni]]></dc:creator>
        <description><![CDATA[
            <p>Right after the quarantine ended I had a mini burn out for more than a month, where I didn’t even bother to try and hunt for bugs. After those one and a half months of trying to find my motivation again, I found a XSS that required a bit more thinking than the typical <code>javascript:alert(1)</code> cases.</p>
<p>Revisiting my old notes from a BB program, I observed an endpoint that I tried to exploit the last time, before I go through that burn out. Back then I wasn’t able to exploit it, so now I thought I’d give it a second chance. The endpoint was <code>https://example.com/dir/legacy-browser?redir=/</code>. There was a button, where you would get redirected to the endpoint the paramteter redir was pointing. Analyzing the source code, I could see that the website was redirecting the user this way:</p>
<p><span alt="double_url_xss" data-base62-sha1="m8yTjozXcodwQrmbIrzY0PDD8nx" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
<p>At first, I thought that this should be easy. I tried escaping the parenthesis by injecting <code>')</code> in the <code>redir</code> parameter. The result was that the illegal characters would be removed. Actually, if there was any illegal characters, the app would redirect you by default to <code>/</code>.</p>
<p>I tried to inject a null byte <code>%00</code>, just to see how the app would react. The app translated the null byte into <code>NULL</code>. So the payload <code>redir=/%00/</code> would get reflected into the source code as <code>javascript:redirect('/NULL/')</code>. I thought “great, the url encoded characters are getting decoded”. I clicked the button and… I got redirected to <code>/NULL/</code>. Also, any other illegal url encoded characters would be removed, just as I described previously.</p>
<p>So, apparently, the URL was getting decoded and sent to <code>javascript:redirect()</code>. But I wanted to inject some illegal characters to escape the parenthesis. After some thought, I came to the conclusion that in orded to send illegal characters to <code>javascript:redirect()</code>, those characters had to be URL-encoded, after they have been decoded from the URL bar. Hence the double URL encoding!</p>
<p>I sent the second payload <code>https://www.example.com/dir/legacy-browser?redir=/%2500/test</code>, where <code>%2500</code> is the double-URL-encoded null byte. The result was for <code>javascript:redirect('/%00/test')</code> to get reflected. After hitting the button, I got redirected to <code>https://example.com/</code>, meaning that the null byte in <code>javascript:redirect()</code> was actually getting decoded. So I could actually send working double URL encoded payloads.</p>
<p>Having this in my mind, I crafted a payload for this endpoint (and by crafting, I mean copying and pasting the XSS payload from <a href="https://twitter.com/brutelogic">brutelogic</a> in <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20Injection">PayloadsAllTheThings</a> and adding a <code>')</code> in front). I double URL-encoded it and injected it into the parameter. And after hitting the button, the XSS was getting triggered, right before the user got redirected to <code>/</code>.</p>
<p>Final exploit: <code>https://example.com/enpoint?redir=/%2527)%253B%2520alert(document.cookies)%253B%252F%252F</code></p>
<h2>tl;dr</h2>
<p><span alt="carbon" data-base62-sha1="4afrLu9DGIm0CYvPuNmKuq62FaN" class="broken-image" title="This image is broken"><svg class="fa d-icon d-icon-unlink svg-icon" aria-hidden="true"><use xlink:href="#unlink"></use></svg></span></p>
          <p><a href="https://0x00sec.org/t/double-url-encoded-xss/21574/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/double-url-encoded-xss/21574/1</link>
        <pubDate>Wed, 03 Jun 2020 09:55:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-21574-1</guid>
        <source url="https://0x00sec.org/t/double-url-encoded-xss/21574.rss">Double URL-encoded XSS</source>
      </item>
  </channel>
</rss>
