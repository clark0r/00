<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Hacking Databases with SQLmap</title>
    <link>https://0x00sec.org/t/hacking-databases-with-sqlmap/3423</link>
    <description>Hello NullSec, Joker here with another tutorial or cheatsheet depending on how much in detail I go. This time I am gonna go over one of my favorite tools that I at first overlooked the potential. SQLmap is officially a automatic database takeover tool. I&#39;ve been able to successfully &quot;hack&quot; databases with SQLmap with different flags enabled. Of course I won&#39;t go over every little flag, but enough to at least allow you to get a good handle on SQLmap. 

#SQLmap

SQL Injections or SQLi, is where arbitrary code is injected into a website via its URL to force the database to reveal information. A simple SQLi possible URL could be, (url)/index.php?id=1 and to test if it is vulnerable just add a simple &#39; to the end of the URL. If the website returns a error, than most likely the URL is vulnerable. 

One way to find vulnerable sites is to craft certain search queries with certain keywords. A simple query in Google could be, .com index.php?id= in the search bar. Of course if you are very specific, you can just type in your targeted site into the search query with a common possible SQLi like, index.php?id= or just .php?. You could also use Google Dorking. Please check out this [link](https://0x00sec.org/t/google-dorking-tutorial/584) for more explanation. Since there&#39;s already a tutorial, I am not gonna cover Google Dorking with this post.

After searching far and wide for a vulnerable site or a possible vulnerable site, it is time to use SQLmap.

In a terminal, type in:
``
sqlmap -u (url)
``

This is the first command that is needed to test for a possible sqli. The -u flag stands for --url and of course, after the flag type in the full URL or just copy and paste it in (whatever floats your boat). The next step is nothing special because this is after all a automatic takeover tool, but of course waiting for sqlmap to finish is crucial to the whole process. If a SQLi is found than we can continue with the taking over.

To dump passwords, type in:
``
sqlmap -u (url) --passwords
``

Most likely SQLmap will fail with dumping the passwords, but if you&#39;re lucky, sqlmap will attempt to crack the passwords. The only issue with cracking the password is that most of the time the password is stored as a hash with a salt... that&#39;s where the issue lies. Without the salt it&#39;s pretty close to impossible to crack the password, but still possible. 

To dump tables and columns, type in:
``
sqlmap -u (url) --dump-all
``

To dump just tables, type in:
``
sqlmap -u (url) --tables
``

To dump just columns, type in:
``
sqlmap -u (url) --columns
``

Of course there are many other flags that can be used, but these are the very basic ones.

Simple? Indeed.

#Conclusion:

These are just the basics, sqlmap is a very handy tool for beginners since it also tells you what to do, like literally. I am not gonna go over details since Google is your friend. If you are interested please use Google instead of expecting me to reinvent the wheel. A good site to start at is the official [sqlmap](http://sqlmap.org/) site. 

Anyways, this is more of cheatsheet. Nothing more and nothing less.

~Cheers!</description>
    
    <lastBuildDate>Tue, 29 Aug 2017 19:05:37 +0000</lastBuildDate>
    <category>Beginner Guides</category>
    <atom:link href="https://0x00sec.org/t/hacking-databases-with-sqlmap/3423.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Hacking Databases with SQLmap</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>SQLmap is indeed a nice tool. What i like best is to have Burp proxy on intercepting mode, copy the request to a new file(e.g. REQUEST.txt) and then simply use this command:</p>
<pre><code class="lang-auto">sqlmap -r REQUEST.txt -p param
</code></pre>
          <p><a href="https://0x00sec.org/t/hacking-databases-with-sqlmap/3423/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hacking-databases-with-sqlmap/3423/3</link>
        <pubDate>Tue, 29 Aug 2017 19:05:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3423-3</guid>
        <source url="https://0x00sec.org/t/hacking-databases-with-sqlmap/3423.rss">Hacking Databases with SQLmap</source>
      </item>
      <item>
        <title>Hacking Databases with SQLmap</title>
        <dc:creator><![CDATA[hkh4cks]]></dc:creator>
        <description><![CDATA[
            <p>Great cheatsheet <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
My go  to command for sqlmap is</p>
<pre><code class="lang-auto">$ sqlmap --level 5 --depth 3 --dump-all
</code></pre>
<p>Takes fair amount of time TBH, but does the job <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          <p><a href="https://0x00sec.org/t/hacking-databases-with-sqlmap/3423/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hacking-databases-with-sqlmap/3423/2</link>
        <pubDate>Tue, 29 Aug 2017 05:51:12 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3423-2</guid>
        <source url="https://0x00sec.org/t/hacking-databases-with-sqlmap/3423.rss">Hacking Databases with SQLmap</source>
      </item>
      <item>
        <title>Hacking Databases with SQLmap</title>
        <dc:creator><![CDATA[Red_Joker]]></dc:creator>
        <description><![CDATA[
            <p>Hello NullSec, Joker here with another tutorial or cheatsheet depending on how much in detail I go. This time I am gonna go over one of my favorite tools that I at first overlooked the potential. SQLmap is officially a automatic database takeover tool. I’ve been able to successfully “hack” databases with SQLmap with different flags enabled. Of course I won’t go over every little flag, but enough to at least allow you to get a good handle on SQLmap.</p>
<p><span class="hashtag">#SQLmap</span></p>
<p>SQL Injections or SQLi, is where arbitrary code is injected into a website via its URL to force the database to reveal information. A simple SQLi possible URL could be, (url)/index.php?id=1 and to test if it is vulnerable just add a simple ’ to the end of the URL. If the website returns a error, than most likely the URL is vulnerable.</p>
<p>One way to find vulnerable sites is to craft certain search queries with certain keywords. A simple query in Google could be, .com index.php?id= in the search bar. Of course if you are very specific, you can just type in your targeted site into the search query with a common possible SQLi like, index.php?id= or just .php?. You could also use Google Dorking. Please check out this <a href="https://0x00sec.org/t/google-dorking-tutorial/584">link</a> for more explanation. Since there’s already a tutorial, I am not gonna cover Google Dorking with this post.</p>
<p>After searching far and wide for a vulnerable site or a possible vulnerable site, it is time to use SQLmap.</p>
<p>In a terminal, type in:<br>
<code>sqlmap -u (url)</code></p>
<p>This is the first command that is needed to test for a possible sqli. The -u flag stands for --url and of course, after the flag type in the full URL or just copy and paste it in (whatever floats your boat). The next step is nothing special because this is after all a automatic takeover tool, but of course waiting for sqlmap to finish is crucial to the whole process. If a SQLi is found than we can continue with the taking over.</p>
<p>To dump passwords, type in:<br>
<code>sqlmap -u (url) --passwords</code></p>
<p>Most likely SQLmap will fail with dumping the passwords, but if you’re lucky, sqlmap will attempt to crack the passwords. The only issue with cracking the password is that most of the time the password is stored as a hash with a salt… that’s where the issue lies. Without the salt it’s pretty close to impossible to crack the password, but still possible.</p>
<p>To dump tables and columns, type in:<br>
<code>sqlmap -u (url) --dump-all</code></p>
<p>To dump just tables, type in:<br>
<code>sqlmap -u (url) --tables</code></p>
<p>To dump just columns, type in:<br>
<code>sqlmap -u (url) --columns</code></p>
<p>Of course there are many other flags that can be used, but these are the very basic ones.</p>
<p>Simple? Indeed.</p>
<p><span class="hashtag">#Conclusion:</span></p>
<p>These are just the basics, sqlmap is a very handy tool for beginners since it also tells you what to do, like literally. I am not gonna go over details since Google is your friend. If you are interested please use Google instead of expecting me to reinvent the wheel. A good site to start at is the official <a href="http://sqlmap.org/" rel="nofollow noopener">sqlmap</a> site.</p>
<p>Anyways, this is more of cheatsheet. Nothing more and nothing less.</p>
<p>~Cheers!</p>
          <p><a href="https://0x00sec.org/t/hacking-databases-with-sqlmap/3423/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hacking-databases-with-sqlmap/3423/1</link>
        <pubDate>Mon, 28 Aug 2017 14:37:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3423-1</guid>
        <source url="https://0x00sec.org/t/hacking-databases-with-sqlmap/3423.rss">Hacking Databases with SQLmap</source>
      </item>
  </channel>
</rss>
