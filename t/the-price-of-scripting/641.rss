<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Price of Scripting</title>
    <link>https://0x00sec.org/t/the-price-of-scripting/641</link>
    <description>This is going to be short. 

Taking as starting point the last code challenge posted by @oaktree ( https://0x00sec.org/t/programming-challenge-6/638 thanks @oaktree! ) and just out of curiosity,  I decided to take some memory performance numbers. This challenge was pretty straight forward and it does not looks like any of the posted solution could be farther optimized. So, I checked the memory resources used by them.

These is what I have got in my system as provided by the `gnome-system-monitor` and bringing up the `Properties` window for the different versions of the program:

    Language | Memory  | Virt Memory | Res Memory | Wr Memory | Sh Memory
    ---------+---------+-------------+------------+-----------+-----------
    Java     | 8.4 MiB |   5.5 GiB   |   15.6 MiB |   8.4 MiB |   7.5 MiB
    Python   | 2.5 MiB |  23.7 MiB   |    4.8 MiB |   2.5 MiB |   2.3 MiB
    Perl     | 744 KiB |  26.4 MiB   |    2.6 MiB |   744 KiB |   1.9 MiB
    lua      | 212 KiB |  13.8 MiB   |    1.0 MiB |   212 KiB |   840 Kib
    C++      | 176.KiB |  12.4 MiB   |    1.0 MiB | 176.0 KiB | 900.0 KiB
    C        | 100 KiB |   4.2 MiB   |  352.0 KiB | 100.0 KiB | 276.0 KiB
    C-diet   |  20 KiB | 172.0 KiB   |    4.0 KiB |  20.0 KiB |   N/A

Some comments to better understand the table.

I modify the programs to wait for a key press before they end so I could capture the numbers in the table.
C-diet is the C version compiled with __dietLibC__ and therefore it is a static binary and that is the reason it does not share memory.

Java version was compiled with OpenJDK

Columns in the table are:

* __Virt Memory__: Virtual memory.
* __Res Memory__: Resident Memory.
* __Wr Memory__: Writable Memory.
* __Sh Memory__: Shared Memory.

There are pretty good explanations in the Internet for these parameters in case you are curious about its exact meaning.

Scripting languages are great and, for many different problems, they are the right solution. But that power and flexibility comes with a price that is good to understand.</description>
    
    <lastBuildDate>Fri, 22 Jul 2016 12:53:52 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/the-price-of-scripting/641.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Price of Scripting</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/the-price-of-scripting/641/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-price-of-scripting/641/10</link>
        <pubDate>Sun, 21 Jan 2018 00:31:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-641-10</guid>
        <source url="https://0x00sec.org/t/the-price-of-scripting/641.rss">The Price of Scripting</source>
      </item>
      <item>
        <title>The Price of Scripting</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>I’d be interested to see how C-diet stands up to ASM…</p>
          <p><a href="https://0x00sec.org/t/the-price-of-scripting/641/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-price-of-scripting/641/9</link>
        <pubDate>Fri, 22 Jul 2016 12:53:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-641-9</guid>
        <source url="https://0x00sec.org/t/the-price-of-scripting/641.rss">The Price of Scripting</source>
      </item>
      <item>
        <title>The Price of Scripting</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>That is what I’ve got in one of my machines. Just tried in another, number are a bit better, but still far away from the rest</p>
<p><code>8.9 MiB | 2.9MiB | 16.5MiB | 8.9 MiB | 8.1 MiB</code></p>
<p>Note that the virtual memory is, in principle, memory that has been requested to the OS but that has not been used yet.</p>
          <p><a href="https://0x00sec.org/t/the-price-of-scripting/641/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-price-of-scripting/641/8</link>
        <pubDate>Thu, 23 Jun 2016 19:22:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-641-8</guid>
        <source url="https://0x00sec.org/t/the-price-of-scripting/641.rss">The Price of Scripting</source>
      </item>
      <item>
        <title>The Price of Scripting</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <pre><code>Language | Memory  | Virt Memory | Res Memory | Wr Memory | Sh Memory
---------+---------+-------------+------------+-----------+-----------
Java     | 8.4 MiB |   5.5 GiB   |   15.6 MiB |   8.4 MiB |   7.5 MiB
Python   | 2.5 MiB |  23.7 MiB   |    4.8 MiB |   2.5 MiB |   2.3 MiB
Perl     | 744 KiB |  26.4 MiB   |    2.6 MiB |   744 KiB |   1.9 MiB
lua      | 212 KiB |  13.8 MiB   |    1.0 MiB |   212 KiB |   840 Kib
C++      | 176.KiB |  12.4 MiB   |    1.0 MiB | 176.0 KiB | 900.0 KiB
C        | 100 KiB |   4.2 MiB   |  352.0 KiB | 100.0 KiB | 276.0 KiB
C-diet   |  20 KiB | 172.0 KiB   |    4.0 KiB |  20.0 KiB |   N/A
</code></pre>
<p>Wait, why does Java take up 5.5 <strong>gigabytes</strong> of Virtual Memory!?</p>
          <p><a href="https://0x00sec.org/t/the-price-of-scripting/641/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-price-of-scripting/641/7</link>
        <pubDate>Thu, 23 Jun 2016 19:04:32 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-641-7</guid>
        <source url="https://0x00sec.org/t/the-price-of-scripting/641.rss">The Price of Scripting</source>
      </item>
      <item>
        <title>The Price of Scripting</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Working on a bot you say? No, not really. Although I am looking at an old Internet Worm.</p>
          <p><a href="https://0x00sec.org/t/the-price-of-scripting/641/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-price-of-scripting/641/6</link>
        <pubDate>Thu, 23 Jun 2016 06:04:26 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-641-6</guid>
        <source url="https://0x00sec.org/t/the-price-of-scripting/641.rss">The Price of Scripting</source>
      </item>
      <item>
        <title>The Price of Scripting</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a> I think this overhead does not come much from the compilation, but all the high level constructors. Whenever you write one python line that doe a lot of stuff… it is actually doing a lot of stuff under the hood… because, at the end, the processor does what it can do… some basic logic/arithmetic operations, moving data around, jumping and that is roughly it.</p>
<p>I think that the same happens to C++. The standard library is just big, and the trade-off between memory usage and speed is well-known.</p>
<aside class="quote no-group" data-username="oaktree" data-post="2" data-topic="641">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/oaktree/40/4077_2.png" class="avatar"> oaktree:</div>
<blockquote>
<p>We may need to use larger test sizes to help see where all the memory is going.</p>
</blockquote>
</aside>
<p>And I also agree with you that this samples are not representative for the general case. I think they are interesting for cases where a small tool for a modest platform has to be used… 2Mb in a router may be quite some memory…</p>
<aside class="quote group-VIP" data-username="pry0cc" data-post="4" data-topic="641">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/pry0cc/40/6_2.png" class="avatar"> pry0cc:</div>
<blockquote>
<p>since Java is always regarded as being slow and clunky; however they operate on the same compliation and runtime paradime.</p>
</blockquote>
</aside>
<p>Java is not much popular around here, but it a different beast. In addition to the original bytecode compilation (original as first… it was not original when Sun introduced it… yes Sun), Java soon integrated a JIT compiler and later on the so-called Hot-Spot.</p>
<p>The JIT compiler actually compiles the bytes codes to real machine code. The hotspot is in principle, able to analyze the program at run-time and decide which parts are used more frequently (the hotspot) and selectively compile only what is required. Advocates of this approach usually claims that run-time optimizations can be better than compile-time optiomizations, as more information is available.</p>
<p>But all that is <em>speed</em> related… memory-wise, it use to take a look, I do not know nowadays.</p>
<p><a class="mention" href="https://0x00sec.org/u/cromical">@Cromical</a> are you working in a bot for the forum???</p>
          <p><a href="https://0x00sec.org/t/the-price-of-scripting/641/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-price-of-scripting/641/5</link>
        <pubDate>Thu, 23 Jun 2016 05:37:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-641-5</guid>
        <source url="https://0x00sec.org/t/the-price-of-scripting/641.rss">The Price of Scripting</source>
      </item>
      <item>
        <title>The Price of Scripting</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Wow! I knew scripting languages are hungry, but I didn’t know by that much! Since python compiles to bytecode rather than being re-compiled at runtime (similar to <a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a>’s comment), I’d be interested to see how Java stacks up, since Java is always regarded as being slow and clunky; however they operate on the same compliation and runtime paradime.</p>
<p>As for C-diet I’m incredibly impressed, I didn’t know C-diet was a thing! Seems like a space-rocket type deal.</p>
<p>Nice work Pico! <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/the-price-of-scripting/641/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-price-of-scripting/641/4</link>
        <pubDate>Thu, 23 Jun 2016 05:22:42 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-641-4</guid>
        <source url="https://0x00sec.org/t/the-price-of-scripting/641.rss">The Price of Scripting</source>
      </item>
      <item>
        <title>The Price of Scripting</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Again I’m amazed! Keep the great work up mate!</p>
          <p><a href="https://0x00sec.org/t/the-price-of-scripting/641/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-price-of-scripting/641/3</link>
        <pubDate>Thu, 23 Jun 2016 02:53:06 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-641-3</guid>
        <source url="https://0x00sec.org/t/the-price-of-scripting/641.rss">The Price of Scripting</source>
      </item>
      <item>
        <title>The Price of Scripting</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>What I was unaware of for a while is that modern scripting languages like Python and Ruby are actually compiled to bytecode when run (rather than interpreted [google the difference between MRI and YARV, two Ruby implementations]).</p>
<p>The thing is, this runtime compilation brings about considerable overhead, as your numbers show.</p>
<p>Also, if you look at the C++ implementation, which I don’t think could be farther optimized, it’s interesting to see how <em>much</em> more memory it uses compared to C. I think the <a href="https://en.wikipedia.org/wiki/Standard_Template_Library" rel="nofollow noopener">C++ STL</a> is probably to blame, although there is much controversy surrounding its effects on program performance.</p>
<p>We may need to use larger test sizes to help see where all the memory is going.</p>
          <p><a href="https://0x00sec.org/t/the-price-of-scripting/641/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-price-of-scripting/641/2</link>
        <pubDate>Thu, 23 Jun 2016 00:21:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-641-2</guid>
        <source url="https://0x00sec.org/t/the-price-of-scripting/641.rss">The Price of Scripting</source>
      </item>
      <item>
        <title>The Price of Scripting</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>This is going to be short.</p>
<p>Taking as starting point the last code challenge posted by <a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a> ( <a href="https://0x00sec.org/t/programming-challenge-6/638" class="inline-onebox">Programming Challenge #6</a> thanks <a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a>! ) and just out of curiosity,  I decided to take some memory performance numbers. This challenge was pretty straight forward and it does not looks like any of the posted solution could be farther optimized. So, I checked the memory resources used by them.</p>
<p>These is what I have got in my system as provided by the <code>gnome-system-monitor</code> and bringing up the <code>Properties</code> window for the different versions of the program:</p>
<pre><code>Language | Memory  | Virt Memory | Res Memory | Wr Memory | Sh Memory
---------+---------+-------------+------------+-----------+-----------
Java     | 8.4 MiB |   5.5 GiB   |   15.6 MiB |   8.4 MiB |   7.5 MiB
Python   | 2.5 MiB |  23.7 MiB   |    4.8 MiB |   2.5 MiB |   2.3 MiB
Perl     | 744 KiB |  26.4 MiB   |    2.6 MiB |   744 KiB |   1.9 MiB
lua      | 212 KiB |  13.8 MiB   |    1.0 MiB |   212 KiB |   840 Kib
C++      | 176.KiB |  12.4 MiB   |    1.0 MiB | 176.0 KiB | 900.0 KiB
C        | 100 KiB |   4.2 MiB   |  352.0 KiB | 100.0 KiB | 276.0 KiB
C-diet   |  20 KiB | 172.0 KiB   |    4.0 KiB |  20.0 KiB |   N/A
</code></pre>
<p>Some comments to better understand the table.</p>
<p>I modify the programs to wait for a key press before they end so I could capture the numbers in the table.<br>
C-diet is the C version compiled with <strong>dietLibC</strong> and therefore it is a static binary and that is the reason it does not share memory.</p>
<p>Java version was compiled with OpenJDK</p>
<p>Columns in the table are:</p>
<ul>
<li>
<strong>Virt Memory</strong>: Virtual memory.</li>
<li>
<strong>Res Memory</strong>: Resident Memory.</li>
<li>
<strong>Wr Memory</strong>: Writable Memory.</li>
<li>
<strong>Sh Memory</strong>: Shared Memory.</li>
</ul>
<p>There are pretty good explanations in the Internet for these parameters in case you are curious about its exact meaning.</p>
<p>Scripting languages are great and, for many different problems, they are the right solution. But that power and flexibility comes with a price that is good to understand.</p>
          <p><a href="https://0x00sec.org/t/the-price-of-scripting/641/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/the-price-of-scripting/641/1</link>
        <pubDate>Wed, 22 Jun 2016 22:06:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-641-1</guid>
        <source url="https://0x00sec.org/t/the-price-of-scripting/641.rss">The Price of Scripting</source>
      </item>
  </channel>
</rss>
