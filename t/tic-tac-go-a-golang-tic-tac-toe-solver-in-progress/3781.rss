<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Tic-Tac-Go: A Golang Tic-Tac-Toe Solver in progress</title>
    <link>https://0x00sec.org/t/tic-tac-go-a-golang-tic-tac-toe-solver-in-progress/3781</link>
    <description># Tic-Tac-Go! A Tic-Tac-Toe solver in Golang

I&#39;ve seen quite a bit of community interest in learning Go but not a lot of material around it. As an exercise for myself, I started writing a Tic-Tac-Toe solver in Golang to get the hang of the language. In the following series, I will share with you things as I figured them out (so get ready to see me pivot as I develop!) and I&#39;ll explain along the way. This is a fun complement to [A Tour of Go](https://tour.golang.org/list), which I highly recommend. 

### Prerequisites

You should have a Golang development environment already set up and working on your machine. 
You should have programming experience, but you don&#39;t need to be a wizard.
Understanding of static languages and typing systems is strongly recommended, but will be explained in detail where relevant.
You need to be able to tolerate my writing, since this entire post is, well, my writing.

## Setting up the board

In case anyone here happens to be from Mars, let&#39;s go over what Tic-Tac-Toe is real quick. Per [Wikipedia](https://en.wikipedia.org/wiki/Tic-tac-toe)

&gt; Tic-tac-toe (also known as noughts and crosses or Xs and Os) is a paper-and-pencil game for two players, X and O, who take turns marking the spaces in a 3×3 grid. The player who succeeds in placing three of their marks in a horizontal, vertical, or diagonal row wins the game.

I hope that wasn&#39;t a shock to anyone.

### Design

Given that we are trying to model a 3x3 grid which holds one value per space, it seems like the ideal object to store this would be a [matrix](https://en.wikipedia.org/wiki/Matrix_(mathematics)). In fact, a matrix is absolutely _perfect_ for this. Just one problem: How do we make one? This is where we will demonstrate one of Go&#39;s most powerful features: a strong typing system that also easily allows for the creation of new types and structs.

### Golang and types

The C and C++ vets probably saw this coming from a mile away, but to represent our board, we will need to use structs. However, before we get into that, a little background on Go&#39;s typing system is in order. Compared to most other languages, Go has a fairly strict typing system. Types don&#39;t masquerade as other types, and even things that are compatible by virtue of content and size (`int` and `int32` on a 32-bit system are both 32-bits wide) cannot be used interchangeably.

#### A note about assignment
You&#39;ll see the `:=` operator quite a bit. Golang uses this when declaration and assignment happen at the same time, and it automatically sets the receiving variable to the type of the initialized data.

Example:

```go
my_string := &quot;foo&quot;  // Declaration and assignment are simultaneous. my_string becomes a string
```

vs

```go
var my_string string  // my_string is declared as a string, but contains no data yet
my_string = &quot;foo&quot;  // my_string is assigned value &quot;foo&quot;, but does not use := operator because it was already declared
```

#### Doing it the wrong way
_For the purposes of this paper, we&#39;re going to look at the wrong way first._

For our use, we will need to create some structs to represent our data, and yes, each struct represents a unique type. Notice that we create two structs, called &quot;Row&quot; and &quot;Board&quot;. The `Row` struct has a single field, `col`, that is a integer array with a length of 3. In other words, each row has an array that can hold 3 ints.

The second struct is the `Board`, which holds three instances of `Row` in the field `row`. As you probably figured out, this leaves us with a 3x3 board (3 rows that have 3 columns each).

(This compiles)
```go
package main

import (
        &quot;fmt&quot;
)

type Row struct {
        col [3]int
}

type Board struct {
        row [3]Row
}

func main() {
        my_board := Board{}  // This is how we initialize a board
        // Note how we reference a single cell on the board
        my_board.row[0].col[0] = 1 
        // Loop over the rows of the board and print their contents
        // the _ is /dev/null for variables returned that we don&#39;t care about
        for i, _ := range my_board.row {
                fmt.Println(my_board.row[i])
        }
}
```

### Building the board a better way

Let&#39;s face it: that was kinda complicated. Who wants to deal with structs when they don&#39;t have to? You might have also noticed that the board was &quot;upside down&quot; in a way (if you&#39;re used looking at a Cartesian plane like me), so that [0,0] was located at the top left and [2,2] was the bottom right.

### Slices

Go is known for being a stickler about types, so you might find it surprising that it gives you what turns out to be a relatively flexable data type called a `slice`. A slice is an abstraction of an array that has variable length. It can contain most any data type, but only one type per slice (just like an array, imagine that). For example, a slice can contain ints or strings or pointers, but cannot mix them. You won&#39;t see an int and a string in the same array or slice. This isn&#39;t python.

_NB: py takes issue with my use of the word &quot;contain&quot;. I agree that it is imprecise, but assert that it&#39;s a good mental model for how arrays and slices operate. This is not the paper to go into explaining how the typing in these data structures actually works._ 

And yes, you may have guessed that slices can contain other slices. We can do this without structs!

```go
package main

import (
        &quot;fmt&quot;
)

func main() {
        my_board := [][]string{
                []string{&quot;_&quot;, &quot;_&quot;, &quot;_&quot;},
                []string{&quot;_&quot;, &quot;_&quot;, &quot;_&quot;},
                []string{&quot;_&quot;, &quot;_&quot;, &quot;_&quot;},
        }
        for i, _ := range my_board { // Loop over the rows of the board and print their contents
                fmt.Println(my_board[i])
        }
}
```

Cool, so we have the board, it&#39;s still upside down (for some value of upside-down), but at least we got rid of those crazy structs. This is something that feels manageable. However, there&#39;s still a problem: Slices can be appended to. We don&#39;t want a board that is variable in size, so we need to limit the length of each slice by fixing it as an array instead. 


### The best way: Multidimensional arrays

Now, in my limited experience, this would be the best way to represent the board in a Golang-y way. We create a board that is limited by both size and type as to what can go into it (more on limiting what the contents can be later).

The last model of the board -- and the one we&#39;ll probably stick with -- is a multi-dimensional array.

```go
package main

import (
        &quot;fmt&quot;
)

func main() {
        // This is called a &quot;multi-dimensional array&quot;
        my_board := [3][3]string{
                [3]string{&quot;_&quot;, &quot;_&quot;, &quot;_&quot;},
                [3]string{&quot;_&quot;, &quot;_&quot;, &quot;_&quot;},
                [3]string{&quot;_&quot;, &quot;_&quot;, &quot;_&quot;},
        }
        my_board[0][0] = &quot;X&quot;

        for i, _ := range my_board {
                fmt.Println(my_board[i])
        }
}
```

You&#39;ll notice that this looks almost identical to the previous data structure, except that we have added a couple of 3s. In Golang, a slice is implied when you define an array without an explicit length (more or less). It would look something like this:

```go
my_slice := []string{}  // A string slice
my_array := [3]string{}  // A string array of size(3)
```

By explicitly including a length in the declaration, we have changed from declaring a slice to an array of fixed size. You&#39;ll also notice that the first array declaration uses two `[3]` blocks instead of one. What&#39;s happening here? Breaking down the declaration syntax for arrays and slices, it looks like this:

```go
                [3]string{&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;}
                 ^   ^      ^      ^      ^
                  |  |      |      |      |
                 /   |      \      |      /
            Length  type         data
```

In order to tell our array that each element of its data will be more arrays of `n` length, we supply that to the `type` field. This is also called a &quot;two dimensional array&quot;, since the data it represents can be thought of as having two axes, an X and a Y. If you wanted to, you could represent an array of any number of dimensions by extending this pattern.

```go
// Two dimensional array
var my_board [3][3]string

// Three dimensional array
var spaaaaaaace_the_final_frontier [5][10][4]int
```
## Conclusion

Over the course of this article, we quickly looked at Go&#39;s typing system and then dove into three approaches to modeling a tic-tac-toe board using structs, slices, and arrays. In so doing, we demonstrated Go&#39;s strict typing system, how to create structs and custom types, the differences between slices and arrays, and how to create multidimensional arrays. As I continue work on the solver, I&#39;ll continue to share the development and hopefully we&#39;ll all learn a thing or two about Go.

For futher reading, I recommend the following:
 - [A Tour of Go: Variables](https://tour.golang.org/basics/8)
 - [A Tour of Go: Structs](https://tour.golang.org/moretypes/2)
 - [A Tour of Go: Arrays](https://tour.golang.org/moretypes/6)
 - [A Tour of Go: Slices](https://tour.golang.org/moretypes/7)
 - [Multidimensional Arrays](https://www.tutorialspoint.com/go/go_multi_dimensional_arrays.htm)</description>
    
    <lastBuildDate>Mon, 02 Oct 2017 02:28:01 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/tic-tac-go-a-golang-tic-tac-toe-solver-in-progress/3781.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Tic-Tac-Go: A Golang Tic-Tac-Toe Solver in progress</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/tic-tac-go-a-golang-tic-tac-toe-solver-in-progress/3781/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/tic-tac-go-a-golang-tic-tac-toe-solver-in-progress/3781/4</link>
        <pubDate>Sun, 21 Jan 2018 00:30:09 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3781-4</guid>
        <source url="https://0x00sec.org/t/tic-tac-go-a-golang-tic-tac-toe-solver-in-progress/3781.rss">Tic-Tac-Go: A Golang Tic-Tac-Toe Solver in progress</source>
      </item>
      <item>
        <title>Tic-Tac-Go: A Golang Tic-Tac-Toe Solver in progress</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <p>As I find time, here are the planned parts:</p>
<ol>
<li>This article</li>
<li>Interaction basics (it randomly guesses cells on its turn)</li>
<li>Skynet mode (it actively solves the puzzle)</li>
</ol>
          <p><a href="https://0x00sec.org/t/tic-tac-go-a-golang-tic-tac-toe-solver-in-progress/3781/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/tic-tac-go-a-golang-tic-tac-toe-solver-in-progress/3781/2</link>
        <pubDate>Mon, 02 Oct 2017 02:28:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3781-2</guid>
        <source url="https://0x00sec.org/t/tic-tac-go-a-golang-tic-tac-toe-solver-in-progress/3781.rss">Tic-Tac-Go: A Golang Tic-Tac-Toe Solver in progress</source>
      </item>
      <item>
        <title>Tic-Tac-Go: A Golang Tic-Tac-Toe Solver in progress</title>
        <dc:creator><![CDATA[fraq]]></dc:creator>
        <description><![CDATA[
            <h1>Tic-Tac-Go! A Tic-Tac-Toe solver in Golang</h1>
<p>I’ve seen quite a bit of community interest in learning Go but not a lot of material around it. As an exercise for myself, I started writing a Tic-Tac-Toe solver in Golang to get the hang of the language. In the following series, I will share with you things as I figured them out (so get ready to see me pivot as I develop!) and I’ll explain along the way. This is a fun complement to <a href="https://tour.golang.org/list" rel="nofollow noopener">A Tour of Go</a>, which I highly recommend.</p>
<h3>Prerequisites</h3>
<p>You should have a Golang development environment already set up and working on your machine.<br>
You should have programming experience, but you don’t need to be a wizard.<br>
Understanding of static languages and typing systems is strongly recommended, but will be explained in detail where relevant.<br>
You need to be able to tolerate my writing, since this entire post is, well, my writing.</p>
<h2>Setting up the board</h2>
<p>In case anyone here happens to be from Mars, let’s go over what Tic-Tac-Toe is real quick. Per <a href="https://en.wikipedia.org/wiki/Tic-tac-toe" rel="nofollow noopener">Wikipedia</a></p>
<blockquote>
<p>Tic-tac-toe (also known as noughts and crosses or Xs and Os) is a paper-and-pencil game for two players, X and O, who take turns marking the spaces in a 3×3 grid. The player who succeeds in placing three of their marks in a horizontal, vertical, or diagonal row wins the game.</p>
</blockquote>
<p>I hope that wasn’t a shock to anyone.</p>
<h3>Design</h3>
<p>Given that we are trying to model a 3x3 grid which holds one value per space, it seems like the ideal object to store this would be a <a href="https://en.wikipedia.org/wiki/Matrix_(mathematics)" rel="nofollow noopener">matrix</a>. In fact, a matrix is absolutely <em>perfect</em> for this. Just one problem: How do we make one? This is where we will demonstrate one of Go’s most powerful features: a strong typing system that also easily allows for the creation of new types and structs.</p>
<h3>Golang and types</h3>
<p>The C and C++ vets probably saw this coming from a mile away, but to represent our board, we will need to use structs. However, before we get into that, a little background on Go’s typing system is in order. Compared to most other languages, Go has a fairly strict typing system. Types don’t masquerade as other types, and even things that are compatible by virtue of content and size (<code>int</code> and <code>int32</code> on a 32-bit system are both 32-bits wide) cannot be used interchangeably.</p>
<h4>A note about assignment</h4>
<p>You’ll see the <code>:=</code> operator quite a bit. Golang uses this when declaration and assignment happen at the same time, and it automatically sets the receiving variable to the type of the initialized data.</p>
<p>Example:</p>
<pre><code class="lang-auto">my_string := "foo"  // Declaration and assignment are simultaneous. my_string becomes a string
</code></pre>
<p>vs</p>
<pre><code class="lang-auto">var my_string string  // my_string is declared as a string, but contains no data yet
my_string = "foo"  // my_string is assigned value "foo", but does not use := operator because it was already declared
</code></pre>
<h4>Doing it the wrong way</h4>
<p><em>For the purposes of this paper, we’re going to look at the wrong way first.</em></p>
<p>For our use, we will need to create some structs to represent our data, and yes, each struct represents a unique type. Notice that we create two structs, called “Row” and “Board”. The <code>Row</code> struct has a single field, <code>col</code>, that is a integer array with a length of 3. In other words, each row has an array that can hold 3 ints.</p>
<p>The second struct is the <code>Board</code>, which holds three instances of <code>Row</code> in the field <code>row</code>. As you probably figured out, this leaves us with a 3x3 board (3 rows that have 3 columns each).</p>
<p>(This compiles)</p>
<pre><code class="lang-auto">package main

import (
        "fmt"
)

type Row struct {
        col [3]int
}

type Board struct {
        row [3]Row
}

func main() {
        my_board := Board{}  // This is how we initialize a board
        // Note how we reference a single cell on the board
        my_board.row[0].col[0] = 1 
        // Loop over the rows of the board and print their contents
        // the _ is /dev/null for variables returned that we don't care about
        for i, _ := range my_board.row {
                fmt.Println(my_board.row[i])
        }
}
</code></pre>
<h3>Building the board a better way</h3>
<p>Let’s face it: that was kinda complicated. Who wants to deal with structs when they don’t have to? You might have also noticed that the board was “upside down” in a way (if you’re used looking at a Cartesian plane like me), so that [0,0] was located at the top left and [2,2] was the bottom right.</p>
<h3>Slices</h3>
<p>Go is known for being a stickler about types, so you might find it surprising that it gives you what turns out to be a relatively flexable data type called a <code>slice</code>. A slice is an abstraction of an array that has variable length. It can contain most any data type, but only one type per slice (just like an array, imagine that). For example, a slice can contain ints or strings or pointers, but cannot mix them. You won’t see an int and a string in the same array or slice. This isn’t python.</p>
<p><em>NB: py takes issue with my use of the word “contain”. I agree that it is imprecise, but assert that it’s a good mental model for how arrays and slices operate. This is not the paper to go into explaining how the typing in these data structures actually works.</em></p>
<p>And yes, you may have guessed that slices can contain other slices. We can do this without structs!</p>
<pre><code class="lang-auto">package main

import (
        "fmt"
)

func main() {
        my_board := [][]string{
                []string{"_", "_", "_"},
                []string{"_", "_", "_"},
                []string{"_", "_", "_"},
        }
        for i, _ := range my_board { // Loop over the rows of the board and print their contents
                fmt.Println(my_board[i])
        }
}
</code></pre>
<p>Cool, so we have the board, it’s still upside down (for some value of upside-down), but at least we got rid of those crazy structs. This is something that feels manageable. However, there’s still a problem: Slices can be appended to. We don’t want a board that is variable in size, so we need to limit the length of each slice by fixing it as an array instead.</p>
<h3>The best way: Multidimensional arrays</h3>
<p>Now, in my limited experience, this would be the best way to represent the board in a Golang-y way. We create a board that is limited by both size and type as to what can go into it (more on limiting what the contents can be later).</p>
<p>The last model of the board – and the one we’ll probably stick with – is a multi-dimensional array.</p>
<pre><code class="lang-auto">package main

import (
        "fmt"
)

func main() {
        // This is called a "multi-dimensional array"
        my_board := [3][3]string{
                [3]string{"_", "_", "_"},
                [3]string{"_", "_", "_"},
                [3]string{"_", "_", "_"},
        }
        my_board[0][0] = "X"

        for i, _ := range my_board {
                fmt.Println(my_board[i])
        }
}
</code></pre>
<p>You’ll notice that this looks almost identical to the previous data structure, except that we have added a couple of 3s. In Golang, a slice is implied when you define an array without an explicit length (more or less). It would look something like this:</p>
<pre><code class="lang-auto">my_slice := []string{}  // A string slice
my_array := [3]string{}  // A string array of size(3)
</code></pre>
<p>By explicitly including a length in the declaration, we have changed from declaring a slice to an array of fixed size. You’ll also notice that the first array declaration uses two <code>[3]</code> blocks instead of one. What’s happening here? Breaking down the declaration syntax for arrays and slices, it looks like this:</p>
<pre><code class="lang-auto">                [3]string{"foo", "bar", "baz"}
                 ^   ^      ^      ^      ^
                  |  |      |      |      |
                 /   |      \      |      /
            Length  type         data
</code></pre>
<p>In order to tell our array that each element of its data will be more arrays of <code>n</code> length, we supply that to the <code>type</code> field. This is also called a “two dimensional array”, since the data it represents can be thought of as having two axes, an X and a Y. If you wanted to, you could represent an array of any number of dimensions by extending this pattern.</p>
<pre><code class="lang-auto">// Two dimensional array
var my_board [3][3]string

// Three dimensional array
var spaaaaaaace_the_final_frontier [5][10][4]int
</code></pre>
<h2>Conclusion</h2>
<p>Over the course of this article, we quickly looked at Go’s typing system and then dove into three approaches to modeling a tic-tac-toe board using structs, slices, and arrays. In so doing, we demonstrated Go’s strict typing system, how to create structs and custom types, the differences between slices and arrays, and how to create multidimensional arrays. As I continue work on the solver, I’ll continue to share the development and hopefully we’ll all learn a thing or two about Go.</p>
<p>For futher reading, I recommend the following:</p>
<ul>
<li><a href="https://tour.golang.org/basics/8" rel="nofollow noopener">A Tour of Go: Variables</a></li>
<li><a href="https://tour.golang.org/moretypes/2" rel="nofollow noopener">A Tour of Go: Structs</a></li>
<li><a href="https://tour.golang.org/moretypes/6" rel="nofollow noopener">A Tour of Go: Arrays</a></li>
<li><a href="https://tour.golang.org/moretypes/7" rel="nofollow noopener">A Tour of Go: Slices</a></li>
<li><a href="https://www.tutorialspoint.com/go/go_multi_dimensional_arrays.htm" rel="nofollow noopener">Multidimensional Arrays</a></li>
</ul>
          <p><a href="https://0x00sec.org/t/tic-tac-go-a-golang-tic-tac-toe-solver-in-progress/3781/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/tic-tac-go-a-golang-tic-tac-toe-solver-in-progress/3781/1</link>
        <pubDate>Mon, 02 Oct 2017 02:13:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3781-1</guid>
        <source url="https://0x00sec.org/t/tic-tac-go-a-golang-tic-tac-toe-solver-in-progress/3781.rss">Tic-Tac-Go: A Golang Tic-Tac-Toe Solver in progress</source>
      </item>
  </channel>
</rss>
