<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Black magic? Using Z3 for automated crackme solving</title>
    <link>https://0x00sec.org/t/black-magic-using-z3-for-automated-crackme-solving/6889</link>
    <description>Or your math homework. Or anything, really. Z3&#39;s rad. :sunglasses:

## What is Z3?
Z3 is an open-source theorem prover by Microsoft (yes, seriously). In layman&#39;s terms, you can give it any mathematically expressable problem and it will tell you if there is a solution for it and what the solution is. It&#39;s not only a mathematician&#39;s tool though - in this little introduction I would like to show you how you can use it to find a valid key for a super secret NSA tool (or just any CTF/Crackme challenge). It&#39;s not meant to be a full tutorial, it&#39;s just to show you that Z3 exists and how you can use it. You can find all the info you need for your specific problem in their documentary.

## Finding the &#39;mathematically expressable problem&#39;
This is the scenario: Let&#39;s say you haxxed into the NSA and downloaded a sweet tool that can be used to hack the planet or whatever, but you need to put in a key first. You have already RE&#39;d the key checker and you know how it works, and you could write a bruteforce script, but you haxxed into the mainframe earlier and found out that the feds are already on the way. You&#39;re short on time! Your script might not finish before they get you and nobody will ever know about your sick skillz, about how you haxxed into the NSA, about the software you borrowed, about how you were able to RE it, because you can&#39;t twitter from Guantanamo.

Is there a way to solve the problem fast enough so that you have time to upload your work AND get the next plane to russia to escape the feds? This is where Z3 comes into play. :sunglasses: 

Have you watched or read the Hitchhiker&#39;s guide? Of course you have. Z3 is like Deep Thought, it can give you any answer, but only if you have the right question. This introduction is not about the question, but about talking to Deep Thought. For this scenario I will assume that you have recovered the following &#39;question&#39;, or in Z3 terms, constraints, from the key checker:

- The key consists of 3 integers (x, y, z)
- x is a multiple of 7
- the LSB of the result of the bitwise or of x and y is 123
- x &gt; 1337337
- z = avg(x, y)
- z &lt; 42424242

That&#39;s just what I&#39;ve come up with spontanously, but Z3 can really solve anything you throw at it.

## Installation
`sudo pip install z3-solver`
It might take a while to compile. Don&#39;t get fooled by the &#39;z3&#39; packet that can also be installed with pip.

## Writing the solver
```
from z3 import *

# There are a few datatypes to choose from. For our purpose,
# 32-bit BitVecs are a good representation of ints. Z3 has its
# own int, which is more a &#39;mathematical int&#39;, it can get infinitely
# large and does not support bitwise operations.
x, y, z = BitVecs(&quot;x y z&quot;, 32)

#Now just add the constraints
s = Solver()
s.add(x % 7 == 0)
s.add((x | y) &amp; 0xFF == 123)
s.add(x &gt; 1337337)
s.add(z == (x + y)/2)
s.add(z &lt; 42424242)

#and check if a solution exists. If there is one, it will be printed.
if s.check():
	print(s.model())
```
```
$ time python crack.py 
[y = 3625989961, x = 719564090, z = 25293377]

real	0m0,255s
user	0m0,237s
sys	0m0,017s
```
**Bam!** Instant result. That&#39;s all. Easy, right?

## How does it work?
Black magic. Seriously, I advice you to just treat it as a black box.
If you DO want to find out about the crazy theory behind it, have a look at the wiki. https://github.com/Z3Prover/z3/wiki

## Where to go on from here?
Try it out! Try [this](https://0x00sec.org/t/crackme-challenge-part-5-license-key-c/465) challenge for example. A bruteforce solution is already provided, so if you want to skip the RE part you can find the constraints there and build your solver directly.</description>
    
    <lastBuildDate>Wed, 30 May 2018 06:27:45 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/black-magic-using-z3-for-automated-crackme-solving/6889.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Black magic? Using Z3 for automated crackme solving</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/black-magic-using-z3-for-automated-crackme-solving/6889/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/black-magic-using-z3-for-automated-crackme-solving/6889/4</link>
        <pubDate>Thu, 28 Jun 2018 15:57:15 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6889-4</guid>
        <source url="https://0x00sec.org/t/black-magic-using-z3-for-automated-crackme-solving/6889.rss">Black magic? Using Z3 for automated crackme solving</source>
      </item>
      <item>
        <title>Black magic? Using Z3 for automated crackme solving</title>
        <dc:creator><![CDATA[swidi]]></dc:creator>
        <description><![CDATA[
            <p>Sure! Good idea, I’ve added one.</p>
          <p><a href="https://0x00sec.org/t/black-magic-using-z3-for-automated-crackme-solving/6889/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/black-magic-using-z3-for-automated-crackme-solving/6889/3</link>
        <pubDate>Wed, 30 May 2018 06:27:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6889-3</guid>
        <source url="https://0x00sec.org/t/black-magic-using-z3-for-automated-crackme-solving/6889.rss">Black magic? Using Z3 for automated crackme solving</source>
      </item>
      <item>
        <title>Black magic? Using Z3 for automated crackme solving</title>
        <dc:creator><![CDATA[fxbg]]></dc:creator>
        <description><![CDATA[
            <p>Could you provide a crackme that this will solve?</p>
          <p><a href="https://0x00sec.org/t/black-magic-using-z3-for-automated-crackme-solving/6889/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/black-magic-using-z3-for-automated-crackme-solving/6889/2</link>
        <pubDate>Tue, 29 May 2018 20:12:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6889-2</guid>
        <source url="https://0x00sec.org/t/black-magic-using-z3-for-automated-crackme-solving/6889.rss">Black magic? Using Z3 for automated crackme solving</source>
      </item>
      <item>
        <title>Black magic? Using Z3 for automated crackme solving</title>
        <dc:creator><![CDATA[swidi]]></dc:creator>
        <description><![CDATA[
            <p>Or your math homework. Or anything, really. Z3’s rad. <img src="https://0x00sec.org/images/emoji/twitter/sunglasses.png?v=9" title=":sunglasses:" class="emoji" alt=":sunglasses:"></p>
<h2>What is Z3?</h2>
<p>Z3 is an open-source theorem prover by Microsoft (yes, seriously). In layman’s terms, you can give it any mathematically expressable problem and it will tell you if there is a solution for it and what the solution is. It’s not only a mathematician’s tool though - in this little introduction I would like to show you how you can use it to find a valid key for a super secret NSA tool (or just any CTF/Crackme challenge). It’s not meant to be a full tutorial, it’s just to show you that Z3 exists and how you can use it. You can find all the info you need for your specific problem in their documentary.</p>
<h2>Finding the ‘mathematically expressable problem’</h2>
<p>This is the scenario: Let’s say you haxxed into the NSA and downloaded a sweet tool that can be used to hack the planet or whatever, but you need to put in a key first. You have already RE’d the key checker and you know how it works, and you could write a bruteforce script, but you haxxed into the mainframe earlier and found out that the feds are already on the way. You’re short on time! Your script might not finish before they get you and nobody will ever know about your sick skillz, about how you haxxed into the NSA, about the software you borrowed, about how you were able to RE it, because you can’t twitter from Guantanamo.</p>
<p>Is there a way to solve the problem fast enough so that you have time to upload your work AND get the next plane to russia to escape the feds? This is where Z3 comes into play. <img src="https://0x00sec.org/images/emoji/twitter/sunglasses.png?v=9" title=":sunglasses:" class="emoji" alt=":sunglasses:"></p>
<p>Have you watched or read the Hitchhiker’s guide? Of course you have. Z3 is like Deep Thought, it can give you any answer, but only if you have the right question. This introduction is not about the question, but about talking to Deep Thought. For this scenario I will assume that you have recovered the following ‘question’, or in Z3 terms, constraints, from the key checker:</p>
<ul>
<li>The key consists of 3 integers (x, y, z)</li>
<li>x is a multiple of 7</li>
<li>the LSB of the result of the bitwise or of x and y is 123</li>
<li>x &gt; 1337337</li>
<li>z = avg(x, y)</li>
<li>z &lt; 42424242</li>
</ul>
<p>That’s just what I’ve come up with spontanously, but Z3 can really solve anything you throw at it.</p>
<h2>Installation</h2>
<p><code>sudo pip install z3-solver</code><br>
It might take a while to compile. Don’t get fooled by the ‘z3’ packet that can also be installed with pip.</p>
<h2>Writing the solver</h2>
<pre><code class="lang-auto">from z3 import *

# There are a few datatypes to choose from. For our purpose,
# 32-bit BitVecs are a good representation of ints. Z3 has its
# own int, which is more a 'mathematical int', it can get infinitely
# large and does not support bitwise operations.
x, y, z = BitVecs("x y z", 32)

#Now just add the constraints
s = Solver()
s.add(x % 7 == 0)
s.add((x | y) &amp; 0xFF == 123)
s.add(x &gt; 1337337)
s.add(z == (x + y)/2)
s.add(z &lt; 42424242)

#and check if a solution exists. If there is one, it will be printed.
if s.check():
	print(s.model())
</code></pre>
<pre><code class="lang-auto">$ time python crack.py 
[y = 3625989961, x = 719564090, z = 25293377]

real	0m0,255s
user	0m0,237s
sys	0m0,017s
</code></pre>
<p><strong>Bam!</strong> Instant result. That’s all. Easy, right?</p>
<h2>How does it work?</h2>
<p>Black magic. Seriously, I advice you to just treat it as a black box.<br>
If you DO want to find out about the crazy theory behind it, have a look at the wiki. <a href="https://github.com/Z3Prover/z3/wiki" rel="nofollow noopener">https://github.com/Z3Prover/z3/wiki</a></p>
<h2>Where to go on from here?</h2>
<p>Try it out! Try <a href="https://0x00sec.org/t/crackme-challenge-part-5-license-key-c/465">this</a> challenge for example. A bruteforce solution is already provided, so if you want to skip the RE part you can find the constraints there and build your solver directly.</p>
          <p><a href="https://0x00sec.org/t/black-magic-using-z3-for-automated-crackme-solving/6889/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/black-magic-using-z3-for-automated-crackme-solving/6889/1</link>
        <pubDate>Tue, 29 May 2018 15:57:14 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-6889-1</guid>
        <source url="https://0x00sec.org/t/black-magic-using-z3-for-automated-crackme-solving/6889.rss">Black magic? Using Z3 for automated crackme solving</source>
      </item>
  </channel>
</rss>
