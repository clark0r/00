<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>HackTheBox Irked writeup</title>
    <link>https://0x00sec.org/t/hackthebox-irked-writeup/13269</link>
    <description>Hey nullers. This is my write-up about Irked, a retired machine from HackTheBox, an **awesome** place to practice your skills on infosec.

![Selection_050|586x348,75%](upload://qB4E7YajuNS4mifEoBgKdLBQOVW.png) 

This is my first ever writeup so feedback is more than welcome
____
I started with what I think 90% of everyone out there starts, an nmap scan.

![Selection_039|690x228,100%](upload://1WAjD9hKHGmoe1IDXZflbBEAG98.png) 

Visiting the website at http://10.10.10.117/ we get this content

![web|538x354](upload://l8URlVkRJKqf6eXmr2pJSCW3Nti.png) 

From the beggining we get the first _clue_: **IRC**. But my first scan wasn&#39;t satisfying, so I looked a little deeper with ``nmap -p- 10.10.10.117``

![Selection_040|690x389,75%](upload://jG0tSrUjpeDCScwD0gWa2pORxxE.png) 

So there is an open irc port. The website was telling us that the irc was not working correctly, so if we connect to it, we might find something that we can take advantage of.

![Selection_019|690x309,100%](upload://3HdImaqqDEev19lyh5HeuZwOcQi.png) 

There I spent some time researching what a MOTD file is, but it didn&#39;t help me. So the next step for me is to search for a IRC exploit on Metasploit ~~(skid detected)~~ in a desperate hope for an exploit. 
After seeing the results and spending a minute or so, my brain finally started to kick: the specific IRC version (Unreal3.2.8.1) was vulnurable to backdoor command execution

![Selection_020|690x238,100%](upload://kU74oTAk4wLq0rcCE2zHLy3dgtn.png) 

After setting the RHOST ``set RHOST 10.10.10.117`` and RPORT ``set RPORT 6697``, I run the exploit

![Selection_021|690x354](upload://vPH0qF6wJHL5hVm22j8qrdpEFcz.png) 

Hacker&#39;s voice: *I&#39;m in.*

After navigating through the system I found a user named &quot;djmardov&quot;. In his Documents file there were 2 files: user.txt and .backup. Being only able to read the backup file, I came across this result:

![Selection_022|690x356](upload://rT3mJd1A6SRFBtFYtMQDq7mOwvY.png) 

What I understood is that steg stands for *steganography*, i.e. the way of hiding data within other files. But there must exist an image for this, because most steg challenges that I&#39;ve encountered hide data inside image files. And there was only one image available in the hole machine:

![irked|500x500,75%](upload://k3BtOxvByxlwHTT6DObCeArBbRU.jpeg) 

For steg challenges that requires extracting information from an image with a password, I either use steghide ``steghide --extract -sf irked.jpg -p UPupDOWNdownLRlrBAbaSSss`` or I often visit [this](https://futureboy.us/stegano/decinput.html) site. This time, to show something different than the classic steghide, I entered this image with the password on the website and I got the djmardov&#39;s password.

I logged in via ssh and user.txt was patiently waiting for me there.

```
jmardov@irked:~/Documents$ cat user.txt
cat user.txt
4a*********
```

Now on to root!

My privilage escalation skills are not that great, so for a start I use some standard commands from the [0x00sec forum](https://0x00sec.org/t/enumeration-for-linux-privilege-escalation/1959). After running 
``find / -perm -g=s -o -perm -u=s -type f 2&gt;/dev/null``
I came across some binaries that were executed as root. 

It took me quite some time to figure this out. An experienced hacker would easily recognize the binaries that stand out in a normal Linux machine.

After testing some binaries I came across the **/usr/bin/viewusers**. After putting it to the test I get this error. 

![Selection_037|690x144](upload://vwB3HmniXjn9KMlMBXRZWV8g2j7.png) 

So this particular binary was searching for the /tmp/listusers file and was executing whatever command the file contained. So the solution is to create the /tmp/listusers file and write a command that the binary will execute as root, i.e. ``cat /root/root.txt``

After giving the permission to execute the file with ``chmod +x /usr/bin/viewusers`` I executed the binary and there&#39;s our flag :D

```
djmardov@irked:~$ echo &quot;cat /root/root.txt&quot; &gt; /tmp/listusers
djmardov@irked:~$ chmod+x /tmp/listusers
djmardov@irked:~$ /usr/bin/viewuser
This application is being devleoped to set and test user permissions
It is still being actively developed
(unknown) :0           2018-11-17 13:54 (:0)
djmardov pts/1        2018-11-17 14:19 (10.10.14.23)
8d8e9*************************
```

I think Irked was an easy box . Nevertheless, it taught me to be patient and to read everything line by line. 
*Thankee*</description>
    
    <lastBuildDate>Sun, 28 Apr 2019 14:15:21 +0000</lastBuildDate>
    <category>Hackthebox Writeups</category>
    <atom:link href="https://0x00sec.org/t/hackthebox-irked-writeup/13269.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>HackTheBox Irked writeup</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Awesome writeup man!</p>
<p>I really liked this box, this one really taught me to not underestimate basic privesc enumeration. As one of my first walls on a privesc for a linux box, this root actually took me about 6 hours to complete.</p>
<p>I was up late at night and I finally got this root.</p>
<p>This is now why I always execute the binaries found with this command:</p>
<pre><code class="lang-auto">find / -perm -g=s -o -perm -u=s -type f 2&gt;/dev/null

</code></pre>
          <p><a href="https://0x00sec.org/t/hackthebox-irked-writeup/13269/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hackthebox-irked-writeup/13269/3</link>
        <pubDate>Sun, 28 Apr 2019 14:15:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13269-3</guid>
        <source url="https://0x00sec.org/t/hackthebox-irked-writeup/13269.rss">HackTheBox Irked writeup</source>
      </item>
      <item>
        <title>HackTheBox Irked writeup</title>
        <dc:creator><![CDATA[fxbg]]></dc:creator>
        <description><![CDATA[
            <p>good job man, youre on your way <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/hackthebox-irked-writeup/13269/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hackthebox-irked-writeup/13269/2</link>
        <pubDate>Sat, 27 Apr 2019 19:57:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13269-2</guid>
        <source url="https://0x00sec.org/t/hackthebox-irked-writeup/13269.rss">HackTheBox Irked writeup</source>
      </item>
      <item>
        <title>HackTheBox Irked writeup</title>
        <dc:creator><![CDATA[vict0ni]]></dc:creator>
        <description><![CDATA[
            <p>Hey nullers. This is my write-up about Irked, a retired machine from HackTheBox, an <strong>awesome</strong> place to practice your skills on infosec.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/b/ba6968b3ed502511ae187c1a3114f6bb9a3009e0.png" alt="Selection_050" data-base62-sha1="qB4E7YajuNS4mifEoBgKdLBQOVW" width="439" height="261"></p>
<p>This is my first ever writeup so feedback is more than welcome</p>
<hr>
<p>I started with what I think 90% of everyone out there starts, an nmap scan.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/0/0da18ba24e71e74b7340ff9844fe06c5987fc6de.png" alt="Selection_039" data-base62-sha1="1WAjD9hKHGmoe1IDXZflbBEAG98" width="690" height="228"></p>
<p>Visiting the website at <a href="http://10.10.10.117/">http://10.10.10.117/</a> we get this content</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/942fb2fa3843fe9ed02c27f646ba5b72e3d5bea4.png" alt="web" data-base62-sha1="l8URlVkRJKqf6eXmr2pJSCW3Nti" width="538" height="354"></p>
<p>From the beggining we get the first <em>clue</em>: <strong>IRC</strong>. But my first scan wasn’t satisfying, so I looked a little deeper with <code>nmap -p- 10.10.10.117</code></p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/89e8f0422c2eca4f2ab15d8caa76a7f901a6f682.png" alt="Selection_040" data-base62-sha1="jG0tSrUjpeDCScwD0gWa2pORxxE" width="517" height="291"></p>
<p>So there is an open irc port. The website was telling us that the irc was not working correctly, so if we connect to it, we might find something that we can take advantage of.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/1/19e9451f1ee747b9340eca953ecfa2297f67592a.png" alt="Selection_019" data-base62-sha1="3HdImaqqDEev19lyh5HeuZwOcQi" width="690" height="309"></p>
<p>There I spent some time researching what a MOTD file is, but it didn’t help me. So the next step for me is to search for a IRC exploit on Metasploit <s>(skid detected)</s> in a desperate hope for an exploit.<br>
After seeing the results and spending a minute or so, my brain finally started to kick: the specific IRC version (Unreal3.2.8.1) was vulnurable to backdoor command execution</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/9/928352efac555b7914168f0138a7d577a860af25.png" alt="Selection_020" data-base62-sha1="kU74oTAk4wLq0rcCE2zHLy3dgtn" width="690" height="238"></p>
<p>After setting the RHOST <code>set RHOST 10.10.10.117</code> and RPORT <code>set RPORT 6697</code>, I run the exploit</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/df1b51b45717f77dddb715dde7ef5ee3b5cb811f.png" alt="Selection_021" data-base62-sha1="vPH0qF6wJHL5hVm22j8qrdpEFcz" width="690" height="354"></p>
<p>Hacker’s voice: <em>I’m in.</em></p>
<p>After navigating through the system I found a user named “djmardov”. In his Documents file there were 2 files: user.txt and .backup. Being only able to read the backup file, I came across this result:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c373dfdbe65d958a17ad5e068b87b59f8c7bd42e.png" alt="Selection_022" data-base62-sha1="rT3mJd1A6SRFBtFYtMQDq7mOwvY" width="690" height="356"></p>
<p>What I understood is that steg stands for <em>steganography</em>, i.e. the way of hiding data within other files. But there must exist an image for this, because most steg challenges that I’ve encountered hide data inside image files. And there was only one image available in the hole machine:</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/8/8c93c9cfb23aa9eed18bea4b46e1024af91488c2.jpeg" alt="irked" data-base62-sha1="k3BtOxvByxlwHTT6DObCeArBbRU" width="375" height="375"></p>
<p>For steg challenges that requires extracting information from an image with a password, I either use steghide <code>steghide --extract -sf irked.jpg -p UPupDOWNdownLRlrBAbaSSss</code> or I often visit <a href="https://futureboy.us/stegano/decinput.html">this</a> site. This time, to show something different than the classic steghide, I entered this image with the password on the website and I got the djmardov’s password.</p>
<p>I logged in via ssh and user.txt was patiently waiting for me there.</p>
<pre><code class="lang-auto">jmardov@irked:~/Documents$ cat user.txt
cat user.txt
4a*********
</code></pre>
<p>Now on to root!</p>
<p>My privilage escalation skills are not that great, so for a start I use some standard commands from the <a href="https://0x00sec.org/t/enumeration-for-linux-privilege-escalation/1959">0x00sec forum</a>. After running<br>
<code>find / -perm -g=s -o -perm -u=s -type f 2&gt;/dev/null</code><br>
I came across some binaries that were executed as root.</p>
<p>It took me quite some time to figure this out. An experienced hacker would easily recognize the binaries that stand out in a normal Linux machine.</p>
<p>After testing some binaries I came across the <strong>/usr/bin/viewusers</strong>. After putting it to the test I get this error.</p>
<p><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/dcf2b73d9b0f586635cb34ec40cebc34201e2289.png" alt="Selection_037" data-base62-sha1="vwB3HmniXjn9KMlMBXRZWV8g2j7" width="690" height="144"></p>
<p>So this particular binary was searching for the /tmp/listusers file and was executing whatever command the file contained. So the solution is to create the /tmp/listusers file and write a command that the binary will execute as root, i.e. <code>cat /root/root.txt</code></p>
<p>After giving the permission to execute the file with <code>chmod +x /usr/bin/viewusers</code> I executed the binary and there’s our flag <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
<pre><code class="lang-auto">djmardov@irked:~$ echo "cat /root/root.txt" &gt; /tmp/listusers
djmardov@irked:~$ chmod+x /tmp/listusers
djmardov@irked:~$ /usr/bin/viewuser
This application is being devleoped to set and test user permissions
It is still being actively developed
(unknown) :0           2018-11-17 13:54 (:0)
djmardov pts/1        2018-11-17 14:19 (10.10.14.23)
8d8e9*************************
</code></pre>
<p>I think Irked was an easy box . Nevertheless, it taught me to be patient and to read everything line by line.<br>
<em>Thankee</em></p>
          <p><a href="https://0x00sec.org/t/hackthebox-irked-writeup/13269/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/hackthebox-irked-writeup/13269/1</link>
        <pubDate>Sat, 27 Apr 2019 15:37:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-13269-1</guid>
        <source url="https://0x00sec.org/t/hackthebox-irked-writeup/13269.rss">HackTheBox Irked writeup</source>
      </item>
  </channel>
</rss>
