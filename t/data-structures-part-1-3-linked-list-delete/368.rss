<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Data Structures (Part 1.3): Linked List [delete()]</title>
    <link>https://0x00sec.org/t/data-structures-part-1-3-linked-list-delete/368</link>
    <description>Hello 0x00sec people! This next part of my series is about `delete(...)`.

# Basic Algorithm Description
`delete(...)` will remove a `node` at a certain index in a linked list. It takes one parameter of type `const size_t&amp; idx`. Basically, it takes in a number corresponding to a certain `node` in the list, if we count the root node as 0 and so on.

The function will then traverse the list until it arrives at the `idx`th `node`. Then, it&#39;ll delete this `node`.

The function returns the data stored at that particular `node`. It has `O(n)` time complexity.

----

#The Code
```
template &lt;class T&gt;
T List&lt;T&gt;::delete(const size_t&amp; idx) {
	node&lt;T&gt;* h = root;
	size_t cnt = 0;

	while(cnt &lt; idx - 1 &amp;&amp; h/*-&gt;next*/ != nullptr) {
		h = h-&gt;next;
		cnt++;
	}

	if (cnt == idx - 1) {
		if (h != nullptr &amp;&amp; h-&gt;next != nullptr) {
			
			node&lt;T&gt;* tmp = h-&gt;next;
			T tmp2 = tmp-&gt;d();

			h-&gt;next = tmp-&gt;next; // overlap

			tmp-&gt;next = nullptr;
			delete tmp;

			len--; // update length

			return tmp2;
		} 
		// should i have else?!?!?
	}

        throw std::out_of_range(&quot;ERROR: there is no node at that index to delete!&quot;);
}
```
__Note__: _I&#39;m still actively trying to make this function better. This is just what I have as of this writing._

So, first a `node&lt;T&gt;*` called `h` is declared for traversal purposes. Then, we declare a `size_t cnt` to keep track of our position in the list. This is so we&#39;ll know if the index `idx` passed to the function is out of bounds. If we never reach it, no `node` should get deleted.

Upon traversal (after the `while` loop), we&#39;ve set it up so that `h-&gt;next` is the `node` to be deleted.

In the outer `if`, we want to make sure that our `h` is correct (`h` should be the one before `h-&gt;next`, so it&#39;s index is one less than `idx`).

In that inner `if`, we want to make sure that `h`, or `mylist[idx - 1]`, isn&#39;t `nullptr`; we also need to ensure that `h-&gt;next`, the `node` we&#39;d like to delete, is not a `nullptr`, either. This is because: if `h` is a `nullptr`, there is no `mylist[idx]` to delete; and, if `h-&gt;next` is `nullptr`, `mylist[idx]` has nothing to delete, because it&#39;s the end of the list.

If we pass those two `if`s, then the fun begins!

1. Make a temp `node&lt;T&gt;* tmp` to hold on to the `node` we intend to delete.
2. Save it&#39;s data in `T tmp2 = tmp-&gt;d()` to return later. (Note that d() is a member function of a `node` that returns the data stored at a `node`.
3. Reassign `h-&gt;next` to `tmp-&gt;next`. This basically jumps over `tmp` in the linked list, virtually removing `tmp` from the list.
4. Now we have to clean up `tmp-&gt;next` by setting it to `nullptr`. Don&#39;t worry! We haven&#39;t lost `tmp-&gt;next` because `h-&gt;next` now holds that!
5. Now we can `delete tmp`, which calls the `node` destructor `~node()`.
6. Since we&#39;ve taken a `node` out, we need to decrement the length of the list `len`.
7. Last, let&#39;s return the data value stored in the `node` we just deleted.

If, for any reason, we don&#39;t arrive at the `node` to delete, we `throw` an exception saying that there is no `node` to delete.

----

# Conclusion

Okay, that&#39;s it for `delete`. In the future, I will probably improve this function.

Thaaanks,
@oaktree</description>
    
    <lastBuildDate>Mon, 16 May 2016 06:09:38 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/data-structures-part-1-3-linked-list-delete/368.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Data Structures (Part 1.3): Linked List [delete()]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-3-linked-list-delete/368/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-3-linked-list-delete/368/3</link>
        <pubDate>Sun, 21 Jan 2018 00:37:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-368-3</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-3-linked-list-delete/368.rss">Data Structures (Part 1.3): Linked List [delete()]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.3): Linked List [delete()]</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Nice work on the article man!</p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-3-linked-list-delete/368/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-3-linked-list-delete/368/2</link>
        <pubDate>Mon, 16 May 2016 06:09:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-368-2</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-3-linked-list-delete/368.rss">Data Structures (Part 1.3): Linked List [delete()]</source>
      </item>
      <item>
        <title>Data Structures (Part 1.3): Linked List [delete()]</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Hello 0x00sec people! This next part of my series is about <code>delete(...)</code>.</p>
<h1>Basic Algorithm Description</h1>
<p><code>delete(...)</code> will remove a <code>node</code> at a certain index in a linked list. It takes one parameter of type <code>const size_t&amp; idx</code>. Basically, it takes in a number corresponding to a certain <code>node</code> in the list, if we count the root node as 0 and so on.</p>
<p>The function will then traverse the list until it arrives at the <code>idx</code>th <code>node</code>. Then, it’ll delete this <code>node</code>.</p>
<p>The function returns the data stored at that particular <code>node</code>. It has <code>O(n)</code> time complexity.</p>
<hr>
<p><span class="hashtag">#The</span> Code</p>
<pre><code class="lang-auto">template &lt;class T&gt;
T List&lt;T&gt;::delete(const size_t&amp; idx) {
	node&lt;T&gt;* h = root;
	size_t cnt = 0;

	while(cnt &lt; idx - 1 &amp;&amp; h/*-&gt;next*/ != nullptr) {
		h = h-&gt;next;
		cnt++;
	}

	if (cnt == idx - 1) {
		if (h != nullptr &amp;&amp; h-&gt;next != nullptr) {
			
			node&lt;T&gt;* tmp = h-&gt;next;
			T tmp2 = tmp-&gt;d();

			h-&gt;next = tmp-&gt;next; // overlap

			tmp-&gt;next = nullptr;
			delete tmp;

			len--; // update length

			return tmp2;
		} 
		// should i have else?!?!?
	}

        throw std::out_of_range("ERROR: there is no node at that index to delete!");
}
</code></pre>
<p><strong>Note</strong>: <em>I’m still actively trying to make this function better. This is just what I have as of this writing.</em></p>
<p>So, first a <code>node&lt;T&gt;*</code> called <code>h</code> is declared for traversal purposes. Then, we declare a <code>size_t cnt</code> to keep track of our position in the list. This is so we’ll know if the index <code>idx</code> passed to the function is out of bounds. If we never reach it, no <code>node</code> should get deleted.</p>
<p>Upon traversal (after the <code>while</code> loop), we’ve set it up so that <code>h-&gt;next</code> is the <code>node</code> to be deleted.</p>
<p>In the outer <code>if</code>, we want to make sure that our <code>h</code> is correct (<code>h</code> should be the one before <code>h-&gt;next</code>, so it’s index is one less than <code>idx</code>).</p>
<p>In that inner <code>if</code>, we want to make sure that <code>h</code>, or <code>mylist[idx - 1]</code>, isn’t <code>nullptr</code>; we also need to ensure that <code>h-&gt;next</code>, the <code>node</code> we’d like to delete, is not a <code>nullptr</code>, either. This is because: if <code>h</code> is a <code>nullptr</code>, there is no <code>mylist[idx]</code> to delete; and, if <code>h-&gt;next</code> is <code>nullptr</code>, <code>mylist[idx]</code> has nothing to delete, because it’s the end of the list.</p>
<p>If we pass those two <code>if</code>s, then the fun begins!</p>
<ol>
<li>Make a temp <code>node&lt;T&gt;* tmp</code> to hold on to the <code>node</code> we intend to delete.</li>
<li>Save it’s data in <code>T tmp2 = tmp-&gt;d()</code> to return later. (Note that d() is a member function of a <code>node</code> that returns the data stored at a <code>node</code>.</li>
<li>Reassign <code>h-&gt;next</code> to <code>tmp-&gt;next</code>. This basically jumps over <code>tmp</code> in the linked list, virtually removing <code>tmp</code> from the list.</li>
<li>Now we have to clean up <code>tmp-&gt;next</code> by setting it to <code>nullptr</code>. Don’t worry! We haven’t lost <code>tmp-&gt;next</code> because <code>h-&gt;next</code> now holds that!</li>
<li>Now we can <code>delete tmp</code>, which calls the <code>node</code> destructor <code>~node()</code>.</li>
<li>Since we’ve taken a <code>node</code> out, we need to decrement the length of the list <code>len</code>.</li>
<li>Last, let’s return the data value stored in the <code>node</code> we just deleted.</li>
</ol>
<p>If, for any reason, we don’t arrive at the <code>node</code> to delete, we <code>throw</code> an exception saying that there is no <code>node</code> to delete.</p>
<hr>
<h1>Conclusion</h1>
<p>Okay, that’s it for <code>delete</code>. In the future, I will probably improve this function.</p>
<p>Thaaanks,<br>
<a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a></p>
          <p><a href="https://0x00sec.org/t/data-structures-part-1-3-linked-list-delete/368/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/data-structures-part-1-3-linked-list-delete/368/1</link>
        <pubDate>Sun, 15 May 2016 23:22:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-368-1</guid>
        <source url="https://0x00sec.org/t/data-structures-part-1-3-linked-list-delete/368.rss">Data Structures (Part 1.3): Linked List [delete()]</source>
      </item>
  </channel>
</rss>
