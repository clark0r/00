<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Improving your Android Shell</title>
    <link>https://0x00sec.org/t/improving-your-android-shell/886</link>
    <description>Do you know your Android phone have a shell?. Do you know that it is a reduced version of busybox?. Do you know you can recompile it and add some important missing applets?

If you don&#39;t, keep reading. This is gonna be quick and easy!

_NOTE: This a rewrite of something I wrote some time ago for other forum... Anyway, there are not much more ways of doing this, and I think it is interesting to share_

# Chose your Toolchain
The first thing you need is to get a toolchain to be able to cross-compile your own version of busybox. This use tho be a hard task, but with the popularity of ARM devices these latest  now you can just install a debian package in your debian based preferred distro

    apt-get install gcc-arm-linux-gnueabi 
    apt-get install gcc-arm-linux-gnueabihf

Chose the first one for old phones with a processor that does not support hardware floating point operations. Any recent smartphone or Android device should be fine with the hf version.

# Configure busybox
Now go to the busybox website ( https://busybox.net/) and grab the latest version, uncompress and configure:
 
    $ wget https://busybox.net/downloads/busybox-1.25.0.tar.bz2 -O - | tar xj
    $ cd busyb0x-1.25.0
    $ make menuconfig


This will bring up a text interface similar to the one used by to compile the Linux Kernel. Select the first option (`Busybox Settings`) and then second (`Build Options`).

In that screen select the first option to build `busybox` as a static binary and then enter the prefix to your selected toolchain, the one you installed in the previous step. At the end it should look like this:

&lt;img src=&quot;//0x00sec.s3.amazonaws.com/original/1X/e267fd5831155df869c84bad0d80c33df5d10942.png&quot; width=&quot;556&quot; height=&quot;353&quot;&gt;

Then you can go back to the top level screen and select the apples you want. By default most of then are selected so you may, actually, want to remove some...

When you are done, leave the configuration tool, save your config file and type:

    make
    or
    make -j 8 # If you have 8 cores in your machine!

# Deploying
When `make` is done, you will get a file named `busybox`. A static binary for ARM:

    $ file busybox
    busybox: ELF 32-bit LSB executable, ARM, version 1 (SYSV), statically linked, for GNU/Linux 2.6.31, BuildID[sha1]=0x873b15e8aa14397bd5ed72a482117a5893f2ca64, stripped


Now we have to deploy or new `busybox` on our phone. For this you need the `adb` tool that comes with the Android SDK. You need to download the Android SDK, uncompress the package somewhere, figure out the path to the adb tool and add it to the `PATH`. That is roughly it.

Once we have `adb` we can copy our `busybox` version into the phone. Connect the phone via USB, enable debug mode, accept the dialog popping up in the phone (unless you had already accepted it permanently) so you can run:

    adb push busybox /data/local/tmp

Then, we just need to log into our phone, change some permissions and install `busybox`:


    host $ adb shell
    phone $ cd /data/local/tmp
    phone $ chmod 777 busybox
    phone $ mkdir bb
    phone $ ./busybox --install ./bb
    phone $ export PATH=/data/local/tmp/bb:$PATH


The folder `/data/local/tmp` have write and execution permissions for all users. That is why we chose it.

That is it. Just try `ls` to get the familiar coloured directory listing you have in your linux box. Now you can use:

* netcat
* wget
* httpd
* vi
* awk

...and most of the basic tools you are used to (with more options that the ones provided by the default Android shell). Note that some tools may require root access. Exactly the same that when you use them in your normal linux box. 

One think you may try is:

`nc -l -p 5000 -e /system/bin/sh`


# Simple
You should be able to run the process above in any Android device. It does not require root and that is why, you have to update your `PATH` env variable, everytime you want to use the tools provided by your own `busybox`.

If your phone is rooted you can enable write permissions in your `system` partition and install busybox there, so it is always in the path. 

As I said, quick and easy ;)

Hack Fun!</description>
    
    <lastBuildDate>Fri, 05 Aug 2016 11:21:07 +0000</lastBuildDate>
    <category>Linux</category>
    <atom:link href="https://0x00sec.org/t/improving-your-android-shell/886.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Improving your Android Shell</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/improving-your-android-shell/886/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/improving-your-android-shell/886/4</link>
        <pubDate>Sun, 21 Jan 2018 00:36:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-886-4</guid>
        <source url="https://0x00sec.org/t/improving-your-android-shell/886.rss">Improving your Android Shell</source>
      </item>
      <item>
        <title>Improving your Android Shell</title>
        <dc:creator><![CDATA[SmartOne]]></dc:creator>
        <description><![CDATA[
            <p>Whoa, such a great Post!! <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"> I knew about the Android Shell, but not that I could recompile it.</p>
          <p><a href="https://0x00sec.org/t/improving-your-android-shell/886/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/improving-your-android-shell/886/3</link>
        <pubDate>Fri, 05 Aug 2016 11:21:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-886-3</guid>
        <source url="https://0x00sec.org/t/improving-your-android-shell/886.rss">Improving your Android Shell</source>
      </item>
      <item>
        <title>Improving your Android Shell</title>
        <dc:creator><![CDATA[Cromical]]></dc:creator>
        <description><![CDATA[
            <p>Thanks mate! <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/improving-your-android-shell/886/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/improving-your-android-shell/886/2</link>
        <pubDate>Wed, 03 Aug 2016 04:56:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-886-2</guid>
        <source url="https://0x00sec.org/t/improving-your-android-shell/886.rss">Improving your Android Shell</source>
      </item>
      <item>
        <title>Improving your Android Shell</title>
        <dc:creator><![CDATA[0x00pf]]></dc:creator>
        <description><![CDATA[
            <p>Do you know your Android phone have a shell?. Do you know that it is a reduced version of busybox?. Do you know you can recompile it and add some important missing applets?</p>
<p>If you don’t, keep reading. This is gonna be quick and easy!</p>
<p><em>NOTE: This a rewrite of something I wrote some time ago for other forum… Anyway, there are not much more ways of doing this, and I think it is interesting to share</em></p>
<h1>Chose your Toolchain</h1>
<p>The first thing you need is to get a toolchain to be able to cross-compile your own version of busybox. This use tho be a hard task, but with the popularity of ARM devices these latest  now you can just install a debian package in your debian based preferred distro</p>
<pre><code>apt-get install gcc-arm-linux-gnueabi 
apt-get install gcc-arm-linux-gnueabihf
</code></pre>
<p>Chose the first one for old phones with a processor that does not support hardware floating point operations. Any recent smartphone or Android device should be fine with the hf version.</p>
<h1>Configure busybox</h1>
<p>Now go to the busybox website ( <a href="https://busybox.net/" rel="noopener nofollow ugc">https://busybox.net/</a>) and grab the latest version, uncompress and configure:</p>
<pre><code>$ wget https://busybox.net/downloads/busybox-1.25.0.tar.bz2 -O - | tar xj
$ cd busyb0x-1.25.0
$ make menuconfig
</code></pre>
<p>This will bring up a text interface similar to the one used by to compile the Linux Kernel. Select the first option (<code>Busybox Settings</code>) and then second (<code>Build Options</code>).</p>
<p>In that screen select the first option to build <code>busybox</code> as a static binary and then enter the prefix to your selected toolchain, the one you installed in the previous step. At the end it should look like this:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/e267fd5831155df869c84bad0d80c33df5d10942.png" width="556" height="353"></p>
<p>Then you can go back to the top level screen and select the apples you want. By default most of then are selected so you may, actually, want to remove some…</p>
<p>When you are done, leave the configuration tool, save your config file and type:</p>
<pre><code>make
or
make -j 8 # If you have 8 cores in your machine!
</code></pre>
<h1>Deploying</h1>
<p>When <code>make</code> is done, you will get a file named <code>busybox</code>. A static binary for ARM:</p>
<pre><code>$ file busybox
busybox: ELF 32-bit LSB executable, ARM, version 1 (SYSV), statically linked, for GNU/Linux 2.6.31, BuildID[sha1]=0x873b15e8aa14397bd5ed72a482117a5893f2ca64, stripped
</code></pre>
<p>Now we have to deploy or new <code>busybox</code> on our phone. For this you need the <code>adb</code> tool that comes with the Android SDK. You need to download the Android SDK, uncompress the package somewhere, figure out the path to the adb tool and add it to the <code>PATH</code>. That is roughly it.</p>
<p>Once we have <code>adb</code> we can copy our <code>busybox</code> version into the phone. Connect the phone via USB, enable debug mode, accept the dialog popping up in the phone (unless you had already accepted it permanently) so you can run:</p>
<pre><code>adb push busybox /data/local/tmp
</code></pre>
<p>Then, we just need to log into our phone, change some permissions and install <code>busybox</code>:</p>
<pre><code>host $ adb shell
phone $ cd /data/local/tmp
phone $ chmod 777 busybox
phone $ mkdir bb
phone $ ./busybox --install ./bb
phone $ export PATH=/data/local/tmp/bb:$PATH
</code></pre>
<p>The folder <code>/data/local/tmp</code> have write and execution permissions for all users. That is why we chose it.</p>
<p>That is it. Just try <code>ls</code> to get the familiar coloured directory listing you have in your linux box. Now you can use:</p>
<ul>
<li>netcat</li>
<li>wget</li>
<li>httpd</li>
<li>vi</li>
<li>awk</li>
</ul>
<p>…and most of the basic tools you are used to (with more options that the ones provided by the default Android shell). Note that some tools may require root access. Exactly the same that when you use them in your normal linux box.</p>
<p>One think you may try is:</p>
<p><code>nc -l -p 5000 -e /system/bin/sh</code></p>
<h1>Simple</h1>
<p>You should be able to run the process above in any Android device. It does not require root and that is why, you have to update your <code>PATH</code> env variable, everytime you want to use the tools provided by your own <code>busybox</code>.</p>
<p>If your phone is rooted you can enable write permissions in your <code>system</code> partition and install busybox there, so it is always in the path.</p>
<p>As I said, quick and easy <img src="/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<p>Hack Fun!</p>
          <p><a href="https://0x00sec.org/t/improving-your-android-shell/886/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/improving-your-android-shell/886/1</link>
        <pubDate>Tue, 02 Aug 2016 21:34:43 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-886-1</guid>
        <source url="https://0x00sec.org/t/improving-your-android-shell/886.rss">Improving your Android Shell</source>
      </item>
  </channel>
</rss>
