<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C] Dynamic Memory (Part 1.0): Stack v. Heap</title>
    <link>https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960</link>
    <description>Alright! After receiving [positive responses to my proposal](https://0x00sec.org/t/gauging-interest-in-c-array-series/957), I&#39;m ready to start this [C] Dynamic Memory series.

Here are some suggested prerequisites:

* Basic Understanding of [Imperative Programming](https://en.wikipedia.org/wiki/Imperative_programming)
* Basic C Programming Knowledge
* Confidence with Pointers
    * And what pointers represent

Whether or not you meet the above conditions to a tee, feel free to read the rest of this article (and the rest of the series).

---
# The Stack

Each program, and each thread in a program, has a finite amount of memory to work with, allocated by the operating system, called [the stack](https://en.wikipedia.org/wiki/Stack-based_memory_allocation). If you attempt to use too much memory on the stack, you can trigger a stack overflow.

Other concerns aside, here are some instances in which the stack is used in C:

```c
int main(void) {
    // ...
        int x;
        char* c;
        int arr[6] = {1,2,3,4,5,6};
    // ...
}
```
Variables, pointers (themselves, not what they point to), and static arrays are all stored on the stack.

Here are a few links for my skeptics:

* [Pointers are stored on the stack.](https://stackoverflow.com/questions/24380935/where-are-pointers-in-c-stored-on-the-stack-or-in-the-heap)
* [Static Arrays are stored on the stack.](https://stackoverflow.com/questions/5258724/stack-variables-vs-heap-variables)

---
# The Heap

Aside from the stack, [the heap](https://en.wikipedia.org/wiki/Memory_management#HEAP) (a.k.a. the _free store_) has more space but is often slower. I won&#39;t go into too much detail about the exact difference, but know that the heap is where you would allocate large amounts of memory, especially if you only know _how much_ memory you&#39;re allocating at runtime.

If you know how much memory you need at compile-time, the stack may be preferential. There are always exceptions.

Nonetheless, using the heap in C, or any language, takes a little more effort on the programmer&#39;s side.

```
int main(void) {
    // ...
        int *x;
        x = malloc( sizeof(int) );

        if (x == NULL)
            perror(&quot;Couldn&#39;t allocate for x&quot;);
    // ...
}
```

Above would be using the heap. Now time for a quick vocabulary session -- sort of:

___`malloc`___ is the function used to allocate a certain amount of memory on the heap. It takes one parameter: the number of bytes of memory to allocate.

To review, using `malloc` gets you some heap memory. But what should be done when the memory is no longer needed? Upon a program&#39;s finishing, most modern operating systems will do away with any heap-allocated stuff still remaining. However, if we want to ensure peak code efficiency, we must learn to get rid of no longer needed memory by ourselves.

___`free`___ does as you would expect. It frees up the memory pointed to by the parameter you pass it:

```c
//...
free(x);
//...
```

Passing `x` (our pointer from the example before this one) to `free` clears out the memory to which it points. You can pass any kind of pointer to `free`. You do not need to pass unassigned pointers, which point to no memory, or pointers that point to another pointer&#39;s memory to `free`.

You only free a block of memory ___once___. Freeing the same memory multiple times causes problems, as you&#39;ll find out throughout your journey with the C Programming Language. 

---
# Conclusion

All in all, `malloc` is how you obtain some memory; `free` is how you _release_ that memory. `malloc` and `free` are like [Yin and Yang](https://en.wikipedia.org/wiki/Yin_and_yang): they should be balanced. Each call to `malloc` should be paired with __one__ call to `free`. For a program to achieve _inner peace_, you could say, it needs to be balanced between memory allocations and memory releases.

That&#39;s it for Stack v. Heap. Next time, we&#39;ll be exploring how to make and use heap-allocated arrays with `malloc` and `free`.

Later..
@oaktree 
![that&#39;s all, folks!](//0x00sec.s3.amazonaws.com/original/1X/cc150d6ddb91379d7d6286bcd013ab4adfd8e2e4.png)</description>
    
    <lastBuildDate>Tue, 23 Aug 2016 21:52:59 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C] Dynamic Memory (Part 1.0): Stack v. Heap</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960/4</link>
        <pubDate>Sun, 21 Jan 2018 00:30:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-960-4</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960.rss">[C] Dynamic Memory (Part 1.0): Stack v. Heap</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 1.0): Stack v. Heap</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>That will be covered in a tangential article, <a class="mention" href="https://0x00sec.org/u/nitrax">@Nitrax</a>. By that, I mean <code>valgrind</code>. Man, I just don’t feel like tapping that Backspace key.</p>
<p>We’ll get there when I talk more about memory leaks. Baby steps, <a class="mention" href="https://0x00sec.org/u/nitrax">@Nitrax</a>, baby steps…</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960/3</link>
        <pubDate>Tue, 23 Aug 2016 21:52:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-960-3</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960.rss">[C] Dynamic Memory (Part 1.0): Stack v. Heap</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 1.0): Stack v. Heap</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="oaktree" data-post="1" data-topic="960">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/oaktree/40/4077_2.png" class="avatar"> oaktree:</div>
<blockquote>
<p>Each call to malloc should be paired with one call to free.</p>
</blockquote>
</aside>
<p>I agree completely with your statement, and this is probably the most important part of your article, well … from my point of view ! Moreover, to ensure a better memory management and avoid memories leaking, I advise using <a href="http://valgrind.org/" rel="nofollow noopener">valgrind</a>, tool sensible to memory usage issues !</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960/2</link>
        <pubDate>Tue, 23 Aug 2016 16:34:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-960-2</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960.rss">[C] Dynamic Memory (Part 1.0): Stack v. Heap</source>
      </item>
      <item>
        <title>[C] Dynamic Memory (Part 1.0): Stack v. Heap</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Alright! After receiving <a href="https://0x00sec.org/t/gauging-interest-in-c-array-series/957">positive responses to my proposal</a>, I’m ready to start this [C] Dynamic Memory series.</p>
<p>Here are some suggested prerequisites:</p>
<ul>
<li>Basic Understanding of <a href="https://en.wikipedia.org/wiki/Imperative_programming" rel="noopener nofollow ugc">Imperative Programming</a>
</li>
<li>Basic C Programming Knowledge</li>
<li>Confidence with Pointers
<ul>
<li>And what pointers represent</li>
</ul>
</li>
</ul>
<p>Whether or not you meet the above conditions to a tee, feel free to read the rest of this article (and the rest of the series).</p>
<hr>
<h1>The Stack</h1>
<p>Each program, and each thread in a program, has a finite amount of memory to work with, allocated by the operating system, called <a href="https://en.wikipedia.org/wiki/Stack-based_memory_allocation" rel="noopener nofollow ugc">the stack</a>. If you attempt to use too much memory on the stack, you can trigger a stack overflow.</p>
<p>Other concerns aside, here are some instances in which the stack is used in C:</p>
<pre><code class="lang-auto">int main(void) {
    // ...
        int x;
        char* c;
        int arr[6] = {1,2,3,4,5,6};
    // ...
}
</code></pre>
<p>Variables, pointers (themselves, not what they point to), and static arrays are all stored on the stack.</p>
<p>Here are a few links for my skeptics:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/24380935/where-are-pointers-in-c-stored-on-the-stack-or-in-the-heap" rel="noopener nofollow ugc">Pointers are stored on the stack.</a></li>
<li><a href="https://stackoverflow.com/questions/5258724/stack-variables-vs-heap-variables" rel="noopener nofollow ugc">Static Arrays are stored on the stack.</a></li>
</ul>
<hr>
<h1>The Heap</h1>
<p>Aside from the stack, <a href="https://en.wikipedia.org/wiki/Memory_management#HEAP" rel="noopener nofollow ugc">the heap</a> (a.k.a. the <em>free store</em>) has more space but is often slower. I won’t go into too much detail about the exact difference, but know that the heap is where you would allocate large amounts of memory, especially if you only know <em>how much</em> memory you’re allocating at runtime.</p>
<p>If you know how much memory you need at compile-time, the stack may be preferential. There are always exceptions.</p>
<p>Nonetheless, using the heap in C, or any language, takes a little more effort on the programmer’s side.</p>
<pre><code class="lang-auto">int main(void) {
    // ...
        int *x;
        x = malloc( sizeof(int) );

        if (x == NULL)
            perror("Couldn't allocate for x");
    // ...
}
</code></pre>
<p>Above would be using the heap. Now time for a quick vocabulary session – sort of:</p>
<p><em><strong><code>malloc</code></strong></em> is the function used to allocate a certain amount of memory on the heap. It takes one parameter: the number of bytes of memory to allocate.</p>
<p>To review, using <code>malloc</code> gets you some heap memory. But what should be done when the memory is no longer needed? Upon a program’s finishing, most modern operating systems will do away with any heap-allocated stuff still remaining. However, if we want to ensure peak code efficiency, we must learn to get rid of no longer needed memory by ourselves.</p>
<p><em><strong><code>free</code></strong></em> does as you would expect. It frees up the memory pointed to by the parameter you pass it:</p>
<pre><code class="lang-auto">//...
free(x);
//...
</code></pre>
<p>Passing <code>x</code> (our pointer from the example before this one) to <code>free</code> clears out the memory to which it points. You can pass any kind of pointer to <code>free</code>. You do not need to pass unassigned pointers, which point to no memory, or pointers that point to another pointer’s memory to <code>free</code>.</p>
<p>You only free a block of memory <em><strong>once</strong></em>. Freeing the same memory multiple times causes problems, as you’ll find out throughout your journey with the C Programming Language.</p>
<hr>
<h1>Conclusion</h1>
<p>All in all, <code>malloc</code> is how you obtain some memory; <code>free</code> is how you <em>release</em> that memory. <code>malloc</code> and <code>free</code> are like <a href="https://en.wikipedia.org/wiki/Yin_and_yang" rel="noopener nofollow ugc">Yin and Yang</a>: they should be balanced. Each call to <code>malloc</code> should be paired with <strong>one</strong> call to <code>free</code>. For a program to achieve <em>inner peace</em>, you could say, it needs to be balanced between memory allocations and memory releases.</p>
<p>That’s it for Stack v. Heap. Next time, we’ll be exploring how to make and use heap-allocated arrays with <code>malloc</code> and <code>free</code>.</p>
<p>Later…<br>
<a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a><br>
<img src="//0x00sec.s3.amazonaws.com/original/1X/cc150d6ddb91379d7d6286bcd013ab4adfd8e2e4.png" alt="that's all, folks!" width="" height=""></p>
          <p><a href="https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960/1</link>
        <pubDate>Mon, 22 Aug 2016 22:43:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-960-1</guid>
        <source url="https://0x00sec.org/t/c-dynamic-memory-part-1-0-stack-v-heap/960.rss">[C] Dynamic Memory (Part 1.0): Stack v. Heap</source>
      </item>
  </channel>
</rss>
