<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PHP] File inclusion vulnerability</title>
    <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200</link>
    <description>
## Preface

------------

&gt;A file inclusion vulnerability is a type of vulnerability that is most commonly found to affect web applications that rely on a scripting run time. This issue is caused when an application builds a path to executable code using an attacker-controlled variable in a way that allows the attacker to control which file is executed at run time. If a file contains this loophole ot often was implemented in the development stage for convenience.  Because it is often used in development and later forgotten, it has become the target of multiple attacks and has resulted in a variety of file-based attacks.

## Local file inclusion

------------

First of all, when the value can directly  be be controlled we have a very similar code snippet as below present: 

```php
&lt;? php
$ file = $ _GET [&#39;file&#39;];
include ($ file);
```
If we can find the above code,  there is a directly included `$file`, which we have control over.

&gt; Note: The file can be anything. It is included no matter if it&#39;s an exptected file type, a picture, or anything arbitrary.

First of all in the current folder create an arbitrary file with any suffix, such as: `file.txt` (even if it is a picture format like file.jpg then the following effect takes place).
Set the contents of the file as:
```php
&lt;? php
phpinfo ();
```
&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/a/afb212c0efd2ff0920bfcaaaea652d679969d5ff.png&#39;&gt;

File Inclusion Vulnerabilities also contain other files within the current server while supporting directories that contain `web` applications, as follows:
Try to include some of the contents of your HDD for example: `C:\WINDOWS\system.ini`

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/a/a5f5bfdfad506783fd997f93deab0ac3c61ce8ab.png&#39;&gt;
If we do this, we can see that the contents of any file will be outputted to the browser.

This only works if we have total control and the file type is not further specified.
So what can we do if the code snippet changes to this:
```php
&lt;?php
	$file = $_GET[&#39;file&#39;] . &#39;.php&#39;;
	echo $file;
	include($file);
```
In this case, we can try to follow the  method above:
This will result in an output like this:

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/3/316cff7f88ff35aac3c571813b3ad851017be68a.png&#39;&gt;

We can see that if the  suffix is fixed, then just like in the figure above, we will not find the file we included earlier. 
The searched for filename is: `./Include.txt.php`.

-----
So here&#39;s another way to do that: `%00` truncates a string upon reaching. 
This trick is widly spread and used in different areas as well. 
I won&#39;t go into any more detail here . 
I recommend checking out online ressources like [this](http://php.net/manual/en/security.filesystem.nullbytes.php)!

Using `%00` in PHP:

1. PHP version &lt;5.3 (excluding 5.3);
PHP `magic_quotes_gpc = off`;
PHP does not use the addslashes function for the received parameters, such as `$ _GET [&#39;file&#39;] in the above code

In PHP version 5.3 or later this issue has been fixed. 
The sequence will be correctly  escaped if `gpc` is turned on or the` addslashes` function is used.
First of all, we can try what happens if the `gpc` is turned on (the effect is the same as using the function)

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/f/fab6f8647f0f7ffdc0f11509d3031e49cbbb47a8.png&#39;&gt;

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/d/da998a1b5f4bb9cfccd014c162bce81aed836bcc.png&#39;&gt;

We can directly see how this case is handled if we enable the `gpc` flag.

Next we take a look at the situation in 5.3:

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/f/f3093f925f9a1a34aa9da0ddd12bd5c02ea06033.png&#39;&gt;
&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/c/c7f1edfeb0df72bd314e0febf7a9bb390be62987.png&#39;&gt;

There is no noticeable effect here either.

So we can see that as long as the above three conditions are satisfied, `%00` can be used.
First we change the PHP version to 5.2 and restart `Apache` after `php.ini` changes `magic_quotes_gpc = on` to` magic_quotes_gpc = off`. 
This enables us to use truncation when attempted.
&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/b/b5228533fa5245c13b8ff0d3aef8608ae9a7a978.png&#39;&gt;

We can see that we have successfully made use of truncated inclusion. 
So does the file only contain the included functions? 
That is certainly not the case, since we have control of what can be included let&#39;s do this ;) .
Let&#39;s create a file: `shell.txt`  to further exploit this vulnerability. 

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/5/5786ff7369c269f5c715b0ed2dfdf7e240155593.png&#39;&gt;

We can see,  including `shell` is not a problem either.

So what is the difference between the two? In fact, there is no difference, the principle is the same, but the first is introduced with the suffix, the second is fixed in the program dead suffix. But `% 00` can be used because it terminates directly when the program stream encounters`% 00` terminator.



## remote file inclusion

------------

&gt; The local file contains the same principle as the remote file, except that the former can only contain the files that exist on the server, and the latter can contain the files on the remote server.

For remote files we need to consider the following:

1. Need `allow_url_include = on` and` allow_url_fopen = on` in `php.ini`
2. The required remote file suffix  cannot be the same as the target server&#39;s language, such as (the target server parses PHP code, then the remote file suffix  can not be `.php`)

Let me  explain the second point.
If your remote file has  `.php` suffix and your remote file content is something like:

```php
&lt;? php
phpinfo ();
```

Then the contents of the target server are obtained after your remote server executes `phpinfo()`
It will not run the code, so the information contained is not the target server but your remote server. 

This is illustrated below:

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/6/6cd5ad78e8088cb36b875de34fbd6b621ae0b5a9.png&#39;&gt;

This is my remote machines information for PHP5.6 version, the target machine is version 5.2.
Next we  include the file!

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/5/577c41d3605fc572349e45b8ce65d822153b3ee0.png&#39;&gt;

We can see that after the file is included, our remote machine changed! why??
Because the target server does not contain the this code:

```php
&lt;? php phpinfo ();?&gt;
```
Instead, the remote server executes the source code of this code, as shown below:

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/6/6a30ad566e39bbda00f3f0b9bb4f315fd5e68237.png&#39;&gt;

So to make this attack work we need to make a few modifications:

    1.Modify the configuration

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/9/9d6a5450003f9e1d70e1f8498169e0a5ac6931e5.png&#39;&gt;

    2.Modify the file suffix

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/7/739da95d6170bb79d091bd57d29817adaef50c66.png&#39;&gt;


Let&#39;s try the include attack vector again:

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/7/70672c40d7e71ce1481c9480c6c942e674926d88.png&#39;&gt;

We can see the desired information got returned after this inclusion and  our target machine information did not change anymore.


Next up we want to do the shell example again for the remote file inclusion
&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/a/a347797c13a6cae981510d1981bc0e77a479a7a9.png&#39;&gt;

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/1/175199f68f5da62743bc5e59ad2d4a6560987930.png&#39;&gt;

Remote file contains the use of the premise is in line with the local file contains the premise and meet the remote file contains the premise of its availability.


## File contains on of many pseudo-protocols

------------

There can be quite a few different pseudo-protocols contained in a file.
I&#39;ll demonstrate a few of them below.

`data:text/plain` or `data: text/plain; base64`
`php://input`
`php://filter`
`file://`
`zip://`

Other protocols can looked up in the official [documentation](http://php.net/manual/en/wrappers.php.php)

## data:text/plain

Output is directly in the corresponding URL showing the parameters: `data:text/plain`.
Then we need to execute the php code as shown below:
&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/0/020b54231a1d3f6d061e97cf43821a36bccc809a.png&#39;&gt;

## data: text/plain; base64

For data: text/plain; base64` there is another way to use it.
We need to execute PHP code using base64 encoding: the base64php code is as shown below:
&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/9/9ffdb1585b2e4db9952d4140f508ea11e46922e3.png&#39;&gt;

------------


 ## php://input

`php://input` accesses the read-only stream of the requested raw data, executing the data in the post request as PHP code.

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/c/c951274feca3fff6238a1dbc5d6a8f4df222cdda.png&#39;&gt;

You can see that the program has automatically an added `.php` suffix.
Hence using include `php://input` will automatically add` .php` so it is certainly not working properly.
We can come back to the nifty little `%00` trick to  truncate the file path!

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/b/b9e4b271170212c6da6b01fc471580e11d6c20c6.png&#39;&gt;

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/7/7cfc74c15c0601d0a57ff95a6c327b7135f21e35.png&#39;&gt;

You can see the terminator is very powerful.

------------

## php://filter


`php://filter` can read the php file code base64 encoded output and return it to us.
For example, we want to read a php file but do not want it to be normal php.

&gt; Usage: php://filter/read=convert.base64-encode/resource=
`../ressource=`  needs to read the contents of the file code

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/b/b510a771a9256a3566469349a8f6bb6ab5b68aac.png&#39;&gt;

After decoding the base64 we can get the contents as usual:

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/7/71418d71d76d011f2f49392b9a6fec1afec8bccb.png&#39;&gt;

------------

## file://

`file://` is used to access the local file system and is not affected by `allow_url_fopen` or` allow_url_include`.

&gt;Usage: file://absolute/path/to/file

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/7/76e5f445208f29adfa3ed31b23a895c5f749116a.png&#39;&gt;

------------

## zip://

`zip://`  can access the files in a zip file. But it needs an absolute path.

&gt; Usage: zip://[archive absolute path] # [compressed file name]

Create a file locally and compress it into a zip archive.

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/0/0ba095d892bf4653340cb40bff79ac039d54ef4e.png&#39;&gt;

You can see that I have already filled in the absolute path and the name of the file.
Why we cannot include it successfully shows the error: 

&gt; Warning: include (`zip://C:/phpStudy/WWW/include/phpinfo.zip.php`) 

We do not want to include this file, instead we want to include the file inside the zip!
Why is the value after `# ` gone? 
Because `#` will ignore the parameters behind it, so we need to use the  `%23`  in the form.
Another point is that the included file ends in a `.php`, but we compressed the file for the php suffix. 
So we do not need to have this suffix, as shown below:

&lt;img src=&#39;//0x00sec.s3.amazonaws.com/original/2X/7/773e8f197dc8da7fc0953227e4da4d4aba52c2bc.png&#39;&gt;

PS：My English is not good, please understand!</description>
    
    <lastBuildDate>Fri, 23 Feb 2018 10:20:35 +0000</lastBuildDate>
    <category>Web Hacking</category>
    <atom:link href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/18">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/18</link>
        <pubDate>Fri, 23 Feb 2018 10:20:39 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-18</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>这个对话最适合IRC。 请随时查看，<a href="http://irc.0x00sec.org">irc.0x00sec.org</a></p>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/17">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/17</link>
        <pubDate>Fri, 23 Feb 2018 10:20:35 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-17</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[zxy86228436]]></dc:creator>
        <description><![CDATA[
            <p>哈哈，可以问一句你的黑客技术牛逼吗？善意的提问哈。</p>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/16">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/16</link>
        <pubDate>Fri, 23 Feb 2018 10:19:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-16</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[nugget]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="zxy86228436" data-post="14" data-topic="5200" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/letter_avatar_proxy/v4/letter/z/278dde/40.png" class="avatar"> zxy86228436:</div>
<blockquote>
<p>你也是中国人吗？我们中国人口就是多哈哈。</p>
</blockquote>
</aside>
<p>我很自豪的英国人，从西方不是中国人:(但我相信伟大的上帝！</p>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/15">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/15</link>
        <pubDate>Fri, 23 Feb 2018 10:17:48 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-15</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[zxy86228436]]></dc:creator>
        <description><![CDATA[
            <p>你也是中国人吗？我们中国人口就是多哈哈。</p>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/14</link>
        <pubDate>Fri, 23 Feb 2018 10:16:11 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-14</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[nugget]]></dc:creator>
        <description><![CDATA[
            <p>Ah yes we all need help of great god, meaning and understand from forum of translations is the key to unlocking chinese to english conversion softwares</p>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/13</link>
        <pubDate>Fri, 23 Feb 2018 10:12:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-13</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[zxy86228436]]></dc:creator>
        <description><![CDATA[
            <p>I am also Chinese, do not understand English, reluctantly understand the meaning of the forum by translation software, do not know how this forum can whisper these gods. I need the help of the Great God.</p>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/12</link>
        <pubDate>Fri, 23 Feb 2018 10:00:34 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-12</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[Poacher]]></dc:creator>
        <description><![CDATA[
            <p>Thank you. We can learn from each other.</p>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/11</link>
        <pubDate>Fri, 02 Feb 2018 11:01:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-11</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[COLD_EYES]]></dc:creator>
        <description><![CDATA[
            <p>php5.3以下已经不多见了，不过还是谢谢分享，学到了</p>
<hr>
<p>EDIT: English translation (from Chinese) by <a class="mention" href="https://0x00sec.org/u/ricksanchez">@ricksanchez</a>:</p>
<blockquote>
<p>PHP version 5.3 is kinda rare nowadays but thank you for sharing it. I learned something <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
</blockquote>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/9</link>
        <pubDate>Fri, 02 Feb 2018 06:25:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-9</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[Poacher]]></dc:creator>
        <description><![CDATA[
            <p>In fact, there are many ways to use this attack</p>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/8</link>
        <pubDate>Fri, 02 Feb 2018 03:00:55 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-8</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[Poacher]]></dc:creator>
        <description><![CDATA[
            <p>Sorry, you can try Google Translate</p>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/7</link>
        <pubDate>Fri, 02 Feb 2018 02:54:15 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-7</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[Poacher]]></dc:creator>
        <description><![CDATA[
            <p>Yes, that’s right. Haha!</p>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/6</link>
        <pubDate>Fri, 02 Feb 2018 02:53:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-6</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[Emrelqqq]]></dc:creator>
        <description><![CDATA[
            <p>ingilizcem yetmiyor güzel döküman da sikcem ya translate bi bok anlatamıyor</p>
<hr>
<p>EDIT: English translation (from Turkish) by <a class="mention" href="https://0x00sec.org/u/oaktree">@oaktree</a>:</p>
<blockquote>
<p>I do not have enough english to translate a good document</p>
</blockquote>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/5</link>
        <pubDate>Fri, 02 Feb 2018 01:25:08 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-5</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[fxbg]]></dc:creator>
        <description><![CDATA[
            <p>I remember publishing a paper about this back in 2006, or maybe it was earlier. I am still surprised to see these kinds of exploits in the wild. nice coverage of this kind of exploit.</p>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/4</link>
        <pubDate>Thu, 01 Feb 2018 21:43:38 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-4</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[direnjie]]></dc:creator>
        <description><![CDATA[
            <p>i see Chinese chopper ；）</p>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/3</link>
        <pubDate>Thu, 01 Feb 2018 14:45:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-3</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[Poacher]]></dc:creator>
        <description><![CDATA[
            <p>Hope to make friends in the community, exchange and study together!</p>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/2</link>
        <pubDate>Wed, 31 Jan 2018 07:53:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-2</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
      <item>
        <title>[PHP] File inclusion vulnerability</title>
        <dc:creator><![CDATA[Poacher]]></dc:creator>
        <description><![CDATA[
            <h2>Preface</h2>
<hr>
<blockquote>
<p>A file inclusion vulnerability is a type of vulnerability that is most commonly found to affect web applications that rely on a scripting run time. This issue is caused when an application builds a path to executable code using an attacker-controlled variable in a way that allows the attacker to control which file is executed at run time. If a file contains this loophole ot often was implemented in the development stage for convenience.  Because it is often used in development and later forgotten, it has become the target of multiple attacks and has resulted in a variety of file-based attacks.</p>
</blockquote>
<h2>Local file inclusion</h2>
<hr>
<p>First of all, when the value can directly  be be controlled we have a very similar code snippet as below present:</p>
<pre><code class="lang-php">&lt;? php
$ file = $ _GET ['file'];
include ($ file);
</code></pre>
<p>If we can find the above code,  there is a directly included <code>$file</code>, which we have control over.</p>
<blockquote>
<p>Note: The file can be anything. It is included no matter if it’s an exptected file type, a picture, or anything arbitrary.</p>
</blockquote>
<p>First of all in the current folder create an arbitrary file with any suffix, such as: <code>file.txt</code> (even if it is a picture format like file.jpg then the following effect takes place).<br>
Set the contents of the file as:</p>
<pre><code class="lang-php">&lt;? php
phpinfo ();
</code></pre>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/a/afb212c0efd2ff0920bfcaaaea652d679969d5ff.png" width="" height=""></p>
<p>File Inclusion Vulnerabilities also contain other files within the current server while supporting directories that contain <code>web</code> applications, as follows:<br>
Try to include some of the contents of your HDD for example: <code>C:\WINDOWS\system.ini</code></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/a/a5f5bfdfad506783fd997f93deab0ac3c61ce8ab.png" width="" height=""></p>
<p>If we do this, we can see that the contents of any file will be outputted to the browser.</p>
<p>This only works if we have total control and the file type is not further specified.<br>
So what can we do if the code snippet changes to this:</p>
<pre><code class="lang-php">&lt;?php
	$file = $_GET['file'] . '.php';
	echo $file;
	include($file);
</code></pre>
<p>In this case, we can try to follow the  method above:<br>
This will result in an output like this:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/3/316cff7f88ff35aac3c571813b3ad851017be68a.png" width="" height=""></p>
<p>We can see that if the  suffix is fixed, then just like in the figure above, we will not find the file we included earlier.<br>
The searched for filename is: <code>./Include.txt.php</code>.</p>
<hr>
<p>So here’s another way to do that: <code>%00</code> truncates a string upon reaching.<br>
This trick is widly spread and used in different areas as well.<br>
I won’t go into any more detail here .<br>
I recommend checking out online ressources like <a href="http://php.net/manual/en/security.filesystem.nullbytes.php" rel="noopener nofollow ugc">this</a>!</p>
<p>Using <code>%00</code> in PHP:</p>
<ol>
<li>PHP version &lt;5.3 (excluding 5.3);<br>
PHP <code>magic_quotes_gpc = off</code>;<br>
PHP does not use the addslashes function for the received parameters, such as `$ _GET [‘file’] in the above code</li>
</ol>
<p>In PHP version 5.3 or later this issue has been fixed.<br>
The sequence will be correctly  escaped if <code>gpc</code> is turned on or the<code> addslashes</code> function is used.<br>
First of all, we can try what happens if the <code>gpc</code> is turned on (the effect is the same as using the function)</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/f/fab6f8647f0f7ffdc0f11509d3031e49cbbb47a8.png" width="" height=""></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/d/da998a1b5f4bb9cfccd014c162bce81aed836bcc.png" width="" height=""></p>
<p>We can directly see how this case is handled if we enable the <code>gpc</code> flag.</p>
<p>Next we take a look at the situation in 5.3:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/f/f3093f925f9a1a34aa9da0ddd12bd5c02ea06033.png" width="" height=""><br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/c/c7f1edfeb0df72bd314e0febf7a9bb390be62987.png" width="" height=""></p>
<p>There is no noticeable effect here either.</p>
<p>So we can see that as long as the above three conditions are satisfied, <code>%00</code> can be used.<br>
First we change the PHP version to 5.2 and restart <code>Apache</code> after <code>php.ini</code> changes <code>magic_quotes_gpc = on</code> to<code> magic_quotes_gpc = off</code>.<br>
This enables us to use truncation when attempted.<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/b/b5228533fa5245c13b8ff0d3aef8608ae9a7a978.png" width="" height=""></p>
<p>We can see that we have successfully made use of truncated inclusion.<br>
So does the file only contain the included functions?<br>
That is certainly not the case, since we have control of what can be included let’s do this <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"> .<br>
Let’s create a file: <code>shell.txt</code>  to further exploit this vulnerability.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/5/5786ff7369c269f5c715b0ed2dfdf7e240155593.png" width="" height=""></p>
<p>We can see,  including <code>shell</code> is not a problem either.</p>
<p>So what is the difference between the two? In fact, there is no difference, the principle is the same, but the first is introduced with the suffix, the second is fixed in the program dead suffix. But <code>% 00</code> can be used because it terminates directly when the program stream encounters<code>% 00</code> terminator.</p>
<h2>remote file inclusion</h2>
<hr>
<blockquote>
<p>The local file contains the same principle as the remote file, except that the former can only contain the files that exist on the server, and the latter can contain the files on the remote server.</p>
</blockquote>
<p>For remote files we need to consider the following:</p>
<ol>
<li>Need <code>allow_url_include = on</code> and<code> allow_url_fopen = on</code> in <code>php.ini</code>
</li>
<li>The required remote file suffix  cannot be the same as the target server’s language, such as (the target server parses PHP code, then the remote file suffix  can not be <code>.php</code>)</li>
</ol>
<p>Let me  explain the second point.<br>
If your remote file has  <code>.php</code> suffix and your remote file content is something like:</p>
<pre><code class="lang-php">&lt;? php
phpinfo ();
</code></pre>
<p>Then the contents of the target server are obtained after your remote server executes <code>phpinfo()</code><br>
It will not run the code, so the information contained is not the target server but your remote server.</p>
<p>This is illustrated below:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/6/6cd5ad78e8088cb36b875de34fbd6b621ae0b5a9.png" width="" height=""></p>
<p>This is my remote machines information for PHP5.6 version, the target machine is version 5.2.<br>
Next we  include the file!</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/5/577c41d3605fc572349e45b8ce65d822153b3ee0.png" width="" height=""></p>
<p>We can see that after the file is included, our remote machine changed! why??<br>
Because the target server does not contain the this code:</p>
<pre><code class="lang-php">&lt;? php phpinfo ();?&gt;
</code></pre>
<p>Instead, the remote server executes the source code of this code, as shown below:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/6/6a30ad566e39bbda00f3f0b9bb4f315fd5e68237.png" width="" height=""></p>
<p>So to make this attack work we need to make a few modifications:</p>
<pre><code>1.Modify the configuration
</code></pre>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/9/9d6a5450003f9e1d70e1f8498169e0a5ac6931e5.png" width="" height=""></p>
<pre><code>2.Modify the file suffix
</code></pre>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/739da95d6170bb79d091bd57d29817adaef50c66.png" width="" height=""></p>
<p>Let’s try the include attack vector again:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/70672c40d7e71ce1481c9480c6c942e674926d88.png" width="" height=""></p>
<p>We can see the desired information got returned after this inclusion and  our target machine information did not change anymore.</p>
<p>Next up we want to do the shell example again for the remote file inclusion<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/a/a347797c13a6cae981510d1981bc0e77a479a7a9.png" width="" height=""></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/1/175199f68f5da62743bc5e59ad2d4a6560987930.png" width="" height=""></p>
<p>Remote file contains the use of the premise is in line with the local file contains the premise and meet the remote file contains the premise of its availability.</p>
<h2>File contains on of many pseudo-protocols</h2>
<hr>
<p>There can be quite a few different pseudo-protocols contained in a file.<br>
I’ll demonstrate a few of them below.</p>
<p><code>data:text/plain</code> or <code>data: text/plain; base64</code><br>
<code>php://input</code><br>
<code>php://filter</code><br>
<code>file://</code><br>
<code>zip://</code></p>
<p>Other protocols can looked up in the official <a href="http://php.net/manual/en/wrappers.php.php" rel="noopener nofollow ugc">documentation</a></p>
<h2>data:text/plain</h2>
<p>Output is directly in the corresponding URL showing the parameters: <code>data:text/plain</code>.<br>
Then we need to execute the php code as shown below:<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/0/020b54231a1d3f6d061e97cf43821a36bccc809a.png" width="" height=""></p>
<h2>data: text/plain; base64</h2>
<p>For data: text/plain; base64` there is another way to use it.<br>
We need to execute PHP code using base64 encoding: the base64php code is as shown below:<br>
<img src="//0x00sec.s3.amazonaws.com/original/2X/9/9ffdb1585b2e4db9952d4140f508ea11e46922e3.png" width="" height=""></p>
<hr>
<h2>php://input</h2>
<p><code>php://input</code> accesses the read-only stream of the requested raw data, executing the data in the post request as PHP code.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/c/c951274feca3fff6238a1dbc5d6a8f4df222cdda.png" width="" height=""></p>
<p>You can see that the program has automatically an added <code>.php</code> suffix.<br>
Hence using include <code>php://input</code> will automatically add<code> .php</code> so it is certainly not working properly.<br>
We can come back to the nifty little <code>%00</code> trick to  truncate the file path!</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/b/b9e4b271170212c6da6b01fc471580e11d6c20c6.png" width="" height=""></p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/7cfc74c15c0601d0a57ff95a6c327b7135f21e35.png" width="" height=""></p>
<p>You can see the terminator is very powerful.</p>
<hr>
<h2>php://filter</h2>
<p><code>php://filter</code> can read the php file code base64 encoded output and return it to us.<br>
For example, we want to read a php file but do not want it to be normal php.</p>
<blockquote>
<p>Usage: php://filter/read=convert.base64-encode/resource=<br>
<code>../ressource=</code>  needs to read the contents of the file code</p>
</blockquote>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/b/b510a771a9256a3566469349a8f6bb6ab5b68aac.png" width="" height=""></p>
<p>After decoding the base64 we can get the contents as usual:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/71418d71d76d011f2f49392b9a6fec1afec8bccb.png" width="" height=""></p>
<hr>
<h2>file://</h2>
<p><code>file://</code> is used to access the local file system and is not affected by <code>allow_url_fopen</code> or<code> allow_url_include</code>.</p>
<blockquote>
<p>Usage: file://absolute/path/to/file</p>
</blockquote>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/76e5f445208f29adfa3ed31b23a895c5f749116a.png" width="" height=""></p>
<hr>
<h2>zip://</h2>
<p><code>zip://</code>  can access the files in a zip file. But it needs an absolute path.</p>
<blockquote>
<p>Usage: zip://[archive absolute path] # [compressed file name]</p>
</blockquote>
<p>Create a file locally and compress it into a zip archive.</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/0/0ba095d892bf4653340cb40bff79ac039d54ef4e.png" width="" height=""></p>
<p>You can see that I have already filled in the absolute path and the name of the file.<br>
Why we cannot include it successfully shows the error:</p>
<blockquote>
<p>Warning: include (<code>zip://C:/phpStudy/WWW/include/phpinfo.zip.php</code>)</p>
</blockquote>
<p>We do not want to include this file, instead we want to include the file inside the zip!<br>
Why is the value after <code># </code> gone?<br>
Because <code>#</code> will ignore the parameters behind it, so we need to use the  <code>%23</code>  in the form.<br>
Another point is that the included file ends in a <code>.php</code>, but we compressed the file for the php suffix.<br>
So we do not need to have this suffix, as shown below:</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/2X/7/773e8f197dc8da7fc0953227e4da4d4aba52c2bc.png" width="" height=""></p>
<p>PS：My English is not good, please understand!</p>
          <p><a href="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/php-file-inclusion-vulnerability/5200/1</link>
        <pubDate>Wed, 31 Jan 2018 07:46:25 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-5200-1</guid>
        <source url="https://0x00sec.org/t/php-file-inclusion-vulnerability/5200.rss">[PHP] File inclusion vulnerability</source>
      </item>
  </channel>
</rss>
