<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Reversing ActionSpy Android Malware</title>
    <link>https://0x00sec.org/t/reversing-actionspy-android-malware/26537</link>
    <description>Hello, 0x00ers!
Hope you are doing well!
First of all sorry if I did some mistakes I am not a native English speaker. 
In this article, I’m going to discuss a first part of analysis of one of the variant of the malware ActionSpy.

# Introdution 
This post is a first part of reversing a version of ActionSpy. The tools used are:
- BurpSuite
- Binary Ninja 
- jadx-gui
- AVD
- apktool
- foremost


# Information gathering
## Permissions
Using jadx-gui to reverse the APK, it can be observed that the malware use nearly all the Android permissions, some of them are listed bellow:  
```angular2html
    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.READ_LOGS&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.WRITE_SETTINGS&quot;/&gt;
    &lt;uses-permission android:name=&quot;com.android.browser.permission.READ_HISTORY_BOOKMARKS&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.READ_CONTACTS&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.READ_SMS&quot;/&gt;
    &lt;uses-permission android:name=&quot;android.permission.READ_CALL_LOG&quot;/&gt;
    ....
```

## Traffic analysis
Starting by the traffic analysis will give more information about how the malware communicate with the C2C server and which information is sent.

Installing the malware on an Android Virtual Device which has Burp Suite as proxy, it can be observed that the server send different HTTP requests to different servers with the domain name gvt1.com:
- redirector.gvt1.com
- r6---sn-n0ogpnx-b85l.gvt1.com
- r3---sn-n0ogpnx-b85l.gvt1.com
- r5---sn-n0ogpnx-b85l.gvt1.com

The first HTTP request is sent to redirector.gvt1.com, which will redirect to one of the C2C servers.
![redirector|690x460](upload://cjtytnoJOM1FnhuW3hb6j85ZtdN.png)


If we follow the redirection, a binary file is downloaded from the C2C server.
![file1_dl|690x466](upload://sNifXB5NYLY2RQ9FqH5Eggl4IK2.png)


Using `wget` to download the file in order to check what it contains:
```shell
wget &quot;http://r3---sn-n0ogpnx-b85l.gvt1.com/edgedl/release2/chrome_component/AKi1sv7cx4bJf9W1XiuhCek_9.18.0/KDDyO-ENZ8HrUUsbZHNxeA&quot; -O file1.data
```
The malware sends some parameter trough the request including the public IP address of the victim.
The part `AKi1sv7cx4bJf9W1XiuhCek_9.18.0/KDDyO-ENZ8HrUUsbZHNxeA` of the request change at each time, it suspected that the information is sent encrypted through the request. 

### Downloaded files Analysis
Starting by identifying the file type of the downloaded file.
```shell
&gt; file file1.data
file1.data: Google Chrome extension, version 3
```
The application Google Chrome on Android does not support extensions. To get the data from this file `foremoset` is used. 
```shell
&gt; foremost file1.data -o output_file1/
```
The tool founded one zip file which contains 3 files and one directory:
![zip1_content|567x68](upload://dRoArRv9wid6tJcFqHCZrYk0N1Q.png)


The file `Filtering Rules` contains a list of 6291 domain names.

At each request a new list is downloaded with different domain names.

## Embedded APKs
The malware embed three APKs located in the folder `assets/init`. These APKs are:
- Camera.apk
- Core.apk
- Location.apk

These APKs will be analyzed later on (Not in this current post).

# Static Analysis
## Main activity
The main activity is `com.jsyjv.klxblnwc.p004u.MainActivity`. The function `onCreate` look as follows:
![MainActivity_onCreate|690x375](upload://eRSsvqfc9CZqgVI6z47HDSTcuB6.png)


The code calls a native function `mo684a` from the library `hello-jni` which generate a key, check if it&#39;s the first time the application is launched by reading the value from the shared preferences file located at 
`/data/data/com.isyjv.klxblnwc/shared_prefs/com.isyjv.klxblnwc.xml`. 

![native_hello_jni_a|690x139](upload://9jbEkn5FGnU5370cXitC9B9Og2N.png)



The malware calls the function `com.isyjv.klxblnwc.util.Utils.desDecrypt` with the generated hex key.
The function is as follows:
![desDecrypt|690x243](upload://7NLO5s0S75Os7Qu7Fm372ccYr0T.png)

```java
  cipher.init(2, skeyFactory.generateSecret(desKeySpec)); // Initialize cipher to decryption mode
```
Before encrypting the argument, the function divide the string into two characters, convert it each to integer then encrypt it: 
```java
  byte[] btxts = new byte[(txt.length() / 2)];
  int count = txt.length();
  for (int i = 0; i &lt; count; i += 2) {
    btxts[i / 2] = (byte) Integer.parseInt(txt.substring(i, i + 2), 16);
  }
```
As DES decryption is the inversion of DES encryption, the function desDecrypt here is used as encryption routine.

After the key generation, the malware start a service that init the configuration file and redirect logs of the application to a file. The file name is microlog.txt and located in the folder /sdcard. the content is as follow:
```shell
[DEBUG]22:14:53,00 Utils|main PService onCreate |Microlog 1 
[DEBUG]22:14:53,00 Utils|main PService onBind Intent { cmp=com.isyjv.klxblnwc/.s.PService } |Microlog 1 
[DEBUG]22:14:53,01 Utils|main PService Binder uid:10149 |Microlog 2 
[DEBUG]22:14:53,03 Utils|main PService caller signature md5:3bd158635713d3e220113fb6adc8b6e2 |Microlog 4 
[DEBUG]22:14:53,48 AppEnv|main onCreate |Microlog 0 
[DEBUG]22:14:53,50 AppEnv|main startJobSheduler ret 1 |Microlog 2 
[DEBUG]22:14:53,52 AppEnv|main onCreate List pkgName: com.isyjv.klxblnwc svrName: com.isyjv.klxblnwc.s.HService |Microlog 4 
[DEBUG]22:14:53,53 AppEnv|main onStartCommand startId：1 |Microlog 5 
[DEBUG]22:14:53,54 AppEnv|Thread-2 startGuard pkgName: com.isyjv.klxblnwc svrName: com.isyjv.klxblnwc.s.HService |Microlog 6 
[DEBUG]22:14:53,54 AppEnv|Thread-2 startGuard wating... |Microlog 6 
[DEBUG]22:14:54,679 Utils|Binder:4646_3 start to installPlugin /storage/emulated/0/origin/Camera.apk,pkgname:null |Microlog 1680 
[DEBUG]22:14:54,712 Utils|Binder:4646_3 install plugin failed, pkgname:null resultCode:0 |Microlog 1713 
[DEBUG]22:14:54,722 Utils|Binder:4646_3 start to installPlugin /storage/emulated/0/origin/Core.apk,pkgname:null |Microlog 1723 
[DEBUG]22:14:54,798 Utils|Binder:4646_3 install plugin failed, pkgname:null resultCode:0 |Microlog 1799 
[DEBUG]22:14:54,813 Utils|Binder:4646_3 start to installPlugin /storage/emulated/0/origin/Location.apk,pkgname:null |Microlog 1814 
[DEBUG]22:14:54,869 Utils|Binder:4646_3 install plugin failed, pkgname:null resultCode:0 |Microlog 1870
```
This service start a second service that will install the packed APKs, list installed Apps and check if the device is rooted. This information is logged to file /sdcard/microlog.txt.

That&#39;s it for this first part and thanks for reading!</description>
    
    <lastBuildDate>Mon, 19 Jul 2021 12:10:04 +0000</lastBuildDate>
    <category>Reverse Engineering</category>
    <atom:link href="https://0x00sec.org/t/reversing-actionspy-android-malware/26537.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Reversing ActionSpy Android Malware</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/reversing-actionspy-android-malware/26537/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reversing-actionspy-android-malware/26537/3</link>
        <pubDate>Thu, 11 Nov 2021 09:11:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26537-3</guid>
        <source url="https://0x00sec.org/t/reversing-actionspy-android-malware/26537.rss">Reversing ActionSpy Android Malware</source>
      </item>
      <item>
        <title>Reversing ActionSpy Android Malware</title>
        <dc:creator><![CDATA[3vn2odzn]]></dc:creator>
        <description><![CDATA[
            <p>Reverse engineering is a really cool branch. Since there is not much content about reverse engineering, it is pleasing to come across very descriptive content like this article.  Thanks for your effort <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> Successful topic.</p>
          <p><a href="https://0x00sec.org/t/reversing-actionspy-android-malware/26537/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reversing-actionspy-android-malware/26537/2</link>
        <pubDate>Mon, 19 Jul 2021 12:10:04 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26537-2</guid>
        <source url="https://0x00sec.org/t/reversing-actionspy-android-malware/26537.rss">Reversing ActionSpy Android Malware</source>
      </item>
      <item>
        <title>Reversing ActionSpy Android Malware</title>
        <dc:creator><![CDATA[hts]]></dc:creator>
        <description><![CDATA[
            <p>Hello, 0x00ers!<br>
Hope you are doing well!<br>
First of all sorry if I did some mistakes I am not a native English speaker.<br>
In this article, I’m going to discuss a first part of analysis of one of the variant of the malware ActionSpy.</p>
<h1>
<a name="introdution-1" class="anchor" href="https://0x00sec.org#introdution-1"></a>Introdution</h1>
<p>This post is a first part of reversing a version of ActionSpy. The tools used are:</p>
<ul>
<li>BurpSuite</li>
<li>Binary Ninja</li>
<li>jadx-gui</li>
<li>AVD</li>
<li>apktool</li>
<li>foremost</li>
</ul>
<h1>
<a name="information-gathering-2" class="anchor" href="https://0x00sec.org#information-gathering-2"></a>Information gathering</h1>
<h2>
<a name="permissions-3" class="anchor" href="https://0x00sec.org#permissions-3"></a>Permissions</h2>
<p>Using jadx-gui to reverse the APK, it can be observed that the malware use nearly all the Android permissions, some of them are listed bellow:</p>
<pre><code class="lang-auto">    &lt;uses-permission android:name="android.permission.READ_PHONE_STATE"/&gt;
    &lt;uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/&gt;
    &lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/&gt;
    &lt;uses-permission android:name="android.permission.INTERNET"/&gt;
    &lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/&gt;
    &lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/&gt;
    &lt;uses-permission android:name="android.permission.CHANGE_WIFI_STATE"/&gt;
    &lt;uses-permission android:name="android.permission.CAMERA"/&gt;
    &lt;uses-permission android:name="android.permission.RECORD_AUDIO"/&gt;
    &lt;uses-permission android:name="android.permission.READ_LOGS"/&gt;
    &lt;uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/&gt;
    &lt;uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS"/&gt;
    &lt;uses-permission android:name="android.permission.WRITE_SETTINGS"/&gt;
    &lt;uses-permission android:name="com.android.browser.permission.READ_HISTORY_BOOKMARKS"/&gt;
    &lt;uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/&gt;
    &lt;uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/&gt;
    &lt;uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/&gt;
    &lt;uses-permission android:name="android.permission.READ_CONTACTS"/&gt;
    &lt;uses-permission android:name="android.permission.READ_SMS"/&gt;
    &lt;uses-permission android:name="android.permission.READ_CALL_LOG"/&gt;
    ....
</code></pre>
<h2>
<a name="traffic-analysis-4" class="anchor" href="https://0x00sec.org#traffic-analysis-4"></a>Traffic analysis</h2>
<p>Starting by the traffic analysis will give more information about how the malware communicate with the C2C server and which information is sent.</p>
<p>Installing the malware on an Android Virtual Device which has Burp Suite as proxy, it can be observed that the server send different HTTP requests to different servers with the domain name <a href="http://gvt1.com" rel="noopener nofollow ugc">gvt1.com</a>:</p>
<ul>
<li><a href="http://redirector.gvt1.com" rel="noopener nofollow ugc">redirector.gvt1.com</a></li>
<li><a href="http://r6---sn-n0ogpnx-b85l.gvt1.com" rel="noopener nofollow ugc">r6---sn-n0ogpnx-b85l.gvt1.com</a></li>
<li><a href="http://r3---sn-n0ogpnx-b85l.gvt1.com" rel="noopener nofollow ugc">r3---sn-n0ogpnx-b85l.gvt1.com</a></li>
<li><a href="http://r5---sn-n0ogpnx-b85l.gvt1.com" rel="noopener nofollow ugc">r5---sn-n0ogpnx-b85l.gvt1.com</a></li>
</ul>
<p>The first HTTP request is sent to <a href="http://redirector.gvt1.com" rel="noopener nofollow ugc">redirector.gvt1.com</a>, which will redirect to one of the C2C servers.<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/5/6/564db5d6dce9fe43b04727ec462b9a3bfefdf9f3.png" data-download-href="/uploads/short-url/cjtytnoJOM1FnhuW3hb6j85ZtdN.png?dl=1" title="redirector" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/5/6/564db5d6dce9fe43b04727ec462b9a3bfefdf9f3_2_690x460.png" alt="redirector" data-base62-sha1="cjtytnoJOM1FnhuW3hb6j85ZtdN" width="690" height="460" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/5/6/564db5d6dce9fe43b04727ec462b9a3bfefdf9f3_2_690x460.png, https://0x00sec.s3.amazonaws.com/optimized/3X/5/6/564db5d6dce9fe43b04727ec462b9a3bfefdf9f3_2_1035x690.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/5/6/564db5d6dce9fe43b04727ec462b9a3bfefdf9f3.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/5/6/564db5d6dce9fe43b04727ec462b9a3bfefdf9f3_2_10x10.png"></a></div><p></p>
<p>If we follow the redirection, a binary file is downloaded from the C2C server.<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/c/9/c9cf5e7212a9f0365fa64b892972abc8d83f9206.png" data-download-href="/uploads/short-url/sNifXB5NYLY2RQ9FqH5Eggl4IK2.png?dl=1" title="file1_dl" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/c/9/c9cf5e7212a9f0365fa64b892972abc8d83f9206_2_690x466.png" alt="file1_dl" data-base62-sha1="sNifXB5NYLY2RQ9FqH5Eggl4IK2" width="690" height="466" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/c/9/c9cf5e7212a9f0365fa64b892972abc8d83f9206_2_690x466.png, https://0x00sec.s3.amazonaws.com/optimized/3X/c/9/c9cf5e7212a9f0365fa64b892972abc8d83f9206_2_1035x699.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/c/9/c9cf5e7212a9f0365fa64b892972abc8d83f9206.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/c/9/c9cf5e7212a9f0365fa64b892972abc8d83f9206_2_10x10.png"></a></div><p></p>
<p>Using <code>wget</code> to download the file in order to check what it contains:</p>
<pre><code class="lang-auto">wget "http://r3---sn-n0ogpnx-b85l.gvt1.com/edgedl/release2/chrome_component/AKi1sv7cx4bJf9W1XiuhCek_9.18.0/KDDyO-ENZ8HrUUsbZHNxeA" -O file1.data
</code></pre>
<p>The malware sends some parameter trough the request including the public IP address of the victim.<br>
The part <code>AKi1sv7cx4bJf9W1XiuhCek_9.18.0/KDDyO-ENZ8HrUUsbZHNxeA</code> of the request change at each time, it suspected that the information is sent encrypted through the request.</p>
<h3>
<a name="downloaded-files-analysis-5" class="anchor" href="https://0x00sec.org#downloaded-files-analysis-5"></a>Downloaded files Analysis</h3>
<p>Starting by identifying the file type of the downloaded file.</p>
<pre><code class="lang-auto">&gt; file file1.data
file1.data: Google Chrome extension, version 3
</code></pre>
<p>The application Google Chrome on Android does not support extensions. To get the data from this file <code>foremoset</code> is used.</p>
<pre><code class="lang-auto">&gt; foremost file1.data -o output_file1/
</code></pre>
<p>The tool founded one zip file which contains 3 files and one directory:<br>
<img src="https://0x00sec.s3.amazonaws.com/original/3X/6/1/6125779f2325e094354ae8303daf2ed557808236.png" alt="zip1_content" data-base62-sha1="dRoArRv9wid6tJcFqHCZrYk0N1Q" width="567" height="68"></p>
<p>The file <code>Filtering Rules</code> contains a list of 6291 domain names.</p>
<p>At each request a new list is downloaded with different domain names.</p>
<h2>
<a name="embedded-apks-6" class="anchor" href="https://0x00sec.org#embedded-apks-6"></a>Embedded APKs</h2>
<p>The malware embed three APKs located in the folder <code>assets/init</code>. These APKs are:</p>
<ul>
<li>Camera.apk</li>
<li>Core.apk</li>
<li>Location.apk</li>
</ul>
<p>These APKs will be analyzed later on (Not in this current post).</p>
<h1>
<a name="static-analysis-7" class="anchor" href="https://0x00sec.org#static-analysis-7"></a>Static Analysis</h1>
<h2>
<a name="main-activity-8" class="anchor" href="https://0x00sec.org#main-activity-8"></a>Main activity</h2>
<p>The main activity is <code>com.jsyjv.klxblnwc.p004u.MainActivity</code>. The function <code>onCreate</code> look as follows:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/6/8/68359576f06882defb73099fe1c4965cf01bdb04.png" data-download-href="/uploads/short-url/eRSsvqfc9CZqgVI6z47HDSTcuB6.png?dl=1" title="MainActivity_onCreate" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68359576f06882defb73099fe1c4965cf01bdb04_2_690x375.png" alt="MainActivity_onCreate" data-base62-sha1="eRSsvqfc9CZqgVI6z47HDSTcuB6" width="690" height="375" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68359576f06882defb73099fe1c4965cf01bdb04_2_690x375.png, https://0x00sec.s3.amazonaws.com/original/3X/6/8/68359576f06882defb73099fe1c4965cf01bdb04.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/6/8/68359576f06882defb73099fe1c4965cf01bdb04.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/6/8/68359576f06882defb73099fe1c4965cf01bdb04_2_10x10.png"></a></div><p></p>
<p>The code calls a native function <code>mo684a</code> from the library <code>hello-jni</code> which generate a key, check if it’s the first time the application is launched by reading the value from the shared preferences file located at<br>
<code>/data/data/com.isyjv.klxblnwc/shared_prefs/com.isyjv.klxblnwc.xml</code>.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/4/1/413ed4bf05fffd389158649930e5026b3914218d.png" data-download-href="/uploads/short-url/9jbEkn5FGnU5370cXitC9B9Og2N.png?dl=1" title="native_hello_jni_a" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/4/1/413ed4bf05fffd389158649930e5026b3914218d_2_690x139.png" alt="native_hello_jni_a" data-base62-sha1="9jbEkn5FGnU5370cXitC9B9Og2N" width="690" height="139" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/4/1/413ed4bf05fffd389158649930e5026b3914218d_2_690x139.png, https://0x00sec.s3.amazonaws.com/original/3X/4/1/413ed4bf05fffd389158649930e5026b3914218d.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/4/1/413ed4bf05fffd389158649930e5026b3914218d.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/4/1/413ed4bf05fffd389158649930e5026b3914218d_2_10x10.png"></a></div><p></p>
<p>The malware calls the function <code>com.isyjv.klxblnwc.util.Utils.desDecrypt</code> with the generated hex key.<br>
The function is as follows:<br>
</p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/3/6/36af8215c4019ad5a4e745d60ecf054c24cee703.png" data-download-href="/uploads/short-url/7NLO5s0S75Os7Qu7Fm372ccYr0T.png?dl=1" title="desDecrypt" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/3/6/36af8215c4019ad5a4e745d60ecf054c24cee703_2_690x243.png" alt="desDecrypt" data-base62-sha1="7NLO5s0S75Os7Qu7Fm372ccYr0T" width="690" height="243" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/3/6/36af8215c4019ad5a4e745d60ecf054c24cee703_2_690x243.png, https://0x00sec.s3.amazonaws.com/original/3X/3/6/36af8215c4019ad5a4e745d60ecf054c24cee703.png 1.5x, https://0x00sec.s3.amazonaws.com/original/3X/3/6/36af8215c4019ad5a4e745d60ecf054c24cee703.png 2x" data-small-upload="https://0x00sec.s3.amazonaws.com/optimized/3X/3/6/36af8215c4019ad5a4e745d60ecf054c24cee703_2_10x10.png"></a></div><p></p>
<pre><code class="lang-java">  cipher.init(2, skeyFactory.generateSecret(desKeySpec)); // Initialize cipher to decryption mode
</code></pre>
<p>Before encrypting the argument, the function divide the string into two characters, convert it each to integer then encrypt it:</p>
<pre><code class="lang-java">  byte[] btxts = new byte[(txt.length() / 2)];
  int count = txt.length();
  for (int i = 0; i &lt; count; i += 2) {
    btxts[i / 2] = (byte) Integer.parseInt(txt.substring(i, i + 2), 16);
  }
</code></pre>
<p>As DES decryption is the inversion of DES encryption, the function desDecrypt here is used as encryption routine.</p>
<p>After the key generation, the malware start a service that init the configuration file and redirect logs of the application to a file. The file name is microlog.txt and located in the folder /sdcard. the content is as follow:</p>
<pre><code class="lang-auto">[DEBUG]22:14:53,00 Utils|main PService onCreate |Microlog 1 
[DEBUG]22:14:53,00 Utils|main PService onBind Intent { cmp=com.isyjv.klxblnwc/.s.PService } |Microlog 1 
[DEBUG]22:14:53,01 Utils|main PService Binder uid:10149 |Microlog 2 
[DEBUG]22:14:53,03 Utils|main PService caller signature md5:3bd158635713d3e220113fb6adc8b6e2 |Microlog 4 
[DEBUG]22:14:53,48 AppEnv|main onCreate |Microlog 0 
[DEBUG]22:14:53,50 AppEnv|main startJobSheduler ret 1 |Microlog 2 
[DEBUG]22:14:53,52 AppEnv|main onCreate List pkgName: com.isyjv.klxblnwc svrName: com.isyjv.klxblnwc.s.HService |Microlog 4 
[DEBUG]22:14:53,53 AppEnv|main onStartCommand startId：1 |Microlog 5 
[DEBUG]22:14:53,54 AppEnv|Thread-2 startGuard pkgName: com.isyjv.klxblnwc svrName: com.isyjv.klxblnwc.s.HService |Microlog 6 
[DEBUG]22:14:53,54 AppEnv|Thread-2 startGuard wating... |Microlog 6 
[DEBUG]22:14:54,679 Utils|Binder:4646_3 start to installPlugin /storage/emulated/0/origin/Camera.apk,pkgname:null |Microlog 1680 
[DEBUG]22:14:54,712 Utils|Binder:4646_3 install plugin failed, pkgname:null resultCode:0 |Microlog 1713 
[DEBUG]22:14:54,722 Utils|Binder:4646_3 start to installPlugin /storage/emulated/0/origin/Core.apk,pkgname:null |Microlog 1723 
[DEBUG]22:14:54,798 Utils|Binder:4646_3 install plugin failed, pkgname:null resultCode:0 |Microlog 1799 
[DEBUG]22:14:54,813 Utils|Binder:4646_3 start to installPlugin /storage/emulated/0/origin/Location.apk,pkgname:null |Microlog 1814 
[DEBUG]22:14:54,869 Utils|Binder:4646_3 install plugin failed, pkgname:null resultCode:0 |Microlog 1870
</code></pre>
<p>This service start a second service that will install the packed APKs, list installed Apps and check if the device is rooted. This information is logged to file /sdcard/microlog.txt.</p>
<p>That’s it for this first part and thanks for reading!</p>
          <p><a href="https://0x00sec.org/t/reversing-actionspy-android-malware/26537/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/reversing-actionspy-android-malware/26537/1</link>
        <pubDate>Mon, 12 Jul 2021 17:11:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-26537-1</guid>
        <source url="https://0x00sec.org/t/reversing-actionspy-android-malware/26537.rss">Reversing ActionSpy Android Malware</source>
      </item>
  </channel>
</rss>
