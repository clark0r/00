<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Pastebin grabber (email:pass) Tutorial</title>
    <link>https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652</link>
    <description>#Pastebin Grabber #1
####First Words: 
This is my first tutorial ever ! So if it feel understandable or something, please tell me ;)

####Before starting: 
For this tutorial i will use Ruby language
you will need those gems to follow the tutorial : 
`gem install HTTParty `   --&gt; *for http request*
`gem install Nokogiri`   --&gt; *for web parsing* 

####How it works : 
1. Make a search on pastebin website
2. Parse all google links to only get pastebin links
3. Create threads for inspecting links
4. Inspect links and get the combos in a file

## Make a search on pastebin site : 
We just use the google operator &quot;site:&quot; to get only links from pastebin.com followed by our query : 

&quot; site:pastebin.com combo email pass &quot;
```ruby
page = HTTParty.get(&#39;http://www.google.com/search?q=site%3Apastebin.com%20combo%20email%20pass&#39;)

page_parsed = Nokogiri::HTML(page)  #Get a &quot;code readable page&quot;
```

More informations on google operator here -&gt; [Google operators](http://www.googleguide.com/advanced_operators_reference.html)

## Get all Pastebin.com links

Just use CSS selectors on our parsed page to get all links.

```ruby
link_array = []

page_parsed.css(&#39;.r a&#39;).map do |a|    #for each links (CSS selectors)
  link_array.push(a[&quot;href&quot;][7..-1])   #Get links in an array
end
```

##Create Threads : 
We are going to create threads in order to get quicker results by creating an array of threads.
For each links we got we create a thread and put it on the array.

```ruby
threads = []
link_array.each do |item|
  threads &lt;&lt; Thread.new {explore(item)} #Explore funtion in the last part ;)
end

threads.each { |t| t.join }
```

##Get Results  \o/ ! 

Each thread will : 



* Get the page and parse it
* Get the raw data of pastebin
* Compare data to regex
* Write result in a file

```ruby
def explore(link)
  reg = /.*@[a-z]*\.[a-z]{2,3}:\S*/ #email:pass regex
  vide = &quot;&quot; #Buffer variable
   page = HTTParty.get(link)
   page_parsed = Nokogiri::HTML(page)
   page_parsed.css(&#39;#paste_code&#39;).map do |a|   #For each line of raw data 
    
     a.text.scan(reg).each do |combo|
       vide += combo + &quot;\n&quot;    #if data match regex, write into buffer
     end
     File.open(&#39;combo.txt&#39;, &#39;w&#39;) { |file| file.write(vide) }  #write buffer to a file

   end
```

That&#39;s it, you just create your own Pastebin grabber ! Here come the full code : 
```ruby
require &#39;HTTParty&#39;
require &#39;Nokogiri&#39;


def explore(link)
  reg = /.*@[a-z]*\.[a-z]{2,3}:\S*/
  vide = &quot;&quot;
   page = HTTParty.get(link)
   page_parsed = Nokogiri::HTML(page)
   page_parsed.css(&#39;#paste_code&#39;).map do |a|
    
     a.text.scan(reg).each do |combo|
       vide += combo + &quot;\n&quot;
     end
     File.open(&#39;combo.txt&#39;, &#39;w&#39;) { |file| file.write(vide) }

   end

end


page = HTTParty.get(&#39;http://www.google.com/search?q=site%3Apastebin.com%20combo%20email%20pass&#39;)

page_parsed = Nokogiri::HTML(page)

link_array = []

page_parsed.css(&#39;.r a&#39;).map do |a|
  link_array.push(a[&quot;href&quot;][7..-1])
end

threads = []
link_array.each do |item|
  threads &lt;&lt; Thread.new {explore(item)}
end

threads.each { |t| t.join }
```
(This code actually get 14 000 combos, and it just explore the 1st page of google results)


**Thank for reading ! Please comments and feel free to improve the code :smiley:**</description>
    
    <lastBuildDate>Fri, 24 Jun 2016 19:14:01 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Pastebin grabber (email:pass) Tutorial</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652/6</link>
        <pubDate>Sun, 21 Jan 2018 00:30:19 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-652-6</guid>
        <source url="https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652.rss">Pastebin grabber (email:pass) Tutorial</source>
      </item>
      <item>
        <title>Pastebin grabber (email:pass) Tutorial</title>
        <dc:creator><![CDATA[Acarnage]]></dc:creator>
        <description><![CDATA[
            <p>Indeed ! didn’t knew that thank’s !</p>
          <p><a href="https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652/5</link>
        <pubDate>Fri, 24 Jun 2016 19:14:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-652-5</guid>
        <source url="https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652.rss">Pastebin grabber (email:pass) Tutorial</source>
      </item>
      <item>
        <title>Pastebin grabber (email:pass) Tutorial</title>
        <dc:creator><![CDATA[IoTh1nkN0t]]></dc:creator>
        <description><![CDATA[
            <p>instead of navigating to <a href="http://pastebin.com/abcdef" rel="nofollow noopener">pastebin.com/abcdef</a><br>
You can go to <a href="http://pastebin.com/raw/abcdef" rel="nofollow noopener">pastebin.com/raw/abcdef</a><br>
That way you don’t need to parse the html elements of <a href="http://pastebin.com" rel="nofollow noopener">pastebin.com</a></p>
          <p><a href="https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652/4</link>
        <pubDate>Fri, 24 Jun 2016 19:00:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-652-4</guid>
        <source url="https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652.rss">Pastebin grabber (email:pass) Tutorial</source>
      </item>
      <item>
        <title>Pastebin grabber (email:pass) Tutorial</title>
        <dc:creator><![CDATA[Acarnage]]></dc:creator>
        <description><![CDATA[
            <p>The point is to get free combos for your stuff (it could be making a dictionnary for brute force, test those combos with Sentry MBA to get websites account etc… )<br>
I just wanted to show how it’s possible to “crawl” a website and get specific content.</p>
<p>I’m not aware of threading problems (i’m kinda beginner at it ) so maybe another member can check and answer ?</p>
          <p><a href="https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652/3</link>
        <pubDate>Fri, 24 Jun 2016 16:04:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-652-3</guid>
        <source url="https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652.rss">Pastebin grabber (email:pass) Tutorial</source>
      </item>
      <item>
        <title>Pastebin grabber (email:pass) Tutorial</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>So what exactly is the point of doing this? And wouldn’t writing to the same file from multiple Threads pose a data race issue?</p>
          <p><a href="https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652/2</link>
        <pubDate>Fri, 24 Jun 2016 15:51:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-652-2</guid>
        <source url="https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652.rss">Pastebin grabber (email:pass) Tutorial</source>
      </item>
      <item>
        <title>Pastebin grabber (email:pass) Tutorial</title>
        <dc:creator><![CDATA[Acarnage]]></dc:creator>
        <description><![CDATA[
            <p><span class="hashtag">#Pastebin</span> Grabber <span class="hashtag">#1</span><br>
###<span class="hashtag">#First</span> Words:<br>
This is my first tutorial ever ! So if it feel understandable or something, please tell me <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<p>###<span class="hashtag">#Before</span> starting:<br>
For this tutorial i will use Ruby language<br>
you will need those gems to follow the tutorial :<br>
<code>gem install HTTParty </code>   --&gt; <em>for http request</em><br>
<code>gem install Nokogiri</code>   --&gt; <em>for web parsing</em></p>
<p>###<span class="hashtag">#How</span> it works :</p>
<ol>
<li>Make a search on pastebin website</li>
<li>Parse all google links to only get pastebin links</li>
<li>Create threads for inspecting links</li>
<li>Inspect links and get the combos in a file</li>
</ol>
<h2>Make a search on pastebin site :</h2>
<p>We just use the google operator “site:” to get only links from <a href="http://pastebin.com" rel="nofollow noopener">pastebin.com</a> followed by our query :</p>
<p>" site:pastebin.com combo email pass "</p>
<pre><code class="lang-ruby">page = HTTParty.get('http://www.google.com/search?q=site%3Apastebin.com%20combo%20email%20pass')

page_parsed = Nokogiri::HTML(page)  #Get a "code readable page"
</code></pre>
<p>More informations on google operator here -&gt; <a href="http://www.googleguide.com/advanced_operators_reference.html" rel="nofollow noopener">Google operators</a></p>
<h2>Get all <a href="http://Pastebin.com" rel="nofollow noopener">Pastebin.com</a> links</h2>
<p>Just use CSS selectors on our parsed page to get all links.</p>
<pre><code class="lang-ruby">link_array = []

page_parsed.css('.r a').map do |a|    #for each links (CSS selectors)
  link_array.push(a["href"][7..-1])   #Get links in an array
end
</code></pre>
<p>#<span class="hashtag">#Create</span> Threads :<br>
We are going to create threads in order to get quicker results by creating an array of threads.<br>
For each links we got we create a thread and put it on the array.</p>
<pre><code class="lang-ruby">threads = []
link_array.each do |item|
  threads &lt;&lt; Thread.new {explore(item)} #Explore funtion in the last part ;)
end

threads.each { |t| t.join }
</code></pre>
<p>#<span class="hashtag">#Get</span> Results  \o/ !</p>
<p>Each thread will :</p>
<ul>
<li>Get the page and parse it</li>
<li>Get the raw data of pastebin</li>
<li>Compare data to regex</li>
<li>Write result in a file</li>
</ul>
<pre><code class="lang-ruby">def explore(link)
  reg = /.*@[a-z]*\.[a-z]{2,3}:\S*/ #email:pass regex
  vide = "" #Buffer variable
   page = HTTParty.get(link)
   page_parsed = Nokogiri::HTML(page)
   page_parsed.css('#paste_code').map do |a|   #For each line of raw data 
    
     a.text.scan(reg).each do |combo|
       vide += combo + "\n"    #if data match regex, write into buffer
     end
     File.open('combo.txt', 'w') { |file| file.write(vide) }  #write buffer to a file

   end
</code></pre>
<p>That’s it, you just create your own Pastebin grabber ! Here come the full code :</p>
<pre><code class="lang-ruby">require 'HTTParty'
require 'Nokogiri'


def explore(link)
  reg = /.*@[a-z]*\.[a-z]{2,3}:\S*/
  vide = ""
   page = HTTParty.get(link)
   page_parsed = Nokogiri::HTML(page)
   page_parsed.css('#paste_code').map do |a|
    
     a.text.scan(reg).each do |combo|
       vide += combo + "\n"
     end
     File.open('combo.txt', 'w') { |file| file.write(vide) }

   end

end


page = HTTParty.get('http://www.google.com/search?q=site%3Apastebin.com%20combo%20email%20pass')

page_parsed = Nokogiri::HTML(page)

link_array = []

page_parsed.css('.r a').map do |a|
  link_array.push(a["href"][7..-1])
end

threads = []
link_array.each do |item|
  threads &lt;&lt; Thread.new {explore(item)}
end

threads.each { |t| t.join }
</code></pre>
<p>(This code actually get 14 000 combos, and it just explore the 1st page of google results)</p>
<p><strong>Thank for reading ! Please comments and feel free to improve the code <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></strong></p>
          <p><a href="https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652/1</link>
        <pubDate>Fri, 24 Jun 2016 15:12:37 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-652-1</guid>
        <source url="https://0x00sec.org/t/pastebin-grabber-email-pass-tutorial/652.rss">Pastebin grabber (email:pass) Tutorial</source>
      </item>
  </channel>
</rss>
