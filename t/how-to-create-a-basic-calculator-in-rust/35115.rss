<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to create a basic calculator in Rust</title>
    <link>https://0x00sec.org/t/how-to-create-a-basic-calculator-in-rust/35115</link>
    <description>Hello all, as some people may know, their is a lot of ways to create something in rust, just like any other programming language. However, as someone who is learning rust, I&#39;ve noticed there is a lack of resources, and is why I&#39;m posting it.

Requirements:
 - rust version 1.x and later.
 - VS code with the rust analyzer extension
 - Terminal for ease of use.

you can create your project directory using:

&gt; $ cargo new calc

After running their should be a folder named calc and inside a src folder containing the main.rs script. You can open it up in your IDE
of choice and it should look like this.

![calc_0|690x371, 100%](upload://wAa4KlRBbfLkAWNaS1TYuJkArJK.png)

Now that we have that open we can make the following changes to the file.

![calc_1|690x371](upload://2ivaY1aUgFBLyxR9ZpFBF3BGPF4.png)

You may notice we added std::io; to the script, this allows us to gather user input. We also added println!(); which we are going to use to tell the user what they can enter to get there operator. next we are going to add the following lines to the program. The following should all be in ``` Fn main()```.

 ```
// create user input line

let mut input_line: String = String::new(); // the input line
io::stdin()
     .read_line(&amp;mut input_line) // read the line 
     .expext(&quot;Failed to read line&quot;); // because it does happen
let x: i32 = input_line.trim().parse().expect(&quot;Not an integer&quot;); // store as variable

```

You might be asking yourself &quot;*does it really take all that code to just gather input?*&quot; Yes and that&#39;s because Rust is a low level language. You are probably wondering what ```i32``` is, ```i32``` is a 32Bit signed integer type, it&#39;s what tells rust how to use the variable.

```
// continuation of above
// create the if statements for the selected action
if x == 1 {
        {   
            println!(&quot;first number&quot;);
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect(&quot;Failed to read line&quot;);
            let num1: f32 = input_line.trim().parse().expect(&quot;Input is not an integer&quot;);

            println!(&quot;second number&quot;);
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect(&quot;Failed to read line&quot;);
            let num2: f32 = input_line.trim().parse().expect(&quot;Input is not an integer&quot;);
            
            let ans: f32 = num1 + num2; // calculate the answer as a floating point number
            println!(&quot;Answer {}&quot;, ans); // print out the answer
        }
}

if x == 2 {
        {   
            println!(&quot;first number&quot;);
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect(&quot;Failed to read line&quot;);
            let num1: f32 = input_line.trim().parse().expect(&quot;Input is not an integer&quot;);

            println!(&quot;second number&quot;);
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect(&quot;Failed to read line&quot;);
            let num2: f32 = input_line.trim().parse().expect(&quot;Input is not an integer&quot;);
            
            let ans: f32 = num1 - num2; // calculate the answer as a floating point number
            println!(&quot;Answer {}&quot;, ans); // print out the answer
        }
    }

    if x == 3 {
        {   
            println!(&quot;first number&quot;);
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect(&quot;Failed to read line&quot;);
            let num1: f32 = input_line.trim().parse().expect(&quot;Input is not an integer&quot;);

            println!(&quot;second number&quot;);
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect(&quot;Failed to read line&quot;);
            let num2: f32 = input_line.trim().parse().expect(&quot;Input is not an integer&quot;);
            
            let ans: f32 = num1 * num2; // calculate the answer as a floating point number
            println!(&quot;Answer {}&quot;, ans); // print out the answer
        }
    }

    if x == 4 {
        {   
            println!(&quot;first number&quot;);
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect(&quot;Failed to read line&quot;);
            let num1: f32 = input_line.trim().parse().expect(&quot;Input is not an integer&quot;);

            println!(&quot;second number&quot;);
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect(&quot;Failed to read line&quot;);
            let num2: f32 = input_line.trim().parse().expect(&quot;Input is not an integer&quot;);
            
            let ans: f32 = num1 / num2; // calculate the answer as a floating point number
            println!(&quot;Answer {}&quot;, ans); // print out the answer
        }
    }

}
```
Now we are pretty much done writing code, And I should explain how ownership works. ownership is like global and local scope, but without functions. To use ownership in rust you do the following.
```
// example of ownership
{
   println(&quot;hello world&quot;);
}
```
we also changed i32 over to f32 in case if our user needs to calculate something between two floating point numbers. With all that said I&#39;m pretty much done, and feel free to ask questions.</description>
    
    <lastBuildDate>Fri, 19 May 2023 02:06:59 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://0x00sec.org/t/how-to-create-a-basic-calculator-in-rust/35115.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to create a basic calculator in Rust</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 121 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/how-to-create-a-basic-calculator-in-rust/35115/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-create-a-basic-calculator-in-rust/35115/2</link>
        <pubDate>Sun, 17 Sep 2023 18:07:56 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-35115-2</guid>
        <source url="https://0x00sec.org/t/how-to-create-a-basic-calculator-in-rust/35115.rss">How to create a basic calculator in Rust</source>
      </item>
      <item>
        <title>How to create a basic calculator in Rust</title>
        <dc:creator><![CDATA[TheAnalizer]]></dc:creator>
        <description><![CDATA[
            <p>Hello all, as some people may know, their is a lot of ways to create something in rust, just like any other programming language. However, as someone who is learning rust, I’ve noticed there is a lack of resources, and is why I’m posting it.</p>
<p>Requirements:</p>
<ul>
<li>rust version 1.x and later.</li>
<li>VS code with the rust analyzer extension</li>
<li>Terminal for ease of use.</li>
</ul>
<p>you can create your project directory using:</p>
<blockquote>
<p>$ cargo new calc</p>
</blockquote>
<p>After running their should be a folder named calc and inside a src folder containing the main.rs script. You can open it up in your IDE<br>
of choice and it should look like this.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/e/4/e45c0c73fe3580b071fb5bca61e4129ca44ec180.png" data-download-href="/uploads/short-url/wAa4KlRBbfLkAWNaS1TYuJkArJK.png?dl=1" title="calc_0" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/e/4/e45c0c73fe3580b071fb5bca61e4129ca44ec180_2_690x371.png" alt="calc_0" data-base62-sha1="wAa4KlRBbfLkAWNaS1TYuJkArJK" width="690" height="371" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/e/4/e45c0c73fe3580b071fb5bca61e4129ca44ec180_2_690x371.png, https://0x00sec.s3.amazonaws.com/optimized/3X/e/4/e45c0c73fe3580b071fb5bca61e4129ca44ec180_2_1035x556.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/e/4/e45c0c73fe3580b071fb5bca61e4129ca44ec180_2_1380x742.png 2x" data-dominant-color="252525"></a></div><p></p>
<p>Now that we have that open we can make the following changes to the file.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://0x00sec.s3.amazonaws.com/original/3X/1/0/101bc9f34e31146578e5f747dab6b55257d1e51e.png" data-download-href="/uploads/short-url/2ivaY1aUgFBLyxR9ZpFBF3BGPF4.png?dl=1" title="calc_1" rel="noopener nofollow ugc"><img src="https://0x00sec.s3.amazonaws.com/optimized/3X/1/0/101bc9f34e31146578e5f747dab6b55257d1e51e_2_690x371.png" alt="calc_1" data-base62-sha1="2ivaY1aUgFBLyxR9ZpFBF3BGPF4" width="690" height="371" srcset="https://0x00sec.s3.amazonaws.com/optimized/3X/1/0/101bc9f34e31146578e5f747dab6b55257d1e51e_2_690x371.png, https://0x00sec.s3.amazonaws.com/optimized/3X/1/0/101bc9f34e31146578e5f747dab6b55257d1e51e_2_1035x556.png 1.5x, https://0x00sec.s3.amazonaws.com/optimized/3X/1/0/101bc9f34e31146578e5f747dab6b55257d1e51e_2_1380x742.png 2x" data-dominant-color="252525"></a></div><p></p>
<p>You may notice we added std::io; to the script, this allows us to gather user input. We also added println!(); which we are going to use to tell the user what they can enter to get there operator. next we are going to add the following lines to the program. The following should all be in <code> Fn main()</code>.</p>
<pre><code class="lang-auto">// create user input line

let mut input_line: String = String::new(); // the input line
io::stdin()
    .read_line(&amp;mut input_line) // read the line 
    .expext("Failed to read line"); // because it does happen
let x: i32 = input_line.trim().parse().expect("Not an integer"); // store as variable

</code></pre>
<p>You might be asking yourself “<em>does it really take all that code to just gather input?</em>” Yes and that’s because Rust is a low level language. You are probably wondering what <code>i32</code> is, <code>i32</code> is a 32Bit signed integer type, it’s what tells rust how to use the variable.</p>
<pre><code class="lang-auto">// continuation of above
// create the if statements for the selected action
if x == 1 {
        {   
            println!("first number");
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect("Failed to read line");
            let num1: f32 = input_line.trim().parse().expect("Input is not an integer");

            println!("second number");
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect("Failed to read line");
            let num2: f32 = input_line.trim().parse().expect("Input is not an integer");
            
            let ans: f32 = num1 + num2; // calculate the answer as a floating point number
            println!("Answer {}", ans); // print out the answer
        }
}

if x == 2 {
        {   
            println!("first number");
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect("Failed to read line");
            let num1: f32 = input_line.trim().parse().expect("Input is not an integer");

            println!("second number");
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect("Failed to read line");
            let num2: f32 = input_line.trim().parse().expect("Input is not an integer");
            
            let ans: f32 = num1 - num2; // calculate the answer as a floating point number
            println!("Answer {}", ans); // print out the answer
        }
    }

    if x == 3 {
        {   
            println!("first number");
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect("Failed to read line");
            let num1: f32 = input_line.trim().parse().expect("Input is not an integer");

            println!("second number");
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect("Failed to read line");
            let num2: f32 = input_line.trim().parse().expect("Input is not an integer");
            
            let ans: f32 = num1 * num2; // calculate the answer as a floating point number
            println!("Answer {}", ans); // print out the answer
        }
    }

    if x == 4 {
        {   
            println!("first number");
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect("Failed to read line");
            let num1: f32 = input_line.trim().parse().expect("Input is not an integer");

            println!("second number");
            let mut input_line: String = String::new();
            io::stdin()
                .read_line(&amp;mut input_line)
                .expect("Failed to read line");
            let num2: f32 = input_line.trim().parse().expect("Input is not an integer");
            
            let ans: f32 = num1 / num2; // calculate the answer as a floating point number
            println!("Answer {}", ans); // print out the answer
        }
    }

}
</code></pre>
<p>Now we are pretty much done writing code, And I should explain how ownership works. ownership is like global and local scope, but without functions. To use ownership in rust you do the following.</p>
<pre><code class="lang-auto">// example of ownership
{
   println("hello world");
}
</code></pre>
<p>we also changed i32 over to f32 in case if our user needs to calculate something between two floating point numbers. With all that said I’m pretty much done, and feel free to ask questions.</p>
          <p><a href="https://0x00sec.org/t/how-to-create-a-basic-calculator-in-rust/35115/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/how-to-create-a-basic-calculator-in-rust/35115/1</link>
        <pubDate>Fri, 19 May 2023 02:06:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-35115-1</guid>
        <source url="https://0x00sec.org/t/how-to-create-a-basic-calculator-in-rust/35115.rss">How to create a basic calculator in Rust</source>
      </item>
  </channel>
</rss>
