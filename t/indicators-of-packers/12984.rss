<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Indicators of Packers</title>
    <link>https://0x00sec.org/t/indicators-of-packers/12984</link>
    <description>Hello 0x00sec fellas!
I want to start by saying that I love what you&#39;re doing here. I&#39;d like to thank all of you who contribute to this community even if a bit. Thank you all :two_hearts: 

Anyway enough with the emotions :smiley: Today I&#39;m here with a compiled list of packer/crypter indicators that I can think of. Using these you may be able to detect if a packer/crypter is applied to your subject of analysis. Please feel free to make additions!

Lets Start.

**1. Packer Signatures**
Well obviously first thing to look for is the presence of any signatures related to already known packers or crypters (I&#39;ll only use the term &quot;packer&quot; from now on). You could use PEiD, yarascan or any other tool really. Here is an example;
![resim|628x348](upload://e2ZCTKLDPAmDzdP8d4TTPvl5XUz.png) 

You see that PEiD found a signature match of UPX packer. The thing with signatures is that there can be false positives. Maybe author has made a loose definition while creating the signature, or maybe malware developer simply false flagged the binary. Long story short, don&#39;t rely on them. Actually don&#39;t rely on any single or combination of indicators. They are what they sound like, *indicators* not *facts*.

**2. Abnormal Entry Point / Section Names**
Some packers create new sections to store the packed executable or stub code then arbitrarily name those sections. Regular section names for PE files go like; text, bss, data, rsrc, rodata. Sometimes compilers create some additional sections in order to store things like debug symbols etc. Whatever I see other then these names instantly raise my suspicion.
![resim|487x174](upload://75B28g0YfX08WN2UW0a77xcGnaB.png) 

**3. Section or Memory Regions with RWE Permissions**
This is another obvious one. Sometimes a packer allocates a section/memory region in order to store the *unpacked* code. So this region would need to have both writable and executable permissions; which is weird because compilers don&#39;t do that by default cuz of security reasons. This is an anomaly. It may occur in runtime so you may wish to trace API calls related to memory permissions.
![resim|690x75](upload://yzd25zyGG3f4OMDJixZGwj7Cwaw.png) 

**4. Abnormal Difference Between Section Vsize and Psize**
Physical size is the space occupied by a section on the *disk* while it&#39;s not running. And virtual size is the size on *memory* while it&#39;s running. Abnormal differences between these two values may indicate the presence of a packer. Because while not running the code will be compressed, hence small in size. When it begins to run though malware will try to decompress the code so its size will increase abnormally.
Example;
![resim|690x62](upload://odGmPF9YTl2C0K5lDlT1Jd6SvO5.png) 

You can also see that this example possess other features we have mentioned earlier as well.

**5. Data Sections Are Too Large**
We generally divide sections into one of two types; code section or data section. As the name suggests code sections are the ones which contains code, and data sections are the ones which contains *drumroll* data! For example when you define a variable in a program it gets stored in one of the data sections depending on how you define it (bss, data, rodata, rsrc...). Naturally we expect a program to contain more code than it contains data. Unless it&#39;s designed to print out a play of Shakespeare for some reason. Whenever I see a data section that is too large I suspect that it might contain an executable file inside it.
![resim|690x147](upload://kAHputhEBHl58KSUVmDPRcRxs4H.png) 

**6. Too Few Imported Functions**
When a file is packed normally you would only see the functions used by its unpacker stub code. Most probably there will be stuff related to memory allocation, mem permissions, module load, resources operations.. So if it seems like the program imports abnormally few functions you could suspect of a packer.
![resim|690x475](upload://dwhpT2lSCnxcAuJotFOcTB9y2nk.png) 

**7. Section with High Entropy**
Shannon&#39;s entropy is an algorithm to calculate frequency of recurrences in a given data. It calculates a score over eight. Lesser the recurrences, higher the entropy (score). So if you see a section or file which&#39;s entropy score is close to or above 7.0 you could suspect that the data inside it is encrypted, hence might be packed. Because increasing entropy is what any decent encryption algorithm is supposed to do.
![resim|690x272](upload://ryMNCMrQ1MVjdF5XF71iuelhme7.png) 

That&#39;s all from me for now. Please feel free to add :slight_smile:</description>
    
    <lastBuildDate>Tue, 07 May 2019 19:28:41 +0000</lastBuildDate>
    <category>Malware</category>
    <atom:link href="https://0x00sec.org/t/indicators-of-packers/12984.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Indicators of Packers</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/indicators-of-packers/12984/14">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/indicators-of-packers/12984/14</link>
        <pubDate>Mon, 13 May 2019 22:55:23 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12984-14</guid>
        <source url="https://0x00sec.org/t/indicators-of-packers/12984.rss">Indicators of Packers</source>
      </item>
      <item>
        <title>Indicators of Packers</title>
        <dc:creator><![CDATA[5P1D3R]]></dc:creator>
        <description><![CDATA[
            <p>Pretty easy unpack UPX and simple packers. There are tools that do this. VMProtect is paid for crypter and no easy to reeverse. AV will flag packers so not good for red team</p>
          <p><a href="https://0x00sec.org/t/indicators-of-packers/12984/13">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/indicators-of-packers/12984/13</link>
        <pubDate>Tue, 07 May 2019 19:28:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12984-13</guid>
        <source url="https://0x00sec.org/t/indicators-of-packers/12984.rss">Indicators of Packers</source>
      </item>
      <item>
        <title>Indicators of Packers</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>IMHO AV vendors should not be increasing the detection score if an application is packed using classic UPX because it can be trivially unpacked. About malware developers using UPX, I don’t really see any reason for it besides compression. I’ve only ever seen or heard of this in skiddy skid malware builders such as those public .NET RATs, etc. If I were developing (new) malware, I should not need to use a packer however, if I reuse something that is already known and has signatures, I would develop my own packer rather than use something like UPX.</p>
          <p><a href="https://0x00sec.org/t/indicators-of-packers/12984/12">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/indicators-of-packers/12984/12</link>
        <pubDate>Mon, 06 May 2019 08:53:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12984-12</guid>
        <source url="https://0x00sec.org/t/indicators-of-packers/12984.rss">Indicators of Packers</source>
      </item>
      <item>
        <title>Indicators of Packers</title>
        <dc:creator><![CDATA[Arkwed]]></dc:creator>
        <description><![CDATA[
            <p>For some AV vendors UPX is an indicator of malware(increase the detection ratio). I don’t fully understand why malware developers keep using it. Any idea?</p>
          <p><a href="https://0x00sec.org/t/indicators-of-packers/12984/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/indicators-of-packers/12984/11</link>
        <pubDate>Mon, 06 May 2019 00:22:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12984-11</guid>
        <source url="https://0x00sec.org/t/indicators-of-packers/12984.rss">Indicators of Packers</source>
      </item>
      <item>
        <title>Indicators of Packers</title>
        <dc:creator><![CDATA[c0wm1lk]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for both your well written replies, I was able to learn a lot from them!</p>
          <p><a href="https://0x00sec.org/t/indicators-of-packers/12984/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/indicators-of-packers/12984/10</link>
        <pubDate>Wed, 24 Apr 2019 06:11:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12984-10</guid>
        <source url="https://0x00sec.org/t/indicators-of-packers/12984.rss">Indicators of Packers</source>
      </item>
      <item>
        <title>Indicators of Packers</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>There are many different types of packers out there. The ones that are concerned with malware and are probably the most common ones come with both encryption and compression. These are labelled “run-time” (as opposed to “scan-time”) packers meaning that they will deobfuscate the original code in memory and execute it without touching disk. The reason this is important is because if the deobfuscated malware is dropped to the disk (“scan-time”), it may trigger an anti-virus to scan its exposed code.</p>
<p>In order to unpack in-memory, the obfuscated malware code is contained within what’s known as the “stub” which is responsible for the recovery and initialisation of the original malware. Essentially, the stub is its own functional code - either shellcode or full PE file - basically a manual executable linker.</p>
<p>Using UPX as an example, UPX compresses the original binary and generates a new PE file. This PE file has at least two main sections, <code>.upx0</code> and <code>.upx1</code>. <code>upx0</code> is actually empty in terms of raw “disk” size but its <em>virtual</em> size (in memory) is as big as the original binary’s size. <code>upx1</code> contains both the compressed binary as well as the assembly “stub”. What the stub does is it will locate the compressed code and decompress it back into the <code>upx0</code> in memory (remember the <em>virtual</em> size is big enough to contain the original binary). It will then initialise the original binary by applying relocations(?), rebuilding the import table functions, and then call the <code>.tls</code> functions if they exist. When this is done, it will jump execution to the original binary’s entry point from where it will continue normal execution like nothing happened.</p>
<aside class="quote no-group" data-username="c0wm1lk" data-post="7" data-topic="12984">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/c0wm1lk/40/7625_2.png" class="avatar"> c0wm1lk:</div>
<blockquote>
<p>If they unpack all their instructions right to memory wouldn’t you just be able to take a copy of the memory and inspect it that way?</p>
</blockquote>
</aside>
<p>Most of the times with the average packer, you can do this. If we are speaking about protectors, it’s a different story. Parts of the original bytes may be intentionally misplaced or replaced with equivalent code and spread across memory which will provide the same functionality, but results in the original code being fragmented. Some examples of this include API redirection or byte stealing. Protectors like VMProtect may virtualise the code which means that the original code is unrecoverable.</p>
<p>So if you want to get into building these packers, you may need to understand the executable file formats, how they interact with memory, and the Windows operating system.</p>
          <p><a href="https://0x00sec.org/t/indicators-of-packers/12984/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/indicators-of-packers/12984/9</link>
        <pubDate>Tue, 23 Apr 2019 12:20:17 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12984-9</guid>
        <source url="https://0x00sec.org/t/indicators-of-packers/12984.rss">Indicators of Packers</source>
      </item>
      <item>
        <title>Indicators of Packers</title>
        <dc:creator><![CDATA[hunter]]></dc:creator>
        <description><![CDATA[
            <p>the name “packer” is used too broadly nowadays. when they were first introduced their only purpose was to shrink an executable file by using data compression algorithms (like the ones used in winrar, 7zip etc). in those times most antivirus software deployed only static signature based detecion methods. these “packers” come to corrupt the “signatures” on an executable while compressing it and hence a packed executable could evade AV detection more easily. little after that this behavior was noticed and these “application packers” got widely adopted by malware developers. this is how this innocent tool of binary shrinking got weaponized. then some malware developers rolled out their own packers and also introduced encryption features into these “packers”, in order to better evade detection. then the term “packer” evolved into a different and broader meaning than it was before; covering both encryption and compression employment with the purpose of AV evasion. Now they may also contain anti forensics and analysis methods as well. But this is where the term originated.</p>
          <p><a href="https://0x00sec.org/t/indicators-of-packers/12984/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/indicators-of-packers/12984/8</link>
        <pubDate>Mon, 22 Apr 2019 21:34:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12984-8</guid>
        <source url="https://0x00sec.org/t/indicators-of-packers/12984.rss">Indicators of Packers</source>
      </item>
      <item>
        <title>Indicators of Packers</title>
        <dc:creator><![CDATA[c0wm1lk]]></dc:creator>
        <description><![CDATA[
            <p>Hey thanks for your reply! I’m still not 100% sure on how packers work but from what I understand packers are simply programs that have their instructions encoded in some way. (Encrypted file / zipped file / anti RE crap / …). Correct?</p>
<p>And packed files need to unpack their code at some point, does this mean they just save it to memory or do they unpack instructions as they go (and what performance impact would that have)?<br>
If they unpack all their instructions right to memory wouldn’t you just be able to take a copy of the memory and inspect it that way?</p>
          <p><a href="https://0x00sec.org/t/indicators-of-packers/12984/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/indicators-of-packers/12984/7</link>
        <pubDate>Mon, 22 Apr 2019 21:08:49 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12984-7</guid>
        <source url="https://0x00sec.org/t/indicators-of-packers/12984.rss">Indicators of Packers</source>
      </item>
      <item>
        <title>Indicators of Packers</title>
        <dc:creator><![CDATA[hunter]]></dc:creator>
        <description><![CDATA[
            <p>I’m glad that you enjoyed my topic. I will try to answer your questions as long as my knowledge let me so. Please free feel to add/correct any missing or false information.</p>
<aside class="quote no-group" data-username="c0wm1lk" data-post="5" data-topic="12984">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/c0wm1lk/40/7625_2.png" class="avatar"> c0wm1lk:</div>
<blockquote>
<p>How easy is it to unpack a packed binary?</p>
</blockquote>
</aside>
<p>it depends. is the packer a known and widely used one? for example it’s fairly simple to unpack an upx packed executable. if a custom packer has been applied, sometimes simple unpacking tricks work; like running the exe a little bit and looking for RWE memory regions, PE signature etc. then dumping the region. other times you may need to reverse engineer the whole thing.</p>
<aside class="quote no-group" data-username="c0wm1lk" data-post="5" data-topic="12984">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/c0wm1lk/40/7625_2.png" class="avatar"> c0wm1lk:</div>
<blockquote>
<p>How long does it take for a packer to get reverse engineer’d to allow to unpack packed binaries?</p>
</blockquote>
</aside>
<p>depends on the encryption/packing algorithm used, anti analysis measures if there are any and your reverse engineering skills obviously.</p>
<aside class="quote no-group" data-username="c0wm1lk" data-post="5" data-topic="12984">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://0x00sec.org/user_avatar/0x00sec.org/c0wm1lk/40/7625_2.png" class="avatar"> c0wm1lk:</div>
<blockquote>
<p>Is VMProtect a packer? Can you unpack binaries protected with VMProtect?</p>
</blockquote>
</aside>
<p>it is a “protector”. meaning it’s a crypting + anti analysis + anti forensics + maybe virtualizing code etc. whatever needs to protect the code from piracy (remember, purpose of a packer is shrinking the file not protecting it). as to my information there are some unpackers for some versions of vmprotect. newest versions employ code virtualization and a bunch of anti forensics/analysis methods as well. it is not impossible ofc but it would be fairly time consuming i believe.</p>
          <p><a href="https://0x00sec.org/t/indicators-of-packers/12984/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/indicators-of-packers/12984/6</link>
        <pubDate>Mon, 22 Apr 2019 20:53:01 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12984-6</guid>
        <source url="https://0x00sec.org/t/indicators-of-packers/12984.rss">Indicators of Packers</source>
      </item>
      <item>
        <title>Indicators of Packers</title>
        <dc:creator><![CDATA[c0wm1lk]]></dc:creator>
        <description><![CDATA[
            <p>I heard of these types of programs before but I never knew they were called packers, that will aid my future research into these topics <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Since I’m a complete n00b at packers I hope you don’t mind if I ask a few questions.</p>
<ul>
<li>How easy is it to unpack a packed binary?</li>
<li>How long does it take for a packer to get reverse engineer’d to allow to unpack packed binaries?</li>
<li>Is VMProtect a packer? Can you unpack binaries protected with VMProtect?</li>
</ul>
<p>Also what are your opinions on packers? I’d love to know more about this topic <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/indicators-of-packers/12984/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/indicators-of-packers/12984/5</link>
        <pubDate>Mon, 22 Apr 2019 20:37:50 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12984-5</guid>
        <source url="https://0x00sec.org/t/indicators-of-packers/12984.rss">Indicators of Packers</source>
      </item>
      <item>
        <title>Indicators of Packers</title>
        <dc:creator><![CDATA[hunter]]></dc:creator>
        <description><![CDATA[
            <p>i am well aware of the tool <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> it helps to know what to look for and where to find it from an investigator perspective</p>
          <p><a href="https://0x00sec.org/t/indicators-of-packers/12984/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/indicators-of-packers/12984/3</link>
        <pubDate>Mon, 15 Apr 2019 22:06:29 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12984-3</guid>
        <source url="https://0x00sec.org/t/indicators-of-packers/12984.rss">Indicators of Packers</source>
      </item>
      <item>
        <title>Indicators of Packers</title>
        <dc:creator><![CDATA[dtm]]></dc:creator>
        <description><![CDATA[
            <p>pestudio</p>
<p>Thank me later. <img src="https://0x00sec.org/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://0x00sec.org/t/indicators-of-packers/12984/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/indicators-of-packers/12984/2</link>
        <pubDate>Sun, 14 Apr 2019 02:41:20 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12984-2</guid>
        <source url="https://0x00sec.org/t/indicators-of-packers/12984.rss">Indicators of Packers</source>
      </item>
      <item>
        <title>Indicators of Packers</title>
        <dc:creator><![CDATA[hunter]]></dc:creator>
        <description><![CDATA[
            <p>Hello 0x00sec fellas!<br>
I want to start by saying that I love what you’re doing here. I’d like to thank all of you who contribute to this community even if a bit. Thank you all <img src="https://0x00sec.org/images/emoji/twitter/two_hearts.png?v=9" title=":two_hearts:" class="emoji" alt=":two_hearts:"></p>
<p>Anyway enough with the emotions <img src="https://0x00sec.org/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"> Today I’m here with a compiled list of packer/crypter indicators that I can think of. Using these you may be able to detect if a packer/crypter is applied to your subject of analysis. Please feel free to make additions!</p>
<p>Lets Start.</p>
<p><strong>1. Packer Signatures</strong><br>
Well obviously first thing to look for is the presence of any signatures related to already known packers or crypters (I’ll only use the term “packer” from now on). You could use PEiD, yarascan or any other tool really. Here is an example;<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/6/627513974f7a39d9410fa1ce7d24c26bd80f5827.png" alt="resim" data-base62-sha1="e2ZCTKLDPAmDzdP8d4TTPvl5XUz" width="628" height="348"></p>
<p>You see that PEiD found a signature match of UPX packer. The thing with signatures is that there can be false positives. Maybe author has made a loose definition while creating the signature, or maybe malware developer simply false flagged the binary. Long story short, don’t rely on them. Actually don’t rely on any single or combination of indicators. They are what they sound like, <em>indicators</em> not <em>facts</em>.</p>
<p><strong>2. Abnormal Entry Point / Section Names</strong><br>
Some packers create new sections to store the packed executable or stub code then arbitrarily name those sections. Regular section names for PE files go like; text, bss, data, rsrc, rodata. Sometimes compilers create some additional sections in order to store things like debug symbols etc. Whatever I see other then these names instantly raise my suspicion.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/3/31b131e5f25ebc868f97789ef8e1c47f0777b97d.png" alt="resim" data-base62-sha1="75B28g0YfX08WN2UW0a77xcGnaB" width="487" height="174"></p>
<p><strong>3. Section or Memory Regions with RWE Permissions</strong><br>
This is another obvious one. Sometimes a packer allocates a section/memory region in order to store the <em>unpacked</em> code. So this region would need to have both writable and executable permissions; which is weird because compilers don’t do that by default cuz of security reasons. This is an anomaly. It may occur in runtime so you may wish to trace API calls related to memory permissions.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/f/f244d6a990c8c135539b28268a94baea1fd233ec.png" alt="resim" data-base62-sha1="yzd25zyGG3f4OMDJixZGwj7Cwaw" width="690" height="75"></p>
<p><strong>4. Abnormal Difference Between Section Vsize and Psize</strong><br>
Physical size is the space occupied by a section on the <em>disk</em> while it’s not running. And virtual size is the size on <em>memory</em> while it’s running. Abnormal differences between these two values may indicate the presence of a packer. Because while not running the code will be compressed, hence small in size. When it begins to run though malware will try to decompress the code so its size will increase abnormally.<br>
Example;<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/a/a9c025f51e2bc6b295745719c87e79c0cfa7ec6d.png" alt="resim" data-base62-sha1="odGmPF9YTl2C0K5lDlT1Jd6SvO5" width="690" height="62"></p>
<p>You can also see that this example possess other features we have mentioned earlier as well.</p>
<p><strong>5. Data Sections Are Too Large</strong><br>
We generally divide sections into one of two types; code section or data section. As the name suggests code sections are the ones which contains code, and data sections are the ones which contains <em>drumroll</em> data! For example when you define a variable in a program it gets stored in one of the data sections depending on how you define it (bss, data, rodata, rsrc…). Naturally we expect a program to contain more code than it contains data. Unless it’s designed to print out a play of Shakespeare for some reason. Whenever I see a data section that is too large I suspect that it might contain an executable file inside it.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/9/90518512e8d4295d5d278f631b0de621aea2841b.png" alt="resim" data-base62-sha1="kAHputhEBHl58KSUVmDPRcRxs4H" width="690" height="147"></p>
<p><strong>6. Too Few Imported Functions</strong><br>
When a file is packed normally you would only see the functions used by its unpacker stub code. Most probably there will be stuff related to memory allocation, mem permissions, module load, resources operations… So if it seems like the program imports abnormally few functions you could suspect of a packer.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/5/5ec26a9c6b0aaea08d1fcddb5f7837048a4cbc4e.png" alt="resim" data-base62-sha1="dwhpT2lSCnxcAuJotFOcTB9y2nk" width="690" height="475"></p>
<p><strong>7. Section with High Entropy</strong><br>
Shannon’s entropy is an algorithm to calculate frequency of recurrences in a given data. It calculates a score over eight. Lesser the recurrences, higher the entropy (score). So if you see a section or file which’s entropy score is close to or above 7.0 you could suspect that the data inside it is encrypted, hence might be packed. Because increasing entropy is what any decent encryption algorithm is supposed to do.<br>
<img src="https://0x00sec.s3.amazonaws.com/original/2X/c/c129605e66140612aae70fcc2a0cd962b4f0bd4b.png" alt="resim" data-base62-sha1="ryMNCMrQ1MVjdF5XF71iuelhme7" width="690" height="272"></p>
<p>That’s all from me for now. Please feel free to add <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://0x00sec.org/t/indicators-of-packers/12984/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/indicators-of-packers/12984/1</link>
        <pubDate>Sat, 13 Apr 2019 22:55:21 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-12984-1</guid>
        <source url="https://0x00sec.org/t/indicators-of-packers/12984.rss">Indicators of Packers</source>
      </item>
  </channel>
</rss>
