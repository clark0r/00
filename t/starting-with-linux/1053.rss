<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Starting with Linux</title>
    <link>https://0x00sec.org/t/starting-with-linux/1053</link>
    <description>Hey everyone! I know it&#39;s been quite a while but here I am.

Today I bring you a Linux Tutorial (I guess you could call it that). As most of you know, OTW had a Linux Series entitled &#39;Linux Basics for the Aspiring Hacker&#39; back in NB and is now reposting it on his own website [Hackers Arise](http://www.hackers-arise.com/).

It was with this tutorials (and a few others) that I started learning Linux, and I thought I should share my own notes regarding this series. Basicaly I wrote a text document (which I have now converted to a .pdf file) that&#39;s is pretty similar to OTW&#39;s original article, but with a few chages to make it more simple and accessible, at least for me. 

Here&#39;s the link: 

https://mega.nz/#!BIs0TAqI!QOJ_BoxwuB-A1m9_gx50aPxzX5Kt_xJ7YzRWOvVoXbY

As suggested, here&#39;s goes the raw text. Hope you enjoy:

---
#**_Linux Basics_**

**/ Opening a Terminal &gt; Shortcut: Ctrl + Alt + T**

Most Terminals default to open a shell. A shell is simply a command line environment that enables us to run commands on the underlying operating systems and write scripts. Their are many different shell environments in Linux, but the most popular is the **BASH** shell or **B**ourne **A**gain **Sh**ell.

**/ File System &gt;**  Unlike Windows file system, Linux systems are not limited by the physical drive. The Linux file system has at the top of its file structure the **root** or **/**. This does not represent the physical drive, but simply the top of the logical file structure. 

Notice in this diagram of the Linux file system above that at the very top of the file system is the / or root of the file system. Here, root simply is the very base of the file structure. As a beginner, probably the most important sub-directories under **/** are:

1. **/root** &gt; this represents the home directory of the  super-user
2. **/etc**   &gt; where the configuration files reside in Linux
3. **/home** &gt; home directory of a user
4. **/mnt**   &gt; where other file systems are attached or mounted to the filesystem
5. **/bin**   &gt; where the binaries or executables in Windows language reside
6. **/lib**   &gt; directory where the libraries reside.

**/ Getting started with the command line...**

`pwd` &gt; or `p`resent `w`orking `d`irectory, returns where you are in the directory           structure.

`whoami` &gt; outputs the current logged in user

`cd` &gt; or change directory. Crucial command to navigate around the filesystem.

    cd &lt;name_of_directory&gt; - moves to the desired     directory; 
    cd .. - moves up one level in the file structure 

`ls` &gt; or `l`i`s`t, lists the contents of a directory (for a complete list of the contents,  type `ls -alt`)

`-h` &gt; or` --help`. Nearly every command has a help file. These help files provide a      cursory help screen to assist your understanding of the command, utility or     application. 

    &lt;program_name&gt; -h or &lt;program_name&gt; --help

`man` &gt; In addition to the help switch available for most commands and applications, you can find more information about a particular application or command by going to its `man`ual page. Nearly every Linux distribution maintains a manual for all utilities, commands and applications. You can view the manual by simply typing `man` before the command, utility or application such as:

    man &lt;program_name&gt;

With man, Linux opens the manual with the  `more` commands, a file display command that we will look at a bit later. We can scroll through this manual file by using the **ENTER** key or page down using the **PGDN** or **PGUP** key. To exit, we simply type &quot;**q**&quot;. 

**/ Finding files in the filesystem**

`locate` &gt;   Linux has multiple ways of finding application, commands, files, etc...         from the command line. Probably the easiest to use is locate. locate,         followed by a keyword, will go throughout your file system and locate         every occurrence of that word. Sometimes what locate finds is             overwhelming, too much information. In addition, if you just created a         file, it may not appear in this list as locate uses a database that is             updated once a day. A file you created today usually won&#39;t appear in that         database until tomorrow. 

           locate &lt;keyword&gt;

`whereis` &gt; If we know what we are looking for is a binary (similar to an executable         in Windows), Linux has a specific command for that. This command is         whereis. whereis will not only return the location of the binary, but         also it&#39;s manual or man page.
  
        whereis &lt;keyword&gt;
 
`which` &gt; The which command is even more specific. It will only return the location            of binaries that are in the PATH variable in Linux.

`find` &gt; The find command is the most powerful and most flexible of the finding         utilities. find is capable of beginning your search in any designated                 directory and looking for a number of different parameters including, of               course, file name, but also can find files that meet other criteria, such as:

 1. date of creation or modification;
 2. owner;
 3. group;
 4. permissions;
 5. size;

 The basic syntax for find is:

        find &lt;directory list to search&gt; &lt;options&gt; &lt;expression&gt;

So, if I wanted to search for a file starting in the top of the file system **(root) / directory** with the name **apache2**, I would type:

        find / -type -f -name apache2

Where:

* / is the directory to start searching
*  -type is the type of file in this case -f or an ordinary file
* -name search by name or apache2

It&#39;s also important to note that unlike some of the other search commands like `locate`,` find` only displays exact name matches. If the file **apache2** has an extension, such as apache2.**conf**, it will not match. We can remedy this limitation by using **wildcards** ( *., ? and []).

`grep` &gt; Very often, when using the command line, we may want to find a particular keyword. **grep is a filter** to search for keywords. It is often used when output is piped from one command to another. Linux allows us to take the output of one command and send it to another command. This is called                **piping** and we use | to do this . So, for instance, if I wanted to see all the services running on my Linux system, I can use the `ps` command followed by the `-aux` switches such as:

 `&gt; ps -aux`


This command outputs all the services running in this system. What if we wanted to find just one single service among this long list? We can do this by **piping the output** from `ps` to `grep` and look for a keyword. For instance, if I wanted to find out whether the apache2 service was running, we could type: ` &gt; ps -aux | grep apache2`

###/ Managing &amp; Manipulating files

####1. Creating Files:

There are **numerous ways** to create files in Linux, but we will examine two here. The first is `cat`. cat has nothing to do with your favorite domesticated feline, but rather it is short for con`cat`enate or placing pieces together. It is usually used for displaying the contents of a file, but also can be used to create a file, i.e:

`cat &lt;some_file&gt;` - Will output the contents of `&lt;some_file&gt;` to the terminal

We can also use the `cat` command to create a file by following the `cat` command with a **redirect (&gt;)** and a file name such as:

` cat &gt; hackingskills`

When we hit enter, Linux will go into **interactive mode** and wait for us to start typing the contents that go into the file. To beginners that can be puzzling. Simply begin typing and whatever you type will go into the file &quot;hackingskills&quot;. When you’re done, hit **Ctrl+D** to exit and return to the terminal prompt.

To **view the content** of “hacking skills”, simply type `cat hackingskills` , and you’re done!
If we wanted to add something to that file or **append it**, we can use the `cat` command with a **double redirect (&gt;&gt;)**. When we do this, whatever we type will be added to the file.

`cat &gt;&gt; hackingskills`

Linux goes into interactive mode, waiting for what we want to add to the file. After typing whatever you want, hit **Ctrl+D** and return to the prompt. Now if you display the content of the file again, you’ll see that whatever you **appended** will be there, **without overwritting** what was there already.

If we want to **overwrite** the file, we can simply use the `cat` command with a **single re-direct (&gt;)** such as: 

`cat &gt; hackingskills`

Once again, Linux goes into interactive mode and we type whatever we want. Now when we look for the contents of the file &quot;hackingskills&quot;, we can see that the file contents have been overwritten with the new content.

Linux has a command that might at first glance not seem like a file creation command called `touch`. This command was originally developed to simply &quot;touch&quot; a file to change its creation or alteration date. By default, it **creates the named file** if it doesn&#39;t already exist. As you might guess, it is that part of the command that makes it so useful for file creation.

`touch &lt;newfile&gt;`

####2. Creating a directory:

The command for creating a directory in Linux is `mkdir` or a contraction of `m`a`k`e `dir`ectory. If I wanted to create a directory named &quot;**newdirectory**&quot;, I would simply type:

`mkdir &lt;new_directory&gt;`

And then to move to this directory:

`cd &lt;new_directory&gt;`

####3. Removing a file
Removing a file is rather simple in Linux. We have the `rm` command for `r`e`m`oving a file.

`rm &lt;some_file&gt;`

To confirm the file has been deleted, you can ls the current directory.

####4. Copy a File

To copy files in Linux we use the `cp` command. `c`o`p`y makes a copy of the file in the new location and **leaves the old one in place.**

If we wanted to copy my `&lt;some_file_1&gt;` to my **/root/newdirectory** directory (this leaves oldfile in place), I would simply type:

`cp oldfile /root/newdirectory/newfile`

When we then navigate to newdirectory, we can see that there is an exact copy of the `&lt;some_file_1&gt;` called **newfile**. 

####5. Rename a File

Unfortunately, Linux doesn&#39;t really have a command for renaming a file like Windows and some other operating systems, but it does have the `mv`, or `m`o`v`e, command. 
The move command can be used to **move a file or directory to a new location** or simply to **give an existing file a new name**. If I wanted to rename `&lt;some_file_1&gt;` to `&lt;some_file_2`&gt;, I can use the move (`mv`) command to do so, such as:

`mv &lt;some_file_1&gt; &lt;some_file_2&gt;`

To check if you renamed the file successfully, simply `ls` the current directory.
####6. Remove a directory

To remove a directory, the Linux command is similar to the remove command for files, but with appended &quot;dir&quot;. Such as `rmdir`.

`rmdir &lt;some_directory&gt;`

It&#39;s important to note that `rmdir` will **NOT** remove a directory if there is anything (files or sub-directory) in the directory. It will give you a warning message that &quot;**directory is not empty**&quot;. 
You must first remove all the contents of the directory before removing the directory.
`rm` does have an option to automatically remove all files and directories within the named directory. Simply use the `-r` (recursive) switch after `rm` such as:

`rm -r &lt;some_directory&gt;`</description>
    
    <lastBuildDate>Tue, 06 Sep 2016 22:18:47 +0000</lastBuildDate>
    <category>Linux</category>
    <atom:link href="https://0x00sec.org/t/starting-with-linux/1053.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Starting with Linux</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/starting-with-linux/1053/11">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/starting-with-linux/1053/11</link>
        <pubDate>Sun, 21 Jan 2018 00:36:46 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1053-11</guid>
        <source url="https://0x00sec.org/t/starting-with-linux/1053.rss">Starting with Linux</source>
      </item>
      <item>
        <title>Starting with Linux</title>
        <dc:creator><![CDATA[n3xUs]]></dc:creator>
        <description><![CDATA[
            <p>Done! Yeah, maybe it’s easier this way…</p>
          <p><a href="https://0x00sec.org/t/starting-with-linux/1053/10">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/starting-with-linux/1053/10</link>
        <pubDate>Tue, 06 Sep 2016 22:18:47 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1053-10</guid>
        <source url="https://0x00sec.org/t/starting-with-linux/1053.rss">Starting with Linux</source>
      </item>
      <item>
        <title>Starting with Linux</title>
        <dc:creator><![CDATA[Sirius]]></dc:creator>
        <description><![CDATA[
            <p>Nvm, i lied. I just realized all i did was screenshot the pdf and uploaded it as a jpeg. Woops.</p>
          <p><a href="https://0x00sec.org/t/starting-with-linux/1053/9">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/starting-with-linux/1053/9</link>
        <pubDate>Tue, 06 Sep 2016 18:27:30 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1053-9</guid>
        <source url="https://0x00sec.org/t/starting-with-linux/1053.rss">Starting with Linux</source>
      </item>
      <item>
        <title>Starting with Linux</title>
        <dc:creator><![CDATA[_py]]></dc:creator>
        <description><![CDATA[
            <p>Just copy pasta the content of the pastebin in your post using the appropriate syntax.</p>
          <p><a href="https://0x00sec.org/t/starting-with-linux/1053/8">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/starting-with-linux/1053/8</link>
        <pubDate>Tue, 06 Sep 2016 18:21:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1053-8</guid>
        <source url="https://0x00sec.org/t/starting-with-linux/1053.rss">Starting with Linux</source>
      </item>
      <item>
        <title>Starting with Linux</title>
        <dc:creator><![CDATA[n3xUs]]></dc:creator>
        <description><![CDATA[
            <p>Are you sirius (pun intended)? How so?</p>
          <p><a href="https://0x00sec.org/t/starting-with-linux/1053/7">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/starting-with-linux/1053/7</link>
        <pubDate>Tue, 06 Sep 2016 18:16:59 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1053-7</guid>
        <source url="https://0x00sec.org/t/starting-with-linux/1053.rss">Starting with Linux</source>
      </item>
      <item>
        <title>Starting with Linux</title>
        <dc:creator><![CDATA[Sirius]]></dc:creator>
        <description><![CDATA[
            <p>Just a heads up, you can embed your PDF in your post so that nobody has to open anything.</p>
          <p><a href="https://0x00sec.org/t/starting-with-linux/1053/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/starting-with-linux/1053/6</link>
        <pubDate>Tue, 06 Sep 2016 17:42:02 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1053-6</guid>
        <source url="https://0x00sec.org/t/starting-with-linux/1053.rss">Starting with Linux</source>
      </item>
      <item>
        <title>Starting with Linux</title>
        <dc:creator><![CDATA[n3xUs]]></dc:creator>
        <description><![CDATA[
            <p>Just a heads up, I’ll post a link to pastebin soon but it might take a while since the text is formatted all wrong.</p>
          <p><a href="https://0x00sec.org/t/starting-with-linux/1053/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/starting-with-linux/1053/5</link>
        <pubDate>Mon, 05 Sep 2016 21:55:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1053-5</guid>
        <source url="https://0x00sec.org/t/starting-with-linux/1053.rss">Starting with Linux</source>
      </item>
      <item>
        <title>Starting with Linux</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Nice work! <img src="https://0x00sec.org/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> Linux rocks!</p>
          <p><a href="https://0x00sec.org/t/starting-with-linux/1053/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/starting-with-linux/1053/4</link>
        <pubDate>Mon, 05 Sep 2016 21:48:44 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1053-4</guid>
        <source url="https://0x00sec.org/t/starting-with-linux/1053.rss">Starting with Linux</source>
      </item>
      <item>
        <title>Starting with Linux</title>
        <dc:creator><![CDATA[n3xUs]]></dc:creator>
        <description><![CDATA[
            <p>Of course, I’ll change that in a sec</p>
          <p><a href="https://0x00sec.org/t/starting-with-linux/1053/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/starting-with-linux/1053/3</link>
        <pubDate>Mon, 05 Sep 2016 21:47:07 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1053-3</guid>
        <source url="https://0x00sec.org/t/starting-with-linux/1053.rss">Starting with Linux</source>
      </item>
      <item>
        <title>Starting with Linux</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>Do you think you could post a raw text file here or on pastebin instead? I’m sure you know why a bunch of people on this site wouldn’t want to open a PDF…</p>
          <p><a href="https://0x00sec.org/t/starting-with-linux/1053/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/starting-with-linux/1053/2</link>
        <pubDate>Mon, 05 Sep 2016 21:45:45 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1053-2</guid>
        <source url="https://0x00sec.org/t/starting-with-linux/1053.rss">Starting with Linux</source>
      </item>
      <item>
        <title>Starting with Linux</title>
        <dc:creator><![CDATA[n3xUs]]></dc:creator>
        <description><![CDATA[
            <p>Hey everyone! I know it’s been quite a while but here I am.</p>
<p>Today I bring you a Linux Tutorial (I guess you could call it that). As most of you know, OTW had a Linux Series entitled ‘Linux Basics for the Aspiring Hacker’ back in NB and is now reposting it on his own website <a href="http://www.hackers-arise.com/" rel="nofollow noopener">Hackers Arise</a>.</p>
<p>It was with this tutorials (and a few others) that I started learning Linux, and I thought I should share my own notes regarding this series. Basicaly I wrote a text document (which I have now converted to a .pdf file) that’s is pretty similar to OTW’s original article, but with a few chages to make it more simple and accessible, at least for me.</p>
<p>Here’s the link:</p>
<p><a href="https://mega.nz/#!BIs0TAqI!QOJ_BoxwuB-A1m9_gx50aPxzX5Kt_xJ7YzRWOvVoXbY" class="onebox" target="_blank" rel="nofollow noopener">https://mega.nz/#!BIs0TAqI!QOJ_BoxwuB-A1m9_gx50aPxzX5Kt_xJ7YzRWOvVoXbY</a></p>
<p>As suggested, here’s goes the raw text. Hope you enjoy:</p>
<hr>
<p>#<strong><em>Linux Basics</em></strong></p>
<p><strong>/ Opening a Terminal &gt; Shortcut: Ctrl + Alt + T</strong></p>
<p>Most Terminals default to open a shell. A shell is simply a command line environment that enables us to run commands on the underlying operating systems and write scripts. Their are many different shell environments in Linux, but the most popular is the <strong>BASH</strong> shell or <strong>B</strong>ourne <strong>A</strong>gain <strong>Sh</strong>ell.</p>
<p><strong>/ File System &gt;</strong>  Unlike Windows file system, Linux systems are not limited by the physical drive. The Linux file system has at the top of its file structure the <strong>root</strong> or <strong>/</strong>. This does not represent the physical drive, but simply the top of the logical file structure.</p>
<p>Notice in this diagram of the Linux file system above that at the very top of the file system is the / or root of the file system. Here, root simply is the very base of the file structure. As a beginner, probably the most important sub-directories under <strong>/</strong> are:</p>
<ol>
<li>
<strong>/root</strong> &gt; this represents the home directory of the  super-user</li>
<li>
<strong>/etc</strong>   &gt; where the configuration files reside in Linux</li>
<li>
<strong>/home</strong> &gt; home directory of a user</li>
<li>
<strong>/mnt</strong>   &gt; where other file systems are attached or mounted to the filesystem</li>
<li>
<strong>/bin</strong>   &gt; where the binaries or executables in Windows language reside</li>
<li>
<strong>/lib</strong>   &gt; directory where the libraries reside.</li>
</ol>
<p><strong>/ Getting started with the command line…</strong></p>
<p><code>pwd</code> &gt; or <code>p</code>resent <code>w</code>orking <code>d</code>irectory, returns where you are in the directory           structure.</p>
<p><code>whoami</code> &gt; outputs the current logged in user</p>
<p><code>cd</code> &gt; or change directory. Crucial command to navigate around the filesystem.</p>
<pre><code>cd &lt;name_of_directory&gt; - moves to the desired     directory; 
cd .. - moves up one level in the file structure 
</code></pre>
<p><code>ls</code> &gt; or <code>l</code>i<code>s</code>t, lists the contents of a directory (for a complete list of the contents,  type <code>ls -alt</code>)</p>
<p><code>-h</code> &gt; or<code> --help</code>. Nearly every command has a help file. These help files provide a      cursory help screen to assist your understanding of the command, utility or     application.</p>
<pre><code>&lt;program_name&gt; -h or &lt;program_name&gt; --help
</code></pre>
<p><code>man</code> &gt; In addition to the help switch available for most commands and applications, you can find more information about a particular application or command by going to its <code>man</code>ual page. Nearly every Linux distribution maintains a manual for all utilities, commands and applications. You can view the manual by simply typing <code>man</code> before the command, utility or application such as:</p>
<pre><code>man &lt;program_name&gt;
</code></pre>
<p>With man, Linux opens the manual with the  <code>more</code> commands, a file display command that we will look at a bit later. We can scroll through this manual file by using the <strong>ENTER</strong> key or page down using the <strong>PGDN</strong> or <strong>PGUP</strong> key. To exit, we simply type “<strong>q</strong>”.</p>
<p><strong>/ Finding files in the filesystem</strong></p>
<p><code>locate</code> &gt;   Linux has multiple ways of finding application, commands, files, etc…         from the command line. Probably the easiest to use is locate. locate,         followed by a keyword, will go throughout your file system and locate         every occurrence of that word. Sometimes what locate finds is             overwhelming, too much information. In addition, if you just created a         file, it may not appear in this list as locate uses a database that is             updated once a day. A file you created today usually won’t appear in that         database until tomorrow.</p>
<pre><code>       locate &lt;keyword&gt;
</code></pre>
<p><code>whereis</code> &gt; If we know what we are looking for is a binary (similar to an executable         in Windows), Linux has a specific command for that. This command is         whereis. whereis will not only return the location of the binary, but         also it’s manual or man page.</p>
<pre><code>    whereis &lt;keyword&gt;
</code></pre>
<p><code>which</code> &gt; The which command is even more specific. It will only return the location            of binaries that are in the PATH variable in Linux.</p>
<p><code>find</code> &gt; The find command is the most powerful and most flexible of the finding         utilities. find is capable of beginning your search in any designated                 directory and looking for a number of different parameters including, of               course, file name, but also can find files that meet other criteria, such as:</p>
<ol>
<li>date of creation or modification;</li>
<li>owner;</li>
<li>group;</li>
<li>permissions;</li>
<li>size;</li>
</ol>
<p>The basic syntax for find is:</p>
<pre><code>    find &lt;directory list to search&gt; &lt;options&gt; &lt;expression&gt;
</code></pre>
<p>So, if I wanted to search for a file starting in the top of the file system <strong>(root) / directory</strong> with the name <strong>apache2</strong>, I would type:</p>
<pre><code>    find / -type -f -name apache2
</code></pre>
<p>Where:</p>
<ul>
<li>/ is the directory to start searching</li>
<li>-type is the type of file in this case -f or an ordinary file</li>
<li>-name search by name or apache2</li>
</ul>
<p>It’s also important to note that unlike some of the other search commands like <code>locate</code>,<code> find</code> only displays exact name matches. If the file <strong>apache2</strong> has an extension, such as apache2.<strong>conf</strong>, it will not match. We can remedy this limitation by using <strong>wildcards</strong> ( *., ? and []).</p>
<p><code>grep</code> &gt; Very often, when using the command line, we may want to find a particular keyword. <strong>grep is a filter</strong> to search for keywords. It is often used when output is piped from one command to another. Linux allows us to take the output of one command and send it to another command. This is called                <strong>piping</strong> and we use | to do this . So, for instance, if I wanted to see all the services running on my Linux system, I can use the <code>ps</code> command followed by the <code>-aux</code> switches such as:</p>
<p><code>&gt; ps -aux</code></p>
<p>This command outputs all the services running in this system. What if we wanted to find just one single service among this long list? We can do this by <strong>piping the output</strong> from <code>ps</code> to <code>grep</code> and look for a keyword. For instance, if I wanted to find out whether the apache2 service was running, we could type: <code> &gt; ps -aux | grep apache2</code></p>
<p>###/ Managing &amp; Manipulating files</p>
<p>###<span class="hashtag">#1</span>. Creating Files:</p>
<p>There are <strong>numerous ways</strong> to create files in Linux, but we will examine two here. The first is <code>cat</code>. cat has nothing to do with your favorite domesticated feline, but rather it is short for con<code>cat</code>enate or placing pieces together. It is usually used for displaying the contents of a file, but also can be used to create a file, i.e:</p>
<p><code>cat &lt;some_file&gt;</code> - Will output the contents of <code>&lt;some_file&gt;</code> to the terminal</p>
<p>We can also use the <code>cat</code> command to create a file by following the <code>cat</code> command with a <strong>redirect (&gt;)</strong> and a file name such as:</p>
<p><code> cat &gt; hackingskills</code></p>
<p>When we hit enter, Linux will go into <strong>interactive mode</strong> and wait for us to start typing the contents that go into the file. To beginners that can be puzzling. Simply begin typing and whatever you type will go into the file “hackingskills”. When you’re done, hit <strong>Ctrl+D</strong> to exit and return to the terminal prompt.</p>
<p>To <strong>view the content</strong> of “hacking skills”, simply type <code>cat hackingskills</code> , and you’re done!<br>
If we wanted to add something to that file or <strong>append it</strong>, we can use the <code>cat</code> command with a <strong>double redirect (&gt;&gt;)</strong>. When we do this, whatever we type will be added to the file.</p>
<p><code>cat &gt;&gt; hackingskills</code></p>
<p>Linux goes into interactive mode, waiting for what we want to add to the file. After typing whatever you want, hit <strong>Ctrl+D</strong> and return to the prompt. Now if you display the content of the file again, you’ll see that whatever you <strong>appended</strong> will be there, <strong>without overwritting</strong> what was there already.</p>
<p>If we want to <strong>overwrite</strong> the file, we can simply use the <code>cat</code> command with a <strong>single re-direct (&gt;)</strong> such as:</p>
<p><code>cat &gt; hackingskills</code></p>
<p>Once again, Linux goes into interactive mode and we type whatever we want. Now when we look for the contents of the file “hackingskills”, we can see that the file contents have been overwritten with the new content.</p>
<p>Linux has a command that might at first glance not seem like a file creation command called <code>touch</code>. This command was originally developed to simply “touch” a file to change its creation or alteration date. By default, it <strong>creates the named file</strong> if it doesn’t already exist. As you might guess, it is that part of the command that makes it so useful for file creation.</p>
<p><code>touch &lt;newfile&gt;</code></p>
<p>###<span class="hashtag">#2</span>. Creating a directory:</p>
<p>The command for creating a directory in Linux is <code>mkdir</code> or a contraction of <code>m</code>a<code>k</code>e <code>dir</code>ectory. If I wanted to create a directory named “<strong>newdirectory</strong>”, I would simply type:</p>
<p><code>mkdir &lt;new_directory&gt;</code></p>
<p>And then to move to this directory:</p>
<p><code>cd &lt;new_directory&gt;</code></p>
<p>###<span class="hashtag">#3</span>. Removing a file<br>
Removing a file is rather simple in Linux. We have the <code>rm</code> command for <code>r</code>e<code>m</code>oving a file.</p>
<p><code>rm &lt;some_file&gt;</code></p>
<p>To confirm the file has been deleted, you can ls the current directory.</p>
<p>###<span class="hashtag">#4</span>. Copy a File</p>
<p>To copy files in Linux we use the <code>cp</code> command. <code>c</code>o<code>p</code>y makes a copy of the file in the new location and <strong>leaves the old one in place.</strong></p>
<p>If we wanted to copy my <code>&lt;some_file_1&gt;</code> to my <strong>/root/newdirectory</strong> directory (this leaves oldfile in place), I would simply type:</p>
<p><code>cp oldfile /root/newdirectory/newfile</code></p>
<p>When we then navigate to newdirectory, we can see that there is an exact copy of the <code>&lt;some_file_1&gt;</code> called <strong>newfile</strong>.</p>
<p>###<span class="hashtag">#5</span>. Rename a File</p>
<p>Unfortunately, Linux doesn’t really have a command for renaming a file like Windows and some other operating systems, but it does have the <code>mv</code>, or <code>m</code>o<code>v</code>e, command.<br>
The move command can be used to <strong>move a file or directory to a new location</strong> or simply to <strong>give an existing file a new name</strong>. If I wanted to rename <code>&lt;some_file_1&gt;</code> to <code>&lt;some_file_2</code>&gt;, I can use the move (<code>mv</code>) command to do so, such as:</p>
<p><code>mv &lt;some_file_1&gt; &lt;some_file_2&gt;</code></p>
<p>To check if you renamed the file successfully, simply <code>ls</code> the current directory.<br>
###<span class="hashtag">#6</span>. Remove a directory</p>
<p>To remove a directory, the Linux command is similar to the remove command for files, but with appended “dir”. Such as <code>rmdir</code>.</p>
<p><code>rmdir &lt;some_directory&gt;</code></p>
<p>It’s important to note that <code>rmdir</code> will <strong>NOT</strong> remove a directory if there is anything (files or sub-directory) in the directory. It will give you a warning message that “<strong>directory is not empty</strong>”.<br>
You must first remove all the contents of the directory before removing the directory.<br>
<code>rm</code> does have an option to automatically remove all files and directories within the named directory. Simply use the <code>-r</code> (recursive) switch after <code>rm</code> such as:</p>
<p><code>rm -r &lt;some_directory&gt;</code></p>
          <p><a href="https://0x00sec.org/t/starting-with-linux/1053/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/starting-with-linux/1053/1</link>
        <pubDate>Mon, 05 Sep 2016 21:43:57 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-1053-1</guid>
        <source url="https://0x00sec.org/t/starting-with-linux/1053.rss">Starting with Linux</source>
      </item>
  </channel>
</rss>
