<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C#] Dynamic Crypto</title>
    <link>https://0x00sec.org/t/c-dynamic-crypto/815</link>
    <description>ok today im going to show you how to make a dynamic crypto

a dynamic crypto in a nutshell
if my message is: hi how are you?
i have 2xh and 2xo 
my encrypted text: ij,jpx.bsf:zqv!
its with the cizer cipher just dynamic
if i just decoded it id get  hi iow are ypu?
its simple but were gonna make it a bit better
were gonna add 1 to the offset for each next letter 
we will just be using 
```C#
using System;//just for a the exeptions
```
now we will make to encryption class
we will set up the offsets and the alphabet 
```C#
        private int e_offset = 1;
        private int d_offset = 1;
        public Char[] alphabet = new Char[]
        { &#39;q&#39;, &#39;w&#39;, &#39;e&#39;, &#39;r&#39;, &#39;t&#39;, &#39;z&#39;, &#39;u&#39;, &#39;i&#39;, &#39;o&#39;, &#39;p&#39;, &#39;a&#39;, &#39;s&#39;, &#39;d&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;y&#39;, &#39;x&#39;, &#39;c&#39;, &#39;v&#39;, &#39;b&#39;,
            &#39;n&#39;, &#39;m&#39;, &#39;Q&#39;, &#39;W&#39;, &#39;E&#39;, &#39;R&#39;, &#39;T&#39;, &#39;Z&#39;, &#39;U&#39;, &#39;I&#39;, &#39;O&#39;, &#39;P&#39;, &#39;A&#39;, &#39;S&#39;, &#39;D&#39;, &#39;F&#39;, &#39;G&#39;, &#39;H&#39;, &#39;J&#39;, &#39;K&#39;, &#39;L&#39;, &#39;Y&#39;, &#39;X&#39;, &#39;C&#39;,
            &#39;V&#39;, &#39;B&#39;, &#39;N&#39;, &#39;M&#39;, &#39; &#39;}/;/german qwertz keyboard
```
for the encryption we will turn the string into a char array
then we will find where the char is in our alphabet and add the offset 
and add the result to a string and repeat for the rest
iv made it easier for you to add your own alphabet
```C#
        public string encrypt(string text)
        {
            string end = &quot;&quot;;
            char[] char_text = text.ToCharArray();
            for (int y = 0; y &lt; text.Length; y++)
            {
                int num_of_char = 0;
                for (int x = 0; x &lt; alphabet.Length; x++)
                {
                    if (char_text[y] == alphabet[x])
                    {
                        num_of_char = x + e_offset;
                        e_offset++;
                        break;
                    }
                    else if (x == alphabet.Length)
                    {
                        throw new Exception(&quot;un-supported character&quot;);
                    }
                }
                if (num_of_char &gt; alphabet.Length)
                {
                    
                    int temp = num_of_char % alphabet.Length;
                    num_of_char = 0;
                    for (int x = 0; x &lt; alphabet.Length; x++)
                    {
                        if (temp != 0)
                        {
                            num_of_char++;
                            temp++;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
                end += alphabet[num_of_char].ToString();
            }
            return end;
        }
```
for the decryption it gets a bit harder we have to do the same thing just in revers so instead of + its -
and if we go under the 0 it we have carry on from alphabet.Length
```C#
        public string decrypt(string text)
        {
            string end = &quot;&quot;;
            char[] char_text = text.ToCharArray();//turns string to char 
            for (int y = 0; y &lt; text.Length; y++)
            {
                int num_of_char = 0;
                for (int x = 0; x &lt; alphabet.Length; x++)
                {
                    if (char_text[y] == alphabet[x])//gets to location of the same char
                    {
                        num_of_char = x;
                        
                        break;
                    }
                    else if (x == alphabet.Length)
                    {
                        throw new Exception(&quot;un-supported character&quot;);
                    }
                }
            int res = 0;// % will allwas return as a int less than 0
            int temp = num_of_char - d_offset % alphabet.Length;//so we dont go over
            for (int x = 0; x &lt; alphabet.Length; x++ )//so we dont go under
            {
                if (temp &gt;= 0)
                {
                    temp++;
                    res++;//flips int e.g: -9 will turn into 9
                }
                else
                {
                    break;
                }
            }
                end += alphabet[res].ToString();//gets the char pos and gose back as far as the off set is
                d_offset++;
            }
            return end;

        }
    }
    
```

i encrypted (hhhhh) and got (jklyx)
thats all to it have fun
-dedady-</description>
    
    <lastBuildDate>Tue, 26 Jul 2016 13:48:33 +0000</lastBuildDate>
    <category>Algorithms</category>
    <atom:link href="https://0x00sec.org/t/c-dynamic-crypto/815.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C#] Dynamic Crypto</title>
        <dc:creator><![CDATA[system]]></dc:creator>
        <description><![CDATA[
            <p>This topic was automatically closed after 30 days. New replies are no longer allowed.</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-crypto/815/6">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-crypto/815/6</link>
        <pubDate>Sun, 21 Jan 2018 00:37:40 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-815-6</guid>
        <source url="https://0x00sec.org/t/c-dynamic-crypto/815.rss">[C#] Dynamic Crypto</source>
      </item>
      <item>
        <title>[C#] Dynamic Crypto</title>
        <dc:creator><![CDATA[pry0cc]]></dc:creator>
        <description><![CDATA[
            <p>Bravo made me laugh like mad <img src="https://0x00sec.org/images/emoji/twitter/laughing.png?v=9" title=":laughing:" class="emoji" alt=":laughing:"></p>
          <p><a href="https://0x00sec.org/t/c-dynamic-crypto/815/5">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-crypto/815/5</link>
        <pubDate>Tue, 26 Jul 2016 13:48:33 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-815-5</guid>
        <source url="https://0x00sec.org/t/c-dynamic-crypto/815.rss">[C#] Dynamic Crypto</source>
      </item>
      <item>
        <title>[C#] Dynamic Crypto</title>
        <dc:creator><![CDATA[Nitrax]]></dc:creator>
        <description><![CDATA[
            <p>Well, if I understood correctly it is like a monoalphabetic cipher with an incremental padding but I doubt about the efficiency and the applicability of such cypher (cf. <a href="https://en.wikipedia.org/wiki/Kerckhoffs%27s_principle" rel="nofollow noopener">Kerckhoffs principle</a>).</p>
<p>Upstream, I have some feedbacks about your article presentation. Firstly, it could be nice to be consistent in your coding style and try, as much as possible, to aerate your code base ! It will considerably improve your readability and consequently, the enjoyability of such reading. Lastly, more explanations would be appreciated, mainly if the code is not self explaining.</p>
<p>Good luck.</p>
<p>Best,<br>
Nitrax</p>
<p>P.S: Your code can be easily simplify. Think about ascii character representation, pre incrementation, â€¦</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-crypto/815/4">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-crypto/815/4</link>
        <pubDate>Tue, 26 Jul 2016 12:27:54 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-815-4</guid>
        <source url="https://0x00sec.org/t/c-dynamic-crypto/815.rss">[C#] Dynamic Crypto</source>
      </item>
      <item>
        <title>[C#] Dynamic Crypto</title>
        <dc:creator><![CDATA[dedady157]]></dc:creator>
        <description><![CDATA[
            <p>oaktree is this better?</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-crypto/815/3">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-crypto/815/3</link>
        <pubDate>Tue, 26 Jul 2016 01:18:28 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-815-3</guid>
        <source url="https://0x00sec.org/t/c-dynamic-crypto/815.rss">[C#] Dynamic Crypto</source>
      </item>
      <item>
        <title>[C#] Dynamic Crypto</title>
        <dc:creator><![CDATA[oaktree]]></dc:creator>
        <description><![CDATA[
            <p>What?</p>
<p><img src="//0x00sec.s3.amazonaws.com/original/1X/f45062849a63ff8219b284cd6dafde8103e95d8f.png" alt="wat." width="" height=""></p>
<p>Could you please explain this all a little more?</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-crypto/815/2">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-crypto/815/2</link>
        <pubDate>Mon, 25 Jul 2016 23:40:52 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-815-2</guid>
        <source url="https://0x00sec.org/t/c-dynamic-crypto/815.rss">[C#] Dynamic Crypto</source>
      </item>
      <item>
        <title>[C#] Dynamic Crypto</title>
        <dc:creator><![CDATA[dedady157]]></dc:creator>
        <description><![CDATA[
            <p>ok today im going to show you how to make a dynamic crypto</p>
<p>a dynamic crypto in a nutshell<br>
if my message is: hi how are you?<br>
i have 2xh and 2xo<br>
my encrypted text: ij,jpx.bsf:zqv!<br>
its with the cizer cipher just dynamic<br>
if i just decoded it id get  hi iow are ypu?<br>
its simple but were gonna make it a bit better<br>
were gonna add 1 to the offset for each next letter<br>
we will just be using</p>
<pre><code class="lang-auto">using System;//just for a the exeptions
</code></pre>
<p>now we will make to encryption class<br>
we will set up the offsets and the alphabet</p>
<pre><code class="lang-auto">        private int e_offset = 1;
        private int d_offset = 1;
        public Char[] alphabet = new Char[]
        { 'q', 'w', 'e', 'r', 't', 'z', 'u', 'i', 'o', 'p', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'y', 'x', 'c', 'v', 'b',
            'n', 'm', 'Q', 'W', 'E', 'R', 'T', 'Z', 'U', 'I', 'O', 'P', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'Y', 'X', 'C',
            'V', 'B', 'N', 'M', ' '}/;/german qwertz keyboard
</code></pre>
<p>for the encryption we will turn the string into a char array<br>
then we will find where the char is in our alphabet and add the offset<br>
and add the result to a string and repeat for the rest<br>
iv made it easier for you to add your own alphabet</p>
<pre><code class="lang-auto">        public string encrypt(string text)
        {
            string end = "";
            char[] char_text = text.ToCharArray();
            for (int y = 0; y &lt; text.Length; y++)
            {
                int num_of_char = 0;
                for (int x = 0; x &lt; alphabet.Length; x++)
                {
                    if (char_text[y] == alphabet[x])
                    {
                        num_of_char = x + e_offset;
                        e_offset++;
                        break;
                    }
                    else if (x == alphabet.Length)
                    {
                        throw new Exception("un-supported character");
                    }
                }
                if (num_of_char &gt; alphabet.Length)
                {
                    
                    int temp = num_of_char % alphabet.Length;
                    num_of_char = 0;
                    for (int x = 0; x &lt; alphabet.Length; x++)
                    {
                        if (temp != 0)
                        {
                            num_of_char++;
                            temp++;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
                end += alphabet[num_of_char].ToString();
            }
            return end;
        }
</code></pre>
<p>for the decryption it gets a bit harder we have to do the same thing just in revers so instead of + its -<br>
and if we go under the 0 it we have carry on from alphabet.Length</p>
<pre><code class="lang-auto">        public string decrypt(string text)
        {
            string end = "";
            char[] char_text = text.ToCharArray();//turns string to char 
            for (int y = 0; y &lt; text.Length; y++)
            {
                int num_of_char = 0;
                for (int x = 0; x &lt; alphabet.Length; x++)
                {
                    if (char_text[y] == alphabet[x])//gets to location of the same char
                    {
                        num_of_char = x;
                        
                        break;
                    }
                    else if (x == alphabet.Length)
                    {
                        throw new Exception("un-supported character");
                    }
                }
            int res = 0;// % will allwas return as a int less than 0
            int temp = num_of_char - d_offset % alphabet.Length;//so we dont go over
            for (int x = 0; x &lt; alphabet.Length; x++ )//so we dont go under
            {
                if (temp &gt;= 0)
                {
                    temp++;
                    res++;//flips int e.g: -9 will turn into 9
                }
                else
                {
                    break;
                }
            }
                end += alphabet[res].ToString();//gets the char pos and gose back as far as the off set is
                d_offset++;
            }
            return end;

        }
    }
    
</code></pre>
<p>i encrypted (hhhhh) and got (jklyx)<br>
thats all to it have fun<br>
-dedady-</p>
          <p><a href="https://0x00sec.org/t/c-dynamic-crypto/815/1">Read full topic</a></p>
        ]]></description>
        <link>https://0x00sec.org/t/c-dynamic-crypto/815/1</link>
        <pubDate>Mon, 25 Jul 2016 20:45:41 +0000</pubDate>
        <guid isPermaLink="false">0x00sec.org-post-815-1</guid>
        <source url="https://0x00sec.org/t/c-dynamic-crypto/815.rss">[C#] Dynamic Crypto</source>
      </item>
  </channel>
</rss>
